import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import org.junit.Test;
import types.testing.AbstractTestSuite;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestSuite_2_2c extends AbstractTestSuite {
	public static class Part_0 {
		@Test public void test_0() { testValid("{int}","{int}"); }
		@Test public void test_1() { testInvalid("{int}","{any, any}"); }
		@Test public void test_2() { testInvalid("{int}","{int, int}"); }
		@Test public void test_3() { testInvalid("{int}","(any | int)"); }
		@Test public void test_4() { testInvalid("{int}","(int & any)"); }
		@Test public void test_5() { testInvalid("{int}","{{any}}"); }
		@Test public void test_6() { testInvalid("{int}","{{int, any}}"); }
		@Test public void test_7() { testInvalid("{int}","{{int, int}}"); }
		@Test public void test_8() { testInvalid("{int}","{(any | int)}"); }
		@Test public void test_9() { testInvalid("{int}","!{int, any}"); }
		@Test public void test_10() { testInvalid("{int}","!{int, int}"); }
		@Test public void test_11() { testValid("{int}","!(any | any)"); }
		@Test public void test_12() { testValid("{int}","!(any & any)"); }
		@Test public void test_13() { testInvalid("{int}","!(int & int)"); }
		@Test public void test_14() { testInvalid("{int}","{{int}, {any}}"); }
		@Test public void test_15() { testInvalid("{int}","{!int, {any}}"); }
		@Test public void test_16() { testInvalid("{int}","{{int, int}, {any}}"); }
		@Test public void test_17() { testInvalid("{int}","{(any | int), {any}}"); }
		@Test public void test_18() { testInvalid("{int}","{!int, {int}}"); }
		@Test public void test_19() { testInvalid("{int}","{{any, any}, {int}}"); }
		@Test public void test_20() { testInvalid("{int}","{(any | any), {int}}"); }
		@Test public void test_21() { testInvalid("{int}","{(any & any), {int}}"); }
		@Test public void test_22() { testInvalid("{int}","{(any & int), {int}}"); }
		@Test public void test_23() { testInvalid("{int}","{{any, any}, !int}"); }
		@Test public void test_24() { testInvalid("{int}","{{any, int}, !int}"); }
		@Test public void test_25() { testInvalid("{int}","{(any | any), !int}"); }
		@Test public void test_26() { testInvalid("{int}","{(int | any), !int}"); }
		@Test public void test_27() { testInvalid("{int}","{(any & any), !int}"); }
		@Test public void test_28() { testInvalid("{int}","{(int & any), !int}"); }
		@Test public void test_29() { testInvalid("{int}","{(int & int), !int}"); }
		@Test public void test_30() { testInvalid("{int}","{{any}, {any, any}}"); }
		@Test public void test_31() { testInvalid("{int}","{{int}, {any, any}}"); }
		@Test public void test_32() { testInvalid("{int}","{{int, int}, {any, any}}"); }
		@Test public void test_33() { testInvalid("{int}","{(any | any), {any, any}}"); }
		@Test public void test_34() { testInvalid("{int}","{(any | int), {any, any}}"); }
		@Test public void test_35() { testInvalid("{int}","{!int, {int, any}}"); }
		@Test public void test_36() { testInvalid("{int}","{{int, any}, {int, any}}"); }
		@Test public void test_37() { testInvalid("{int}","{{any, int}, {int, any}}"); }
		@Test public void test_38() { testInvalid("{int}","{(any & int), {int, any}}"); }
		@Test public void test_39() { testInvalid("{int}","{{any}, {any, int}}"); }
		@Test public void test_40() { testInvalid("{int}","{{int, int}, {any, int}}"); }
		@Test public void test_41() { testInvalid("{int}","{(int | int), {any, int}}"); }
		@Test public void test_42() { testInvalid("{int}","{(any & int), {any, int}}"); }
		@Test public void test_43() { testInvalid("{int}","{!int, {int, int}}"); }
		@Test public void test_44() { testInvalid("{int}","{{int, int}, {int, int}}"); }
		@Test public void test_45() { testInvalid("{int}","{(any | any), {int, int}}"); }
		@Test public void test_46() { testInvalid("{int}","{(int | any), {int, int}}"); }
		@Test public void test_47() { testInvalid("{int}","{(int & any), {int, int}}"); }
		@Test public void test_48() { testInvalid("{int}","{{int}, (any | any)}"); }
		@Test public void test_49() { testInvalid("{int}","{{int, any}, (any | any)}"); }
		@Test public void test_50() { testInvalid("{int}","{{any, int}, (any | any)}"); }
		@Test public void test_51() { testInvalid("{int}","{(any | any), (any | any)}"); }
		@Test public void test_52() { testInvalid("{int}","{(int | any), (any | any)}"); }
		@Test public void test_53() { testInvalid("{int}","{(int & int), (any | any)}"); }
		@Test public void test_54() { testInvalid("{int}","{!int, (int | any)}"); }
		@Test public void test_55() { testInvalid("{int}","{{int, int}, (int | any)}"); }
		@Test public void test_56() { testInvalid("{int}","{(any | any), (int | any)}"); }
		@Test public void test_57() { testInvalid("{int}","{(int | int), (int | any)}"); }
		@Test public void test_58() { testInvalid("{int}","{{any}, (any | int)}"); }
		@Test public void test_59() { testInvalid("{int}","{!int, (any | int)}"); }
		@Test public void test_60() { testInvalid("{int}","{(any | any), (any | int)}"); }
		@Test public void test_61() { testInvalid("{int}","{(any | int), (any | int)}"); }
		@Test public void test_62() { testInvalid("{int}","{(any & int), (any | int)}"); }
		@Test public void test_63() { testInvalid("{int}","{{int}, (int | int)}"); }
		@Test public void test_64() { testInvalid("{int}","{{any, any}, (int | int)}"); }
		@Test public void test_65() { testInvalid("{int}","{{int, int}, (int | int)}"); }
		@Test public void test_66() { testInvalid("{int}","{{int}, (any & any)}"); }
		@Test public void test_67() { testInvalid("{int}","{{int, any}, (any & any)}"); }
		@Test public void test_68() { testInvalid("{int}","{{any, int}, (any & any)}"); }
		@Test public void test_69() { testInvalid("{int}","{(int | any), (any & any)}"); }
		@Test public void test_70() { testInvalid("{int}","{(any & any), (any & any)}"); }
		@Test public void test_71() { testInvalid("{int}","{(int & any), (any & any)}"); }
		@Test public void test_72() { testInvalid("{int}","{{any}, (int & any)}"); }
		@Test public void test_73() { testInvalid("{int}","{{int}, (int & any)}"); }
		@Test public void test_74() { testInvalid("{int}","{{any, any}, (int & any)}"); }
		@Test public void test_75() { testInvalid("{int}","{{int, any}, (int & any)}"); }
		@Test public void test_76() { testInvalid("{int}","{(any | int), (int & any)}"); }
		@Test public void test_77() { testInvalid("{int}","{(any & any), (int & any)}"); }
		@Test public void test_78() { testInvalid("{int}","{(int & any), (int & any)}"); }
		@Test public void test_79() { testInvalid("{int}","{(int & int), (int & any)}"); }
		@Test public void test_80() { testInvalid("{int}","{{int, any}, (any & int)}"); }
		@Test public void test_81() { testInvalid("{int}","{(any & any), (any & int)}"); }
		@Test public void test_82() { testInvalid("{int}","{{any, int}, (int & int)}"); }
		@Test public void test_83() { testInvalid("{int}","{(int | int), (int & int)}"); }
		@Test public void test_84() { testInvalid("{int}","{(any & any), (int & int)}"); }
		@Test public void test_85() { testInvalid("{int}","{(any & int), (int & int)}"); }
		@Test public void test_86() { testInvalid("{int}","{(int & int), (int & int)}"); }
		@Test public void test_87() { testInvalid("{int}","(!int | {any})"); }
		@Test public void test_88() { testInvalid("{int}","({any, any} | {any})"); }
		@Test public void test_89() { testInvalid("{int}","((any | any) | {any})"); }
		@Test public void test_90() { testInvalid("{int}","((int | any) | {any})"); }
		@Test public void test_91() { testInvalid("{int}","((any & any) | {any})"); }
		@Test public void test_92() { testInvalid("{int}","((int & any) | {any})"); }
		@Test public void test_93() { testInvalid("{int}","((any & int) | {any})"); }
		@Test public void test_94() { testValid("{int}","({int} | {int})"); }
		@Test public void test_95() { testValid("{int}","(!any | {int})"); }
		@Test public void test_96() { testInvalid("{int}","(!int | {int})"); }
		@Test public void test_97() { testInvalid("{int}","({any, int} | {int})"); }
		@Test public void test_98() { testInvalid("{int}","((int & any) | {int})"); }
		@Test public void test_99() { testInvalid("{int}","((any & int) | {int})"); }
		@Test public void test_100() { testInvalid("{int}","((int & int) | {int})"); }
		@Test public void test_101() { testInvalid("{int}","({any} | !any)"); }
		@Test public void test_102() { testValid("{int}","({int} | !any)"); }
		@Test public void test_103() { testInvalid("{int}","({any, any} | !any)"); }
		@Test public void test_104() { testInvalid("{int}","({int, int} | !any)"); }
		@Test public void test_105() { testInvalid("{int}","((any | any) | !any)"); }
		@Test public void test_106() { testInvalid("{int}","((int | any) | !any)"); }
		@Test public void test_107() { testInvalid("{int}","((int | int) | !any)"); }
		@Test public void test_108() { testInvalid("{int}","((int & int) | !any)"); }
		@Test public void test_109() { testInvalid("{int}","(!int | !int)"); }
		@Test public void test_110() { testInvalid("{int}","({any, any} | !int)"); }
		@Test public void test_111() { testInvalid("{int}","({int, int} | !int)"); }
		@Test public void test_112() { testInvalid("{int}","((int | any) | !int)"); }
		@Test public void test_113() { testInvalid("{int}","((any | int) | !int)"); }
		@Test public void test_114() { testInvalid("{int}","((any & int) | !int)"); }
		@Test public void test_115() { testInvalid("{int}","((int & int) | !int)"); }
		@Test public void test_116() { testInvalid("{int}","({int} | {any, any})"); }
		@Test public void test_117() { testInvalid("{int}","(!any | {any, any})"); }
		@Test public void test_118() { testInvalid("{int}","(!int | {any, any})"); }
		@Test public void test_119() { testInvalid("{int}","({any, int} | {any, any})"); }
		@Test public void test_120() { testInvalid("{int}","((int | any) | {any, any})"); }
		@Test public void test_121() { testInvalid("{int}","((any & any) | {any, any})"); }
		@Test public void test_122() { testInvalid("{int}","((any & int) | {any, any})"); }
		@Test public void test_123() { testInvalid("{int}","(!int | {int, any})"); }
		@Test public void test_124() { testInvalid("{int}","({any, int} | {int, any})"); }
		@Test public void test_125() { testInvalid("{int}","((any | any) | {int, any})"); }
		@Test public void test_126() { testInvalid("{int}","((int | any) | {int, any})"); }
		@Test public void test_127() { testInvalid("{int}","((any | int) | {int, any})"); }
		@Test public void test_128() { testInvalid("{int}","((int & any) | {int, any})"); }
		@Test public void test_129() { testInvalid("{int}","({any} | {any, int})"); }
		@Test public void test_130() { testInvalid("{int}","(!int | {any, int})"); }
		@Test public void test_131() { testInvalid("{int}","({any, int} | {any, int})"); }
		@Test public void test_132() { testInvalid("{int}","((any | any) | {any, int})"); }
		@Test public void test_133() { testInvalid("{int}","((any | int) | {any, int})"); }
		@Test public void test_134() { testInvalid("{int}","((int | int) | {any, int})"); }
		@Test public void test_135() { testInvalid("{int}","((int & any) | {any, int})"); }
		@Test public void test_136() { testInvalid("{int}","(!any | {int, int})"); }
		@Test public void test_137() { testInvalid("{int}","(!int | {int, int})"); }
		@Test public void test_138() { testInvalid("{int}","({any, any} | {int, int})"); }
		@Test public void test_139() { testInvalid("{int}","({any, int} | {int, int})"); }
		@Test public void test_140() { testInvalid("{int}","((any | any) | {int, int})"); }
		@Test public void test_141() { testInvalid("{int}","((int | int) | {int, int})"); }
		@Test public void test_142() { testInvalid("{int}","((int & any) | {int, int})"); }
		@Test public void test_143() { testInvalid("{int}","((any & int) | {int, int})"); }
		@Test public void test_144() { testInvalid("{int}","((int & int) | {int, int})"); }
		@Test public void test_145() { testInvalid("{int}","({any} | (any | any))"); }
		@Test public void test_146() { testInvalid("{int}","(!any | (any | any))"); }
		@Test public void test_147() { testInvalid("{int}","({any, any} | (any | any))"); }
		@Test public void test_148() { testInvalid("{int}","({any, int} | (any | any))"); }
		@Test public void test_149() { testInvalid("{int}","({int, int} | (any | any))"); }
		@Test public void test_150() { testInvalid("{int}","((int | any) | (any | any))"); }
		@Test public void test_151() { testInvalid("{int}","((any | int) | (any | any))"); }
		@Test public void test_152() { testInvalid("{int}","((any & int) | (any | any))"); }
		@Test public void test_153() { testInvalid("{int}","((int & int) | (any | any))"); }
		@Test public void test_154() { testInvalid("{int}","({any} | (int | any))"); }
		@Test public void test_155() { testInvalid("{int}","(!int | (int | any))"); }
		@Test public void test_156() { testInvalid("{int}","({int, any} | (int | any))"); }
		@Test public void test_157() { testInvalid("{int}","({any, int} | (int | any))"); }
		@Test public void test_158() { testInvalid("{int}","((int & any) | (int | any))"); }
		@Test public void test_159() { testInvalid("{int}","((any & int) | (int | any))"); }
		@Test public void test_160() { testInvalid("{int}","({any} | (any | int))"); }
		@Test public void test_161() { testInvalid("{int}","({int} | (any | int))"); }
		@Test public void test_162() { testInvalid("{int}","(!any | (any | int))"); }
		@Test public void test_163() { testInvalid("{int}","(!int | (any | int))"); }
		@Test public void test_164() { testInvalid("{int}","({any, int} | (any | int))"); }
		@Test public void test_165() { testInvalid("{int}","({int, int} | (any | int))"); }
		@Test public void test_166() { testInvalid("{int}","((int | any) | (any | int))"); }
		@Test public void test_167() { testInvalid("{int}","((any | int) | (any | int))"); }
		@Test public void test_168() { testInvalid("{int}","((int | int) | (any | int))"); }
		@Test public void test_169() { testInvalid("{int}","((any & any) | (any | int))"); }
		@Test public void test_170() { testInvalid("{int}","({int} | (int | int))"); }
		@Test public void test_171() { testInvalid("{int}","(!any | (int | int))"); }
		@Test public void test_172() { testInvalid("{int}","(!int | (int | int))"); }
		@Test public void test_173() { testInvalid("{int}","({int, any} | (int | int))"); }
		@Test public void test_174() { testInvalid("{int}","({any, int} | (int | int))"); }
		@Test public void test_175() { testInvalid("{int}","((any | int) | (int | int))"); }
		@Test public void test_176() { testInvalid("{int}","((int | int) | (int | int))"); }
		@Test public void test_177() { testInvalid("{int}","((any & any) | (int | int))"); }
		@Test public void test_178() { testInvalid("{int}","((int & any) | (int | int))"); }
		@Test public void test_179() { testInvalid("{int}","((int & int) | (int | int))"); }
		@Test public void test_180() { testInvalid("{int}","(!any | (any & any))"); }
		@Test public void test_181() { testInvalid("{int}","(!int | (any & any))"); }
		@Test public void test_182() { testInvalid("{int}","({any, any} | (any & any))"); }
		@Test public void test_183() { testInvalid("{int}","({int, any} | (any & any))"); }
		@Test public void test_184() { testInvalid("{int}","({any, int} | (any & any))"); }
		@Test public void test_185() { testInvalid("{int}","({int, int} | (any & any))"); }
		@Test public void test_186() { testInvalid("{int}","((int | any) | (any & any))"); }
		@Test public void test_187() { testInvalid("{int}","((int | int) | (any & any))"); }
		@Test public void test_188() { testInvalid("{int}","((int & any) | (any & any))"); }
		@Test public void test_189() { testInvalid("{int}","((any & int) | (any & any))"); }
		@Test public void test_190() { testInvalid("{int}","((int & int) | (any & any))"); }
		@Test public void test_191() { testInvalid("{int}","({any} | (int & any))"); }
		@Test public void test_192() { testInvalid("{any, any}","{int}"); }
		@Test public void test_193() { testValid("{any, any}","{any, any}"); }
		@Test public void test_194() { testValid("{any, any}","{int, int}"); }
		@Test public void test_195() { testInvalid("{any, any}","(any | int)"); }
		@Test public void test_196() { testInvalid("{any, any}","(int & any)"); }
		@Test public void test_197() { testInvalid("{any, any}","{{any}}"); }
		@Test public void test_198() { testInvalid("{any, any}","{{int, any}}"); }
		@Test public void test_199() { testInvalid("{any, any}","{{int, int}}"); }
		@Test public void test_200() { testInvalid("{any, any}","{(any | int)}"); }
		@Test public void test_201() { testInvalid("{any, any}","!{int, any}"); }
		@Test public void test_202() { testInvalid("{any, any}","!{int, int}"); }
		@Test public void test_203() { testValid("{any, any}","!(any | any)"); }
		@Test public void test_204() { testValid("{any, any}","!(any & any)"); }
		@Test public void test_205() { testInvalid("{any, any}","!(int & int)"); }
		@Test public void test_206() { testValid("{any, any}","{{int}, {any}}"); }
		@Test public void test_207() { testValid("{any, any}","{!int, {any}}"); }
		@Test public void test_208() { testValid("{any, any}","{{int, int}, {any}}"); }
		@Test public void test_209() { testValid("{any, any}","{(any | int), {any}}"); }
		@Test public void test_210() { testValid("{any, any}","{!int, {int}}"); }
		@Test public void test_211() { testValid("{any, any}","{{any, any}, {int}}"); }
		@Test public void test_212() { testValid("{any, any}","{(any | any), {int}}"); }
		@Test public void test_213() { testValid("{any, any}","{(any & any), {int}}"); }
		@Test public void test_214() { testValid("{any, any}","{(any & int), {int}}"); }
		@Test public void test_215() { testValid("{any, any}","{{any, any}, !int}"); }
		@Test public void test_216() { testValid("{any, any}","{{any, int}, !int}"); }
		@Test public void test_217() { testValid("{any, any}","{(any | any), !int}"); }
		@Test public void test_218() { testValid("{any, any}","{(int | any), !int}"); }
		@Test public void test_219() { testValid("{any, any}","{(any & any), !int}"); }
		@Test public void test_220() { testValid("{any, any}","{(int & any), !int}"); }
		@Test public void test_221() { testValid("{any, any}","{(int & int), !int}"); }
		@Test public void test_222() { testValid("{any, any}","{{any}, {any, any}}"); }
		@Test public void test_223() { testValid("{any, any}","{{int}, {any, any}}"); }
		@Test public void test_224() { testValid("{any, any}","{{int, int}, {any, any}}"); }
		@Test public void test_225() { testValid("{any, any}","{(any | any), {any, any}}"); }
		@Test public void test_226() { testValid("{any, any}","{(any | int), {any, any}}"); }
		@Test public void test_227() { testValid("{any, any}","{!int, {int, any}}"); }
		@Test public void test_228() { testValid("{any, any}","{{int, any}, {int, any}}"); }
		@Test public void test_229() { testValid("{any, any}","{{any, int}, {int, any}}"); }
		@Test public void test_230() { testValid("{any, any}","{(any & int), {int, any}}"); }
		@Test public void test_231() { testValid("{any, any}","{{any}, {any, int}}"); }
		@Test public void test_232() { testValid("{any, any}","{{int, int}, {any, int}}"); }
		@Test public void test_233() { testValid("{any, any}","{(int | int), {any, int}}"); }
		@Test public void test_234() { testValid("{any, any}","{(any & int), {any, int}}"); }
		@Test public void test_235() { testValid("{any, any}","{!int, {int, int}}"); }
		@Test public void test_236() { testValid("{any, any}","{{int, int}, {int, int}}"); }
		@Test public void test_237() { testValid("{any, any}","{(any | any), {int, int}}"); }
		@Test public void test_238() { testValid("{any, any}","{(int | any), {int, int}}"); }
		@Test public void test_239() { testValid("{any, any}","{(int & any), {int, int}}"); }
		@Test public void test_240() { testValid("{any, any}","{{int}, (any | any)}"); }
		@Test public void test_241() { testValid("{any, any}","{{int, any}, (any | any)}"); }
		@Test public void test_242() { testValid("{any, any}","{{any, int}, (any | any)}"); }
		@Test public void test_243() { testValid("{any, any}","{(any | any), (any | any)}"); }
		@Test public void test_244() { testValid("{any, any}","{(int | any), (any | any)}"); }
		@Test public void test_245() { testValid("{any, any}","{(int & int), (any | any)}"); }
		@Test public void test_246() { testValid("{any, any}","{!int, (int | any)}"); }
		@Test public void test_247() { testValid("{any, any}","{{int, int}, (int | any)}"); }
		@Test public void test_248() { testValid("{any, any}","{(any | any), (int | any)}"); }
		@Test public void test_249() { testValid("{any, any}","{(int | int), (int | any)}"); }
		@Test public void test_250() { testValid("{any, any}","{{any}, (any | int)}"); }
		@Test public void test_251() { testValid("{any, any}","{!int, (any | int)}"); }
		@Test public void test_252() { testValid("{any, any}","{(any | any), (any | int)}"); }
		@Test public void test_253() { testValid("{any, any}","{(any | int), (any | int)}"); }
		@Test public void test_254() { testValid("{any, any}","{(any & int), (any | int)}"); }
		@Test public void test_255() { testValid("{any, any}","{{int}, (int | int)}"); }
		@Test public void test_256() { testValid("{any, any}","{{any, any}, (int | int)}"); }
		@Test public void test_257() { testValid("{any, any}","{{int, int}, (int | int)}"); }
		@Test public void test_258() { testValid("{any, any}","{{int}, (any & any)}"); }
		@Test public void test_259() { testValid("{any, any}","{{int, any}, (any & any)}"); }
		@Test public void test_260() { testValid("{any, any}","{{any, int}, (any & any)}"); }
		@Test public void test_261() { testValid("{any, any}","{(int | any), (any & any)}"); }
		@Test public void test_262() { testValid("{any, any}","{(any & any), (any & any)}"); }
		@Test public void test_263() { testValid("{any, any}","{(int & any), (any & any)}"); }
		@Test public void test_264() { testValid("{any, any}","{{any}, (int & any)}"); }
		@Test public void test_265() { testValid("{any, any}","{{int}, (int & any)}"); }
		@Test public void test_266() { testValid("{any, any}","{{any, any}, (int & any)}"); }
		@Test public void test_267() { testValid("{any, any}","{{int, any}, (int & any)}"); }
		@Test public void test_268() { testValid("{any, any}","{(any | int), (int & any)}"); }
		@Test public void test_269() { testValid("{any, any}","{(any & any), (int & any)}"); }
		@Test public void test_270() { testValid("{any, any}","{(int & any), (int & any)}"); }
		@Test public void test_271() { testValid("{any, any}","{(int & int), (int & any)}"); }
		@Test public void test_272() { testValid("{any, any}","{{int, any}, (any & int)}"); }
		@Test public void test_273() { testValid("{any, any}","{(any & any), (any & int)}"); }
		@Test public void test_274() { testValid("{any, any}","{{any, int}, (int & int)}"); }
		@Test public void test_275() { testValid("{any, any}","{(int | int), (int & int)}"); }
		@Test public void test_276() { testValid("{any, any}","{(any & any), (int & int)}"); }
		@Test public void test_277() { testValid("{any, any}","{(any & int), (int & int)}"); }
		@Test public void test_278() { testValid("{any, any}","{(int & int), (int & int)}"); }
		@Test public void test_279() { testInvalid("{any, any}","(!int | {any})"); }
		@Test public void test_280() { testInvalid("{any, any}","({any, any} | {any})"); }
		@Test public void test_281() { testInvalid("{any, any}","((any | any) | {any})"); }
		@Test public void test_282() { testInvalid("{any, any}","((int | any) | {any})"); }
		@Test public void test_283() { testInvalid("{any, any}","((any & any) | {any})"); }
		@Test public void test_284() { testInvalid("{any, any}","((int & any) | {any})"); }
		@Test public void test_285() { testInvalid("{any, any}","((any & int) | {any})"); }
		@Test public void test_286() { testInvalid("{any, any}","({int} | {int})"); }
		@Test public void test_287() { testInvalid("{any, any}","(!any | {int})"); }
		@Test public void test_288() { testInvalid("{any, any}","(!int | {int})"); }
		@Test public void test_289() { testInvalid("{any, any}","({any, int} | {int})"); }
		@Test public void test_290() { testInvalid("{any, any}","((int & any) | {int})"); }
		@Test public void test_291() { testInvalid("{any, any}","((any & int) | {int})"); }
		@Test public void test_292() { testInvalid("{any, any}","((int & int) | {int})"); }
		@Test public void test_293() { testInvalid("{any, any}","({any} | !any)"); }
		@Test public void test_294() { testInvalid("{any, any}","({int} | !any)"); }
		@Test public void test_295() { testValid("{any, any}","({any, any} | !any)"); }
		@Test public void test_296() { testValid("{any, any}","({int, int} | !any)"); }
		@Test public void test_297() { testInvalid("{any, any}","((any | any) | !any)"); }
		@Test public void test_298() { testInvalid("{any, any}","((int | any) | !any)"); }
		@Test public void test_299() { testInvalid("{any, any}","((int | int) | !any)"); }
		@Test public void test_300() { testInvalid("{any, any}","((int & int) | !any)"); }
		@Test public void test_301() { testInvalid("{any, any}","(!int | !int)"); }
		@Test public void test_302() { testInvalid("{any, any}","({any, any} | !int)"); }
		@Test public void test_303() { testInvalid("{any, any}","({int, int} | !int)"); }
		@Test public void test_304() { testInvalid("{any, any}","((int | any) | !int)"); }
		@Test public void test_305() { testInvalid("{any, any}","((any | int) | !int)"); }
		@Test public void test_306() { testInvalid("{any, any}","((any & int) | !int)"); }
		@Test public void test_307() { testInvalid("{any, any}","((int & int) | !int)"); }
		@Test public void test_308() { testInvalid("{any, any}","({int} | {any, any})"); }
		@Test public void test_309() { testValid("{any, any}","(!any | {any, any})"); }
		@Test public void test_310() { testInvalid("{any, any}","(!int | {any, any})"); }
		@Test public void test_311() { testValid("{any, any}","({any, int} | {any, any})"); }
		@Test public void test_312() { testInvalid("{any, any}","((int | any) | {any, any})"); }
		@Test public void test_313() { testInvalid("{any, any}","((any & any) | {any, any})"); }
		@Test public void test_314() { testInvalid("{any, any}","((any & int) | {any, any})"); }
		@Test public void test_315() { testInvalid("{any, any}","(!int | {int, any})"); }
		@Test public void test_316() { testValid("{any, any}","({any, int} | {int, any})"); }
		@Test public void test_317() { testInvalid("{any, any}","((any | any) | {int, any})"); }
		@Test public void test_318() { testInvalid("{any, any}","((int | any) | {int, any})"); }
		@Test public void test_319() { testInvalid("{any, any}","((any | int) | {int, any})"); }
		@Test public void test_320() { testInvalid("{any, any}","((int & any) | {int, any})"); }
		@Test public void test_321() { testInvalid("{any, any}","({any} | {any, int})"); }
		@Test public void test_322() { testInvalid("{any, any}","(!int | {any, int})"); }
		@Test public void test_323() { testValid("{any, any}","({any, int} | {any, int})"); }
		@Test public void test_324() { testInvalid("{any, any}","((any | any) | {any, int})"); }
		@Test public void test_325() { testInvalid("{any, any}","((any | int) | {any, int})"); }
		@Test public void test_326() { testInvalid("{any, any}","((int | int) | {any, int})"); }
		@Test public void test_327() { testInvalid("{any, any}","((int & any) | {any, int})"); }
		@Test public void test_328() { testValid("{any, any}","(!any | {int, int})"); }
		@Test public void test_329() { testInvalid("{any, any}","(!int | {int, int})"); }
		@Test public void test_330() { testValid("{any, any}","({any, any} | {int, int})"); }
		@Test public void test_331() { testValid("{any, any}","({any, int} | {int, int})"); }
		@Test public void test_332() { testInvalid("{any, any}","((any | any) | {int, int})"); }
		@Test public void test_333() { testInvalid("{any, any}","((int | int) | {int, int})"); }
		@Test public void test_334() { testInvalid("{any, any}","((int & any) | {int, int})"); }
		@Test public void test_335() { testInvalid("{any, any}","((any & int) | {int, int})"); }
		@Test public void test_336() { testInvalid("{any, any}","((int & int) | {int, int})"); }
		@Test public void test_337() { testInvalid("{any, any}","({any} | (any | any))"); }
		@Test public void test_338() { testInvalid("{any, any}","(!any | (any | any))"); }
		@Test public void test_339() { testInvalid("{any, any}","({any, any} | (any | any))"); }
		@Test public void test_340() { testInvalid("{any, any}","({any, int} | (any | any))"); }
		@Test public void test_341() { testInvalid("{any, any}","({int, int} | (any | any))"); }
		@Test public void test_342() { testInvalid("{any, any}","((int | any) | (any | any))"); }
		@Test public void test_343() { testInvalid("{any, any}","((any | int) | (any | any))"); }
		@Test public void test_344() { testInvalid("{any, any}","((any & int) | (any | any))"); }
		@Test public void test_345() { testInvalid("{any, any}","((int & int) | (any | any))"); }
		@Test public void test_346() { testInvalid("{any, any}","({any} | (int | any))"); }
		@Test public void test_347() { testInvalid("{any, any}","(!int | (int | any))"); }
		@Test public void test_348() { testInvalid("{any, any}","({int, any} | (int | any))"); }
		@Test public void test_349() { testInvalid("{any, any}","({any, int} | (int | any))"); }
		@Test public void test_350() { testInvalid("{any, any}","((int & any) | (int | any))"); }
		@Test public void test_351() { testInvalid("{any, any}","((any & int) | (int | any))"); }
		@Test public void test_352() { testInvalid("{any, any}","({any} | (any | int))"); }
		@Test public void test_353() { testInvalid("{any, any}","({int} | (any | int))"); }
		@Test public void test_354() { testInvalid("{any, any}","(!any | (any | int))"); }
		@Test public void test_355() { testInvalid("{any, any}","(!int | (any | int))"); }
		@Test public void test_356() { testInvalid("{any, any}","({any, int} | (any | int))"); }
		@Test public void test_357() { testInvalid("{any, any}","({int, int} | (any | int))"); }
		@Test public void test_358() { testInvalid("{any, any}","((int | any) | (any | int))"); }
		@Test public void test_359() { testInvalid("{any, any}","((any | int) | (any | int))"); }
		@Test public void test_360() { testInvalid("{any, any}","((int | int) | (any | int))"); }
		@Test public void test_361() { testInvalid("{any, any}","((any & any) | (any | int))"); }
		@Test public void test_362() { testInvalid("{any, any}","({int} | (int | int))"); }
		@Test public void test_363() { testInvalid("{any, any}","(!any | (int | int))"); }
		@Test public void test_364() { testInvalid("{any, any}","(!int | (int | int))"); }
		@Test public void test_365() { testInvalid("{any, any}","({int, any} | (int | int))"); }
		@Test public void test_366() { testInvalid("{any, any}","({any, int} | (int | int))"); }
		@Test public void test_367() { testInvalid("{any, any}","((any | int) | (int | int))"); }
		@Test public void test_368() { testInvalid("{any, any}","((int | int) | (int | int))"); }
		@Test public void test_369() { testInvalid("{any, any}","((any & any) | (int | int))"); }
		@Test public void test_370() { testInvalid("{any, any}","((int & any) | (int | int))"); }
		@Test public void test_371() { testInvalid("{any, any}","((int & int) | (int | int))"); }
		@Test public void test_372() { testInvalid("{any, any}","(!any | (any & any))"); }
		@Test public void test_373() { testInvalid("{any, any}","(!int | (any & any))"); }
		@Test public void test_374() { testInvalid("{any, any}","({any, any} | (any & any))"); }
		@Test public void test_375() { testInvalid("{any, any}","({int, any} | (any & any))"); }
		@Test public void test_376() { testInvalid("{any, any}","({any, int} | (any & any))"); }
		@Test public void test_377() { testInvalid("{any, any}","({int, int} | (any & any))"); }
		@Test public void test_378() { testInvalid("{any, any}","((int | any) | (any & any))"); }
		@Test public void test_379() { testInvalid("{any, any}","((int | int) | (any & any))"); }
		@Test public void test_380() { testInvalid("{any, any}","((int & any) | (any & any))"); }
		@Test public void test_381() { testInvalid("{any, any}","((any & int) | (any & any))"); }
		@Test public void test_382() { testInvalid("{any, any}","((int & int) | (any & any))"); }
		@Test public void test_383() { testInvalid("{any, any}","({any} | (int & any))"); }
		@Test public void test_384() { testInvalid("{int, int}","{int}"); }
		@Test public void test_385() { testInvalid("{int, int}","{any, any}"); }
		@Test public void test_386() { testValid("{int, int}","{int, int}"); }
		@Test public void test_387() { testInvalid("{int, int}","(any | int)"); }
		@Test public void test_388() { testInvalid("{int, int}","(int & any)"); }
		@Test public void test_389() { testInvalid("{int, int}","{{any}}"); }
		@Test public void test_390() { testInvalid("{int, int}","{{int, any}}"); }
		@Test public void test_391() { testInvalid("{int, int}","{{int, int}}"); }
		@Test public void test_392() { testInvalid("{int, int}","{(any | int)}"); }
		@Test public void test_393() { testInvalid("{int, int}","!{int, any}"); }
		@Test public void test_394() { testInvalid("{int, int}","!{int, int}"); }
		@Test public void test_395() { testValid("{int, int}","!(any | any)"); }
		@Test public void test_396() { testValid("{int, int}","!(any & any)"); }
		@Test public void test_397() { testInvalid("{int, int}","!(int & int)"); }
		@Test public void test_398() { testInvalid("{int, int}","{{int}, {any}}"); }
		@Test public void test_399() { testInvalid("{int, int}","{!int, {any}}"); }
		@Test public void test_400() { testInvalid("{int, int}","{{int, int}, {any}}"); }
		@Test public void test_401() { testInvalid("{int, int}","{(any | int), {any}}"); }
		@Test public void test_402() { testInvalid("{int, int}","{!int, {int}}"); }
		@Test public void test_403() { testInvalid("{int, int}","{{any, any}, {int}}"); }
		@Test public void test_404() { testInvalid("{int, int}","{(any | any), {int}}"); }
		@Test public void test_405() { testInvalid("{int, int}","{(any & any), {int}}"); }
		@Test public void test_406() { testInvalid("{int, int}","{(any & int), {int}}"); }
		@Test public void test_407() { testInvalid("{int, int}","{{any, any}, !int}"); }
		@Test public void test_408() { testInvalid("{int, int}","{{any, int}, !int}"); }
		@Test public void test_409() { testInvalid("{int, int}","{(any | any), !int}"); }
		@Test public void test_410() { testInvalid("{int, int}","{(int | any), !int}"); }
		@Test public void test_411() { testInvalid("{int, int}","{(any & any), !int}"); }
		@Test public void test_412() { testInvalid("{int, int}","{(int & any), !int}"); }
		@Test public void test_413() { testInvalid("{int, int}","{(int & int), !int}"); }
		@Test public void test_414() { testInvalid("{int, int}","{{any}, {any, any}}"); }
		@Test public void test_415() { testInvalid("{int, int}","{{int}, {any, any}}"); }
		@Test public void test_416() { testInvalid("{int, int}","{{int, int}, {any, any}}"); }
		@Test public void test_417() { testInvalid("{int, int}","{(any | any), {any, any}}"); }
		@Test public void test_418() { testInvalid("{int, int}","{(any | int), {any, any}}"); }
		@Test public void test_419() { testInvalid("{int, int}","{!int, {int, any}}"); }
		@Test public void test_420() { testInvalid("{int, int}","{{int, any}, {int, any}}"); }
		@Test public void test_421() { testInvalid("{int, int}","{{any, int}, {int, any}}"); }
		@Test public void test_422() { testInvalid("{int, int}","{(any & int), {int, any}}"); }
		@Test public void test_423() { testInvalid("{int, int}","{{any}, {any, int}}"); }
		@Test public void test_424() { testInvalid("{int, int}","{{int, int}, {any, int}}"); }
		@Test public void test_425() { testInvalid("{int, int}","{(int | int), {any, int}}"); }
		@Test public void test_426() { testInvalid("{int, int}","{(any & int), {any, int}}"); }
		@Test public void test_427() { testInvalid("{int, int}","{!int, {int, int}}"); }
		@Test public void test_428() { testInvalid("{int, int}","{{int, int}, {int, int}}"); }
		@Test public void test_429() { testInvalid("{int, int}","{(any | any), {int, int}}"); }
		@Test public void test_430() { testInvalid("{int, int}","{(int | any), {int, int}}"); }
		@Test public void test_431() { testInvalid("{int, int}","{(int & any), {int, int}}"); }
		@Test public void test_432() { testInvalid("{int, int}","{{int}, (any | any)}"); }
		@Test public void test_433() { testInvalid("{int, int}","{{int, any}, (any | any)}"); }
		@Test public void test_434() { testInvalid("{int, int}","{{any, int}, (any | any)}"); }
		@Test public void test_435() { testInvalid("{int, int}","{(any | any), (any | any)}"); }
		@Test public void test_436() { testInvalid("{int, int}","{(int | any), (any | any)}"); }
		@Test public void test_437() { testInvalid("{int, int}","{(int & int), (any | any)}"); }
		@Test public void test_438() { testInvalid("{int, int}","{!int, (int | any)}"); }
		@Test public void test_439() { testInvalid("{int, int}","{{int, int}, (int | any)}"); }
		@Test public void test_440() { testInvalid("{int, int}","{(any | any), (int | any)}"); }
		@Test public void test_441() { testInvalid("{int, int}","{(int | int), (int | any)}"); }
		@Test public void test_442() { testInvalid("{int, int}","{{any}, (any | int)}"); }
		@Test public void test_443() { testInvalid("{int, int}","{!int, (any | int)}"); }
		@Test public void test_444() { testInvalid("{int, int}","{(any | any), (any | int)}"); }
		@Test public void test_445() { testInvalid("{int, int}","{(any | int), (any | int)}"); }
		@Test public void test_446() { testInvalid("{int, int}","{(any & int), (any | int)}"); }
		@Test public void test_447() { testInvalid("{int, int}","{{int}, (int | int)}"); }
		@Test public void test_448() { testInvalid("{int, int}","{{any, any}, (int | int)}"); }
		@Test public void test_449() { testInvalid("{int, int}","{{int, int}, (int | int)}"); }
		@Test public void test_450() { testInvalid("{int, int}","{{int}, (any & any)}"); }
		@Test public void test_451() { testInvalid("{int, int}","{{int, any}, (any & any)}"); }
		@Test public void test_452() { testInvalid("{int, int}","{{any, int}, (any & any)}"); }
		@Test public void test_453() { testInvalid("{int, int}","{(int | any), (any & any)}"); }
		@Test public void test_454() { testInvalid("{int, int}","{(any & any), (any & any)}"); }
		@Test public void test_455() { testInvalid("{int, int}","{(int & any), (any & any)}"); }
		@Test public void test_456() { testInvalid("{int, int}","{{any}, (int & any)}"); }
		@Test public void test_457() { testInvalid("{int, int}","{{int}, (int & any)}"); }
		@Test public void test_458() { testInvalid("{int, int}","{{any, any}, (int & any)}"); }
		@Test public void test_459() { testInvalid("{int, int}","{{int, any}, (int & any)}"); }
		@Test public void test_460() { testInvalid("{int, int}","{(any | int), (int & any)}"); }
		@Test public void test_461() { testInvalid("{int, int}","{(any & any), (int & any)}"); }
		@Test public void test_462() { testValid("{int, int}","{(int & any), (int & any)}"); }
		@Test public void test_463() { testValid("{int, int}","{(int & int), (int & any)}"); }
		@Test public void test_464() { testInvalid("{int, int}","{{int, any}, (any & int)}"); }
		@Test public void test_465() { testInvalid("{int, int}","{(any & any), (any & int)}"); }
		@Test public void test_466() { testInvalid("{int, int}","{{any, int}, (int & int)}"); }
		@Test public void test_467() { testValid("{int, int}","{(int | int), (int & int)}"); }
		@Test public void test_468() { testInvalid("{int, int}","{(any & any), (int & int)}"); }
		@Test public void test_469() { testValid("{int, int}","{(any & int), (int & int)}"); }
		@Test public void test_470() { testValid("{int, int}","{(int & int), (int & int)}"); }
		@Test public void test_471() { testInvalid("{int, int}","(!int | {any})"); }
		@Test public void test_472() { testInvalid("{int, int}","({any, any} | {any})"); }
		@Test public void test_473() { testInvalid("{int, int}","((any | any) | {any})"); }
		@Test public void test_474() { testInvalid("{int, int}","((int | any) | {any})"); }
		@Test public void test_475() { testInvalid("{int, int}","((any & any) | {any})"); }
		@Test public void test_476() { testInvalid("{int, int}","((int & any) | {any})"); }
		@Test public void test_477() { testInvalid("{int, int}","((any & int) | {any})"); }
		@Test public void test_478() { testInvalid("{int, int}","({int} | {int})"); }
		@Test public void test_479() { testInvalid("{int, int}","(!any | {int})"); }
		@Test public void test_480() { testInvalid("{int, int}","(!int | {int})"); }
		@Test public void test_481() { testInvalid("{int, int}","({any, int} | {int})"); }
		@Test public void test_482() { testInvalid("{int, int}","((int & any) | {int})"); }
		@Test public void test_483() { testInvalid("{int, int}","((any & int) | {int})"); }
		@Test public void test_484() { testInvalid("{int, int}","((int & int) | {int})"); }
		@Test public void test_485() { testInvalid("{int, int}","({any} | !any)"); }
		@Test public void test_486() { testInvalid("{int, int}","({int} | !any)"); }
		@Test public void test_487() { testInvalid("{int, int}","({any, any} | !any)"); }
		@Test public void test_488() { testValid("{int, int}","({int, int} | !any)"); }
		@Test public void test_489() { testInvalid("{int, int}","((any | any) | !any)"); }
		@Test public void test_490() { testInvalid("{int, int}","((int | any) | !any)"); }
		@Test public void test_491() { testInvalid("{int, int}","((int | int) | !any)"); }
		@Test public void test_492() { testInvalid("{int, int}","((int & int) | !any)"); }
		@Test public void test_493() { testInvalid("{int, int}","(!int | !int)"); }
		@Test public void test_494() { testInvalid("{int, int}","({any, any} | !int)"); }
		@Test public void test_495() { testInvalid("{int, int}","({int, int} | !int)"); }
		@Test public void test_496() { testInvalid("{int, int}","((int | any) | !int)"); }
		@Test public void test_497() { testInvalid("{int, int}","((any | int) | !int)"); }
		@Test public void test_498() { testInvalid("{int, int}","((any & int) | !int)"); }
		@Test public void test_499() { testInvalid("{int, int}","((int & int) | !int)"); }
		@Test public void test_500() { testInvalid("{int, int}","({int} | {any, any})"); }
		@Test public void test_501() { testInvalid("{int, int}","(!any | {any, any})"); }
		@Test public void test_502() { testInvalid("{int, int}","(!int | {any, any})"); }
		@Test public void test_503() { testInvalid("{int, int}","({any, int} | {any, any})"); }
		@Test public void test_504() { testInvalid("{int, int}","((int | any) | {any, any})"); }
		@Test public void test_505() { testInvalid("{int, int}","((any & any) | {any, any})"); }
		@Test public void test_506() { testInvalid("{int, int}","((any & int) | {any, any})"); }
		@Test public void test_507() { testInvalid("{int, int}","(!int | {int, any})"); }
		@Test public void test_508() { testInvalid("{int, int}","({any, int} | {int, any})"); }
		@Test public void test_509() { testInvalid("{int, int}","((any | any) | {int, any})"); }
		@Test public void test_510() { testInvalid("{int, int}","((int | any) | {int, any})"); }
		@Test public void test_511() { testInvalid("{int, int}","((any | int) | {int, any})"); }
		@Test public void test_512() { testInvalid("{int, int}","((int & any) | {int, any})"); }
		@Test public void test_513() { testInvalid("{int, int}","({any} | {any, int})"); }
		@Test public void test_514() { testInvalid("{int, int}","(!int | {any, int})"); }
		@Test public void test_515() { testInvalid("{int, int}","({any, int} | {any, int})"); }
		@Test public void test_516() { testInvalid("{int, int}","((any | any) | {any, int})"); }
		@Test public void test_517() { testInvalid("{int, int}","((any | int) | {any, int})"); }
		@Test public void test_518() { testInvalid("{int, int}","((int | int) | {any, int})"); }
		@Test public void test_519() { testInvalid("{int, int}","((int & any) | {any, int})"); }
		@Test public void test_520() { testValid("{int, int}","(!any | {int, int})"); }
		@Test public void test_521() { testInvalid("{int, int}","(!int | {int, int})"); }
		@Test public void test_522() { testInvalid("{int, int}","({any, any} | {int, int})"); }
		@Test public void test_523() { testInvalid("{int, int}","({any, int} | {int, int})"); }
		@Test public void test_524() { testInvalid("{int, int}","((any | any) | {int, int})"); }
		@Test public void test_525() { testInvalid("{int, int}","((int | int) | {int, int})"); }
		@Test public void test_526() { testInvalid("{int, int}","((int & any) | {int, int})"); }
		@Test public void test_527() { testInvalid("{int, int}","((any & int) | {int, int})"); }
		@Test public void test_528() { testInvalid("{int, int}","((int & int) | {int, int})"); }
		@Test public void test_529() { testInvalid("{int, int}","({any} | (any | any))"); }
		@Test public void test_530() { testInvalid("{int, int}","(!any | (any | any))"); }
		@Test public void test_531() { testInvalid("{int, int}","({any, any} | (any | any))"); }
		@Test public void test_532() { testInvalid("{int, int}","({any, int} | (any | any))"); }
		@Test public void test_533() { testInvalid("{int, int}","({int, int} | (any | any))"); }
		@Test public void test_534() { testInvalid("{int, int}","((int | any) | (any | any))"); }
		@Test public void test_535() { testInvalid("{int, int}","((any | int) | (any | any))"); }
		@Test public void test_536() { testInvalid("{int, int}","((any & int) | (any | any))"); }
		@Test public void test_537() { testInvalid("{int, int}","((int & int) | (any | any))"); }
		@Test public void test_538() { testInvalid("{int, int}","({any} | (int | any))"); }
		@Test public void test_539() { testInvalid("{int, int}","(!int | (int | any))"); }
		@Test public void test_540() { testInvalid("{int, int}","({int, any} | (int | any))"); }
		@Test public void test_541() { testInvalid("{int, int}","({any, int} | (int | any))"); }
		@Test public void test_542() { testInvalid("{int, int}","((int & any) | (int | any))"); }
		@Test public void test_543() { testInvalid("{int, int}","((any & int) | (int | any))"); }
		@Test public void test_544() { testInvalid("{int, int}","({any} | (any | int))"); }
		@Test public void test_545() { testInvalid("{int, int}","({int} | (any | int))"); }
		@Test public void test_546() { testInvalid("{int, int}","(!any | (any | int))"); }
		@Test public void test_547() { testInvalid("{int, int}","(!int | (any | int))"); }
		@Test public void test_548() { testInvalid("{int, int}","({any, int} | (any | int))"); }
		@Test public void test_549() { testInvalid("{int, int}","({int, int} | (any | int))"); }
		@Test public void test_550() { testInvalid("{int, int}","((int | any) | (any | int))"); }
		@Test public void test_551() { testInvalid("{int, int}","((any | int) | (any | int))"); }
		@Test public void test_552() { testInvalid("{int, int}","((int | int) | (any | int))"); }
		@Test public void test_553() { testInvalid("{int, int}","((any & any) | (any | int))"); }
		@Test public void test_554() { testInvalid("{int, int}","({int} | (int | int))"); }
		@Test public void test_555() { testInvalid("{int, int}","(!any | (int | int))"); }
		@Test public void test_556() { testInvalid("{int, int}","(!int | (int | int))"); }
		@Test public void test_557() { testInvalid("{int, int}","({int, any} | (int | int))"); }
		@Test public void test_558() { testInvalid("{int, int}","({any, int} | (int | int))"); }
		@Test public void test_559() { testInvalid("{int, int}","((any | int) | (int | int))"); }
		@Test public void test_560() { testInvalid("{int, int}","((int | int) | (int | int))"); }
		@Test public void test_561() { testInvalid("{int, int}","((any & any) | (int | int))"); }
		@Test public void test_562() { testInvalid("{int, int}","((int & any) | (int | int))"); }
		@Test public void test_563() { testInvalid("{int, int}","((int & int) | (int | int))"); }
		@Test public void test_564() { testInvalid("{int, int}","(!any | (any & any))"); }
		@Test public void test_565() { testInvalid("{int, int}","(!int | (any & any))"); }
		@Test public void test_566() { testInvalid("{int, int}","({any, any} | (any & any))"); }
		@Test public void test_567() { testInvalid("{int, int}","({int, any} | (any & any))"); }
		@Test public void test_568() { testInvalid("{int, int}","({any, int} | (any & any))"); }
		@Test public void test_569() { testInvalid("{int, int}","({int, int} | (any & any))"); }
		@Test public void test_570() { testInvalid("{int, int}","((int | any) | (any & any))"); }
		@Test public void test_571() { testInvalid("{int, int}","((int | int) | (any & any))"); }
		@Test public void test_572() { testInvalid("{int, int}","((int & any) | (any & any))"); }
		@Test public void test_573() { testInvalid("{int, int}","((any & int) | (any & any))"); }
		@Test public void test_574() { testInvalid("{int, int}","((int & int) | (any & any))"); }
		@Test public void test_575() { testInvalid("{int, int}","({any} | (int & any))"); }
		@Test public void test_576() { testValid("(any | int)","{int}"); }
		@Test public void test_577() { testValid("(any | int)","{any, any}"); }
		@Test public void test_578() { testValid("(any | int)","{int, int}"); }
		@Test public void test_579() { testValid("(any | int)","(any | int)"); }
		@Test public void test_580() { testValid("(any | int)","(int & any)"); }
		@Test public void test_581() { testValid("(any | int)","{{any}}"); }
		@Test public void test_582() { testValid("(any | int)","{{int, any}}"); }
		@Test public void test_583() { testValid("(any | int)","{{int, int}}"); }
		@Test public void test_584() { testValid("(any | int)","{(any | int)}"); }
		@Test public void test_585() { testValid("(any | int)","!{int, any}"); }
		@Test public void test_586() { testValid("(any | int)","!{int, int}"); }
		@Test public void test_587() { testValid("(any | int)","!(any | any)"); }
		@Test public void test_588() { testValid("(any | int)","!(any & any)"); }
		@Test public void test_589() { testValid("(any | int)","!(int & int)"); }
		@Test public void test_590() { testValid("(any | int)","{{int}, {any}}"); }
		@Test public void test_591() { testValid("(any | int)","{!int, {any}}"); }
		@Test public void test_592() { testValid("(any | int)","{{int, int}, {any}}"); }
		@Test public void test_593() { testValid("(any | int)","{(any | int), {any}}"); }
		@Test public void test_594() { testValid("(any | int)","{!int, {int}}"); }
		@Test public void test_595() { testValid("(any | int)","{{any, any}, {int}}"); }
		@Test public void test_596() { testValid("(any | int)","{(any | any), {int}}"); }
		@Test public void test_597() { testValid("(any | int)","{(any & any), {int}}"); }
		@Test public void test_598() { testValid("(any | int)","{(any & int), {int}}"); }
		@Test public void test_599() { testValid("(any | int)","{{any, any}, !int}"); }
		@Test public void test_600() { testValid("(any | int)","{{any, int}, !int}"); }
		@Test public void test_601() { testValid("(any | int)","{(any | any), !int}"); }
		@Test public void test_602() { testValid("(any | int)","{(int | any), !int}"); }
		@Test public void test_603() { testValid("(any | int)","{(any & any), !int}"); }
		@Test public void test_604() { testValid("(any | int)","{(int & any), !int}"); }
		@Test public void test_605() { testValid("(any | int)","{(int & int), !int}"); }
		@Test public void test_606() { testValid("(any | int)","{{any}, {any, any}}"); }
		@Test public void test_607() { testValid("(any | int)","{{int}, {any, any}}"); }
		@Test public void test_608() { testValid("(any | int)","{{int, int}, {any, any}}"); }
		@Test public void test_609() { testValid("(any | int)","{(any | any), {any, any}}"); }
		@Test public void test_610() { testValid("(any | int)","{(any | int), {any, any}}"); }
		@Test public void test_611() { testValid("(any | int)","{!int, {int, any}}"); }
		@Test public void test_612() { testValid("(any | int)","{{int, any}, {int, any}}"); }
		@Test public void test_613() { testValid("(any | int)","{{any, int}, {int, any}}"); }
		@Test public void test_614() { testValid("(any | int)","{(any & int), {int, any}}"); }
		@Test public void test_615() { testValid("(any | int)","{{any}, {any, int}}"); }
		@Test public void test_616() { testValid("(any | int)","{{int, int}, {any, int}}"); }
		@Test public void test_617() { testValid("(any | int)","{(int | int), {any, int}}"); }
		@Test public void test_618() { testValid("(any | int)","{(any & int), {any, int}}"); }
		@Test public void test_619() { testValid("(any | int)","{!int, {int, int}}"); }
		@Test public void test_620() { testValid("(any | int)","{{int, int}, {int, int}}"); }
		@Test public void test_621() { testValid("(any | int)","{(any | any), {int, int}}"); }
		@Test public void test_622() { testValid("(any | int)","{(int | any), {int, int}}"); }
		@Test public void test_623() { testValid("(any | int)","{(int & any), {int, int}}"); }
		@Test public void test_624() { testValid("(any | int)","{{int}, (any | any)}"); }
		@Test public void test_625() { testValid("(any | int)","{{int, any}, (any | any)}"); }
		@Test public void test_626() { testValid("(any | int)","{{any, int}, (any | any)}"); }
		@Test public void test_627() { testValid("(any | int)","{(any | any), (any | any)}"); }
		@Test public void test_628() { testValid("(any | int)","{(int | any), (any | any)}"); }
		@Test public void test_629() { testValid("(any | int)","{(int & int), (any | any)}"); }
		@Test public void test_630() { testValid("(any | int)","{!int, (int | any)}"); }
		@Test public void test_631() { testValid("(any | int)","{{int, int}, (int | any)}"); }
		@Test public void test_632() { testValid("(any | int)","{(any | any), (int | any)}"); }
		@Test public void test_633() { testValid("(any | int)","{(int | int), (int | any)}"); }
		@Test public void test_634() { testValid("(any | int)","{{any}, (any | int)}"); }
		@Test public void test_635() { testValid("(any | int)","{!int, (any | int)}"); }
		@Test public void test_636() { testValid("(any | int)","{(any | any), (any | int)}"); }
		@Test public void test_637() { testValid("(any | int)","{(any | int), (any | int)}"); }
		@Test public void test_638() { testValid("(any | int)","{(any & int), (any | int)}"); }
		@Test public void test_639() { testValid("(any | int)","{{int}, (int | int)}"); }
		@Test public void test_640() { testValid("(any | int)","{{any, any}, (int | int)}"); }
		@Test public void test_641() { testValid("(any | int)","{{int, int}, (int | int)}"); }
		@Test public void test_642() { testValid("(any | int)","{{int}, (any & any)}"); }
		@Test public void test_643() { testValid("(any | int)","{{int, any}, (any & any)}"); }
		@Test public void test_644() { testValid("(any | int)","{{any, int}, (any & any)}"); }
		@Test public void test_645() { testValid("(any | int)","{(int | any), (any & any)}"); }
		@Test public void test_646() { testValid("(any | int)","{(any & any), (any & any)}"); }
		@Test public void test_647() { testValid("(any | int)","{(int & any), (any & any)}"); }
		@Test public void test_648() { testValid("(any | int)","{{any}, (int & any)}"); }
		@Test public void test_649() { testValid("(any | int)","{{int}, (int & any)}"); }
		@Test public void test_650() { testValid("(any | int)","{{any, any}, (int & any)}"); }
		@Test public void test_651() { testValid("(any | int)","{{int, any}, (int & any)}"); }
		@Test public void test_652() { testValid("(any | int)","{(any | int), (int & any)}"); }
		@Test public void test_653() { testValid("(any | int)","{(any & any), (int & any)}"); }
		@Test public void test_654() { testValid("(any | int)","{(int & any), (int & any)}"); }
		@Test public void test_655() { testValid("(any | int)","{(int & int), (int & any)}"); }
		@Test public void test_656() { testValid("(any | int)","{{int, any}, (any & int)}"); }
		@Test public void test_657() { testValid("(any | int)","{(any & any), (any & int)}"); }
		@Test public void test_658() { testValid("(any | int)","{{any, int}, (int & int)}"); }
		@Test public void test_659() { testValid("(any | int)","{(int | int), (int & int)}"); }
		@Test public void test_660() { testValid("(any | int)","{(any & any), (int & int)}"); }
		@Test public void test_661() { testValid("(any | int)","{(any & int), (int & int)}"); }
		@Test public void test_662() { testValid("(any | int)","{(int & int), (int & int)}"); }
		@Test public void test_663() { testValid("(any | int)","(!int | {any})"); }
		@Test public void test_664() { testValid("(any | int)","({any, any} | {any})"); }
		@Test public void test_665() { testValid("(any | int)","((any | any) | {any})"); }
		@Test public void test_666() { testValid("(any | int)","((int | any) | {any})"); }
		@Test public void test_667() { testValid("(any | int)","((any & any) | {any})"); }
		@Test public void test_668() { testValid("(any | int)","((int & any) | {any})"); }
		@Test public void test_669() { testValid("(any | int)","((any & int) | {any})"); }
		@Test public void test_670() { testValid("(any | int)","({int} | {int})"); }
		@Test public void test_671() { testValid("(any | int)","(!any | {int})"); }
		@Test public void test_672() { testValid("(any | int)","(!int | {int})"); }
		@Test public void test_673() { testValid("(any | int)","({any, int} | {int})"); }
		@Test public void test_674() { testValid("(any | int)","((int & any) | {int})"); }
		@Test public void test_675() { testValid("(any | int)","((any & int) | {int})"); }
		@Test public void test_676() { testValid("(any | int)","((int & int) | {int})"); }
		@Test public void test_677() { testValid("(any | int)","({any} | !any)"); }
		@Test public void test_678() { testValid("(any | int)","({int} | !any)"); }
		@Test public void test_679() { testValid("(any | int)","({any, any} | !any)"); }
		@Test public void test_680() { testValid("(any | int)","({int, int} | !any)"); }
		@Test public void test_681() { testValid("(any | int)","((any | any) | !any)"); }
		@Test public void test_682() { testValid("(any | int)","((int | any) | !any)"); }
		@Test public void test_683() { testValid("(any | int)","((int | int) | !any)"); }
		@Test public void test_684() { testValid("(any | int)","((int & int) | !any)"); }
		@Test public void test_685() { testValid("(any | int)","(!int | !int)"); }
		@Test public void test_686() { testValid("(any | int)","({any, any} | !int)"); }
		@Test public void test_687() { testValid("(any | int)","({int, int} | !int)"); }
		@Test public void test_688() { testValid("(any | int)","((int | any) | !int)"); }
		@Test public void test_689() { testValid("(any | int)","((any | int) | !int)"); }
		@Test public void test_690() { testValid("(any | int)","((any & int) | !int)"); }
		@Test public void test_691() { testValid("(any | int)","((int & int) | !int)"); }
		@Test public void test_692() { testValid("(any | int)","({int} | {any, any})"); }
		@Test public void test_693() { testValid("(any | int)","(!any | {any, any})"); }
		@Test public void test_694() { testValid("(any | int)","(!int | {any, any})"); }
		@Test public void test_695() { testValid("(any | int)","({any, int} | {any, any})"); }
		@Test public void test_696() { testValid("(any | int)","((int | any) | {any, any})"); }
		@Test public void test_697() { testValid("(any | int)","((any & any) | {any, any})"); }
		@Test public void test_698() { testValid("(any | int)","((any & int) | {any, any})"); }
		@Test public void test_699() { testValid("(any | int)","(!int | {int, any})"); }
		@Test public void test_700() { testValid("(any | int)","({any, int} | {int, any})"); }
		@Test public void test_701() { testValid("(any | int)","((any | any) | {int, any})"); }
		@Test public void test_702() { testValid("(any | int)","((int | any) | {int, any})"); }
		@Test public void test_703() { testValid("(any | int)","((any | int) | {int, any})"); }
		@Test public void test_704() { testValid("(any | int)","((int & any) | {int, any})"); }
		@Test public void test_705() { testValid("(any | int)","({any} | {any, int})"); }
		@Test public void test_706() { testValid("(any | int)","(!int | {any, int})"); }
		@Test public void test_707() { testValid("(any | int)","({any, int} | {any, int})"); }
		@Test public void test_708() { testValid("(any | int)","((any | any) | {any, int})"); }
		@Test public void test_709() { testValid("(any | int)","((any | int) | {any, int})"); }
		@Test public void test_710() { testValid("(any | int)","((int | int) | {any, int})"); }
		@Test public void test_711() { testValid("(any | int)","((int & any) | {any, int})"); }
		@Test public void test_712() { testValid("(any | int)","(!any | {int, int})"); }
		@Test public void test_713() { testValid("(any | int)","(!int | {int, int})"); }
		@Test public void test_714() { testValid("(any | int)","({any, any} | {int, int})"); }
		@Test public void test_715() { testValid("(any | int)","({any, int} | {int, int})"); }
		@Test public void test_716() { testValid("(any | int)","((any | any) | {int, int})"); }
		@Test public void test_717() { testValid("(any | int)","((int | int) | {int, int})"); }
		@Test public void test_718() { testValid("(any | int)","((int & any) | {int, int})"); }
		@Test public void test_719() { testValid("(any | int)","((any & int) | {int, int})"); }
		@Test public void test_720() { testValid("(any | int)","((int & int) | {int, int})"); }
		@Test public void test_721() { testValid("(any | int)","({any} | (any | any))"); }
		@Test public void test_722() { testValid("(any | int)","(!any | (any | any))"); }
		@Test public void test_723() { testValid("(any | int)","({any, any} | (any | any))"); }
		@Test public void test_724() { testValid("(any | int)","({any, int} | (any | any))"); }
		@Test public void test_725() { testValid("(any | int)","({int, int} | (any | any))"); }
		@Test public void test_726() { testValid("(any | int)","((int | any) | (any | any))"); }
		@Test public void test_727() { testValid("(any | int)","((any | int) | (any | any))"); }
		@Test public void test_728() { testValid("(any | int)","((any & int) | (any | any))"); }
		@Test public void test_729() { testValid("(any | int)","((int & int) | (any | any))"); }
		@Test public void test_730() { testValid("(any | int)","({any} | (int | any))"); }
		@Test public void test_731() { testValid("(any | int)","(!int | (int | any))"); }
		@Test public void test_732() { testValid("(any | int)","({int, any} | (int | any))"); }
		@Test public void test_733() { testValid("(any | int)","({any, int} | (int | any))"); }
		@Test public void test_734() { testValid("(any | int)","((int & any) | (int | any))"); }
		@Test public void test_735() { testValid("(any | int)","((any & int) | (int | any))"); }
		@Test public void test_736() { testValid("(any | int)","({any} | (any | int))"); }
		@Test public void test_737() { testValid("(any | int)","({int} | (any | int))"); }
		@Test public void test_738() { testValid("(any | int)","(!any | (any | int))"); }
		@Test public void test_739() { testValid("(any | int)","(!int | (any | int))"); }
		@Test public void test_740() { testValid("(any | int)","({any, int} | (any | int))"); }
		@Test public void test_741() { testValid("(any | int)","({int, int} | (any | int))"); }
		@Test public void test_742() { testValid("(any | int)","((int | any) | (any | int))"); }
		@Test public void test_743() { testValid("(any | int)","((any | int) | (any | int))"); }
		@Test public void test_744() { testValid("(any | int)","((int | int) | (any | int))"); }
		@Test public void test_745() { testValid("(any | int)","((any & any) | (any | int))"); }
		@Test public void test_746() { testValid("(any | int)","({int} | (int | int))"); }
		@Test public void test_747() { testValid("(any | int)","(!any | (int | int))"); }
		@Test public void test_748() { testValid("(any | int)","(!int | (int | int))"); }
		@Test public void test_749() { testValid("(any | int)","({int, any} | (int | int))"); }
		@Test public void test_750() { testValid("(any | int)","({any, int} | (int | int))"); }
		@Test public void test_751() { testValid("(any | int)","((any | int) | (int | int))"); }
		@Test public void test_752() { testValid("(any | int)","((int | int) | (int | int))"); }
		@Test public void test_753() { testValid("(any | int)","((any & any) | (int | int))"); }
		@Test public void test_754() { testValid("(any | int)","((int & any) | (int | int))"); }
		@Test public void test_755() { testValid("(any | int)","((int & int) | (int | int))"); }
		@Test public void test_756() { testValid("(any | int)","(!any | (any & any))"); }
		@Test public void test_757() { testValid("(any | int)","(!int | (any & any))"); }
		@Test public void test_758() { testValid("(any | int)","({any, any} | (any & any))"); }
		@Test public void test_759() { testValid("(any | int)","({int, any} | (any & any))"); }
		@Test public void test_760() { testValid("(any | int)","({any, int} | (any & any))"); }
		@Test public void test_761() { testValid("(any | int)","({int, int} | (any & any))"); }
		@Test public void test_762() { testValid("(any | int)","((int | any) | (any & any))"); }
		@Test public void test_763() { testValid("(any | int)","((int | int) | (any & any))"); }
		@Test public void test_764() { testValid("(any | int)","((int & any) | (any & any))"); }
		@Test public void test_765() { testValid("(any | int)","((any & int) | (any & any))"); }
		@Test public void test_766() { testValid("(any | int)","((int & int) | (any & any))"); }
		@Test public void test_767() { testValid("(any | int)","({any} | (int & any))"); }
		@Test public void test_768() { testInvalid("(int & any)","{int}"); }
		@Test public void test_769() { testInvalid("(int & any)","{any, any}"); }
		@Test public void test_770() { testInvalid("(int & any)","{int, int}"); }
		@Test public void test_771() { testInvalid("(int & any)","(any | int)"); }
		@Test public void test_772() { testValid("(int & any)","(int & any)"); }
		@Test public void test_773() { testInvalid("(int & any)","{{any}}"); }
		@Test public void test_774() { testInvalid("(int & any)","{{int, any}}"); }
		@Test public void test_775() { testInvalid("(int & any)","{{int, int}}"); }
		@Test public void test_776() { testInvalid("(int & any)","{(any | int)}"); }
		@Test public void test_777() { testInvalid("(int & any)","!{int, any}"); }
		@Test public void test_778() { testInvalid("(int & any)","!{int, int}"); }
		@Test public void test_779() { testValid("(int & any)","!(any | any)"); }
		@Test public void test_780() { testValid("(int & any)","!(any & any)"); }
		@Test public void test_781() { testInvalid("(int & any)","!(int & int)"); }
		@Test public void test_782() { testInvalid("(int & any)","{{int}, {any}}"); }
		@Test public void test_783() { testInvalid("(int & any)","{!int, {any}}"); }
		@Test public void test_784() { testInvalid("(int & any)","{{int, int}, {any}}"); }
		@Test public void test_785() { testInvalid("(int & any)","{(any | int), {any}}"); }
		@Test public void test_786() { testInvalid("(int & any)","{!int, {int}}"); }
		@Test public void test_787() { testInvalid("(int & any)","{{any, any}, {int}}"); }
		@Test public void test_788() { testInvalid("(int & any)","{(any | any), {int}}"); }
		@Test public void test_789() { testInvalid("(int & any)","{(any & any), {int}}"); }
		@Test public void test_790() { testInvalid("(int & any)","{(any & int), {int}}"); }
		@Test public void test_791() { testInvalid("(int & any)","{{any, any}, !int}"); }
		@Test public void test_792() { testInvalid("(int & any)","{{any, int}, !int}"); }
		@Test public void test_793() { testInvalid("(int & any)","{(any | any), !int}"); }
		@Test public void test_794() { testInvalid("(int & any)","{(int | any), !int}"); }
		@Test public void test_795() { testInvalid("(int & any)","{(any & any), !int}"); }
		@Test public void test_796() { testInvalid("(int & any)","{(int & any), !int}"); }
		@Test public void test_797() { testInvalid("(int & any)","{(int & int), !int}"); }
		@Test public void test_798() { testInvalid("(int & any)","{{any}, {any, any}}"); }
		@Test public void test_799() { testInvalid("(int & any)","{{int}, {any, any}}"); }
		@Test public void test_800() { testInvalid("(int & any)","{{int, int}, {any, any}}"); }
		@Test public void test_801() { testInvalid("(int & any)","{(any | any), {any, any}}"); }
		@Test public void test_802() { testInvalid("(int & any)","{(any | int), {any, any}}"); }
		@Test public void test_803() { testInvalid("(int & any)","{!int, {int, any}}"); }
		@Test public void test_804() { testInvalid("(int & any)","{{int, any}, {int, any}}"); }
		@Test public void test_805() { testInvalid("(int & any)","{{any, int}, {int, any}}"); }
		@Test public void test_806() { testInvalid("(int & any)","{(any & int), {int, any}}"); }
		@Test public void test_807() { testInvalid("(int & any)","{{any}, {any, int}}"); }
		@Test public void test_808() { testInvalid("(int & any)","{{int, int}, {any, int}}"); }
		@Test public void test_809() { testInvalid("(int & any)","{(int | int), {any, int}}"); }
		@Test public void test_810() { testInvalid("(int & any)","{(any & int), {any, int}}"); }
		@Test public void test_811() { testInvalid("(int & any)","{!int, {int, int}}"); }
		@Test public void test_812() { testInvalid("(int & any)","{{int, int}, {int, int}}"); }
		@Test public void test_813() { testInvalid("(int & any)","{(any | any), {int, int}}"); }
		@Test public void test_814() { testInvalid("(int & any)","{(int | any), {int, int}}"); }
		@Test public void test_815() { testInvalid("(int & any)","{(int & any), {int, int}}"); }
		@Test public void test_816() { testInvalid("(int & any)","{{int}, (any | any)}"); }
		@Test public void test_817() { testInvalid("(int & any)","{{int, any}, (any | any)}"); }
		@Test public void test_818() { testInvalid("(int & any)","{{any, int}, (any | any)}"); }
		@Test public void test_819() { testInvalid("(int & any)","{(any | any), (any | any)}"); }
		@Test public void test_820() { testInvalid("(int & any)","{(int | any), (any | any)}"); }
		@Test public void test_821() { testInvalid("(int & any)","{(int & int), (any | any)}"); }
		@Test public void test_822() { testInvalid("(int & any)","{!int, (int | any)}"); }
		@Test public void test_823() { testInvalid("(int & any)","{{int, int}, (int | any)}"); }
		@Test public void test_824() { testInvalid("(int & any)","{(any | any), (int | any)}"); }
		@Test public void test_825() { testInvalid("(int & any)","{(int | int), (int | any)}"); }
		@Test public void test_826() { testInvalid("(int & any)","{{any}, (any | int)}"); }
		@Test public void test_827() { testInvalid("(int & any)","{!int, (any | int)}"); }
		@Test public void test_828() { testInvalid("(int & any)","{(any | any), (any | int)}"); }
		@Test public void test_829() { testInvalid("(int & any)","{(any | int), (any | int)}"); }
		@Test public void test_830() { testInvalid("(int & any)","{(any & int), (any | int)}"); }
		@Test public void test_831() { testInvalid("(int & any)","{{int}, (int | int)}"); }
		@Test public void test_832() { testInvalid("(int & any)","{{any, any}, (int | int)}"); }
		@Test public void test_833() { testInvalid("(int & any)","{{int, int}, (int | int)}"); }
		@Test public void test_834() { testInvalid("(int & any)","{{int}, (any & any)}"); }
		@Test public void test_835() { testInvalid("(int & any)","{{int, any}, (any & any)}"); }
		@Test public void test_836() { testInvalid("(int & any)","{{any, int}, (any & any)}"); }
		@Test public void test_837() { testInvalid("(int & any)","{(int | any), (any & any)}"); }
		@Test public void test_838() { testInvalid("(int & any)","{(any & any), (any & any)}"); }
		@Test public void test_839() { testInvalid("(int & any)","{(int & any), (any & any)}"); }
		@Test public void test_840() { testInvalid("(int & any)","{{any}, (int & any)}"); }
		@Test public void test_841() { testInvalid("(int & any)","{{int}, (int & any)}"); }
		@Test public void test_842() { testInvalid("(int & any)","{{any, any}, (int & any)}"); }
		@Test public void test_843() { testInvalid("(int & any)","{{int, any}, (int & any)}"); }
		@Test public void test_844() { testInvalid("(int & any)","{(any | int), (int & any)}"); }
		@Test public void test_845() { testInvalid("(int & any)","{(any & any), (int & any)}"); }
		@Test public void test_846() { testInvalid("(int & any)","{(int & any), (int & any)}"); }
		@Test public void test_847() { testInvalid("(int & any)","{(int & int), (int & any)}"); }
		@Test public void test_848() { testInvalid("(int & any)","{{int, any}, (any & int)}"); }
		@Test public void test_849() { testInvalid("(int & any)","{(any & any), (any & int)}"); }
		@Test public void test_850() { testInvalid("(int & any)","{{any, int}, (int & int)}"); }
		@Test public void test_851() { testInvalid("(int & any)","{(int | int), (int & int)}"); }
		@Test public void test_852() { testInvalid("(int & any)","{(any & any), (int & int)}"); }
		@Test public void test_853() { testInvalid("(int & any)","{(any & int), (int & int)}"); }
		@Test public void test_854() { testInvalid("(int & any)","{(int & int), (int & int)}"); }
		@Test public void test_855() { testInvalid("(int & any)","(!int | {any})"); }
		@Test public void test_856() { testInvalid("(int & any)","({any, any} | {any})"); }
		@Test public void test_857() { testInvalid("(int & any)","((any | any) | {any})"); }
		@Test public void test_858() { testInvalid("(int & any)","((int | any) | {any})"); }
		@Test public void test_859() { testInvalid("(int & any)","((any & any) | {any})"); }
		@Test public void test_860() { testInvalid("(int & any)","((int & any) | {any})"); }
		@Test public void test_861() { testInvalid("(int & any)","((any & int) | {any})"); }
		@Test public void test_862() { testInvalid("(int & any)","({int} | {int})"); }
		@Test public void test_863() { testInvalid("(int & any)","(!any | {int})"); }
		@Test public void test_864() { testInvalid("(int & any)","(!int | {int})"); }
		@Test public void test_865() { testInvalid("(int & any)","({any, int} | {int})"); }
		@Test public void test_866() { testInvalid("(int & any)","((int & any) | {int})"); }
		@Test public void test_867() { testInvalid("(int & any)","((any & int) | {int})"); }
		@Test public void test_868() { testInvalid("(int & any)","((int & int) | {int})"); }
		@Test public void test_869() { testInvalid("(int & any)","({any} | !any)"); }
		@Test public void test_870() { testInvalid("(int & any)","({int} | !any)"); }
		@Test public void test_871() { testInvalid("(int & any)","({any, any} | !any)"); }
		@Test public void test_872() { testInvalid("(int & any)","({int, int} | !any)"); }
		@Test public void test_873() { testInvalid("(int & any)","((any | any) | !any)"); }
		@Test public void test_874() { testInvalid("(int & any)","((int | any) | !any)"); }
		@Test public void test_875() { testValid("(int & any)","((int | int) | !any)"); }
		@Test public void test_876() { testValid("(int & any)","((int & int) | !any)"); }
		@Test public void test_877() { testInvalid("(int & any)","(!int | !int)"); }
		@Test public void test_878() { testInvalid("(int & any)","({any, any} | !int)"); }
		@Test public void test_879() { testInvalid("(int & any)","({int, int} | !int)"); }
		@Test public void test_880() { testInvalid("(int & any)","((int | any) | !int)"); }
		@Test public void test_881() { testInvalid("(int & any)","((any | int) | !int)"); }
		@Test public void test_882() { testInvalid("(int & any)","((any & int) | !int)"); }
		@Test public void test_883() { testInvalid("(int & any)","((int & int) | !int)"); }
		@Test public void test_884() { testInvalid("(int & any)","({int} | {any, any})"); }
		@Test public void test_885() { testInvalid("(int & any)","(!any | {any, any})"); }
		@Test public void test_886() { testInvalid("(int & any)","(!int | {any, any})"); }
		@Test public void test_887() { testInvalid("(int & any)","({any, int} | {any, any})"); }
		@Test public void test_888() { testInvalid("(int & any)","((int | any) | {any, any})"); }
		@Test public void test_889() { testInvalid("(int & any)","((any & any) | {any, any})"); }
		@Test public void test_890() { testInvalid("(int & any)","((any & int) | {any, any})"); }
		@Test public void test_891() { testInvalid("(int & any)","(!int | {int, any})"); }
		@Test public void test_892() { testInvalid("(int & any)","({any, int} | {int, any})"); }
		@Test public void test_893() { testInvalid("(int & any)","((any | any) | {int, any})"); }
		@Test public void test_894() { testInvalid("(int & any)","((int | any) | {int, any})"); }
		@Test public void test_895() { testInvalid("(int & any)","((any | int) | {int, any})"); }
		@Test public void test_896() { testInvalid("(int & any)","((int & any) | {int, any})"); }
		@Test public void test_897() { testInvalid("(int & any)","({any} | {any, int})"); }
		@Test public void test_898() { testInvalid("(int & any)","(!int | {any, int})"); }
		@Test public void test_899() { testInvalid("(int & any)","({any, int} | {any, int})"); }
		@Test public void test_900() { testInvalid("(int & any)","((any | any) | {any, int})"); }
		@Test public void test_901() { testInvalid("(int & any)","((any | int) | {any, int})"); }
		@Test public void test_902() { testInvalid("(int & any)","((int | int) | {any, int})"); }
		@Test public void test_903() { testInvalid("(int & any)","((int & any) | {any, int})"); }
		@Test public void test_904() { testInvalid("(int & any)","(!any | {int, int})"); }
		@Test public void test_905() { testInvalid("(int & any)","(!int | {int, int})"); }
		@Test public void test_906() { testInvalid("(int & any)","({any, any} | {int, int})"); }
		@Test public void test_907() { testInvalid("(int & any)","({any, int} | {int, int})"); }
		@Test public void test_908() { testInvalid("(int & any)","((any | any) | {int, int})"); }
		@Test public void test_909() { testInvalid("(int & any)","((int | int) | {int, int})"); }
		@Test public void test_910() { testInvalid("(int & any)","((int & any) | {int, int})"); }
		@Test public void test_911() { testInvalid("(int & any)","((any & int) | {int, int})"); }
		@Test public void test_912() { testInvalid("(int & any)","((int & int) | {int, int})"); }
		@Test public void test_913() { testInvalid("(int & any)","({any} | (any | any))"); }
		@Test public void test_914() { testInvalid("(int & any)","(!any | (any | any))"); }
		@Test public void test_915() { testInvalid("(int & any)","({any, any} | (any | any))"); }
		@Test public void test_916() { testInvalid("(int & any)","({any, int} | (any | any))"); }
		@Test public void test_917() { testInvalid("(int & any)","({int, int} | (any | any))"); }
		@Test public void test_918() { testInvalid("(int & any)","((int | any) | (any | any))"); }
		@Test public void test_919() { testInvalid("(int & any)","((any | int) | (any | any))"); }
		@Test public void test_920() { testInvalid("(int & any)","((any & int) | (any | any))"); }
		@Test public void test_921() { testInvalid("(int & any)","((int & int) | (any | any))"); }
		@Test public void test_922() { testInvalid("(int & any)","({any} | (int | any))"); }
		@Test public void test_923() { testInvalid("(int & any)","(!int | (int | any))"); }
		@Test public void test_924() { testInvalid("(int & any)","({int, any} | (int | any))"); }
		@Test public void test_925() { testInvalid("(int & any)","({any, int} | (int | any))"); }
		@Test public void test_926() { testInvalid("(int & any)","((int & any) | (int | any))"); }
		@Test public void test_927() { testInvalid("(int & any)","((any & int) | (int | any))"); }
		@Test public void test_928() { testInvalid("(int & any)","({any} | (any | int))"); }
		@Test public void test_929() { testInvalid("(int & any)","({int} | (any | int))"); }
		@Test public void test_930() { testInvalid("(int & any)","(!any | (any | int))"); }
		@Test public void test_931() { testInvalid("(int & any)","(!int | (any | int))"); }
		@Test public void test_932() { testInvalid("(int & any)","({any, int} | (any | int))"); }
		@Test public void test_933() { testInvalid("(int & any)","({int, int} | (any | int))"); }
		@Test public void test_934() { testInvalid("(int & any)","((int | any) | (any | int))"); }
		@Test public void test_935() { testInvalid("(int & any)","((any | int) | (any | int))"); }
		@Test public void test_936() { testInvalid("(int & any)","((int | int) | (any | int))"); }
		@Test public void test_937() { testInvalid("(int & any)","((any & any) | (any | int))"); }
		@Test public void test_938() { testInvalid("(int & any)","({int} | (int | int))"); }
		@Test public void test_939() { testValid("(int & any)","(!any | (int | int))"); }
		@Test public void test_940() { testInvalid("(int & any)","(!int | (int | int))"); }
		@Test public void test_941() { testInvalid("(int & any)","({int, any} | (int | int))"); }
		@Test public void test_942() { testInvalid("(int & any)","({any, int} | (int | int))"); }
		@Test public void test_943() { testInvalid("(int & any)","((any | int) | (int | int))"); }
		@Test public void test_944() { testValid("(int & any)","((int | int) | (int | int))"); }
		@Test public void test_945() { testInvalid("(int & any)","((any & any) | (int | int))"); }
		@Test public void test_946() { testValid("(int & any)","((int & any) | (int | int))"); }
		@Test public void test_947() { testValid("(int & any)","((int & int) | (int | int))"); }
		@Test public void test_948() { testInvalid("(int & any)","(!any | (any & any))"); }
		@Test public void test_949() { testInvalid("(int & any)","(!int | (any & any))"); }
		@Test public void test_950() { testInvalid("(int & any)","({any, any} | (any & any))"); }
		@Test public void test_951() { testInvalid("(int & any)","({int, any} | (any & any))"); }
		@Test public void test_952() { testInvalid("(int & any)","({any, int} | (any & any))"); }
		@Test public void test_953() { testInvalid("(int & any)","({int, int} | (any & any))"); }
		@Test public void test_954() { testInvalid("(int & any)","((int | any) | (any & any))"); }
		@Test public void test_955() { testInvalid("(int & any)","((int | int) | (any & any))"); }
		@Test public void test_956() { testInvalid("(int & any)","((int & any) | (any & any))"); }
		@Test public void test_957() { testInvalid("(int & any)","((any & int) | (any & any))"); }
		@Test public void test_958() { testInvalid("(int & any)","((int & int) | (any & any))"); }
		@Test public void test_959() { testInvalid("(int & any)","({any} | (int & any))"); }
		@Test public void test_960() { testInvalid("{{any}}","{int}"); }
		@Test public void test_961() { testInvalid("{{any}}","{any, any}"); }
		@Test public void test_962() { testInvalid("{{any}}","{int, int}"); }
		@Test public void test_963() { testInvalid("{{any}}","(any | int)"); }
		@Test public void test_964() { testInvalid("{{any}}","(int & any)"); }
		@Test public void test_965() { testValid("{{any}}","{{any}}"); }
		@Test public void test_966() { testInvalid("{{any}}","{{int, any}}"); }
		@Test public void test_967() { testInvalid("{{any}}","{{int, int}}"); }
		@Test public void test_968() { testInvalid("{{any}}","{(any | int)}"); }
		@Test public void test_969() { testInvalid("{{any}}","!{int, any}"); }
		@Test public void test_970() { testInvalid("{{any}}","!{int, int}"); }
		@Test public void test_971() { testValid("{{any}}","!(any | any)"); }
		@Test public void test_972() { testValid("{{any}}","!(any & any)"); }
		@Test public void test_973() { testInvalid("{{any}}","!(int & int)"); }
		@Test public void test_974() { testInvalid("{{any}}","{{int}, {any}}"); }
		@Test public void test_975() { testInvalid("{{any}}","{!int, {any}}"); }
		@Test public void test_976() { testInvalid("{{any}}","{{int, int}, {any}}"); }
		@Test public void test_977() { testInvalid("{{any}}","{(any | int), {any}}"); }
		@Test public void test_978() { testInvalid("{{any}}","{!int, {int}}"); }
		@Test public void test_979() { testInvalid("{{any}}","{{any, any}, {int}}"); }
		@Test public void test_980() { testInvalid("{{any}}","{(any | any), {int}}"); }
		@Test public void test_981() { testInvalid("{{any}}","{(any & any), {int}}"); }
		@Test public void test_982() { testInvalid("{{any}}","{(any & int), {int}}"); }
		@Test public void test_983() { testInvalid("{{any}}","{{any, any}, !int}"); }
		@Test public void test_984() { testInvalid("{{any}}","{{any, int}, !int}"); }
		@Test public void test_985() { testInvalid("{{any}}","{(any | any), !int}"); }
		@Test public void test_986() { testInvalid("{{any}}","{(int | any), !int}"); }
		@Test public void test_987() { testInvalid("{{any}}","{(any & any), !int}"); }
		@Test public void test_988() { testInvalid("{{any}}","{(int & any), !int}"); }
		@Test public void test_989() { testInvalid("{{any}}","{(int & int), !int}"); }
		@Test public void test_990() { testInvalid("{{any}}","{{any}, {any, any}}"); }
		@Test public void test_991() { testInvalid("{{any}}","{{int}, {any, any}}"); }
		@Test public void test_992() { testInvalid("{{any}}","{{int, int}, {any, any}}"); }
		@Test public void test_993() { testInvalid("{{any}}","{(any | any), {any, any}}"); }
		@Test public void test_994() { testInvalid("{{any}}","{(any | int), {any, any}}"); }
		@Test public void test_995() { testInvalid("{{any}}","{!int, {int, any}}"); }
		@Test public void test_996() { testInvalid("{{any}}","{{int, any}, {int, any}}"); }
		@Test public void test_997() { testInvalid("{{any}}","{{any, int}, {int, any}}"); }
		@Test public void test_998() { testInvalid("{{any}}","{(any & int), {int, any}}"); }
		@Test public void test_999() { testInvalid("{{any}}","{{any}, {any, int}}"); }
		@Test public void test_1000() { testInvalid("{{any}}","{{int, int}, {any, int}}"); }
		@Test public void test_1001() { testInvalid("{{any}}","{(int | int), {any, int}}"); }
		@Test public void test_1002() { testInvalid("{{any}}","{(any & int), {any, int}}"); }
		@Test public void test_1003() { testInvalid("{{any}}","{!int, {int, int}}"); }
		@Test public void test_1004() { testInvalid("{{any}}","{{int, int}, {int, int}}"); }
		@Test public void test_1005() { testInvalid("{{any}}","{(any | any), {int, int}}"); }
		@Test public void test_1006() { testInvalid("{{any}}","{(int | any), {int, int}}"); }
		@Test public void test_1007() { testInvalid("{{any}}","{(int & any), {int, int}}"); }
		@Test public void test_1008() { testInvalid("{{any}}","{{int}, (any | any)}"); }
		@Test public void test_1009() { testInvalid("{{any}}","{{int, any}, (any | any)}"); }
		@Test public void test_1010() { testInvalid("{{any}}","{{any, int}, (any | any)}"); }
		@Test public void test_1011() { testInvalid("{{any}}","{(any | any), (any | any)}"); }
		@Test public void test_1012() { testInvalid("{{any}}","{(int | any), (any | any)}"); }
		@Test public void test_1013() { testInvalid("{{any}}","{(int & int), (any | any)}"); }
		@Test public void test_1014() { testInvalid("{{any}}","{!int, (int | any)}"); }
		@Test public void test_1015() { testInvalid("{{any}}","{{int, int}, (int | any)}"); }
		@Test public void test_1016() { testInvalid("{{any}}","{(any | any), (int | any)}"); }
		@Test public void test_1017() { testInvalid("{{any}}","{(int | int), (int | any)}"); }
		@Test public void test_1018() { testInvalid("{{any}}","{{any}, (any | int)}"); }
		@Test public void test_1019() { testInvalid("{{any}}","{!int, (any | int)}"); }
		@Test public void test_1020() { testInvalid("{{any}}","{(any | any), (any | int)}"); }
		@Test public void test_1021() { testInvalid("{{any}}","{(any | int), (any | int)}"); }
		@Test public void test_1022() { testInvalid("{{any}}","{(any & int), (any | int)}"); }
		@Test public void test_1023() { testInvalid("{{any}}","{{int}, (int | int)}"); }
		@Test public void test_1024() { testInvalid("{{any}}","{{any, any}, (int | int)}"); }
		@Test public void test_1025() { testInvalid("{{any}}","{{int, int}, (int | int)}"); }
		@Test public void test_1026() { testInvalid("{{any}}","{{int}, (any & any)}"); }
		@Test public void test_1027() { testInvalid("{{any}}","{{int, any}, (any & any)}"); }
		@Test public void test_1028() { testInvalid("{{any}}","{{any, int}, (any & any)}"); }
		@Test public void test_1029() { testInvalid("{{any}}","{(int | any), (any & any)}"); }
		@Test public void test_1030() { testInvalid("{{any}}","{(any & any), (any & any)}"); }
		@Test public void test_1031() { testInvalid("{{any}}","{(int & any), (any & any)}"); }
		@Test public void test_1032() { testInvalid("{{any}}","{{any}, (int & any)}"); }
		@Test public void test_1033() { testInvalid("{{any}}","{{int}, (int & any)}"); }
		@Test public void test_1034() { testInvalid("{{any}}","{{any, any}, (int & any)}"); }
		@Test public void test_1035() { testInvalid("{{any}}","{{int, any}, (int & any)}"); }
		@Test public void test_1036() { testInvalid("{{any}}","{(any | int), (int & any)}"); }
		@Test public void test_1037() { testInvalid("{{any}}","{(any & any), (int & any)}"); }
		@Test public void test_1038() { testInvalid("{{any}}","{(int & any), (int & any)}"); }
		@Test public void test_1039() { testInvalid("{{any}}","{(int & int), (int & any)}"); }
		@Test public void test_1040() { testInvalid("{{any}}","{{int, any}, (any & int)}"); }
		@Test public void test_1041() { testInvalid("{{any}}","{(any & any), (any & int)}"); }
		@Test public void test_1042() { testInvalid("{{any}}","{{any, int}, (int & int)}"); }
		@Test public void test_1043() { testInvalid("{{any}}","{(int | int), (int & int)}"); }
		@Test public void test_1044() { testInvalid("{{any}}","{(any & any), (int & int)}"); }
		@Test public void test_1045() { testInvalid("{{any}}","{(any & int), (int & int)}"); }
		@Test public void test_1046() { testInvalid("{{any}}","{(int & int), (int & int)}"); }
		@Test public void test_1047() { testInvalid("{{any}}","(!int | {any})"); }
		@Test public void test_1048() { testInvalid("{{any}}","({any, any} | {any})"); }
		@Test public void test_1049() { testInvalid("{{any}}","((any | any) | {any})"); }
		@Test public void test_1050() { testInvalid("{{any}}","((int | any) | {any})"); }
		@Test public void test_1051() { testInvalid("{{any}}","((any & any) | {any})"); }
		@Test public void test_1052() { testInvalid("{{any}}","((int & any) | {any})"); }
		@Test public void test_1053() { testInvalid("{{any}}","((any & int) | {any})"); }
		@Test public void test_1054() { testInvalid("{{any}}","({int} | {int})"); }
		@Test public void test_1055() { testInvalid("{{any}}","(!any | {int})"); }
		@Test public void test_1056() { testInvalid("{{any}}","(!int | {int})"); }
		@Test public void test_1057() { testInvalid("{{any}}","({any, int} | {int})"); }
		@Test public void test_1058() { testInvalid("{{any}}","((int & any) | {int})"); }
		@Test public void test_1059() { testInvalid("{{any}}","((any & int) | {int})"); }
		@Test public void test_1060() { testInvalid("{{any}}","((int & int) | {int})"); }
		@Test public void test_1061() { testInvalid("{{any}}","({any} | !any)"); }
		@Test public void test_1062() { testInvalid("{{any}}","({int} | !any)"); }
		@Test public void test_1063() { testInvalid("{{any}}","({any, any} | !any)"); }
		@Test public void test_1064() { testInvalid("{{any}}","({int, int} | !any)"); }
		@Test public void test_1065() { testInvalid("{{any}}","((any | any) | !any)"); }
		@Test public void test_1066() { testInvalid("{{any}}","((int | any) | !any)"); }
		@Test public void test_1067() { testInvalid("{{any}}","((int | int) | !any)"); }
		@Test public void test_1068() { testInvalid("{{any}}","((int & int) | !any)"); }
		@Test public void test_1069() { testInvalid("{{any}}","(!int | !int)"); }
		@Test public void test_1070() { testInvalid("{{any}}","({any, any} | !int)"); }
		@Test public void test_1071() { testInvalid("{{any}}","({int, int} | !int)"); }
		@Test public void test_1072() { testInvalid("{{any}}","((int | any) | !int)"); }
		@Test public void test_1073() { testInvalid("{{any}}","((any | int) | !int)"); }
		@Test public void test_1074() { testInvalid("{{any}}","((any & int) | !int)"); }
		@Test public void test_1075() { testInvalid("{{any}}","((int & int) | !int)"); }
		@Test public void test_1076() { testInvalid("{{any}}","({int} | {any, any})"); }
		@Test public void test_1077() { testInvalid("{{any}}","(!any | {any, any})"); }
		@Test public void test_1078() { testInvalid("{{any}}","(!int | {any, any})"); }
		@Test public void test_1079() { testInvalid("{{any}}","({any, int} | {any, any})"); }
		@Test public void test_1080() { testInvalid("{{any}}","((int | any) | {any, any})"); }
		@Test public void test_1081() { testInvalid("{{any}}","((any & any) | {any, any})"); }
		@Test public void test_1082() { testInvalid("{{any}}","((any & int) | {any, any})"); }
		@Test public void test_1083() { testInvalid("{{any}}","(!int | {int, any})"); }
		@Test public void test_1084() { testInvalid("{{any}}","({any, int} | {int, any})"); }
		@Test public void test_1085() { testInvalid("{{any}}","((any | any) | {int, any})"); }
		@Test public void test_1086() { testInvalid("{{any}}","((int | any) | {int, any})"); }
		@Test public void test_1087() { testInvalid("{{any}}","((any | int) | {int, any})"); }
		@Test public void test_1088() { testInvalid("{{any}}","((int & any) | {int, any})"); }
		@Test public void test_1089() { testInvalid("{{any}}","({any} | {any, int})"); }
		@Test public void test_1090() { testInvalid("{{any}}","(!int | {any, int})"); }
		@Test public void test_1091() { testInvalid("{{any}}","({any, int} | {any, int})"); }
		@Test public void test_1092() { testInvalid("{{any}}","((any | any) | {any, int})"); }
		@Test public void test_1093() { testInvalid("{{any}}","((any | int) | {any, int})"); }
		@Test public void test_1094() { testInvalid("{{any}}","((int | int) | {any, int})"); }
		@Test public void test_1095() { testInvalid("{{any}}","((int & any) | {any, int})"); }
		@Test public void test_1096() { testInvalid("{{any}}","(!any | {int, int})"); }
		@Test public void test_1097() { testInvalid("{{any}}","(!int | {int, int})"); }
		@Test public void test_1098() { testInvalid("{{any}}","({any, any} | {int, int})"); }
		@Test public void test_1099() { testInvalid("{{any}}","({any, int} | {int, int})"); }
		@Test public void test_1100() { testInvalid("{{any}}","((any | any) | {int, int})"); }
		@Test public void test_1101() { testInvalid("{{any}}","((int | int) | {int, int})"); }
		@Test public void test_1102() { testInvalid("{{any}}","((int & any) | {int, int})"); }
		@Test public void test_1103() { testInvalid("{{any}}","((any & int) | {int, int})"); }
		@Test public void test_1104() { testInvalid("{{any}}","((int & int) | {int, int})"); }
		@Test public void test_1105() { testInvalid("{{any}}","({any} | (any | any))"); }
		@Test public void test_1106() { testInvalid("{{any}}","(!any | (any | any))"); }
		@Test public void test_1107() { testInvalid("{{any}}","({any, any} | (any | any))"); }
		@Test public void test_1108() { testInvalid("{{any}}","({any, int} | (any | any))"); }
		@Test public void test_1109() { testInvalid("{{any}}","({int, int} | (any | any))"); }
		@Test public void test_1110() { testInvalid("{{any}}","((int | any) | (any | any))"); }
		@Test public void test_1111() { testInvalid("{{any}}","((any | int) | (any | any))"); }
		@Test public void test_1112() { testInvalid("{{any}}","((any & int) | (any | any))"); }
		@Test public void test_1113() { testInvalid("{{any}}","((int & int) | (any | any))"); }
		@Test public void test_1114() { testInvalid("{{any}}","({any} | (int | any))"); }
		@Test public void test_1115() { testInvalid("{{any}}","(!int | (int | any))"); }
		@Test public void test_1116() { testInvalid("{{any}}","({int, any} | (int | any))"); }
		@Test public void test_1117() { testInvalid("{{any}}","({any, int} | (int | any))"); }
		@Test public void test_1118() { testInvalid("{{any}}","((int & any) | (int | any))"); }
		@Test public void test_1119() { testInvalid("{{any}}","((any & int) | (int | any))"); }
		@Test public void test_1120() { testInvalid("{{any}}","({any} | (any | int))"); }
		@Test public void test_1121() { testInvalid("{{any}}","({int} | (any | int))"); }
		@Test public void test_1122() { testInvalid("{{any}}","(!any | (any | int))"); }
		@Test public void test_1123() { testInvalid("{{any}}","(!int | (any | int))"); }
		@Test public void test_1124() { testInvalid("{{any}}","({any, int} | (any | int))"); }
		@Test public void test_1125() { testInvalid("{{any}}","({int, int} | (any | int))"); }
		@Test public void test_1126() { testInvalid("{{any}}","((int | any) | (any | int))"); }
		@Test public void test_1127() { testInvalid("{{any}}","((any | int) | (any | int))"); }
		@Test public void test_1128() { testInvalid("{{any}}","((int | int) | (any | int))"); }
		@Test public void test_1129() { testInvalid("{{any}}","((any & any) | (any | int))"); }
		@Test public void test_1130() { testInvalid("{{any}}","({int} | (int | int))"); }
		@Test public void test_1131() { testInvalid("{{any}}","(!any | (int | int))"); }
		@Test public void test_1132() { testInvalid("{{any}}","(!int | (int | int))"); }
		@Test public void test_1133() { testInvalid("{{any}}","({int, any} | (int | int))"); }
		@Test public void test_1134() { testInvalid("{{any}}","({any, int} | (int | int))"); }
		@Test public void test_1135() { testInvalid("{{any}}","((any | int) | (int | int))"); }
		@Test public void test_1136() { testInvalid("{{any}}","((int | int) | (int | int))"); }
		@Test public void test_1137() { testInvalid("{{any}}","((any & any) | (int | int))"); }
		@Test public void test_1138() { testInvalid("{{any}}","((int & any) | (int | int))"); }
		@Test public void test_1139() { testInvalid("{{any}}","((int & int) | (int | int))"); }
		@Test public void test_1140() { testInvalid("{{any}}","(!any | (any & any))"); }
		@Test public void test_1141() { testInvalid("{{any}}","(!int | (any & any))"); }
		@Test public void test_1142() { testInvalid("{{any}}","({any, any} | (any & any))"); }
		@Test public void test_1143() { testInvalid("{{any}}","({int, any} | (any & any))"); }
		@Test public void test_1144() { testInvalid("{{any}}","({any, int} | (any & any))"); }
		@Test public void test_1145() { testInvalid("{{any}}","({int, int} | (any & any))"); }
		@Test public void test_1146() { testInvalid("{{any}}","((int | any) | (any & any))"); }
		@Test public void test_1147() { testInvalid("{{any}}","((int | int) | (any & any))"); }
		@Test public void test_1148() { testInvalid("{{any}}","((int & any) | (any & any))"); }
		@Test public void test_1149() { testInvalid("{{any}}","((any & int) | (any & any))"); }
		@Test public void test_1150() { testInvalid("{{any}}","((int & int) | (any & any))"); }
		@Test public void test_1151() { testInvalid("{{any}}","({any} | (int & any))"); }
		@Test public void test_1152() { testInvalid("{{int, any}}","{int}"); }
		@Test public void test_1153() { testInvalid("{{int, any}}","{any, any}"); }
		@Test public void test_1154() { testInvalid("{{int, any}}","{int, int}"); }
		@Test public void test_1155() { testInvalid("{{int, any}}","(any | int)"); }
		@Test public void test_1156() { testInvalid("{{int, any}}","(int & any)"); }
		@Test public void test_1157() { testInvalid("{{int, any}}","{{any}}"); }
		@Test public void test_1158() { testValid("{{int, any}}","{{int, any}}"); }
		@Test public void test_1159() { testValid("{{int, any}}","{{int, int}}"); }
		@Test public void test_1160() { testInvalid("{{int, any}}","{(any | int)}"); }
		@Test public void test_1161() { testInvalid("{{int, any}}","!{int, any}"); }
		@Test public void test_1162() { testInvalid("{{int, any}}","!{int, int}"); }
		@Test public void test_1163() { testValid("{{int, any}}","!(any | any)"); }
		@Test public void test_1164() { testValid("{{int, any}}","!(any & any)"); }
		@Test public void test_1165() { testInvalid("{{int, any}}","!(int & int)"); }
		@Test public void test_1166() { testInvalid("{{int, any}}","{{int}, {any}}"); }
		@Test public void test_1167() { testInvalid("{{int, any}}","{!int, {any}}"); }
		@Test public void test_1168() { testInvalid("{{int, any}}","{{int, int}, {any}}"); }
		@Test public void test_1169() { testInvalid("{{int, any}}","{(any | int), {any}}"); }
		@Test public void test_1170() { testInvalid("{{int, any}}","{!int, {int}}"); }
		@Test public void test_1171() { testInvalid("{{int, any}}","{{any, any}, {int}}"); }
		@Test public void test_1172() { testInvalid("{{int, any}}","{(any | any), {int}}"); }
		@Test public void test_1173() { testInvalid("{{int, any}}","{(any & any), {int}}"); }
		@Test public void test_1174() { testInvalid("{{int, any}}","{(any & int), {int}}"); }
		@Test public void test_1175() { testInvalid("{{int, any}}","{{any, any}, !int}"); }
		@Test public void test_1176() { testInvalid("{{int, any}}","{{any, int}, !int}"); }
		@Test public void test_1177() { testInvalid("{{int, any}}","{(any | any), !int}"); }
		@Test public void test_1178() { testInvalid("{{int, any}}","{(int | any), !int}"); }
		@Test public void test_1179() { testInvalid("{{int, any}}","{(any & any), !int}"); }
		@Test public void test_1180() { testInvalid("{{int, any}}","{(int & any), !int}"); }
		@Test public void test_1181() { testInvalid("{{int, any}}","{(int & int), !int}"); }
		@Test public void test_1182() { testInvalid("{{int, any}}","{{any}, {any, any}}"); }
		@Test public void test_1183() { testInvalid("{{int, any}}","{{int}, {any, any}}"); }
		@Test public void test_1184() { testInvalid("{{int, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_1185() { testInvalid("{{int, any}}","{(any | any), {any, any}}"); }
		@Test public void test_1186() { testInvalid("{{int, any}}","{(any | int), {any, any}}"); }
		@Test public void test_1187() { testInvalid("{{int, any}}","{!int, {int, any}}"); }
		@Test public void test_1188() { testInvalid("{{int, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_1189() { testInvalid("{{int, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_1190() { testInvalid("{{int, any}}","{(any & int), {int, any}}"); }
		@Test public void test_1191() { testInvalid("{{int, any}}","{{any}, {any, int}}"); }
		@Test public void test_1192() { testInvalid("{{int, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_1193() { testInvalid("{{int, any}}","{(int | int), {any, int}}"); }
		@Test public void test_1194() { testInvalid("{{int, any}}","{(any & int), {any, int}}"); }
		@Test public void test_1195() { testInvalid("{{int, any}}","{!int, {int, int}}"); }
		@Test public void test_1196() { testInvalid("{{int, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_1197() { testInvalid("{{int, any}}","{(any | any), {int, int}}"); }
		@Test public void test_1198() { testInvalid("{{int, any}}","{(int | any), {int, int}}"); }
		@Test public void test_1199() { testInvalid("{{int, any}}","{(int & any), {int, int}}"); }
		@Test public void test_1200() { testInvalid("{{int, any}}","{{int}, (any | any)}"); }
		@Test public void test_1201() { testInvalid("{{int, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_1202() { testInvalid("{{int, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_1203() { testInvalid("{{int, any}}","{(any | any), (any | any)}"); }
		@Test public void test_1204() { testInvalid("{{int, any}}","{(int | any), (any | any)}"); }
		@Test public void test_1205() { testInvalid("{{int, any}}","{(int & int), (any | any)}"); }
		@Test public void test_1206() { testInvalid("{{int, any}}","{!int, (int | any)}"); }
		@Test public void test_1207() { testInvalid("{{int, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_1208() { testInvalid("{{int, any}}","{(any | any), (int | any)}"); }
		@Test public void test_1209() { testInvalid("{{int, any}}","{(int | int), (int | any)}"); }
		@Test public void test_1210() { testInvalid("{{int, any}}","{{any}, (any | int)}"); }
		@Test public void test_1211() { testInvalid("{{int, any}}","{!int, (any | int)}"); }
		@Test public void test_1212() { testInvalid("{{int, any}}","{(any | any), (any | int)}"); }
		@Test public void test_1213() { testInvalid("{{int, any}}","{(any | int), (any | int)}"); }
		@Test public void test_1214() { testInvalid("{{int, any}}","{(any & int), (any | int)}"); }
		@Test public void test_1215() { testInvalid("{{int, any}}","{{int}, (int | int)}"); }
		@Test public void test_1216() { testInvalid("{{int, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_1217() { testInvalid("{{int, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_1218() { testInvalid("{{int, any}}","{{int}, (any & any)}"); }
		@Test public void test_1219() { testInvalid("{{int, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_1220() { testInvalid("{{int, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_1221() { testInvalid("{{int, any}}","{(int | any), (any & any)}"); }
		@Test public void test_1222() { testInvalid("{{int, any}}","{(any & any), (any & any)}"); }
		@Test public void test_1223() { testInvalid("{{int, any}}","{(int & any), (any & any)}"); }
		@Test public void test_1224() { testInvalid("{{int, any}}","{{any}, (int & any)}"); }
		@Test public void test_1225() { testInvalid("{{int, any}}","{{int}, (int & any)}"); }
		@Test public void test_1226() { testInvalid("{{int, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_1227() { testInvalid("{{int, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_1228() { testInvalid("{{int, any}}","{(any | int), (int & any)}"); }
		@Test public void test_1229() { testInvalid("{{int, any}}","{(any & any), (int & any)}"); }
		@Test public void test_1230() { testInvalid("{{int, any}}","{(int & any), (int & any)}"); }
		@Test public void test_1231() { testInvalid("{{int, any}}","{(int & int), (int & any)}"); }
		@Test public void test_1232() { testInvalid("{{int, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_1233() { testInvalid("{{int, any}}","{(any & any), (any & int)}"); }
		@Test public void test_1234() { testInvalid("{{int, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_1235() { testInvalid("{{int, any}}","{(int | int), (int & int)}"); }
		@Test public void test_1236() { testInvalid("{{int, any}}","{(any & any), (int & int)}"); }
		@Test public void test_1237() { testInvalid("{{int, any}}","{(any & int), (int & int)}"); }
		@Test public void test_1238() { testInvalid("{{int, any}}","{(int & int), (int & int)}"); }
		@Test public void test_1239() { testInvalid("{{int, any}}","(!int | {any})"); }
		@Test public void test_1240() { testInvalid("{{int, any}}","({any, any} | {any})"); }
		@Test public void test_1241() { testInvalid("{{int, any}}","((any | any) | {any})"); }
		@Test public void test_1242() { testInvalid("{{int, any}}","((int | any) | {any})"); }
		@Test public void test_1243() { testInvalid("{{int, any}}","((any & any) | {any})"); }
		@Test public void test_1244() { testInvalid("{{int, any}}","((int & any) | {any})"); }
		@Test public void test_1245() { testInvalid("{{int, any}}","((any & int) | {any})"); }
		@Test public void test_1246() { testInvalid("{{int, any}}","({int} | {int})"); }
		@Test public void test_1247() { testInvalid("{{int, any}}","(!any | {int})"); }
		@Test public void test_1248() { testInvalid("{{int, any}}","(!int | {int})"); }
		@Test public void test_1249() { testInvalid("{{int, any}}","({any, int} | {int})"); }
		@Test public void test_1250() { testInvalid("{{int, any}}","((int & any) | {int})"); }
		@Test public void test_1251() { testInvalid("{{int, any}}","((any & int) | {int})"); }
		@Test public void test_1252() { testInvalid("{{int, any}}","((int & int) | {int})"); }
		@Test public void test_1253() { testInvalid("{{int, any}}","({any} | !any)"); }
		@Test public void test_1254() { testInvalid("{{int, any}}","({int} | !any)"); }
		@Test public void test_1255() { testInvalid("{{int, any}}","({any, any} | !any)"); }
		@Test public void test_1256() { testInvalid("{{int, any}}","({int, int} | !any)"); }
		@Test public void test_1257() { testInvalid("{{int, any}}","((any | any) | !any)"); }
		@Test public void test_1258() { testInvalid("{{int, any}}","((int | any) | !any)"); }
		@Test public void test_1259() { testInvalid("{{int, any}}","((int | int) | !any)"); }
		@Test public void test_1260() { testInvalid("{{int, any}}","((int & int) | !any)"); }
		@Test public void test_1261() { testInvalid("{{int, any}}","(!int | !int)"); }
		@Test public void test_1262() { testInvalid("{{int, any}}","({any, any} | !int)"); }
		@Test public void test_1263() { testInvalid("{{int, any}}","({int, int} | !int)"); }
		@Test public void test_1264() { testInvalid("{{int, any}}","((int | any) | !int)"); }
		@Test public void test_1265() { testInvalid("{{int, any}}","((any | int) | !int)"); }
		@Test public void test_1266() { testInvalid("{{int, any}}","((any & int) | !int)"); }
		@Test public void test_1267() { testInvalid("{{int, any}}","((int & int) | !int)"); }
		@Test public void test_1268() { testInvalid("{{int, any}}","({int} | {any, any})"); }
		@Test public void test_1269() { testInvalid("{{int, any}}","(!any | {any, any})"); }
		@Test public void test_1270() { testInvalid("{{int, any}}","(!int | {any, any})"); }
		@Test public void test_1271() { testInvalid("{{int, any}}","({any, int} | {any, any})"); }
		@Test public void test_1272() { testInvalid("{{int, any}}","((int | any) | {any, any})"); }
		@Test public void test_1273() { testInvalid("{{int, any}}","((any & any) | {any, any})"); }
		@Test public void test_1274() { testInvalid("{{int, any}}","((any & int) | {any, any})"); }
		@Test public void test_1275() { testInvalid("{{int, any}}","(!int | {int, any})"); }
		@Test public void test_1276() { testInvalid("{{int, any}}","({any, int} | {int, any})"); }
		@Test public void test_1277() { testInvalid("{{int, any}}","((any | any) | {int, any})"); }
		@Test public void test_1278() { testInvalid("{{int, any}}","((int | any) | {int, any})"); }
		@Test public void test_1279() { testInvalid("{{int, any}}","((any | int) | {int, any})"); }
		@Test public void test_1280() { testInvalid("{{int, any}}","((int & any) | {int, any})"); }
		@Test public void test_1281() { testInvalid("{{int, any}}","({any} | {any, int})"); }
		@Test public void test_1282() { testInvalid("{{int, any}}","(!int | {any, int})"); }
		@Test public void test_1283() { testInvalid("{{int, any}}","({any, int} | {any, int})"); }
		@Test public void test_1284() { testInvalid("{{int, any}}","((any | any) | {any, int})"); }
		@Test public void test_1285() { testInvalid("{{int, any}}","((any | int) | {any, int})"); }
		@Test public void test_1286() { testInvalid("{{int, any}}","((int | int) | {any, int})"); }
		@Test public void test_1287() { testInvalid("{{int, any}}","((int & any) | {any, int})"); }
		@Test public void test_1288() { testInvalid("{{int, any}}","(!any | {int, int})"); }
		@Test public void test_1289() { testInvalid("{{int, any}}","(!int | {int, int})"); }
		@Test public void test_1290() { testInvalid("{{int, any}}","({any, any} | {int, int})"); }
		@Test public void test_1291() { testInvalid("{{int, any}}","({any, int} | {int, int})"); }
		@Test public void test_1292() { testInvalid("{{int, any}}","((any | any) | {int, int})"); }
		@Test public void test_1293() { testInvalid("{{int, any}}","((int | int) | {int, int})"); }
		@Test public void test_1294() { testInvalid("{{int, any}}","((int & any) | {int, int})"); }
		@Test public void test_1295() { testInvalid("{{int, any}}","((any & int) | {int, int})"); }
		@Test public void test_1296() { testInvalid("{{int, any}}","((int & int) | {int, int})"); }
		@Test public void test_1297() { testInvalid("{{int, any}}","({any} | (any | any))"); }
		@Test public void test_1298() { testInvalid("{{int, any}}","(!any | (any | any))"); }
		@Test public void test_1299() { testInvalid("{{int, any}}","({any, any} | (any | any))"); }
		@Test public void test_1300() { testInvalid("{{int, any}}","({any, int} | (any | any))"); }
		@Test public void test_1301() { testInvalid("{{int, any}}","({int, int} | (any | any))"); }
		@Test public void test_1302() { testInvalid("{{int, any}}","((int | any) | (any | any))"); }
		@Test public void test_1303() { testInvalid("{{int, any}}","((any | int) | (any | any))"); }
		@Test public void test_1304() { testInvalid("{{int, any}}","((any & int) | (any | any))"); }
		@Test public void test_1305() { testInvalid("{{int, any}}","((int & int) | (any | any))"); }
		@Test public void test_1306() { testInvalid("{{int, any}}","({any} | (int | any))"); }
		@Test public void test_1307() { testInvalid("{{int, any}}","(!int | (int | any))"); }
		@Test public void test_1308() { testInvalid("{{int, any}}","({int, any} | (int | any))"); }
		@Test public void test_1309() { testInvalid("{{int, any}}","({any, int} | (int | any))"); }
		@Test public void test_1310() { testInvalid("{{int, any}}","((int & any) | (int | any))"); }
		@Test public void test_1311() { testInvalid("{{int, any}}","((any & int) | (int | any))"); }
		@Test public void test_1312() { testInvalid("{{int, any}}","({any} | (any | int))"); }
		@Test public void test_1313() { testInvalid("{{int, any}}","({int} | (any | int))"); }
		@Test public void test_1314() { testInvalid("{{int, any}}","(!any | (any | int))"); }
		@Test public void test_1315() { testInvalid("{{int, any}}","(!int | (any | int))"); }
		@Test public void test_1316() { testInvalid("{{int, any}}","({any, int} | (any | int))"); }
		@Test public void test_1317() { testInvalid("{{int, any}}","({int, int} | (any | int))"); }
		@Test public void test_1318() { testInvalid("{{int, any}}","((int | any) | (any | int))"); }
		@Test public void test_1319() { testInvalid("{{int, any}}","((any | int) | (any | int))"); }
		@Test public void test_1320() { testInvalid("{{int, any}}","((int | int) | (any | int))"); }
		@Test public void test_1321() { testInvalid("{{int, any}}","((any & any) | (any | int))"); }
		@Test public void test_1322() { testInvalid("{{int, any}}","({int} | (int | int))"); }
		@Test public void test_1323() { testInvalid("{{int, any}}","(!any | (int | int))"); }
		@Test public void test_1324() { testInvalid("{{int, any}}","(!int | (int | int))"); }
		@Test public void test_1325() { testInvalid("{{int, any}}","({int, any} | (int | int))"); }
		@Test public void test_1326() { testInvalid("{{int, any}}","({any, int} | (int | int))"); }
		@Test public void test_1327() { testInvalid("{{int, any}}","((any | int) | (int | int))"); }
		@Test public void test_1328() { testInvalid("{{int, any}}","((int | int) | (int | int))"); }
		@Test public void test_1329() { testInvalid("{{int, any}}","((any & any) | (int | int))"); }
		@Test public void test_1330() { testInvalid("{{int, any}}","((int & any) | (int | int))"); }
		@Test public void test_1331() { testInvalid("{{int, any}}","((int & int) | (int | int))"); }
		@Test public void test_1332() { testInvalid("{{int, any}}","(!any | (any & any))"); }
		@Test public void test_1333() { testInvalid("{{int, any}}","(!int | (any & any))"); }
		@Test public void test_1334() { testInvalid("{{int, any}}","({any, any} | (any & any))"); }
		@Test public void test_1335() { testInvalid("{{int, any}}","({int, any} | (any & any))"); }
		@Test public void test_1336() { testInvalid("{{int, any}}","({any, int} | (any & any))"); }
		@Test public void test_1337() { testInvalid("{{int, any}}","({int, int} | (any & any))"); }
		@Test public void test_1338() { testInvalid("{{int, any}}","((int | any) | (any & any))"); }
		@Test public void test_1339() { testInvalid("{{int, any}}","((int | int) | (any & any))"); }
		@Test public void test_1340() { testInvalid("{{int, any}}","((int & any) | (any & any))"); }
		@Test public void test_1341() { testInvalid("{{int, any}}","((any & int) | (any & any))"); }
		@Test public void test_1342() { testInvalid("{{int, any}}","((int & int) | (any & any))"); }
		@Test public void test_1343() { testInvalid("{{int, any}}","({any} | (int & any))"); }
		@Test public void test_1344() { testInvalid("{{int, int}}","{int}"); }
		@Test public void test_1345() { testInvalid("{{int, int}}","{any, any}"); }
		@Test public void test_1346() { testInvalid("{{int, int}}","{int, int}"); }
		@Test public void test_1347() { testInvalid("{{int, int}}","(any | int)"); }
		@Test public void test_1348() { testInvalid("{{int, int}}","(int & any)"); }
		@Test public void test_1349() { testInvalid("{{int, int}}","{{any}}"); }
		@Test public void test_1350() { testInvalid("{{int, int}}","{{int, any}}"); }
		@Test public void test_1351() { testValid("{{int, int}}","{{int, int}}"); }
		@Test public void test_1352() { testInvalid("{{int, int}}","{(any | int)}"); }
		@Test public void test_1353() { testInvalid("{{int, int}}","!{int, any}"); }
		@Test public void test_1354() { testInvalid("{{int, int}}","!{int, int}"); }
		@Test public void test_1355() { testValid("{{int, int}}","!(any | any)"); }
		@Test public void test_1356() { testValid("{{int, int}}","!(any & any)"); }
		@Test public void test_1357() { testInvalid("{{int, int}}","!(int & int)"); }
		@Test public void test_1358() { testInvalid("{{int, int}}","{{int}, {any}}"); }
		@Test public void test_1359() { testInvalid("{{int, int}}","{!int, {any}}"); }
		@Test public void test_1360() { testInvalid("{{int, int}}","{{int, int}, {any}}"); }
		@Test public void test_1361() { testInvalid("{{int, int}}","{(any | int), {any}}"); }
		@Test public void test_1362() { testInvalid("{{int, int}}","{!int, {int}}"); }
		@Test public void test_1363() { testInvalid("{{int, int}}","{{any, any}, {int}}"); }
		@Test public void test_1364() { testInvalid("{{int, int}}","{(any | any), {int}}"); }
		@Test public void test_1365() { testInvalid("{{int, int}}","{(any & any), {int}}"); }
		@Test public void test_1366() { testInvalid("{{int, int}}","{(any & int), {int}}"); }
		@Test public void test_1367() { testInvalid("{{int, int}}","{{any, any}, !int}"); }
		@Test public void test_1368() { testInvalid("{{int, int}}","{{any, int}, !int}"); }
		@Test public void test_1369() { testInvalid("{{int, int}}","{(any | any), !int}"); }
		@Test public void test_1370() { testInvalid("{{int, int}}","{(int | any), !int}"); }
		@Test public void test_1371() { testInvalid("{{int, int}}","{(any & any), !int}"); }
		@Test public void test_1372() { testInvalid("{{int, int}}","{(int & any), !int}"); }
		@Test public void test_1373() { testInvalid("{{int, int}}","{(int & int), !int}"); }
		@Test public void test_1374() { testInvalid("{{int, int}}","{{any}, {any, any}}"); }
		@Test public void test_1375() { testInvalid("{{int, int}}","{{int}, {any, any}}"); }
		@Test public void test_1376() { testInvalid("{{int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_1377() { testInvalid("{{int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_1378() { testInvalid("{{int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_1379() { testInvalid("{{int, int}}","{!int, {int, any}}"); }
		@Test public void test_1380() { testInvalid("{{int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_1381() { testInvalid("{{int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_1382() { testInvalid("{{int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_1383() { testInvalid("{{int, int}}","{{any}, {any, int}}"); }
		@Test public void test_1384() { testInvalid("{{int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_1385() { testInvalid("{{int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_1386() { testInvalid("{{int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_1387() { testInvalid("{{int, int}}","{!int, {int, int}}"); }
		@Test public void test_1388() { testInvalid("{{int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_1389() { testInvalid("{{int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_1390() { testInvalid("{{int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_1391() { testInvalid("{{int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_1392() { testInvalid("{{int, int}}","{{int}, (any | any)}"); }
		@Test public void test_1393() { testInvalid("{{int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_1394() { testInvalid("{{int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_1395() { testInvalid("{{int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_1396() { testInvalid("{{int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_1397() { testInvalid("{{int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_1398() { testInvalid("{{int, int}}","{!int, (int | any)}"); }
		@Test public void test_1399() { testInvalid("{{int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_1400() { testInvalid("{{int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_1401() { testInvalid("{{int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_1402() { testInvalid("{{int, int}}","{{any}, (any | int)}"); }
		@Test public void test_1403() { testInvalid("{{int, int}}","{!int, (any | int)}"); }
		@Test public void test_1404() { testInvalid("{{int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_1405() { testInvalid("{{int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_1406() { testInvalid("{{int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_1407() { testInvalid("{{int, int}}","{{int}, (int | int)}"); }
		@Test public void test_1408() { testInvalid("{{int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_1409() { testInvalid("{{int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_1410() { testInvalid("{{int, int}}","{{int}, (any & any)}"); }
		@Test public void test_1411() { testInvalid("{{int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_1412() { testInvalid("{{int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_1413() { testInvalid("{{int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_1414() { testInvalid("{{int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_1415() { testInvalid("{{int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_1416() { testInvalid("{{int, int}}","{{any}, (int & any)}"); }
		@Test public void test_1417() { testInvalid("{{int, int}}","{{int}, (int & any)}"); }
		@Test public void test_1418() { testInvalid("{{int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_1419() { testInvalid("{{int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_1420() { testInvalid("{{int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_1421() { testInvalid("{{int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_1422() { testInvalid("{{int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_1423() { testInvalid("{{int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_1424() { testInvalid("{{int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_1425() { testInvalid("{{int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_1426() { testInvalid("{{int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_1427() { testInvalid("{{int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_1428() { testInvalid("{{int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_1429() { testInvalid("{{int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_1430() { testInvalid("{{int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_1431() { testInvalid("{{int, int}}","(!int | {any})"); }
		@Test public void test_1432() { testInvalid("{{int, int}}","({any, any} | {any})"); }
		@Test public void test_1433() { testInvalid("{{int, int}}","((any | any) | {any})"); }
		@Test public void test_1434() { testInvalid("{{int, int}}","((int | any) | {any})"); }
		@Test public void test_1435() { testInvalid("{{int, int}}","((any & any) | {any})"); }
		@Test public void test_1436() { testInvalid("{{int, int}}","((int & any) | {any})"); }
		@Test public void test_1437() { testInvalid("{{int, int}}","((any & int) | {any})"); }
		@Test public void test_1438() { testInvalid("{{int, int}}","({int} | {int})"); }
		@Test public void test_1439() { testInvalid("{{int, int}}","(!any | {int})"); }
		@Test public void test_1440() { testInvalid("{{int, int}}","(!int | {int})"); }
		@Test public void test_1441() { testInvalid("{{int, int}}","({any, int} | {int})"); }
		@Test public void test_1442() { testInvalid("{{int, int}}","((int & any) | {int})"); }
		@Test public void test_1443() { testInvalid("{{int, int}}","((any & int) | {int})"); }
		@Test public void test_1444() { testInvalid("{{int, int}}","((int & int) | {int})"); }
		@Test public void test_1445() { testInvalid("{{int, int}}","({any} | !any)"); }
		@Test public void test_1446() { testInvalid("{{int, int}}","({int} | !any)"); }
		@Test public void test_1447() { testInvalid("{{int, int}}","({any, any} | !any)"); }
		@Test public void test_1448() { testInvalid("{{int, int}}","({int, int} | !any)"); }
		@Test public void test_1449() { testInvalid("{{int, int}}","((any | any) | !any)"); }
		@Test public void test_1450() { testInvalid("{{int, int}}","((int | any) | !any)"); }
		@Test public void test_1451() { testInvalid("{{int, int}}","((int | int) | !any)"); }
		@Test public void test_1452() { testInvalid("{{int, int}}","((int & int) | !any)"); }
		@Test public void test_1453() { testInvalid("{{int, int}}","(!int | !int)"); }
		@Test public void test_1454() { testInvalid("{{int, int}}","({any, any} | !int)"); }
		@Test public void test_1455() { testInvalid("{{int, int}}","({int, int} | !int)"); }
		@Test public void test_1456() { testInvalid("{{int, int}}","((int | any) | !int)"); }
		@Test public void test_1457() { testInvalid("{{int, int}}","((any | int) | !int)"); }
		@Test public void test_1458() { testInvalid("{{int, int}}","((any & int) | !int)"); }
		@Test public void test_1459() { testInvalid("{{int, int}}","((int & int) | !int)"); }
		@Test public void test_1460() { testInvalid("{{int, int}}","({int} | {any, any})"); }
		@Test public void test_1461() { testInvalid("{{int, int}}","(!any | {any, any})"); }
		@Test public void test_1462() { testInvalid("{{int, int}}","(!int | {any, any})"); }
		@Test public void test_1463() { testInvalid("{{int, int}}","({any, int} | {any, any})"); }
		@Test public void test_1464() { testInvalid("{{int, int}}","((int | any) | {any, any})"); }
		@Test public void test_1465() { testInvalid("{{int, int}}","((any & any) | {any, any})"); }
		@Test public void test_1466() { testInvalid("{{int, int}}","((any & int) | {any, any})"); }
		@Test public void test_1467() { testInvalid("{{int, int}}","(!int | {int, any})"); }
		@Test public void test_1468() { testInvalid("{{int, int}}","({any, int} | {int, any})"); }
		@Test public void test_1469() { testInvalid("{{int, int}}","((any | any) | {int, any})"); }
		@Test public void test_1470() { testInvalid("{{int, int}}","((int | any) | {int, any})"); }
		@Test public void test_1471() { testInvalid("{{int, int}}","((any | int) | {int, any})"); }
		@Test public void test_1472() { testInvalid("{{int, int}}","((int & any) | {int, any})"); }
		@Test public void test_1473() { testInvalid("{{int, int}}","({any} | {any, int})"); }
		@Test public void test_1474() { testInvalid("{{int, int}}","(!int | {any, int})"); }
		@Test public void test_1475() { testInvalid("{{int, int}}","({any, int} | {any, int})"); }
		@Test public void test_1476() { testInvalid("{{int, int}}","((any | any) | {any, int})"); }
		@Test public void test_1477() { testInvalid("{{int, int}}","((any | int) | {any, int})"); }
		@Test public void test_1478() { testInvalid("{{int, int}}","((int | int) | {any, int})"); }
		@Test public void test_1479() { testInvalid("{{int, int}}","((int & any) | {any, int})"); }
		@Test public void test_1480() { testInvalid("{{int, int}}","(!any | {int, int})"); }
		@Test public void test_1481() { testInvalid("{{int, int}}","(!int | {int, int})"); }
		@Test public void test_1482() { testInvalid("{{int, int}}","({any, any} | {int, int})"); }
		@Test public void test_1483() { testInvalid("{{int, int}}","({any, int} | {int, int})"); }
		@Test public void test_1484() { testInvalid("{{int, int}}","((any | any) | {int, int})"); }
		@Test public void test_1485() { testInvalid("{{int, int}}","((int | int) | {int, int})"); }
		@Test public void test_1486() { testInvalid("{{int, int}}","((int & any) | {int, int})"); }
		@Test public void test_1487() { testInvalid("{{int, int}}","((any & int) | {int, int})"); }
		@Test public void test_1488() { testInvalid("{{int, int}}","((int & int) | {int, int})"); }
		@Test public void test_1489() { testInvalid("{{int, int}}","({any} | (any | any))"); }
		@Test public void test_1490() { testInvalid("{{int, int}}","(!any | (any | any))"); }
		@Test public void test_1491() { testInvalid("{{int, int}}","({any, any} | (any | any))"); }
		@Test public void test_1492() { testInvalid("{{int, int}}","({any, int} | (any | any))"); }
		@Test public void test_1493() { testInvalid("{{int, int}}","({int, int} | (any | any))"); }
		@Test public void test_1494() { testInvalid("{{int, int}}","((int | any) | (any | any))"); }
		@Test public void test_1495() { testInvalid("{{int, int}}","((any | int) | (any | any))"); }
		@Test public void test_1496() { testInvalid("{{int, int}}","((any & int) | (any | any))"); }
		@Test public void test_1497() { testInvalid("{{int, int}}","((int & int) | (any | any))"); }
		@Test public void test_1498() { testInvalid("{{int, int}}","({any} | (int | any))"); }
		@Test public void test_1499() { testInvalid("{{int, int}}","(!int | (int | any))"); }
		@Test public void test_1500() { testInvalid("{{int, int}}","({int, any} | (int | any))"); }
		@Test public void test_1501() { testInvalid("{{int, int}}","({any, int} | (int | any))"); }
		@Test public void test_1502() { testInvalid("{{int, int}}","((int & any) | (int | any))"); }
		@Test public void test_1503() { testInvalid("{{int, int}}","((any & int) | (int | any))"); }
		@Test public void test_1504() { testInvalid("{{int, int}}","({any} | (any | int))"); }
		@Test public void test_1505() { testInvalid("{{int, int}}","({int} | (any | int))"); }
		@Test public void test_1506() { testInvalid("{{int, int}}","(!any | (any | int))"); }
		@Test public void test_1507() { testInvalid("{{int, int}}","(!int | (any | int))"); }
		@Test public void test_1508() { testInvalid("{{int, int}}","({any, int} | (any | int))"); }
		@Test public void test_1509() { testInvalid("{{int, int}}","({int, int} | (any | int))"); }
		@Test public void test_1510() { testInvalid("{{int, int}}","((int | any) | (any | int))"); }
		@Test public void test_1511() { testInvalid("{{int, int}}","((any | int) | (any | int))"); }
		@Test public void test_1512() { testInvalid("{{int, int}}","((int | int) | (any | int))"); }
		@Test public void test_1513() { testInvalid("{{int, int}}","((any & any) | (any | int))"); }
		@Test public void test_1514() { testInvalid("{{int, int}}","({int} | (int | int))"); }
		@Test public void test_1515() { testInvalid("{{int, int}}","(!any | (int | int))"); }
		@Test public void test_1516() { testInvalid("{{int, int}}","(!int | (int | int))"); }
		@Test public void test_1517() { testInvalid("{{int, int}}","({int, any} | (int | int))"); }
		@Test public void test_1518() { testInvalid("{{int, int}}","({any, int} | (int | int))"); }
		@Test public void test_1519() { testInvalid("{{int, int}}","((any | int) | (int | int))"); }
		@Test public void test_1520() { testInvalid("{{int, int}}","((int | int) | (int | int))"); }
		@Test public void test_1521() { testInvalid("{{int, int}}","((any & any) | (int | int))"); }
		@Test public void test_1522() { testInvalid("{{int, int}}","((int & any) | (int | int))"); }
		@Test public void test_1523() { testInvalid("{{int, int}}","((int & int) | (int | int))"); }
		@Test public void test_1524() { testInvalid("{{int, int}}","(!any | (any & any))"); }
		@Test public void test_1525() { testInvalid("{{int, int}}","(!int | (any & any))"); }
		@Test public void test_1526() { testInvalid("{{int, int}}","({any, any} | (any & any))"); }
		@Test public void test_1527() { testInvalid("{{int, int}}","({int, any} | (any & any))"); }
		@Test public void test_1528() { testInvalid("{{int, int}}","({any, int} | (any & any))"); }
		@Test public void test_1529() { testInvalid("{{int, int}}","({int, int} | (any & any))"); }
		@Test public void test_1530() { testInvalid("{{int, int}}","((int | any) | (any & any))"); }
		@Test public void test_1531() { testInvalid("{{int, int}}","((int | int) | (any & any))"); }
		@Test public void test_1532() { testInvalid("{{int, int}}","((int & any) | (any & any))"); }
		@Test public void test_1533() { testInvalid("{{int, int}}","((any & int) | (any & any))"); }
		@Test public void test_1534() { testInvalid("{{int, int}}","((int & int) | (any & any))"); }
		@Test public void test_1535() { testInvalid("{{int, int}}","({any} | (int & any))"); }
		@Test public void test_1536() { testValid("{(any | int)}","{int}"); }
		@Test public void test_1537() { testInvalid("{(any | int)}","{any, any}"); }
		@Test public void test_1538() { testInvalid("{(any | int)}","{int, int}"); }
		@Test public void test_1539() { testInvalid("{(any | int)}","(any | int)"); }
		@Test public void test_1540() { testInvalid("{(any | int)}","(int & any)"); }
		@Test public void test_1541() { testValid("{(any | int)}","{{any}}"); }
		@Test public void test_1542() { testValid("{(any | int)}","{{int, any}}"); }
		@Test public void test_1543() { testValid("{(any | int)}","{{int, int}}"); }
		@Test public void test_1544() { testValid("{(any | int)}","{(any | int)}"); }
		@Test public void test_1545() { testInvalid("{(any | int)}","!{int, any}"); }
		@Test public void test_1546() { testInvalid("{(any | int)}","!{int, int}"); }
		@Test public void test_1547() { testValid("{(any | int)}","!(any | any)"); }
		@Test public void test_1548() { testValid("{(any | int)}","!(any & any)"); }
		@Test public void test_1549() { testInvalid("{(any | int)}","!(int & int)"); }
		@Test public void test_1550() { testInvalid("{(any | int)}","{{int}, {any}}"); }
		@Test public void test_1551() { testInvalid("{(any | int)}","{!int, {any}}"); }
		@Test public void test_1552() { testInvalid("{(any | int)}","{{int, int}, {any}}"); }
		@Test public void test_1553() { testInvalid("{(any | int)}","{(any | int), {any}}"); }
		@Test public void test_1554() { testInvalid("{(any | int)}","{!int, {int}}"); }
		@Test public void test_1555() { testInvalid("{(any | int)}","{{any, any}, {int}}"); }
		@Test public void test_1556() { testInvalid("{(any | int)}","{(any | any), {int}}"); }
		@Test public void test_1557() { testInvalid("{(any | int)}","{(any & any), {int}}"); }
		@Test public void test_1558() { testInvalid("{(any | int)}","{(any & int), {int}}"); }
		@Test public void test_1559() { testInvalid("{(any | int)}","{{any, any}, !int}"); }
		@Test public void test_1560() { testInvalid("{(any | int)}","{{any, int}, !int}"); }
		@Test public void test_1561() { testInvalid("{(any | int)}","{(any | any), !int}"); }
		@Test public void test_1562() { testInvalid("{(any | int)}","{(int | any), !int}"); }
		@Test public void test_1563() { testInvalid("{(any | int)}","{(any & any), !int}"); }
		@Test public void test_1564() { testInvalid("{(any | int)}","{(int & any), !int}"); }
		@Test public void test_1565() { testInvalid("{(any | int)}","{(int & int), !int}"); }
		@Test public void test_1566() { testInvalid("{(any | int)}","{{any}, {any, any}}"); }
		@Test public void test_1567() { testInvalid("{(any | int)}","{{int}, {any, any}}"); }
		@Test public void test_1568() { testInvalid("{(any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_1569() { testInvalid("{(any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_1570() { testInvalid("{(any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_1571() { testInvalid("{(any | int)}","{!int, {int, any}}"); }
		@Test public void test_1572() { testInvalid("{(any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_1573() { testInvalid("{(any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_1574() { testInvalid("{(any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_1575() { testInvalid("{(any | int)}","{{any}, {any, int}}"); }
		@Test public void test_1576() { testInvalid("{(any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_1577() { testInvalid("{(any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_1578() { testInvalid("{(any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_1579() { testInvalid("{(any | int)}","{!int, {int, int}}"); }
		@Test public void test_1580() { testInvalid("{(any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_1581() { testInvalid("{(any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_1582() { testInvalid("{(any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_1583() { testInvalid("{(any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_1584() { testInvalid("{(any | int)}","{{int}, (any | any)}"); }
		@Test public void test_1585() { testInvalid("{(any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_1586() { testInvalid("{(any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_1587() { testInvalid("{(any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_1588() { testInvalid("{(any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_1589() { testInvalid("{(any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_1590() { testInvalid("{(any | int)}","{!int, (int | any)}"); }
		@Test public void test_1591() { testInvalid("{(any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_1592() { testInvalid("{(any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_1593() { testInvalid("{(any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_1594() { testInvalid("{(any | int)}","{{any}, (any | int)}"); }
		@Test public void test_1595() { testInvalid("{(any | int)}","{!int, (any | int)}"); }
		@Test public void test_1596() { testInvalid("{(any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_1597() { testInvalid("{(any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_1598() { testInvalid("{(any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_1599() { testInvalid("{(any | int)}","{{int}, (int | int)}"); }
		@Test public void test_1600() { testInvalid("{(any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_1601() { testInvalid("{(any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_1602() { testInvalid("{(any | int)}","{{int}, (any & any)}"); }
		@Test public void test_1603() { testInvalid("{(any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_1604() { testInvalid("{(any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_1605() { testInvalid("{(any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_1606() { testInvalid("{(any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_1607() { testInvalid("{(any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_1608() { testInvalid("{(any | int)}","{{any}, (int & any)}"); }
		@Test public void test_1609() { testInvalid("{(any | int)}","{{int}, (int & any)}"); }
		@Test public void test_1610() { testInvalid("{(any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_1611() { testInvalid("{(any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_1612() { testInvalid("{(any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_1613() { testInvalid("{(any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_1614() { testInvalid("{(any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_1615() { testInvalid("{(any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_1616() { testInvalid("{(any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_1617() { testInvalid("{(any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_1618() { testInvalid("{(any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_1619() { testInvalid("{(any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_1620() { testInvalid("{(any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_1621() { testInvalid("{(any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_1622() { testInvalid("{(any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_1623() { testInvalid("{(any | int)}","(!int | {any})"); }
		@Test public void test_1624() { testInvalid("{(any | int)}","({any, any} | {any})"); }
		@Test public void test_1625() { testInvalid("{(any | int)}","((any | any) | {any})"); }
		@Test public void test_1626() { testInvalid("{(any | int)}","((int | any) | {any})"); }
		@Test public void test_1627() { testInvalid("{(any | int)}","((any & any) | {any})"); }
		@Test public void test_1628() { testInvalid("{(any | int)}","((int & any) | {any})"); }
		@Test public void test_1629() { testInvalid("{(any | int)}","((any & int) | {any})"); }
		@Test public void test_1630() { testValid("{(any | int)}","({int} | {int})"); }
		@Test public void test_1631() { testValid("{(any | int)}","(!any | {int})"); }
		@Test public void test_1632() { testInvalid("{(any | int)}","(!int | {int})"); }
		@Test public void test_1633() { testInvalid("{(any | int)}","({any, int} | {int})"); }
		@Test public void test_1634() { testInvalid("{(any | int)}","((int & any) | {int})"); }
		@Test public void test_1635() { testInvalid("{(any | int)}","((any & int) | {int})"); }
		@Test public void test_1636() { testInvalid("{(any | int)}","((int & int) | {int})"); }
		@Test public void test_1637() { testValid("{(any | int)}","({any} | !any)"); }
		@Test public void test_1638() { testValid("{(any | int)}","({int} | !any)"); }
		@Test public void test_1639() { testInvalid("{(any | int)}","({any, any} | !any)"); }
		@Test public void test_1640() { testInvalid("{(any | int)}","({int, int} | !any)"); }
		@Test public void test_1641() { testInvalid("{(any | int)}","((any | any) | !any)"); }
		@Test public void test_1642() { testInvalid("{(any | int)}","((int | any) | !any)"); }
		@Test public void test_1643() { testInvalid("{(any | int)}","((int | int) | !any)"); }
		@Test public void test_1644() { testInvalid("{(any | int)}","((int & int) | !any)"); }
		@Test public void test_1645() { testInvalid("{(any | int)}","(!int | !int)"); }
		@Test public void test_1646() { testInvalid("{(any | int)}","({any, any} | !int)"); }
		@Test public void test_1647() { testInvalid("{(any | int)}","({int, int} | !int)"); }
		@Test public void test_1648() { testInvalid("{(any | int)}","((int | any) | !int)"); }
		@Test public void test_1649() { testInvalid("{(any | int)}","((any | int) | !int)"); }
		@Test public void test_1650() { testInvalid("{(any | int)}","((any & int) | !int)"); }
		@Test public void test_1651() { testInvalid("{(any | int)}","((int & int) | !int)"); }
		@Test public void test_1652() { testInvalid("{(any | int)}","({int} | {any, any})"); }
		@Test public void test_1653() { testInvalid("{(any | int)}","(!any | {any, any})"); }
		@Test public void test_1654() { testInvalid("{(any | int)}","(!int | {any, any})"); }
		@Test public void test_1655() { testInvalid("{(any | int)}","({any, int} | {any, any})"); }
		@Test public void test_1656() { testInvalid("{(any | int)}","((int | any) | {any, any})"); }
		@Test public void test_1657() { testInvalid("{(any | int)}","((any & any) | {any, any})"); }
		@Test public void test_1658() { testInvalid("{(any | int)}","((any & int) | {any, any})"); }
		@Test public void test_1659() { testInvalid("{(any | int)}","(!int | {int, any})"); }
		@Test public void test_1660() { testInvalid("{(any | int)}","({any, int} | {int, any})"); }
		@Test public void test_1661() { testInvalid("{(any | int)}","((any | any) | {int, any})"); }
		@Test public void test_1662() { testInvalid("{(any | int)}","((int | any) | {int, any})"); }
		@Test public void test_1663() { testInvalid("{(any | int)}","((any | int) | {int, any})"); }
		@Test public void test_1664() { testInvalid("{(any | int)}","((int & any) | {int, any})"); }
		@Test public void test_1665() { testInvalid("{(any | int)}","({any} | {any, int})"); }
		@Test public void test_1666() { testInvalid("{(any | int)}","(!int | {any, int})"); }
		@Test public void test_1667() { testInvalid("{(any | int)}","({any, int} | {any, int})"); }
		@Test public void test_1668() { testInvalid("{(any | int)}","((any | any) | {any, int})"); }
		@Test public void test_1669() { testInvalid("{(any | int)}","((any | int) | {any, int})"); }
		@Test public void test_1670() { testInvalid("{(any | int)}","((int | int) | {any, int})"); }
		@Test public void test_1671() { testInvalid("{(any | int)}","((int & any) | {any, int})"); }
		@Test public void test_1672() { testInvalid("{(any | int)}","(!any | {int, int})"); }
		@Test public void test_1673() { testInvalid("{(any | int)}","(!int | {int, int})"); }
		@Test public void test_1674() { testInvalid("{(any | int)}","({any, any} | {int, int})"); }
		@Test public void test_1675() { testInvalid("{(any | int)}","({any, int} | {int, int})"); }
		@Test public void test_1676() { testInvalid("{(any | int)}","((any | any) | {int, int})"); }
		@Test public void test_1677() { testInvalid("{(any | int)}","((int | int) | {int, int})"); }
		@Test public void test_1678() { testInvalid("{(any | int)}","((int & any) | {int, int})"); }
		@Test public void test_1679() { testInvalid("{(any | int)}","((any & int) | {int, int})"); }
		@Test public void test_1680() { testInvalid("{(any | int)}","((int & int) | {int, int})"); }
		@Test public void test_1681() { testInvalid("{(any | int)}","({any} | (any | any))"); }
		@Test public void test_1682() { testInvalid("{(any | int)}","(!any | (any | any))"); }
		@Test public void test_1683() { testInvalid("{(any | int)}","({any, any} | (any | any))"); }
		@Test public void test_1684() { testInvalid("{(any | int)}","({any, int} | (any | any))"); }
		@Test public void test_1685() { testInvalid("{(any | int)}","({int, int} | (any | any))"); }
		@Test public void test_1686() { testInvalid("{(any | int)}","((int | any) | (any | any))"); }
		@Test public void test_1687() { testInvalid("{(any | int)}","((any | int) | (any | any))"); }
		@Test public void test_1688() { testInvalid("{(any | int)}","((any & int) | (any | any))"); }
		@Test public void test_1689() { testInvalid("{(any | int)}","((int & int) | (any | any))"); }
		@Test public void test_1690() { testInvalid("{(any | int)}","({any} | (int | any))"); }
		@Test public void test_1691() { testInvalid("{(any | int)}","(!int | (int | any))"); }
		@Test public void test_1692() { testInvalid("{(any | int)}","({int, any} | (int | any))"); }
		@Test public void test_1693() { testInvalid("{(any | int)}","({any, int} | (int | any))"); }
		@Test public void test_1694() { testInvalid("{(any | int)}","((int & any) | (int | any))"); }
		@Test public void test_1695() { testInvalid("{(any | int)}","((any & int) | (int | any))"); }
		@Test public void test_1696() { testInvalid("{(any | int)}","({any} | (any | int))"); }
		@Test public void test_1697() { testInvalid("{(any | int)}","({int} | (any | int))"); }
		@Test public void test_1698() { testInvalid("{(any | int)}","(!any | (any | int))"); }
		@Test public void test_1699() { testInvalid("{(any | int)}","(!int | (any | int))"); }
		@Test public void test_1700() { testInvalid("{(any | int)}","({any, int} | (any | int))"); }
		@Test public void test_1701() { testInvalid("{(any | int)}","({int, int} | (any | int))"); }
		@Test public void test_1702() { testInvalid("{(any | int)}","((int | any) | (any | int))"); }
		@Test public void test_1703() { testInvalid("{(any | int)}","((any | int) | (any | int))"); }
		@Test public void test_1704() { testInvalid("{(any | int)}","((int | int) | (any | int))"); }
		@Test public void test_1705() { testInvalid("{(any | int)}","((any & any) | (any | int))"); }
		@Test public void test_1706() { testInvalid("{(any | int)}","({int} | (int | int))"); }
		@Test public void test_1707() { testInvalid("{(any | int)}","(!any | (int | int))"); }
		@Test public void test_1708() { testInvalid("{(any | int)}","(!int | (int | int))"); }
		@Test public void test_1709() { testInvalid("{(any | int)}","({int, any} | (int | int))"); }
		@Test public void test_1710() { testInvalid("{(any | int)}","({any, int} | (int | int))"); }
		@Test public void test_1711() { testInvalid("{(any | int)}","((any | int) | (int | int))"); }
		@Test public void test_1712() { testInvalid("{(any | int)}","((int | int) | (int | int))"); }
		@Test public void test_1713() { testInvalid("{(any | int)}","((any & any) | (int | int))"); }
		@Test public void test_1714() { testInvalid("{(any | int)}","((int & any) | (int | int))"); }
		@Test public void test_1715() { testInvalid("{(any | int)}","((int & int) | (int | int))"); }
		@Test public void test_1716() { testInvalid("{(any | int)}","(!any | (any & any))"); }
		@Test public void test_1717() { testInvalid("{(any | int)}","(!int | (any & any))"); }
		@Test public void test_1718() { testInvalid("{(any | int)}","({any, any} | (any & any))"); }
		@Test public void test_1719() { testInvalid("{(any | int)}","({int, any} | (any & any))"); }
		@Test public void test_1720() { testInvalid("{(any | int)}","({any, int} | (any & any))"); }
		@Test public void test_1721() { testInvalid("{(any | int)}","({int, int} | (any & any))"); }
		@Test public void test_1722() { testInvalid("{(any | int)}","((int | any) | (any & any))"); }
		@Test public void test_1723() { testInvalid("{(any | int)}","((int | int) | (any & any))"); }
		@Test public void test_1724() { testInvalid("{(any | int)}","((int & any) | (any & any))"); }
		@Test public void test_1725() { testInvalid("{(any | int)}","((any & int) | (any & any))"); }
		@Test public void test_1726() { testInvalid("{(any | int)}","((int & int) | (any & any))"); }
		@Test public void test_1727() { testInvalid("{(any | int)}","({any} | (int & any))"); }
		@Test public void test_1728() { testValid("!{int, any}","{int}"); }
		@Test public void test_1729() { testInvalid("!{int, any}","{any, any}"); }
		@Test public void test_1730() { testInvalid("!{int, any}","{int, int}"); }
		@Test public void test_1731() { testInvalid("!{int, any}","(any | int)"); }
		@Test public void test_1732() { testValid("!{int, any}","(int & any)"); }
		@Test public void test_1733() { testValid("!{int, any}","{{any}}"); }
		@Test public void test_1734() { testValid("!{int, any}","{{int, any}}"); }
		@Test public void test_1735() { testValid("!{int, any}","{{int, int}}"); }
		@Test public void test_1736() { testValid("!{int, any}","{(any | int)}"); }
		@Test public void test_1737() { testValid("!{int, any}","!{int, any}"); }
		@Test public void test_1738() { testInvalid("!{int, any}","!{int, int}"); }
		@Test public void test_1739() { testValid("!{int, any}","!(any | any)"); }
		@Test public void test_1740() { testValid("!{int, any}","!(any & any)"); }
		@Test public void test_1741() { testInvalid("!{int, any}","!(int & int)"); }
		@Test public void test_1742() { testValid("!{int, any}","{{int}, {any}}"); }
		@Test public void test_1743() { testValid("!{int, any}","{!int, {any}}"); }
		@Test public void test_1744() { testValid("!{int, any}","{{int, int}, {any}}"); }
		@Test public void test_1745() { testInvalid("!{int, any}","{(any | int), {any}}"); }
		@Test public void test_1746() { testValid("!{int, any}","{!int, {int}}"); }
		@Test public void test_1747() { testValid("!{int, any}","{{any, any}, {int}}"); }
		@Test public void test_1748() { testInvalid("!{int, any}","{(any | any), {int}}"); }
		@Test public void test_1749() { testInvalid("!{int, any}","{(any & any), {int}}"); }
		@Test public void test_1750() { testInvalid("!{int, any}","{(any & int), {int}}"); }
		@Test public void test_1751() { testValid("!{int, any}","{{any, any}, !int}"); }
		@Test public void test_1752() { testValid("!{int, any}","{{any, int}, !int}"); }
		@Test public void test_1753() { testInvalid("!{int, any}","{(any | any), !int}"); }
		@Test public void test_1754() { testInvalid("!{int, any}","{(int | any), !int}"); }
		@Test public void test_1755() { testInvalid("!{int, any}","{(any & any), !int}"); }
		@Test public void test_1756() { testInvalid("!{int, any}","{(int & any), !int}"); }
		@Test public void test_1757() { testInvalid("!{int, any}","{(int & int), !int}"); }
		@Test public void test_1758() { testValid("!{int, any}","{{any}, {any, any}}"); }
		@Test public void test_1759() { testValid("!{int, any}","{{int}, {any, any}}"); }
		@Test public void test_1760() { testValid("!{int, any}","{{int, int}, {any, any}}"); }
		@Test public void test_1761() { testInvalid("!{int, any}","{(any | any), {any, any}}"); }
		@Test public void test_1762() { testInvalid("!{int, any}","{(any | int), {any, any}}"); }
		@Test public void test_1763() { testValid("!{int, any}","{!int, {int, any}}"); }
		@Test public void test_1764() { testValid("!{int, any}","{{int, any}, {int, any}}"); }
		@Test public void test_1765() { testValid("!{int, any}","{{any, int}, {int, any}}"); }
		@Test public void test_1766() { testInvalid("!{int, any}","{(any & int), {int, any}}"); }
		@Test public void test_1767() { testValid("!{int, any}","{{any}, {any, int}}"); }
		@Test public void test_1768() { testValid("!{int, any}","{{int, int}, {any, int}}"); }
		@Test public void test_1769() { testInvalid("!{int, any}","{(int | int), {any, int}}"); }
		@Test public void test_1770() { testInvalid("!{int, any}","{(any & int), {any, int}}"); }
		@Test public void test_1771() { testValid("!{int, any}","{!int, {int, int}}"); }
		@Test public void test_1772() { testValid("!{int, any}","{{int, int}, {int, int}}"); }
		@Test public void test_1773() { testInvalid("!{int, any}","{(any | any), {int, int}}"); }
		@Test public void test_1774() { testInvalid("!{int, any}","{(int | any), {int, int}}"); }
		@Test public void test_1775() { testInvalid("!{int, any}","{(int & any), {int, int}}"); }
		@Test public void test_1776() { testValid("!{int, any}","{{int}, (any | any)}"); }
		@Test public void test_1777() { testValid("!{int, any}","{{int, any}, (any | any)}"); }
		@Test public void test_1778() { testValid("!{int, any}","{{any, int}, (any | any)}"); }
		@Test public void test_1779() { testInvalid("!{int, any}","{(any | any), (any | any)}"); }
		@Test public void test_1780() { testInvalid("!{int, any}","{(int | any), (any | any)}"); }
		@Test public void test_1781() { testInvalid("!{int, any}","{(int & int), (any | any)}"); }
		@Test public void test_1782() { testValid("!{int, any}","{!int, (int | any)}"); }
		@Test public void test_1783() { testValid("!{int, any}","{{int, int}, (int | any)}"); }
		@Test public void test_1784() { testInvalid("!{int, any}","{(any | any), (int | any)}"); }
		@Test public void test_1785() { testInvalid("!{int, any}","{(int | int), (int | any)}"); }
		@Test public void test_1786() { testValid("!{int, any}","{{any}, (any | int)}"); }
		@Test public void test_1787() { testValid("!{int, any}","{!int, (any | int)}"); }
		@Test public void test_1788() { testInvalid("!{int, any}","{(any | any), (any | int)}"); }
		@Test public void test_1789() { testInvalid("!{int, any}","{(any | int), (any | int)}"); }
		@Test public void test_1790() { testInvalid("!{int, any}","{(any & int), (any | int)}"); }
		@Test public void test_1791() { testValid("!{int, any}","{{int}, (int | int)}"); }
		@Test public void test_1792() { testValid("!{int, any}","{{any, any}, (int | int)}"); }
		@Test public void test_1793() { testValid("!{int, any}","{{int, int}, (int | int)}"); }
		@Test public void test_1794() { testValid("!{int, any}","{{int}, (any & any)}"); }
		@Test public void test_1795() { testValid("!{int, any}","{{int, any}, (any & any)}"); }
		@Test public void test_1796() { testValid("!{int, any}","{{any, int}, (any & any)}"); }
		@Test public void test_1797() { testInvalid("!{int, any}","{(int | any), (any & any)}"); }
		@Test public void test_1798() { testInvalid("!{int, any}","{(any & any), (any & any)}"); }
		@Test public void test_1799() { testInvalid("!{int, any}","{(int & any), (any & any)}"); }
		@Test public void test_1800() { testValid("!{int, any}","{{any}, (int & any)}"); }
		@Test public void test_1801() { testValid("!{int, any}","{{int}, (int & any)}"); }
		@Test public void test_1802() { testValid("!{int, any}","{{any, any}, (int & any)}"); }
		@Test public void test_1803() { testValid("!{int, any}","{{int, any}, (int & any)}"); }
		@Test public void test_1804() { testInvalid("!{int, any}","{(any | int), (int & any)}"); }
		@Test public void test_1805() { testInvalid("!{int, any}","{(any & any), (int & any)}"); }
		@Test public void test_1806() { testInvalid("!{int, any}","{(int & any), (int & any)}"); }
		@Test public void test_1807() { testInvalid("!{int, any}","{(int & int), (int & any)}"); }
		@Test public void test_1808() { testValid("!{int, any}","{{int, any}, (any & int)}"); }
		@Test public void test_1809() { testInvalid("!{int, any}","{(any & any), (any & int)}"); }
		@Test public void test_1810() { testValid("!{int, any}","{{any, int}, (int & int)}"); }
		@Test public void test_1811() { testInvalid("!{int, any}","{(int | int), (int & int)}"); }
		@Test public void test_1812() { testInvalid("!{int, any}","{(any & any), (int & int)}"); }
		@Test public void test_1813() { testInvalid("!{int, any}","{(any & int), (int & int)}"); }
		@Test public void test_1814() { testInvalid("!{int, any}","{(int & int), (int & int)}"); }
		@Test public void test_1815() { testInvalid("!{int, any}","(!int | {any})"); }
		@Test public void test_1816() { testInvalid("!{int, any}","({any, any} | {any})"); }
		@Test public void test_1817() { testInvalid("!{int, any}","((any | any) | {any})"); }
		@Test public void test_1818() { testInvalid("!{int, any}","((int | any) | {any})"); }
		@Test public void test_1819() { testInvalid("!{int, any}","((any & any) | {any})"); }
		@Test public void test_1820() { testValid("!{int, any}","((int & any) | {any})"); }
		@Test public void test_1821() { testValid("!{int, any}","((any & int) | {any})"); }
		@Test public void test_1822() { testValid("!{int, any}","({int} | {int})"); }
		@Test public void test_1823() { testValid("!{int, any}","(!any | {int})"); }
		@Test public void test_1824() { testInvalid("!{int, any}","(!int | {int})"); }
		@Test public void test_1825() { testInvalid("!{int, any}","({any, int} | {int})"); }
		@Test public void test_1826() { testValid("!{int, any}","((int & any) | {int})"); }
		@Test public void test_1827() { testValid("!{int, any}","((any & int) | {int})"); }
		@Test public void test_1828() { testValid("!{int, any}","((int & int) | {int})"); }
		@Test public void test_1829() { testValid("!{int, any}","({any} | !any)"); }
		@Test public void test_1830() { testValid("!{int, any}","({int} | !any)"); }
		@Test public void test_1831() { testInvalid("!{int, any}","({any, any} | !any)"); }
		@Test public void test_1832() { testInvalid("!{int, any}","({int, int} | !any)"); }
		@Test public void test_1833() { testInvalid("!{int, any}","((any | any) | !any)"); }
		@Test public void test_1834() { testInvalid("!{int, any}","((int | any) | !any)"); }
		@Test public void test_1835() { testValid("!{int, any}","((int | int) | !any)"); }
		@Test public void test_1836() { testValid("!{int, any}","((int & int) | !any)"); }
		@Test public void test_1837() { testInvalid("!{int, any}","(!int | !int)"); }
		@Test public void test_1838() { testInvalid("!{int, any}","({any, any} | !int)"); }
		@Test public void test_1839() { testInvalid("!{int, any}","({int, int} | !int)"); }
		@Test public void test_1840() { testInvalid("!{int, any}","((int | any) | !int)"); }
		@Test public void test_1841() { testInvalid("!{int, any}","((any | int) | !int)"); }
		@Test public void test_1842() { testInvalid("!{int, any}","((any & int) | !int)"); }
		@Test public void test_1843() { testInvalid("!{int, any}","((int & int) | !int)"); }
		@Test public void test_1844() { testInvalid("!{int, any}","({int} | {any, any})"); }
		@Test public void test_1845() { testInvalid("!{int, any}","(!any | {any, any})"); }
		@Test public void test_1846() { testInvalid("!{int, any}","(!int | {any, any})"); }
		@Test public void test_1847() { testInvalid("!{int, any}","({any, int} | {any, any})"); }
		@Test public void test_1848() { testInvalid("!{int, any}","((int | any) | {any, any})"); }
		@Test public void test_1849() { testInvalid("!{int, any}","((any & any) | {any, any})"); }
		@Test public void test_1850() { testInvalid("!{int, any}","((any & int) | {any, any})"); }
		@Test public void test_1851() { testInvalid("!{int, any}","(!int | {int, any})"); }
		@Test public void test_1852() { testInvalid("!{int, any}","({any, int} | {int, any})"); }
		@Test public void test_1853() { testInvalid("!{int, any}","((any | any) | {int, any})"); }
		@Test public void test_1854() { testInvalid("!{int, any}","((int | any) | {int, any})"); }
		@Test public void test_1855() { testInvalid("!{int, any}","((any | int) | {int, any})"); }
		@Test public void test_1856() { testInvalid("!{int, any}","((int & any) | {int, any})"); }
		@Test public void test_1857() { testInvalid("!{int, any}","({any} | {any, int})"); }
		@Test public void test_1858() { testInvalid("!{int, any}","(!int | {any, int})"); }
		@Test public void test_1859() { testInvalid("!{int, any}","({any, int} | {any, int})"); }
		@Test public void test_1860() { testInvalid("!{int, any}","((any | any) | {any, int})"); }
		@Test public void test_1861() { testInvalid("!{int, any}","((any | int) | {any, int})"); }
		@Test public void test_1862() { testInvalid("!{int, any}","((int | int) | {any, int})"); }
		@Test public void test_1863() { testInvalid("!{int, any}","((int & any) | {any, int})"); }
		@Test public void test_1864() { testInvalid("!{int, any}","(!any | {int, int})"); }
		@Test public void test_1865() { testInvalid("!{int, any}","(!int | {int, int})"); }
		@Test public void test_1866() { testInvalid("!{int, any}","({any, any} | {int, int})"); }
		@Test public void test_1867() { testInvalid("!{int, any}","({any, int} | {int, int})"); }
		@Test public void test_1868() { testInvalid("!{int, any}","((any | any) | {int, int})"); }
		@Test public void test_1869() { testInvalid("!{int, any}","((int | int) | {int, int})"); }
		@Test public void test_1870() { testInvalid("!{int, any}","((int & any) | {int, int})"); }
		@Test public void test_1871() { testInvalid("!{int, any}","((any & int) | {int, int})"); }
		@Test public void test_1872() { testInvalid("!{int, any}","((int & int) | {int, int})"); }
		@Test public void test_1873() { testInvalid("!{int, any}","({any} | (any | any))"); }
		@Test public void test_1874() { testInvalid("!{int, any}","(!any | (any | any))"); }
		@Test public void test_1875() { testInvalid("!{int, any}","({any, any} | (any | any))"); }
		@Test public void test_1876() { testInvalid("!{int, any}","({any, int} | (any | any))"); }
		@Test public void test_1877() { testInvalid("!{int, any}","({int, int} | (any | any))"); }
		@Test public void test_1878() { testInvalid("!{int, any}","((int | any) | (any | any))"); }
		@Test public void test_1879() { testInvalid("!{int, any}","((any | int) | (any | any))"); }
		@Test public void test_1880() { testInvalid("!{int, any}","((any & int) | (any | any))"); }
		@Test public void test_1881() { testInvalid("!{int, any}","((int & int) | (any | any))"); }
		@Test public void test_1882() { testInvalid("!{int, any}","({any} | (int | any))"); }
		@Test public void test_1883() { testInvalid("!{int, any}","(!int | (int | any))"); }
		@Test public void test_1884() { testInvalid("!{int, any}","({int, any} | (int | any))"); }
		@Test public void test_1885() { testInvalid("!{int, any}","({any, int} | (int | any))"); }
		@Test public void test_1886() { testInvalid("!{int, any}","((int & any) | (int | any))"); }
		@Test public void test_1887() { testInvalid("!{int, any}","((any & int) | (int | any))"); }
		@Test public void test_1888() { testInvalid("!{int, any}","({any} | (any | int))"); }
		@Test public void test_1889() { testInvalid("!{int, any}","({int} | (any | int))"); }
		@Test public void test_1890() { testInvalid("!{int, any}","(!any | (any | int))"); }
		@Test public void test_1891() { testInvalid("!{int, any}","(!int | (any | int))"); }
		@Test public void test_1892() { testInvalid("!{int, any}","({any, int} | (any | int))"); }
		@Test public void test_1893() { testInvalid("!{int, any}","({int, int} | (any | int))"); }
		@Test public void test_1894() { testInvalid("!{int, any}","((int | any) | (any | int))"); }
		@Test public void test_1895() { testInvalid("!{int, any}","((any | int) | (any | int))"); }
		@Test public void test_1896() { testInvalid("!{int, any}","((int | int) | (any | int))"); }
		@Test public void test_1897() { testInvalid("!{int, any}","((any & any) | (any | int))"); }
		@Test public void test_1898() { testValid("!{int, any}","({int} | (int | int))"); }
		@Test public void test_1899() { testValid("!{int, any}","(!any | (int | int))"); }
		@Test public void test_1900() { testInvalid("!{int, any}","(!int | (int | int))"); }
		@Test public void test_1901() { testInvalid("!{int, any}","({int, any} | (int | int))"); }
		@Test public void test_1902() { testInvalid("!{int, any}","({any, int} | (int | int))"); }
		@Test public void test_1903() { testInvalid("!{int, any}","((any | int) | (int | int))"); }
		@Test public void test_1904() { testValid("!{int, any}","((int | int) | (int | int))"); }
		@Test public void test_1905() { testInvalid("!{int, any}","((any & any) | (int | int))"); }
		@Test public void test_1906() { testValid("!{int, any}","((int & any) | (int | int))"); }
		@Test public void test_1907() { testValid("!{int, any}","((int & int) | (int | int))"); }
		@Test public void test_1908() { testInvalid("!{int, any}","(!any | (any & any))"); }
		@Test public void test_1909() { testInvalid("!{int, any}","(!int | (any & any))"); }
		@Test public void test_1910() { testInvalid("!{int, any}","({any, any} | (any & any))"); }
		@Test public void test_1911() { testInvalid("!{int, any}","({int, any} | (any & any))"); }
		@Test public void test_1912() { testInvalid("!{int, any}","({any, int} | (any & any))"); }
		@Test public void test_1913() { testInvalid("!{int, any}","({int, int} | (any & any))"); }
		@Test public void test_1914() { testInvalid("!{int, any}","((int | any) | (any & any))"); }
		@Test public void test_1915() { testInvalid("!{int, any}","((int | int) | (any & any))"); }
		@Test public void test_1916() { testInvalid("!{int, any}","((int & any) | (any & any))"); }
		@Test public void test_1917() { testInvalid("!{int, any}","((any & int) | (any & any))"); }
		@Test public void test_1918() { testInvalid("!{int, any}","((int & int) | (any & any))"); }
		@Test public void test_1919() { testValid("!{int, any}","({any} | (int & any))"); }
		@Test public void test_1920() { testValid("!{int, int}","{int}"); }
		@Test public void test_1921() { testInvalid("!{int, int}","{any, any}"); }
		@Test public void test_1922() { testInvalid("!{int, int}","{int, int}"); }
		@Test public void test_1923() { testInvalid("!{int, int}","(any | int)"); }
		@Test public void test_1924() { testValid("!{int, int}","(int & any)"); }
		@Test public void test_1925() { testValid("!{int, int}","{{any}}"); }
		@Test public void test_1926() { testValid("!{int, int}","{{int, any}}"); }
		@Test public void test_1927() { testValid("!{int, int}","{{int, int}}"); }
		@Test public void test_1928() { testValid("!{int, int}","{(any | int)}"); }
		@Test public void test_1929() { testValid("!{int, int}","!{int, any}"); }
		@Test public void test_1930() { testValid("!{int, int}","!{int, int}"); }
		@Test public void test_1931() { testValid("!{int, int}","!(any | any)"); }
		@Test public void test_1932() { testValid("!{int, int}","!(any & any)"); }
		@Test public void test_1933() { testInvalid("!{int, int}","!(int & int)"); }
		@Test public void test_1934() { testValid("!{int, int}","{{int}, {any}}"); }
		@Test public void test_1935() { testValid("!{int, int}","{!int, {any}}"); }
		@Test public void test_1936() { testValid("!{int, int}","{{int, int}, {any}}"); }
		@Test public void test_1937() { testValid("!{int, int}","{(any | int), {any}}"); }
		@Test public void test_1938() { testValid("!{int, int}","{!int, {int}}"); }
		@Test public void test_1939() { testValid("!{int, int}","{{any, any}, {int}}"); }
		@Test public void test_1940() { testValid("!{int, int}","{(any | any), {int}}"); }
		@Test public void test_1941() { testValid("!{int, int}","{(any & any), {int}}"); }
		@Test public void test_1942() { testValid("!{int, int}","{(any & int), {int}}"); }
		@Test public void test_1943() { testValid("!{int, int}","{{any, any}, !int}"); }
		@Test public void test_1944() { testValid("!{int, int}","{{any, int}, !int}"); }
		@Test public void test_1945() { testValid("!{int, int}","{(any | any), !int}"); }
		@Test public void test_1946() { testValid("!{int, int}","{(int | any), !int}"); }
		@Test public void test_1947() { testValid("!{int, int}","{(any & any), !int}"); }
		@Test public void test_1948() { testValid("!{int, int}","{(int & any), !int}"); }
		@Test public void test_1949() { testValid("!{int, int}","{(int & int), !int}"); }
		@Test public void test_1950() { testValid("!{int, int}","{{any}, {any, any}}"); }
		@Test public void test_1951() { testValid("!{int, int}","{{int}, {any, any}}"); }
		@Test public void test_1952() { testValid("!{int, int}","{{int, int}, {any, any}}"); }
		@Test public void test_1953() { testValid("!{int, int}","{(any | any), {any, any}}"); }
		@Test public void test_1954() { testValid("!{int, int}","{(any | int), {any, any}}"); }
		@Test public void test_1955() { testValid("!{int, int}","{!int, {int, any}}"); }
		@Test public void test_1956() { testValid("!{int, int}","{{int, any}, {int, any}}"); }
		@Test public void test_1957() { testValid("!{int, int}","{{any, int}, {int, any}}"); }
		@Test public void test_1958() { testValid("!{int, int}","{(any & int), {int, any}}"); }
		@Test public void test_1959() { testValid("!{int, int}","{{any}, {any, int}}"); }
		@Test public void test_1960() { testValid("!{int, int}","{{int, int}, {any, int}}"); }
		@Test public void test_1961() { testValid("!{int, int}","{(int | int), {any, int}}"); }
		@Test public void test_1962() { testValid("!{int, int}","{(any & int), {any, int}}"); }
		@Test public void test_1963() { testValid("!{int, int}","{!int, {int, int}}"); }
		@Test public void test_1964() { testValid("!{int, int}","{{int, int}, {int, int}}"); }
		@Test public void test_1965() { testValid("!{int, int}","{(any | any), {int, int}}"); }
		@Test public void test_1966() { testValid("!{int, int}","{(int | any), {int, int}}"); }
		@Test public void test_1967() { testValid("!{int, int}","{(int & any), {int, int}}"); }
		@Test public void test_1968() { testValid("!{int, int}","{{int}, (any | any)}"); }
		@Test public void test_1969() { testValid("!{int, int}","{{int, any}, (any | any)}"); }
		@Test public void test_1970() { testValid("!{int, int}","{{any, int}, (any | any)}"); }
		@Test public void test_1971() { testInvalid("!{int, int}","{(any | any), (any | any)}"); }
		@Test public void test_1972() { testInvalid("!{int, int}","{(int | any), (any | any)}"); }
		@Test public void test_1973() { testInvalid("!{int, int}","{(int & int), (any | any)}"); }
		@Test public void test_1974() { testValid("!{int, int}","{!int, (int | any)}"); }
		@Test public void test_1975() { testValid("!{int, int}","{{int, int}, (int | any)}"); }
		@Test public void test_1976() { testInvalid("!{int, int}","{(any | any), (int | any)}"); }
		@Test public void test_1977() { testInvalid("!{int, int}","{(int | int), (int | any)}"); }
		@Test public void test_1978() { testValid("!{int, int}","{{any}, (any | int)}"); }
		@Test public void test_1979() { testValid("!{int, int}","{!int, (any | int)}"); }
		@Test public void test_1980() { testInvalid("!{int, int}","{(any | any), (any | int)}"); }
		@Test public void test_1981() { testInvalid("!{int, int}","{(any | int), (any | int)}"); }
		@Test public void test_1982() { testInvalid("!{int, int}","{(any & int), (any | int)}"); }
		@Test public void test_1983() { testValid("!{int, int}","{{int}, (int | int)}"); }
		@Test public void test_1984() { testValid("!{int, int}","{{any, any}, (int | int)}"); }
		@Test public void test_1985() { testValid("!{int, int}","{{int, int}, (int | int)}"); }
		@Test public void test_1986() { testValid("!{int, int}","{{int}, (any & any)}"); }
		@Test public void test_1987() { testValid("!{int, int}","{{int, any}, (any & any)}"); }
		@Test public void test_1988() { testValid("!{int, int}","{{any, int}, (any & any)}"); }
		@Test public void test_1989() { testInvalid("!{int, int}","{(int | any), (any & any)}"); }
		@Test public void test_1990() { testInvalid("!{int, int}","{(any & any), (any & any)}"); }
		@Test public void test_1991() { testInvalid("!{int, int}","{(int & any), (any & any)}"); }
		@Test public void test_1992() { testValid("!{int, int}","{{any}, (int & any)}"); }
		@Test public void test_1993() { testValid("!{int, int}","{{int}, (int & any)}"); }
		@Test public void test_1994() { testValid("!{int, int}","{{any, any}, (int & any)}"); }
		@Test public void test_1995() { testValid("!{int, int}","{{int, any}, (int & any)}"); }
		@Test public void test_1996() { testInvalid("!{int, int}","{(any | int), (int & any)}"); }
		@Test public void test_1997() { testInvalid("!{int, int}","{(any & any), (int & any)}"); }
		@Test public void test_1998() { testInvalid("!{int, int}","{(int & any), (int & any)}"); }
		@Test public void test_1999() { testInvalid("!{int, int}","{(int & int), (int & any)}"); }
		@Test public void test_2000() { testValid("!{int, int}","{{int, any}, (any & int)}"); }
		@Test public void test_2001() { testInvalid("!{int, int}","{(any & any), (any & int)}"); }
		@Test public void test_2002() { testValid("!{int, int}","{{any, int}, (int & int)}"); }
		@Test public void test_2003() { testInvalid("!{int, int}","{(int | int), (int & int)}"); }
		@Test public void test_2004() { testInvalid("!{int, int}","{(any & any), (int & int)}"); }
		@Test public void test_2005() { testInvalid("!{int, int}","{(any & int), (int & int)}"); }
		@Test public void test_2006() { testInvalid("!{int, int}","{(int & int), (int & int)}"); }
		@Test public void test_2007() { testInvalid("!{int, int}","(!int | {any})"); }
		@Test public void test_2008() { testInvalid("!{int, int}","({any, any} | {any})"); }
		@Test public void test_2009() { testInvalid("!{int, int}","((any | any) | {any})"); }
		@Test public void test_2010() { testInvalid("!{int, int}","((int | any) | {any})"); }
		@Test public void test_2011() { testInvalid("!{int, int}","((any & any) | {any})"); }
		@Test public void test_2012() { testValid("!{int, int}","((int & any) | {any})"); }
		@Test public void test_2013() { testValid("!{int, int}","((any & int) | {any})"); }
		@Test public void test_2014() { testValid("!{int, int}","({int} | {int})"); }
		@Test public void test_2015() { testValid("!{int, int}","(!any | {int})"); }
		@Test public void test_2016() { testInvalid("!{int, int}","(!int | {int})"); }
		@Test public void test_2017() { testInvalid("!{int, int}","({any, int} | {int})"); }
		@Test public void test_2018() { testValid("!{int, int}","((int & any) | {int})"); }
		@Test public void test_2019() { testValid("!{int, int}","((any & int) | {int})"); }
		@Test public void test_2020() { testValid("!{int, int}","((int & int) | {int})"); }
		@Test public void test_2021() { testValid("!{int, int}","({any} | !any)"); }
		@Test public void test_2022() { testValid("!{int, int}","({int} | !any)"); }
		@Test public void test_2023() { testInvalid("!{int, int}","({any, any} | !any)"); }
		@Test public void test_2024() { testInvalid("!{int, int}","({int, int} | !any)"); }
		@Test public void test_2025() { testInvalid("!{int, int}","((any | any) | !any)"); }
		@Test public void test_2026() { testInvalid("!{int, int}","((int | any) | !any)"); }
		@Test public void test_2027() { testValid("!{int, int}","((int | int) | !any)"); }
		@Test public void test_2028() { testValid("!{int, int}","((int & int) | !any)"); }
		@Test public void test_2029() { testInvalid("!{int, int}","(!int | !int)"); }
		@Test public void test_2030() { testInvalid("!{int, int}","({any, any} | !int)"); }
		@Test public void test_2031() { testInvalid("!{int, int}","({int, int} | !int)"); }
		@Test public void test_2032() { testInvalid("!{int, int}","((int | any) | !int)"); }
		@Test public void test_2033() { testInvalid("!{int, int}","((any | int) | !int)"); }
		@Test public void test_2034() { testInvalid("!{int, int}","((any & int) | !int)"); }
		@Test public void test_2035() { testInvalid("!{int, int}","((int & int) | !int)"); }
		@Test public void test_2036() { testInvalid("!{int, int}","({int} | {any, any})"); }
		@Test public void test_2037() { testInvalid("!{int, int}","(!any | {any, any})"); }
		@Test public void test_2038() { testInvalid("!{int, int}","(!int | {any, any})"); }
		@Test public void test_2039() { testInvalid("!{int, int}","({any, int} | {any, any})"); }
		@Test public void test_2040() { testInvalid("!{int, int}","((int | any) | {any, any})"); }
		@Test public void test_2041() { testInvalid("!{int, int}","((any & any) | {any, any})"); }
		@Test public void test_2042() { testInvalid("!{int, int}","((any & int) | {any, any})"); }
		@Test public void test_2043() { testInvalid("!{int, int}","(!int | {int, any})"); }
		@Test public void test_2044() { testInvalid("!{int, int}","({any, int} | {int, any})"); }
		@Test public void test_2045() { testInvalid("!{int, int}","((any | any) | {int, any})"); }
		@Test public void test_2046() { testInvalid("!{int, int}","((int | any) | {int, any})"); }
		@Test public void test_2047() { testInvalid("!{int, int}","((any | int) | {int, any})"); }
		@Test public void test_2048() { testInvalid("!{int, int}","((int & any) | {int, any})"); }
		@Test public void test_2049() { testInvalid("!{int, int}","({any} | {any, int})"); }
		@Test public void test_2050() { testInvalid("!{int, int}","(!int | {any, int})"); }
		@Test public void test_2051() { testInvalid("!{int, int}","({any, int} | {any, int})"); }
		@Test public void test_2052() { testInvalid("!{int, int}","((any | any) | {any, int})"); }
		@Test public void test_2053() { testInvalid("!{int, int}","((any | int) | {any, int})"); }
		@Test public void test_2054() { testInvalid("!{int, int}","((int | int) | {any, int})"); }
		@Test public void test_2055() { testInvalid("!{int, int}","((int & any) | {any, int})"); }
		@Test public void test_2056() { testInvalid("!{int, int}","(!any | {int, int})"); }
		@Test public void test_2057() { testInvalid("!{int, int}","(!int | {int, int})"); }
		@Test public void test_2058() { testInvalid("!{int, int}","({any, any} | {int, int})"); }
		@Test public void test_2059() { testInvalid("!{int, int}","({any, int} | {int, int})"); }
		@Test public void test_2060() { testInvalid("!{int, int}","((any | any) | {int, int})"); }
		@Test public void test_2061() { testInvalid("!{int, int}","((int | int) | {int, int})"); }
		@Test public void test_2062() { testInvalid("!{int, int}","((int & any) | {int, int})"); }
		@Test public void test_2063() { testInvalid("!{int, int}","((any & int) | {int, int})"); }
		@Test public void test_2064() { testInvalid("!{int, int}","((int & int) | {int, int})"); }
		@Test public void test_2065() { testInvalid("!{int, int}","({any} | (any | any))"); }
		@Test public void test_2066() { testInvalid("!{int, int}","(!any | (any | any))"); }
		@Test public void test_2067() { testInvalid("!{int, int}","({any, any} | (any | any))"); }
		@Test public void test_2068() { testInvalid("!{int, int}","({any, int} | (any | any))"); }
		@Test public void test_2069() { testInvalid("!{int, int}","({int, int} | (any | any))"); }
		@Test public void test_2070() { testInvalid("!{int, int}","((int | any) | (any | any))"); }
		@Test public void test_2071() { testInvalid("!{int, int}","((any | int) | (any | any))"); }
		@Test public void test_2072() { testInvalid("!{int, int}","((any & int) | (any | any))"); }
		@Test public void test_2073() { testInvalid("!{int, int}","((int & int) | (any | any))"); }
		@Test public void test_2074() { testInvalid("!{int, int}","({any} | (int | any))"); }
		@Test public void test_2075() { testInvalid("!{int, int}","(!int | (int | any))"); }
		@Test public void test_2076() { testInvalid("!{int, int}","({int, any} | (int | any))"); }
		@Test public void test_2077() { testInvalid("!{int, int}","({any, int} | (int | any))"); }
		@Test public void test_2078() { testInvalid("!{int, int}","((int & any) | (int | any))"); }
		@Test public void test_2079() { testInvalid("!{int, int}","((any & int) | (int | any))"); }
		@Test public void test_2080() { testInvalid("!{int, int}","({any} | (any | int))"); }
		@Test public void test_2081() { testInvalid("!{int, int}","({int} | (any | int))"); }
		@Test public void test_2082() { testInvalid("!{int, int}","(!any | (any | int))"); }
		@Test public void test_2083() { testInvalid("!{int, int}","(!int | (any | int))"); }
		@Test public void test_2084() { testInvalid("!{int, int}","({any, int} | (any | int))"); }
		@Test public void test_2085() { testInvalid("!{int, int}","({int, int} | (any | int))"); }
		@Test public void test_2086() { testInvalid("!{int, int}","((int | any) | (any | int))"); }
		@Test public void test_2087() { testInvalid("!{int, int}","((any | int) | (any | int))"); }
		@Test public void test_2088() { testInvalid("!{int, int}","((int | int) | (any | int))"); }
		@Test public void test_2089() { testInvalid("!{int, int}","((any & any) | (any | int))"); }
		@Test public void test_2090() { testValid("!{int, int}","({int} | (int | int))"); }
		@Test public void test_2091() { testValid("!{int, int}","(!any | (int | int))"); }
		@Test public void test_2092() { testInvalid("!{int, int}","(!int | (int | int))"); }
		@Test public void test_2093() { testInvalid("!{int, int}","({int, any} | (int | int))"); }
		@Test public void test_2094() { testInvalid("!{int, int}","({any, int} | (int | int))"); }
		@Test public void test_2095() { testInvalid("!{int, int}","((any | int) | (int | int))"); }
		@Test public void test_2096() { testValid("!{int, int}","((int | int) | (int | int))"); }
		@Test public void test_2097() { testInvalid("!{int, int}","((any & any) | (int | int))"); }
		@Test public void test_2098() { testValid("!{int, int}","((int & any) | (int | int))"); }
		@Test public void test_2099() { testValid("!{int, int}","((int & int) | (int | int))"); }
		@Test public void test_2100() { testInvalid("!{int, int}","(!any | (any & any))"); }
		@Test public void test_2101() { testInvalid("!{int, int}","(!int | (any & any))"); }
		@Test public void test_2102() { testInvalid("!{int, int}","({any, any} | (any & any))"); }
		@Test public void test_2103() { testInvalid("!{int, int}","({int, any} | (any & any))"); }
		@Test public void test_2104() { testInvalid("!{int, int}","({any, int} | (any & any))"); }
		@Test public void test_2105() { testInvalid("!{int, int}","({int, int} | (any & any))"); }
		@Test public void test_2106() { testInvalid("!{int, int}","((int | any) | (any & any))"); }
		@Test public void test_2107() { testInvalid("!{int, int}","((int | int) | (any & any))"); }
		@Test public void test_2108() { testInvalid("!{int, int}","((int & any) | (any & any))"); }
		@Test public void test_2109() { testInvalid("!{int, int}","((any & int) | (any & any))"); }
		@Test public void test_2110() { testInvalid("!{int, int}","((int & int) | (any & any))"); }
		@Test public void test_2111() { testValid("!{int, int}","({any} | (int & any))"); }
		@Test public void test_2112() { testInvalid("!(any | any)","{int}"); }
		@Test public void test_2113() { testInvalid("!(any | any)","{any, any}"); }
		@Test public void test_2114() { testInvalid("!(any | any)","{int, int}"); }
		@Test public void test_2115() { testInvalid("!(any | any)","(any | int)"); }
		@Test public void test_2116() { testInvalid("!(any | any)","(int & any)"); }
		@Test public void test_2117() { testInvalid("!(any | any)","{{any}}"); }
		@Test public void test_2118() { testInvalid("!(any | any)","{{int, any}}"); }
		@Test public void test_2119() { testInvalid("!(any | any)","{{int, int}}"); }
		@Test public void test_2120() { testInvalid("!(any | any)","{(any | int)}"); }
		@Test public void test_2121() { testInvalid("!(any | any)","!{int, any}"); }
		@Test public void test_2122() { testInvalid("!(any | any)","!{int, int}"); }
		@Test public void test_2123() { testValid("!(any | any)","!(any | any)"); }
		@Test public void test_2124() { testValid("!(any | any)","!(any & any)"); }
		@Test public void test_2125() { testInvalid("!(any | any)","!(int & int)"); }
		@Test public void test_2126() { testInvalid("!(any | any)","{{int}, {any}}"); }
		@Test public void test_2127() { testInvalid("!(any | any)","{!int, {any}}"); }
		@Test public void test_2128() { testInvalid("!(any | any)","{{int, int}, {any}}"); }
		@Test public void test_2129() { testInvalid("!(any | any)","{(any | int), {any}}"); }
		@Test public void test_2130() { testInvalid("!(any | any)","{!int, {int}}"); }
		@Test public void test_2131() { testInvalid("!(any | any)","{{any, any}, {int}}"); }
		@Test public void test_2132() { testInvalid("!(any | any)","{(any | any), {int}}"); }
		@Test public void test_2133() { testInvalid("!(any | any)","{(any & any), {int}}"); }
		@Test public void test_2134() { testInvalid("!(any | any)","{(any & int), {int}}"); }
		@Test public void test_2135() { testInvalid("!(any | any)","{{any, any}, !int}"); }
		@Test public void test_2136() { testInvalid("!(any | any)","{{any, int}, !int}"); }
		@Test public void test_2137() { testInvalid("!(any | any)","{(any | any), !int}"); }
		@Test public void test_2138() { testInvalid("!(any | any)","{(int | any), !int}"); }
		@Test public void test_2139() { testInvalid("!(any | any)","{(any & any), !int}"); }
		@Test public void test_2140() { testInvalid("!(any | any)","{(int & any), !int}"); }
		@Test public void test_2141() { testInvalid("!(any | any)","{(int & int), !int}"); }
		@Test public void test_2142() { testInvalid("!(any | any)","{{any}, {any, any}}"); }
		@Test public void test_2143() { testInvalid("!(any | any)","{{int}, {any, any}}"); }
		@Test public void test_2144() { testInvalid("!(any | any)","{{int, int}, {any, any}}"); }
		@Test public void test_2145() { testInvalid("!(any | any)","{(any | any), {any, any}}"); }
		@Test public void test_2146() { testInvalid("!(any | any)","{(any | int), {any, any}}"); }
		@Test public void test_2147() { testInvalid("!(any | any)","{!int, {int, any}}"); }
		@Test public void test_2148() { testInvalid("!(any | any)","{{int, any}, {int, any}}"); }
		@Test public void test_2149() { testInvalid("!(any | any)","{{any, int}, {int, any}}"); }
		@Test public void test_2150() { testInvalid("!(any | any)","{(any & int), {int, any}}"); }
		@Test public void test_2151() { testInvalid("!(any | any)","{{any}, {any, int}}"); }
		@Test public void test_2152() { testInvalid("!(any | any)","{{int, int}, {any, int}}"); }
		@Test public void test_2153() { testInvalid("!(any | any)","{(int | int), {any, int}}"); }
		@Test public void test_2154() { testInvalid("!(any | any)","{(any & int), {any, int}}"); }
		@Test public void test_2155() { testInvalid("!(any | any)","{!int, {int, int}}"); }
		@Test public void test_2156() { testInvalid("!(any | any)","{{int, int}, {int, int}}"); }
		@Test public void test_2157() { testInvalid("!(any | any)","{(any | any), {int, int}}"); }
		@Test public void test_2158() { testInvalid("!(any | any)","{(int | any), {int, int}}"); }
		@Test public void test_2159() { testInvalid("!(any | any)","{(int & any), {int, int}}"); }
		@Test public void test_2160() { testInvalid("!(any | any)","{{int}, (any | any)}"); }
		@Test public void test_2161() { testInvalid("!(any | any)","{{int, any}, (any | any)}"); }
		@Test public void test_2162() { testInvalid("!(any | any)","{{any, int}, (any | any)}"); }
		@Test public void test_2163() { testInvalid("!(any | any)","{(any | any), (any | any)}"); }
		@Test public void test_2164() { testInvalid("!(any | any)","{(int | any), (any | any)}"); }
		@Test public void test_2165() { testInvalid("!(any | any)","{(int & int), (any | any)}"); }
		@Test public void test_2166() { testInvalid("!(any | any)","{!int, (int | any)}"); }
		@Test public void test_2167() { testInvalid("!(any | any)","{{int, int}, (int | any)}"); }
		@Test public void test_2168() { testInvalid("!(any | any)","{(any | any), (int | any)}"); }
		@Test public void test_2169() { testInvalid("!(any | any)","{(int | int), (int | any)}"); }
		@Test public void test_2170() { testInvalid("!(any | any)","{{any}, (any | int)}"); }
		@Test public void test_2171() { testInvalid("!(any | any)","{!int, (any | int)}"); }
		@Test public void test_2172() { testInvalid("!(any | any)","{(any | any), (any | int)}"); }
		@Test public void test_2173() { testInvalid("!(any | any)","{(any | int), (any | int)}"); }
		@Test public void test_2174() { testInvalid("!(any | any)","{(any & int), (any | int)}"); }
		@Test public void test_2175() { testInvalid("!(any | any)","{{int}, (int | int)}"); }
		@Test public void test_2176() { testInvalid("!(any | any)","{{any, any}, (int | int)}"); }
		@Test public void test_2177() { testInvalid("!(any | any)","{{int, int}, (int | int)}"); }
		@Test public void test_2178() { testInvalid("!(any | any)","{{int}, (any & any)}"); }
		@Test public void test_2179() { testInvalid("!(any | any)","{{int, any}, (any & any)}"); }
		@Test public void test_2180() { testInvalid("!(any | any)","{{any, int}, (any & any)}"); }
		@Test public void test_2181() { testInvalid("!(any | any)","{(int | any), (any & any)}"); }
		@Test public void test_2182() { testInvalid("!(any | any)","{(any & any), (any & any)}"); }
		@Test public void test_2183() { testInvalid("!(any | any)","{(int & any), (any & any)}"); }
		@Test public void test_2184() { testInvalid("!(any | any)","{{any}, (int & any)}"); }
		@Test public void test_2185() { testInvalid("!(any | any)","{{int}, (int & any)}"); }
		@Test public void test_2186() { testInvalid("!(any | any)","{{any, any}, (int & any)}"); }
		@Test public void test_2187() { testInvalid("!(any | any)","{{int, any}, (int & any)}"); }
		@Test public void test_2188() { testInvalid("!(any | any)","{(any | int), (int & any)}"); }
		@Test public void test_2189() { testInvalid("!(any | any)","{(any & any), (int & any)}"); }
		@Test public void test_2190() { testInvalid("!(any | any)","{(int & any), (int & any)}"); }
		@Test public void test_2191() { testInvalid("!(any | any)","{(int & int), (int & any)}"); }
		@Test public void test_2192() { testInvalid("!(any | any)","{{int, any}, (any & int)}"); }
		@Test public void test_2193() { testInvalid("!(any | any)","{(any & any), (any & int)}"); }
		@Test public void test_2194() { testInvalid("!(any | any)","{{any, int}, (int & int)}"); }
		@Test public void test_2195() { testInvalid("!(any | any)","{(int | int), (int & int)}"); }
		@Test public void test_2196() { testInvalid("!(any | any)","{(any & any), (int & int)}"); }
		@Test public void test_2197() { testInvalid("!(any | any)","{(any & int), (int & int)}"); }
		@Test public void test_2198() { testInvalid("!(any | any)","{(int & int), (int & int)}"); }
		@Test public void test_2199() { testInvalid("!(any | any)","(!int | {any})"); }
		@Test public void test_2200() { testInvalid("!(any | any)","({any, any} | {any})"); }
		@Test public void test_2201() { testInvalid("!(any | any)","((any | any) | {any})"); }
		@Test public void test_2202() { testInvalid("!(any | any)","((int | any) | {any})"); }
		@Test public void test_2203() { testInvalid("!(any | any)","((any & any) | {any})"); }
		@Test public void test_2204() { testInvalid("!(any | any)","((int & any) | {any})"); }
		@Test public void test_2205() { testInvalid("!(any | any)","((any & int) | {any})"); }
		@Test public void test_2206() { testInvalid("!(any | any)","({int} | {int})"); }
		@Test public void test_2207() { testInvalid("!(any | any)","(!any | {int})"); }
		@Test public void test_2208() { testInvalid("!(any | any)","(!int | {int})"); }
		@Test public void test_2209() { testInvalid("!(any | any)","({any, int} | {int})"); }
		@Test public void test_2210() { testInvalid("!(any | any)","((int & any) | {int})"); }
		@Test public void test_2211() { testInvalid("!(any | any)","((any & int) | {int})"); }
		@Test public void test_2212() { testInvalid("!(any | any)","((int & int) | {int})"); }
		@Test public void test_2213() { testInvalid("!(any | any)","({any} | !any)"); }
		@Test public void test_2214() { testInvalid("!(any | any)","({int} | !any)"); }
		@Test public void test_2215() { testInvalid("!(any | any)","({any, any} | !any)"); }
		@Test public void test_2216() { testInvalid("!(any | any)","({int, int} | !any)"); }
		@Test public void test_2217() { testInvalid("!(any | any)","((any | any) | !any)"); }
		@Test public void test_2218() { testInvalid("!(any | any)","((int | any) | !any)"); }
		@Test public void test_2219() { testInvalid("!(any | any)","((int | int) | !any)"); }
		@Test public void test_2220() { testInvalid("!(any | any)","((int & int) | !any)"); }
		@Test public void test_2221() { testInvalid("!(any | any)","(!int | !int)"); }
		@Test public void test_2222() { testInvalid("!(any | any)","({any, any} | !int)"); }
		@Test public void test_2223() { testInvalid("!(any | any)","({int, int} | !int)"); }
		@Test public void test_2224() { testInvalid("!(any | any)","((int | any) | !int)"); }
		@Test public void test_2225() { testInvalid("!(any | any)","((any | int) | !int)"); }
		@Test public void test_2226() { testInvalid("!(any | any)","((any & int) | !int)"); }
		@Test public void test_2227() { testInvalid("!(any | any)","((int & int) | !int)"); }
		@Test public void test_2228() { testInvalid("!(any | any)","({int} | {any, any})"); }
		@Test public void test_2229() { testInvalid("!(any | any)","(!any | {any, any})"); }
		@Test public void test_2230() { testInvalid("!(any | any)","(!int | {any, any})"); }
		@Test public void test_2231() { testInvalid("!(any | any)","({any, int} | {any, any})"); }
		@Test public void test_2232() { testInvalid("!(any | any)","((int | any) | {any, any})"); }
		@Test public void test_2233() { testInvalid("!(any | any)","((any & any) | {any, any})"); }
		@Test public void test_2234() { testInvalid("!(any | any)","((any & int) | {any, any})"); }
		@Test public void test_2235() { testInvalid("!(any | any)","(!int | {int, any})"); }
		@Test public void test_2236() { testInvalid("!(any | any)","({any, int} | {int, any})"); }
		@Test public void test_2237() { testInvalid("!(any | any)","((any | any) | {int, any})"); }
		@Test public void test_2238() { testInvalid("!(any | any)","((int | any) | {int, any})"); }
		@Test public void test_2239() { testInvalid("!(any | any)","((any | int) | {int, any})"); }
		@Test public void test_2240() { testInvalid("!(any | any)","((int & any) | {int, any})"); }
		@Test public void test_2241() { testInvalid("!(any | any)","({any} | {any, int})"); }
		@Test public void test_2242() { testInvalid("!(any | any)","(!int | {any, int})"); }
		@Test public void test_2243() { testInvalid("!(any | any)","({any, int} | {any, int})"); }
		@Test public void test_2244() { testInvalid("!(any | any)","((any | any) | {any, int})"); }
		@Test public void test_2245() { testInvalid("!(any | any)","((any | int) | {any, int})"); }
		@Test public void test_2246() { testInvalid("!(any | any)","((int | int) | {any, int})"); }
		@Test public void test_2247() { testInvalid("!(any | any)","((int & any) | {any, int})"); }
		@Test public void test_2248() { testInvalid("!(any | any)","(!any | {int, int})"); }
		@Test public void test_2249() { testInvalid("!(any | any)","(!int | {int, int})"); }
		@Test public void test_2250() { testInvalid("!(any | any)","({any, any} | {int, int})"); }
		@Test public void test_2251() { testInvalid("!(any | any)","({any, int} | {int, int})"); }
		@Test public void test_2252() { testInvalid("!(any | any)","((any | any) | {int, int})"); }
		@Test public void test_2253() { testInvalid("!(any | any)","((int | int) | {int, int})"); }
		@Test public void test_2254() { testInvalid("!(any | any)","((int & any) | {int, int})"); }
		@Test public void test_2255() { testInvalid("!(any | any)","((any & int) | {int, int})"); }
		@Test public void test_2256() { testInvalid("!(any | any)","((int & int) | {int, int})"); }
		@Test public void test_2257() { testInvalid("!(any | any)","({any} | (any | any))"); }
		@Test public void test_2258() { testInvalid("!(any | any)","(!any | (any | any))"); }
		@Test public void test_2259() { testInvalid("!(any | any)","({any, any} | (any | any))"); }
		@Test public void test_2260() { testInvalid("!(any | any)","({any, int} | (any | any))"); }
		@Test public void test_2261() { testInvalid("!(any | any)","({int, int} | (any | any))"); }
		@Test public void test_2262() { testInvalid("!(any | any)","((int | any) | (any | any))"); }
		@Test public void test_2263() { testInvalid("!(any | any)","((any | int) | (any | any))"); }
		@Test public void test_2264() { testInvalid("!(any | any)","((any & int) | (any | any))"); }
		@Test public void test_2265() { testInvalid("!(any | any)","((int & int) | (any | any))"); }
		@Test public void test_2266() { testInvalid("!(any | any)","({any} | (int | any))"); }
		@Test public void test_2267() { testInvalid("!(any | any)","(!int | (int | any))"); }
		@Test public void test_2268() { testInvalid("!(any | any)","({int, any} | (int | any))"); }
		@Test public void test_2269() { testInvalid("!(any | any)","({any, int} | (int | any))"); }
		@Test public void test_2270() { testInvalid("!(any | any)","((int & any) | (int | any))"); }
		@Test public void test_2271() { testInvalid("!(any | any)","((any & int) | (int | any))"); }
		@Test public void test_2272() { testInvalid("!(any | any)","({any} | (any | int))"); }
		@Test public void test_2273() { testInvalid("!(any | any)","({int} | (any | int))"); }
		@Test public void test_2274() { testInvalid("!(any | any)","(!any | (any | int))"); }
		@Test public void test_2275() { testInvalid("!(any | any)","(!int | (any | int))"); }
		@Test public void test_2276() { testInvalid("!(any | any)","({any, int} | (any | int))"); }
		@Test public void test_2277() { testInvalid("!(any | any)","({int, int} | (any | int))"); }
		@Test public void test_2278() { testInvalid("!(any | any)","((int | any) | (any | int))"); }
		@Test public void test_2279() { testInvalid("!(any | any)","((any | int) | (any | int))"); }
		@Test public void test_2280() { testInvalid("!(any | any)","((int | int) | (any | int))"); }
		@Test public void test_2281() { testInvalid("!(any | any)","((any & any) | (any | int))"); }
		@Test public void test_2282() { testInvalid("!(any | any)","({int} | (int | int))"); }
		@Test public void test_2283() { testInvalid("!(any | any)","(!any | (int | int))"); }
		@Test public void test_2284() { testInvalid("!(any | any)","(!int | (int | int))"); }
		@Test public void test_2285() { testInvalid("!(any | any)","({int, any} | (int | int))"); }
		@Test public void test_2286() { testInvalid("!(any | any)","({any, int} | (int | int))"); }
		@Test public void test_2287() { testInvalid("!(any | any)","((any | int) | (int | int))"); }
		@Test public void test_2288() { testInvalid("!(any | any)","((int | int) | (int | int))"); }
		@Test public void test_2289() { testInvalid("!(any | any)","((any & any) | (int | int))"); }
		@Test public void test_2290() { testInvalid("!(any | any)","((int & any) | (int | int))"); }
		@Test public void test_2291() { testInvalid("!(any | any)","((int & int) | (int | int))"); }
		@Test public void test_2292() { testInvalid("!(any | any)","(!any | (any & any))"); }
		@Test public void test_2293() { testInvalid("!(any | any)","(!int | (any & any))"); }
		@Test public void test_2294() { testInvalid("!(any | any)","({any, any} | (any & any))"); }
		@Test public void test_2295() { testInvalid("!(any | any)","({int, any} | (any & any))"); }
		@Test public void test_2296() { testInvalid("!(any | any)","({any, int} | (any & any))"); }
		@Test public void test_2297() { testInvalid("!(any | any)","({int, int} | (any & any))"); }
		@Test public void test_2298() { testInvalid("!(any | any)","((int | any) | (any & any))"); }
		@Test public void test_2299() { testInvalid("!(any | any)","((int | int) | (any & any))"); }
		@Test public void test_2300() { testInvalid("!(any | any)","((int & any) | (any & any))"); }
		@Test public void test_2301() { testInvalid("!(any | any)","((any & int) | (any & any))"); }
		@Test public void test_2302() { testInvalid("!(any | any)","((int & int) | (any & any))"); }
		@Test public void test_2303() { testInvalid("!(any | any)","({any} | (int & any))"); }
		@Test public void test_2304() { testInvalid("!(any & any)","{int}"); }
		@Test public void test_2305() { testInvalid("!(any & any)","{any, any}"); }
		@Test public void test_2306() { testInvalid("!(any & any)","{int, int}"); }
		@Test public void test_2307() { testInvalid("!(any & any)","(any | int)"); }
		@Test public void test_2308() { testInvalid("!(any & any)","(int & any)"); }
		@Test public void test_2309() { testInvalid("!(any & any)","{{any}}"); }
		@Test public void test_2310() { testInvalid("!(any & any)","{{int, any}}"); }
		@Test public void test_2311() { testInvalid("!(any & any)","{{int, int}}"); }
		@Test public void test_2312() { testInvalid("!(any & any)","{(any | int)}"); }
		@Test public void test_2313() { testInvalid("!(any & any)","!{int, any}"); }
		@Test public void test_2314() { testInvalid("!(any & any)","!{int, int}"); }
		@Test public void test_2315() { testValid("!(any & any)","!(any | any)"); }
		@Test public void test_2316() { testValid("!(any & any)","!(any & any)"); }
		@Test public void test_2317() { testInvalid("!(any & any)","!(int & int)"); }
		@Test public void test_2318() { testInvalid("!(any & any)","{{int}, {any}}"); }
		@Test public void test_2319() { testInvalid("!(any & any)","{!int, {any}}"); }
		@Test public void test_2320() { testInvalid("!(any & any)","{{int, int}, {any}}"); }
		@Test public void test_2321() { testInvalid("!(any & any)","{(any | int), {any}}"); }
		@Test public void test_2322() { testInvalid("!(any & any)","{!int, {int}}"); }
		@Test public void test_2323() { testInvalid("!(any & any)","{{any, any}, {int}}"); }
		@Test public void test_2324() { testInvalid("!(any & any)","{(any | any), {int}}"); }
		@Test public void test_2325() { testInvalid("!(any & any)","{(any & any), {int}}"); }
		@Test public void test_2326() { testInvalid("!(any & any)","{(any & int), {int}}"); }
		@Test public void test_2327() { testInvalid("!(any & any)","{{any, any}, !int}"); }
		@Test public void test_2328() { testInvalid("!(any & any)","{{any, int}, !int}"); }
		@Test public void test_2329() { testInvalid("!(any & any)","{(any | any), !int}"); }
		@Test public void test_2330() { testInvalid("!(any & any)","{(int | any), !int}"); }
		@Test public void test_2331() { testInvalid("!(any & any)","{(any & any), !int}"); }
		@Test public void test_2332() { testInvalid("!(any & any)","{(int & any), !int}"); }
		@Test public void test_2333() { testInvalid("!(any & any)","{(int & int), !int}"); }
		@Test public void test_2334() { testInvalid("!(any & any)","{{any}, {any, any}}"); }
		@Test public void test_2335() { testInvalid("!(any & any)","{{int}, {any, any}}"); }
		@Test public void test_2336() { testInvalid("!(any & any)","{{int, int}, {any, any}}"); }
		@Test public void test_2337() { testInvalid("!(any & any)","{(any | any), {any, any}}"); }
		@Test public void test_2338() { testInvalid("!(any & any)","{(any | int), {any, any}}"); }
		@Test public void test_2339() { testInvalid("!(any & any)","{!int, {int, any}}"); }
		@Test public void test_2340() { testInvalid("!(any & any)","{{int, any}, {int, any}}"); }
		@Test public void test_2341() { testInvalid("!(any & any)","{{any, int}, {int, any}}"); }
		@Test public void test_2342() { testInvalid("!(any & any)","{(any & int), {int, any}}"); }
		@Test public void test_2343() { testInvalid("!(any & any)","{{any}, {any, int}}"); }
		@Test public void test_2344() { testInvalid("!(any & any)","{{int, int}, {any, int}}"); }
		@Test public void test_2345() { testInvalid("!(any & any)","{(int | int), {any, int}}"); }
		@Test public void test_2346() { testInvalid("!(any & any)","{(any & int), {any, int}}"); }
		@Test public void test_2347() { testInvalid("!(any & any)","{!int, {int, int}}"); }
		@Test public void test_2348() { testInvalid("!(any & any)","{{int, int}, {int, int}}"); }
		@Test public void test_2349() { testInvalid("!(any & any)","{(any | any), {int, int}}"); }
		@Test public void test_2350() { testInvalid("!(any & any)","{(int | any), {int, int}}"); }
		@Test public void test_2351() { testInvalid("!(any & any)","{(int & any), {int, int}}"); }
		@Test public void test_2352() { testInvalid("!(any & any)","{{int}, (any | any)}"); }
		@Test public void test_2353() { testInvalid("!(any & any)","{{int, any}, (any | any)}"); }
		@Test public void test_2354() { testInvalid("!(any & any)","{{any, int}, (any | any)}"); }
		@Test public void test_2355() { testInvalid("!(any & any)","{(any | any), (any | any)}"); }
		@Test public void test_2356() { testInvalid("!(any & any)","{(int | any), (any | any)}"); }
		@Test public void test_2357() { testInvalid("!(any & any)","{(int & int), (any | any)}"); }
		@Test public void test_2358() { testInvalid("!(any & any)","{!int, (int | any)}"); }
		@Test public void test_2359() { testInvalid("!(any & any)","{{int, int}, (int | any)}"); }
		@Test public void test_2360() { testInvalid("!(any & any)","{(any | any), (int | any)}"); }
		@Test public void test_2361() { testInvalid("!(any & any)","{(int | int), (int | any)}"); }
		@Test public void test_2362() { testInvalid("!(any & any)","{{any}, (any | int)}"); }
		@Test public void test_2363() { testInvalid("!(any & any)","{!int, (any | int)}"); }
		@Test public void test_2364() { testInvalid("!(any & any)","{(any | any), (any | int)}"); }
		@Test public void test_2365() { testInvalid("!(any & any)","{(any | int), (any | int)}"); }
		@Test public void test_2366() { testInvalid("!(any & any)","{(any & int), (any | int)}"); }
		@Test public void test_2367() { testInvalid("!(any & any)","{{int}, (int | int)}"); }
		@Test public void test_2368() { testInvalid("!(any & any)","{{any, any}, (int | int)}"); }
		@Test public void test_2369() { testInvalid("!(any & any)","{{int, int}, (int | int)}"); }
		@Test public void test_2370() { testInvalid("!(any & any)","{{int}, (any & any)}"); }
		@Test public void test_2371() { testInvalid("!(any & any)","{{int, any}, (any & any)}"); }
		@Test public void test_2372() { testInvalid("!(any & any)","{{any, int}, (any & any)}"); }
		@Test public void test_2373() { testInvalid("!(any & any)","{(int | any), (any & any)}"); }
		@Test public void test_2374() { testInvalid("!(any & any)","{(any & any), (any & any)}"); }
		@Test public void test_2375() { testInvalid("!(any & any)","{(int & any), (any & any)}"); }
		@Test public void test_2376() { testInvalid("!(any & any)","{{any}, (int & any)}"); }
		@Test public void test_2377() { testInvalid("!(any & any)","{{int}, (int & any)}"); }
		@Test public void test_2378() { testInvalid("!(any & any)","{{any, any}, (int & any)}"); }
		@Test public void test_2379() { testInvalid("!(any & any)","{{int, any}, (int & any)}"); }
		@Test public void test_2380() { testInvalid("!(any & any)","{(any | int), (int & any)}"); }
		@Test public void test_2381() { testInvalid("!(any & any)","{(any & any), (int & any)}"); }
		@Test public void test_2382() { testInvalid("!(any & any)","{(int & any), (int & any)}"); }
		@Test public void test_2383() { testInvalid("!(any & any)","{(int & int), (int & any)}"); }
		@Test public void test_2384() { testInvalid("!(any & any)","{{int, any}, (any & int)}"); }
		@Test public void test_2385() { testInvalid("!(any & any)","{(any & any), (any & int)}"); }
		@Test public void test_2386() { testInvalid("!(any & any)","{{any, int}, (int & int)}"); }
		@Test public void test_2387() { testInvalid("!(any & any)","{(int | int), (int & int)}"); }
		@Test public void test_2388() { testInvalid("!(any & any)","{(any & any), (int & int)}"); }
		@Test public void test_2389() { testInvalid("!(any & any)","{(any & int), (int & int)}"); }
		@Test public void test_2390() { testInvalid("!(any & any)","{(int & int), (int & int)}"); }
		@Test public void test_2391() { testInvalid("!(any & any)","(!int | {any})"); }
		@Test public void test_2392() { testInvalid("!(any & any)","({any, any} | {any})"); }
		@Test public void test_2393() { testInvalid("!(any & any)","((any | any) | {any})"); }
		@Test public void test_2394() { testInvalid("!(any & any)","((int | any) | {any})"); }
		@Test public void test_2395() { testInvalid("!(any & any)","((any & any) | {any})"); }
		@Test public void test_2396() { testInvalid("!(any & any)","((int & any) | {any})"); }
		@Test public void test_2397() { testInvalid("!(any & any)","((any & int) | {any})"); }
		@Test public void test_2398() { testInvalid("!(any & any)","({int} | {int})"); }
		@Test public void test_2399() { testInvalid("!(any & any)","(!any | {int})"); }
		@Test public void test_2400() { testInvalid("!(any & any)","(!int | {int})"); }
		@Test public void test_2401() { testInvalid("!(any & any)","({any, int} | {int})"); }
		@Test public void test_2402() { testInvalid("!(any & any)","((int & any) | {int})"); }
		@Test public void test_2403() { testInvalid("!(any & any)","((any & int) | {int})"); }
		@Test public void test_2404() { testInvalid("!(any & any)","((int & int) | {int})"); }
		@Test public void test_2405() { testInvalid("!(any & any)","({any} | !any)"); }
		@Test public void test_2406() { testInvalid("!(any & any)","({int} | !any)"); }
		@Test public void test_2407() { testInvalid("!(any & any)","({any, any} | !any)"); }
		@Test public void test_2408() { testInvalid("!(any & any)","({int, int} | !any)"); }
		@Test public void test_2409() { testInvalid("!(any & any)","((any | any) | !any)"); }
		@Test public void test_2410() { testInvalid("!(any & any)","((int | any) | !any)"); }
		@Test public void test_2411() { testInvalid("!(any & any)","((int | int) | !any)"); }
		@Test public void test_2412() { testInvalid("!(any & any)","((int & int) | !any)"); }
		@Test public void test_2413() { testInvalid("!(any & any)","(!int | !int)"); }
		@Test public void test_2414() { testInvalid("!(any & any)","({any, any} | !int)"); }
		@Test public void test_2415() { testInvalid("!(any & any)","({int, int} | !int)"); }
		@Test public void test_2416() { testInvalid("!(any & any)","((int | any) | !int)"); }
		@Test public void test_2417() { testInvalid("!(any & any)","((any | int) | !int)"); }
		@Test public void test_2418() { testInvalid("!(any & any)","((any & int) | !int)"); }
		@Test public void test_2419() { testInvalid("!(any & any)","((int & int) | !int)"); }
		@Test public void test_2420() { testInvalid("!(any & any)","({int} | {any, any})"); }
		@Test public void test_2421() { testInvalid("!(any & any)","(!any | {any, any})"); }
		@Test public void test_2422() { testInvalid("!(any & any)","(!int | {any, any})"); }
		@Test public void test_2423() { testInvalid("!(any & any)","({any, int} | {any, any})"); }
		@Test public void test_2424() { testInvalid("!(any & any)","((int | any) | {any, any})"); }
		@Test public void test_2425() { testInvalid("!(any & any)","((any & any) | {any, any})"); }
		@Test public void test_2426() { testInvalid("!(any & any)","((any & int) | {any, any})"); }
		@Test public void test_2427() { testInvalid("!(any & any)","(!int | {int, any})"); }
		@Test public void test_2428() { testInvalid("!(any & any)","({any, int} | {int, any})"); }
		@Test public void test_2429() { testInvalid("!(any & any)","((any | any) | {int, any})"); }
		@Test public void test_2430() { testInvalid("!(any & any)","((int | any) | {int, any})"); }
		@Test public void test_2431() { testInvalid("!(any & any)","((any | int) | {int, any})"); }
		@Test public void test_2432() { testInvalid("!(any & any)","((int & any) | {int, any})"); }
		@Test public void test_2433() { testInvalid("!(any & any)","({any} | {any, int})"); }
		@Test public void test_2434() { testInvalid("!(any & any)","(!int | {any, int})"); }
		@Test public void test_2435() { testInvalid("!(any & any)","({any, int} | {any, int})"); }
		@Test public void test_2436() { testInvalid("!(any & any)","((any | any) | {any, int})"); }
		@Test public void test_2437() { testInvalid("!(any & any)","((any | int) | {any, int})"); }
		@Test public void test_2438() { testInvalid("!(any & any)","((int | int) | {any, int})"); }
		@Test public void test_2439() { testInvalid("!(any & any)","((int & any) | {any, int})"); }
		@Test public void test_2440() { testInvalid("!(any & any)","(!any | {int, int})"); }
		@Test public void test_2441() { testInvalid("!(any & any)","(!int | {int, int})"); }
		@Test public void test_2442() { testInvalid("!(any & any)","({any, any} | {int, int})"); }
		@Test public void test_2443() { testInvalid("!(any & any)","({any, int} | {int, int})"); }
		@Test public void test_2444() { testInvalid("!(any & any)","((any | any) | {int, int})"); }
		@Test public void test_2445() { testInvalid("!(any & any)","((int | int) | {int, int})"); }
		@Test public void test_2446() { testInvalid("!(any & any)","((int & any) | {int, int})"); }
		@Test public void test_2447() { testInvalid("!(any & any)","((any & int) | {int, int})"); }
		@Test public void test_2448() { testInvalid("!(any & any)","((int & int) | {int, int})"); }
		@Test public void test_2449() { testInvalid("!(any & any)","({any} | (any | any))"); }
		@Test public void test_2450() { testInvalid("!(any & any)","(!any | (any | any))"); }
		@Test public void test_2451() { testInvalid("!(any & any)","({any, any} | (any | any))"); }
		@Test public void test_2452() { testInvalid("!(any & any)","({any, int} | (any | any))"); }
		@Test public void test_2453() { testInvalid("!(any & any)","({int, int} | (any | any))"); }
		@Test public void test_2454() { testInvalid("!(any & any)","((int | any) | (any | any))"); }
		@Test public void test_2455() { testInvalid("!(any & any)","((any | int) | (any | any))"); }
		@Test public void test_2456() { testInvalid("!(any & any)","((any & int) | (any | any))"); }
		@Test public void test_2457() { testInvalid("!(any & any)","((int & int) | (any | any))"); }
		@Test public void test_2458() { testInvalid("!(any & any)","({any} | (int | any))"); }
		@Test public void test_2459() { testInvalid("!(any & any)","(!int | (int | any))"); }
		@Test public void test_2460() { testInvalid("!(any & any)","({int, any} | (int | any))"); }
		@Test public void test_2461() { testInvalid("!(any & any)","({any, int} | (int | any))"); }
		@Test public void test_2462() { testInvalid("!(any & any)","((int & any) | (int | any))"); }
		@Test public void test_2463() { testInvalid("!(any & any)","((any & int) | (int | any))"); }
		@Test public void test_2464() { testInvalid("!(any & any)","({any} | (any | int))"); }
		@Test public void test_2465() { testInvalid("!(any & any)","({int} | (any | int))"); }
		@Test public void test_2466() { testInvalid("!(any & any)","(!any | (any | int))"); }
		@Test public void test_2467() { testInvalid("!(any & any)","(!int | (any | int))"); }
		@Test public void test_2468() { testInvalid("!(any & any)","({any, int} | (any | int))"); }
		@Test public void test_2469() { testInvalid("!(any & any)","({int, int} | (any | int))"); }
		@Test public void test_2470() { testInvalid("!(any & any)","((int | any) | (any | int))"); }
		@Test public void test_2471() { testInvalid("!(any & any)","((any | int) | (any | int))"); }
		@Test public void test_2472() { testInvalid("!(any & any)","((int | int) | (any | int))"); }
		@Test public void test_2473() { testInvalid("!(any & any)","((any & any) | (any | int))"); }
		@Test public void test_2474() { testInvalid("!(any & any)","({int} | (int | int))"); }
		@Test public void test_2475() { testInvalid("!(any & any)","(!any | (int | int))"); }
		@Test public void test_2476() { testInvalid("!(any & any)","(!int | (int | int))"); }
		@Test public void test_2477() { testInvalid("!(any & any)","({int, any} | (int | int))"); }
		@Test public void test_2478() { testInvalid("!(any & any)","({any, int} | (int | int))"); }
		@Test public void test_2479() { testInvalid("!(any & any)","((any | int) | (int | int))"); }
		@Test public void test_2480() { testInvalid("!(any & any)","((int | int) | (int | int))"); }
		@Test public void test_2481() { testInvalid("!(any & any)","((any & any) | (int | int))"); }
		@Test public void test_2482() { testInvalid("!(any & any)","((int & any) | (int | int))"); }
		@Test public void test_2483() { testInvalid("!(any & any)","((int & int) | (int | int))"); }
		@Test public void test_2484() { testInvalid("!(any & any)","(!any | (any & any))"); }
		@Test public void test_2485() { testInvalid("!(any & any)","(!int | (any & any))"); }
		@Test public void test_2486() { testInvalid("!(any & any)","({any, any} | (any & any))"); }
		@Test public void test_2487() { testInvalid("!(any & any)","({int, any} | (any & any))"); }
		@Test public void test_2488() { testInvalid("!(any & any)","({any, int} | (any & any))"); }
		@Test public void test_2489() { testInvalid("!(any & any)","({int, int} | (any & any))"); }
		@Test public void test_2490() { testInvalid("!(any & any)","((int | any) | (any & any))"); }
		@Test public void test_2491() { testInvalid("!(any & any)","((int | int) | (any & any))"); }
		@Test public void test_2492() { testInvalid("!(any & any)","((int & any) | (any & any))"); }
		@Test public void test_2493() { testInvalid("!(any & any)","((any & int) | (any & any))"); }
		@Test public void test_2494() { testInvalid("!(any & any)","((int & int) | (any & any))"); }
		@Test public void test_2495() { testInvalid("!(any & any)","({any} | (int & any))"); }
		@Test public void test_2496() { testValid("!(int & int)","{int}"); }
		@Test public void test_2497() { testValid("!(int & int)","{any, any}"); }
		@Test public void test_2498() { testValid("!(int & int)","{int, int}"); }
		@Test public void test_2499() { testInvalid("!(int & int)","(any | int)"); }
		@Test public void test_2500() { testInvalid("!(int & int)","(int & any)"); }
		@Test public void test_2501() { testValid("!(int & int)","{{any}}"); }
		@Test public void test_2502() { testValid("!(int & int)","{{int, any}}"); }
		@Test public void test_2503() { testValid("!(int & int)","{{int, int}}"); }
		@Test public void test_2504() { testValid("!(int & int)","{(any | int)}"); }
		@Test public void test_2505() { testInvalid("!(int & int)","!{int, any}"); }
		@Test public void test_2506() { testInvalid("!(int & int)","!{int, int}"); }
		@Test public void test_2507() { testValid("!(int & int)","!(any | any)"); }
		@Test public void test_2508() { testValid("!(int & int)","!(any & any)"); }
		@Test public void test_2509() { testValid("!(int & int)","!(int & int)"); }
		@Test public void test_2510() { testValid("!(int & int)","{{int}, {any}}"); }
		@Test public void test_2511() { testValid("!(int & int)","{!int, {any}}"); }
		@Test public void test_2512() { testValid("!(int & int)","{{int, int}, {any}}"); }
		@Test public void test_2513() { testValid("!(int & int)","{(any | int), {any}}"); }
		@Test public void test_2514() { testValid("!(int & int)","{!int, {int}}"); }
		@Test public void test_2515() { testValid("!(int & int)","{{any, any}, {int}}"); }
		@Test public void test_2516() { testValid("!(int & int)","{(any | any), {int}}"); }
		@Test public void test_2517() { testValid("!(int & int)","{(any & any), {int}}"); }
		@Test public void test_2518() { testValid("!(int & int)","{(any & int), {int}}"); }
		@Test public void test_2519() { testValid("!(int & int)","{{any, any}, !int}"); }
		@Test public void test_2520() { testValid("!(int & int)","{{any, int}, !int}"); }
		@Test public void test_2521() { testValid("!(int & int)","{(any | any), !int}"); }
		@Test public void test_2522() { testValid("!(int & int)","{(int | any), !int}"); }
		@Test public void test_2523() { testValid("!(int & int)","{(any & any), !int}"); }
		@Test public void test_2524() { testValid("!(int & int)","{(int & any), !int}"); }
		@Test public void test_2525() { testValid("!(int & int)","{(int & int), !int}"); }
		@Test public void test_2526() { testValid("!(int & int)","{{any}, {any, any}}"); }
		@Test public void test_2527() { testValid("!(int & int)","{{int}, {any, any}}"); }
		@Test public void test_2528() { testValid("!(int & int)","{{int, int}, {any, any}}"); }
		@Test public void test_2529() { testValid("!(int & int)","{(any | any), {any, any}}"); }
		@Test public void test_2530() { testValid("!(int & int)","{(any | int), {any, any}}"); }
		@Test public void test_2531() { testValid("!(int & int)","{!int, {int, any}}"); }
		@Test public void test_2532() { testValid("!(int & int)","{{int, any}, {int, any}}"); }
		@Test public void test_2533() { testValid("!(int & int)","{{any, int}, {int, any}}"); }
		@Test public void test_2534() { testValid("!(int & int)","{(any & int), {int, any}}"); }
		@Test public void test_2535() { testValid("!(int & int)","{{any}, {any, int}}"); }
		@Test public void test_2536() { testValid("!(int & int)","{{int, int}, {any, int}}"); }
		@Test public void test_2537() { testValid("!(int & int)","{(int | int), {any, int}}"); }
		@Test public void test_2538() { testValid("!(int & int)","{(any & int), {any, int}}"); }
		@Test public void test_2539() { testValid("!(int & int)","{!int, {int, int}}"); }
		@Test public void test_2540() { testValid("!(int & int)","{{int, int}, {int, int}}"); }
		@Test public void test_2541() { testValid("!(int & int)","{(any | any), {int, int}}"); }
		@Test public void test_2542() { testValid("!(int & int)","{(int | any), {int, int}}"); }
		@Test public void test_2543() { testValid("!(int & int)","{(int & any), {int, int}}"); }
		@Test public void test_2544() { testValid("!(int & int)","{{int}, (any | any)}"); }
		@Test public void test_2545() { testValid("!(int & int)","{{int, any}, (any | any)}"); }
		@Test public void test_2546() { testValid("!(int & int)","{{any, int}, (any | any)}"); }
		@Test public void test_2547() { testValid("!(int & int)","{(any | any), (any | any)}"); }
		@Test public void test_2548() { testValid("!(int & int)","{(int | any), (any | any)}"); }
		@Test public void test_2549() { testValid("!(int & int)","{(int & int), (any | any)}"); }
		@Test public void test_2550() { testValid("!(int & int)","{!int, (int | any)}"); }
		@Test public void test_2551() { testValid("!(int & int)","{{int, int}, (int | any)}"); }
		@Test public void test_2552() { testValid("!(int & int)","{(any | any), (int | any)}"); }
		@Test public void test_2553() { testValid("!(int & int)","{(int | int), (int | any)}"); }
		@Test public void test_2554() { testValid("!(int & int)","{{any}, (any | int)}"); }
		@Test public void test_2555() { testValid("!(int & int)","{!int, (any | int)}"); }
		@Test public void test_2556() { testValid("!(int & int)","{(any | any), (any | int)}"); }
		@Test public void test_2557() { testValid("!(int & int)","{(any | int), (any | int)}"); }
		@Test public void test_2558() { testValid("!(int & int)","{(any & int), (any | int)}"); }
		@Test public void test_2559() { testValid("!(int & int)","{{int}, (int | int)}"); }
		@Test public void test_2560() { testValid("!(int & int)","{{any, any}, (int | int)}"); }
		@Test public void test_2561() { testValid("!(int & int)","{{int, int}, (int | int)}"); }
		@Test public void test_2562() { testValid("!(int & int)","{{int}, (any & any)}"); }
		@Test public void test_2563() { testValid("!(int & int)","{{int, any}, (any & any)}"); }
		@Test public void test_2564() { testValid("!(int & int)","{{any, int}, (any & any)}"); }
		@Test public void test_2565() { testValid("!(int & int)","{(int | any), (any & any)}"); }
		@Test public void test_2566() { testValid("!(int & int)","{(any & any), (any & any)}"); }
		@Test public void test_2567() { testValid("!(int & int)","{(int & any), (any & any)}"); }
		@Test public void test_2568() { testValid("!(int & int)","{{any}, (int & any)}"); }
		@Test public void test_2569() { testValid("!(int & int)","{{int}, (int & any)}"); }
		@Test public void test_2570() { testValid("!(int & int)","{{any, any}, (int & any)}"); }
		@Test public void test_2571() { testValid("!(int & int)","{{int, any}, (int & any)}"); }
		@Test public void test_2572() { testValid("!(int & int)","{(any | int), (int & any)}"); }
		@Test public void test_2573() { testValid("!(int & int)","{(any & any), (int & any)}"); }
		@Test public void test_2574() { testValid("!(int & int)","{(int & any), (int & any)}"); }
		@Test public void test_2575() { testValid("!(int & int)","{(int & int), (int & any)}"); }
		@Test public void test_2576() { testValid("!(int & int)","{{int, any}, (any & int)}"); }
		@Test public void test_2577() { testValid("!(int & int)","{(any & any), (any & int)}"); }
		@Test public void test_2578() { testValid("!(int & int)","{{any, int}, (int & int)}"); }
		@Test public void test_2579() { testValid("!(int & int)","{(int | int), (int & int)}"); }
		@Test public void test_2580() { testValid("!(int & int)","{(any & any), (int & int)}"); }
		@Test public void test_2581() { testValid("!(int & int)","{(any & int), (int & int)}"); }
		@Test public void test_2582() { testValid("!(int & int)","{(int & int), (int & int)}"); }
		@Test public void test_2583() { testValid("!(int & int)","(!int | {any})"); }
		@Test public void test_2584() { testValid("!(int & int)","({any, any} | {any})"); }
		@Test public void test_2585() { testInvalid("!(int & int)","((any | any) | {any})"); }
		@Test public void test_2586() { testInvalid("!(int & int)","((int | any) | {any})"); }
		@Test public void test_2587() { testInvalid("!(int & int)","((any & any) | {any})"); }
		@Test public void test_2588() { testInvalid("!(int & int)","((int & any) | {any})"); }
		@Test public void test_2589() { testInvalid("!(int & int)","((any & int) | {any})"); }
		@Test public void test_2590() { testValid("!(int & int)","({int} | {int})"); }
		@Test public void test_2591() { testValid("!(int & int)","(!any | {int})"); }
		@Test public void test_2592() { testValid("!(int & int)","(!int | {int})"); }
		@Test public void test_2593() { testValid("!(int & int)","({any, int} | {int})"); }
		@Test public void test_2594() { testInvalid("!(int & int)","((int & any) | {int})"); }
		@Test public void test_2595() { testInvalid("!(int & int)","((any & int) | {int})"); }
		@Test public void test_2596() { testInvalid("!(int & int)","((int & int) | {int})"); }
		@Test public void test_2597() { testValid("!(int & int)","({any} | !any)"); }
		@Test public void test_2598() { testValid("!(int & int)","({int} | !any)"); }
		@Test public void test_2599() { testValid("!(int & int)","({any, any} | !any)"); }
		@Test public void test_2600() { testValid("!(int & int)","({int, int} | !any)"); }
		@Test public void test_2601() { testInvalid("!(int & int)","((any | any) | !any)"); }
		@Test public void test_2602() { testInvalid("!(int & int)","((int | any) | !any)"); }
		@Test public void test_2603() { testInvalid("!(int & int)","((int | int) | !any)"); }
		@Test public void test_2604() { testInvalid("!(int & int)","((int & int) | !any)"); }
		@Test public void test_2605() { testValid("!(int & int)","(!int | !int)"); }
		@Test public void test_2606() { testValid("!(int & int)","({any, any} | !int)"); }
		@Test public void test_2607() { testValid("!(int & int)","({int, int} | !int)"); }
		@Test public void test_2608() { testInvalid("!(int & int)","((int | any) | !int)"); }
		@Test public void test_2609() { testInvalid("!(int & int)","((any | int) | !int)"); }
		@Test public void test_2610() { testInvalid("!(int & int)","((any & int) | !int)"); }
		@Test public void test_2611() { testInvalid("!(int & int)","((int & int) | !int)"); }
		@Test public void test_2612() { testValid("!(int & int)","({int} | {any, any})"); }
		@Test public void test_2613() { testValid("!(int & int)","(!any | {any, any})"); }
		@Test public void test_2614() { testValid("!(int & int)","(!int | {any, any})"); }
		@Test public void test_2615() { testValid("!(int & int)","({any, int} | {any, any})"); }
		@Test public void test_2616() { testInvalid("!(int & int)","((int | any) | {any, any})"); }
		@Test public void test_2617() { testInvalid("!(int & int)","((any & any) | {any, any})"); }
		@Test public void test_2618() { testInvalid("!(int & int)","((any & int) | {any, any})"); }
		@Test public void test_2619() { testValid("!(int & int)","(!int | {int, any})"); }
		@Test public void test_2620() { testValid("!(int & int)","({any, int} | {int, any})"); }
		@Test public void test_2621() { testInvalid("!(int & int)","((any | any) | {int, any})"); }
		@Test public void test_2622() { testInvalid("!(int & int)","((int | any) | {int, any})"); }
		@Test public void test_2623() { testInvalid("!(int & int)","((any | int) | {int, any})"); }
		@Test public void test_2624() { testInvalid("!(int & int)","((int & any) | {int, any})"); }
		@Test public void test_2625() { testValid("!(int & int)","({any} | {any, int})"); }
		@Test public void test_2626() { testValid("!(int & int)","(!int | {any, int})"); }
		@Test public void test_2627() { testValid("!(int & int)","({any, int} | {any, int})"); }
		@Test public void test_2628() { testInvalid("!(int & int)","((any | any) | {any, int})"); }
		@Test public void test_2629() { testInvalid("!(int & int)","((any | int) | {any, int})"); }
		@Test public void test_2630() { testInvalid("!(int & int)","((int | int) | {any, int})"); }
		@Test public void test_2631() { testInvalid("!(int & int)","((int & any) | {any, int})"); }
		@Test public void test_2632() { testValid("!(int & int)","(!any | {int, int})"); }
		@Test public void test_2633() { testValid("!(int & int)","(!int | {int, int})"); }
		@Test public void test_2634() { testValid("!(int & int)","({any, any} | {int, int})"); }
		@Test public void test_2635() { testValid("!(int & int)","({any, int} | {int, int})"); }
		@Test public void test_2636() { testInvalid("!(int & int)","((any | any) | {int, int})"); }
		@Test public void test_2637() { testInvalid("!(int & int)","((int | int) | {int, int})"); }
		@Test public void test_2638() { testInvalid("!(int & int)","((int & any) | {int, int})"); }
		@Test public void test_2639() { testInvalid("!(int & int)","((any & int) | {int, int})"); }
		@Test public void test_2640() { testInvalid("!(int & int)","((int & int) | {int, int})"); }
		@Test public void test_2641() { testInvalid("!(int & int)","({any} | (any | any))"); }
		@Test public void test_2642() { testInvalid("!(int & int)","(!any | (any | any))"); }
		@Test public void test_2643() { testInvalid("!(int & int)","({any, any} | (any | any))"); }
		@Test public void test_2644() { testInvalid("!(int & int)","({any, int} | (any | any))"); }
		@Test public void test_2645() { testInvalid("!(int & int)","({int, int} | (any | any))"); }
		@Test public void test_2646() { testInvalid("!(int & int)","((int | any) | (any | any))"); }
		@Test public void test_2647() { testInvalid("!(int & int)","((any | int) | (any | any))"); }
		@Test public void test_2648() { testInvalid("!(int & int)","((any & int) | (any | any))"); }
		@Test public void test_2649() { testInvalid("!(int & int)","((int & int) | (any | any))"); }
		@Test public void test_2650() { testInvalid("!(int & int)","({any} | (int | any))"); }
		@Test public void test_2651() { testInvalid("!(int & int)","(!int | (int | any))"); }
		@Test public void test_2652() { testInvalid("!(int & int)","({int, any} | (int | any))"); }
		@Test public void test_2653() { testInvalid("!(int & int)","({any, int} | (int | any))"); }
		@Test public void test_2654() { testInvalid("!(int & int)","((int & any) | (int | any))"); }
		@Test public void test_2655() { testInvalid("!(int & int)","((any & int) | (int | any))"); }
		@Test public void test_2656() { testInvalid("!(int & int)","({any} | (any | int))"); }
		@Test public void test_2657() { testInvalid("!(int & int)","({int} | (any | int))"); }
		@Test public void test_2658() { testInvalid("!(int & int)","(!any | (any | int))"); }
		@Test public void test_2659() { testInvalid("!(int & int)","(!int | (any | int))"); }
		@Test public void test_2660() { testInvalid("!(int & int)","({any, int} | (any | int))"); }
		@Test public void test_2661() { testInvalid("!(int & int)","({int, int} | (any | int))"); }
		@Test public void test_2662() { testInvalid("!(int & int)","((int | any) | (any | int))"); }
		@Test public void test_2663() { testInvalid("!(int & int)","((any | int) | (any | int))"); }
		@Test public void test_2664() { testInvalid("!(int & int)","((int | int) | (any | int))"); }
		@Test public void test_2665() { testInvalid("!(int & int)","((any & any) | (any | int))"); }
		@Test public void test_2666() { testInvalid("!(int & int)","({int} | (int | int))"); }
		@Test public void test_2667() { testInvalid("!(int & int)","(!any | (int | int))"); }
		@Test public void test_2668() { testInvalid("!(int & int)","(!int | (int | int))"); }
		@Test public void test_2669() { testInvalid("!(int & int)","({int, any} | (int | int))"); }
		@Test public void test_2670() { testInvalid("!(int & int)","({any, int} | (int | int))"); }
		@Test public void test_2671() { testInvalid("!(int & int)","((any | int) | (int | int))"); }
		@Test public void test_2672() { testInvalid("!(int & int)","((int | int) | (int | int))"); }
		@Test public void test_2673() { testInvalid("!(int & int)","((any & any) | (int | int))"); }
		@Test public void test_2674() { testInvalid("!(int & int)","((int & any) | (int | int))"); }
		@Test public void test_2675() { testInvalid("!(int & int)","((int & int) | (int | int))"); }
		@Test public void test_2676() { testInvalid("!(int & int)","(!any | (any & any))"); }
		@Test public void test_2677() { testInvalid("!(int & int)","(!int | (any & any))"); }
		@Test public void test_2678() { testInvalid("!(int & int)","({any, any} | (any & any))"); }
		@Test public void test_2679() { testInvalid("!(int & int)","({int, any} | (any & any))"); }
		@Test public void test_2680() { testInvalid("!(int & int)","({any, int} | (any & any))"); }
		@Test public void test_2681() { testInvalid("!(int & int)","({int, int} | (any & any))"); }
		@Test public void test_2682() { testInvalid("!(int & int)","((int | any) | (any & any))"); }
		@Test public void test_2683() { testInvalid("!(int & int)","((int | int) | (any & any))"); }
		@Test public void test_2684() { testInvalid("!(int & int)","((int & any) | (any & any))"); }
		@Test public void test_2685() { testInvalid("!(int & int)","((any & int) | (any & any))"); }
		@Test public void test_2686() { testInvalid("!(int & int)","((int & int) | (any & any))"); }
		@Test public void test_2687() { testInvalid("!(int & int)","({any} | (int & any))"); }
		@Test public void test_2688() { testInvalid("{{int}, {any}}","{int}"); }
		@Test public void test_2689() { testInvalid("{{int}, {any}}","{any, any}"); }
		@Test public void test_2690() { testInvalid("{{int}, {any}}","{int, int}"); }
		@Test public void test_2691() { testInvalid("{{int}, {any}}","(any | int)"); }
		@Test public void test_2692() { testInvalid("{{int}, {any}}","(int & any)"); }
		@Test public void test_2693() { testInvalid("{{int}, {any}}","{{any}}"); }
		@Test public void test_2694() { testInvalid("{{int}, {any}}","{{int, any}}"); }
		@Test public void test_2695() { testInvalid("{{int}, {any}}","{{int, int}}"); }
		@Test public void test_2696() { testInvalid("{{int}, {any}}","{(any | int)}"); }
		@Test public void test_2697() { testInvalid("{{int}, {any}}","!{int, any}"); }
		@Test public void test_2698() { testInvalid("{{int}, {any}}","!{int, int}"); }
		@Test public void test_2699() { testValid("{{int}, {any}}","!(any | any)"); }
		@Test public void test_2700() { testValid("{{int}, {any}}","!(any & any)"); }
		@Test public void test_2701() { testInvalid("{{int}, {any}}","!(int & int)"); }
		@Test public void test_2702() { testValid("{{int}, {any}}","{{int}, {any}}"); }
		@Test public void test_2703() { testInvalid("{{int}, {any}}","{!int, {any}}"); }
		@Test public void test_2704() { testInvalid("{{int}, {any}}","{{int, int}, {any}}"); }
		@Test public void test_2705() { testInvalid("{{int}, {any}}","{(any | int), {any}}"); }
		@Test public void test_2706() { testInvalid("{{int}, {any}}","{!int, {int}}"); }
		@Test public void test_2707() { testInvalid("{{int}, {any}}","{{any, any}, {int}}"); }
		@Test public void test_2708() { testInvalid("{{int}, {any}}","{(any | any), {int}}"); }
		@Test public void test_2709() { testInvalid("{{int}, {any}}","{(any & any), {int}}"); }
		@Test public void test_2710() { testInvalid("{{int}, {any}}","{(any & int), {int}}"); }
		@Test public void test_2711() { testInvalid("{{int}, {any}}","{{any, any}, !int}"); }
		@Test public void test_2712() { testInvalid("{{int}, {any}}","{{any, int}, !int}"); }
		@Test public void test_2713() { testInvalid("{{int}, {any}}","{(any | any), !int}"); }
		@Test public void test_2714() { testInvalid("{{int}, {any}}","{(int | any), !int}"); }
		@Test public void test_2715() { testInvalid("{{int}, {any}}","{(any & any), !int}"); }
		@Test public void test_2716() { testInvalid("{{int}, {any}}","{(int & any), !int}"); }
		@Test public void test_2717() { testInvalid("{{int}, {any}}","{(int & int), !int}"); }
		@Test public void test_2718() { testInvalid("{{int}, {any}}","{{any}, {any, any}}"); }
		@Test public void test_2719() { testInvalid("{{int}, {any}}","{{int}, {any, any}}"); }
		@Test public void test_2720() { testInvalid("{{int}, {any}}","{{int, int}, {any, any}}"); }
		@Test public void test_2721() { testInvalid("{{int}, {any}}","{(any | any), {any, any}}"); }
		@Test public void test_2722() { testInvalid("{{int}, {any}}","{(any | int), {any, any}}"); }
		@Test public void test_2723() { testInvalid("{{int}, {any}}","{!int, {int, any}}"); }
		@Test public void test_2724() { testInvalid("{{int}, {any}}","{{int, any}, {int, any}}"); }
		@Test public void test_2725() { testInvalid("{{int}, {any}}","{{any, int}, {int, any}}"); }
		@Test public void test_2726() { testInvalid("{{int}, {any}}","{(any & int), {int, any}}"); }
		@Test public void test_2727() { testInvalid("{{int}, {any}}","{{any}, {any, int}}"); }
		@Test public void test_2728() { testInvalid("{{int}, {any}}","{{int, int}, {any, int}}"); }
		@Test public void test_2729() { testInvalid("{{int}, {any}}","{(int | int), {any, int}}"); }
		@Test public void test_2730() { testInvalid("{{int}, {any}}","{(any & int), {any, int}}"); }
		@Test public void test_2731() { testInvalid("{{int}, {any}}","{!int, {int, int}}"); }
		@Test public void test_2732() { testInvalid("{{int}, {any}}","{{int, int}, {int, int}}"); }
		@Test public void test_2733() { testInvalid("{{int}, {any}}","{(any | any), {int, int}}"); }
		@Test public void test_2734() { testInvalid("{{int}, {any}}","{(int | any), {int, int}}"); }
		@Test public void test_2735() { testInvalid("{{int}, {any}}","{(int & any), {int, int}}"); }
		@Test public void test_2736() { testInvalid("{{int}, {any}}","{{int}, (any | any)}"); }
		@Test public void test_2737() { testInvalid("{{int}, {any}}","{{int, any}, (any | any)}"); }
		@Test public void test_2738() { testInvalid("{{int}, {any}}","{{any, int}, (any | any)}"); }
		@Test public void test_2739() { testInvalid("{{int}, {any}}","{(any | any), (any | any)}"); }
		@Test public void test_2740() { testInvalid("{{int}, {any}}","{(int | any), (any | any)}"); }
		@Test public void test_2741() { testInvalid("{{int}, {any}}","{(int & int), (any | any)}"); }
		@Test public void test_2742() { testInvalid("{{int}, {any}}","{!int, (int | any)}"); }
		@Test public void test_2743() { testInvalid("{{int}, {any}}","{{int, int}, (int | any)}"); }
		@Test public void test_2744() { testInvalid("{{int}, {any}}","{(any | any), (int | any)}"); }
		@Test public void test_2745() { testInvalid("{{int}, {any}}","{(int | int), (int | any)}"); }
		@Test public void test_2746() { testInvalid("{{int}, {any}}","{{any}, (any | int)}"); }
		@Test public void test_2747() { testInvalid("{{int}, {any}}","{!int, (any | int)}"); }
		@Test public void test_2748() { testInvalid("{{int}, {any}}","{(any | any), (any | int)}"); }
		@Test public void test_2749() { testInvalid("{{int}, {any}}","{(any | int), (any | int)}"); }
		@Test public void test_2750() { testInvalid("{{int}, {any}}","{(any & int), (any | int)}"); }
		@Test public void test_2751() { testInvalid("{{int}, {any}}","{{int}, (int | int)}"); }
		@Test public void test_2752() { testInvalid("{{int}, {any}}","{{any, any}, (int | int)}"); }
		@Test public void test_2753() { testInvalid("{{int}, {any}}","{{int, int}, (int | int)}"); }
		@Test public void test_2754() { testInvalid("{{int}, {any}}","{{int}, (any & any)}"); }
		@Test public void test_2755() { testInvalid("{{int}, {any}}","{{int, any}, (any & any)}"); }
		@Test public void test_2756() { testInvalid("{{int}, {any}}","{{any, int}, (any & any)}"); }
		@Test public void test_2757() { testInvalid("{{int}, {any}}","{(int | any), (any & any)}"); }
		@Test public void test_2758() { testInvalid("{{int}, {any}}","{(any & any), (any & any)}"); }
		@Test public void test_2759() { testInvalid("{{int}, {any}}","{(int & any), (any & any)}"); }
		@Test public void test_2760() { testInvalid("{{int}, {any}}","{{any}, (int & any)}"); }
		@Test public void test_2761() { testInvalid("{{int}, {any}}","{{int}, (int & any)}"); }
		@Test public void test_2762() { testInvalid("{{int}, {any}}","{{any, any}, (int & any)}"); }
		@Test public void test_2763() { testInvalid("{{int}, {any}}","{{int, any}, (int & any)}"); }
		@Test public void test_2764() { testInvalid("{{int}, {any}}","{(any | int), (int & any)}"); }
		@Test public void test_2765() { testInvalid("{{int}, {any}}","{(any & any), (int & any)}"); }
		@Test public void test_2766() { testInvalid("{{int}, {any}}","{(int & any), (int & any)}"); }
		@Test public void test_2767() { testInvalid("{{int}, {any}}","{(int & int), (int & any)}"); }
		@Test public void test_2768() { testInvalid("{{int}, {any}}","{{int, any}, (any & int)}"); }
		@Test public void test_2769() { testInvalid("{{int}, {any}}","{(any & any), (any & int)}"); }
		@Test public void test_2770() { testInvalid("{{int}, {any}}","{{any, int}, (int & int)}"); }
		@Test public void test_2771() { testInvalid("{{int}, {any}}","{(int | int), (int & int)}"); }
		@Test public void test_2772() { testInvalid("{{int}, {any}}","{(any & any), (int & int)}"); }
		@Test public void test_2773() { testInvalid("{{int}, {any}}","{(any & int), (int & int)}"); }
		@Test public void test_2774() { testInvalid("{{int}, {any}}","{(int & int), (int & int)}"); }
		@Test public void test_2775() { testInvalid("{{int}, {any}}","(!int | {any})"); }
		@Test public void test_2776() { testInvalid("{{int}, {any}}","({any, any} | {any})"); }
		@Test public void test_2777() { testInvalid("{{int}, {any}}","((any | any) | {any})"); }
		@Test public void test_2778() { testInvalid("{{int}, {any}}","((int | any) | {any})"); }
		@Test public void test_2779() { testInvalid("{{int}, {any}}","((any & any) | {any})"); }
		@Test public void test_2780() { testInvalid("{{int}, {any}}","((int & any) | {any})"); }
		@Test public void test_2781() { testInvalid("{{int}, {any}}","((any & int) | {any})"); }
		@Test public void test_2782() { testInvalid("{{int}, {any}}","({int} | {int})"); }
		@Test public void test_2783() { testInvalid("{{int}, {any}}","(!any | {int})"); }
		@Test public void test_2784() { testInvalid("{{int}, {any}}","(!int | {int})"); }
		@Test public void test_2785() { testInvalid("{{int}, {any}}","({any, int} | {int})"); }
		@Test public void test_2786() { testInvalid("{{int}, {any}}","((int & any) | {int})"); }
		@Test public void test_2787() { testInvalid("{{int}, {any}}","((any & int) | {int})"); }
		@Test public void test_2788() { testInvalid("{{int}, {any}}","((int & int) | {int})"); }
		@Test public void test_2789() { testInvalid("{{int}, {any}}","({any} | !any)"); }
		@Test public void test_2790() { testInvalid("{{int}, {any}}","({int} | !any)"); }
		@Test public void test_2791() { testInvalid("{{int}, {any}}","({any, any} | !any)"); }
		@Test public void test_2792() { testInvalid("{{int}, {any}}","({int, int} | !any)"); }
		@Test public void test_2793() { testInvalid("{{int}, {any}}","((any | any) | !any)"); }
		@Test public void test_2794() { testInvalid("{{int}, {any}}","((int | any) | !any)"); }
		@Test public void test_2795() { testInvalid("{{int}, {any}}","((int | int) | !any)"); }
		@Test public void test_2796() { testInvalid("{{int}, {any}}","((int & int) | !any)"); }
		@Test public void test_2797() { testInvalid("{{int}, {any}}","(!int | !int)"); }
		@Test public void test_2798() { testInvalid("{{int}, {any}}","({any, any} | !int)"); }
		@Test public void test_2799() { testInvalid("{{int}, {any}}","({int, int} | !int)"); }
		@Test public void test_2800() { testInvalid("{{int}, {any}}","((int | any) | !int)"); }
		@Test public void test_2801() { testInvalid("{{int}, {any}}","((any | int) | !int)"); }
		@Test public void test_2802() { testInvalid("{{int}, {any}}","((any & int) | !int)"); }
		@Test public void test_2803() { testInvalid("{{int}, {any}}","((int & int) | !int)"); }
		@Test public void test_2804() { testInvalid("{{int}, {any}}","({int} | {any, any})"); }
		@Test public void test_2805() { testInvalid("{{int}, {any}}","(!any | {any, any})"); }
		@Test public void test_2806() { testInvalid("{{int}, {any}}","(!int | {any, any})"); }
		@Test public void test_2807() { testInvalid("{{int}, {any}}","({any, int} | {any, any})"); }
		@Test public void test_2808() { testInvalid("{{int}, {any}}","((int | any) | {any, any})"); }
		@Test public void test_2809() { testInvalid("{{int}, {any}}","((any & any) | {any, any})"); }
		@Test public void test_2810() { testInvalid("{{int}, {any}}","((any & int) | {any, any})"); }
		@Test public void test_2811() { testInvalid("{{int}, {any}}","(!int | {int, any})"); }
		@Test public void test_2812() { testInvalid("{{int}, {any}}","({any, int} | {int, any})"); }
		@Test public void test_2813() { testInvalid("{{int}, {any}}","((any | any) | {int, any})"); }
		@Test public void test_2814() { testInvalid("{{int}, {any}}","((int | any) | {int, any})"); }
		@Test public void test_2815() { testInvalid("{{int}, {any}}","((any | int) | {int, any})"); }
		@Test public void test_2816() { testInvalid("{{int}, {any}}","((int & any) | {int, any})"); }
		@Test public void test_2817() { testInvalid("{{int}, {any}}","({any} | {any, int})"); }
		@Test public void test_2818() { testInvalid("{{int}, {any}}","(!int | {any, int})"); }
		@Test public void test_2819() { testInvalid("{{int}, {any}}","({any, int} | {any, int})"); }
		@Test public void test_2820() { testInvalid("{{int}, {any}}","((any | any) | {any, int})"); }
		@Test public void test_2821() { testInvalid("{{int}, {any}}","((any | int) | {any, int})"); }
		@Test public void test_2822() { testInvalid("{{int}, {any}}","((int | int) | {any, int})"); }
		@Test public void test_2823() { testInvalid("{{int}, {any}}","((int & any) | {any, int})"); }
		@Test public void test_2824() { testInvalid("{{int}, {any}}","(!any | {int, int})"); }
		@Test public void test_2825() { testInvalid("{{int}, {any}}","(!int | {int, int})"); }
		@Test public void test_2826() { testInvalid("{{int}, {any}}","({any, any} | {int, int})"); }
		@Test public void test_2827() { testInvalid("{{int}, {any}}","({any, int} | {int, int})"); }
		@Test public void test_2828() { testInvalid("{{int}, {any}}","((any | any) | {int, int})"); }
		@Test public void test_2829() { testInvalid("{{int}, {any}}","((int | int) | {int, int})"); }
		@Test public void test_2830() { testInvalid("{{int}, {any}}","((int & any) | {int, int})"); }
		@Test public void test_2831() { testInvalid("{{int}, {any}}","((any & int) | {int, int})"); }
		@Test public void test_2832() { testInvalid("{{int}, {any}}","((int & int) | {int, int})"); }
		@Test public void test_2833() { testInvalid("{{int}, {any}}","({any} | (any | any))"); }
		@Test public void test_2834() { testInvalid("{{int}, {any}}","(!any | (any | any))"); }
		@Test public void test_2835() { testInvalid("{{int}, {any}}","({any, any} | (any | any))"); }
		@Test public void test_2836() { testInvalid("{{int}, {any}}","({any, int} | (any | any))"); }
		@Test public void test_2837() { testInvalid("{{int}, {any}}","({int, int} | (any | any))"); }
		@Test public void test_2838() { testInvalid("{{int}, {any}}","((int | any) | (any | any))"); }
		@Test public void test_2839() { testInvalid("{{int}, {any}}","((any | int) | (any | any))"); }
		@Test public void test_2840() { testInvalid("{{int}, {any}}","((any & int) | (any | any))"); }
		@Test public void test_2841() { testInvalid("{{int}, {any}}","((int & int) | (any | any))"); }
		@Test public void test_2842() { testInvalid("{{int}, {any}}","({any} | (int | any))"); }
		@Test public void test_2843() { testInvalid("{{int}, {any}}","(!int | (int | any))"); }
		@Test public void test_2844() { testInvalid("{{int}, {any}}","({int, any} | (int | any))"); }
		@Test public void test_2845() { testInvalid("{{int}, {any}}","({any, int} | (int | any))"); }
		@Test public void test_2846() { testInvalid("{{int}, {any}}","((int & any) | (int | any))"); }
		@Test public void test_2847() { testInvalid("{{int}, {any}}","((any & int) | (int | any))"); }
		@Test public void test_2848() { testInvalid("{{int}, {any}}","({any} | (any | int))"); }
		@Test public void test_2849() { testInvalid("{{int}, {any}}","({int} | (any | int))"); }
		@Test public void test_2850() { testInvalid("{{int}, {any}}","(!any | (any | int))"); }
		@Test public void test_2851() { testInvalid("{{int}, {any}}","(!int | (any | int))"); }
		@Test public void test_2852() { testInvalid("{{int}, {any}}","({any, int} | (any | int))"); }
		@Test public void test_2853() { testInvalid("{{int}, {any}}","({int, int} | (any | int))"); }
		@Test public void test_2854() { testInvalid("{{int}, {any}}","((int | any) | (any | int))"); }
		@Test public void test_2855() { testInvalid("{{int}, {any}}","((any | int) | (any | int))"); }
		@Test public void test_2856() { testInvalid("{{int}, {any}}","((int | int) | (any | int))"); }
		@Test public void test_2857() { testInvalid("{{int}, {any}}","((any & any) | (any | int))"); }
		@Test public void test_2858() { testInvalid("{{int}, {any}}","({int} | (int | int))"); }
		@Test public void test_2859() { testInvalid("{{int}, {any}}","(!any | (int | int))"); }
		@Test public void test_2860() { testInvalid("{{int}, {any}}","(!int | (int | int))"); }
		@Test public void test_2861() { testInvalid("{{int}, {any}}","({int, any} | (int | int))"); }
		@Test public void test_2862() { testInvalid("{{int}, {any}}","({any, int} | (int | int))"); }
		@Test public void test_2863() { testInvalid("{{int}, {any}}","((any | int) | (int | int))"); }
		@Test public void test_2864() { testInvalid("{{int}, {any}}","((int | int) | (int | int))"); }
		@Test public void test_2865() { testInvalid("{{int}, {any}}","((any & any) | (int | int))"); }
		@Test public void test_2866() { testInvalid("{{int}, {any}}","((int & any) | (int | int))"); }
		@Test public void test_2867() { testInvalid("{{int}, {any}}","((int & int) | (int | int))"); }
		@Test public void test_2868() { testInvalid("{{int}, {any}}","(!any | (any & any))"); }
		@Test public void test_2869() { testInvalid("{{int}, {any}}","(!int | (any & any))"); }
		@Test public void test_2870() { testInvalid("{{int}, {any}}","({any, any} | (any & any))"); }
		@Test public void test_2871() { testInvalid("{{int}, {any}}","({int, any} | (any & any))"); }
		@Test public void test_2872() { testInvalid("{{int}, {any}}","({any, int} | (any & any))"); }
		@Test public void test_2873() { testInvalid("{{int}, {any}}","({int, int} | (any & any))"); }
		@Test public void test_2874() { testInvalid("{{int}, {any}}","((int | any) | (any & any))"); }
		@Test public void test_2875() { testInvalid("{{int}, {any}}","((int | int) | (any & any))"); }
		@Test public void test_2876() { testInvalid("{{int}, {any}}","((int & any) | (any & any))"); }
		@Test public void test_2877() { testInvalid("{{int}, {any}}","((any & int) | (any & any))"); }
		@Test public void test_2878() { testInvalid("{{int}, {any}}","((int & int) | (any & any))"); }
		@Test public void test_2879() { testInvalid("{{int}, {any}}","({any} | (int & any))"); }
		@Test public void test_2880() { testInvalid("{!int, {any}}","{int}"); }
		@Test public void test_2881() { testInvalid("{!int, {any}}","{any, any}"); }
		@Test public void test_2882() { testInvalid("{!int, {any}}","{int, int}"); }
		@Test public void test_2883() { testInvalid("{!int, {any}}","(any | int)"); }
		@Test public void test_2884() { testInvalid("{!int, {any}}","(int & any)"); }
		@Test public void test_2885() { testInvalid("{!int, {any}}","{{any}}"); }
		@Test public void test_2886() { testInvalid("{!int, {any}}","{{int, any}}"); }
		@Test public void test_2887() { testInvalid("{!int, {any}}","{{int, int}}"); }
		@Test public void test_2888() { testInvalid("{!int, {any}}","{(any | int)}"); }
		@Test public void test_2889() { testInvalid("{!int, {any}}","!{int, any}"); }
		@Test public void test_2890() { testInvalid("{!int, {any}}","!{int, int}"); }
		@Test public void test_2891() { testValid("{!int, {any}}","!(any | any)"); }
		@Test public void test_2892() { testValid("{!int, {any}}","!(any & any)"); }
		@Test public void test_2893() { testInvalid("{!int, {any}}","!(int & int)"); }
		@Test public void test_2894() { testValid("{!int, {any}}","{{int}, {any}}"); }
		@Test public void test_2895() { testValid("{!int, {any}}","{!int, {any}}"); }
		@Test public void test_2896() { testValid("{!int, {any}}","{{int, int}, {any}}"); }
		@Test public void test_2897() { testInvalid("{!int, {any}}","{(any | int), {any}}"); }
		@Test public void test_2898() { testValid("{!int, {any}}","{!int, {int}}"); }
		@Test public void test_2899() { testValid("{!int, {any}}","{{any, any}, {int}}"); }
		@Test public void test_2900() { testInvalid("{!int, {any}}","{(any | any), {int}}"); }
		@Test public void test_2901() { testInvalid("{!int, {any}}","{(any & any), {int}}"); }
		@Test public void test_2902() { testInvalid("{!int, {any}}","{(any & int), {int}}"); }
		@Test public void test_2903() { testInvalid("{!int, {any}}","{{any, any}, !int}"); }
		@Test public void test_2904() { testInvalid("{!int, {any}}","{{any, int}, !int}"); }
		@Test public void test_2905() { testInvalid("{!int, {any}}","{(any | any), !int}"); }
		@Test public void test_2906() { testInvalid("{!int, {any}}","{(int | any), !int}"); }
		@Test public void test_2907() { testInvalid("{!int, {any}}","{(any & any), !int}"); }
		@Test public void test_2908() { testInvalid("{!int, {any}}","{(int & any), !int}"); }
		@Test public void test_2909() { testInvalid("{!int, {any}}","{(int & int), !int}"); }
		@Test public void test_2910() { testInvalid("{!int, {any}}","{{any}, {any, any}}"); }
		@Test public void test_2911() { testInvalid("{!int, {any}}","{{int}, {any, any}}"); }
		@Test public void test_2912() { testInvalid("{!int, {any}}","{{int, int}, {any, any}}"); }
		@Test public void test_2913() { testInvalid("{!int, {any}}","{(any | any), {any, any}}"); }
		@Test public void test_2914() { testInvalid("{!int, {any}}","{(any | int), {any, any}}"); }
		@Test public void test_2915() { testInvalid("{!int, {any}}","{!int, {int, any}}"); }
		@Test public void test_2916() { testInvalid("{!int, {any}}","{{int, any}, {int, any}}"); }
		@Test public void test_2917() { testInvalid("{!int, {any}}","{{any, int}, {int, any}}"); }
		@Test public void test_2918() { testInvalid("{!int, {any}}","{(any & int), {int, any}}"); }
		@Test public void test_2919() { testInvalid("{!int, {any}}","{{any}, {any, int}}"); }
		@Test public void test_2920() { testInvalid("{!int, {any}}","{{int, int}, {any, int}}"); }
		@Test public void test_2921() { testInvalid("{!int, {any}}","{(int | int), {any, int}}"); }
		@Test public void test_2922() { testInvalid("{!int, {any}}","{(any & int), {any, int}}"); }
		@Test public void test_2923() { testInvalid("{!int, {any}}","{!int, {int, int}}"); }
		@Test public void test_2924() { testInvalid("{!int, {any}}","{{int, int}, {int, int}}"); }
		@Test public void test_2925() { testInvalid("{!int, {any}}","{(any | any), {int, int}}"); }
		@Test public void test_2926() { testInvalid("{!int, {any}}","{(int | any), {int, int}}"); }
		@Test public void test_2927() { testInvalid("{!int, {any}}","{(int & any), {int, int}}"); }
		@Test public void test_2928() { testInvalid("{!int, {any}}","{{int}, (any | any)}"); }
		@Test public void test_2929() { testInvalid("{!int, {any}}","{{int, any}, (any | any)}"); }
		@Test public void test_2930() { testInvalid("{!int, {any}}","{{any, int}, (any | any)}"); }
		@Test public void test_2931() { testInvalid("{!int, {any}}","{(any | any), (any | any)}"); }
		@Test public void test_2932() { testInvalid("{!int, {any}}","{(int | any), (any | any)}"); }
		@Test public void test_2933() { testInvalid("{!int, {any}}","{(int & int), (any | any)}"); }
		@Test public void test_2934() { testInvalid("{!int, {any}}","{!int, (int | any)}"); }
		@Test public void test_2935() { testInvalid("{!int, {any}}","{{int, int}, (int | any)}"); }
		@Test public void test_2936() { testInvalid("{!int, {any}}","{(any | any), (int | any)}"); }
		@Test public void test_2937() { testInvalid("{!int, {any}}","{(int | int), (int | any)}"); }
		@Test public void test_2938() { testInvalid("{!int, {any}}","{{any}, (any | int)}"); }
		@Test public void test_2939() { testInvalid("{!int, {any}}","{!int, (any | int)}"); }
		@Test public void test_2940() { testInvalid("{!int, {any}}","{(any | any), (any | int)}"); }
		@Test public void test_2941() { testInvalid("{!int, {any}}","{(any | int), (any | int)}"); }
		@Test public void test_2942() { testInvalid("{!int, {any}}","{(any & int), (any | int)}"); }
		@Test public void test_2943() { testInvalid("{!int, {any}}","{{int}, (int | int)}"); }
		@Test public void test_2944() { testInvalid("{!int, {any}}","{{any, any}, (int | int)}"); }
		@Test public void test_2945() { testInvalid("{!int, {any}}","{{int, int}, (int | int)}"); }
		@Test public void test_2946() { testInvalid("{!int, {any}}","{{int}, (any & any)}"); }
		@Test public void test_2947() { testInvalid("{!int, {any}}","{{int, any}, (any & any)}"); }
		@Test public void test_2948() { testInvalid("{!int, {any}}","{{any, int}, (any & any)}"); }
		@Test public void test_2949() { testInvalid("{!int, {any}}","{(int | any), (any & any)}"); }
		@Test public void test_2950() { testInvalid("{!int, {any}}","{(any & any), (any & any)}"); }
		@Test public void test_2951() { testInvalid("{!int, {any}}","{(int & any), (any & any)}"); }
		@Test public void test_2952() { testInvalid("{!int, {any}}","{{any}, (int & any)}"); }
		@Test public void test_2953() { testInvalid("{!int, {any}}","{{int}, (int & any)}"); }
		@Test public void test_2954() { testInvalid("{!int, {any}}","{{any, any}, (int & any)}"); }
		@Test public void test_2955() { testInvalid("{!int, {any}}","{{int, any}, (int & any)}"); }
		@Test public void test_2956() { testInvalid("{!int, {any}}","{(any | int), (int & any)}"); }
		@Test public void test_2957() { testInvalid("{!int, {any}}","{(any & any), (int & any)}"); }
		@Test public void test_2958() { testInvalid("{!int, {any}}","{(int & any), (int & any)}"); }
		@Test public void test_2959() { testInvalid("{!int, {any}}","{(int & int), (int & any)}"); }
		@Test public void test_2960() { testInvalid("{!int, {any}}","{{int, any}, (any & int)}"); }
		@Test public void test_2961() { testInvalid("{!int, {any}}","{(any & any), (any & int)}"); }
		@Test public void test_2962() { testInvalid("{!int, {any}}","{{any, int}, (int & int)}"); }
		@Test public void test_2963() { testInvalid("{!int, {any}}","{(int | int), (int & int)}"); }
		@Test public void test_2964() { testInvalid("{!int, {any}}","{(any & any), (int & int)}"); }
		@Test public void test_2965() { testInvalid("{!int, {any}}","{(any & int), (int & int)}"); }
		@Test public void test_2966() { testInvalid("{!int, {any}}","{(int & int), (int & int)}"); }
		@Test public void test_2967() { testInvalid("{!int, {any}}","(!int | {any})"); }
		@Test public void test_2968() { testInvalid("{!int, {any}}","({any, any} | {any})"); }
		@Test public void test_2969() { testInvalid("{!int, {any}}","((any | any) | {any})"); }
		@Test public void test_2970() { testInvalid("{!int, {any}}","((int | any) | {any})"); }
		@Test public void test_2971() { testInvalid("{!int, {any}}","((any & any) | {any})"); }
		@Test public void test_2972() { testInvalid("{!int, {any}}","((int & any) | {any})"); }
		@Test public void test_2973() { testInvalid("{!int, {any}}","((any & int) | {any})"); }
		@Test public void test_2974() { testInvalid("{!int, {any}}","({int} | {int})"); }
		@Test public void test_2975() { testInvalid("{!int, {any}}","(!any | {int})"); }
		@Test public void test_2976() { testInvalid("{!int, {any}}","(!int | {int})"); }
		@Test public void test_2977() { testInvalid("{!int, {any}}","({any, int} | {int})"); }
		@Test public void test_2978() { testInvalid("{!int, {any}}","((int & any) | {int})"); }
		@Test public void test_2979() { testInvalid("{!int, {any}}","((any & int) | {int})"); }
		@Test public void test_2980() { testInvalid("{!int, {any}}","((int & int) | {int})"); }
		@Test public void test_2981() { testInvalid("{!int, {any}}","({any} | !any)"); }
		@Test public void test_2982() { testInvalid("{!int, {any}}","({int} | !any)"); }
		@Test public void test_2983() { testInvalid("{!int, {any}}","({any, any} | !any)"); }
		@Test public void test_2984() { testInvalid("{!int, {any}}","({int, int} | !any)"); }
		@Test public void test_2985() { testInvalid("{!int, {any}}","((any | any) | !any)"); }
		@Test public void test_2986() { testInvalid("{!int, {any}}","((int | any) | !any)"); }
		@Test public void test_2987() { testInvalid("{!int, {any}}","((int | int) | !any)"); }
		@Test public void test_2988() { testInvalid("{!int, {any}}","((int & int) | !any)"); }
		@Test public void test_2989() { testInvalid("{!int, {any}}","(!int | !int)"); }
		@Test public void test_2990() { testInvalid("{!int, {any}}","({any, any} | !int)"); }
		@Test public void test_2991() { testInvalid("{!int, {any}}","({int, int} | !int)"); }
		@Test public void test_2992() { testInvalid("{!int, {any}}","((int | any) | !int)"); }
		@Test public void test_2993() { testInvalid("{!int, {any}}","((any | int) | !int)"); }
		@Test public void test_2994() { testInvalid("{!int, {any}}","((any & int) | !int)"); }
		@Test public void test_2995() { testInvalid("{!int, {any}}","((int & int) | !int)"); }
		@Test public void test_2996() { testInvalid("{!int, {any}}","({int} | {any, any})"); }
		@Test public void test_2997() { testInvalid("{!int, {any}}","(!any | {any, any})"); }
		@Test public void test_2998() { testInvalid("{!int, {any}}","(!int | {any, any})"); }
		@Test public void test_2999() { testInvalid("{!int, {any}}","({any, int} | {any, any})"); }
		@Test public void test_3000() { testInvalid("{!int, {any}}","((int | any) | {any, any})"); }
		@Test public void test_3001() { testInvalid("{!int, {any}}","((any & any) | {any, any})"); }
		@Test public void test_3002() { testInvalid("{!int, {any}}","((any & int) | {any, any})"); }
		@Test public void test_3003() { testInvalid("{!int, {any}}","(!int | {int, any})"); }
		@Test public void test_3004() { testInvalid("{!int, {any}}","({any, int} | {int, any})"); }
		@Test public void test_3005() { testInvalid("{!int, {any}}","((any | any) | {int, any})"); }
		@Test public void test_3006() { testInvalid("{!int, {any}}","((int | any) | {int, any})"); }
		@Test public void test_3007() { testInvalid("{!int, {any}}","((any | int) | {int, any})"); }
		@Test public void test_3008() { testInvalid("{!int, {any}}","((int & any) | {int, any})"); }
		@Test public void test_3009() { testInvalid("{!int, {any}}","({any} | {any, int})"); }
		@Test public void test_3010() { testInvalid("{!int, {any}}","(!int | {any, int})"); }
		@Test public void test_3011() { testInvalid("{!int, {any}}","({any, int} | {any, int})"); }
		@Test public void test_3012() { testInvalid("{!int, {any}}","((any | any) | {any, int})"); }
		@Test public void test_3013() { testInvalid("{!int, {any}}","((any | int) | {any, int})"); }
		@Test public void test_3014() { testInvalid("{!int, {any}}","((int | int) | {any, int})"); }
		@Test public void test_3015() { testInvalid("{!int, {any}}","((int & any) | {any, int})"); }
		@Test public void test_3016() { testInvalid("{!int, {any}}","(!any | {int, int})"); }
		@Test public void test_3017() { testInvalid("{!int, {any}}","(!int | {int, int})"); }
		@Test public void test_3018() { testInvalid("{!int, {any}}","({any, any} | {int, int})"); }
		@Test public void test_3019() { testInvalid("{!int, {any}}","({any, int} | {int, int})"); }
		@Test public void test_3020() { testInvalid("{!int, {any}}","((any | any) | {int, int})"); }
		@Test public void test_3021() { testInvalid("{!int, {any}}","((int | int) | {int, int})"); }
		@Test public void test_3022() { testInvalid("{!int, {any}}","((int & any) | {int, int})"); }
		@Test public void test_3023() { testInvalid("{!int, {any}}","((any & int) | {int, int})"); }
		@Test public void test_3024() { testInvalid("{!int, {any}}","((int & int) | {int, int})"); }
		@Test public void test_3025() { testInvalid("{!int, {any}}","({any} | (any | any))"); }
		@Test public void test_3026() { testInvalid("{!int, {any}}","(!any | (any | any))"); }
		@Test public void test_3027() { testInvalid("{!int, {any}}","({any, any} | (any | any))"); }
		@Test public void test_3028() { testInvalid("{!int, {any}}","({any, int} | (any | any))"); }
		@Test public void test_3029() { testInvalid("{!int, {any}}","({int, int} | (any | any))"); }
		@Test public void test_3030() { testInvalid("{!int, {any}}","((int | any) | (any | any))"); }
		@Test public void test_3031() { testInvalid("{!int, {any}}","((any | int) | (any | any))"); }
		@Test public void test_3032() { testInvalid("{!int, {any}}","((any & int) | (any | any))"); }
		@Test public void test_3033() { testInvalid("{!int, {any}}","((int & int) | (any | any))"); }
		@Test public void test_3034() { testInvalid("{!int, {any}}","({any} | (int | any))"); }
		@Test public void test_3035() { testInvalid("{!int, {any}}","(!int | (int | any))"); }
		@Test public void test_3036() { testInvalid("{!int, {any}}","({int, any} | (int | any))"); }
		@Test public void test_3037() { testInvalid("{!int, {any}}","({any, int} | (int | any))"); }
		@Test public void test_3038() { testInvalid("{!int, {any}}","((int & any) | (int | any))"); }
		@Test public void test_3039() { testInvalid("{!int, {any}}","((any & int) | (int | any))"); }
		@Test public void test_3040() { testInvalid("{!int, {any}}","({any} | (any | int))"); }
		@Test public void test_3041() { testInvalid("{!int, {any}}","({int} | (any | int))"); }
		@Test public void test_3042() { testInvalid("{!int, {any}}","(!any | (any | int))"); }
		@Test public void test_3043() { testInvalid("{!int, {any}}","(!int | (any | int))"); }
		@Test public void test_3044() { testInvalid("{!int, {any}}","({any, int} | (any | int))"); }
		@Test public void test_3045() { testInvalid("{!int, {any}}","({int, int} | (any | int))"); }
		@Test public void test_3046() { testInvalid("{!int, {any}}","((int | any) | (any | int))"); }
		@Test public void test_3047() { testInvalid("{!int, {any}}","((any | int) | (any | int))"); }
		@Test public void test_3048() { testInvalid("{!int, {any}}","((int | int) | (any | int))"); }
		@Test public void test_3049() { testInvalid("{!int, {any}}","((any & any) | (any | int))"); }
		@Test public void test_3050() { testInvalid("{!int, {any}}","({int} | (int | int))"); }
		@Test public void test_3051() { testInvalid("{!int, {any}}","(!any | (int | int))"); }
		@Test public void test_3052() { testInvalid("{!int, {any}}","(!int | (int | int))"); }
		@Test public void test_3053() { testInvalid("{!int, {any}}","({int, any} | (int | int))"); }
		@Test public void test_3054() { testInvalid("{!int, {any}}","({any, int} | (int | int))"); }
		@Test public void test_3055() { testInvalid("{!int, {any}}","((any | int) | (int | int))"); }
		@Test public void test_3056() { testInvalid("{!int, {any}}","((int | int) | (int | int))"); }
		@Test public void test_3057() { testInvalid("{!int, {any}}","((any & any) | (int | int))"); }
		@Test public void test_3058() { testInvalid("{!int, {any}}","((int & any) | (int | int))"); }
		@Test public void test_3059() { testInvalid("{!int, {any}}","((int & int) | (int | int))"); }
		@Test public void test_3060() { testInvalid("{!int, {any}}","(!any | (any & any))"); }
		@Test public void test_3061() { testInvalid("{!int, {any}}","(!int | (any & any))"); }
		@Test public void test_3062() { testInvalid("{!int, {any}}","({any, any} | (any & any))"); }
		@Test public void test_3063() { testInvalid("{!int, {any}}","({int, any} | (any & any))"); }
		@Test public void test_3064() { testInvalid("{!int, {any}}","({any, int} | (any & any))"); }
		@Test public void test_3065() { testInvalid("{!int, {any}}","({int, int} | (any & any))"); }
		@Test public void test_3066() { testInvalid("{!int, {any}}","((int | any) | (any & any))"); }
		@Test public void test_3067() { testInvalid("{!int, {any}}","((int | int) | (any & any))"); }
		@Test public void test_3068() { testInvalid("{!int, {any}}","((int & any) | (any & any))"); }
		@Test public void test_3069() { testInvalid("{!int, {any}}","((any & int) | (any & any))"); }
		@Test public void test_3070() { testInvalid("{!int, {any}}","((int & int) | (any & any))"); }
		@Test public void test_3071() { testInvalid("{!int, {any}}","({any} | (int & any))"); }
		@Test public void test_3072() { testInvalid("{{int, int}, {any}}","{int}"); }
		@Test public void test_3073() { testInvalid("{{int, int}, {any}}","{any, any}"); }
		@Test public void test_3074() { testInvalid("{{int, int}, {any}}","{int, int}"); }
		@Test public void test_3075() { testInvalid("{{int, int}, {any}}","(any | int)"); }
		@Test public void test_3076() { testInvalid("{{int, int}, {any}}","(int & any)"); }
		@Test public void test_3077() { testInvalid("{{int, int}, {any}}","{{any}}"); }
		@Test public void test_3078() { testInvalid("{{int, int}, {any}}","{{int, any}}"); }
		@Test public void test_3079() { testInvalid("{{int, int}, {any}}","{{int, int}}"); }
		@Test public void test_3080() { testInvalid("{{int, int}, {any}}","{(any | int)}"); }
		@Test public void test_3081() { testInvalid("{{int, int}, {any}}","!{int, any}"); }
		@Test public void test_3082() { testInvalid("{{int, int}, {any}}","!{int, int}"); }
		@Test public void test_3083() { testValid("{{int, int}, {any}}","!(any | any)"); }
		@Test public void test_3084() { testValid("{{int, int}, {any}}","!(any & any)"); }
		@Test public void test_3085() { testInvalid("{{int, int}, {any}}","!(int & int)"); }
		@Test public void test_3086() { testInvalid("{{int, int}, {any}}","{{int}, {any}}"); }
		@Test public void test_3087() { testInvalid("{{int, int}, {any}}","{!int, {any}}"); }
		@Test public void test_3088() { testValid("{{int, int}, {any}}","{{int, int}, {any}}"); }
		@Test public void test_3089() { testInvalid("{{int, int}, {any}}","{(any | int), {any}}"); }
		@Test public void test_3090() { testInvalid("{{int, int}, {any}}","{!int, {int}}"); }
		@Test public void test_3091() { testInvalid("{{int, int}, {any}}","{{any, any}, {int}}"); }
		@Test public void test_3092() { testInvalid("{{int, int}, {any}}","{(any | any), {int}}"); }
		@Test public void test_3093() { testInvalid("{{int, int}, {any}}","{(any & any), {int}}"); }
		@Test public void test_3094() { testInvalid("{{int, int}, {any}}","{(any & int), {int}}"); }
		@Test public void test_3095() { testInvalid("{{int, int}, {any}}","{{any, any}, !int}"); }
		@Test public void test_3096() { testInvalid("{{int, int}, {any}}","{{any, int}, !int}"); }
		@Test public void test_3097() { testInvalid("{{int, int}, {any}}","{(any | any), !int}"); }
		@Test public void test_3098() { testInvalid("{{int, int}, {any}}","{(int | any), !int}"); }
		@Test public void test_3099() { testInvalid("{{int, int}, {any}}","{(any & any), !int}"); }
		@Test public void test_3100() { testInvalid("{{int, int}, {any}}","{(int & any), !int}"); }
		@Test public void test_3101() { testInvalid("{{int, int}, {any}}","{(int & int), !int}"); }
		@Test public void test_3102() { testInvalid("{{int, int}, {any}}","{{any}, {any, any}}"); }
		@Test public void test_3103() { testInvalid("{{int, int}, {any}}","{{int}, {any, any}}"); }
		@Test public void test_3104() { testInvalid("{{int, int}, {any}}","{{int, int}, {any, any}}"); }
		@Test public void test_3105() { testInvalid("{{int, int}, {any}}","{(any | any), {any, any}}"); }
		@Test public void test_3106() { testInvalid("{{int, int}, {any}}","{(any | int), {any, any}}"); }
		@Test public void test_3107() { testInvalid("{{int, int}, {any}}","{!int, {int, any}}"); }
		@Test public void test_3108() { testInvalid("{{int, int}, {any}}","{{int, any}, {int, any}}"); }
		@Test public void test_3109() { testInvalid("{{int, int}, {any}}","{{any, int}, {int, any}}"); }
		@Test public void test_3110() { testInvalid("{{int, int}, {any}}","{(any & int), {int, any}}"); }
		@Test public void test_3111() { testInvalid("{{int, int}, {any}}","{{any}, {any, int}}"); }
		@Test public void test_3112() { testInvalid("{{int, int}, {any}}","{{int, int}, {any, int}}"); }
		@Test public void test_3113() { testInvalid("{{int, int}, {any}}","{(int | int), {any, int}}"); }
		@Test public void test_3114() { testInvalid("{{int, int}, {any}}","{(any & int), {any, int}}"); }
		@Test public void test_3115() { testInvalid("{{int, int}, {any}}","{!int, {int, int}}"); }
		@Test public void test_3116() { testInvalid("{{int, int}, {any}}","{{int, int}, {int, int}}"); }
		@Test public void test_3117() { testInvalid("{{int, int}, {any}}","{(any | any), {int, int}}"); }
		@Test public void test_3118() { testInvalid("{{int, int}, {any}}","{(int | any), {int, int}}"); }
		@Test public void test_3119() { testInvalid("{{int, int}, {any}}","{(int & any), {int, int}}"); }
		@Test public void test_3120() { testInvalid("{{int, int}, {any}}","{{int}, (any | any)}"); }
		@Test public void test_3121() { testInvalid("{{int, int}, {any}}","{{int, any}, (any | any)}"); }
		@Test public void test_3122() { testInvalid("{{int, int}, {any}}","{{any, int}, (any | any)}"); }
		@Test public void test_3123() { testInvalid("{{int, int}, {any}}","{(any | any), (any | any)}"); }
		@Test public void test_3124() { testInvalid("{{int, int}, {any}}","{(int | any), (any | any)}"); }
		@Test public void test_3125() { testInvalid("{{int, int}, {any}}","{(int & int), (any | any)}"); }
		@Test public void test_3126() { testInvalid("{{int, int}, {any}}","{!int, (int | any)}"); }
		@Test public void test_3127() { testInvalid("{{int, int}, {any}}","{{int, int}, (int | any)}"); }
		@Test public void test_3128() { testInvalid("{{int, int}, {any}}","{(any | any), (int | any)}"); }
		@Test public void test_3129() { testInvalid("{{int, int}, {any}}","{(int | int), (int | any)}"); }
		@Test public void test_3130() { testInvalid("{{int, int}, {any}}","{{any}, (any | int)}"); }
		@Test public void test_3131() { testInvalid("{{int, int}, {any}}","{!int, (any | int)}"); }
		@Test public void test_3132() { testInvalid("{{int, int}, {any}}","{(any | any), (any | int)}"); }
		@Test public void test_3133() { testInvalid("{{int, int}, {any}}","{(any | int), (any | int)}"); }
		@Test public void test_3134() { testInvalid("{{int, int}, {any}}","{(any & int), (any | int)}"); }
		@Test public void test_3135() { testInvalid("{{int, int}, {any}}","{{int}, (int | int)}"); }
		@Test public void test_3136() { testInvalid("{{int, int}, {any}}","{{any, any}, (int | int)}"); }
		@Test public void test_3137() { testInvalid("{{int, int}, {any}}","{{int, int}, (int | int)}"); }
		@Test public void test_3138() { testInvalid("{{int, int}, {any}}","{{int}, (any & any)}"); }
		@Test public void test_3139() { testInvalid("{{int, int}, {any}}","{{int, any}, (any & any)}"); }
		@Test public void test_3140() { testInvalid("{{int, int}, {any}}","{{any, int}, (any & any)}"); }
		@Test public void test_3141() { testInvalid("{{int, int}, {any}}","{(int | any), (any & any)}"); }
		@Test public void test_3142() { testInvalid("{{int, int}, {any}}","{(any & any), (any & any)}"); }
		@Test public void test_3143() { testInvalid("{{int, int}, {any}}","{(int & any), (any & any)}"); }
		@Test public void test_3144() { testInvalid("{{int, int}, {any}}","{{any}, (int & any)}"); }
		@Test public void test_3145() { testInvalid("{{int, int}, {any}}","{{int}, (int & any)}"); }
		@Test public void test_3146() { testInvalid("{{int, int}, {any}}","{{any, any}, (int & any)}"); }
		@Test public void test_3147() { testInvalid("{{int, int}, {any}}","{{int, any}, (int & any)}"); }
		@Test public void test_3148() { testInvalid("{{int, int}, {any}}","{(any | int), (int & any)}"); }
		@Test public void test_3149() { testInvalid("{{int, int}, {any}}","{(any & any), (int & any)}"); }
		@Test public void test_3150() { testInvalid("{{int, int}, {any}}","{(int & any), (int & any)}"); }
		@Test public void test_3151() { testInvalid("{{int, int}, {any}}","{(int & int), (int & any)}"); }
		@Test public void test_3152() { testInvalid("{{int, int}, {any}}","{{int, any}, (any & int)}"); }
		@Test public void test_3153() { testInvalid("{{int, int}, {any}}","{(any & any), (any & int)}"); }
		@Test public void test_3154() { testInvalid("{{int, int}, {any}}","{{any, int}, (int & int)}"); }
		@Test public void test_3155() { testInvalid("{{int, int}, {any}}","{(int | int), (int & int)}"); }
		@Test public void test_3156() { testInvalid("{{int, int}, {any}}","{(any & any), (int & int)}"); }
		@Test public void test_3157() { testInvalid("{{int, int}, {any}}","{(any & int), (int & int)}"); }
		@Test public void test_3158() { testInvalid("{{int, int}, {any}}","{(int & int), (int & int)}"); }
		@Test public void test_3159() { testInvalid("{{int, int}, {any}}","(!int | {any})"); }
		@Test public void test_3160() { testInvalid("{{int, int}, {any}}","({any, any} | {any})"); }
		@Test public void test_3161() { testInvalid("{{int, int}, {any}}","((any | any) | {any})"); }
		@Test public void test_3162() { testInvalid("{{int, int}, {any}}","((int | any) | {any})"); }
		@Test public void test_3163() { testInvalid("{{int, int}, {any}}","((any & any) | {any})"); }
		@Test public void test_3164() { testInvalid("{{int, int}, {any}}","((int & any) | {any})"); }
		@Test public void test_3165() { testInvalid("{{int, int}, {any}}","((any & int) | {any})"); }
		@Test public void test_3166() { testInvalid("{{int, int}, {any}}","({int} | {int})"); }
		@Test public void test_3167() { testInvalid("{{int, int}, {any}}","(!any | {int})"); }
		@Test public void test_3168() { testInvalid("{{int, int}, {any}}","(!int | {int})"); }
		@Test public void test_3169() { testInvalid("{{int, int}, {any}}","({any, int} | {int})"); }
		@Test public void test_3170() { testInvalid("{{int, int}, {any}}","((int & any) | {int})"); }
		@Test public void test_3171() { testInvalid("{{int, int}, {any}}","((any & int) | {int})"); }
		@Test public void test_3172() { testInvalid("{{int, int}, {any}}","((int & int) | {int})"); }
		@Test public void test_3173() { testInvalid("{{int, int}, {any}}","({any} | !any)"); }
		@Test public void test_3174() { testInvalid("{{int, int}, {any}}","({int} | !any)"); }
		@Test public void test_3175() { testInvalid("{{int, int}, {any}}","({any, any} | !any)"); }
		@Test public void test_3176() { testInvalid("{{int, int}, {any}}","({int, int} | !any)"); }
		@Test public void test_3177() { testInvalid("{{int, int}, {any}}","((any | any) | !any)"); }
		@Test public void test_3178() { testInvalid("{{int, int}, {any}}","((int | any) | !any)"); }
		@Test public void test_3179() { testInvalid("{{int, int}, {any}}","((int | int) | !any)"); }
		@Test public void test_3180() { testInvalid("{{int, int}, {any}}","((int & int) | !any)"); }
		@Test public void test_3181() { testInvalid("{{int, int}, {any}}","(!int | !int)"); }
		@Test public void test_3182() { testInvalid("{{int, int}, {any}}","({any, any} | !int)"); }
		@Test public void test_3183() { testInvalid("{{int, int}, {any}}","({int, int} | !int)"); }
		@Test public void test_3184() { testInvalid("{{int, int}, {any}}","((int | any) | !int)"); }
		@Test public void test_3185() { testInvalid("{{int, int}, {any}}","((any | int) | !int)"); }
		@Test public void test_3186() { testInvalid("{{int, int}, {any}}","((any & int) | !int)"); }
		@Test public void test_3187() { testInvalid("{{int, int}, {any}}","((int & int) | !int)"); }
		@Test public void test_3188() { testInvalid("{{int, int}, {any}}","({int} | {any, any})"); }
		@Test public void test_3189() { testInvalid("{{int, int}, {any}}","(!any | {any, any})"); }
		@Test public void test_3190() { testInvalid("{{int, int}, {any}}","(!int | {any, any})"); }
		@Test public void test_3191() { testInvalid("{{int, int}, {any}}","({any, int} | {any, any})"); }
		@Test public void test_3192() { testInvalid("{{int, int}, {any}}","((int | any) | {any, any})"); }
		@Test public void test_3193() { testInvalid("{{int, int}, {any}}","((any & any) | {any, any})"); }
		@Test public void test_3194() { testInvalid("{{int, int}, {any}}","((any & int) | {any, any})"); }
		@Test public void test_3195() { testInvalid("{{int, int}, {any}}","(!int | {int, any})"); }
		@Test public void test_3196() { testInvalid("{{int, int}, {any}}","({any, int} | {int, any})"); }
		@Test public void test_3197() { testInvalid("{{int, int}, {any}}","((any | any) | {int, any})"); }
		@Test public void test_3198() { testInvalid("{{int, int}, {any}}","((int | any) | {int, any})"); }
		@Test public void test_3199() { testInvalid("{{int, int}, {any}}","((any | int) | {int, any})"); }
		@Test public void test_3200() { testInvalid("{{int, int}, {any}}","((int & any) | {int, any})"); }
		@Test public void test_3201() { testInvalid("{{int, int}, {any}}","({any} | {any, int})"); }
		@Test public void test_3202() { testInvalid("{{int, int}, {any}}","(!int | {any, int})"); }
		@Test public void test_3203() { testInvalid("{{int, int}, {any}}","({any, int} | {any, int})"); }
		@Test public void test_3204() { testInvalid("{{int, int}, {any}}","((any | any) | {any, int})"); }
		@Test public void test_3205() { testInvalid("{{int, int}, {any}}","((any | int) | {any, int})"); }
		@Test public void test_3206() { testInvalid("{{int, int}, {any}}","((int | int) | {any, int})"); }
		@Test public void test_3207() { testInvalid("{{int, int}, {any}}","((int & any) | {any, int})"); }
		@Test public void test_3208() { testInvalid("{{int, int}, {any}}","(!any | {int, int})"); }
		@Test public void test_3209() { testInvalid("{{int, int}, {any}}","(!int | {int, int})"); }
		@Test public void test_3210() { testInvalid("{{int, int}, {any}}","({any, any} | {int, int})"); }
		@Test public void test_3211() { testInvalid("{{int, int}, {any}}","({any, int} | {int, int})"); }
		@Test public void test_3212() { testInvalid("{{int, int}, {any}}","((any | any) | {int, int})"); }
		@Test public void test_3213() { testInvalid("{{int, int}, {any}}","((int | int) | {int, int})"); }
		@Test public void test_3214() { testInvalid("{{int, int}, {any}}","((int & any) | {int, int})"); }
		@Test public void test_3215() { testInvalid("{{int, int}, {any}}","((any & int) | {int, int})"); }
		@Test public void test_3216() { testInvalid("{{int, int}, {any}}","((int & int) | {int, int})"); }
		@Test public void test_3217() { testInvalid("{{int, int}, {any}}","({any} | (any | any))"); }
		@Test public void test_3218() { testInvalid("{{int, int}, {any}}","(!any | (any | any))"); }
		@Test public void test_3219() { testInvalid("{{int, int}, {any}}","({any, any} | (any | any))"); }
		@Test public void test_3220() { testInvalid("{{int, int}, {any}}","({any, int} | (any | any))"); }
		@Test public void test_3221() { testInvalid("{{int, int}, {any}}","({int, int} | (any | any))"); }
		@Test public void test_3222() { testInvalid("{{int, int}, {any}}","((int | any) | (any | any))"); }
		@Test public void test_3223() { testInvalid("{{int, int}, {any}}","((any | int) | (any | any))"); }
		@Test public void test_3224() { testInvalid("{{int, int}, {any}}","((any & int) | (any | any))"); }
		@Test public void test_3225() { testInvalid("{{int, int}, {any}}","((int & int) | (any | any))"); }
		@Test public void test_3226() { testInvalid("{{int, int}, {any}}","({any} | (int | any))"); }
		@Test public void test_3227() { testInvalid("{{int, int}, {any}}","(!int | (int | any))"); }
		@Test public void test_3228() { testInvalid("{{int, int}, {any}}","({int, any} | (int | any))"); }
		@Test public void test_3229() { testInvalid("{{int, int}, {any}}","({any, int} | (int | any))"); }
		@Test public void test_3230() { testInvalid("{{int, int}, {any}}","((int & any) | (int | any))"); }
		@Test public void test_3231() { testInvalid("{{int, int}, {any}}","((any & int) | (int | any))"); }
		@Test public void test_3232() { testInvalid("{{int, int}, {any}}","({any} | (any | int))"); }
		@Test public void test_3233() { testInvalid("{{int, int}, {any}}","({int} | (any | int))"); }
		@Test public void test_3234() { testInvalid("{{int, int}, {any}}","(!any | (any | int))"); }
		@Test public void test_3235() { testInvalid("{{int, int}, {any}}","(!int | (any | int))"); }
		@Test public void test_3236() { testInvalid("{{int, int}, {any}}","({any, int} | (any | int))"); }
		@Test public void test_3237() { testInvalid("{{int, int}, {any}}","({int, int} | (any | int))"); }
		@Test public void test_3238() { testInvalid("{{int, int}, {any}}","((int | any) | (any | int))"); }
		@Test public void test_3239() { testInvalid("{{int, int}, {any}}","((any | int) | (any | int))"); }
		@Test public void test_3240() { testInvalid("{{int, int}, {any}}","((int | int) | (any | int))"); }
		@Test public void test_3241() { testInvalid("{{int, int}, {any}}","((any & any) | (any | int))"); }
		@Test public void test_3242() { testInvalid("{{int, int}, {any}}","({int} | (int | int))"); }
		@Test public void test_3243() { testInvalid("{{int, int}, {any}}","(!any | (int | int))"); }
		@Test public void test_3244() { testInvalid("{{int, int}, {any}}","(!int | (int | int))"); }
		@Test public void test_3245() { testInvalid("{{int, int}, {any}}","({int, any} | (int | int))"); }
		@Test public void test_3246() { testInvalid("{{int, int}, {any}}","({any, int} | (int | int))"); }
		@Test public void test_3247() { testInvalid("{{int, int}, {any}}","((any | int) | (int | int))"); }
		@Test public void test_3248() { testInvalid("{{int, int}, {any}}","((int | int) | (int | int))"); }
		@Test public void test_3249() { testInvalid("{{int, int}, {any}}","((any & any) | (int | int))"); }
		@Test public void test_3250() { testInvalid("{{int, int}, {any}}","((int & any) | (int | int))"); }
		@Test public void test_3251() { testInvalid("{{int, int}, {any}}","((int & int) | (int | int))"); }
		@Test public void test_3252() { testInvalid("{{int, int}, {any}}","(!any | (any & any))"); }
		@Test public void test_3253() { testInvalid("{{int, int}, {any}}","(!int | (any & any))"); }
		@Test public void test_3254() { testInvalid("{{int, int}, {any}}","({any, any} | (any & any))"); }
		@Test public void test_3255() { testInvalid("{{int, int}, {any}}","({int, any} | (any & any))"); }
		@Test public void test_3256() { testInvalid("{{int, int}, {any}}","({any, int} | (any & any))"); }
		@Test public void test_3257() { testInvalid("{{int, int}, {any}}","({int, int} | (any & any))"); }
		@Test public void test_3258() { testInvalid("{{int, int}, {any}}","((int | any) | (any & any))"); }
		@Test public void test_3259() { testInvalid("{{int, int}, {any}}","((int | int) | (any & any))"); }
		@Test public void test_3260() { testInvalid("{{int, int}, {any}}","((int & any) | (any & any))"); }
		@Test public void test_3261() { testInvalid("{{int, int}, {any}}","((any & int) | (any & any))"); }
		@Test public void test_3262() { testInvalid("{{int, int}, {any}}","((int & int) | (any & any))"); }
		@Test public void test_3263() { testInvalid("{{int, int}, {any}}","({any} | (int & any))"); }
		@Test public void test_3264() { testInvalid("{(any | int), {any}}","{int}"); }
		@Test public void test_3265() { testInvalid("{(any | int), {any}}","{any, any}"); }
		@Test public void test_3266() { testInvalid("{(any | int), {any}}","{int, int}"); }
		@Test public void test_3267() { testInvalid("{(any | int), {any}}","(any | int)"); }
		@Test public void test_3268() { testInvalid("{(any | int), {any}}","(int & any)"); }
		@Test public void test_3269() { testInvalid("{(any | int), {any}}","{{any}}"); }
		@Test public void test_3270() { testInvalid("{(any | int), {any}}","{{int, any}}"); }
		@Test public void test_3271() { testInvalid("{(any | int), {any}}","{{int, int}}"); }
		@Test public void test_3272() { testInvalid("{(any | int), {any}}","{(any | int)}"); }
		@Test public void test_3273() { testInvalid("{(any | int), {any}}","!{int, any}"); }
		@Test public void test_3274() { testInvalid("{(any | int), {any}}","!{int, int}"); }
		@Test public void test_3275() { testValid("{(any | int), {any}}","!(any | any)"); }
		@Test public void test_3276() { testValid("{(any | int), {any}}","!(any & any)"); }
		@Test public void test_3277() { testInvalid("{(any | int), {any}}","!(int & int)"); }
		@Test public void test_3278() { testValid("{(any | int), {any}}","{{int}, {any}}"); }
		@Test public void test_3279() { testValid("{(any | int), {any}}","{!int, {any}}"); }
		@Test public void test_3280() { testValid("{(any | int), {any}}","{{int, int}, {any}}"); }
		@Test public void test_3281() { testValid("{(any | int), {any}}","{(any | int), {any}}"); }
		@Test public void test_3282() { testValid("{(any | int), {any}}","{!int, {int}}"); }
		@Test public void test_3283() { testValid("{(any | int), {any}}","{{any, any}, {int}}"); }
		@Test public void test_3284() { testValid("{(any | int), {any}}","{(any | any), {int}}"); }
		@Test public void test_3285() { testValid("{(any | int), {any}}","{(any & any), {int}}"); }
		@Test public void test_3286() { testValid("{(any | int), {any}}","{(any & int), {int}}"); }
		@Test public void test_3287() { testInvalid("{(any | int), {any}}","{{any, any}, !int}"); }
		@Test public void test_3288() { testInvalid("{(any | int), {any}}","{{any, int}, !int}"); }
		@Test public void test_3289() { testInvalid("{(any | int), {any}}","{(any | any), !int}"); }
		@Test public void test_3290() { testInvalid("{(any | int), {any}}","{(int | any), !int}"); }
		@Test public void test_3291() { testInvalid("{(any | int), {any}}","{(any & any), !int}"); }
		@Test public void test_3292() { testInvalid("{(any | int), {any}}","{(int & any), !int}"); }
		@Test public void test_3293() { testInvalid("{(any | int), {any}}","{(int & int), !int}"); }
		@Test public void test_3294() { testInvalid("{(any | int), {any}}","{{any}, {any, any}}"); }
		@Test public void test_3295() { testInvalid("{(any | int), {any}}","{{int}, {any, any}}"); }
		@Test public void test_3296() { testInvalid("{(any | int), {any}}","{{int, int}, {any, any}}"); }
		@Test public void test_3297() { testInvalid("{(any | int), {any}}","{(any | any), {any, any}}"); }
		@Test public void test_3298() { testInvalid("{(any | int), {any}}","{(any | int), {any, any}}"); }
		@Test public void test_3299() { testInvalid("{(any | int), {any}}","{!int, {int, any}}"); }
		@Test public void test_3300() { testInvalid("{(any | int), {any}}","{{int, any}, {int, any}}"); }
		@Test public void test_3301() { testInvalid("{(any | int), {any}}","{{any, int}, {int, any}}"); }
		@Test public void test_3302() { testInvalid("{(any | int), {any}}","{(any & int), {int, any}}"); }
		@Test public void test_3303() { testInvalid("{(any | int), {any}}","{{any}, {any, int}}"); }
		@Test public void test_3304() { testInvalid("{(any | int), {any}}","{{int, int}, {any, int}}"); }
		@Test public void test_3305() { testInvalid("{(any | int), {any}}","{(int | int), {any, int}}"); }
		@Test public void test_3306() { testInvalid("{(any | int), {any}}","{(any & int), {any, int}}"); }
		@Test public void test_3307() { testInvalid("{(any | int), {any}}","{!int, {int, int}}"); }
		@Test public void test_3308() { testInvalid("{(any | int), {any}}","{{int, int}, {int, int}}"); }
		@Test public void test_3309() { testInvalid("{(any | int), {any}}","{(any | any), {int, int}}"); }
		@Test public void test_3310() { testInvalid("{(any | int), {any}}","{(int | any), {int, int}}"); }
		@Test public void test_3311() { testInvalid("{(any | int), {any}}","{(int & any), {int, int}}"); }
		@Test public void test_3312() { testInvalid("{(any | int), {any}}","{{int}, (any | any)}"); }
		@Test public void test_3313() { testInvalid("{(any | int), {any}}","{{int, any}, (any | any)}"); }
		@Test public void test_3314() { testInvalid("{(any | int), {any}}","{{any, int}, (any | any)}"); }
		@Test public void test_3315() { testInvalid("{(any | int), {any}}","{(any | any), (any | any)}"); }
		@Test public void test_3316() { testInvalid("{(any | int), {any}}","{(int | any), (any | any)}"); }
		@Test public void test_3317() { testInvalid("{(any | int), {any}}","{(int & int), (any | any)}"); }
		@Test public void test_3318() { testInvalid("{(any | int), {any}}","{!int, (int | any)}"); }
		@Test public void test_3319() { testInvalid("{(any | int), {any}}","{{int, int}, (int | any)}"); }
		@Test public void test_3320() { testInvalid("{(any | int), {any}}","{(any | any), (int | any)}"); }
		@Test public void test_3321() { testInvalid("{(any | int), {any}}","{(int | int), (int | any)}"); }
		@Test public void test_3322() { testInvalid("{(any | int), {any}}","{{any}, (any | int)}"); }
		@Test public void test_3323() { testInvalid("{(any | int), {any}}","{!int, (any | int)}"); }
		@Test public void test_3324() { testInvalid("{(any | int), {any}}","{(any | any), (any | int)}"); }
		@Test public void test_3325() { testInvalid("{(any | int), {any}}","{(any | int), (any | int)}"); }
		@Test public void test_3326() { testInvalid("{(any | int), {any}}","{(any & int), (any | int)}"); }
		@Test public void test_3327() { testInvalid("{(any | int), {any}}","{{int}, (int | int)}"); }
		@Test public void test_3328() { testInvalid("{(any | int), {any}}","{{any, any}, (int | int)}"); }
		@Test public void test_3329() { testInvalid("{(any | int), {any}}","{{int, int}, (int | int)}"); }
		@Test public void test_3330() { testInvalid("{(any | int), {any}}","{{int}, (any & any)}"); }
		@Test public void test_3331() { testInvalid("{(any | int), {any}}","{{int, any}, (any & any)}"); }
		@Test public void test_3332() { testInvalid("{(any | int), {any}}","{{any, int}, (any & any)}"); }
		@Test public void test_3333() { testInvalid("{(any | int), {any}}","{(int | any), (any & any)}"); }
		@Test public void test_3334() { testInvalid("{(any | int), {any}}","{(any & any), (any & any)}"); }
		@Test public void test_3335() { testInvalid("{(any | int), {any}}","{(int & any), (any & any)}"); }
		@Test public void test_3336() { testInvalid("{(any | int), {any}}","{{any}, (int & any)}"); }
		@Test public void test_3337() { testInvalid("{(any | int), {any}}","{{int}, (int & any)}"); }
		@Test public void test_3338() { testInvalid("{(any | int), {any}}","{{any, any}, (int & any)}"); }
		@Test public void test_3339() { testInvalid("{(any | int), {any}}","{{int, any}, (int & any)}"); }
		@Test public void test_3340() { testInvalid("{(any | int), {any}}","{(any | int), (int & any)}"); }
		@Test public void test_3341() { testInvalid("{(any | int), {any}}","{(any & any), (int & any)}"); }
		@Test public void test_3342() { testInvalid("{(any | int), {any}}","{(int & any), (int & any)}"); }
		@Test public void test_3343() { testInvalid("{(any | int), {any}}","{(int & int), (int & any)}"); }
		@Test public void test_3344() { testInvalid("{(any | int), {any}}","{{int, any}, (any & int)}"); }
		@Test public void test_3345() { testInvalid("{(any | int), {any}}","{(any & any), (any & int)}"); }
		@Test public void test_3346() { testInvalid("{(any | int), {any}}","{{any, int}, (int & int)}"); }
		@Test public void test_3347() { testInvalid("{(any | int), {any}}","{(int | int), (int & int)}"); }
		@Test public void test_3348() { testInvalid("{(any | int), {any}}","{(any & any), (int & int)}"); }
		@Test public void test_3349() { testInvalid("{(any | int), {any}}","{(any & int), (int & int)}"); }
		@Test public void test_3350() { testInvalid("{(any | int), {any}}","{(int & int), (int & int)}"); }
		@Test public void test_3351() { testInvalid("{(any | int), {any}}","(!int | {any})"); }
		@Test public void test_3352() { testInvalid("{(any | int), {any}}","({any, any} | {any})"); }
		@Test public void test_3353() { testInvalid("{(any | int), {any}}","((any | any) | {any})"); }
		@Test public void test_3354() { testInvalid("{(any | int), {any}}","((int | any) | {any})"); }
		@Test public void test_3355() { testInvalid("{(any | int), {any}}","((any & any) | {any})"); }
		@Test public void test_3356() { testInvalid("{(any | int), {any}}","((int & any) | {any})"); }
		@Test public void test_3357() { testInvalid("{(any | int), {any}}","((any & int) | {any})"); }
		@Test public void test_3358() { testInvalid("{(any | int), {any}}","({int} | {int})"); }
		@Test public void test_3359() { testInvalid("{(any | int), {any}}","(!any | {int})"); }
		@Test public void test_3360() { testInvalid("{(any | int), {any}}","(!int | {int})"); }
		@Test public void test_3361() { testInvalid("{(any | int), {any}}","({any, int} | {int})"); }
		@Test public void test_3362() { testInvalid("{(any | int), {any}}","((int & any) | {int})"); }
		@Test public void test_3363() { testInvalid("{(any | int), {any}}","((any & int) | {int})"); }
		@Test public void test_3364() { testInvalid("{(any | int), {any}}","((int & int) | {int})"); }
		@Test public void test_3365() { testInvalid("{(any | int), {any}}","({any} | !any)"); }
		@Test public void test_3366() { testInvalid("{(any | int), {any}}","({int} | !any)"); }
		@Test public void test_3367() { testInvalid("{(any | int), {any}}","({any, any} | !any)"); }
		@Test public void test_3368() { testInvalid("{(any | int), {any}}","({int, int} | !any)"); }
		@Test public void test_3369() { testInvalid("{(any | int), {any}}","((any | any) | !any)"); }
		@Test public void test_3370() { testInvalid("{(any | int), {any}}","((int | any) | !any)"); }
		@Test public void test_3371() { testInvalid("{(any | int), {any}}","((int | int) | !any)"); }
		@Test public void test_3372() { testInvalid("{(any | int), {any}}","((int & int) | !any)"); }
		@Test public void test_3373() { testInvalid("{(any | int), {any}}","(!int | !int)"); }
		@Test public void test_3374() { testInvalid("{(any | int), {any}}","({any, any} | !int)"); }
		@Test public void test_3375() { testInvalid("{(any | int), {any}}","({int, int} | !int)"); }
		@Test public void test_3376() { testInvalid("{(any | int), {any}}","((int | any) | !int)"); }
		@Test public void test_3377() { testInvalid("{(any | int), {any}}","((any | int) | !int)"); }
		@Test public void test_3378() { testInvalid("{(any | int), {any}}","((any & int) | !int)"); }
		@Test public void test_3379() { testInvalid("{(any | int), {any}}","((int & int) | !int)"); }
		@Test public void test_3380() { testInvalid("{(any | int), {any}}","({int} | {any, any})"); }
		@Test public void test_3381() { testInvalid("{(any | int), {any}}","(!any | {any, any})"); }
		@Test public void test_3382() { testInvalid("{(any | int), {any}}","(!int | {any, any})"); }
		@Test public void test_3383() { testInvalid("{(any | int), {any}}","({any, int} | {any, any})"); }
		@Test public void test_3384() { testInvalid("{(any | int), {any}}","((int | any) | {any, any})"); }
		@Test public void test_3385() { testInvalid("{(any | int), {any}}","((any & any) | {any, any})"); }
		@Test public void test_3386() { testInvalid("{(any | int), {any}}","((any & int) | {any, any})"); }
		@Test public void test_3387() { testInvalid("{(any | int), {any}}","(!int | {int, any})"); }
		@Test public void test_3388() { testInvalid("{(any | int), {any}}","({any, int} | {int, any})"); }
		@Test public void test_3389() { testInvalid("{(any | int), {any}}","((any | any) | {int, any})"); }
		@Test public void test_3390() { testInvalid("{(any | int), {any}}","((int | any) | {int, any})"); }
		@Test public void test_3391() { testInvalid("{(any | int), {any}}","((any | int) | {int, any})"); }
		@Test public void test_3392() { testInvalid("{(any | int), {any}}","((int & any) | {int, any})"); }
		@Test public void test_3393() { testInvalid("{(any | int), {any}}","({any} | {any, int})"); }
		@Test public void test_3394() { testInvalid("{(any | int), {any}}","(!int | {any, int})"); }
		@Test public void test_3395() { testInvalid("{(any | int), {any}}","({any, int} | {any, int})"); }
		@Test public void test_3396() { testInvalid("{(any | int), {any}}","((any | any) | {any, int})"); }
		@Test public void test_3397() { testInvalid("{(any | int), {any}}","((any | int) | {any, int})"); }
		@Test public void test_3398() { testInvalid("{(any | int), {any}}","((int | int) | {any, int})"); }
		@Test public void test_3399() { testInvalid("{(any | int), {any}}","((int & any) | {any, int})"); }
		@Test public void test_3400() { testInvalid("{(any | int), {any}}","(!any | {int, int})"); }
		@Test public void test_3401() { testInvalid("{(any | int), {any}}","(!int | {int, int})"); }
		@Test public void test_3402() { testInvalid("{(any | int), {any}}","({any, any} | {int, int})"); }
		@Test public void test_3403() { testInvalid("{(any | int), {any}}","({any, int} | {int, int})"); }
		@Test public void test_3404() { testInvalid("{(any | int), {any}}","((any | any) | {int, int})"); }
		@Test public void test_3405() { testInvalid("{(any | int), {any}}","((int | int) | {int, int})"); }
		@Test public void test_3406() { testInvalid("{(any | int), {any}}","((int & any) | {int, int})"); }
		@Test public void test_3407() { testInvalid("{(any | int), {any}}","((any & int) | {int, int})"); }
		@Test public void test_3408() { testInvalid("{(any | int), {any}}","((int & int) | {int, int})"); }
		@Test public void test_3409() { testInvalid("{(any | int), {any}}","({any} | (any | any))"); }
		@Test public void test_3410() { testInvalid("{(any | int), {any}}","(!any | (any | any))"); }
		@Test public void test_3411() { testInvalid("{(any | int), {any}}","({any, any} | (any | any))"); }
		@Test public void test_3412() { testInvalid("{(any | int), {any}}","({any, int} | (any | any))"); }
		@Test public void test_3413() { testInvalid("{(any | int), {any}}","({int, int} | (any | any))"); }
		@Test public void test_3414() { testInvalid("{(any | int), {any}}","((int | any) | (any | any))"); }
		@Test public void test_3415() { testInvalid("{(any | int), {any}}","((any | int) | (any | any))"); }
		@Test public void test_3416() { testInvalid("{(any | int), {any}}","((any & int) | (any | any))"); }
		@Test public void test_3417() { testInvalid("{(any | int), {any}}","((int & int) | (any | any))"); }
		@Test public void test_3418() { testInvalid("{(any | int), {any}}","({any} | (int | any))"); }
		@Test public void test_3419() { testInvalid("{(any | int), {any}}","(!int | (int | any))"); }
		@Test public void test_3420() { testInvalid("{(any | int), {any}}","({int, any} | (int | any))"); }
		@Test public void test_3421() { testInvalid("{(any | int), {any}}","({any, int} | (int | any))"); }
		@Test public void test_3422() { testInvalid("{(any | int), {any}}","((int & any) | (int | any))"); }
		@Test public void test_3423() { testInvalid("{(any | int), {any}}","((any & int) | (int | any))"); }
		@Test public void test_3424() { testInvalid("{(any | int), {any}}","({any} | (any | int))"); }
		@Test public void test_3425() { testInvalid("{(any | int), {any}}","({int} | (any | int))"); }
		@Test public void test_3426() { testInvalid("{(any | int), {any}}","(!any | (any | int))"); }
		@Test public void test_3427() { testInvalid("{(any | int), {any}}","(!int | (any | int))"); }
		@Test public void test_3428() { testInvalid("{(any | int), {any}}","({any, int} | (any | int))"); }
		@Test public void test_3429() { testInvalid("{(any | int), {any}}","({int, int} | (any | int))"); }
		@Test public void test_3430() { testInvalid("{(any | int), {any}}","((int | any) | (any | int))"); }
		@Test public void test_3431() { testInvalid("{(any | int), {any}}","((any | int) | (any | int))"); }
		@Test public void test_3432() { testInvalid("{(any | int), {any}}","((int | int) | (any | int))"); }
		@Test public void test_3433() { testInvalid("{(any | int), {any}}","((any & any) | (any | int))"); }
		@Test public void test_3434() { testInvalid("{(any | int), {any}}","({int} | (int | int))"); }
		@Test public void test_3435() { testInvalid("{(any | int), {any}}","(!any | (int | int))"); }
		@Test public void test_3436() { testInvalid("{(any | int), {any}}","(!int | (int | int))"); }
		@Test public void test_3437() { testInvalid("{(any | int), {any}}","({int, any} | (int | int))"); }
		@Test public void test_3438() { testInvalid("{(any | int), {any}}","({any, int} | (int | int))"); }
		@Test public void test_3439() { testInvalid("{(any | int), {any}}","((any | int) | (int | int))"); }
		@Test public void test_3440() { testInvalid("{(any | int), {any}}","((int | int) | (int | int))"); }
		@Test public void test_3441() { testInvalid("{(any | int), {any}}","((any & any) | (int | int))"); }
		@Test public void test_3442() { testInvalid("{(any | int), {any}}","((int & any) | (int | int))"); }
		@Test public void test_3443() { testInvalid("{(any | int), {any}}","((int & int) | (int | int))"); }
		@Test public void test_3444() { testInvalid("{(any | int), {any}}","(!any | (any & any))"); }
		@Test public void test_3445() { testInvalid("{(any | int), {any}}","(!int | (any & any))"); }
		@Test public void test_3446() { testInvalid("{(any | int), {any}}","({any, any} | (any & any))"); }
		@Test public void test_3447() { testInvalid("{(any | int), {any}}","({int, any} | (any & any))"); }
		@Test public void test_3448() { testInvalid("{(any | int), {any}}","({any, int} | (any & any))"); }
		@Test public void test_3449() { testInvalid("{(any | int), {any}}","({int, int} | (any & any))"); }
		@Test public void test_3450() { testInvalid("{(any | int), {any}}","((int | any) | (any & any))"); }
		@Test public void test_3451() { testInvalid("{(any | int), {any}}","((int | int) | (any & any))"); }
		@Test public void test_3452() { testInvalid("{(any | int), {any}}","((int & any) | (any & any))"); }
		@Test public void test_3453() { testInvalid("{(any | int), {any}}","((any & int) | (any & any))"); }
		@Test public void test_3454() { testInvalid("{(any | int), {any}}","((int & int) | (any & any))"); }
		@Test public void test_3455() { testInvalid("{(any | int), {any}}","({any} | (int & any))"); }
		@Test public void test_3456() { testInvalid("{!int, {int}}","{int}"); }
		@Test public void test_3457() { testInvalid("{!int, {int}}","{any, any}"); }
		@Test public void test_3458() { testInvalid("{!int, {int}}","{int, int}"); }
		@Test public void test_3459() { testInvalid("{!int, {int}}","(any | int)"); }
		@Test public void test_3460() { testInvalid("{!int, {int}}","(int & any)"); }
		@Test public void test_3461() { testInvalid("{!int, {int}}","{{any}}"); }
		@Test public void test_3462() { testInvalid("{!int, {int}}","{{int, any}}"); }
		@Test public void test_3463() { testInvalid("{!int, {int}}","{{int, int}}"); }
		@Test public void test_3464() { testInvalid("{!int, {int}}","{(any | int)}"); }
		@Test public void test_3465() { testInvalid("{!int, {int}}","!{int, any}"); }
		@Test public void test_3466() { testInvalid("{!int, {int}}","!{int, int}"); }
		@Test public void test_3467() { testValid("{!int, {int}}","!(any | any)"); }
		@Test public void test_3468() { testValid("{!int, {int}}","!(any & any)"); }
		@Test public void test_3469() { testInvalid("{!int, {int}}","!(int & int)"); }
		@Test public void test_3470() { testInvalid("{!int, {int}}","{{int}, {any}}"); }
		@Test public void test_3471() { testInvalid("{!int, {int}}","{!int, {any}}"); }
		@Test public void test_3472() { testInvalid("{!int, {int}}","{{int, int}, {any}}"); }
		@Test public void test_3473() { testInvalid("{!int, {int}}","{(any | int), {any}}"); }
		@Test public void test_3474() { testValid("{!int, {int}}","{!int, {int}}"); }
		@Test public void test_3475() { testValid("{!int, {int}}","{{any, any}, {int}}"); }
		@Test public void test_3476() { testInvalid("{!int, {int}}","{(any | any), {int}}"); }
		@Test public void test_3477() { testInvalid("{!int, {int}}","{(any & any), {int}}"); }
		@Test public void test_3478() { testInvalid("{!int, {int}}","{(any & int), {int}}"); }
		@Test public void test_3479() { testInvalid("{!int, {int}}","{{any, any}, !int}"); }
		@Test public void test_3480() { testInvalid("{!int, {int}}","{{any, int}, !int}"); }
		@Test public void test_3481() { testInvalid("{!int, {int}}","{(any | any), !int}"); }
		@Test public void test_3482() { testInvalid("{!int, {int}}","{(int | any), !int}"); }
		@Test public void test_3483() { testInvalid("{!int, {int}}","{(any & any), !int}"); }
		@Test public void test_3484() { testInvalid("{!int, {int}}","{(int & any), !int}"); }
		@Test public void test_3485() { testInvalid("{!int, {int}}","{(int & int), !int}"); }
		@Test public void test_3486() { testInvalid("{!int, {int}}","{{any}, {any, any}}"); }
		@Test public void test_3487() { testInvalid("{!int, {int}}","{{int}, {any, any}}"); }
		@Test public void test_3488() { testInvalid("{!int, {int}}","{{int, int}, {any, any}}"); }
		@Test public void test_3489() { testInvalid("{!int, {int}}","{(any | any), {any, any}}"); }
		@Test public void test_3490() { testInvalid("{!int, {int}}","{(any | int), {any, any}}"); }
		@Test public void test_3491() { testInvalid("{!int, {int}}","{!int, {int, any}}"); }
		@Test public void test_3492() { testInvalid("{!int, {int}}","{{int, any}, {int, any}}"); }
		@Test public void test_3493() { testInvalid("{!int, {int}}","{{any, int}, {int, any}}"); }
		@Test public void test_3494() { testInvalid("{!int, {int}}","{(any & int), {int, any}}"); }
		@Test public void test_3495() { testInvalid("{!int, {int}}","{{any}, {any, int}}"); }
		@Test public void test_3496() { testInvalid("{!int, {int}}","{{int, int}, {any, int}}"); }
		@Test public void test_3497() { testInvalid("{!int, {int}}","{(int | int), {any, int}}"); }
		@Test public void test_3498() { testInvalid("{!int, {int}}","{(any & int), {any, int}}"); }
		@Test public void test_3499() { testInvalid("{!int, {int}}","{!int, {int, int}}"); }
		@Test public void test_3500() { testInvalid("{!int, {int}}","{{int, int}, {int, int}}"); }
		@Test public void test_3501() { testInvalid("{!int, {int}}","{(any | any), {int, int}}"); }
		@Test public void test_3502() { testInvalid("{!int, {int}}","{(int | any), {int, int}}"); }
		@Test public void test_3503() { testInvalid("{!int, {int}}","{(int & any), {int, int}}"); }
		@Test public void test_3504() { testInvalid("{!int, {int}}","{{int}, (any | any)}"); }
		@Test public void test_3505() { testInvalid("{!int, {int}}","{{int, any}, (any | any)}"); }
		@Test public void test_3506() { testInvalid("{!int, {int}}","{{any, int}, (any | any)}"); }
		@Test public void test_3507() { testInvalid("{!int, {int}}","{(any | any), (any | any)}"); }
		@Test public void test_3508() { testInvalid("{!int, {int}}","{(int | any), (any | any)}"); }
		@Test public void test_3509() { testInvalid("{!int, {int}}","{(int & int), (any | any)}"); }
		@Test public void test_3510() { testInvalid("{!int, {int}}","{!int, (int | any)}"); }
		@Test public void test_3511() { testInvalid("{!int, {int}}","{{int, int}, (int | any)}"); }
		@Test public void test_3512() { testInvalid("{!int, {int}}","{(any | any), (int | any)}"); }
		@Test public void test_3513() { testInvalid("{!int, {int}}","{(int | int), (int | any)}"); }
		@Test public void test_3514() { testInvalid("{!int, {int}}","{{any}, (any | int)}"); }
		@Test public void test_3515() { testInvalid("{!int, {int}}","{!int, (any | int)}"); }
		@Test public void test_3516() { testInvalid("{!int, {int}}","{(any | any), (any | int)}"); }
		@Test public void test_3517() { testInvalid("{!int, {int}}","{(any | int), (any | int)}"); }
		@Test public void test_3518() { testInvalid("{!int, {int}}","{(any & int), (any | int)}"); }
		@Test public void test_3519() { testInvalid("{!int, {int}}","{{int}, (int | int)}"); }
		@Test public void test_3520() { testInvalid("{!int, {int}}","{{any, any}, (int | int)}"); }
		@Test public void test_3521() { testInvalid("{!int, {int}}","{{int, int}, (int | int)}"); }
		@Test public void test_3522() { testInvalid("{!int, {int}}","{{int}, (any & any)}"); }
		@Test public void test_3523() { testInvalid("{!int, {int}}","{{int, any}, (any & any)}"); }
		@Test public void test_3524() { testInvalid("{!int, {int}}","{{any, int}, (any & any)}"); }
		@Test public void test_3525() { testInvalid("{!int, {int}}","{(int | any), (any & any)}"); }
		@Test public void test_3526() { testInvalid("{!int, {int}}","{(any & any), (any & any)}"); }
		@Test public void test_3527() { testInvalid("{!int, {int}}","{(int & any), (any & any)}"); }
		@Test public void test_3528() { testInvalid("{!int, {int}}","{{any}, (int & any)}"); }
		@Test public void test_3529() { testInvalid("{!int, {int}}","{{int}, (int & any)}"); }
		@Test public void test_3530() { testInvalid("{!int, {int}}","{{any, any}, (int & any)}"); }
		@Test public void test_3531() { testInvalid("{!int, {int}}","{{int, any}, (int & any)}"); }
		@Test public void test_3532() { testInvalid("{!int, {int}}","{(any | int), (int & any)}"); }
		@Test public void test_3533() { testInvalid("{!int, {int}}","{(any & any), (int & any)}"); }
		@Test public void test_3534() { testInvalid("{!int, {int}}","{(int & any), (int & any)}"); }
		@Test public void test_3535() { testInvalid("{!int, {int}}","{(int & int), (int & any)}"); }
		@Test public void test_3536() { testInvalid("{!int, {int}}","{{int, any}, (any & int)}"); }
		@Test public void test_3537() { testInvalid("{!int, {int}}","{(any & any), (any & int)}"); }
		@Test public void test_3538() { testInvalid("{!int, {int}}","{{any, int}, (int & int)}"); }
		@Test public void test_3539() { testInvalid("{!int, {int}}","{(int | int), (int & int)}"); }
		@Test public void test_3540() { testInvalid("{!int, {int}}","{(any & any), (int & int)}"); }
		@Test public void test_3541() { testInvalid("{!int, {int}}","{(any & int), (int & int)}"); }
		@Test public void test_3542() { testInvalid("{!int, {int}}","{(int & int), (int & int)}"); }
		@Test public void test_3543() { testInvalid("{!int, {int}}","(!int | {any})"); }
		@Test public void test_3544() { testInvalid("{!int, {int}}","({any, any} | {any})"); }
		@Test public void test_3545() { testInvalid("{!int, {int}}","((any | any) | {any})"); }
		@Test public void test_3546() { testInvalid("{!int, {int}}","((int | any) | {any})"); }
		@Test public void test_3547() { testInvalid("{!int, {int}}","((any & any) | {any})"); }
		@Test public void test_3548() { testInvalid("{!int, {int}}","((int & any) | {any})"); }
		@Test public void test_3549() { testInvalid("{!int, {int}}","((any & int) | {any})"); }
		@Test public void test_3550() { testInvalid("{!int, {int}}","({int} | {int})"); }
		@Test public void test_3551() { testInvalid("{!int, {int}}","(!any | {int})"); }
		@Test public void test_3552() { testInvalid("{!int, {int}}","(!int | {int})"); }
		@Test public void test_3553() { testInvalid("{!int, {int}}","({any, int} | {int})"); }
		@Test public void test_3554() { testInvalid("{!int, {int}}","((int & any) | {int})"); }
		@Test public void test_3555() { testInvalid("{!int, {int}}","((any & int) | {int})"); }
		@Test public void test_3556() { testInvalid("{!int, {int}}","((int & int) | {int})"); }
		@Test public void test_3557() { testInvalid("{!int, {int}}","({any} | !any)"); }
		@Test public void test_3558() { testInvalid("{!int, {int}}","({int} | !any)"); }
		@Test public void test_3559() { testInvalid("{!int, {int}}","({any, any} | !any)"); }
		@Test public void test_3560() { testInvalid("{!int, {int}}","({int, int} | !any)"); }
		@Test public void test_3561() { testInvalid("{!int, {int}}","((any | any) | !any)"); }
		@Test public void test_3562() { testInvalid("{!int, {int}}","((int | any) | !any)"); }
		@Test public void test_3563() { testInvalid("{!int, {int}}","((int | int) | !any)"); }
		@Test public void test_3564() { testInvalid("{!int, {int}}","((int & int) | !any)"); }
		@Test public void test_3565() { testInvalid("{!int, {int}}","(!int | !int)"); }
		@Test public void test_3566() { testInvalid("{!int, {int}}","({any, any} | !int)"); }
		@Test public void test_3567() { testInvalid("{!int, {int}}","({int, int} | !int)"); }
		@Test public void test_3568() { testInvalid("{!int, {int}}","((int | any) | !int)"); }
		@Test public void test_3569() { testInvalid("{!int, {int}}","((any | int) | !int)"); }
		@Test public void test_3570() { testInvalid("{!int, {int}}","((any & int) | !int)"); }
		@Test public void test_3571() { testInvalid("{!int, {int}}","((int & int) | !int)"); }
		@Test public void test_3572() { testInvalid("{!int, {int}}","({int} | {any, any})"); }
		@Test public void test_3573() { testInvalid("{!int, {int}}","(!any | {any, any})"); }
		@Test public void test_3574() { testInvalid("{!int, {int}}","(!int | {any, any})"); }
		@Test public void test_3575() { testInvalid("{!int, {int}}","({any, int} | {any, any})"); }
		@Test public void test_3576() { testInvalid("{!int, {int}}","((int | any) | {any, any})"); }
		@Test public void test_3577() { testInvalid("{!int, {int}}","((any & any) | {any, any})"); }
		@Test public void test_3578() { testInvalid("{!int, {int}}","((any & int) | {any, any})"); }
		@Test public void test_3579() { testInvalid("{!int, {int}}","(!int | {int, any})"); }
		@Test public void test_3580() { testInvalid("{!int, {int}}","({any, int} | {int, any})"); }
		@Test public void test_3581() { testInvalid("{!int, {int}}","((any | any) | {int, any})"); }
		@Test public void test_3582() { testInvalid("{!int, {int}}","((int | any) | {int, any})"); }
		@Test public void test_3583() { testInvalid("{!int, {int}}","((any | int) | {int, any})"); }
		@Test public void test_3584() { testInvalid("{!int, {int}}","((int & any) | {int, any})"); }
		@Test public void test_3585() { testInvalid("{!int, {int}}","({any} | {any, int})"); }
		@Test public void test_3586() { testInvalid("{!int, {int}}","(!int | {any, int})"); }
		@Test public void test_3587() { testInvalid("{!int, {int}}","({any, int} | {any, int})"); }
		@Test public void test_3588() { testInvalid("{!int, {int}}","((any | any) | {any, int})"); }
		@Test public void test_3589() { testInvalid("{!int, {int}}","((any | int) | {any, int})"); }
		@Test public void test_3590() { testInvalid("{!int, {int}}","((int | int) | {any, int})"); }
		@Test public void test_3591() { testInvalid("{!int, {int}}","((int & any) | {any, int})"); }
		@Test public void test_3592() { testInvalid("{!int, {int}}","(!any | {int, int})"); }
		@Test public void test_3593() { testInvalid("{!int, {int}}","(!int | {int, int})"); }
		@Test public void test_3594() { testInvalid("{!int, {int}}","({any, any} | {int, int})"); }
		@Test public void test_3595() { testInvalid("{!int, {int}}","({any, int} | {int, int})"); }
		@Test public void test_3596() { testInvalid("{!int, {int}}","((any | any) | {int, int})"); }
		@Test public void test_3597() { testInvalid("{!int, {int}}","((int | int) | {int, int})"); }
		@Test public void test_3598() { testInvalid("{!int, {int}}","((int & any) | {int, int})"); }
		@Test public void test_3599() { testInvalid("{!int, {int}}","((any & int) | {int, int})"); }
		@Test public void test_3600() { testInvalid("{!int, {int}}","((int & int) | {int, int})"); }
		@Test public void test_3601() { testInvalid("{!int, {int}}","({any} | (any | any))"); }
		@Test public void test_3602() { testInvalid("{!int, {int}}","(!any | (any | any))"); }
		@Test public void test_3603() { testInvalid("{!int, {int}}","({any, any} | (any | any))"); }
		@Test public void test_3604() { testInvalid("{!int, {int}}","({any, int} | (any | any))"); }
		@Test public void test_3605() { testInvalid("{!int, {int}}","({int, int} | (any | any))"); }
		@Test public void test_3606() { testInvalid("{!int, {int}}","((int | any) | (any | any))"); }
		@Test public void test_3607() { testInvalid("{!int, {int}}","((any | int) | (any | any))"); }
		@Test public void test_3608() { testInvalid("{!int, {int}}","((any & int) | (any | any))"); }
		@Test public void test_3609() { testInvalid("{!int, {int}}","((int & int) | (any | any))"); }
		@Test public void test_3610() { testInvalid("{!int, {int}}","({any} | (int | any))"); }
		@Test public void test_3611() { testInvalid("{!int, {int}}","(!int | (int | any))"); }
		@Test public void test_3612() { testInvalid("{!int, {int}}","({int, any} | (int | any))"); }
		@Test public void test_3613() { testInvalid("{!int, {int}}","({any, int} | (int | any))"); }
		@Test public void test_3614() { testInvalid("{!int, {int}}","((int & any) | (int | any))"); }
		@Test public void test_3615() { testInvalid("{!int, {int}}","((any & int) | (int | any))"); }
		@Test public void test_3616() { testInvalid("{!int, {int}}","({any} | (any | int))"); }
		@Test public void test_3617() { testInvalid("{!int, {int}}","({int} | (any | int))"); }
		@Test public void test_3618() { testInvalid("{!int, {int}}","(!any | (any | int))"); }
		@Test public void test_3619() { testInvalid("{!int, {int}}","(!int | (any | int))"); }
		@Test public void test_3620() { testInvalid("{!int, {int}}","({any, int} | (any | int))"); }
		@Test public void test_3621() { testInvalid("{!int, {int}}","({int, int} | (any | int))"); }
		@Test public void test_3622() { testInvalid("{!int, {int}}","((int | any) | (any | int))"); }
		@Test public void test_3623() { testInvalid("{!int, {int}}","((any | int) | (any | int))"); }
		@Test public void test_3624() { testInvalid("{!int, {int}}","((int | int) | (any | int))"); }
		@Test public void test_3625() { testInvalid("{!int, {int}}","((any & any) | (any | int))"); }
		@Test public void test_3626() { testInvalid("{!int, {int}}","({int} | (int | int))"); }
		@Test public void test_3627() { testInvalid("{!int, {int}}","(!any | (int | int))"); }
		@Test public void test_3628() { testInvalid("{!int, {int}}","(!int | (int | int))"); }
		@Test public void test_3629() { testInvalid("{!int, {int}}","({int, any} | (int | int))"); }
		@Test public void test_3630() { testInvalid("{!int, {int}}","({any, int} | (int | int))"); }
		@Test public void test_3631() { testInvalid("{!int, {int}}","((any | int) | (int | int))"); }
		@Test public void test_3632() { testInvalid("{!int, {int}}","((int | int) | (int | int))"); }
		@Test public void test_3633() { testInvalid("{!int, {int}}","((any & any) | (int | int))"); }
		@Test public void test_3634() { testInvalid("{!int, {int}}","((int & any) | (int | int))"); }
		@Test public void test_3635() { testInvalid("{!int, {int}}","((int & int) | (int | int))"); }
		@Test public void test_3636() { testInvalid("{!int, {int}}","(!any | (any & any))"); }
		@Test public void test_3637() { testInvalid("{!int, {int}}","(!int | (any & any))"); }
		@Test public void test_3638() { testInvalid("{!int, {int}}","({any, any} | (any & any))"); }
		@Test public void test_3639() { testInvalid("{!int, {int}}","({int, any} | (any & any))"); }
		@Test public void test_3640() { testInvalid("{!int, {int}}","({any, int} | (any & any))"); }
		@Test public void test_3641() { testInvalid("{!int, {int}}","({int, int} | (any & any))"); }
		@Test public void test_3642() { testInvalid("{!int, {int}}","((int | any) | (any & any))"); }
		@Test public void test_3643() { testInvalid("{!int, {int}}","((int | int) | (any & any))"); }
		@Test public void test_3644() { testInvalid("{!int, {int}}","((int & any) | (any & any))"); }
		@Test public void test_3645() { testInvalid("{!int, {int}}","((any & int) | (any & any))"); }
		@Test public void test_3646() { testInvalid("{!int, {int}}","((int & int) | (any & any))"); }
		@Test public void test_3647() { testInvalid("{!int, {int}}","({any} | (int & any))"); }
		@Test public void test_3648() { testInvalid("{{any, any}, {int}}","{int}"); }
		@Test public void test_3649() { testInvalid("{{any, any}, {int}}","{any, any}"); }
		@Test public void test_3650() { testInvalid("{{any, any}, {int}}","{int, int}"); }
		@Test public void test_3651() { testInvalid("{{any, any}, {int}}","(any | int)"); }
		@Test public void test_3652() { testInvalid("{{any, any}, {int}}","(int & any)"); }
		@Test public void test_3653() { testInvalid("{{any, any}, {int}}","{{any}}"); }
		@Test public void test_3654() { testInvalid("{{any, any}, {int}}","{{int, any}}"); }
		@Test public void test_3655() { testInvalid("{{any, any}, {int}}","{{int, int}}"); }
		@Test public void test_3656() { testInvalid("{{any, any}, {int}}","{(any | int)}"); }
		@Test public void test_3657() { testInvalid("{{any, any}, {int}}","!{int, any}"); }
		@Test public void test_3658() { testInvalid("{{any, any}, {int}}","!{int, int}"); }
		@Test public void test_3659() { testValid("{{any, any}, {int}}","!(any | any)"); }
		@Test public void test_3660() { testValid("{{any, any}, {int}}","!(any & any)"); }
		@Test public void test_3661() { testInvalid("{{any, any}, {int}}","!(int & int)"); }
		@Test public void test_3662() { testInvalid("{{any, any}, {int}}","{{int}, {any}}"); }
		@Test public void test_3663() { testInvalid("{{any, any}, {int}}","{!int, {any}}"); }
		@Test public void test_3664() { testInvalid("{{any, any}, {int}}","{{int, int}, {any}}"); }
		@Test public void test_3665() { testInvalid("{{any, any}, {int}}","{(any | int), {any}}"); }
		@Test public void test_3666() { testInvalid("{{any, any}, {int}}","{!int, {int}}"); }
		@Test public void test_3667() { testValid("{{any, any}, {int}}","{{any, any}, {int}}"); }
		@Test public void test_3668() { testInvalid("{{any, any}, {int}}","{(any | any), {int}}"); }
		@Test public void test_3669() { testInvalid("{{any, any}, {int}}","{(any & any), {int}}"); }
		@Test public void test_3670() { testInvalid("{{any, any}, {int}}","{(any & int), {int}}"); }
		@Test public void test_3671() { testInvalid("{{any, any}, {int}}","{{any, any}, !int}"); }
		@Test public void test_3672() { testInvalid("{{any, any}, {int}}","{{any, int}, !int}"); }
		@Test public void test_3673() { testInvalid("{{any, any}, {int}}","{(any | any), !int}"); }
		@Test public void test_3674() { testInvalid("{{any, any}, {int}}","{(int | any), !int}"); }
		@Test public void test_3675() { testInvalid("{{any, any}, {int}}","{(any & any), !int}"); }
		@Test public void test_3676() { testInvalid("{{any, any}, {int}}","{(int & any), !int}"); }
		@Test public void test_3677() { testInvalid("{{any, any}, {int}}","{(int & int), !int}"); }
		@Test public void test_3678() { testInvalid("{{any, any}, {int}}","{{any}, {any, any}}"); }
		@Test public void test_3679() { testInvalid("{{any, any}, {int}}","{{int}, {any, any}}"); }
		@Test public void test_3680() { testInvalid("{{any, any}, {int}}","{{int, int}, {any, any}}"); }
		@Test public void test_3681() { testInvalid("{{any, any}, {int}}","{(any | any), {any, any}}"); }
		@Test public void test_3682() { testInvalid("{{any, any}, {int}}","{(any | int), {any, any}}"); }
		@Test public void test_3683() { testInvalid("{{any, any}, {int}}","{!int, {int, any}}"); }
		@Test public void test_3684() { testInvalid("{{any, any}, {int}}","{{int, any}, {int, any}}"); }
		@Test public void test_3685() { testInvalid("{{any, any}, {int}}","{{any, int}, {int, any}}"); }
		@Test public void test_3686() { testInvalid("{{any, any}, {int}}","{(any & int), {int, any}}"); }
		@Test public void test_3687() { testInvalid("{{any, any}, {int}}","{{any}, {any, int}}"); }
		@Test public void test_3688() { testInvalid("{{any, any}, {int}}","{{int, int}, {any, int}}"); }
		@Test public void test_3689() { testInvalid("{{any, any}, {int}}","{(int | int), {any, int}}"); }
		@Test public void test_3690() { testInvalid("{{any, any}, {int}}","{(any & int), {any, int}}"); }
		@Test public void test_3691() { testInvalid("{{any, any}, {int}}","{!int, {int, int}}"); }
		@Test public void test_3692() { testInvalid("{{any, any}, {int}}","{{int, int}, {int, int}}"); }
		@Test public void test_3693() { testInvalid("{{any, any}, {int}}","{(any | any), {int, int}}"); }
		@Test public void test_3694() { testInvalid("{{any, any}, {int}}","{(int | any), {int, int}}"); }
		@Test public void test_3695() { testInvalid("{{any, any}, {int}}","{(int & any), {int, int}}"); }
		@Test public void test_3696() { testInvalid("{{any, any}, {int}}","{{int}, (any | any)}"); }
		@Test public void test_3697() { testInvalid("{{any, any}, {int}}","{{int, any}, (any | any)}"); }
		@Test public void test_3698() { testInvalid("{{any, any}, {int}}","{{any, int}, (any | any)}"); }
		@Test public void test_3699() { testInvalid("{{any, any}, {int}}","{(any | any), (any | any)}"); }
		@Test public void test_3700() { testInvalid("{{any, any}, {int}}","{(int | any), (any | any)}"); }
		@Test public void test_3701() { testInvalid("{{any, any}, {int}}","{(int & int), (any | any)}"); }
		@Test public void test_3702() { testInvalid("{{any, any}, {int}}","{!int, (int | any)}"); }
		@Test public void test_3703() { testInvalid("{{any, any}, {int}}","{{int, int}, (int | any)}"); }
		@Test public void test_3704() { testInvalid("{{any, any}, {int}}","{(any | any), (int | any)}"); }
		@Test public void test_3705() { testInvalid("{{any, any}, {int}}","{(int | int), (int | any)}"); }
		@Test public void test_3706() { testInvalid("{{any, any}, {int}}","{{any}, (any | int)}"); }
		@Test public void test_3707() { testInvalid("{{any, any}, {int}}","{!int, (any | int)}"); }
		@Test public void test_3708() { testInvalid("{{any, any}, {int}}","{(any | any), (any | int)}"); }
		@Test public void test_3709() { testInvalid("{{any, any}, {int}}","{(any | int), (any | int)}"); }
		@Test public void test_3710() { testInvalid("{{any, any}, {int}}","{(any & int), (any | int)}"); }
		@Test public void test_3711() { testInvalid("{{any, any}, {int}}","{{int}, (int | int)}"); }
		@Test public void test_3712() { testInvalid("{{any, any}, {int}}","{{any, any}, (int | int)}"); }
		@Test public void test_3713() { testInvalid("{{any, any}, {int}}","{{int, int}, (int | int)}"); }
		@Test public void test_3714() { testInvalid("{{any, any}, {int}}","{{int}, (any & any)}"); }
		@Test public void test_3715() { testInvalid("{{any, any}, {int}}","{{int, any}, (any & any)}"); }
		@Test public void test_3716() { testInvalid("{{any, any}, {int}}","{{any, int}, (any & any)}"); }
		@Test public void test_3717() { testInvalid("{{any, any}, {int}}","{(int | any), (any & any)}"); }
		@Test public void test_3718() { testInvalid("{{any, any}, {int}}","{(any & any), (any & any)}"); }
		@Test public void test_3719() { testInvalid("{{any, any}, {int}}","{(int & any), (any & any)}"); }
		@Test public void test_3720() { testInvalid("{{any, any}, {int}}","{{any}, (int & any)}"); }
		@Test public void test_3721() { testInvalid("{{any, any}, {int}}","{{int}, (int & any)}"); }
		@Test public void test_3722() { testInvalid("{{any, any}, {int}}","{{any, any}, (int & any)}"); }
		@Test public void test_3723() { testInvalid("{{any, any}, {int}}","{{int, any}, (int & any)}"); }
		@Test public void test_3724() { testInvalid("{{any, any}, {int}}","{(any | int), (int & any)}"); }
		@Test public void test_3725() { testInvalid("{{any, any}, {int}}","{(any & any), (int & any)}"); }
		@Test public void test_3726() { testInvalid("{{any, any}, {int}}","{(int & any), (int & any)}"); }
		@Test public void test_3727() { testInvalid("{{any, any}, {int}}","{(int & int), (int & any)}"); }
		@Test public void test_3728() { testInvalid("{{any, any}, {int}}","{{int, any}, (any & int)}"); }
		@Test public void test_3729() { testInvalid("{{any, any}, {int}}","{(any & any), (any & int)}"); }
		@Test public void test_3730() { testInvalid("{{any, any}, {int}}","{{any, int}, (int & int)}"); }
		@Test public void test_3731() { testInvalid("{{any, any}, {int}}","{(int | int), (int & int)}"); }
		@Test public void test_3732() { testInvalid("{{any, any}, {int}}","{(any & any), (int & int)}"); }
		@Test public void test_3733() { testInvalid("{{any, any}, {int}}","{(any & int), (int & int)}"); }
		@Test public void test_3734() { testInvalid("{{any, any}, {int}}","{(int & int), (int & int)}"); }
		@Test public void test_3735() { testInvalid("{{any, any}, {int}}","(!int | {any})"); }
		@Test public void test_3736() { testInvalid("{{any, any}, {int}}","({any, any} | {any})"); }
		@Test public void test_3737() { testInvalid("{{any, any}, {int}}","((any | any) | {any})"); }
		@Test public void test_3738() { testInvalid("{{any, any}, {int}}","((int | any) | {any})"); }
		@Test public void test_3739() { testInvalid("{{any, any}, {int}}","((any & any) | {any})"); }
		@Test public void test_3740() { testInvalid("{{any, any}, {int}}","((int & any) | {any})"); }
		@Test public void test_3741() { testInvalid("{{any, any}, {int}}","((any & int) | {any})"); }
		@Test public void test_3742() { testInvalid("{{any, any}, {int}}","({int} | {int})"); }
		@Test public void test_3743() { testInvalid("{{any, any}, {int}}","(!any | {int})"); }
		@Test public void test_3744() { testInvalid("{{any, any}, {int}}","(!int | {int})"); }
		@Test public void test_3745() { testInvalid("{{any, any}, {int}}","({any, int} | {int})"); }
		@Test public void test_3746() { testInvalid("{{any, any}, {int}}","((int & any) | {int})"); }
		@Test public void test_3747() { testInvalid("{{any, any}, {int}}","((any & int) | {int})"); }
		@Test public void test_3748() { testInvalid("{{any, any}, {int}}","((int & int) | {int})"); }
		@Test public void test_3749() { testInvalid("{{any, any}, {int}}","({any} | !any)"); }
		@Test public void test_3750() { testInvalid("{{any, any}, {int}}","({int} | !any)"); }
		@Test public void test_3751() { testInvalid("{{any, any}, {int}}","({any, any} | !any)"); }
		@Test public void test_3752() { testInvalid("{{any, any}, {int}}","({int, int} | !any)"); }
		@Test public void test_3753() { testInvalid("{{any, any}, {int}}","((any | any) | !any)"); }
		@Test public void test_3754() { testInvalid("{{any, any}, {int}}","((int | any) | !any)"); }
		@Test public void test_3755() { testInvalid("{{any, any}, {int}}","((int | int) | !any)"); }
		@Test public void test_3756() { testInvalid("{{any, any}, {int}}","((int & int) | !any)"); }
		@Test public void test_3757() { testInvalid("{{any, any}, {int}}","(!int | !int)"); }
		@Test public void test_3758() { testInvalid("{{any, any}, {int}}","({any, any} | !int)"); }
		@Test public void test_3759() { testInvalid("{{any, any}, {int}}","({int, int} | !int)"); }
		@Test public void test_3760() { testInvalid("{{any, any}, {int}}","((int | any) | !int)"); }
		@Test public void test_3761() { testInvalid("{{any, any}, {int}}","((any | int) | !int)"); }
		@Test public void test_3762() { testInvalid("{{any, any}, {int}}","((any & int) | !int)"); }
		@Test public void test_3763() { testInvalid("{{any, any}, {int}}","((int & int) | !int)"); }
		@Test public void test_3764() { testInvalid("{{any, any}, {int}}","({int} | {any, any})"); }
		@Test public void test_3765() { testInvalid("{{any, any}, {int}}","(!any | {any, any})"); }
		@Test public void test_3766() { testInvalid("{{any, any}, {int}}","(!int | {any, any})"); }
		@Test public void test_3767() { testInvalid("{{any, any}, {int}}","({any, int} | {any, any})"); }
		@Test public void test_3768() { testInvalid("{{any, any}, {int}}","((int | any) | {any, any})"); }
		@Test public void test_3769() { testInvalid("{{any, any}, {int}}","((any & any) | {any, any})"); }
		@Test public void test_3770() { testInvalid("{{any, any}, {int}}","((any & int) | {any, any})"); }
		@Test public void test_3771() { testInvalid("{{any, any}, {int}}","(!int | {int, any})"); }
		@Test public void test_3772() { testInvalid("{{any, any}, {int}}","({any, int} | {int, any})"); }
		@Test public void test_3773() { testInvalid("{{any, any}, {int}}","((any | any) | {int, any})"); }
		@Test public void test_3774() { testInvalid("{{any, any}, {int}}","((int | any) | {int, any})"); }
		@Test public void test_3775() { testInvalid("{{any, any}, {int}}","((any | int) | {int, any})"); }
		@Test public void test_3776() { testInvalid("{{any, any}, {int}}","((int & any) | {int, any})"); }
		@Test public void test_3777() { testInvalid("{{any, any}, {int}}","({any} | {any, int})"); }
		@Test public void test_3778() { testInvalid("{{any, any}, {int}}","(!int | {any, int})"); }
		@Test public void test_3779() { testInvalid("{{any, any}, {int}}","({any, int} | {any, int})"); }
		@Test public void test_3780() { testInvalid("{{any, any}, {int}}","((any | any) | {any, int})"); }
		@Test public void test_3781() { testInvalid("{{any, any}, {int}}","((any | int) | {any, int})"); }
		@Test public void test_3782() { testInvalid("{{any, any}, {int}}","((int | int) | {any, int})"); }
		@Test public void test_3783() { testInvalid("{{any, any}, {int}}","((int & any) | {any, int})"); }
		@Test public void test_3784() { testInvalid("{{any, any}, {int}}","(!any | {int, int})"); }
		@Test public void test_3785() { testInvalid("{{any, any}, {int}}","(!int | {int, int})"); }
		@Test public void test_3786() { testInvalid("{{any, any}, {int}}","({any, any} | {int, int})"); }
		@Test public void test_3787() { testInvalid("{{any, any}, {int}}","({any, int} | {int, int})"); }
		@Test public void test_3788() { testInvalid("{{any, any}, {int}}","((any | any) | {int, int})"); }
		@Test public void test_3789() { testInvalid("{{any, any}, {int}}","((int | int) | {int, int})"); }
		@Test public void test_3790() { testInvalid("{{any, any}, {int}}","((int & any) | {int, int})"); }
		@Test public void test_3791() { testInvalid("{{any, any}, {int}}","((any & int) | {int, int})"); }
		@Test public void test_3792() { testInvalid("{{any, any}, {int}}","((int & int) | {int, int})"); }
		@Test public void test_3793() { testInvalid("{{any, any}, {int}}","({any} | (any | any))"); }
		@Test public void test_3794() { testInvalid("{{any, any}, {int}}","(!any | (any | any))"); }
		@Test public void test_3795() { testInvalid("{{any, any}, {int}}","({any, any} | (any | any))"); }
		@Test public void test_3796() { testInvalid("{{any, any}, {int}}","({any, int} | (any | any))"); }
		@Test public void test_3797() { testInvalid("{{any, any}, {int}}","({int, int} | (any | any))"); }
		@Test public void test_3798() { testInvalid("{{any, any}, {int}}","((int | any) | (any | any))"); }
		@Test public void test_3799() { testInvalid("{{any, any}, {int}}","((any | int) | (any | any))"); }
		@Test public void test_3800() { testInvalid("{{any, any}, {int}}","((any & int) | (any | any))"); }
		@Test public void test_3801() { testInvalid("{{any, any}, {int}}","((int & int) | (any | any))"); }
		@Test public void test_3802() { testInvalid("{{any, any}, {int}}","({any} | (int | any))"); }
		@Test public void test_3803() { testInvalid("{{any, any}, {int}}","(!int | (int | any))"); }
		@Test public void test_3804() { testInvalid("{{any, any}, {int}}","({int, any} | (int | any))"); }
		@Test public void test_3805() { testInvalid("{{any, any}, {int}}","({any, int} | (int | any))"); }
		@Test public void test_3806() { testInvalid("{{any, any}, {int}}","((int & any) | (int | any))"); }
		@Test public void test_3807() { testInvalid("{{any, any}, {int}}","((any & int) | (int | any))"); }
		@Test public void test_3808() { testInvalid("{{any, any}, {int}}","({any} | (any | int))"); }
		@Test public void test_3809() { testInvalid("{{any, any}, {int}}","({int} | (any | int))"); }
		@Test public void test_3810() { testInvalid("{{any, any}, {int}}","(!any | (any | int))"); }
		@Test public void test_3811() { testInvalid("{{any, any}, {int}}","(!int | (any | int))"); }
		@Test public void test_3812() { testInvalid("{{any, any}, {int}}","({any, int} | (any | int))"); }
		@Test public void test_3813() { testInvalid("{{any, any}, {int}}","({int, int} | (any | int))"); }
		@Test public void test_3814() { testInvalid("{{any, any}, {int}}","((int | any) | (any | int))"); }
		@Test public void test_3815() { testInvalid("{{any, any}, {int}}","((any | int) | (any | int))"); }
		@Test public void test_3816() { testInvalid("{{any, any}, {int}}","((int | int) | (any | int))"); }
		@Test public void test_3817() { testInvalid("{{any, any}, {int}}","((any & any) | (any | int))"); }
		@Test public void test_3818() { testInvalid("{{any, any}, {int}}","({int} | (int | int))"); }
		@Test public void test_3819() { testInvalid("{{any, any}, {int}}","(!any | (int | int))"); }
		@Test public void test_3820() { testInvalid("{{any, any}, {int}}","(!int | (int | int))"); }
		@Test public void test_3821() { testInvalid("{{any, any}, {int}}","({int, any} | (int | int))"); }
		@Test public void test_3822() { testInvalid("{{any, any}, {int}}","({any, int} | (int | int))"); }
		@Test public void test_3823() { testInvalid("{{any, any}, {int}}","((any | int) | (int | int))"); }
		@Test public void test_3824() { testInvalid("{{any, any}, {int}}","((int | int) | (int | int))"); }
		@Test public void test_3825() { testInvalid("{{any, any}, {int}}","((any & any) | (int | int))"); }
		@Test public void test_3826() { testInvalid("{{any, any}, {int}}","((int & any) | (int | int))"); }
		@Test public void test_3827() { testInvalid("{{any, any}, {int}}","((int & int) | (int | int))"); }
		@Test public void test_3828() { testInvalid("{{any, any}, {int}}","(!any | (any & any))"); }
		@Test public void test_3829() { testInvalid("{{any, any}, {int}}","(!int | (any & any))"); }
		@Test public void test_3830() { testInvalid("{{any, any}, {int}}","({any, any} | (any & any))"); }
		@Test public void test_3831() { testInvalid("{{any, any}, {int}}","({int, any} | (any & any))"); }
		@Test public void test_3832() { testInvalid("{{any, any}, {int}}","({any, int} | (any & any))"); }
		@Test public void test_3833() { testInvalid("{{any, any}, {int}}","({int, int} | (any & any))"); }
		@Test public void test_3834() { testInvalid("{{any, any}, {int}}","((int | any) | (any & any))"); }
		@Test public void test_3835() { testInvalid("{{any, any}, {int}}","((int | int) | (any & any))"); }
		@Test public void test_3836() { testInvalid("{{any, any}, {int}}","((int & any) | (any & any))"); }
		@Test public void test_3837() { testInvalid("{{any, any}, {int}}","((any & int) | (any & any))"); }
		@Test public void test_3838() { testInvalid("{{any, any}, {int}}","((int & int) | (any & any))"); }
		@Test public void test_3839() { testInvalid("{{any, any}, {int}}","({any} | (int & any))"); }
		@Test public void test_3840() { testInvalid("{(any | any), {int}}","{int}"); }
		@Test public void test_3841() { testInvalid("{(any | any), {int}}","{any, any}"); }
		@Test public void test_3842() { testInvalid("{(any | any), {int}}","{int, int}"); }
		@Test public void test_3843() { testInvalid("{(any | any), {int}}","(any | int)"); }
		@Test public void test_3844() { testInvalid("{(any | any), {int}}","(int & any)"); }
		@Test public void test_3845() { testInvalid("{(any | any), {int}}","{{any}}"); }
		@Test public void test_3846() { testInvalid("{(any | any), {int}}","{{int, any}}"); }
		@Test public void test_3847() { testInvalid("{(any | any), {int}}","{{int, int}}"); }
		@Test public void test_3848() { testInvalid("{(any | any), {int}}","{(any | int)}"); }
		@Test public void test_3849() { testInvalid("{(any | any), {int}}","!{int, any}"); }
		@Test public void test_3850() { testInvalid("{(any | any), {int}}","!{int, int}"); }
		@Test public void test_3851() { testValid("{(any | any), {int}}","!(any | any)"); }
		@Test public void test_3852() { testValid("{(any | any), {int}}","!(any & any)"); }
		@Test public void test_3853() { testInvalid("{(any | any), {int}}","!(int & int)"); }
		@Test public void test_3854() { testInvalid("{(any | any), {int}}","{{int}, {any}}"); }
		@Test public void test_3855() { testInvalid("{(any | any), {int}}","{!int, {any}}"); }
		@Test public void test_3856() { testInvalid("{(any | any), {int}}","{{int, int}, {any}}"); }
		@Test public void test_3857() { testInvalid("{(any | any), {int}}","{(any | int), {any}}"); }
		@Test public void test_3858() { testValid("{(any | any), {int}}","{!int, {int}}"); }
		@Test public void test_3859() { testValid("{(any | any), {int}}","{{any, any}, {int}}"); }
		@Test public void test_3860() { testValid("{(any | any), {int}}","{(any | any), {int}}"); }
		@Test public void test_3861() { testValid("{(any | any), {int}}","{(any & any), {int}}"); }
		@Test public void test_3862() { testValid("{(any | any), {int}}","{(any & int), {int}}"); }
		@Test public void test_3863() { testInvalid("{(any | any), {int}}","{{any, any}, !int}"); }
		@Test public void test_3864() { testInvalid("{(any | any), {int}}","{{any, int}, !int}"); }
		@Test public void test_3865() { testInvalid("{(any | any), {int}}","{(any | any), !int}"); }
		@Test public void test_3866() { testInvalid("{(any | any), {int}}","{(int | any), !int}"); }
		@Test public void test_3867() { testInvalid("{(any | any), {int}}","{(any & any), !int}"); }
		@Test public void test_3868() { testInvalid("{(any | any), {int}}","{(int & any), !int}"); }
		@Test public void test_3869() { testInvalid("{(any | any), {int}}","{(int & int), !int}"); }
		@Test public void test_3870() { testInvalid("{(any | any), {int}}","{{any}, {any, any}}"); }
		@Test public void test_3871() { testInvalid("{(any | any), {int}}","{{int}, {any, any}}"); }
		@Test public void test_3872() { testInvalid("{(any | any), {int}}","{{int, int}, {any, any}}"); }
		@Test public void test_3873() { testInvalid("{(any | any), {int}}","{(any | any), {any, any}}"); }
		@Test public void test_3874() { testInvalid("{(any | any), {int}}","{(any | int), {any, any}}"); }
		@Test public void test_3875() { testInvalid("{(any | any), {int}}","{!int, {int, any}}"); }
		@Test public void test_3876() { testInvalid("{(any | any), {int}}","{{int, any}, {int, any}}"); }
		@Test public void test_3877() { testInvalid("{(any | any), {int}}","{{any, int}, {int, any}}"); }
		@Test public void test_3878() { testInvalid("{(any | any), {int}}","{(any & int), {int, any}}"); }
		@Test public void test_3879() { testInvalid("{(any | any), {int}}","{{any}, {any, int}}"); }
		@Test public void test_3880() { testInvalid("{(any | any), {int}}","{{int, int}, {any, int}}"); }
		@Test public void test_3881() { testInvalid("{(any | any), {int}}","{(int | int), {any, int}}"); }
		@Test public void test_3882() { testInvalid("{(any | any), {int}}","{(any & int), {any, int}}"); }
		@Test public void test_3883() { testInvalid("{(any | any), {int}}","{!int, {int, int}}"); }
		@Test public void test_3884() { testInvalid("{(any | any), {int}}","{{int, int}, {int, int}}"); }
		@Test public void test_3885() { testInvalid("{(any | any), {int}}","{(any | any), {int, int}}"); }
		@Test public void test_3886() { testInvalid("{(any | any), {int}}","{(int | any), {int, int}}"); }
		@Test public void test_3887() { testInvalid("{(any | any), {int}}","{(int & any), {int, int}}"); }
		@Test public void test_3888() { testInvalid("{(any | any), {int}}","{{int}, (any | any)}"); }
		@Test public void test_3889() { testInvalid("{(any | any), {int}}","{{int, any}, (any | any)}"); }
		@Test public void test_3890() { testInvalid("{(any | any), {int}}","{{any, int}, (any | any)}"); }
		@Test public void test_3891() { testInvalid("{(any | any), {int}}","{(any | any), (any | any)}"); }
		@Test public void test_3892() { testInvalid("{(any | any), {int}}","{(int | any), (any | any)}"); }
		@Test public void test_3893() { testInvalid("{(any | any), {int}}","{(int & int), (any | any)}"); }
		@Test public void test_3894() { testInvalid("{(any | any), {int}}","{!int, (int | any)}"); }
		@Test public void test_3895() { testInvalid("{(any | any), {int}}","{{int, int}, (int | any)}"); }
		@Test public void test_3896() { testInvalid("{(any | any), {int}}","{(any | any), (int | any)}"); }
		@Test public void test_3897() { testInvalid("{(any | any), {int}}","{(int | int), (int | any)}"); }
		@Test public void test_3898() { testInvalid("{(any | any), {int}}","{{any}, (any | int)}"); }
		@Test public void test_3899() { testInvalid("{(any | any), {int}}","{!int, (any | int)}"); }
		@Test public void test_3900() { testInvalid("{(any | any), {int}}","{(any | any), (any | int)}"); }
		@Test public void test_3901() { testInvalid("{(any | any), {int}}","{(any | int), (any | int)}"); }
		@Test public void test_3902() { testInvalid("{(any | any), {int}}","{(any & int), (any | int)}"); }
		@Test public void test_3903() { testInvalid("{(any | any), {int}}","{{int}, (int | int)}"); }
		@Test public void test_3904() { testInvalid("{(any | any), {int}}","{{any, any}, (int | int)}"); }
		@Test public void test_3905() { testInvalid("{(any | any), {int}}","{{int, int}, (int | int)}"); }
		@Test public void test_3906() { testInvalid("{(any | any), {int}}","{{int}, (any & any)}"); }
		@Test public void test_3907() { testInvalid("{(any | any), {int}}","{{int, any}, (any & any)}"); }
		@Test public void test_3908() { testInvalid("{(any | any), {int}}","{{any, int}, (any & any)}"); }
		@Test public void test_3909() { testInvalid("{(any | any), {int}}","{(int | any), (any & any)}"); }
		@Test public void test_3910() { testInvalid("{(any | any), {int}}","{(any & any), (any & any)}"); }
		@Test public void test_3911() { testInvalid("{(any | any), {int}}","{(int & any), (any & any)}"); }
		@Test public void test_3912() { testInvalid("{(any | any), {int}}","{{any}, (int & any)}"); }
		@Test public void test_3913() { testInvalid("{(any | any), {int}}","{{int}, (int & any)}"); }
		@Test public void test_3914() { testInvalid("{(any | any), {int}}","{{any, any}, (int & any)}"); }
		@Test public void test_3915() { testInvalid("{(any | any), {int}}","{{int, any}, (int & any)}"); }
		@Test public void test_3916() { testInvalid("{(any | any), {int}}","{(any | int), (int & any)}"); }
		@Test public void test_3917() { testInvalid("{(any | any), {int}}","{(any & any), (int & any)}"); }
		@Test public void test_3918() { testInvalid("{(any | any), {int}}","{(int & any), (int & any)}"); }
		@Test public void test_3919() { testInvalid("{(any | any), {int}}","{(int & int), (int & any)}"); }
		@Test public void test_3920() { testInvalid("{(any | any), {int}}","{{int, any}, (any & int)}"); }
		@Test public void test_3921() { testInvalid("{(any | any), {int}}","{(any & any), (any & int)}"); }
		@Test public void test_3922() { testInvalid("{(any | any), {int}}","{{any, int}, (int & int)}"); }
		@Test public void test_3923() { testInvalid("{(any | any), {int}}","{(int | int), (int & int)}"); }
		@Test public void test_3924() { testInvalid("{(any | any), {int}}","{(any & any), (int & int)}"); }
		@Test public void test_3925() { testInvalid("{(any | any), {int}}","{(any & int), (int & int)}"); }
		@Test public void test_3926() { testInvalid("{(any | any), {int}}","{(int & int), (int & int)}"); }
		@Test public void test_3927() { testInvalid("{(any | any), {int}}","(!int | {any})"); }
		@Test public void test_3928() { testInvalid("{(any | any), {int}}","({any, any} | {any})"); }
		@Test public void test_3929() { testInvalid("{(any | any), {int}}","((any | any) | {any})"); }
		@Test public void test_3930() { testInvalid("{(any | any), {int}}","((int | any) | {any})"); }
		@Test public void test_3931() { testInvalid("{(any | any), {int}}","((any & any) | {any})"); }
		@Test public void test_3932() { testInvalid("{(any | any), {int}}","((int & any) | {any})"); }
		@Test public void test_3933() { testInvalid("{(any | any), {int}}","((any & int) | {any})"); }
		@Test public void test_3934() { testInvalid("{(any | any), {int}}","({int} | {int})"); }
		@Test public void test_3935() { testInvalid("{(any | any), {int}}","(!any | {int})"); }
		@Test public void test_3936() { testInvalid("{(any | any), {int}}","(!int | {int})"); }
		@Test public void test_3937() { testInvalid("{(any | any), {int}}","({any, int} | {int})"); }
		@Test public void test_3938() { testInvalid("{(any | any), {int}}","((int & any) | {int})"); }
		@Test public void test_3939() { testInvalid("{(any | any), {int}}","((any & int) | {int})"); }
		@Test public void test_3940() { testInvalid("{(any | any), {int}}","((int & int) | {int})"); }
		@Test public void test_3941() { testInvalid("{(any | any), {int}}","({any} | !any)"); }
		@Test public void test_3942() { testInvalid("{(any | any), {int}}","({int} | !any)"); }
		@Test public void test_3943() { testInvalid("{(any | any), {int}}","({any, any} | !any)"); }
		@Test public void test_3944() { testInvalid("{(any | any), {int}}","({int, int} | !any)"); }
		@Test public void test_3945() { testInvalid("{(any | any), {int}}","((any | any) | !any)"); }
		@Test public void test_3946() { testInvalid("{(any | any), {int}}","((int | any) | !any)"); }
		@Test public void test_3947() { testInvalid("{(any | any), {int}}","((int | int) | !any)"); }
		@Test public void test_3948() { testInvalid("{(any | any), {int}}","((int & int) | !any)"); }
		@Test public void test_3949() { testInvalid("{(any | any), {int}}","(!int | !int)"); }
		@Test public void test_3950() { testInvalid("{(any | any), {int}}","({any, any} | !int)"); }
		@Test public void test_3951() { testInvalid("{(any | any), {int}}","({int, int} | !int)"); }
		@Test public void test_3952() { testInvalid("{(any | any), {int}}","((int | any) | !int)"); }
		@Test public void test_3953() { testInvalid("{(any | any), {int}}","((any | int) | !int)"); }
		@Test public void test_3954() { testInvalid("{(any | any), {int}}","((any & int) | !int)"); }
		@Test public void test_3955() { testInvalid("{(any | any), {int}}","((int & int) | !int)"); }
		@Test public void test_3956() { testInvalid("{(any | any), {int}}","({int} | {any, any})"); }
		@Test public void test_3957() { testInvalid("{(any | any), {int}}","(!any | {any, any})"); }
		@Test public void test_3958() { testInvalid("{(any | any), {int}}","(!int | {any, any})"); }
		@Test public void test_3959() { testInvalid("{(any | any), {int}}","({any, int} | {any, any})"); }
		@Test public void test_3960() { testInvalid("{(any | any), {int}}","((int | any) | {any, any})"); }
		@Test public void test_3961() { testInvalid("{(any | any), {int}}","((any & any) | {any, any})"); }
		@Test public void test_3962() { testInvalid("{(any | any), {int}}","((any & int) | {any, any})"); }
		@Test public void test_3963() { testInvalid("{(any | any), {int}}","(!int | {int, any})"); }
		@Test public void test_3964() { testInvalid("{(any | any), {int}}","({any, int} | {int, any})"); }
		@Test public void test_3965() { testInvalid("{(any | any), {int}}","((any | any) | {int, any})"); }
		@Test public void test_3966() { testInvalid("{(any | any), {int}}","((int | any) | {int, any})"); }
		@Test public void test_3967() { testInvalid("{(any | any), {int}}","((any | int) | {int, any})"); }
		@Test public void test_3968() { testInvalid("{(any | any), {int}}","((int & any) | {int, any})"); }
		@Test public void test_3969() { testInvalid("{(any | any), {int}}","({any} | {any, int})"); }
		@Test public void test_3970() { testInvalid("{(any | any), {int}}","(!int | {any, int})"); }
		@Test public void test_3971() { testInvalid("{(any | any), {int}}","({any, int} | {any, int})"); }
		@Test public void test_3972() { testInvalid("{(any | any), {int}}","((any | any) | {any, int})"); }
		@Test public void test_3973() { testInvalid("{(any | any), {int}}","((any | int) | {any, int})"); }
		@Test public void test_3974() { testInvalid("{(any | any), {int}}","((int | int) | {any, int})"); }
		@Test public void test_3975() { testInvalid("{(any | any), {int}}","((int & any) | {any, int})"); }
		@Test public void test_3976() { testInvalid("{(any | any), {int}}","(!any | {int, int})"); }
		@Test public void test_3977() { testInvalid("{(any | any), {int}}","(!int | {int, int})"); }
		@Test public void test_3978() { testInvalid("{(any | any), {int}}","({any, any} | {int, int})"); }
		@Test public void test_3979() { testInvalid("{(any | any), {int}}","({any, int} | {int, int})"); }
		@Test public void test_3980() { testInvalid("{(any | any), {int}}","((any | any) | {int, int})"); }
		@Test public void test_3981() { testInvalid("{(any | any), {int}}","((int | int) | {int, int})"); }
		@Test public void test_3982() { testInvalid("{(any | any), {int}}","((int & any) | {int, int})"); }
		@Test public void test_3983() { testInvalid("{(any | any), {int}}","((any & int) | {int, int})"); }
		@Test public void test_3984() { testInvalid("{(any | any), {int}}","((int & int) | {int, int})"); }
		@Test public void test_3985() { testInvalid("{(any | any), {int}}","({any} | (any | any))"); }
		@Test public void test_3986() { testInvalid("{(any | any), {int}}","(!any | (any | any))"); }
		@Test public void test_3987() { testInvalid("{(any | any), {int}}","({any, any} | (any | any))"); }
		@Test public void test_3988() { testInvalid("{(any | any), {int}}","({any, int} | (any | any))"); }
		@Test public void test_3989() { testInvalid("{(any | any), {int}}","({int, int} | (any | any))"); }
		@Test public void test_3990() { testInvalid("{(any | any), {int}}","((int | any) | (any | any))"); }
		@Test public void test_3991() { testInvalid("{(any | any), {int}}","((any | int) | (any | any))"); }
		@Test public void test_3992() { testInvalid("{(any | any), {int}}","((any & int) | (any | any))"); }
		@Test public void test_3993() { testInvalid("{(any | any), {int}}","((int & int) | (any | any))"); }
		@Test public void test_3994() { testInvalid("{(any | any), {int}}","({any} | (int | any))"); }
		@Test public void test_3995() { testInvalid("{(any | any), {int}}","(!int | (int | any))"); }
		@Test public void test_3996() { testInvalid("{(any | any), {int}}","({int, any} | (int | any))"); }
		@Test public void test_3997() { testInvalid("{(any | any), {int}}","({any, int} | (int | any))"); }
		@Test public void test_3998() { testInvalid("{(any | any), {int}}","((int & any) | (int | any))"); }
		@Test public void test_3999() { testInvalid("{(any | any), {int}}","((any & int) | (int | any))"); }
		@Test public void test_4000() { testInvalid("{(any | any), {int}}","({any} | (any | int))"); }
		@Test public void test_4001() { testInvalid("{(any | any), {int}}","({int} | (any | int))"); }
		@Test public void test_4002() { testInvalid("{(any | any), {int}}","(!any | (any | int))"); }
		@Test public void test_4003() { testInvalid("{(any | any), {int}}","(!int | (any | int))"); }
		@Test public void test_4004() { testInvalid("{(any | any), {int}}","({any, int} | (any | int))"); }
		@Test public void test_4005() { testInvalid("{(any | any), {int}}","({int, int} | (any | int))"); }
		@Test public void test_4006() { testInvalid("{(any | any), {int}}","((int | any) | (any | int))"); }
		@Test public void test_4007() { testInvalid("{(any | any), {int}}","((any | int) | (any | int))"); }
		@Test public void test_4008() { testInvalid("{(any | any), {int}}","((int | int) | (any | int))"); }
		@Test public void test_4009() { testInvalid("{(any | any), {int}}","((any & any) | (any | int))"); }
		@Test public void test_4010() { testInvalid("{(any | any), {int}}","({int} | (int | int))"); }
		@Test public void test_4011() { testInvalid("{(any | any), {int}}","(!any | (int | int))"); }
		@Test public void test_4012() { testInvalid("{(any | any), {int}}","(!int | (int | int))"); }
		@Test public void test_4013() { testInvalid("{(any | any), {int}}","({int, any} | (int | int))"); }
		@Test public void test_4014() { testInvalid("{(any | any), {int}}","({any, int} | (int | int))"); }
		@Test public void test_4015() { testInvalid("{(any | any), {int}}","((any | int) | (int | int))"); }
		@Test public void test_4016() { testInvalid("{(any | any), {int}}","((int | int) | (int | int))"); }
		@Test public void test_4017() { testInvalid("{(any | any), {int}}","((any & any) | (int | int))"); }
		@Test public void test_4018() { testInvalid("{(any | any), {int}}","((int & any) | (int | int))"); }
		@Test public void test_4019() { testInvalid("{(any | any), {int}}","((int & int) | (int | int))"); }
		@Test public void test_4020() { testInvalid("{(any | any), {int}}","(!any | (any & any))"); }
		@Test public void test_4021() { testInvalid("{(any | any), {int}}","(!int | (any & any))"); }
		@Test public void test_4022() { testInvalid("{(any | any), {int}}","({any, any} | (any & any))"); }
		@Test public void test_4023() { testInvalid("{(any | any), {int}}","({int, any} | (any & any))"); }
		@Test public void test_4024() { testInvalid("{(any | any), {int}}","({any, int} | (any & any))"); }
		@Test public void test_4025() { testInvalid("{(any | any), {int}}","({int, int} | (any & any))"); }
		@Test public void test_4026() { testInvalid("{(any | any), {int}}","((int | any) | (any & any))"); }
		@Test public void test_4027() { testInvalid("{(any | any), {int}}","((int | int) | (any & any))"); }
		@Test public void test_4028() { testInvalid("{(any | any), {int}}","((int & any) | (any & any))"); }
		@Test public void test_4029() { testInvalid("{(any | any), {int}}","((any & int) | (any & any))"); }
		@Test public void test_4030() { testInvalid("{(any | any), {int}}","((int & int) | (any & any))"); }
		@Test public void test_4031() { testInvalid("{(any | any), {int}}","({any} | (int & any))"); }
		@Test public void test_4032() { testInvalid("{(any & any), {int}}","{int}"); }
		@Test public void test_4033() { testInvalid("{(any & any), {int}}","{any, any}"); }
		@Test public void test_4034() { testInvalid("{(any & any), {int}}","{int, int}"); }
		@Test public void test_4035() { testInvalid("{(any & any), {int}}","(any | int)"); }
		@Test public void test_4036() { testInvalid("{(any & any), {int}}","(int & any)"); }
		@Test public void test_4037() { testInvalid("{(any & any), {int}}","{{any}}"); }
		@Test public void test_4038() { testInvalid("{(any & any), {int}}","{{int, any}}"); }
		@Test public void test_4039() { testInvalid("{(any & any), {int}}","{{int, int}}"); }
		@Test public void test_4040() { testInvalid("{(any & any), {int}}","{(any | int)}"); }
		@Test public void test_4041() { testInvalid("{(any & any), {int}}","!{int, any}"); }
		@Test public void test_4042() { testInvalid("{(any & any), {int}}","!{int, int}"); }
		@Test public void test_4043() { testValid("{(any & any), {int}}","!(any | any)"); }
		@Test public void test_4044() { testValid("{(any & any), {int}}","!(any & any)"); }
		@Test public void test_4045() { testInvalid("{(any & any), {int}}","!(int & int)"); }
		@Test public void test_4046() { testInvalid("{(any & any), {int}}","{{int}, {any}}"); }
		@Test public void test_4047() { testInvalid("{(any & any), {int}}","{!int, {any}}"); }
		@Test public void test_4048() { testInvalid("{(any & any), {int}}","{{int, int}, {any}}"); }
		@Test public void test_4049() { testInvalid("{(any & any), {int}}","{(any | int), {any}}"); }
		@Test public void test_4050() { testValid("{(any & any), {int}}","{!int, {int}}"); }
		@Test public void test_4051() { testValid("{(any & any), {int}}","{{any, any}, {int}}"); }
		@Test public void test_4052() { testValid("{(any & any), {int}}","{(any | any), {int}}"); }
		@Test public void test_4053() { testValid("{(any & any), {int}}","{(any & any), {int}}"); }
		@Test public void test_4054() { testValid("{(any & any), {int}}","{(any & int), {int}}"); }
		@Test public void test_4055() { testInvalid("{(any & any), {int}}","{{any, any}, !int}"); }
		@Test public void test_4056() { testInvalid("{(any & any), {int}}","{{any, int}, !int}"); }
		@Test public void test_4057() { testInvalid("{(any & any), {int}}","{(any | any), !int}"); }
		@Test public void test_4058() { testInvalid("{(any & any), {int}}","{(int | any), !int}"); }
		@Test public void test_4059() { testInvalid("{(any & any), {int}}","{(any & any), !int}"); }
		@Test public void test_4060() { testInvalid("{(any & any), {int}}","{(int & any), !int}"); }
		@Test public void test_4061() { testInvalid("{(any & any), {int}}","{(int & int), !int}"); }
		@Test public void test_4062() { testInvalid("{(any & any), {int}}","{{any}, {any, any}}"); }
		@Test public void test_4063() { testInvalid("{(any & any), {int}}","{{int}, {any, any}}"); }
		@Test public void test_4064() { testInvalid("{(any & any), {int}}","{{int, int}, {any, any}}"); }
		@Test public void test_4065() { testInvalid("{(any & any), {int}}","{(any | any), {any, any}}"); }
		@Test public void test_4066() { testInvalid("{(any & any), {int}}","{(any | int), {any, any}}"); }
		@Test public void test_4067() { testInvalid("{(any & any), {int}}","{!int, {int, any}}"); }
		@Test public void test_4068() { testInvalid("{(any & any), {int}}","{{int, any}, {int, any}}"); }
		@Test public void test_4069() { testInvalid("{(any & any), {int}}","{{any, int}, {int, any}}"); }
		@Test public void test_4070() { testInvalid("{(any & any), {int}}","{(any & int), {int, any}}"); }
		@Test public void test_4071() { testInvalid("{(any & any), {int}}","{{any}, {any, int}}"); }
		@Test public void test_4072() { testInvalid("{(any & any), {int}}","{{int, int}, {any, int}}"); }
		@Test public void test_4073() { testInvalid("{(any & any), {int}}","{(int | int), {any, int}}"); }
		@Test public void test_4074() { testInvalid("{(any & any), {int}}","{(any & int), {any, int}}"); }
		@Test public void test_4075() { testInvalid("{(any & any), {int}}","{!int, {int, int}}"); }
		@Test public void test_4076() { testInvalid("{(any & any), {int}}","{{int, int}, {int, int}}"); }
		@Test public void test_4077() { testInvalid("{(any & any), {int}}","{(any | any), {int, int}}"); }
		@Test public void test_4078() { testInvalid("{(any & any), {int}}","{(int | any), {int, int}}"); }
		@Test public void test_4079() { testInvalid("{(any & any), {int}}","{(int & any), {int, int}}"); }
		@Test public void test_4080() { testInvalid("{(any & any), {int}}","{{int}, (any | any)}"); }
		@Test public void test_4081() { testInvalid("{(any & any), {int}}","{{int, any}, (any | any)}"); }
		@Test public void test_4082() { testInvalid("{(any & any), {int}}","{{any, int}, (any | any)}"); }
		@Test public void test_4083() { testInvalid("{(any & any), {int}}","{(any | any), (any | any)}"); }
		@Test public void test_4084() { testInvalid("{(any & any), {int}}","{(int | any), (any | any)}"); }
		@Test public void test_4085() { testInvalid("{(any & any), {int}}","{(int & int), (any | any)}"); }
		@Test public void test_4086() { testInvalid("{(any & any), {int}}","{!int, (int | any)}"); }
		@Test public void test_4087() { testInvalid("{(any & any), {int}}","{{int, int}, (int | any)}"); }
		@Test public void test_4088() { testInvalid("{(any & any), {int}}","{(any | any), (int | any)}"); }
		@Test public void test_4089() { testInvalid("{(any & any), {int}}","{(int | int), (int | any)}"); }
		@Test public void test_4090() { testInvalid("{(any & any), {int}}","{{any}, (any | int)}"); }
		@Test public void test_4091() { testInvalid("{(any & any), {int}}","{!int, (any | int)}"); }
		@Test public void test_4092() { testInvalid("{(any & any), {int}}","{(any | any), (any | int)}"); }
		@Test public void test_4093() { testInvalid("{(any & any), {int}}","{(any | int), (any | int)}"); }
		@Test public void test_4094() { testInvalid("{(any & any), {int}}","{(any & int), (any | int)}"); }
		@Test public void test_4095() { testInvalid("{(any & any), {int}}","{{int}, (int | int)}"); }
		@Test public void test_4096() { testInvalid("{(any & any), {int}}","{{any, any}, (int | int)}"); }
		@Test public void test_4097() { testInvalid("{(any & any), {int}}","{{int, int}, (int | int)}"); }
		@Test public void test_4098() { testInvalid("{(any & any), {int}}","{{int}, (any & any)}"); }
		@Test public void test_4099() { testInvalid("{(any & any), {int}}","{{int, any}, (any & any)}"); }
		@Test public void test_4100() { testInvalid("{(any & any), {int}}","{{any, int}, (any & any)}"); }
		@Test public void test_4101() { testInvalid("{(any & any), {int}}","{(int | any), (any & any)}"); }
		@Test public void test_4102() { testInvalid("{(any & any), {int}}","{(any & any), (any & any)}"); }
		@Test public void test_4103() { testInvalid("{(any & any), {int}}","{(int & any), (any & any)}"); }
		@Test public void test_4104() { testInvalid("{(any & any), {int}}","{{any}, (int & any)}"); }
		@Test public void test_4105() { testInvalid("{(any & any), {int}}","{{int}, (int & any)}"); }
		@Test public void test_4106() { testInvalid("{(any & any), {int}}","{{any, any}, (int & any)}"); }
		@Test public void test_4107() { testInvalid("{(any & any), {int}}","{{int, any}, (int & any)}"); }
		@Test public void test_4108() { testInvalid("{(any & any), {int}}","{(any | int), (int & any)}"); }
		@Test public void test_4109() { testInvalid("{(any & any), {int}}","{(any & any), (int & any)}"); }
		@Test public void test_4110() { testInvalid("{(any & any), {int}}","{(int & any), (int & any)}"); }
		@Test public void test_4111() { testInvalid("{(any & any), {int}}","{(int & int), (int & any)}"); }
		@Test public void test_4112() { testInvalid("{(any & any), {int}}","{{int, any}, (any & int)}"); }
		@Test public void test_4113() { testInvalid("{(any & any), {int}}","{(any & any), (any & int)}"); }
		@Test public void test_4114() { testInvalid("{(any & any), {int}}","{{any, int}, (int & int)}"); }
		@Test public void test_4115() { testInvalid("{(any & any), {int}}","{(int | int), (int & int)}"); }
		@Test public void test_4116() { testInvalid("{(any & any), {int}}","{(any & any), (int & int)}"); }
		@Test public void test_4117() { testInvalid("{(any & any), {int}}","{(any & int), (int & int)}"); }
		@Test public void test_4118() { testInvalid("{(any & any), {int}}","{(int & int), (int & int)}"); }
		@Test public void test_4119() { testInvalid("{(any & any), {int}}","(!int | {any})"); }
		@Test public void test_4120() { testInvalid("{(any & any), {int}}","({any, any} | {any})"); }
		@Test public void test_4121() { testInvalid("{(any & any), {int}}","((any | any) | {any})"); }
		@Test public void test_4122() { testInvalid("{(any & any), {int}}","((int | any) | {any})"); }
		@Test public void test_4123() { testInvalid("{(any & any), {int}}","((any & any) | {any})"); }
		@Test public void test_4124() { testInvalid("{(any & any), {int}}","((int & any) | {any})"); }
		@Test public void test_4125() { testInvalid("{(any & any), {int}}","((any & int) | {any})"); }
		@Test public void test_4126() { testInvalid("{(any & any), {int}}","({int} | {int})"); }
		@Test public void test_4127() { testInvalid("{(any & any), {int}}","(!any | {int})"); }
		@Test public void test_4128() { testInvalid("{(any & any), {int}}","(!int | {int})"); }
		@Test public void test_4129() { testInvalid("{(any & any), {int}}","({any, int} | {int})"); }
		@Test public void test_4130() { testInvalid("{(any & any), {int}}","((int & any) | {int})"); }
		@Test public void test_4131() { testInvalid("{(any & any), {int}}","((any & int) | {int})"); }
		@Test public void test_4132() { testInvalid("{(any & any), {int}}","((int & int) | {int})"); }
		@Test public void test_4133() { testInvalid("{(any & any), {int}}","({any} | !any)"); }
		@Test public void test_4134() { testInvalid("{(any & any), {int}}","({int} | !any)"); }
		@Test public void test_4135() { testInvalid("{(any & any), {int}}","({any, any} | !any)"); }
		@Test public void test_4136() { testInvalid("{(any & any), {int}}","({int, int} | !any)"); }
		@Test public void test_4137() { testInvalid("{(any & any), {int}}","((any | any) | !any)"); }
		@Test public void test_4138() { testInvalid("{(any & any), {int}}","((int | any) | !any)"); }
		@Test public void test_4139() { testInvalid("{(any & any), {int}}","((int | int) | !any)"); }
		@Test public void test_4140() { testInvalid("{(any & any), {int}}","((int & int) | !any)"); }
		@Test public void test_4141() { testInvalid("{(any & any), {int}}","(!int | !int)"); }
		@Test public void test_4142() { testInvalid("{(any & any), {int}}","({any, any} | !int)"); }
		@Test public void test_4143() { testInvalid("{(any & any), {int}}","({int, int} | !int)"); }
		@Test public void test_4144() { testInvalid("{(any & any), {int}}","((int | any) | !int)"); }
		@Test public void test_4145() { testInvalid("{(any & any), {int}}","((any | int) | !int)"); }
		@Test public void test_4146() { testInvalid("{(any & any), {int}}","((any & int) | !int)"); }
		@Test public void test_4147() { testInvalid("{(any & any), {int}}","((int & int) | !int)"); }
		@Test public void test_4148() { testInvalid("{(any & any), {int}}","({int} | {any, any})"); }
		@Test public void test_4149() { testInvalid("{(any & any), {int}}","(!any | {any, any})"); }
		@Test public void test_4150() { testInvalid("{(any & any), {int}}","(!int | {any, any})"); }
		@Test public void test_4151() { testInvalid("{(any & any), {int}}","({any, int} | {any, any})"); }
		@Test public void test_4152() { testInvalid("{(any & any), {int}}","((int | any) | {any, any})"); }
		@Test public void test_4153() { testInvalid("{(any & any), {int}}","((any & any) | {any, any})"); }
		@Test public void test_4154() { testInvalid("{(any & any), {int}}","((any & int) | {any, any})"); }
		@Test public void test_4155() { testInvalid("{(any & any), {int}}","(!int | {int, any})"); }
		@Test public void test_4156() { testInvalid("{(any & any), {int}}","({any, int} | {int, any})"); }
		@Test public void test_4157() { testInvalid("{(any & any), {int}}","((any | any) | {int, any})"); }
		@Test public void test_4158() { testInvalid("{(any & any), {int}}","((int | any) | {int, any})"); }
		@Test public void test_4159() { testInvalid("{(any & any), {int}}","((any | int) | {int, any})"); }
		@Test public void test_4160() { testInvalid("{(any & any), {int}}","((int & any) | {int, any})"); }
		@Test public void test_4161() { testInvalid("{(any & any), {int}}","({any} | {any, int})"); }
		@Test public void test_4162() { testInvalid("{(any & any), {int}}","(!int | {any, int})"); }
		@Test public void test_4163() { testInvalid("{(any & any), {int}}","({any, int} | {any, int})"); }
		@Test public void test_4164() { testInvalid("{(any & any), {int}}","((any | any) | {any, int})"); }
		@Test public void test_4165() { testInvalid("{(any & any), {int}}","((any | int) | {any, int})"); }
		@Test public void test_4166() { testInvalid("{(any & any), {int}}","((int | int) | {any, int})"); }
		@Test public void test_4167() { testInvalid("{(any & any), {int}}","((int & any) | {any, int})"); }
		@Test public void test_4168() { testInvalid("{(any & any), {int}}","(!any | {int, int})"); }
		@Test public void test_4169() { testInvalid("{(any & any), {int}}","(!int | {int, int})"); }
		@Test public void test_4170() { testInvalid("{(any & any), {int}}","({any, any} | {int, int})"); }
		@Test public void test_4171() { testInvalid("{(any & any), {int}}","({any, int} | {int, int})"); }
		@Test public void test_4172() { testInvalid("{(any & any), {int}}","((any | any) | {int, int})"); }
		@Test public void test_4173() { testInvalid("{(any & any), {int}}","((int | int) | {int, int})"); }
		@Test public void test_4174() { testInvalid("{(any & any), {int}}","((int & any) | {int, int})"); }
		@Test public void test_4175() { testInvalid("{(any & any), {int}}","((any & int) | {int, int})"); }
		@Test public void test_4176() { testInvalid("{(any & any), {int}}","((int & int) | {int, int})"); }
		@Test public void test_4177() { testInvalid("{(any & any), {int}}","({any} | (any | any))"); }
		@Test public void test_4178() { testInvalid("{(any & any), {int}}","(!any | (any | any))"); }
		@Test public void test_4179() { testInvalid("{(any & any), {int}}","({any, any} | (any | any))"); }
		@Test public void test_4180() { testInvalid("{(any & any), {int}}","({any, int} | (any | any))"); }
		@Test public void test_4181() { testInvalid("{(any & any), {int}}","({int, int} | (any | any))"); }
		@Test public void test_4182() { testInvalid("{(any & any), {int}}","((int | any) | (any | any))"); }
		@Test public void test_4183() { testInvalid("{(any & any), {int}}","((any | int) | (any | any))"); }
		@Test public void test_4184() { testInvalid("{(any & any), {int}}","((any & int) | (any | any))"); }
		@Test public void test_4185() { testInvalid("{(any & any), {int}}","((int & int) | (any | any))"); }
		@Test public void test_4186() { testInvalid("{(any & any), {int}}","({any} | (int | any))"); }
		@Test public void test_4187() { testInvalid("{(any & any), {int}}","(!int | (int | any))"); }
		@Test public void test_4188() { testInvalid("{(any & any), {int}}","({int, any} | (int | any))"); }
		@Test public void test_4189() { testInvalid("{(any & any), {int}}","({any, int} | (int | any))"); }
		@Test public void test_4190() { testInvalid("{(any & any), {int}}","((int & any) | (int | any))"); }
		@Test public void test_4191() { testInvalid("{(any & any), {int}}","((any & int) | (int | any))"); }
		@Test public void test_4192() { testInvalid("{(any & any), {int}}","({any} | (any | int))"); }
		@Test public void test_4193() { testInvalid("{(any & any), {int}}","({int} | (any | int))"); }
		@Test public void test_4194() { testInvalid("{(any & any), {int}}","(!any | (any | int))"); }
		@Test public void test_4195() { testInvalid("{(any & any), {int}}","(!int | (any | int))"); }
		@Test public void test_4196() { testInvalid("{(any & any), {int}}","({any, int} | (any | int))"); }
		@Test public void test_4197() { testInvalid("{(any & any), {int}}","({int, int} | (any | int))"); }
		@Test public void test_4198() { testInvalid("{(any & any), {int}}","((int | any) | (any | int))"); }
		@Test public void test_4199() { testInvalid("{(any & any), {int}}","((any | int) | (any | int))"); }
		@Test public void test_4200() { testInvalid("{(any & any), {int}}","((int | int) | (any | int))"); }
		@Test public void test_4201() { testInvalid("{(any & any), {int}}","((any & any) | (any | int))"); }
		@Test public void test_4202() { testInvalid("{(any & any), {int}}","({int} | (int | int))"); }
		@Test public void test_4203() { testInvalid("{(any & any), {int}}","(!any | (int | int))"); }
		@Test public void test_4204() { testInvalid("{(any & any), {int}}","(!int | (int | int))"); }
		@Test public void test_4205() { testInvalid("{(any & any), {int}}","({int, any} | (int | int))"); }
		@Test public void test_4206() { testInvalid("{(any & any), {int}}","({any, int} | (int | int))"); }
		@Test public void test_4207() { testInvalid("{(any & any), {int}}","((any | int) | (int | int))"); }
		@Test public void test_4208() { testInvalid("{(any & any), {int}}","((int | int) | (int | int))"); }
		@Test public void test_4209() { testInvalid("{(any & any), {int}}","((any & any) | (int | int))"); }
		@Test public void test_4210() { testInvalid("{(any & any), {int}}","((int & any) | (int | int))"); }
		@Test public void test_4211() { testInvalid("{(any & any), {int}}","((int & int) | (int | int))"); }
		@Test public void test_4212() { testInvalid("{(any & any), {int}}","(!any | (any & any))"); }
		@Test public void test_4213() { testInvalid("{(any & any), {int}}","(!int | (any & any))"); }
		@Test public void test_4214() { testInvalid("{(any & any), {int}}","({any, any} | (any & any))"); }
		@Test public void test_4215() { testInvalid("{(any & any), {int}}","({int, any} | (any & any))"); }
		@Test public void test_4216() { testInvalid("{(any & any), {int}}","({any, int} | (any & any))"); }
		@Test public void test_4217() { testInvalid("{(any & any), {int}}","({int, int} | (any & any))"); }
		@Test public void test_4218() { testInvalid("{(any & any), {int}}","((int | any) | (any & any))"); }
		@Test public void test_4219() { testInvalid("{(any & any), {int}}","((int | int) | (any & any))"); }
		@Test public void test_4220() { testInvalid("{(any & any), {int}}","((int & any) | (any & any))"); }
		@Test public void test_4221() { testInvalid("{(any & any), {int}}","((any & int) | (any & any))"); }
		@Test public void test_4222() { testInvalid("{(any & any), {int}}","((int & int) | (any & any))"); }
		@Test public void test_4223() { testInvalid("{(any & any), {int}}","({any} | (int & any))"); }
		@Test public void test_4224() { testInvalid("{(any & int), {int}}","{int}"); }
		@Test public void test_4225() { testInvalid("{(any & int), {int}}","{any, any}"); }
		@Test public void test_4226() { testInvalid("{(any & int), {int}}","{int, int}"); }
		@Test public void test_4227() { testInvalid("{(any & int), {int}}","(any | int)"); }
		@Test public void test_4228() { testInvalid("{(any & int), {int}}","(int & any)"); }
		@Test public void test_4229() { testInvalid("{(any & int), {int}}","{{any}}"); }
		@Test public void test_4230() { testInvalid("{(any & int), {int}}","{{int, any}}"); }
		@Test public void test_4231() { testInvalid("{(any & int), {int}}","{{int, int}}"); }
		@Test public void test_4232() { testInvalid("{(any & int), {int}}","{(any | int)}"); }
		@Test public void test_4233() { testInvalid("{(any & int), {int}}","!{int, any}"); }
		@Test public void test_4234() { testInvalid("{(any & int), {int}}","!{int, int}"); }
		@Test public void test_4235() { testValid("{(any & int), {int}}","!(any | any)"); }
		@Test public void test_4236() { testValid("{(any & int), {int}}","!(any & any)"); }
		@Test public void test_4237() { testInvalid("{(any & int), {int}}","!(int & int)"); }
		@Test public void test_4238() { testInvalid("{(any & int), {int}}","{{int}, {any}}"); }
		@Test public void test_4239() { testInvalid("{(any & int), {int}}","{!int, {any}}"); }
		@Test public void test_4240() { testInvalid("{(any & int), {int}}","{{int, int}, {any}}"); }
		@Test public void test_4241() { testInvalid("{(any & int), {int}}","{(any | int), {any}}"); }
		@Test public void test_4242() { testInvalid("{(any & int), {int}}","{!int, {int}}"); }
		@Test public void test_4243() { testInvalid("{(any & int), {int}}","{{any, any}, {int}}"); }
		@Test public void test_4244() { testInvalid("{(any & int), {int}}","{(any | any), {int}}"); }
		@Test public void test_4245() { testInvalid("{(any & int), {int}}","{(any & any), {int}}"); }
		@Test public void test_4246() { testValid("{(any & int), {int}}","{(any & int), {int}}"); }
		@Test public void test_4247() { testInvalid("{(any & int), {int}}","{{any, any}, !int}"); }
		@Test public void test_4248() { testInvalid("{(any & int), {int}}","{{any, int}, !int}"); }
		@Test public void test_4249() { testInvalid("{(any & int), {int}}","{(any | any), !int}"); }
		@Test public void test_4250() { testInvalid("{(any & int), {int}}","{(int | any), !int}"); }
		@Test public void test_4251() { testInvalid("{(any & int), {int}}","{(any & any), !int}"); }
		@Test public void test_4252() { testInvalid("{(any & int), {int}}","{(int & any), !int}"); }
		@Test public void test_4253() { testInvalid("{(any & int), {int}}","{(int & int), !int}"); }
		@Test public void test_4254() { testInvalid("{(any & int), {int}}","{{any}, {any, any}}"); }
		@Test public void test_4255() { testInvalid("{(any & int), {int}}","{{int}, {any, any}}"); }
		@Test public void test_4256() { testInvalid("{(any & int), {int}}","{{int, int}, {any, any}}"); }
		@Test public void test_4257() { testInvalid("{(any & int), {int}}","{(any | any), {any, any}}"); }
		@Test public void test_4258() { testInvalid("{(any & int), {int}}","{(any | int), {any, any}}"); }
		@Test public void test_4259() { testInvalid("{(any & int), {int}}","{!int, {int, any}}"); }
		@Test public void test_4260() { testInvalid("{(any & int), {int}}","{{int, any}, {int, any}}"); }
		@Test public void test_4261() { testInvalid("{(any & int), {int}}","{{any, int}, {int, any}}"); }
		@Test public void test_4262() { testInvalid("{(any & int), {int}}","{(any & int), {int, any}}"); }
		@Test public void test_4263() { testInvalid("{(any & int), {int}}","{{any}, {any, int}}"); }
		@Test public void test_4264() { testInvalid("{(any & int), {int}}","{{int, int}, {any, int}}"); }
		@Test public void test_4265() { testInvalid("{(any & int), {int}}","{(int | int), {any, int}}"); }
		@Test public void test_4266() { testInvalid("{(any & int), {int}}","{(any & int), {any, int}}"); }
		@Test public void test_4267() { testInvalid("{(any & int), {int}}","{!int, {int, int}}"); }
		@Test public void test_4268() { testInvalid("{(any & int), {int}}","{{int, int}, {int, int}}"); }
		@Test public void test_4269() { testInvalid("{(any & int), {int}}","{(any | any), {int, int}}"); }
		@Test public void test_4270() { testInvalid("{(any & int), {int}}","{(int | any), {int, int}}"); }
		@Test public void test_4271() { testInvalid("{(any & int), {int}}","{(int & any), {int, int}}"); }
		@Test public void test_4272() { testInvalid("{(any & int), {int}}","{{int}, (any | any)}"); }
		@Test public void test_4273() { testInvalid("{(any & int), {int}}","{{int, any}, (any | any)}"); }
		@Test public void test_4274() { testInvalid("{(any & int), {int}}","{{any, int}, (any | any)}"); }
		@Test public void test_4275() { testInvalid("{(any & int), {int}}","{(any | any), (any | any)}"); }
		@Test public void test_4276() { testInvalid("{(any & int), {int}}","{(int | any), (any | any)}"); }
		@Test public void test_4277() { testInvalid("{(any & int), {int}}","{(int & int), (any | any)}"); }
		@Test public void test_4278() { testInvalid("{(any & int), {int}}","{!int, (int | any)}"); }
		@Test public void test_4279() { testInvalid("{(any & int), {int}}","{{int, int}, (int | any)}"); }
		@Test public void test_4280() { testInvalid("{(any & int), {int}}","{(any | any), (int | any)}"); }
		@Test public void test_4281() { testInvalid("{(any & int), {int}}","{(int | int), (int | any)}"); }
		@Test public void test_4282() { testInvalid("{(any & int), {int}}","{{any}, (any | int)}"); }
		@Test public void test_4283() { testInvalid("{(any & int), {int}}","{!int, (any | int)}"); }
		@Test public void test_4284() { testInvalid("{(any & int), {int}}","{(any | any), (any | int)}"); }
		@Test public void test_4285() { testInvalid("{(any & int), {int}}","{(any | int), (any | int)}"); }
		@Test public void test_4286() { testInvalid("{(any & int), {int}}","{(any & int), (any | int)}"); }
		@Test public void test_4287() { testInvalid("{(any & int), {int}}","{{int}, (int | int)}"); }
		@Test public void test_4288() { testInvalid("{(any & int), {int}}","{{any, any}, (int | int)}"); }
		@Test public void test_4289() { testInvalid("{(any & int), {int}}","{{int, int}, (int | int)}"); }
		@Test public void test_4290() { testInvalid("{(any & int), {int}}","{{int}, (any & any)}"); }
		@Test public void test_4291() { testInvalid("{(any & int), {int}}","{{int, any}, (any & any)}"); }
		@Test public void test_4292() { testInvalid("{(any & int), {int}}","{{any, int}, (any & any)}"); }
		@Test public void test_4293() { testInvalid("{(any & int), {int}}","{(int | any), (any & any)}"); }
		@Test public void test_4294() { testInvalid("{(any & int), {int}}","{(any & any), (any & any)}"); }
		@Test public void test_4295() { testInvalid("{(any & int), {int}}","{(int & any), (any & any)}"); }
		@Test public void test_4296() { testInvalid("{(any & int), {int}}","{{any}, (int & any)}"); }
		@Test public void test_4297() { testInvalid("{(any & int), {int}}","{{int}, (int & any)}"); }
		@Test public void test_4298() { testInvalid("{(any & int), {int}}","{{any, any}, (int & any)}"); }
		@Test public void test_4299() { testInvalid("{(any & int), {int}}","{{int, any}, (int & any)}"); }
		@Test public void test_4300() { testInvalid("{(any & int), {int}}","{(any | int), (int & any)}"); }
		@Test public void test_4301() { testInvalid("{(any & int), {int}}","{(any & any), (int & any)}"); }
		@Test public void test_4302() { testInvalid("{(any & int), {int}}","{(int & any), (int & any)}"); }
		@Test public void test_4303() { testInvalid("{(any & int), {int}}","{(int & int), (int & any)}"); }
		@Test public void test_4304() { testInvalid("{(any & int), {int}}","{{int, any}, (any & int)}"); }
		@Test public void test_4305() { testInvalid("{(any & int), {int}}","{(any & any), (any & int)}"); }
		@Test public void test_4306() { testInvalid("{(any & int), {int}}","{{any, int}, (int & int)}"); }
		@Test public void test_4307() { testInvalid("{(any & int), {int}}","{(int | int), (int & int)}"); }
		@Test public void test_4308() { testInvalid("{(any & int), {int}}","{(any & any), (int & int)}"); }
		@Test public void test_4309() { testInvalid("{(any & int), {int}}","{(any & int), (int & int)}"); }
		@Test public void test_4310() { testInvalid("{(any & int), {int}}","{(int & int), (int & int)}"); }
		@Test public void test_4311() { testInvalid("{(any & int), {int}}","(!int | {any})"); }
		@Test public void test_4312() { testInvalid("{(any & int), {int}}","({any, any} | {any})"); }
		@Test public void test_4313() { testInvalid("{(any & int), {int}}","((any | any) | {any})"); }
		@Test public void test_4314() { testInvalid("{(any & int), {int}}","((int | any) | {any})"); }
		@Test public void test_4315() { testInvalid("{(any & int), {int}}","((any & any) | {any})"); }
		@Test public void test_4316() { testInvalid("{(any & int), {int}}","((int & any) | {any})"); }
		@Test public void test_4317() { testInvalid("{(any & int), {int}}","((any & int) | {any})"); }
		@Test public void test_4318() { testInvalid("{(any & int), {int}}","({int} | {int})"); }
		@Test public void test_4319() { testInvalid("{(any & int), {int}}","(!any | {int})"); }
		@Test public void test_4320() { testInvalid("{(any & int), {int}}","(!int | {int})"); }
		@Test public void test_4321() { testInvalid("{(any & int), {int}}","({any, int} | {int})"); }
		@Test public void test_4322() { testInvalid("{(any & int), {int}}","((int & any) | {int})"); }
		@Test public void test_4323() { testInvalid("{(any & int), {int}}","((any & int) | {int})"); }
		@Test public void test_4324() { testInvalid("{(any & int), {int}}","((int & int) | {int})"); }
		@Test public void test_4325() { testInvalid("{(any & int), {int}}","({any} | !any)"); }
		@Test public void test_4326() { testInvalid("{(any & int), {int}}","({int} | !any)"); }
		@Test public void test_4327() { testInvalid("{(any & int), {int}}","({any, any} | !any)"); }
		@Test public void test_4328() { testInvalid("{(any & int), {int}}","({int, int} | !any)"); }
		@Test public void test_4329() { testInvalid("{(any & int), {int}}","((any | any) | !any)"); }
		@Test public void test_4330() { testInvalid("{(any & int), {int}}","((int | any) | !any)"); }
		@Test public void test_4331() { testInvalid("{(any & int), {int}}","((int | int) | !any)"); }
		@Test public void test_4332() { testInvalid("{(any & int), {int}}","((int & int) | !any)"); }
		@Test public void test_4333() { testInvalid("{(any & int), {int}}","(!int | !int)"); }
		@Test public void test_4334() { testInvalid("{(any & int), {int}}","({any, any} | !int)"); }
		@Test public void test_4335() { testInvalid("{(any & int), {int}}","({int, int} | !int)"); }
		@Test public void test_4336() { testInvalid("{(any & int), {int}}","((int | any) | !int)"); }
		@Test public void test_4337() { testInvalid("{(any & int), {int}}","((any | int) | !int)"); }
		@Test public void test_4338() { testInvalid("{(any & int), {int}}","((any & int) | !int)"); }
		@Test public void test_4339() { testInvalid("{(any & int), {int}}","((int & int) | !int)"); }
		@Test public void test_4340() { testInvalid("{(any & int), {int}}","({int} | {any, any})"); }
		@Test public void test_4341() { testInvalid("{(any & int), {int}}","(!any | {any, any})"); }
		@Test public void test_4342() { testInvalid("{(any & int), {int}}","(!int | {any, any})"); }
		@Test public void test_4343() { testInvalid("{(any & int), {int}}","({any, int} | {any, any})"); }
		@Test public void test_4344() { testInvalid("{(any & int), {int}}","((int | any) | {any, any})"); }
		@Test public void test_4345() { testInvalid("{(any & int), {int}}","((any & any) | {any, any})"); }
		@Test public void test_4346() { testInvalid("{(any & int), {int}}","((any & int) | {any, any})"); }
		@Test public void test_4347() { testInvalid("{(any & int), {int}}","(!int | {int, any})"); }
		@Test public void test_4348() { testInvalid("{(any & int), {int}}","({any, int} | {int, any})"); }
		@Test public void test_4349() { testInvalid("{(any & int), {int}}","((any | any) | {int, any})"); }
		@Test public void test_4350() { testInvalid("{(any & int), {int}}","((int | any) | {int, any})"); }
		@Test public void test_4351() { testInvalid("{(any & int), {int}}","((any | int) | {int, any})"); }
		@Test public void test_4352() { testInvalid("{(any & int), {int}}","((int & any) | {int, any})"); }
		@Test public void test_4353() { testInvalid("{(any & int), {int}}","({any} | {any, int})"); }
		@Test public void test_4354() { testInvalid("{(any & int), {int}}","(!int | {any, int})"); }
		@Test public void test_4355() { testInvalid("{(any & int), {int}}","({any, int} | {any, int})"); }
		@Test public void test_4356() { testInvalid("{(any & int), {int}}","((any | any) | {any, int})"); }
		@Test public void test_4357() { testInvalid("{(any & int), {int}}","((any | int) | {any, int})"); }
		@Test public void test_4358() { testInvalid("{(any & int), {int}}","((int | int) | {any, int})"); }
		@Test public void test_4359() { testInvalid("{(any & int), {int}}","((int & any) | {any, int})"); }
		@Test public void test_4360() { testInvalid("{(any & int), {int}}","(!any | {int, int})"); }
		@Test public void test_4361() { testInvalid("{(any & int), {int}}","(!int | {int, int})"); }
		@Test public void test_4362() { testInvalid("{(any & int), {int}}","({any, any} | {int, int})"); }
		@Test public void test_4363() { testInvalid("{(any & int), {int}}","({any, int} | {int, int})"); }
		@Test public void test_4364() { testInvalid("{(any & int), {int}}","((any | any) | {int, int})"); }
		@Test public void test_4365() { testInvalid("{(any & int), {int}}","((int | int) | {int, int})"); }
		@Test public void test_4366() { testInvalid("{(any & int), {int}}","((int & any) | {int, int})"); }
		@Test public void test_4367() { testInvalid("{(any & int), {int}}","((any & int) | {int, int})"); }
		@Test public void test_4368() { testInvalid("{(any & int), {int}}","((int & int) | {int, int})"); }
		@Test public void test_4369() { testInvalid("{(any & int), {int}}","({any} | (any | any))"); }
		@Test public void test_4370() { testInvalid("{(any & int), {int}}","(!any | (any | any))"); }
		@Test public void test_4371() { testInvalid("{(any & int), {int}}","({any, any} | (any | any))"); }
		@Test public void test_4372() { testInvalid("{(any & int), {int}}","({any, int} | (any | any))"); }
		@Test public void test_4373() { testInvalid("{(any & int), {int}}","({int, int} | (any | any))"); }
		@Test public void test_4374() { testInvalid("{(any & int), {int}}","((int | any) | (any | any))"); }
		@Test public void test_4375() { testInvalid("{(any & int), {int}}","((any | int) | (any | any))"); }
		@Test public void test_4376() { testInvalid("{(any & int), {int}}","((any & int) | (any | any))"); }
		@Test public void test_4377() { testInvalid("{(any & int), {int}}","((int & int) | (any | any))"); }
		@Test public void test_4378() { testInvalid("{(any & int), {int}}","({any} | (int | any))"); }
		@Test public void test_4379() { testInvalid("{(any & int), {int}}","(!int | (int | any))"); }
		@Test public void test_4380() { testInvalid("{(any & int), {int}}","({int, any} | (int | any))"); }
		@Test public void test_4381() { testInvalid("{(any & int), {int}}","({any, int} | (int | any))"); }
		@Test public void test_4382() { testInvalid("{(any & int), {int}}","((int & any) | (int | any))"); }
		@Test public void test_4383() { testInvalid("{(any & int), {int}}","((any & int) | (int | any))"); }
		@Test public void test_4384() { testInvalid("{(any & int), {int}}","({any} | (any | int))"); }
		@Test public void test_4385() { testInvalid("{(any & int), {int}}","({int} | (any | int))"); }
		@Test public void test_4386() { testInvalid("{(any & int), {int}}","(!any | (any | int))"); }
		@Test public void test_4387() { testInvalid("{(any & int), {int}}","(!int | (any | int))"); }
		@Test public void test_4388() { testInvalid("{(any & int), {int}}","({any, int} | (any | int))"); }
		@Test public void test_4389() { testInvalid("{(any & int), {int}}","({int, int} | (any | int))"); }
		@Test public void test_4390() { testInvalid("{(any & int), {int}}","((int | any) | (any | int))"); }
		@Test public void test_4391() { testInvalid("{(any & int), {int}}","((any | int) | (any | int))"); }
		@Test public void test_4392() { testInvalid("{(any & int), {int}}","((int | int) | (any | int))"); }
		@Test public void test_4393() { testInvalid("{(any & int), {int}}","((any & any) | (any | int))"); }
		@Test public void test_4394() { testInvalid("{(any & int), {int}}","({int} | (int | int))"); }
		@Test public void test_4395() { testInvalid("{(any & int), {int}}","(!any | (int | int))"); }
		@Test public void test_4396() { testInvalid("{(any & int), {int}}","(!int | (int | int))"); }
		@Test public void test_4397() { testInvalid("{(any & int), {int}}","({int, any} | (int | int))"); }
		@Test public void test_4398() { testInvalid("{(any & int), {int}}","({any, int} | (int | int))"); }
		@Test public void test_4399() { testInvalid("{(any & int), {int}}","((any | int) | (int | int))"); }
		@Test public void test_4400() { testInvalid("{(any & int), {int}}","((int | int) | (int | int))"); }
		@Test public void test_4401() { testInvalid("{(any & int), {int}}","((any & any) | (int | int))"); }
		@Test public void test_4402() { testInvalid("{(any & int), {int}}","((int & any) | (int | int))"); }
		@Test public void test_4403() { testInvalid("{(any & int), {int}}","((int & int) | (int | int))"); }
		@Test public void test_4404() { testInvalid("{(any & int), {int}}","(!any | (any & any))"); }
		@Test public void test_4405() { testInvalid("{(any & int), {int}}","(!int | (any & any))"); }
		@Test public void test_4406() { testInvalid("{(any & int), {int}}","({any, any} | (any & any))"); }
		@Test public void test_4407() { testInvalid("{(any & int), {int}}","({int, any} | (any & any))"); }
		@Test public void test_4408() { testInvalid("{(any & int), {int}}","({any, int} | (any & any))"); }
		@Test public void test_4409() { testInvalid("{(any & int), {int}}","({int, int} | (any & any))"); }
		@Test public void test_4410() { testInvalid("{(any & int), {int}}","((int | any) | (any & any))"); }
		@Test public void test_4411() { testInvalid("{(any & int), {int}}","((int | int) | (any & any))"); }
		@Test public void test_4412() { testInvalid("{(any & int), {int}}","((int & any) | (any & any))"); }
		@Test public void test_4413() { testInvalid("{(any & int), {int}}","((any & int) | (any & any))"); }
		@Test public void test_4414() { testInvalid("{(any & int), {int}}","((int & int) | (any & any))"); }
		@Test public void test_4415() { testInvalid("{(any & int), {int}}","({any} | (int & any))"); }
		@Test public void test_4416() { testInvalid("{{any, any}, !int}","{int}"); }
		@Test public void test_4417() { testInvalid("{{any, any}, !int}","{any, any}"); }
		@Test public void test_4418() { testInvalid("{{any, any}, !int}","{int, int}"); }
		@Test public void test_4419() { testInvalid("{{any, any}, !int}","(any | int)"); }
		@Test public void test_4420() { testInvalid("{{any, any}, !int}","(int & any)"); }
		@Test public void test_4421() { testInvalid("{{any, any}, !int}","{{any}}"); }
		@Test public void test_4422() { testInvalid("{{any, any}, !int}","{{int, any}}"); }
		@Test public void test_4423() { testInvalid("{{any, any}, !int}","{{int, int}}"); }
		@Test public void test_4424() { testInvalid("{{any, any}, !int}","{(any | int)}"); }
		@Test public void test_4425() { testInvalid("{{any, any}, !int}","!{int, any}"); }
		@Test public void test_4426() { testInvalid("{{any, any}, !int}","!{int, int}"); }
		@Test public void test_4427() { testValid("{{any, any}, !int}","!(any | any)"); }
		@Test public void test_4428() { testValid("{{any, any}, !int}","!(any & any)"); }
		@Test public void test_4429() { testInvalid("{{any, any}, !int}","!(int & int)"); }
		@Test public void test_4430() { testInvalid("{{any, any}, !int}","{{int}, {any}}"); }
		@Test public void test_4431() { testInvalid("{{any, any}, !int}","{!int, {any}}"); }
		@Test public void test_4432() { testValid("{{any, any}, !int}","{{int, int}, {any}}"); }
		@Test public void test_4433() { testInvalid("{{any, any}, !int}","{(any | int), {any}}"); }
		@Test public void test_4434() { testInvalid("{{any, any}, !int}","{!int, {int}}"); }
		@Test public void test_4435() { testValid("{{any, any}, !int}","{{any, any}, {int}}"); }
		@Test public void test_4436() { testInvalid("{{any, any}, !int}","{(any | any), {int}}"); }
		@Test public void test_4437() { testInvalid("{{any, any}, !int}","{(any & any), {int}}"); }
		@Test public void test_4438() { testInvalid("{{any, any}, !int}","{(any & int), {int}}"); }
		@Test public void test_4439() { testValid("{{any, any}, !int}","{{any, any}, !int}"); }
		@Test public void test_4440() { testValid("{{any, any}, !int}","{{any, int}, !int}"); }
		@Test public void test_4441() { testInvalid("{{any, any}, !int}","{(any | any), !int}"); }
		@Test public void test_4442() { testInvalid("{{any, any}, !int}","{(int | any), !int}"); }
		@Test public void test_4443() { testInvalid("{{any, any}, !int}","{(any & any), !int}"); }
		@Test public void test_4444() { testInvalid("{{any, any}, !int}","{(int & any), !int}"); }
		@Test public void test_4445() { testInvalid("{{any, any}, !int}","{(int & int), !int}"); }
		@Test public void test_4446() { testInvalid("{{any, any}, !int}","{{any}, {any, any}}"); }
		@Test public void test_4447() { testInvalid("{{any, any}, !int}","{{int}, {any, any}}"); }
		@Test public void test_4448() { testValid("{{any, any}, !int}","{{int, int}, {any, any}}"); }
		@Test public void test_4449() { testInvalid("{{any, any}, !int}","{(any | any), {any, any}}"); }
		@Test public void test_4450() { testInvalid("{{any, any}, !int}","{(any | int), {any, any}}"); }
		@Test public void test_4451() { testInvalid("{{any, any}, !int}","{!int, {int, any}}"); }
		@Test public void test_4452() { testValid("{{any, any}, !int}","{{int, any}, {int, any}}"); }
		@Test public void test_4453() { testValid("{{any, any}, !int}","{{any, int}, {int, any}}"); }
		@Test public void test_4454() { testInvalid("{{any, any}, !int}","{(any & int), {int, any}}"); }
		@Test public void test_4455() { testInvalid("{{any, any}, !int}","{{any}, {any, int}}"); }
		@Test public void test_4456() { testValid("{{any, any}, !int}","{{int, int}, {any, int}}"); }
		@Test public void test_4457() { testInvalid("{{any, any}, !int}","{(int | int), {any, int}}"); }
		@Test public void test_4458() { testInvalid("{{any, any}, !int}","{(any & int), {any, int}}"); }
		@Test public void test_4459() { testInvalid("{{any, any}, !int}","{!int, {int, int}}"); }
		@Test public void test_4460() { testValid("{{any, any}, !int}","{{int, int}, {int, int}}"); }
		@Test public void test_4461() { testInvalid("{{any, any}, !int}","{(any | any), {int, int}}"); }
		@Test public void test_4462() { testInvalid("{{any, any}, !int}","{(int | any), {int, int}}"); }
		@Test public void test_4463() { testInvalid("{{any, any}, !int}","{(int & any), {int, int}}"); }
		@Test public void test_4464() { testInvalid("{{any, any}, !int}","{{int}, (any | any)}"); }
		@Test public void test_4465() { testInvalid("{{any, any}, !int}","{{int, any}, (any | any)}"); }
		@Test public void test_4466() { testInvalid("{{any, any}, !int}","{{any, int}, (any | any)}"); }
		@Test public void test_4467() { testInvalid("{{any, any}, !int}","{(any | any), (any | any)}"); }
		@Test public void test_4468() { testInvalid("{{any, any}, !int}","{(int | any), (any | any)}"); }
		@Test public void test_4469() { testInvalid("{{any, any}, !int}","{(int & int), (any | any)}"); }
		@Test public void test_4470() { testInvalid("{{any, any}, !int}","{!int, (int | any)}"); }
		@Test public void test_4471() { testInvalid("{{any, any}, !int}","{{int, int}, (int | any)}"); }
		@Test public void test_4472() { testInvalid("{{any, any}, !int}","{(any | any), (int | any)}"); }
		@Test public void test_4473() { testInvalid("{{any, any}, !int}","{(int | int), (int | any)}"); }
		@Test public void test_4474() { testInvalid("{{any, any}, !int}","{{any}, (any | int)}"); }
		@Test public void test_4475() { testInvalid("{{any, any}, !int}","{!int, (any | int)}"); }
		@Test public void test_4476() { testInvalid("{{any, any}, !int}","{(any | any), (any | int)}"); }
		@Test public void test_4477() { testInvalid("{{any, any}, !int}","{(any | int), (any | int)}"); }
		@Test public void test_4478() { testInvalid("{{any, any}, !int}","{(any & int), (any | int)}"); }
		@Test public void test_4479() { testInvalid("{{any, any}, !int}","{{int}, (int | int)}"); }
		@Test public void test_4480() { testInvalid("{{any, any}, !int}","{{any, any}, (int | int)}"); }
		@Test public void test_4481() { testInvalid("{{any, any}, !int}","{{int, int}, (int | int)}"); }
		@Test public void test_4482() { testInvalid("{{any, any}, !int}","{{int}, (any & any)}"); }
		@Test public void test_4483() { testInvalid("{{any, any}, !int}","{{int, any}, (any & any)}"); }
		@Test public void test_4484() { testInvalid("{{any, any}, !int}","{{any, int}, (any & any)}"); }
		@Test public void test_4485() { testInvalid("{{any, any}, !int}","{(int | any), (any & any)}"); }
		@Test public void test_4486() { testInvalid("{{any, any}, !int}","{(any & any), (any & any)}"); }
		@Test public void test_4487() { testInvalid("{{any, any}, !int}","{(int & any), (any & any)}"); }
		@Test public void test_4488() { testInvalid("{{any, any}, !int}","{{any}, (int & any)}"); }
		@Test public void test_4489() { testInvalid("{{any, any}, !int}","{{int}, (int & any)}"); }
		@Test public void test_4490() { testInvalid("{{any, any}, !int}","{{any, any}, (int & any)}"); }
		@Test public void test_4491() { testInvalid("{{any, any}, !int}","{{int, any}, (int & any)}"); }
		@Test public void test_4492() { testInvalid("{{any, any}, !int}","{(any | int), (int & any)}"); }
		@Test public void test_4493() { testInvalid("{{any, any}, !int}","{(any & any), (int & any)}"); }
		@Test public void test_4494() { testInvalid("{{any, any}, !int}","{(int & any), (int & any)}"); }
		@Test public void test_4495() { testInvalid("{{any, any}, !int}","{(int & int), (int & any)}"); }
		@Test public void test_4496() { testInvalid("{{any, any}, !int}","{{int, any}, (any & int)}"); }
		@Test public void test_4497() { testInvalid("{{any, any}, !int}","{(any & any), (any & int)}"); }
		@Test public void test_4498() { testInvalid("{{any, any}, !int}","{{any, int}, (int & int)}"); }
		@Test public void test_4499() { testInvalid("{{any, any}, !int}","{(int | int), (int & int)}"); }
		@Test public void test_4500() { testInvalid("{{any, any}, !int}","{(any & any), (int & int)}"); }
		@Test public void test_4501() { testInvalid("{{any, any}, !int}","{(any & int), (int & int)}"); }
		@Test public void test_4502() { testInvalid("{{any, any}, !int}","{(int & int), (int & int)}"); }
		@Test public void test_4503() { testInvalid("{{any, any}, !int}","(!int | {any})"); }
		@Test public void test_4504() { testInvalid("{{any, any}, !int}","({any, any} | {any})"); }
		@Test public void test_4505() { testInvalid("{{any, any}, !int}","((any | any) | {any})"); }
		@Test public void test_4506() { testInvalid("{{any, any}, !int}","((int | any) | {any})"); }
		@Test public void test_4507() { testInvalid("{{any, any}, !int}","((any & any) | {any})"); }
		@Test public void test_4508() { testInvalid("{{any, any}, !int}","((int & any) | {any})"); }
		@Test public void test_4509() { testInvalid("{{any, any}, !int}","((any & int) | {any})"); }
		@Test public void test_4510() { testInvalid("{{any, any}, !int}","({int} | {int})"); }
		@Test public void test_4511() { testInvalid("{{any, any}, !int}","(!any | {int})"); }
		@Test public void test_4512() { testInvalid("{{any, any}, !int}","(!int | {int})"); }
		@Test public void test_4513() { testInvalid("{{any, any}, !int}","({any, int} | {int})"); }
		@Test public void test_4514() { testInvalid("{{any, any}, !int}","((int & any) | {int})"); }
		@Test public void test_4515() { testInvalid("{{any, any}, !int}","((any & int) | {int})"); }
		@Test public void test_4516() { testInvalid("{{any, any}, !int}","((int & int) | {int})"); }
		@Test public void test_4517() { testInvalid("{{any, any}, !int}","({any} | !any)"); }
		@Test public void test_4518() { testInvalid("{{any, any}, !int}","({int} | !any)"); }
		@Test public void test_4519() { testInvalid("{{any, any}, !int}","({any, any} | !any)"); }
		@Test public void test_4520() { testInvalid("{{any, any}, !int}","({int, int} | !any)"); }
		@Test public void test_4521() { testInvalid("{{any, any}, !int}","((any | any) | !any)"); }
		@Test public void test_4522() { testInvalid("{{any, any}, !int}","((int | any) | !any)"); }
		@Test public void test_4523() { testInvalid("{{any, any}, !int}","((int | int) | !any)"); }
		@Test public void test_4524() { testInvalid("{{any, any}, !int}","((int & int) | !any)"); }
		@Test public void test_4525() { testInvalid("{{any, any}, !int}","(!int | !int)"); }
		@Test public void test_4526() { testInvalid("{{any, any}, !int}","({any, any} | !int)"); }
		@Test public void test_4527() { testInvalid("{{any, any}, !int}","({int, int} | !int)"); }
		@Test public void test_4528() { testInvalid("{{any, any}, !int}","((int | any) | !int)"); }
		@Test public void test_4529() { testInvalid("{{any, any}, !int}","((any | int) | !int)"); }
		@Test public void test_4530() { testInvalid("{{any, any}, !int}","((any & int) | !int)"); }
		@Test public void test_4531() { testInvalid("{{any, any}, !int}","((int & int) | !int)"); }
		@Test public void test_4532() { testInvalid("{{any, any}, !int}","({int} | {any, any})"); }
		@Test public void test_4533() { testInvalid("{{any, any}, !int}","(!any | {any, any})"); }
		@Test public void test_4534() { testInvalid("{{any, any}, !int}","(!int | {any, any})"); }
		@Test public void test_4535() { testInvalid("{{any, any}, !int}","({any, int} | {any, any})"); }
		@Test public void test_4536() { testInvalid("{{any, any}, !int}","((int | any) | {any, any})"); }
		@Test public void test_4537() { testInvalid("{{any, any}, !int}","((any & any) | {any, any})"); }
		@Test public void test_4538() { testInvalid("{{any, any}, !int}","((any & int) | {any, any})"); }
		@Test public void test_4539() { testInvalid("{{any, any}, !int}","(!int | {int, any})"); }
		@Test public void test_4540() { testInvalid("{{any, any}, !int}","({any, int} | {int, any})"); }
		@Test public void test_4541() { testInvalid("{{any, any}, !int}","((any | any) | {int, any})"); }
		@Test public void test_4542() { testInvalid("{{any, any}, !int}","((int | any) | {int, any})"); }
		@Test public void test_4543() { testInvalid("{{any, any}, !int}","((any | int) | {int, any})"); }
		@Test public void test_4544() { testInvalid("{{any, any}, !int}","((int & any) | {int, any})"); }
		@Test public void test_4545() { testInvalid("{{any, any}, !int}","({any} | {any, int})"); }
		@Test public void test_4546() { testInvalid("{{any, any}, !int}","(!int | {any, int})"); }
		@Test public void test_4547() { testInvalid("{{any, any}, !int}","({any, int} | {any, int})"); }
		@Test public void test_4548() { testInvalid("{{any, any}, !int}","((any | any) | {any, int})"); }
		@Test public void test_4549() { testInvalid("{{any, any}, !int}","((any | int) | {any, int})"); }
		@Test public void test_4550() { testInvalid("{{any, any}, !int}","((int | int) | {any, int})"); }
		@Test public void test_4551() { testInvalid("{{any, any}, !int}","((int & any) | {any, int})"); }
		@Test public void test_4552() { testInvalid("{{any, any}, !int}","(!any | {int, int})"); }
		@Test public void test_4553() { testInvalid("{{any, any}, !int}","(!int | {int, int})"); }
		@Test public void test_4554() { testInvalid("{{any, any}, !int}","({any, any} | {int, int})"); }
		@Test public void test_4555() { testInvalid("{{any, any}, !int}","({any, int} | {int, int})"); }
		@Test public void test_4556() { testInvalid("{{any, any}, !int}","((any | any) | {int, int})"); }
		@Test public void test_4557() { testInvalid("{{any, any}, !int}","((int | int) | {int, int})"); }
		@Test public void test_4558() { testInvalid("{{any, any}, !int}","((int & any) | {int, int})"); }
		@Test public void test_4559() { testInvalid("{{any, any}, !int}","((any & int) | {int, int})"); }
		@Test public void test_4560() { testInvalid("{{any, any}, !int}","((int & int) | {int, int})"); }
		@Test public void test_4561() { testInvalid("{{any, any}, !int}","({any} | (any | any))"); }
		@Test public void test_4562() { testInvalid("{{any, any}, !int}","(!any | (any | any))"); }
		@Test public void test_4563() { testInvalid("{{any, any}, !int}","({any, any} | (any | any))"); }
		@Test public void test_4564() { testInvalid("{{any, any}, !int}","({any, int} | (any | any))"); }
		@Test public void test_4565() { testInvalid("{{any, any}, !int}","({int, int} | (any | any))"); }
		@Test public void test_4566() { testInvalid("{{any, any}, !int}","((int | any) | (any | any))"); }
		@Test public void test_4567() { testInvalid("{{any, any}, !int}","((any | int) | (any | any))"); }
		@Test public void test_4568() { testInvalid("{{any, any}, !int}","((any & int) | (any | any))"); }
		@Test public void test_4569() { testInvalid("{{any, any}, !int}","((int & int) | (any | any))"); }
		@Test public void test_4570() { testInvalid("{{any, any}, !int}","({any} | (int | any))"); }
		@Test public void test_4571() { testInvalid("{{any, any}, !int}","(!int | (int | any))"); }
		@Test public void test_4572() { testInvalid("{{any, any}, !int}","({int, any} | (int | any))"); }
		@Test public void test_4573() { testInvalid("{{any, any}, !int}","({any, int} | (int | any))"); }
		@Test public void test_4574() { testInvalid("{{any, any}, !int}","((int & any) | (int | any))"); }
		@Test public void test_4575() { testInvalid("{{any, any}, !int}","((any & int) | (int | any))"); }
		@Test public void test_4576() { testInvalid("{{any, any}, !int}","({any} | (any | int))"); }
		@Test public void test_4577() { testInvalid("{{any, any}, !int}","({int} | (any | int))"); }
		@Test public void test_4578() { testInvalid("{{any, any}, !int}","(!any | (any | int))"); }
		@Test public void test_4579() { testInvalid("{{any, any}, !int}","(!int | (any | int))"); }
		@Test public void test_4580() { testInvalid("{{any, any}, !int}","({any, int} | (any | int))"); }
		@Test public void test_4581() { testInvalid("{{any, any}, !int}","({int, int} | (any | int))"); }
		@Test public void test_4582() { testInvalid("{{any, any}, !int}","((int | any) | (any | int))"); }
		@Test public void test_4583() { testInvalid("{{any, any}, !int}","((any | int) | (any | int))"); }
		@Test public void test_4584() { testInvalid("{{any, any}, !int}","((int | int) | (any | int))"); }
		@Test public void test_4585() { testInvalid("{{any, any}, !int}","((any & any) | (any | int))"); }
		@Test public void test_4586() { testInvalid("{{any, any}, !int}","({int} | (int | int))"); }
		@Test public void test_4587() { testInvalid("{{any, any}, !int}","(!any | (int | int))"); }
		@Test public void test_4588() { testInvalid("{{any, any}, !int}","(!int | (int | int))"); }
		@Test public void test_4589() { testInvalid("{{any, any}, !int}","({int, any} | (int | int))"); }
		@Test public void test_4590() { testInvalid("{{any, any}, !int}","({any, int} | (int | int))"); }
		@Test public void test_4591() { testInvalid("{{any, any}, !int}","((any | int) | (int | int))"); }
		@Test public void test_4592() { testInvalid("{{any, any}, !int}","((int | int) | (int | int))"); }
		@Test public void test_4593() { testInvalid("{{any, any}, !int}","((any & any) | (int | int))"); }
		@Test public void test_4594() { testInvalid("{{any, any}, !int}","((int & any) | (int | int))"); }
		@Test public void test_4595() { testInvalid("{{any, any}, !int}","((int & int) | (int | int))"); }
		@Test public void test_4596() { testInvalid("{{any, any}, !int}","(!any | (any & any))"); }
		@Test public void test_4597() { testInvalid("{{any, any}, !int}","(!int | (any & any))"); }
		@Test public void test_4598() { testInvalid("{{any, any}, !int}","({any, any} | (any & any))"); }
		@Test public void test_4599() { testInvalid("{{any, any}, !int}","({int, any} | (any & any))"); }
		@Test public void test_4600() { testInvalid("{{any, any}, !int}","({any, int} | (any & any))"); }
		@Test public void test_4601() { testInvalid("{{any, any}, !int}","({int, int} | (any & any))"); }
		@Test public void test_4602() { testInvalid("{{any, any}, !int}","((int | any) | (any & any))"); }
		@Test public void test_4603() { testInvalid("{{any, any}, !int}","((int | int) | (any & any))"); }
		@Test public void test_4604() { testInvalid("{{any, any}, !int}","((int & any) | (any & any))"); }
		@Test public void test_4605() { testInvalid("{{any, any}, !int}","((any & int) | (any & any))"); }
		@Test public void test_4606() { testInvalid("{{any, any}, !int}","((int & int) | (any & any))"); }
		@Test public void test_4607() { testInvalid("{{any, any}, !int}","({any} | (int & any))"); }
		@Test public void test_4608() { testInvalid("{{any, int}, !int}","{int}"); }
		@Test public void test_4609() { testInvalid("{{any, int}, !int}","{any, any}"); }
		@Test public void test_4610() { testInvalid("{{any, int}, !int}","{int, int}"); }
		@Test public void test_4611() { testInvalid("{{any, int}, !int}","(any | int)"); }
		@Test public void test_4612() { testInvalid("{{any, int}, !int}","(int & any)"); }
		@Test public void test_4613() { testInvalid("{{any, int}, !int}","{{any}}"); }
		@Test public void test_4614() { testInvalid("{{any, int}, !int}","{{int, any}}"); }
		@Test public void test_4615() { testInvalid("{{any, int}, !int}","{{int, int}}"); }
		@Test public void test_4616() { testInvalid("{{any, int}, !int}","{(any | int)}"); }
		@Test public void test_4617() { testInvalid("{{any, int}, !int}","!{int, any}"); }
		@Test public void test_4618() { testInvalid("{{any, int}, !int}","!{int, int}"); }
		@Test public void test_4619() { testValid("{{any, int}, !int}","!(any | any)"); }
		@Test public void test_4620() { testValid("{{any, int}, !int}","!(any & any)"); }
		@Test public void test_4621() { testInvalid("{{any, int}, !int}","!(int & int)"); }
		@Test public void test_4622() { testInvalid("{{any, int}, !int}","{{int}, {any}}"); }
		@Test public void test_4623() { testInvalid("{{any, int}, !int}","{!int, {any}}"); }
		@Test public void test_4624() { testValid("{{any, int}, !int}","{{int, int}, {any}}"); }
		@Test public void test_4625() { testInvalid("{{any, int}, !int}","{(any | int), {any}}"); }
		@Test public void test_4626() { testInvalid("{{any, int}, !int}","{!int, {int}}"); }
		@Test public void test_4627() { testInvalid("{{any, int}, !int}","{{any, any}, {int}}"); }
		@Test public void test_4628() { testInvalid("{{any, int}, !int}","{(any | any), {int}}"); }
		@Test public void test_4629() { testInvalid("{{any, int}, !int}","{(any & any), {int}}"); }
		@Test public void test_4630() { testInvalid("{{any, int}, !int}","{(any & int), {int}}"); }
		@Test public void test_4631() { testInvalid("{{any, int}, !int}","{{any, any}, !int}"); }
		@Test public void test_4632() { testValid("{{any, int}, !int}","{{any, int}, !int}"); }
		@Test public void test_4633() { testInvalid("{{any, int}, !int}","{(any | any), !int}"); }
		@Test public void test_4634() { testInvalid("{{any, int}, !int}","{(int | any), !int}"); }
		@Test public void test_4635() { testInvalid("{{any, int}, !int}","{(any & any), !int}"); }
		@Test public void test_4636() { testInvalid("{{any, int}, !int}","{(int & any), !int}"); }
		@Test public void test_4637() { testInvalid("{{any, int}, !int}","{(int & int), !int}"); }
		@Test public void test_4638() { testInvalid("{{any, int}, !int}","{{any}, {any, any}}"); }
		@Test public void test_4639() { testInvalid("{{any, int}, !int}","{{int}, {any, any}}"); }
		@Test public void test_4640() { testValid("{{any, int}, !int}","{{int, int}, {any, any}}"); }
		@Test public void test_4641() { testInvalid("{{any, int}, !int}","{(any | any), {any, any}}"); }
		@Test public void test_4642() { testInvalid("{{any, int}, !int}","{(any | int), {any, any}}"); }
		@Test public void test_4643() { testInvalid("{{any, int}, !int}","{!int, {int, any}}"); }
		@Test public void test_4644() { testInvalid("{{any, int}, !int}","{{int, any}, {int, any}}"); }
		@Test public void test_4645() { testValid("{{any, int}, !int}","{{any, int}, {int, any}}"); }
		@Test public void test_4646() { testInvalid("{{any, int}, !int}","{(any & int), {int, any}}"); }
		@Test public void test_4647() { testInvalid("{{any, int}, !int}","{{any}, {any, int}}"); }
		@Test public void test_4648() { testValid("{{any, int}, !int}","{{int, int}, {any, int}}"); }
		@Test public void test_4649() { testInvalid("{{any, int}, !int}","{(int | int), {any, int}}"); }
		@Test public void test_4650() { testInvalid("{{any, int}, !int}","{(any & int), {any, int}}"); }
		@Test public void test_4651() { testInvalid("{{any, int}, !int}","{!int, {int, int}}"); }
		@Test public void test_4652() { testValid("{{any, int}, !int}","{{int, int}, {int, int}}"); }
		@Test public void test_4653() { testInvalid("{{any, int}, !int}","{(any | any), {int, int}}"); }
		@Test public void test_4654() { testInvalid("{{any, int}, !int}","{(int | any), {int, int}}"); }
		@Test public void test_4655() { testInvalid("{{any, int}, !int}","{(int & any), {int, int}}"); }
		@Test public void test_4656() { testInvalid("{{any, int}, !int}","{{int}, (any | any)}"); }
		@Test public void test_4657() { testInvalid("{{any, int}, !int}","{{int, any}, (any | any)}"); }
		@Test public void test_4658() { testInvalid("{{any, int}, !int}","{{any, int}, (any | any)}"); }
		@Test public void test_4659() { testInvalid("{{any, int}, !int}","{(any | any), (any | any)}"); }
		@Test public void test_4660() { testInvalid("{{any, int}, !int}","{(int | any), (any | any)}"); }
		@Test public void test_4661() { testInvalid("{{any, int}, !int}","{(int & int), (any | any)}"); }
		@Test public void test_4662() { testInvalid("{{any, int}, !int}","{!int, (int | any)}"); }
		@Test public void test_4663() { testInvalid("{{any, int}, !int}","{{int, int}, (int | any)}"); }
		@Test public void test_4664() { testInvalid("{{any, int}, !int}","{(any | any), (int | any)}"); }
		@Test public void test_4665() { testInvalid("{{any, int}, !int}","{(int | int), (int | any)}"); }
		@Test public void test_4666() { testInvalid("{{any, int}, !int}","{{any}, (any | int)}"); }
		@Test public void test_4667() { testInvalid("{{any, int}, !int}","{!int, (any | int)}"); }
		@Test public void test_4668() { testInvalid("{{any, int}, !int}","{(any | any), (any | int)}"); }
		@Test public void test_4669() { testInvalid("{{any, int}, !int}","{(any | int), (any | int)}"); }
		@Test public void test_4670() { testInvalid("{{any, int}, !int}","{(any & int), (any | int)}"); }
		@Test public void test_4671() { testInvalid("{{any, int}, !int}","{{int}, (int | int)}"); }
		@Test public void test_4672() { testInvalid("{{any, int}, !int}","{{any, any}, (int | int)}"); }
		@Test public void test_4673() { testInvalid("{{any, int}, !int}","{{int, int}, (int | int)}"); }
		@Test public void test_4674() { testInvalid("{{any, int}, !int}","{{int}, (any & any)}"); }
		@Test public void test_4675() { testInvalid("{{any, int}, !int}","{{int, any}, (any & any)}"); }
		@Test public void test_4676() { testInvalid("{{any, int}, !int}","{{any, int}, (any & any)}"); }
		@Test public void test_4677() { testInvalid("{{any, int}, !int}","{(int | any), (any & any)}"); }
		@Test public void test_4678() { testInvalid("{{any, int}, !int}","{(any & any), (any & any)}"); }
		@Test public void test_4679() { testInvalid("{{any, int}, !int}","{(int & any), (any & any)}"); }
		@Test public void test_4680() { testInvalid("{{any, int}, !int}","{{any}, (int & any)}"); }
		@Test public void test_4681() { testInvalid("{{any, int}, !int}","{{int}, (int & any)}"); }
		@Test public void test_4682() { testInvalid("{{any, int}, !int}","{{any, any}, (int & any)}"); }
		@Test public void test_4683() { testInvalid("{{any, int}, !int}","{{int, any}, (int & any)}"); }
		@Test public void test_4684() { testInvalid("{{any, int}, !int}","{(any | int), (int & any)}"); }
		@Test public void test_4685() { testInvalid("{{any, int}, !int}","{(any & any), (int & any)}"); }
		@Test public void test_4686() { testInvalid("{{any, int}, !int}","{(int & any), (int & any)}"); }
		@Test public void test_4687() { testInvalid("{{any, int}, !int}","{(int & int), (int & any)}"); }
		@Test public void test_4688() { testInvalid("{{any, int}, !int}","{{int, any}, (any & int)}"); }
		@Test public void test_4689() { testInvalid("{{any, int}, !int}","{(any & any), (any & int)}"); }
		@Test public void test_4690() { testInvalid("{{any, int}, !int}","{{any, int}, (int & int)}"); }
		@Test public void test_4691() { testInvalid("{{any, int}, !int}","{(int | int), (int & int)}"); }
		@Test public void test_4692() { testInvalid("{{any, int}, !int}","{(any & any), (int & int)}"); }
		@Test public void test_4693() { testInvalid("{{any, int}, !int}","{(any & int), (int & int)}"); }
		@Test public void test_4694() { testInvalid("{{any, int}, !int}","{(int & int), (int & int)}"); }
		@Test public void test_4695() { testInvalid("{{any, int}, !int}","(!int | {any})"); }
		@Test public void test_4696() { testInvalid("{{any, int}, !int}","({any, any} | {any})"); }
		@Test public void test_4697() { testInvalid("{{any, int}, !int}","((any | any) | {any})"); }
		@Test public void test_4698() { testInvalid("{{any, int}, !int}","((int | any) | {any})"); }
		@Test public void test_4699() { testInvalid("{{any, int}, !int}","((any & any) | {any})"); }
		@Test public void test_4700() { testInvalid("{{any, int}, !int}","((int & any) | {any})"); }
		@Test public void test_4701() { testInvalid("{{any, int}, !int}","((any & int) | {any})"); }
		@Test public void test_4702() { testInvalid("{{any, int}, !int}","({int} | {int})"); }
		@Test public void test_4703() { testInvalid("{{any, int}, !int}","(!any | {int})"); }
		@Test public void test_4704() { testInvalid("{{any, int}, !int}","(!int | {int})"); }
		@Test public void test_4705() { testInvalid("{{any, int}, !int}","({any, int} | {int})"); }
		@Test public void test_4706() { testInvalid("{{any, int}, !int}","((int & any) | {int})"); }
		@Test public void test_4707() { testInvalid("{{any, int}, !int}","((any & int) | {int})"); }
		@Test public void test_4708() { testInvalid("{{any, int}, !int}","((int & int) | {int})"); }
		@Test public void test_4709() { testInvalid("{{any, int}, !int}","({any} | !any)"); }
		@Test public void test_4710() { testInvalid("{{any, int}, !int}","({int} | !any)"); }
		@Test public void test_4711() { testInvalid("{{any, int}, !int}","({any, any} | !any)"); }
		@Test public void test_4712() { testInvalid("{{any, int}, !int}","({int, int} | !any)"); }
		@Test public void test_4713() { testInvalid("{{any, int}, !int}","((any | any) | !any)"); }
		@Test public void test_4714() { testInvalid("{{any, int}, !int}","((int | any) | !any)"); }
		@Test public void test_4715() { testInvalid("{{any, int}, !int}","((int | int) | !any)"); }
		@Test public void test_4716() { testInvalid("{{any, int}, !int}","((int & int) | !any)"); }
		@Test public void test_4717() { testInvalid("{{any, int}, !int}","(!int | !int)"); }
		@Test public void test_4718() { testInvalid("{{any, int}, !int}","({any, any} | !int)"); }
		@Test public void test_4719() { testInvalid("{{any, int}, !int}","({int, int} | !int)"); }
		@Test public void test_4720() { testInvalid("{{any, int}, !int}","((int | any) | !int)"); }
		@Test public void test_4721() { testInvalid("{{any, int}, !int}","((any | int) | !int)"); }
		@Test public void test_4722() { testInvalid("{{any, int}, !int}","((any & int) | !int)"); }
		@Test public void test_4723() { testInvalid("{{any, int}, !int}","((int & int) | !int)"); }
		@Test public void test_4724() { testInvalid("{{any, int}, !int}","({int} | {any, any})"); }
		@Test public void test_4725() { testInvalid("{{any, int}, !int}","(!any | {any, any})"); }
		@Test public void test_4726() { testInvalid("{{any, int}, !int}","(!int | {any, any})"); }
		@Test public void test_4727() { testInvalid("{{any, int}, !int}","({any, int} | {any, any})"); }
		@Test public void test_4728() { testInvalid("{{any, int}, !int}","((int | any) | {any, any})"); }
		@Test public void test_4729() { testInvalid("{{any, int}, !int}","((any & any) | {any, any})"); }
		@Test public void test_4730() { testInvalid("{{any, int}, !int}","((any & int) | {any, any})"); }
		@Test public void test_4731() { testInvalid("{{any, int}, !int}","(!int | {int, any})"); }
		@Test public void test_4732() { testInvalid("{{any, int}, !int}","({any, int} | {int, any})"); }
		@Test public void test_4733() { testInvalid("{{any, int}, !int}","((any | any) | {int, any})"); }
		@Test public void test_4734() { testInvalid("{{any, int}, !int}","((int | any) | {int, any})"); }
		@Test public void test_4735() { testInvalid("{{any, int}, !int}","((any | int) | {int, any})"); }
		@Test public void test_4736() { testInvalid("{{any, int}, !int}","((int & any) | {int, any})"); }
		@Test public void test_4737() { testInvalid("{{any, int}, !int}","({any} | {any, int})"); }
		@Test public void test_4738() { testInvalid("{{any, int}, !int}","(!int | {any, int})"); }
		@Test public void test_4739() { testInvalid("{{any, int}, !int}","({any, int} | {any, int})"); }
		@Test public void test_4740() { testInvalid("{{any, int}, !int}","((any | any) | {any, int})"); }
		@Test public void test_4741() { testInvalid("{{any, int}, !int}","((any | int) | {any, int})"); }
		@Test public void test_4742() { testInvalid("{{any, int}, !int}","((int | int) | {any, int})"); }
		@Test public void test_4743() { testInvalid("{{any, int}, !int}","((int & any) | {any, int})"); }
		@Test public void test_4744() { testInvalid("{{any, int}, !int}","(!any | {int, int})"); }
		@Test public void test_4745() { testInvalid("{{any, int}, !int}","(!int | {int, int})"); }
		@Test public void test_4746() { testInvalid("{{any, int}, !int}","({any, any} | {int, int})"); }
		@Test public void test_4747() { testInvalid("{{any, int}, !int}","({any, int} | {int, int})"); }
		@Test public void test_4748() { testInvalid("{{any, int}, !int}","((any | any) | {int, int})"); }
		@Test public void test_4749() { testInvalid("{{any, int}, !int}","((int | int) | {int, int})"); }
		@Test public void test_4750() { testInvalid("{{any, int}, !int}","((int & any) | {int, int})"); }
		@Test public void test_4751() { testInvalid("{{any, int}, !int}","((any & int) | {int, int})"); }
		@Test public void test_4752() { testInvalid("{{any, int}, !int}","((int & int) | {int, int})"); }
		@Test public void test_4753() { testInvalid("{{any, int}, !int}","({any} | (any | any))"); }
		@Test public void test_4754() { testInvalid("{{any, int}, !int}","(!any | (any | any))"); }
		@Test public void test_4755() { testInvalid("{{any, int}, !int}","({any, any} | (any | any))"); }
		@Test public void test_4756() { testInvalid("{{any, int}, !int}","({any, int} | (any | any))"); }
		@Test public void test_4757() { testInvalid("{{any, int}, !int}","({int, int} | (any | any))"); }
		@Test public void test_4758() { testInvalid("{{any, int}, !int}","((int | any) | (any | any))"); }
		@Test public void test_4759() { testInvalid("{{any, int}, !int}","((any | int) | (any | any))"); }
		@Test public void test_4760() { testInvalid("{{any, int}, !int}","((any & int) | (any | any))"); }
		@Test public void test_4761() { testInvalid("{{any, int}, !int}","((int & int) | (any | any))"); }
		@Test public void test_4762() { testInvalid("{{any, int}, !int}","({any} | (int | any))"); }
		@Test public void test_4763() { testInvalid("{{any, int}, !int}","(!int | (int | any))"); }
		@Test public void test_4764() { testInvalid("{{any, int}, !int}","({int, any} | (int | any))"); }
		@Test public void test_4765() { testInvalid("{{any, int}, !int}","({any, int} | (int | any))"); }
		@Test public void test_4766() { testInvalid("{{any, int}, !int}","((int & any) | (int | any))"); }
		@Test public void test_4767() { testInvalid("{{any, int}, !int}","((any & int) | (int | any))"); }
		@Test public void test_4768() { testInvalid("{{any, int}, !int}","({any} | (any | int))"); }
		@Test public void test_4769() { testInvalid("{{any, int}, !int}","({int} | (any | int))"); }
		@Test public void test_4770() { testInvalid("{{any, int}, !int}","(!any | (any | int))"); }
		@Test public void test_4771() { testInvalid("{{any, int}, !int}","(!int | (any | int))"); }
		@Test public void test_4772() { testInvalid("{{any, int}, !int}","({any, int} | (any | int))"); }
		@Test public void test_4773() { testInvalid("{{any, int}, !int}","({int, int} | (any | int))"); }
		@Test public void test_4774() { testInvalid("{{any, int}, !int}","((int | any) | (any | int))"); }
		@Test public void test_4775() { testInvalid("{{any, int}, !int}","((any | int) | (any | int))"); }
		@Test public void test_4776() { testInvalid("{{any, int}, !int}","((int | int) | (any | int))"); }
		@Test public void test_4777() { testInvalid("{{any, int}, !int}","((any & any) | (any | int))"); }
		@Test public void test_4778() { testInvalid("{{any, int}, !int}","({int} | (int | int))"); }
		@Test public void test_4779() { testInvalid("{{any, int}, !int}","(!any | (int | int))"); }
		@Test public void test_4780() { testInvalid("{{any, int}, !int}","(!int | (int | int))"); }
		@Test public void test_4781() { testInvalid("{{any, int}, !int}","({int, any} | (int | int))"); }
		@Test public void test_4782() { testInvalid("{{any, int}, !int}","({any, int} | (int | int))"); }
		@Test public void test_4783() { testInvalid("{{any, int}, !int}","((any | int) | (int | int))"); }
		@Test public void test_4784() { testInvalid("{{any, int}, !int}","((int | int) | (int | int))"); }
		@Test public void test_4785() { testInvalid("{{any, int}, !int}","((any & any) | (int | int))"); }
		@Test public void test_4786() { testInvalid("{{any, int}, !int}","((int & any) | (int | int))"); }
		@Test public void test_4787() { testInvalid("{{any, int}, !int}","((int & int) | (int | int))"); }
		@Test public void test_4788() { testInvalid("{{any, int}, !int}","(!any | (any & any))"); }
		@Test public void test_4789() { testInvalid("{{any, int}, !int}","(!int | (any & any))"); }
		@Test public void test_4790() { testInvalid("{{any, int}, !int}","({any, any} | (any & any))"); }
		@Test public void test_4791() { testInvalid("{{any, int}, !int}","({int, any} | (any & any))"); }
		@Test public void test_4792() { testInvalid("{{any, int}, !int}","({any, int} | (any & any))"); }
		@Test public void test_4793() { testInvalid("{{any, int}, !int}","({int, int} | (any & any))"); }
		@Test public void test_4794() { testInvalid("{{any, int}, !int}","((int | any) | (any & any))"); }
		@Test public void test_4795() { testInvalid("{{any, int}, !int}","((int | int) | (any & any))"); }
		@Test public void test_4796() { testInvalid("{{any, int}, !int}","((int & any) | (any & any))"); }
		@Test public void test_4797() { testInvalid("{{any, int}, !int}","((any & int) | (any & any))"); }
		@Test public void test_4798() { testInvalid("{{any, int}, !int}","((int & int) | (any & any))"); }
		@Test public void test_4799() { testInvalid("{{any, int}, !int}","({any} | (int & any))"); }
		@Test public void test_4800() { testInvalid("{(any | any), !int}","{int}"); }
		@Test public void test_4801() { testInvalid("{(any | any), !int}","{any, any}"); }
		@Test public void test_4802() { testInvalid("{(any | any), !int}","{int, int}"); }
		@Test public void test_4803() { testInvalid("{(any | any), !int}","(any | int)"); }
		@Test public void test_4804() { testInvalid("{(any | any), !int}","(int & any)"); }
		@Test public void test_4805() { testInvalid("{(any | any), !int}","{{any}}"); }
		@Test public void test_4806() { testInvalid("{(any | any), !int}","{{int, any}}"); }
		@Test public void test_4807() { testInvalid("{(any | any), !int}","{{int, int}}"); }
		@Test public void test_4808() { testInvalid("{(any | any), !int}","{(any | int)}"); }
		@Test public void test_4809() { testInvalid("{(any | any), !int}","!{int, any}"); }
		@Test public void test_4810() { testInvalid("{(any | any), !int}","!{int, int}"); }
		@Test public void test_4811() { testValid("{(any | any), !int}","!(any | any)"); }
		@Test public void test_4812() { testValid("{(any | any), !int}","!(any & any)"); }
		@Test public void test_4813() { testInvalid("{(any | any), !int}","!(int & int)"); }
		@Test public void test_4814() { testValid("{(any | any), !int}","{{int}, {any}}"); }
		@Test public void test_4815() { testValid("{(any | any), !int}","{!int, {any}}"); }
		@Test public void test_4816() { testValid("{(any | any), !int}","{{int, int}, {any}}"); }
		@Test public void test_4817() { testValid("{(any | any), !int}","{(any | int), {any}}"); }
		@Test public void test_4818() { testValid("{(any | any), !int}","{!int, {int}}"); }
		@Test public void test_4819() { testValid("{(any | any), !int}","{{any, any}, {int}}"); }
		@Test public void test_4820() { testValid("{(any | any), !int}","{(any | any), {int}}"); }
		@Test public void test_4821() { testValid("{(any | any), !int}","{(any & any), {int}}"); }
		@Test public void test_4822() { testValid("{(any | any), !int}","{(any & int), {int}}"); }
		@Test public void test_4823() { testValid("{(any | any), !int}","{{any, any}, !int}"); }
		@Test public void test_4824() { testValid("{(any | any), !int}","{{any, int}, !int}"); }
		@Test public void test_4825() { testValid("{(any | any), !int}","{(any | any), !int}"); }
		@Test public void test_4826() { testValid("{(any | any), !int}","{(int | any), !int}"); }
		@Test public void test_4827() { testValid("{(any | any), !int}","{(any & any), !int}"); }
		@Test public void test_4828() { testValid("{(any | any), !int}","{(int & any), !int}"); }
		@Test public void test_4829() { testValid("{(any | any), !int}","{(int & int), !int}"); }
		@Test public void test_4830() { testValid("{(any | any), !int}","{{any}, {any, any}}"); }
		@Test public void test_4831() { testValid("{(any | any), !int}","{{int}, {any, any}}"); }
		@Test public void test_4832() { testValid("{(any | any), !int}","{{int, int}, {any, any}}"); }
		@Test public void test_4833() { testValid("{(any | any), !int}","{(any | any), {any, any}}"); }
		@Test public void test_4834() { testValid("{(any | any), !int}","{(any | int), {any, any}}"); }
		@Test public void test_4835() { testValid("{(any | any), !int}","{!int, {int, any}}"); }
		@Test public void test_4836() { testValid("{(any | any), !int}","{{int, any}, {int, any}}"); }
		@Test public void test_4837() { testValid("{(any | any), !int}","{{any, int}, {int, any}}"); }
		@Test public void test_4838() { testValid("{(any | any), !int}","{(any & int), {int, any}}"); }
		@Test public void test_4839() { testValid("{(any | any), !int}","{{any}, {any, int}}"); }
		@Test public void test_4840() { testValid("{(any | any), !int}","{{int, int}, {any, int}}"); }
		@Test public void test_4841() { testValid("{(any | any), !int}","{(int | int), {any, int}}"); }
		@Test public void test_4842() { testValid("{(any | any), !int}","{(any & int), {any, int}}"); }
		@Test public void test_4843() { testValid("{(any | any), !int}","{!int, {int, int}}"); }
		@Test public void test_4844() { testValid("{(any | any), !int}","{{int, int}, {int, int}}"); }
		@Test public void test_4845() { testValid("{(any | any), !int}","{(any | any), {int, int}}"); }
		@Test public void test_4846() { testValid("{(any | any), !int}","{(int | any), {int, int}}"); }
		@Test public void test_4847() { testValid("{(any | any), !int}","{(int & any), {int, int}}"); }
		@Test public void test_4848() { testInvalid("{(any | any), !int}","{{int}, (any | any)}"); }
		@Test public void test_4849() { testInvalid("{(any | any), !int}","{{int, any}, (any | any)}"); }
		@Test public void test_4850() { testInvalid("{(any | any), !int}","{{any, int}, (any | any)}"); }
		@Test public void test_4851() { testInvalid("{(any | any), !int}","{(any | any), (any | any)}"); }
		@Test public void test_4852() { testInvalid("{(any | any), !int}","{(int | any), (any | any)}"); }
		@Test public void test_4853() { testInvalid("{(any | any), !int}","{(int & int), (any | any)}"); }
		@Test public void test_4854() { testInvalid("{(any | any), !int}","{!int, (int | any)}"); }
		@Test public void test_4855() { testInvalid("{(any | any), !int}","{{int, int}, (int | any)}"); }
		@Test public void test_4856() { testInvalid("{(any | any), !int}","{(any | any), (int | any)}"); }
		@Test public void test_4857() { testInvalid("{(any | any), !int}","{(int | int), (int | any)}"); }
		@Test public void test_4858() { testInvalid("{(any | any), !int}","{{any}, (any | int)}"); }
		@Test public void test_4859() { testInvalid("{(any | any), !int}","{!int, (any | int)}"); }
		@Test public void test_4860() { testInvalid("{(any | any), !int}","{(any | any), (any | int)}"); }
		@Test public void test_4861() { testInvalid("{(any | any), !int}","{(any | int), (any | int)}"); }
		@Test public void test_4862() { testInvalid("{(any | any), !int}","{(any & int), (any | int)}"); }
		@Test public void test_4863() { testInvalid("{(any | any), !int}","{{int}, (int | int)}"); }
		@Test public void test_4864() { testInvalid("{(any | any), !int}","{{any, any}, (int | int)}"); }
		@Test public void test_4865() { testInvalid("{(any | any), !int}","{{int, int}, (int | int)}"); }
		@Test public void test_4866() { testInvalid("{(any | any), !int}","{{int}, (any & any)}"); }
		@Test public void test_4867() { testInvalid("{(any | any), !int}","{{int, any}, (any & any)}"); }
		@Test public void test_4868() { testInvalid("{(any | any), !int}","{{any, int}, (any & any)}"); }
		@Test public void test_4869() { testInvalid("{(any | any), !int}","{(int | any), (any & any)}"); }
		@Test public void test_4870() { testInvalid("{(any | any), !int}","{(any & any), (any & any)}"); }
		@Test public void test_4871() { testInvalid("{(any | any), !int}","{(int & any), (any & any)}"); }
		@Test public void test_4872() { testInvalid("{(any | any), !int}","{{any}, (int & any)}"); }
		@Test public void test_4873() { testInvalid("{(any | any), !int}","{{int}, (int & any)}"); }
		@Test public void test_4874() { testInvalid("{(any | any), !int}","{{any, any}, (int & any)}"); }
		@Test public void test_4875() { testInvalid("{(any | any), !int}","{{int, any}, (int & any)}"); }
		@Test public void test_4876() { testInvalid("{(any | any), !int}","{(any | int), (int & any)}"); }
		@Test public void test_4877() { testInvalid("{(any | any), !int}","{(any & any), (int & any)}"); }
		@Test public void test_4878() { testInvalid("{(any | any), !int}","{(int & any), (int & any)}"); }
		@Test public void test_4879() { testInvalid("{(any | any), !int}","{(int & int), (int & any)}"); }
		@Test public void test_4880() { testInvalid("{(any | any), !int}","{{int, any}, (any & int)}"); }
		@Test public void test_4881() { testInvalid("{(any | any), !int}","{(any & any), (any & int)}"); }
		@Test public void test_4882() { testInvalid("{(any | any), !int}","{{any, int}, (int & int)}"); }
		@Test public void test_4883() { testInvalid("{(any | any), !int}","{(int | int), (int & int)}"); }
		@Test public void test_4884() { testInvalid("{(any | any), !int}","{(any & any), (int & int)}"); }
		@Test public void test_4885() { testInvalid("{(any | any), !int}","{(any & int), (int & int)}"); }
		@Test public void test_4886() { testInvalid("{(any | any), !int}","{(int & int), (int & int)}"); }
		@Test public void test_4887() { testInvalid("{(any | any), !int}","(!int | {any})"); }
		@Test public void test_4888() { testInvalid("{(any | any), !int}","({any, any} | {any})"); }
		@Test public void test_4889() { testInvalid("{(any | any), !int}","((any | any) | {any})"); }
		@Test public void test_4890() { testInvalid("{(any | any), !int}","((int | any) | {any})"); }
		@Test public void test_4891() { testInvalid("{(any | any), !int}","((any & any) | {any})"); }
		@Test public void test_4892() { testInvalid("{(any | any), !int}","((int & any) | {any})"); }
		@Test public void test_4893() { testInvalid("{(any | any), !int}","((any & int) | {any})"); }
		@Test public void test_4894() { testInvalid("{(any | any), !int}","({int} | {int})"); }
		@Test public void test_4895() { testInvalid("{(any | any), !int}","(!any | {int})"); }
		@Test public void test_4896() { testInvalid("{(any | any), !int}","(!int | {int})"); }
		@Test public void test_4897() { testInvalid("{(any | any), !int}","({any, int} | {int})"); }
		@Test public void test_4898() { testInvalid("{(any | any), !int}","((int & any) | {int})"); }
		@Test public void test_4899() { testInvalid("{(any | any), !int}","((any & int) | {int})"); }
		@Test public void test_4900() { testInvalid("{(any | any), !int}","((int & int) | {int})"); }
		@Test public void test_4901() { testInvalid("{(any | any), !int}","({any} | !any)"); }
		@Test public void test_4902() { testInvalid("{(any | any), !int}","({int} | !any)"); }
		@Test public void test_4903() { testInvalid("{(any | any), !int}","({any, any} | !any)"); }
		@Test public void test_4904() { testInvalid("{(any | any), !int}","({int, int} | !any)"); }
		@Test public void test_4905() { testInvalid("{(any | any), !int}","((any | any) | !any)"); }
		@Test public void test_4906() { testInvalid("{(any | any), !int}","((int | any) | !any)"); }
		@Test public void test_4907() { testInvalid("{(any | any), !int}","((int | int) | !any)"); }
		@Test public void test_4908() { testInvalid("{(any | any), !int}","((int & int) | !any)"); }
		@Test public void test_4909() { testInvalid("{(any | any), !int}","(!int | !int)"); }
		@Test public void test_4910() { testInvalid("{(any | any), !int}","({any, any} | !int)"); }
		@Test public void test_4911() { testInvalid("{(any | any), !int}","({int, int} | !int)"); }
		@Test public void test_4912() { testInvalid("{(any | any), !int}","((int | any) | !int)"); }
		@Test public void test_4913() { testInvalid("{(any | any), !int}","((any | int) | !int)"); }
		@Test public void test_4914() { testInvalid("{(any | any), !int}","((any & int) | !int)"); }
		@Test public void test_4915() { testInvalid("{(any | any), !int}","((int & int) | !int)"); }
		@Test public void test_4916() { testInvalid("{(any | any), !int}","({int} | {any, any})"); }
		@Test public void test_4917() { testInvalid("{(any | any), !int}","(!any | {any, any})"); }
		@Test public void test_4918() { testInvalid("{(any | any), !int}","(!int | {any, any})"); }
		@Test public void test_4919() { testInvalid("{(any | any), !int}","({any, int} | {any, any})"); }
		@Test public void test_4920() { testInvalid("{(any | any), !int}","((int | any) | {any, any})"); }
		@Test public void test_4921() { testInvalid("{(any | any), !int}","((any & any) | {any, any})"); }
		@Test public void test_4922() { testInvalid("{(any | any), !int}","((any & int) | {any, any})"); }
		@Test public void test_4923() { testInvalid("{(any | any), !int}","(!int | {int, any})"); }
		@Test public void test_4924() { testInvalid("{(any | any), !int}","({any, int} | {int, any})"); }
		@Test public void test_4925() { testInvalid("{(any | any), !int}","((any | any) | {int, any})"); }
		@Test public void test_4926() { testInvalid("{(any | any), !int}","((int | any) | {int, any})"); }
		@Test public void test_4927() { testInvalid("{(any | any), !int}","((any | int) | {int, any})"); }
		@Test public void test_4928() { testInvalid("{(any | any), !int}","((int & any) | {int, any})"); }
		@Test public void test_4929() { testInvalid("{(any | any), !int}","({any} | {any, int})"); }
		@Test public void test_4930() { testInvalid("{(any | any), !int}","(!int | {any, int})"); }
		@Test public void test_4931() { testInvalid("{(any | any), !int}","({any, int} | {any, int})"); }
		@Test public void test_4932() { testInvalid("{(any | any), !int}","((any | any) | {any, int})"); }
		@Test public void test_4933() { testInvalid("{(any | any), !int}","((any | int) | {any, int})"); }
		@Test public void test_4934() { testInvalid("{(any | any), !int}","((int | int) | {any, int})"); }
		@Test public void test_4935() { testInvalid("{(any | any), !int}","((int & any) | {any, int})"); }
		@Test public void test_4936() { testInvalid("{(any | any), !int}","(!any | {int, int})"); }
		@Test public void test_4937() { testInvalid("{(any | any), !int}","(!int | {int, int})"); }
		@Test public void test_4938() { testInvalid("{(any | any), !int}","({any, any} | {int, int})"); }
		@Test public void test_4939() { testInvalid("{(any | any), !int}","({any, int} | {int, int})"); }
		@Test public void test_4940() { testInvalid("{(any | any), !int}","((any | any) | {int, int})"); }
		@Test public void test_4941() { testInvalid("{(any | any), !int}","((int | int) | {int, int})"); }
		@Test public void test_4942() { testInvalid("{(any | any), !int}","((int & any) | {int, int})"); }
		@Test public void test_4943() { testInvalid("{(any | any), !int}","((any & int) | {int, int})"); }
		@Test public void test_4944() { testInvalid("{(any | any), !int}","((int & int) | {int, int})"); }
		@Test public void test_4945() { testInvalid("{(any | any), !int}","({any} | (any | any))"); }
		@Test public void test_4946() { testInvalid("{(any | any), !int}","(!any | (any | any))"); }
		@Test public void test_4947() { testInvalid("{(any | any), !int}","({any, any} | (any | any))"); }
		@Test public void test_4948() { testInvalid("{(any | any), !int}","({any, int} | (any | any))"); }
		@Test public void test_4949() { testInvalid("{(any | any), !int}","({int, int} | (any | any))"); }
		@Test public void test_4950() { testInvalid("{(any | any), !int}","((int | any) | (any | any))"); }
		@Test public void test_4951() { testInvalid("{(any | any), !int}","((any | int) | (any | any))"); }
		@Test public void test_4952() { testInvalid("{(any | any), !int}","((any & int) | (any | any))"); }
		@Test public void test_4953() { testInvalid("{(any | any), !int}","((int & int) | (any | any))"); }
		@Test public void test_4954() { testInvalid("{(any | any), !int}","({any} | (int | any))"); }
		@Test public void test_4955() { testInvalid("{(any | any), !int}","(!int | (int | any))"); }
		@Test public void test_4956() { testInvalid("{(any | any), !int}","({int, any} | (int | any))"); }
		@Test public void test_4957() { testInvalid("{(any | any), !int}","({any, int} | (int | any))"); }
		@Test public void test_4958() { testInvalid("{(any | any), !int}","((int & any) | (int | any))"); }
		@Test public void test_4959() { testInvalid("{(any | any), !int}","((any & int) | (int | any))"); }
		@Test public void test_4960() { testInvalid("{(any | any), !int}","({any} | (any | int))"); }
		@Test public void test_4961() { testInvalid("{(any | any), !int}","({int} | (any | int))"); }
		@Test public void test_4962() { testInvalid("{(any | any), !int}","(!any | (any | int))"); }
		@Test public void test_4963() { testInvalid("{(any | any), !int}","(!int | (any | int))"); }
		@Test public void test_4964() { testInvalid("{(any | any), !int}","({any, int} | (any | int))"); }
		@Test public void test_4965() { testInvalid("{(any | any), !int}","({int, int} | (any | int))"); }
		@Test public void test_4966() { testInvalid("{(any | any), !int}","((int | any) | (any | int))"); }
		@Test public void test_4967() { testInvalid("{(any | any), !int}","((any | int) | (any | int))"); }
		@Test public void test_4968() { testInvalid("{(any | any), !int}","((int | int) | (any | int))"); }
		@Test public void test_4969() { testInvalid("{(any | any), !int}","((any & any) | (any | int))"); }
		@Test public void test_4970() { testInvalid("{(any | any), !int}","({int} | (int | int))"); }
		@Test public void test_4971() { testInvalid("{(any | any), !int}","(!any | (int | int))"); }
		@Test public void test_4972() { testInvalid("{(any | any), !int}","(!int | (int | int))"); }
		@Test public void test_4973() { testInvalid("{(any | any), !int}","({int, any} | (int | int))"); }
		@Test public void test_4974() { testInvalid("{(any | any), !int}","({any, int} | (int | int))"); }
		@Test public void test_4975() { testInvalid("{(any | any), !int}","((any | int) | (int | int))"); }
		@Test public void test_4976() { testInvalid("{(any | any), !int}","((int | int) | (int | int))"); }
		@Test public void test_4977() { testInvalid("{(any | any), !int}","((any & any) | (int | int))"); }
		@Test public void test_4978() { testInvalid("{(any | any), !int}","((int & any) | (int | int))"); }
		@Test public void test_4979() { testInvalid("{(any | any), !int}","((int & int) | (int | int))"); }
		@Test public void test_4980() { testInvalid("{(any | any), !int}","(!any | (any & any))"); }
		@Test public void test_4981() { testInvalid("{(any | any), !int}","(!int | (any & any))"); }
		@Test public void test_4982() { testInvalid("{(any | any), !int}","({any, any} | (any & any))"); }
		@Test public void test_4983() { testInvalid("{(any | any), !int}","({int, any} | (any & any))"); }
		@Test public void test_4984() { testInvalid("{(any | any), !int}","({any, int} | (any & any))"); }
		@Test public void test_4985() { testInvalid("{(any | any), !int}","({int, int} | (any & any))"); }
		@Test public void test_4986() { testInvalid("{(any | any), !int}","((int | any) | (any & any))"); }
		@Test public void test_4987() { testInvalid("{(any | any), !int}","((int | int) | (any & any))"); }
		@Test public void test_4988() { testInvalid("{(any | any), !int}","((int & any) | (any & any))"); }
		@Test public void test_4989() { testInvalid("{(any | any), !int}","((any & int) | (any & any))"); }
		@Test public void test_4990() { testInvalid("{(any | any), !int}","((int & int) | (any & any))"); }
		@Test public void test_4991() { testInvalid("{(any | any), !int}","({any} | (int & any))"); }
		@Test public void test_4992() { testInvalid("{(int | any), !int}","{int}"); }
		@Test public void test_4993() { testInvalid("{(int | any), !int}","{any, any}"); }
		@Test public void test_4994() { testInvalid("{(int | any), !int}","{int, int}"); }
		@Test public void test_4995() { testInvalid("{(int | any), !int}","(any | int)"); }
		@Test public void test_4996() { testInvalid("{(int | any), !int}","(int & any)"); }
		@Test public void test_4997() { testInvalid("{(int | any), !int}","{{any}}"); }
		@Test public void test_4998() { testInvalid("{(int | any), !int}","{{int, any}}"); }
		@Test public void test_4999() { testInvalid("{(int | any), !int}","{{int, int}}"); }
		@Test public void test_5000() { testInvalid("{(int | any), !int}","{(any | int)}"); }
		@Test public void test_5001() { testInvalid("{(int | any), !int}","!{int, any}"); }
		@Test public void test_5002() { testInvalid("{(int | any), !int}","!{int, int}"); }
		@Test public void test_5003() { testValid("{(int | any), !int}","!(any | any)"); }
		@Test public void test_5004() { testValid("{(int | any), !int}","!(any & any)"); }
		@Test public void test_5005() { testInvalid("{(int | any), !int}","!(int & int)"); }
		@Test public void test_5006() { testValid("{(int | any), !int}","{{int}, {any}}"); }
		@Test public void test_5007() { testValid("{(int | any), !int}","{!int, {any}}"); }
		@Test public void test_5008() { testValid("{(int | any), !int}","{{int, int}, {any}}"); }
		@Test public void test_5009() { testValid("{(int | any), !int}","{(any | int), {any}}"); }
		@Test public void test_5010() { testValid("{(int | any), !int}","{!int, {int}}"); }
		@Test public void test_5011() { testValid("{(int | any), !int}","{{any, any}, {int}}"); }
		@Test public void test_5012() { testValid("{(int | any), !int}","{(any | any), {int}}"); }
		@Test public void test_5013() { testValid("{(int | any), !int}","{(any & any), {int}}"); }
		@Test public void test_5014() { testValid("{(int | any), !int}","{(any & int), {int}}"); }
		@Test public void test_5015() { testValid("{(int | any), !int}","{{any, any}, !int}"); }
		@Test public void test_5016() { testValid("{(int | any), !int}","{{any, int}, !int}"); }
		@Test public void test_5017() { testValid("{(int | any), !int}","{(any | any), !int}"); }
		@Test public void test_5018() { testValid("{(int | any), !int}","{(int | any), !int}"); }
		@Test public void test_5019() { testValid("{(int | any), !int}","{(any & any), !int}"); }
		@Test public void test_5020() { testValid("{(int | any), !int}","{(int & any), !int}"); }
		@Test public void test_5021() { testValid("{(int | any), !int}","{(int & int), !int}"); }
		@Test public void test_5022() { testValid("{(int | any), !int}","{{any}, {any, any}}"); }
		@Test public void test_5023() { testValid("{(int | any), !int}","{{int}, {any, any}}"); }
		@Test public void test_5024() { testValid("{(int | any), !int}","{{int, int}, {any, any}}"); }
		@Test public void test_5025() { testValid("{(int | any), !int}","{(any | any), {any, any}}"); }
		@Test public void test_5026() { testValid("{(int | any), !int}","{(any | int), {any, any}}"); }
		@Test public void test_5027() { testValid("{(int | any), !int}","{!int, {int, any}}"); }
		@Test public void test_5028() { testValid("{(int | any), !int}","{{int, any}, {int, any}}"); }
		@Test public void test_5029() { testValid("{(int | any), !int}","{{any, int}, {int, any}}"); }
		@Test public void test_5030() { testValid("{(int | any), !int}","{(any & int), {int, any}}"); }
		@Test public void test_5031() { testValid("{(int | any), !int}","{{any}, {any, int}}"); }
		@Test public void test_5032() { testValid("{(int | any), !int}","{{int, int}, {any, int}}"); }
		@Test public void test_5033() { testValid("{(int | any), !int}","{(int | int), {any, int}}"); }
		@Test public void test_5034() { testValid("{(int | any), !int}","{(any & int), {any, int}}"); }
		@Test public void test_5035() { testValid("{(int | any), !int}","{!int, {int, int}}"); }
		@Test public void test_5036() { testValid("{(int | any), !int}","{{int, int}, {int, int}}"); }
		@Test public void test_5037() { testValid("{(int | any), !int}","{(any | any), {int, int}}"); }
		@Test public void test_5038() { testValid("{(int | any), !int}","{(int | any), {int, int}}"); }
		@Test public void test_5039() { testValid("{(int | any), !int}","{(int & any), {int, int}}"); }
		@Test public void test_5040() { testInvalid("{(int | any), !int}","{{int}, (any | any)}"); }
		@Test public void test_5041() { testInvalid("{(int | any), !int}","{{int, any}, (any | any)}"); }
		@Test public void test_5042() { testInvalid("{(int | any), !int}","{{any, int}, (any | any)}"); }
		@Test public void test_5043() { testInvalid("{(int | any), !int}","{(any | any), (any | any)}"); }
		@Test public void test_5044() { testInvalid("{(int | any), !int}","{(int | any), (any | any)}"); }
		@Test public void test_5045() { testInvalid("{(int | any), !int}","{(int & int), (any | any)}"); }
		@Test public void test_5046() { testInvalid("{(int | any), !int}","{!int, (int | any)}"); }
		@Test public void test_5047() { testInvalid("{(int | any), !int}","{{int, int}, (int | any)}"); }
		@Test public void test_5048() { testInvalid("{(int | any), !int}","{(any | any), (int | any)}"); }
		@Test public void test_5049() { testInvalid("{(int | any), !int}","{(int | int), (int | any)}"); }
		@Test public void test_5050() { testInvalid("{(int | any), !int}","{{any}, (any | int)}"); }
		@Test public void test_5051() { testInvalid("{(int | any), !int}","{!int, (any | int)}"); }
		@Test public void test_5052() { testInvalid("{(int | any), !int}","{(any | any), (any | int)}"); }
		@Test public void test_5053() { testInvalid("{(int | any), !int}","{(any | int), (any | int)}"); }
		@Test public void test_5054() { testInvalid("{(int | any), !int}","{(any & int), (any | int)}"); }
		@Test public void test_5055() { testInvalid("{(int | any), !int}","{{int}, (int | int)}"); }
		@Test public void test_5056() { testInvalid("{(int | any), !int}","{{any, any}, (int | int)}"); }
		@Test public void test_5057() { testInvalid("{(int | any), !int}","{{int, int}, (int | int)}"); }
		@Test public void test_5058() { testInvalid("{(int | any), !int}","{{int}, (any & any)}"); }
		@Test public void test_5059() { testInvalid("{(int | any), !int}","{{int, any}, (any & any)}"); }
		@Test public void test_5060() { testInvalid("{(int | any), !int}","{{any, int}, (any & any)}"); }
		@Test public void test_5061() { testInvalid("{(int | any), !int}","{(int | any), (any & any)}"); }
		@Test public void test_5062() { testInvalid("{(int | any), !int}","{(any & any), (any & any)}"); }
		@Test public void test_5063() { testInvalid("{(int | any), !int}","{(int & any), (any & any)}"); }
		@Test public void test_5064() { testInvalid("{(int | any), !int}","{{any}, (int & any)}"); }
		@Test public void test_5065() { testInvalid("{(int | any), !int}","{{int}, (int & any)}"); }
		@Test public void test_5066() { testInvalid("{(int | any), !int}","{{any, any}, (int & any)}"); }
		@Test public void test_5067() { testInvalid("{(int | any), !int}","{{int, any}, (int & any)}"); }
		@Test public void test_5068() { testInvalid("{(int | any), !int}","{(any | int), (int & any)}"); }
		@Test public void test_5069() { testInvalid("{(int | any), !int}","{(any & any), (int & any)}"); }
		@Test public void test_5070() { testInvalid("{(int | any), !int}","{(int & any), (int & any)}"); }
		@Test public void test_5071() { testInvalid("{(int | any), !int}","{(int & int), (int & any)}"); }
		@Test public void test_5072() { testInvalid("{(int | any), !int}","{{int, any}, (any & int)}"); }
		@Test public void test_5073() { testInvalid("{(int | any), !int}","{(any & any), (any & int)}"); }
		@Test public void test_5074() { testInvalid("{(int | any), !int}","{{any, int}, (int & int)}"); }
		@Test public void test_5075() { testInvalid("{(int | any), !int}","{(int | int), (int & int)}"); }
		@Test public void test_5076() { testInvalid("{(int | any), !int}","{(any & any), (int & int)}"); }
		@Test public void test_5077() { testInvalid("{(int | any), !int}","{(any & int), (int & int)}"); }
		@Test public void test_5078() { testInvalid("{(int | any), !int}","{(int & int), (int & int)}"); }
		@Test public void test_5079() { testInvalid("{(int | any), !int}","(!int | {any})"); }
		@Test public void test_5080() { testInvalid("{(int | any), !int}","({any, any} | {any})"); }
		@Test public void test_5081() { testInvalid("{(int | any), !int}","((any | any) | {any})"); }
		@Test public void test_5082() { testInvalid("{(int | any), !int}","((int | any) | {any})"); }
		@Test public void test_5083() { testInvalid("{(int | any), !int}","((any & any) | {any})"); }
		@Test public void test_5084() { testInvalid("{(int | any), !int}","((int & any) | {any})"); }
		@Test public void test_5085() { testInvalid("{(int | any), !int}","((any & int) | {any})"); }
		@Test public void test_5086() { testInvalid("{(int | any), !int}","({int} | {int})"); }
		@Test public void test_5087() { testInvalid("{(int | any), !int}","(!any | {int})"); }
		@Test public void test_5088() { testInvalid("{(int | any), !int}","(!int | {int})"); }
		@Test public void test_5089() { testInvalid("{(int | any), !int}","({any, int} | {int})"); }
		@Test public void test_5090() { testInvalid("{(int | any), !int}","((int & any) | {int})"); }
		@Test public void test_5091() { testInvalid("{(int | any), !int}","((any & int) | {int})"); }
		@Test public void test_5092() { testInvalid("{(int | any), !int}","((int & int) | {int})"); }
		@Test public void test_5093() { testInvalid("{(int | any), !int}","({any} | !any)"); }
		@Test public void test_5094() { testInvalid("{(int | any), !int}","({int} | !any)"); }
		@Test public void test_5095() { testInvalid("{(int | any), !int}","({any, any} | !any)"); }
		@Test public void test_5096() { testInvalid("{(int | any), !int}","({int, int} | !any)"); }
		@Test public void test_5097() { testInvalid("{(int | any), !int}","((any | any) | !any)"); }
		@Test public void test_5098() { testInvalid("{(int | any), !int}","((int | any) | !any)"); }
		@Test public void test_5099() { testInvalid("{(int | any), !int}","((int | int) | !any)"); }
		@Test public void test_5100() { testInvalid("{(int | any), !int}","((int & int) | !any)"); }
		@Test public void test_5101() { testInvalid("{(int | any), !int}","(!int | !int)"); }
		@Test public void test_5102() { testInvalid("{(int | any), !int}","({any, any} | !int)"); }
		@Test public void test_5103() { testInvalid("{(int | any), !int}","({int, int} | !int)"); }
		@Test public void test_5104() { testInvalid("{(int | any), !int}","((int | any) | !int)"); }
		@Test public void test_5105() { testInvalid("{(int | any), !int}","((any | int) | !int)"); }
		@Test public void test_5106() { testInvalid("{(int | any), !int}","((any & int) | !int)"); }
		@Test public void test_5107() { testInvalid("{(int | any), !int}","((int & int) | !int)"); }
		@Test public void test_5108() { testInvalid("{(int | any), !int}","({int} | {any, any})"); }
		@Test public void test_5109() { testInvalid("{(int | any), !int}","(!any | {any, any})"); }
		@Test public void test_5110() { testInvalid("{(int | any), !int}","(!int | {any, any})"); }
		@Test public void test_5111() { testInvalid("{(int | any), !int}","({any, int} | {any, any})"); }
		@Test public void test_5112() { testInvalid("{(int | any), !int}","((int | any) | {any, any})"); }
		@Test public void test_5113() { testInvalid("{(int | any), !int}","((any & any) | {any, any})"); }
		@Test public void test_5114() { testInvalid("{(int | any), !int}","((any & int) | {any, any})"); }
		@Test public void test_5115() { testInvalid("{(int | any), !int}","(!int | {int, any})"); }
		@Test public void test_5116() { testInvalid("{(int | any), !int}","({any, int} | {int, any})"); }
		@Test public void test_5117() { testInvalid("{(int | any), !int}","((any | any) | {int, any})"); }
		@Test public void test_5118() { testInvalid("{(int | any), !int}","((int | any) | {int, any})"); }
		@Test public void test_5119() { testInvalid("{(int | any), !int}","((any | int) | {int, any})"); }
		@Test public void test_5120() { testInvalid("{(int | any), !int}","((int & any) | {int, any})"); }
		@Test public void test_5121() { testInvalid("{(int | any), !int}","({any} | {any, int})"); }
		@Test public void test_5122() { testInvalid("{(int | any), !int}","(!int | {any, int})"); }
		@Test public void test_5123() { testInvalid("{(int | any), !int}","({any, int} | {any, int})"); }
		@Test public void test_5124() { testInvalid("{(int | any), !int}","((any | any) | {any, int})"); }
		@Test public void test_5125() { testInvalid("{(int | any), !int}","((any | int) | {any, int})"); }
		@Test public void test_5126() { testInvalid("{(int | any), !int}","((int | int) | {any, int})"); }
		@Test public void test_5127() { testInvalid("{(int | any), !int}","((int & any) | {any, int})"); }
		@Test public void test_5128() { testInvalid("{(int | any), !int}","(!any | {int, int})"); }
		@Test public void test_5129() { testInvalid("{(int | any), !int}","(!int | {int, int})"); }
		@Test public void test_5130() { testInvalid("{(int | any), !int}","({any, any} | {int, int})"); }
		@Test public void test_5131() { testInvalid("{(int | any), !int}","({any, int} | {int, int})"); }
		@Test public void test_5132() { testInvalid("{(int | any), !int}","((any | any) | {int, int})"); }
		@Test public void test_5133() { testInvalid("{(int | any), !int}","((int | int) | {int, int})"); }
		@Test public void test_5134() { testInvalid("{(int | any), !int}","((int & any) | {int, int})"); }
		@Test public void test_5135() { testInvalid("{(int | any), !int}","((any & int) | {int, int})"); }
		@Test public void test_5136() { testInvalid("{(int | any), !int}","((int & int) | {int, int})"); }
		@Test public void test_5137() { testInvalid("{(int | any), !int}","({any} | (any | any))"); }
		@Test public void test_5138() { testInvalid("{(int | any), !int}","(!any | (any | any))"); }
		@Test public void test_5139() { testInvalid("{(int | any), !int}","({any, any} | (any | any))"); }
		@Test public void test_5140() { testInvalid("{(int | any), !int}","({any, int} | (any | any))"); }
		@Test public void test_5141() { testInvalid("{(int | any), !int}","({int, int} | (any | any))"); }
		@Test public void test_5142() { testInvalid("{(int | any), !int}","((int | any) | (any | any))"); }
		@Test public void test_5143() { testInvalid("{(int | any), !int}","((any | int) | (any | any))"); }
		@Test public void test_5144() { testInvalid("{(int | any), !int}","((any & int) | (any | any))"); }
		@Test public void test_5145() { testInvalid("{(int | any), !int}","((int & int) | (any | any))"); }
		@Test public void test_5146() { testInvalid("{(int | any), !int}","({any} | (int | any))"); }
		@Test public void test_5147() { testInvalid("{(int | any), !int}","(!int | (int | any))"); }
		@Test public void test_5148() { testInvalid("{(int | any), !int}","({int, any} | (int | any))"); }
		@Test public void test_5149() { testInvalid("{(int | any), !int}","({any, int} | (int | any))"); }
		@Test public void test_5150() { testInvalid("{(int | any), !int}","((int & any) | (int | any))"); }
		@Test public void test_5151() { testInvalid("{(int | any), !int}","((any & int) | (int | any))"); }
		@Test public void test_5152() { testInvalid("{(int | any), !int}","({any} | (any | int))"); }
		@Test public void test_5153() { testInvalid("{(int | any), !int}","({int} | (any | int))"); }
		@Test public void test_5154() { testInvalid("{(int | any), !int}","(!any | (any | int))"); }
		@Test public void test_5155() { testInvalid("{(int | any), !int}","(!int | (any | int))"); }
		@Test public void test_5156() { testInvalid("{(int | any), !int}","({any, int} | (any | int))"); }
		@Test public void test_5157() { testInvalid("{(int | any), !int}","({int, int} | (any | int))"); }
		@Test public void test_5158() { testInvalid("{(int | any), !int}","((int | any) | (any | int))"); }
		@Test public void test_5159() { testInvalid("{(int | any), !int}","((any | int) | (any | int))"); }
		@Test public void test_5160() { testInvalid("{(int | any), !int}","((int | int) | (any | int))"); }
		@Test public void test_5161() { testInvalid("{(int | any), !int}","((any & any) | (any | int))"); }
		@Test public void test_5162() { testInvalid("{(int | any), !int}","({int} | (int | int))"); }
		@Test public void test_5163() { testInvalid("{(int | any), !int}","(!any | (int | int))"); }
		@Test public void test_5164() { testInvalid("{(int | any), !int}","(!int | (int | int))"); }
		@Test public void test_5165() { testInvalid("{(int | any), !int}","({int, any} | (int | int))"); }
		@Test public void test_5166() { testInvalid("{(int | any), !int}","({any, int} | (int | int))"); }
		@Test public void test_5167() { testInvalid("{(int | any), !int}","((any | int) | (int | int))"); }
		@Test public void test_5168() { testInvalid("{(int | any), !int}","((int | int) | (int | int))"); }
		@Test public void test_5169() { testInvalid("{(int | any), !int}","((any & any) | (int | int))"); }
		@Test public void test_5170() { testInvalid("{(int | any), !int}","((int & any) | (int | int))"); }
		@Test public void test_5171() { testInvalid("{(int | any), !int}","((int & int) | (int | int))"); }
		@Test public void test_5172() { testInvalid("{(int | any), !int}","(!any | (any & any))"); }
		@Test public void test_5173() { testInvalid("{(int | any), !int}","(!int | (any & any))"); }
		@Test public void test_5174() { testInvalid("{(int | any), !int}","({any, any} | (any & any))"); }
		@Test public void test_5175() { testInvalid("{(int | any), !int}","({int, any} | (any & any))"); }
		@Test public void test_5176() { testInvalid("{(int | any), !int}","({any, int} | (any & any))"); }
		@Test public void test_5177() { testInvalid("{(int | any), !int}","({int, int} | (any & any))"); }
		@Test public void test_5178() { testInvalid("{(int | any), !int}","((int | any) | (any & any))"); }
		@Test public void test_5179() { testInvalid("{(int | any), !int}","((int | int) | (any & any))"); }
		@Test public void test_5180() { testInvalid("{(int | any), !int}","((int & any) | (any & any))"); }
		@Test public void test_5181() { testInvalid("{(int | any), !int}","((any & int) | (any & any))"); }
		@Test public void test_5182() { testInvalid("{(int | any), !int}","((int & int) | (any & any))"); }
		@Test public void test_5183() { testInvalid("{(int | any), !int}","({any} | (int & any))"); }
		@Test public void test_5184() { testInvalid("{(any & any), !int}","{int}"); }
		@Test public void test_5185() { testInvalid("{(any & any), !int}","{any, any}"); }
		@Test public void test_5186() { testInvalid("{(any & any), !int}","{int, int}"); }
		@Test public void test_5187() { testInvalid("{(any & any), !int}","(any | int)"); }
		@Test public void test_5188() { testInvalid("{(any & any), !int}","(int & any)"); }
		@Test public void test_5189() { testInvalid("{(any & any), !int}","{{any}}"); }
		@Test public void test_5190() { testInvalid("{(any & any), !int}","{{int, any}}"); }
		@Test public void test_5191() { testInvalid("{(any & any), !int}","{{int, int}}"); }
		@Test public void test_5192() { testInvalid("{(any & any), !int}","{(any | int)}"); }
		@Test public void test_5193() { testInvalid("{(any & any), !int}","!{int, any}"); }
		@Test public void test_5194() { testInvalid("{(any & any), !int}","!{int, int}"); }
		@Test public void test_5195() { testValid("{(any & any), !int}","!(any | any)"); }
		@Test public void test_5196() { testValid("{(any & any), !int}","!(any & any)"); }
		@Test public void test_5197() { testInvalid("{(any & any), !int}","!(int & int)"); }
		@Test public void test_5198() { testValid("{(any & any), !int}","{{int}, {any}}"); }
		@Test public void test_5199() { testValid("{(any & any), !int}","{!int, {any}}"); }
		@Test public void test_5200() { testValid("{(any & any), !int}","{{int, int}, {any}}"); }
		@Test public void test_5201() { testValid("{(any & any), !int}","{(any | int), {any}}"); }
		@Test public void test_5202() { testValid("{(any & any), !int}","{!int, {int}}"); }
		@Test public void test_5203() { testValid("{(any & any), !int}","{{any, any}, {int}}"); }
		@Test public void test_5204() { testValid("{(any & any), !int}","{(any | any), {int}}"); }
		@Test public void test_5205() { testValid("{(any & any), !int}","{(any & any), {int}}"); }
		@Test public void test_5206() { testValid("{(any & any), !int}","{(any & int), {int}}"); }
		@Test public void test_5207() { testValid("{(any & any), !int}","{{any, any}, !int}"); }
		@Test public void test_5208() { testValid("{(any & any), !int}","{{any, int}, !int}"); }
		@Test public void test_5209() { testValid("{(any & any), !int}","{(any | any), !int}"); }
		@Test public void test_5210() { testValid("{(any & any), !int}","{(int | any), !int}"); }
		@Test public void test_5211() { testValid("{(any & any), !int}","{(any & any), !int}"); }
		@Test public void test_5212() { testValid("{(any & any), !int}","{(int & any), !int}"); }
		@Test public void test_5213() { testValid("{(any & any), !int}","{(int & int), !int}"); }
		@Test public void test_5214() { testValid("{(any & any), !int}","{{any}, {any, any}}"); }
		@Test public void test_5215() { testValid("{(any & any), !int}","{{int}, {any, any}}"); }
		@Test public void test_5216() { testValid("{(any & any), !int}","{{int, int}, {any, any}}"); }
		@Test public void test_5217() { testValid("{(any & any), !int}","{(any | any), {any, any}}"); }
		@Test public void test_5218() { testValid("{(any & any), !int}","{(any | int), {any, any}}"); }
		@Test public void test_5219() { testValid("{(any & any), !int}","{!int, {int, any}}"); }
		@Test public void test_5220() { testValid("{(any & any), !int}","{{int, any}, {int, any}}"); }
		@Test public void test_5221() { testValid("{(any & any), !int}","{{any, int}, {int, any}}"); }
		@Test public void test_5222() { testValid("{(any & any), !int}","{(any & int), {int, any}}"); }
		@Test public void test_5223() { testValid("{(any & any), !int}","{{any}, {any, int}}"); }
		@Test public void test_5224() { testValid("{(any & any), !int}","{{int, int}, {any, int}}"); }
		@Test public void test_5225() { testValid("{(any & any), !int}","{(int | int), {any, int}}"); }
		@Test public void test_5226() { testValid("{(any & any), !int}","{(any & int), {any, int}}"); }
		@Test public void test_5227() { testValid("{(any & any), !int}","{!int, {int, int}}"); }
		@Test public void test_5228() { testValid("{(any & any), !int}","{{int, int}, {int, int}}"); }
		@Test public void test_5229() { testValid("{(any & any), !int}","{(any | any), {int, int}}"); }
		@Test public void test_5230() { testValid("{(any & any), !int}","{(int | any), {int, int}}"); }
		@Test public void test_5231() { testValid("{(any & any), !int}","{(int & any), {int, int}}"); }
		@Test public void test_5232() { testInvalid("{(any & any), !int}","{{int}, (any | any)}"); }
		@Test public void test_5233() { testInvalid("{(any & any), !int}","{{int, any}, (any | any)}"); }
		@Test public void test_5234() { testInvalid("{(any & any), !int}","{{any, int}, (any | any)}"); }
		@Test public void test_5235() { testInvalid("{(any & any), !int}","{(any | any), (any | any)}"); }
		@Test public void test_5236() { testInvalid("{(any & any), !int}","{(int | any), (any | any)}"); }
		@Test public void test_5237() { testInvalid("{(any & any), !int}","{(int & int), (any | any)}"); }
		@Test public void test_5238() { testInvalid("{(any & any), !int}","{!int, (int | any)}"); }
		@Test public void test_5239() { testInvalid("{(any & any), !int}","{{int, int}, (int | any)}"); }
		@Test public void test_5240() { testInvalid("{(any & any), !int}","{(any | any), (int | any)}"); }
		@Test public void test_5241() { testInvalid("{(any & any), !int}","{(int | int), (int | any)}"); }
		@Test public void test_5242() { testInvalid("{(any & any), !int}","{{any}, (any | int)}"); }
		@Test public void test_5243() { testInvalid("{(any & any), !int}","{!int, (any | int)}"); }
		@Test public void test_5244() { testInvalid("{(any & any), !int}","{(any | any), (any | int)}"); }
		@Test public void test_5245() { testInvalid("{(any & any), !int}","{(any | int), (any | int)}"); }
		@Test public void test_5246() { testInvalid("{(any & any), !int}","{(any & int), (any | int)}"); }
		@Test public void test_5247() { testInvalid("{(any & any), !int}","{{int}, (int | int)}"); }
		@Test public void test_5248() { testInvalid("{(any & any), !int}","{{any, any}, (int | int)}"); }
		@Test public void test_5249() { testInvalid("{(any & any), !int}","{{int, int}, (int | int)}"); }
		@Test public void test_5250() { testInvalid("{(any & any), !int}","{{int}, (any & any)}"); }
		@Test public void test_5251() { testInvalid("{(any & any), !int}","{{int, any}, (any & any)}"); }
		@Test public void test_5252() { testInvalid("{(any & any), !int}","{{any, int}, (any & any)}"); }
		@Test public void test_5253() { testInvalid("{(any & any), !int}","{(int | any), (any & any)}"); }
		@Test public void test_5254() { testInvalid("{(any & any), !int}","{(any & any), (any & any)}"); }
		@Test public void test_5255() { testInvalid("{(any & any), !int}","{(int & any), (any & any)}"); }
		@Test public void test_5256() { testInvalid("{(any & any), !int}","{{any}, (int & any)}"); }
		@Test public void test_5257() { testInvalid("{(any & any), !int}","{{int}, (int & any)}"); }
		@Test public void test_5258() { testInvalid("{(any & any), !int}","{{any, any}, (int & any)}"); }
		@Test public void test_5259() { testInvalid("{(any & any), !int}","{{int, any}, (int & any)}"); }
		@Test public void test_5260() { testInvalid("{(any & any), !int}","{(any | int), (int & any)}"); }
		@Test public void test_5261() { testInvalid("{(any & any), !int}","{(any & any), (int & any)}"); }
		@Test public void test_5262() { testInvalid("{(any & any), !int}","{(int & any), (int & any)}"); }
		@Test public void test_5263() { testInvalid("{(any & any), !int}","{(int & int), (int & any)}"); }
		@Test public void test_5264() { testInvalid("{(any & any), !int}","{{int, any}, (any & int)}"); }
		@Test public void test_5265() { testInvalid("{(any & any), !int}","{(any & any), (any & int)}"); }
		@Test public void test_5266() { testInvalid("{(any & any), !int}","{{any, int}, (int & int)}"); }
		@Test public void test_5267() { testInvalid("{(any & any), !int}","{(int | int), (int & int)}"); }
		@Test public void test_5268() { testInvalid("{(any & any), !int}","{(any & any), (int & int)}"); }
		@Test public void test_5269() { testInvalid("{(any & any), !int}","{(any & int), (int & int)}"); }
		@Test public void test_5270() { testInvalid("{(any & any), !int}","{(int & int), (int & int)}"); }
		@Test public void test_5271() { testInvalid("{(any & any), !int}","(!int | {any})"); }
		@Test public void test_5272() { testInvalid("{(any & any), !int}","({any, any} | {any})"); }
		@Test public void test_5273() { testInvalid("{(any & any), !int}","((any | any) | {any})"); }
		@Test public void test_5274() { testInvalid("{(any & any), !int}","((int | any) | {any})"); }
		@Test public void test_5275() { testInvalid("{(any & any), !int}","((any & any) | {any})"); }
		@Test public void test_5276() { testInvalid("{(any & any), !int}","((int & any) | {any})"); }
		@Test public void test_5277() { testInvalid("{(any & any), !int}","((any & int) | {any})"); }
		@Test public void test_5278() { testInvalid("{(any & any), !int}","({int} | {int})"); }
		@Test public void test_5279() { testInvalid("{(any & any), !int}","(!any | {int})"); }
		@Test public void test_5280() { testInvalid("{(any & any), !int}","(!int | {int})"); }
		@Test public void test_5281() { testInvalid("{(any & any), !int}","({any, int} | {int})"); }
		@Test public void test_5282() { testInvalid("{(any & any), !int}","((int & any) | {int})"); }
		@Test public void test_5283() { testInvalid("{(any & any), !int}","((any & int) | {int})"); }
		@Test public void test_5284() { testInvalid("{(any & any), !int}","((int & int) | {int})"); }
		@Test public void test_5285() { testInvalid("{(any & any), !int}","({any} | !any)"); }
		@Test public void test_5286() { testInvalid("{(any & any), !int}","({int} | !any)"); }
		@Test public void test_5287() { testInvalid("{(any & any), !int}","({any, any} | !any)"); }
		@Test public void test_5288() { testInvalid("{(any & any), !int}","({int, int} | !any)"); }
		@Test public void test_5289() { testInvalid("{(any & any), !int}","((any | any) | !any)"); }
		@Test public void test_5290() { testInvalid("{(any & any), !int}","((int | any) | !any)"); }
		@Test public void test_5291() { testInvalid("{(any & any), !int}","((int | int) | !any)"); }
		@Test public void test_5292() { testInvalid("{(any & any), !int}","((int & int) | !any)"); }
		@Test public void test_5293() { testInvalid("{(any & any), !int}","(!int | !int)"); }
		@Test public void test_5294() { testInvalid("{(any & any), !int}","({any, any} | !int)"); }
		@Test public void test_5295() { testInvalid("{(any & any), !int}","({int, int} | !int)"); }
		@Test public void test_5296() { testInvalid("{(any & any), !int}","((int | any) | !int)"); }
		@Test public void test_5297() { testInvalid("{(any & any), !int}","((any | int) | !int)"); }
		@Test public void test_5298() { testInvalid("{(any & any), !int}","((any & int) | !int)"); }
		@Test public void test_5299() { testInvalid("{(any & any), !int}","((int & int) | !int)"); }
		@Test public void test_5300() { testInvalid("{(any & any), !int}","({int} | {any, any})"); }
		@Test public void test_5301() { testInvalid("{(any & any), !int}","(!any | {any, any})"); }
		@Test public void test_5302() { testInvalid("{(any & any), !int}","(!int | {any, any})"); }
		@Test public void test_5303() { testInvalid("{(any & any), !int}","({any, int} | {any, any})"); }
		@Test public void test_5304() { testInvalid("{(any & any), !int}","((int | any) | {any, any})"); }
		@Test public void test_5305() { testInvalid("{(any & any), !int}","((any & any) | {any, any})"); }
		@Test public void test_5306() { testInvalid("{(any & any), !int}","((any & int) | {any, any})"); }
		@Test public void test_5307() { testInvalid("{(any & any), !int}","(!int | {int, any})"); }
		@Test public void test_5308() { testInvalid("{(any & any), !int}","({any, int} | {int, any})"); }
		@Test public void test_5309() { testInvalid("{(any & any), !int}","((any | any) | {int, any})"); }
		@Test public void test_5310() { testInvalid("{(any & any), !int}","((int | any) | {int, any})"); }
		@Test public void test_5311() { testInvalid("{(any & any), !int}","((any | int) | {int, any})"); }
		@Test public void test_5312() { testInvalid("{(any & any), !int}","((int & any) | {int, any})"); }
		@Test public void test_5313() { testInvalid("{(any & any), !int}","({any} | {any, int})"); }
		@Test public void test_5314() { testInvalid("{(any & any), !int}","(!int | {any, int})"); }
		@Test public void test_5315() { testInvalid("{(any & any), !int}","({any, int} | {any, int})"); }
		@Test public void test_5316() { testInvalid("{(any & any), !int}","((any | any) | {any, int})"); }
		@Test public void test_5317() { testInvalid("{(any & any), !int}","((any | int) | {any, int})"); }
		@Test public void test_5318() { testInvalid("{(any & any), !int}","((int | int) | {any, int})"); }
		@Test public void test_5319() { testInvalid("{(any & any), !int}","((int & any) | {any, int})"); }
		@Test public void test_5320() { testInvalid("{(any & any), !int}","(!any | {int, int})"); }
		@Test public void test_5321() { testInvalid("{(any & any), !int}","(!int | {int, int})"); }
		@Test public void test_5322() { testInvalid("{(any & any), !int}","({any, any} | {int, int})"); }
		@Test public void test_5323() { testInvalid("{(any & any), !int}","({any, int} | {int, int})"); }
		@Test public void test_5324() { testInvalid("{(any & any), !int}","((any | any) | {int, int})"); }
		@Test public void test_5325() { testInvalid("{(any & any), !int}","((int | int) | {int, int})"); }
		@Test public void test_5326() { testInvalid("{(any & any), !int}","((int & any) | {int, int})"); }
		@Test public void test_5327() { testInvalid("{(any & any), !int}","((any & int) | {int, int})"); }
		@Test public void test_5328() { testInvalid("{(any & any), !int}","((int & int) | {int, int})"); }
		@Test public void test_5329() { testInvalid("{(any & any), !int}","({any} | (any | any))"); }
		@Test public void test_5330() { testInvalid("{(any & any), !int}","(!any | (any | any))"); }
		@Test public void test_5331() { testInvalid("{(any & any), !int}","({any, any} | (any | any))"); }
		@Test public void test_5332() { testInvalid("{(any & any), !int}","({any, int} | (any | any))"); }
		@Test public void test_5333() { testInvalid("{(any & any), !int}","({int, int} | (any | any))"); }
		@Test public void test_5334() { testInvalid("{(any & any), !int}","((int | any) | (any | any))"); }
		@Test public void test_5335() { testInvalid("{(any & any), !int}","((any | int) | (any | any))"); }
		@Test public void test_5336() { testInvalid("{(any & any), !int}","((any & int) | (any | any))"); }
		@Test public void test_5337() { testInvalid("{(any & any), !int}","((int & int) | (any | any))"); }
		@Test public void test_5338() { testInvalid("{(any & any), !int}","({any} | (int | any))"); }
		@Test public void test_5339() { testInvalid("{(any & any), !int}","(!int | (int | any))"); }
		@Test public void test_5340() { testInvalid("{(any & any), !int}","({int, any} | (int | any))"); }
		@Test public void test_5341() { testInvalid("{(any & any), !int}","({any, int} | (int | any))"); }
		@Test public void test_5342() { testInvalid("{(any & any), !int}","((int & any) | (int | any))"); }
		@Test public void test_5343() { testInvalid("{(any & any), !int}","((any & int) | (int | any))"); }
		@Test public void test_5344() { testInvalid("{(any & any), !int}","({any} | (any | int))"); }
		@Test public void test_5345() { testInvalid("{(any & any), !int}","({int} | (any | int))"); }
		@Test public void test_5346() { testInvalid("{(any & any), !int}","(!any | (any | int))"); }
		@Test public void test_5347() { testInvalid("{(any & any), !int}","(!int | (any | int))"); }
		@Test public void test_5348() { testInvalid("{(any & any), !int}","({any, int} | (any | int))"); }
		@Test public void test_5349() { testInvalid("{(any & any), !int}","({int, int} | (any | int))"); }
		@Test public void test_5350() { testInvalid("{(any & any), !int}","((int | any) | (any | int))"); }
		@Test public void test_5351() { testInvalid("{(any & any), !int}","((any | int) | (any | int))"); }
		@Test public void test_5352() { testInvalid("{(any & any), !int}","((int | int) | (any | int))"); }
		@Test public void test_5353() { testInvalid("{(any & any), !int}","((any & any) | (any | int))"); }
		@Test public void test_5354() { testInvalid("{(any & any), !int}","({int} | (int | int))"); }
		@Test public void test_5355() { testInvalid("{(any & any), !int}","(!any | (int | int))"); }
		@Test public void test_5356() { testInvalid("{(any & any), !int}","(!int | (int | int))"); }
		@Test public void test_5357() { testInvalid("{(any & any), !int}","({int, any} | (int | int))"); }
		@Test public void test_5358() { testInvalid("{(any & any), !int}","({any, int} | (int | int))"); }
		@Test public void test_5359() { testInvalid("{(any & any), !int}","((any | int) | (int | int))"); }
		@Test public void test_5360() { testInvalid("{(any & any), !int}","((int | int) | (int | int))"); }
		@Test public void test_5361() { testInvalid("{(any & any), !int}","((any & any) | (int | int))"); }
		@Test public void test_5362() { testInvalid("{(any & any), !int}","((int & any) | (int | int))"); }
		@Test public void test_5363() { testInvalid("{(any & any), !int}","((int & int) | (int | int))"); }
		@Test public void test_5364() { testInvalid("{(any & any), !int}","(!any | (any & any))"); }
		@Test public void test_5365() { testInvalid("{(any & any), !int}","(!int | (any & any))"); }
		@Test public void test_5366() { testInvalid("{(any & any), !int}","({any, any} | (any & any))"); }
		@Test public void test_5367() { testInvalid("{(any & any), !int}","({int, any} | (any & any))"); }
		@Test public void test_5368() { testInvalid("{(any & any), !int}","({any, int} | (any & any))"); }
		@Test public void test_5369() { testInvalid("{(any & any), !int}","({int, int} | (any & any))"); }
		@Test public void test_5370() { testInvalid("{(any & any), !int}","((int | any) | (any & any))"); }
		@Test public void test_5371() { testInvalid("{(any & any), !int}","((int | int) | (any & any))"); }
		@Test public void test_5372() { testInvalid("{(any & any), !int}","((int & any) | (any & any))"); }
		@Test public void test_5373() { testInvalid("{(any & any), !int}","((any & int) | (any & any))"); }
		@Test public void test_5374() { testInvalid("{(any & any), !int}","((int & int) | (any & any))"); }
		@Test public void test_5375() { testInvalid("{(any & any), !int}","({any} | (int & any))"); }
		@Test public void test_5376() { testInvalid("{(int & any), !int}","{int}"); }
		@Test public void test_5377() { testInvalid("{(int & any), !int}","{any, any}"); }
		@Test public void test_5378() { testInvalid("{(int & any), !int}","{int, int}"); }
		@Test public void test_5379() { testInvalid("{(int & any), !int}","(any | int)"); }
		@Test public void test_5380() { testInvalid("{(int & any), !int}","(int & any)"); }
		@Test public void test_5381() { testInvalid("{(int & any), !int}","{{any}}"); }
		@Test public void test_5382() { testInvalid("{(int & any), !int}","{{int, any}}"); }
		@Test public void test_5383() { testInvalid("{(int & any), !int}","{{int, int}}"); }
		@Test public void test_5384() { testInvalid("{(int & any), !int}","{(any | int)}"); }
		@Test public void test_5385() { testInvalid("{(int & any), !int}","!{int, any}"); }
		@Test public void test_5386() { testInvalid("{(int & any), !int}","!{int, int}"); }
		@Test public void test_5387() { testValid("{(int & any), !int}","!(any | any)"); }
		@Test public void test_5388() { testValid("{(int & any), !int}","!(any & any)"); }
		@Test public void test_5389() { testInvalid("{(int & any), !int}","!(int & int)"); }
		@Test public void test_5390() { testInvalid("{(int & any), !int}","{{int}, {any}}"); }
		@Test public void test_5391() { testInvalid("{(int & any), !int}","{!int, {any}}"); }
		@Test public void test_5392() { testInvalid("{(int & any), !int}","{{int, int}, {any}}"); }
		@Test public void test_5393() { testInvalid("{(int & any), !int}","{(any | int), {any}}"); }
		@Test public void test_5394() { testInvalid("{(int & any), !int}","{!int, {int}}"); }
		@Test public void test_5395() { testInvalid("{(int & any), !int}","{{any, any}, {int}}"); }
		@Test public void test_5396() { testInvalid("{(int & any), !int}","{(any | any), {int}}"); }
		@Test public void test_5397() { testInvalid("{(int & any), !int}","{(any & any), {int}}"); }
		@Test public void test_5398() { testValid("{(int & any), !int}","{(any & int), {int}}"); }
		@Test public void test_5399() { testInvalid("{(int & any), !int}","{{any, any}, !int}"); }
		@Test public void test_5400() { testInvalid("{(int & any), !int}","{{any, int}, !int}"); }
		@Test public void test_5401() { testInvalid("{(int & any), !int}","{(any | any), !int}"); }
		@Test public void test_5402() { testInvalid("{(int & any), !int}","{(int | any), !int}"); }
		@Test public void test_5403() { testInvalid("{(int & any), !int}","{(any & any), !int}"); }
		@Test public void test_5404() { testValid("{(int & any), !int}","{(int & any), !int}"); }
		@Test public void test_5405() { testValid("{(int & any), !int}","{(int & int), !int}"); }
		@Test public void test_5406() { testInvalid("{(int & any), !int}","{{any}, {any, any}}"); }
		@Test public void test_5407() { testInvalid("{(int & any), !int}","{{int}, {any, any}}"); }
		@Test public void test_5408() { testInvalid("{(int & any), !int}","{{int, int}, {any, any}}"); }
		@Test public void test_5409() { testInvalid("{(int & any), !int}","{(any | any), {any, any}}"); }
		@Test public void test_5410() { testInvalid("{(int & any), !int}","{(any | int), {any, any}}"); }
		@Test public void test_5411() { testInvalid("{(int & any), !int}","{!int, {int, any}}"); }
		@Test public void test_5412() { testInvalid("{(int & any), !int}","{{int, any}, {int, any}}"); }
		@Test public void test_5413() { testInvalid("{(int & any), !int}","{{any, int}, {int, any}}"); }
		@Test public void test_5414() { testValid("{(int & any), !int}","{(any & int), {int, any}}"); }
		@Test public void test_5415() { testInvalid("{(int & any), !int}","{{any}, {any, int}}"); }
		@Test public void test_5416() { testInvalid("{(int & any), !int}","{{int, int}, {any, int}}"); }
		@Test public void test_5417() { testValid("{(int & any), !int}","{(int | int), {any, int}}"); }
		@Test public void test_5418() { testValid("{(int & any), !int}","{(any & int), {any, int}}"); }
		@Test public void test_5419() { testInvalid("{(int & any), !int}","{!int, {int, int}}"); }
		@Test public void test_5420() { testInvalid("{(int & any), !int}","{{int, int}, {int, int}}"); }
		@Test public void test_5421() { testInvalid("{(int & any), !int}","{(any | any), {int, int}}"); }
		@Test public void test_5422() { testInvalid("{(int & any), !int}","{(int | any), {int, int}}"); }
		@Test public void test_5423() { testValid("{(int & any), !int}","{(int & any), {int, int}}"); }
		@Test public void test_5424() { testInvalid("{(int & any), !int}","{{int}, (any | any)}"); }
		@Test public void test_5425() { testInvalid("{(int & any), !int}","{{int, any}, (any | any)}"); }
		@Test public void test_5426() { testInvalid("{(int & any), !int}","{{any, int}, (any | any)}"); }
		@Test public void test_5427() { testInvalid("{(int & any), !int}","{(any | any), (any | any)}"); }
		@Test public void test_5428() { testInvalid("{(int & any), !int}","{(int | any), (any | any)}"); }
		@Test public void test_5429() { testInvalid("{(int & any), !int}","{(int & int), (any | any)}"); }
		@Test public void test_5430() { testInvalid("{(int & any), !int}","{!int, (int | any)}"); }
		@Test public void test_5431() { testInvalid("{(int & any), !int}","{{int, int}, (int | any)}"); }
		@Test public void test_5432() { testInvalid("{(int & any), !int}","{(any | any), (int | any)}"); }
		@Test public void test_5433() { testInvalid("{(int & any), !int}","{(int | int), (int | any)}"); }
		@Test public void test_5434() { testInvalid("{(int & any), !int}","{{any}, (any | int)}"); }
		@Test public void test_5435() { testInvalid("{(int & any), !int}","{!int, (any | int)}"); }
		@Test public void test_5436() { testInvalid("{(int & any), !int}","{(any | any), (any | int)}"); }
		@Test public void test_5437() { testInvalid("{(int & any), !int}","{(any | int), (any | int)}"); }
		@Test public void test_5438() { testInvalid("{(int & any), !int}","{(any & int), (any | int)}"); }
		@Test public void test_5439() { testInvalid("{(int & any), !int}","{{int}, (int | int)}"); }
		@Test public void test_5440() { testInvalid("{(int & any), !int}","{{any, any}, (int | int)}"); }
		@Test public void test_5441() { testInvalid("{(int & any), !int}","{{int, int}, (int | int)}"); }
		@Test public void test_5442() { testInvalid("{(int & any), !int}","{{int}, (any & any)}"); }
		@Test public void test_5443() { testInvalid("{(int & any), !int}","{{int, any}, (any & any)}"); }
		@Test public void test_5444() { testInvalid("{(int & any), !int}","{{any, int}, (any & any)}"); }
		@Test public void test_5445() { testInvalid("{(int & any), !int}","{(int | any), (any & any)}"); }
		@Test public void test_5446() { testInvalid("{(int & any), !int}","{(any & any), (any & any)}"); }
		@Test public void test_5447() { testInvalid("{(int & any), !int}","{(int & any), (any & any)}"); }
		@Test public void test_5448() { testInvalid("{(int & any), !int}","{{any}, (int & any)}"); }
		@Test public void test_5449() { testInvalid("{(int & any), !int}","{{int}, (int & any)}"); }
		@Test public void test_5450() { testInvalid("{(int & any), !int}","{{any, any}, (int & any)}"); }
		@Test public void test_5451() { testInvalid("{(int & any), !int}","{{int, any}, (int & any)}"); }
		@Test public void test_5452() { testInvalid("{(int & any), !int}","{(any | int), (int & any)}"); }
		@Test public void test_5453() { testInvalid("{(int & any), !int}","{(any & any), (int & any)}"); }
		@Test public void test_5454() { testInvalid("{(int & any), !int}","{(int & any), (int & any)}"); }
		@Test public void test_5455() { testInvalid("{(int & any), !int}","{(int & int), (int & any)}"); }
		@Test public void test_5456() { testInvalid("{(int & any), !int}","{{int, any}, (any & int)}"); }
		@Test public void test_5457() { testInvalid("{(int & any), !int}","{(any & any), (any & int)}"); }
		@Test public void test_5458() { testInvalid("{(int & any), !int}","{{any, int}, (int & int)}"); }
		@Test public void test_5459() { testInvalid("{(int & any), !int}","{(int | int), (int & int)}"); }
		@Test public void test_5460() { testInvalid("{(int & any), !int}","{(any & any), (int & int)}"); }
		@Test public void test_5461() { testInvalid("{(int & any), !int}","{(any & int), (int & int)}"); }
		@Test public void test_5462() { testInvalid("{(int & any), !int}","{(int & int), (int & int)}"); }
		@Test public void test_5463() { testInvalid("{(int & any), !int}","(!int | {any})"); }
		@Test public void test_5464() { testInvalid("{(int & any), !int}","({any, any} | {any})"); }
		@Test public void test_5465() { testInvalid("{(int & any), !int}","((any | any) | {any})"); }
		@Test public void test_5466() { testInvalid("{(int & any), !int}","((int | any) | {any})"); }
		@Test public void test_5467() { testInvalid("{(int & any), !int}","((any & any) | {any})"); }
		@Test public void test_5468() { testInvalid("{(int & any), !int}","((int & any) | {any})"); }
		@Test public void test_5469() { testInvalid("{(int & any), !int}","((any & int) | {any})"); }
		@Test public void test_5470() { testInvalid("{(int & any), !int}","({int} | {int})"); }
		@Test public void test_5471() { testInvalid("{(int & any), !int}","(!any | {int})"); }
		@Test public void test_5472() { testInvalid("{(int & any), !int}","(!int | {int})"); }
		@Test public void test_5473() { testInvalid("{(int & any), !int}","({any, int} | {int})"); }
		@Test public void test_5474() { testInvalid("{(int & any), !int}","((int & any) | {int})"); }
		@Test public void test_5475() { testInvalid("{(int & any), !int}","((any & int) | {int})"); }
		@Test public void test_5476() { testInvalid("{(int & any), !int}","((int & int) | {int})"); }
		@Test public void test_5477() { testInvalid("{(int & any), !int}","({any} | !any)"); }
		@Test public void test_5478() { testInvalid("{(int & any), !int}","({int} | !any)"); }
		@Test public void test_5479() { testInvalid("{(int & any), !int}","({any, any} | !any)"); }
		@Test public void test_5480() { testInvalid("{(int & any), !int}","({int, int} | !any)"); }
		@Test public void test_5481() { testInvalid("{(int & any), !int}","((any | any) | !any)"); }
		@Test public void test_5482() { testInvalid("{(int & any), !int}","((int | any) | !any)"); }
		@Test public void test_5483() { testInvalid("{(int & any), !int}","((int | int) | !any)"); }
		@Test public void test_5484() { testInvalid("{(int & any), !int}","((int & int) | !any)"); }
		@Test public void test_5485() { testInvalid("{(int & any), !int}","(!int | !int)"); }
		@Test public void test_5486() { testInvalid("{(int & any), !int}","({any, any} | !int)"); }
		@Test public void test_5487() { testInvalid("{(int & any), !int}","({int, int} | !int)"); }
		@Test public void test_5488() { testInvalid("{(int & any), !int}","((int | any) | !int)"); }
		@Test public void test_5489() { testInvalid("{(int & any), !int}","((any | int) | !int)"); }
		@Test public void test_5490() { testInvalid("{(int & any), !int}","((any & int) | !int)"); }
		@Test public void test_5491() { testInvalid("{(int & any), !int}","((int & int) | !int)"); }
		@Test public void test_5492() { testInvalid("{(int & any), !int}","({int} | {any, any})"); }
		@Test public void test_5493() { testInvalid("{(int & any), !int}","(!any | {any, any})"); }
		@Test public void test_5494() { testInvalid("{(int & any), !int}","(!int | {any, any})"); }
		@Test public void test_5495() { testInvalid("{(int & any), !int}","({any, int} | {any, any})"); }
		@Test public void test_5496() { testInvalid("{(int & any), !int}","((int | any) | {any, any})"); }
		@Test public void test_5497() { testInvalid("{(int & any), !int}","((any & any) | {any, any})"); }
		@Test public void test_5498() { testInvalid("{(int & any), !int}","((any & int) | {any, any})"); }
		@Test public void test_5499() { testInvalid("{(int & any), !int}","(!int | {int, any})"); }
		@Test public void test_5500() { testInvalid("{(int & any), !int}","({any, int} | {int, any})"); }
		@Test public void test_5501() { testInvalid("{(int & any), !int}","((any | any) | {int, any})"); }
		@Test public void test_5502() { testInvalid("{(int & any), !int}","((int | any) | {int, any})"); }
		@Test public void test_5503() { testInvalid("{(int & any), !int}","((any | int) | {int, any})"); }
		@Test public void test_5504() { testInvalid("{(int & any), !int}","((int & any) | {int, any})"); }
		@Test public void test_5505() { testInvalid("{(int & any), !int}","({any} | {any, int})"); }
		@Test public void test_5506() { testInvalid("{(int & any), !int}","(!int | {any, int})"); }
		@Test public void test_5507() { testInvalid("{(int & any), !int}","({any, int} | {any, int})"); }
		@Test public void test_5508() { testInvalid("{(int & any), !int}","((any | any) | {any, int})"); }
		@Test public void test_5509() { testInvalid("{(int & any), !int}","((any | int) | {any, int})"); }
		@Test public void test_5510() { testInvalid("{(int & any), !int}","((int | int) | {any, int})"); }
		@Test public void test_5511() { testInvalid("{(int & any), !int}","((int & any) | {any, int})"); }
		@Test public void test_5512() { testInvalid("{(int & any), !int}","(!any | {int, int})"); }
		@Test public void test_5513() { testInvalid("{(int & any), !int}","(!int | {int, int})"); }
		@Test public void test_5514() { testInvalid("{(int & any), !int}","({any, any} | {int, int})"); }
		@Test public void test_5515() { testInvalid("{(int & any), !int}","({any, int} | {int, int})"); }
		@Test public void test_5516() { testInvalid("{(int & any), !int}","((any | any) | {int, int})"); }
		@Test public void test_5517() { testInvalid("{(int & any), !int}","((int | int) | {int, int})"); }
		@Test public void test_5518() { testInvalid("{(int & any), !int}","((int & any) | {int, int})"); }
		@Test public void test_5519() { testInvalid("{(int & any), !int}","((any & int) | {int, int})"); }
		@Test public void test_5520() { testInvalid("{(int & any), !int}","((int & int) | {int, int})"); }
		@Test public void test_5521() { testInvalid("{(int & any), !int}","({any} | (any | any))"); }
		@Test public void test_5522() { testInvalid("{(int & any), !int}","(!any | (any | any))"); }
		@Test public void test_5523() { testInvalid("{(int & any), !int}","({any, any} | (any | any))"); }
		@Test public void test_5524() { testInvalid("{(int & any), !int}","({any, int} | (any | any))"); }
		@Test public void test_5525() { testInvalid("{(int & any), !int}","({int, int} | (any | any))"); }
		@Test public void test_5526() { testInvalid("{(int & any), !int}","((int | any) | (any | any))"); }
		@Test public void test_5527() { testInvalid("{(int & any), !int}","((any | int) | (any | any))"); }
		@Test public void test_5528() { testInvalid("{(int & any), !int}","((any & int) | (any | any))"); }
		@Test public void test_5529() { testInvalid("{(int & any), !int}","((int & int) | (any | any))"); }
		@Test public void test_5530() { testInvalid("{(int & any), !int}","({any} | (int | any))"); }
		@Test public void test_5531() { testInvalid("{(int & any), !int}","(!int | (int | any))"); }
		@Test public void test_5532() { testInvalid("{(int & any), !int}","({int, any} | (int | any))"); }
		@Test public void test_5533() { testInvalid("{(int & any), !int}","({any, int} | (int | any))"); }
		@Test public void test_5534() { testInvalid("{(int & any), !int}","((int & any) | (int | any))"); }
		@Test public void test_5535() { testInvalid("{(int & any), !int}","((any & int) | (int | any))"); }
		@Test public void test_5536() { testInvalid("{(int & any), !int}","({any} | (any | int))"); }
		@Test public void test_5537() { testInvalid("{(int & any), !int}","({int} | (any | int))"); }
		@Test public void test_5538() { testInvalid("{(int & any), !int}","(!any | (any | int))"); }
		@Test public void test_5539() { testInvalid("{(int & any), !int}","(!int | (any | int))"); }
		@Test public void test_5540() { testInvalid("{(int & any), !int}","({any, int} | (any | int))"); }
		@Test public void test_5541() { testInvalid("{(int & any), !int}","({int, int} | (any | int))"); }
		@Test public void test_5542() { testInvalid("{(int & any), !int}","((int | any) | (any | int))"); }
		@Test public void test_5543() { testInvalid("{(int & any), !int}","((any | int) | (any | int))"); }
		@Test public void test_5544() { testInvalid("{(int & any), !int}","((int | int) | (any | int))"); }
		@Test public void test_5545() { testInvalid("{(int & any), !int}","((any & any) | (any | int))"); }
		@Test public void test_5546() { testInvalid("{(int & any), !int}","({int} | (int | int))"); }
		@Test public void test_5547() { testInvalid("{(int & any), !int}","(!any | (int | int))"); }
		@Test public void test_5548() { testInvalid("{(int & any), !int}","(!int | (int | int))"); }
		@Test public void test_5549() { testInvalid("{(int & any), !int}","({int, any} | (int | int))"); }
		@Test public void test_5550() { testInvalid("{(int & any), !int}","({any, int} | (int | int))"); }
		@Test public void test_5551() { testInvalid("{(int & any), !int}","((any | int) | (int | int))"); }
		@Test public void test_5552() { testInvalid("{(int & any), !int}","((int | int) | (int | int))"); }
		@Test public void test_5553() { testInvalid("{(int & any), !int}","((any & any) | (int | int))"); }
		@Test public void test_5554() { testInvalid("{(int & any), !int}","((int & any) | (int | int))"); }
		@Test public void test_5555() { testInvalid("{(int & any), !int}","((int & int) | (int | int))"); }
		@Test public void test_5556() { testInvalid("{(int & any), !int}","(!any | (any & any))"); }
		@Test public void test_5557() { testInvalid("{(int & any), !int}","(!int | (any & any))"); }
		@Test public void test_5558() { testInvalid("{(int & any), !int}","({any, any} | (any & any))"); }
		@Test public void test_5559() { testInvalid("{(int & any), !int}","({int, any} | (any & any))"); }
		@Test public void test_5560() { testInvalid("{(int & any), !int}","({any, int} | (any & any))"); }
		@Test public void test_5561() { testInvalid("{(int & any), !int}","({int, int} | (any & any))"); }
		@Test public void test_5562() { testInvalid("{(int & any), !int}","((int | any) | (any & any))"); }
		@Test public void test_5563() { testInvalid("{(int & any), !int}","((int | int) | (any & any))"); }
		@Test public void test_5564() { testInvalid("{(int & any), !int}","((int & any) | (any & any))"); }
		@Test public void test_5565() { testInvalid("{(int & any), !int}","((any & int) | (any & any))"); }
		@Test public void test_5566() { testInvalid("{(int & any), !int}","((int & int) | (any & any))"); }
		@Test public void test_5567() { testInvalid("{(int & any), !int}","({any} | (int & any))"); }
		@Test public void test_5568() { testInvalid("{(int & int), !int}","{int}"); }
		@Test public void test_5569() { testInvalid("{(int & int), !int}","{any, any}"); }
		@Test public void test_5570() { testInvalid("{(int & int), !int}","{int, int}"); }
		@Test public void test_5571() { testInvalid("{(int & int), !int}","(any | int)"); }
		@Test public void test_5572() { testInvalid("{(int & int), !int}","(int & any)"); }
		@Test public void test_5573() { testInvalid("{(int & int), !int}","{{any}}"); }
		@Test public void test_5574() { testInvalid("{(int & int), !int}","{{int, any}}"); }
		@Test public void test_5575() { testInvalid("{(int & int), !int}","{{int, int}}"); }
		@Test public void test_5576() { testInvalid("{(int & int), !int}","{(any | int)}"); }
		@Test public void test_5577() { testInvalid("{(int & int), !int}","!{int, any}"); }
		@Test public void test_5578() { testInvalid("{(int & int), !int}","!{int, int}"); }
		@Test public void test_5579() { testValid("{(int & int), !int}","!(any | any)"); }
		@Test public void test_5580() { testValid("{(int & int), !int}","!(any & any)"); }
		@Test public void test_5581() { testInvalid("{(int & int), !int}","!(int & int)"); }
		@Test public void test_5582() { testInvalid("{(int & int), !int}","{{int}, {any}}"); }
		@Test public void test_5583() { testInvalid("{(int & int), !int}","{!int, {any}}"); }
		@Test public void test_5584() { testInvalid("{(int & int), !int}","{{int, int}, {any}}"); }
		@Test public void test_5585() { testInvalid("{(int & int), !int}","{(any | int), {any}}"); }
		@Test public void test_5586() { testInvalid("{(int & int), !int}","{!int, {int}}"); }
		@Test public void test_5587() { testInvalid("{(int & int), !int}","{{any, any}, {int}}"); }
		@Test public void test_5588() { testInvalid("{(int & int), !int}","{(any | any), {int}}"); }
		@Test public void test_5589() { testInvalid("{(int & int), !int}","{(any & any), {int}}"); }
		@Test public void test_5590() { testValid("{(int & int), !int}","{(any & int), {int}}"); }
		@Test public void test_5591() { testInvalid("{(int & int), !int}","{{any, any}, !int}"); }
		@Test public void test_5592() { testInvalid("{(int & int), !int}","{{any, int}, !int}"); }
		@Test public void test_5593() { testInvalid("{(int & int), !int}","{(any | any), !int}"); }
		@Test public void test_5594() { testInvalid("{(int & int), !int}","{(int | any), !int}"); }
		@Test public void test_5595() { testInvalid("{(int & int), !int}","{(any & any), !int}"); }
		@Test public void test_5596() { testValid("{(int & int), !int}","{(int & any), !int}"); }
		@Test public void test_5597() { testValid("{(int & int), !int}","{(int & int), !int}"); }
		@Test public void test_5598() { testInvalid("{(int & int), !int}","{{any}, {any, any}}"); }
		@Test public void test_5599() { testInvalid("{(int & int), !int}","{{int}, {any, any}}"); }
		@Test public void test_5600() { testInvalid("{(int & int), !int}","{{int, int}, {any, any}}"); }
		@Test public void test_5601() { testInvalid("{(int & int), !int}","{(any | any), {any, any}}"); }
		@Test public void test_5602() { testInvalid("{(int & int), !int}","{(any | int), {any, any}}"); }
		@Test public void test_5603() { testInvalid("{(int & int), !int}","{!int, {int, any}}"); }
		@Test public void test_5604() { testInvalid("{(int & int), !int}","{{int, any}, {int, any}}"); }
		@Test public void test_5605() { testInvalid("{(int & int), !int}","{{any, int}, {int, any}}"); }
		@Test public void test_5606() { testValid("{(int & int), !int}","{(any & int), {int, any}}"); }
		@Test public void test_5607() { testInvalid("{(int & int), !int}","{{any}, {any, int}}"); }
		@Test public void test_5608() { testInvalid("{(int & int), !int}","{{int, int}, {any, int}}"); }
		@Test public void test_5609() { testValid("{(int & int), !int}","{(int | int), {any, int}}"); }
		@Test public void test_5610() { testValid("{(int & int), !int}","{(any & int), {any, int}}"); }
		@Test public void test_5611() { testInvalid("{(int & int), !int}","{!int, {int, int}}"); }
		@Test public void test_5612() { testInvalid("{(int & int), !int}","{{int, int}, {int, int}}"); }
		@Test public void test_5613() { testInvalid("{(int & int), !int}","{(any | any), {int, int}}"); }
		@Test public void test_5614() { testInvalid("{(int & int), !int}","{(int | any), {int, int}}"); }
		@Test public void test_5615() { testValid("{(int & int), !int}","{(int & any), {int, int}}"); }
		@Test public void test_5616() { testInvalid("{(int & int), !int}","{{int}, (any | any)}"); }
		@Test public void test_5617() { testInvalid("{(int & int), !int}","{{int, any}, (any | any)}"); }
		@Test public void test_5618() { testInvalid("{(int & int), !int}","{{any, int}, (any | any)}"); }
		@Test public void test_5619() { testInvalid("{(int & int), !int}","{(any | any), (any | any)}"); }
		@Test public void test_5620() { testInvalid("{(int & int), !int}","{(int | any), (any | any)}"); }
		@Test public void test_5621() { testInvalid("{(int & int), !int}","{(int & int), (any | any)}"); }
		@Test public void test_5622() { testInvalid("{(int & int), !int}","{!int, (int | any)}"); }
		@Test public void test_5623() { testInvalid("{(int & int), !int}","{{int, int}, (int | any)}"); }
		@Test public void test_5624() { testInvalid("{(int & int), !int}","{(any | any), (int | any)}"); }
		@Test public void test_5625() { testInvalid("{(int & int), !int}","{(int | int), (int | any)}"); }
		@Test public void test_5626() { testInvalid("{(int & int), !int}","{{any}, (any | int)}"); }
		@Test public void test_5627() { testInvalid("{(int & int), !int}","{!int, (any | int)}"); }
		@Test public void test_5628() { testInvalid("{(int & int), !int}","{(any | any), (any | int)}"); }
		@Test public void test_5629() { testInvalid("{(int & int), !int}","{(any | int), (any | int)}"); }
		@Test public void test_5630() { testInvalid("{(int & int), !int}","{(any & int), (any | int)}"); }
		@Test public void test_5631() { testInvalid("{(int & int), !int}","{{int}, (int | int)}"); }
		@Test public void test_5632() { testInvalid("{(int & int), !int}","{{any, any}, (int | int)}"); }
		@Test public void test_5633() { testInvalid("{(int & int), !int}","{{int, int}, (int | int)}"); }
		@Test public void test_5634() { testInvalid("{(int & int), !int}","{{int}, (any & any)}"); }
		@Test public void test_5635() { testInvalid("{(int & int), !int}","{{int, any}, (any & any)}"); }
		@Test public void test_5636() { testInvalid("{(int & int), !int}","{{any, int}, (any & any)}"); }
		@Test public void test_5637() { testInvalid("{(int & int), !int}","{(int | any), (any & any)}"); }
		@Test public void test_5638() { testInvalid("{(int & int), !int}","{(any & any), (any & any)}"); }
		@Test public void test_5639() { testInvalid("{(int & int), !int}","{(int & any), (any & any)}"); }
		@Test public void test_5640() { testInvalid("{(int & int), !int}","{{any}, (int & any)}"); }
		@Test public void test_5641() { testInvalid("{(int & int), !int}","{{int}, (int & any)}"); }
		@Test public void test_5642() { testInvalid("{(int & int), !int}","{{any, any}, (int & any)}"); }
		@Test public void test_5643() { testInvalid("{(int & int), !int}","{{int, any}, (int & any)}"); }
		@Test public void test_5644() { testInvalid("{(int & int), !int}","{(any | int), (int & any)}"); }
		@Test public void test_5645() { testInvalid("{(int & int), !int}","{(any & any), (int & any)}"); }
		@Test public void test_5646() { testInvalid("{(int & int), !int}","{(int & any), (int & any)}"); }
		@Test public void test_5647() { testInvalid("{(int & int), !int}","{(int & int), (int & any)}"); }
		@Test public void test_5648() { testInvalid("{(int & int), !int}","{{int, any}, (any & int)}"); }
		@Test public void test_5649() { testInvalid("{(int & int), !int}","{(any & any), (any & int)}"); }
		@Test public void test_5650() { testInvalid("{(int & int), !int}","{{any, int}, (int & int)}"); }
		@Test public void test_5651() { testInvalid("{(int & int), !int}","{(int | int), (int & int)}"); }
		@Test public void test_5652() { testInvalid("{(int & int), !int}","{(any & any), (int & int)}"); }
		@Test public void test_5653() { testInvalid("{(int & int), !int}","{(any & int), (int & int)}"); }
		@Test public void test_5654() { testInvalid("{(int & int), !int}","{(int & int), (int & int)}"); }
		@Test public void test_5655() { testInvalid("{(int & int), !int}","(!int | {any})"); }
		@Test public void test_5656() { testInvalid("{(int & int), !int}","({any, any} | {any})"); }
		@Test public void test_5657() { testInvalid("{(int & int), !int}","((any | any) | {any})"); }
		@Test public void test_5658() { testInvalid("{(int & int), !int}","((int | any) | {any})"); }
		@Test public void test_5659() { testInvalid("{(int & int), !int}","((any & any) | {any})"); }
		@Test public void test_5660() { testInvalid("{(int & int), !int}","((int & any) | {any})"); }
		@Test public void test_5661() { testInvalid("{(int & int), !int}","((any & int) | {any})"); }
		@Test public void test_5662() { testInvalid("{(int & int), !int}","({int} | {int})"); }
		@Test public void test_5663() { testInvalid("{(int & int), !int}","(!any | {int})"); }
		@Test public void test_5664() { testInvalid("{(int & int), !int}","(!int | {int})"); }
		@Test public void test_5665() { testInvalid("{(int & int), !int}","({any, int} | {int})"); }
		@Test public void test_5666() { testInvalid("{(int & int), !int}","((int & any) | {int})"); }
		@Test public void test_5667() { testInvalid("{(int & int), !int}","((any & int) | {int})"); }
		@Test public void test_5668() { testInvalid("{(int & int), !int}","((int & int) | {int})"); }
		@Test public void test_5669() { testInvalid("{(int & int), !int}","({any} | !any)"); }
		@Test public void test_5670() { testInvalid("{(int & int), !int}","({int} | !any)"); }
		@Test public void test_5671() { testInvalid("{(int & int), !int}","({any, any} | !any)"); }
		@Test public void test_5672() { testInvalid("{(int & int), !int}","({int, int} | !any)"); }
		@Test public void test_5673() { testInvalid("{(int & int), !int}","((any | any) | !any)"); }
		@Test public void test_5674() { testInvalid("{(int & int), !int}","((int | any) | !any)"); }
		@Test public void test_5675() { testInvalid("{(int & int), !int}","((int | int) | !any)"); }
		@Test public void test_5676() { testInvalid("{(int & int), !int}","((int & int) | !any)"); }
		@Test public void test_5677() { testInvalid("{(int & int), !int}","(!int | !int)"); }
		@Test public void test_5678() { testInvalid("{(int & int), !int}","({any, any} | !int)"); }
		@Test public void test_5679() { testInvalid("{(int & int), !int}","({int, int} | !int)"); }
		@Test public void test_5680() { testInvalid("{(int & int), !int}","((int | any) | !int)"); }
		@Test public void test_5681() { testInvalid("{(int & int), !int}","((any | int) | !int)"); }
		@Test public void test_5682() { testInvalid("{(int & int), !int}","((any & int) | !int)"); }
		@Test public void test_5683() { testInvalid("{(int & int), !int}","((int & int) | !int)"); }
		@Test public void test_5684() { testInvalid("{(int & int), !int}","({int} | {any, any})"); }
		@Test public void test_5685() { testInvalid("{(int & int), !int}","(!any | {any, any})"); }
		@Test public void test_5686() { testInvalid("{(int & int), !int}","(!int | {any, any})"); }
		@Test public void test_5687() { testInvalid("{(int & int), !int}","({any, int} | {any, any})"); }
		@Test public void test_5688() { testInvalid("{(int & int), !int}","((int | any) | {any, any})"); }
		@Test public void test_5689() { testInvalid("{(int & int), !int}","((any & any) | {any, any})"); }
		@Test public void test_5690() { testInvalid("{(int & int), !int}","((any & int) | {any, any})"); }
		@Test public void test_5691() { testInvalid("{(int & int), !int}","(!int | {int, any})"); }
		@Test public void test_5692() { testInvalid("{(int & int), !int}","({any, int} | {int, any})"); }
		@Test public void test_5693() { testInvalid("{(int & int), !int}","((any | any) | {int, any})"); }
		@Test public void test_5694() { testInvalid("{(int & int), !int}","((int | any) | {int, any})"); }
		@Test public void test_5695() { testInvalid("{(int & int), !int}","((any | int) | {int, any})"); }
		@Test public void test_5696() { testInvalid("{(int & int), !int}","((int & any) | {int, any})"); }
		@Test public void test_5697() { testInvalid("{(int & int), !int}","({any} | {any, int})"); }
		@Test public void test_5698() { testInvalid("{(int & int), !int}","(!int | {any, int})"); }
		@Test public void test_5699() { testInvalid("{(int & int), !int}","({any, int} | {any, int})"); }
		@Test public void test_5700() { testInvalid("{(int & int), !int}","((any | any) | {any, int})"); }
		@Test public void test_5701() { testInvalid("{(int & int), !int}","((any | int) | {any, int})"); }
		@Test public void test_5702() { testInvalid("{(int & int), !int}","((int | int) | {any, int})"); }
		@Test public void test_5703() { testInvalid("{(int & int), !int}","((int & any) | {any, int})"); }
		@Test public void test_5704() { testInvalid("{(int & int), !int}","(!any | {int, int})"); }
		@Test public void test_5705() { testInvalid("{(int & int), !int}","(!int | {int, int})"); }
		@Test public void test_5706() { testInvalid("{(int & int), !int}","({any, any} | {int, int})"); }
		@Test public void test_5707() { testInvalid("{(int & int), !int}","({any, int} | {int, int})"); }
		@Test public void test_5708() { testInvalid("{(int & int), !int}","((any | any) | {int, int})"); }
		@Test public void test_5709() { testInvalid("{(int & int), !int}","((int | int) | {int, int})"); }
		@Test public void test_5710() { testInvalid("{(int & int), !int}","((int & any) | {int, int})"); }
		@Test public void test_5711() { testInvalid("{(int & int), !int}","((any & int) | {int, int})"); }
		@Test public void test_5712() { testInvalid("{(int & int), !int}","((int & int) | {int, int})"); }
		@Test public void test_5713() { testInvalid("{(int & int), !int}","({any} | (any | any))"); }
		@Test public void test_5714() { testInvalid("{(int & int), !int}","(!any | (any | any))"); }
		@Test public void test_5715() { testInvalid("{(int & int), !int}","({any, any} | (any | any))"); }
		@Test public void test_5716() { testInvalid("{(int & int), !int}","({any, int} | (any | any))"); }
		@Test public void test_5717() { testInvalid("{(int & int), !int}","({int, int} | (any | any))"); }
		@Test public void test_5718() { testInvalid("{(int & int), !int}","((int | any) | (any | any))"); }
		@Test public void test_5719() { testInvalid("{(int & int), !int}","((any | int) | (any | any))"); }
		@Test public void test_5720() { testInvalid("{(int & int), !int}","((any & int) | (any | any))"); }
		@Test public void test_5721() { testInvalid("{(int & int), !int}","((int & int) | (any | any))"); }
		@Test public void test_5722() { testInvalid("{(int & int), !int}","({any} | (int | any))"); }
		@Test public void test_5723() { testInvalid("{(int & int), !int}","(!int | (int | any))"); }
		@Test public void test_5724() { testInvalid("{(int & int), !int}","({int, any} | (int | any))"); }
		@Test public void test_5725() { testInvalid("{(int & int), !int}","({any, int} | (int | any))"); }
		@Test public void test_5726() { testInvalid("{(int & int), !int}","((int & any) | (int | any))"); }
		@Test public void test_5727() { testInvalid("{(int & int), !int}","((any & int) | (int | any))"); }
		@Test public void test_5728() { testInvalid("{(int & int), !int}","({any} | (any | int))"); }
		@Test public void test_5729() { testInvalid("{(int & int), !int}","({int} | (any | int))"); }
		@Test public void test_5730() { testInvalid("{(int & int), !int}","(!any | (any | int))"); }
		@Test public void test_5731() { testInvalid("{(int & int), !int}","(!int | (any | int))"); }
		@Test public void test_5732() { testInvalid("{(int & int), !int}","({any, int} | (any | int))"); }
		@Test public void test_5733() { testInvalid("{(int & int), !int}","({int, int} | (any | int))"); }
		@Test public void test_5734() { testInvalid("{(int & int), !int}","((int | any) | (any | int))"); }
		@Test public void test_5735() { testInvalid("{(int & int), !int}","((any | int) | (any | int))"); }
		@Test public void test_5736() { testInvalid("{(int & int), !int}","((int | int) | (any | int))"); }
		@Test public void test_5737() { testInvalid("{(int & int), !int}","((any & any) | (any | int))"); }
		@Test public void test_5738() { testInvalid("{(int & int), !int}","({int} | (int | int))"); }
		@Test public void test_5739() { testInvalid("{(int & int), !int}","(!any | (int | int))"); }
		@Test public void test_5740() { testInvalid("{(int & int), !int}","(!int | (int | int))"); }
		@Test public void test_5741() { testInvalid("{(int & int), !int}","({int, any} | (int | int))"); }
		@Test public void test_5742() { testInvalid("{(int & int), !int}","({any, int} | (int | int))"); }
		@Test public void test_5743() { testInvalid("{(int & int), !int}","((any | int) | (int | int))"); }
		@Test public void test_5744() { testInvalid("{(int & int), !int}","((int | int) | (int | int))"); }
		@Test public void test_5745() { testInvalid("{(int & int), !int}","((any & any) | (int | int))"); }
		@Test public void test_5746() { testInvalid("{(int & int), !int}","((int & any) | (int | int))"); }
		@Test public void test_5747() { testInvalid("{(int & int), !int}","((int & int) | (int | int))"); }
		@Test public void test_5748() { testInvalid("{(int & int), !int}","(!any | (any & any))"); }
		@Test public void test_5749() { testInvalid("{(int & int), !int}","(!int | (any & any))"); }
		@Test public void test_5750() { testInvalid("{(int & int), !int}","({any, any} | (any & any))"); }
		@Test public void test_5751() { testInvalid("{(int & int), !int}","({int, any} | (any & any))"); }
		@Test public void test_5752() { testInvalid("{(int & int), !int}","({any, int} | (any & any))"); }
		@Test public void test_5753() { testInvalid("{(int & int), !int}","({int, int} | (any & any))"); }
		@Test public void test_5754() { testInvalid("{(int & int), !int}","((int | any) | (any & any))"); }
		@Test public void test_5755() { testInvalid("{(int & int), !int}","((int | int) | (any & any))"); }
		@Test public void test_5756() { testInvalid("{(int & int), !int}","((int & any) | (any & any))"); }
		@Test public void test_5757() { testInvalid("{(int & int), !int}","((any & int) | (any & any))"); }
		@Test public void test_5758() { testInvalid("{(int & int), !int}","((int & int) | (any & any))"); }
		@Test public void test_5759() { testInvalid("{(int & int), !int}","({any} | (int & any))"); }
		@Test public void test_5760() { testInvalid("{{any}, {any, any}}","{int}"); }
		@Test public void test_5761() { testInvalid("{{any}, {any, any}}","{any, any}"); }
		@Test public void test_5762() { testInvalid("{{any}, {any, any}}","{int, int}"); }
		@Test public void test_5763() { testInvalid("{{any}, {any, any}}","(any | int)"); }
		@Test public void test_5764() { testInvalid("{{any}, {any, any}}","(int & any)"); }
		@Test public void test_5765() { testInvalid("{{any}, {any, any}}","{{any}}"); }
		@Test public void test_5766() { testInvalid("{{any}, {any, any}}","{{int, any}}"); }
		@Test public void test_5767() { testInvalid("{{any}, {any, any}}","{{int, int}}"); }
		@Test public void test_5768() { testInvalid("{{any}, {any, any}}","{(any | int)}"); }
		@Test public void test_5769() { testInvalid("{{any}, {any, any}}","!{int, any}"); }
		@Test public void test_5770() { testInvalid("{{any}, {any, any}}","!{int, int}"); }
		@Test public void test_5771() { testValid("{{any}, {any, any}}","!(any | any)"); }
		@Test public void test_5772() { testValid("{{any}, {any, any}}","!(any & any)"); }
		@Test public void test_5773() { testInvalid("{{any}, {any, any}}","!(int & int)"); }
		@Test public void test_5774() { testInvalid("{{any}, {any, any}}","{{int}, {any}}"); }
		@Test public void test_5775() { testInvalid("{{any}, {any, any}}","{!int, {any}}"); }
		@Test public void test_5776() { testInvalid("{{any}, {any, any}}","{{int, int}, {any}}"); }
		@Test public void test_5777() { testInvalid("{{any}, {any, any}}","{(any | int), {any}}"); }
		@Test public void test_5778() { testInvalid("{{any}, {any, any}}","{!int, {int}}"); }
		@Test public void test_5779() { testInvalid("{{any}, {any, any}}","{{any, any}, {int}}"); }
		@Test public void test_5780() { testInvalid("{{any}, {any, any}}","{(any | any), {int}}"); }
		@Test public void test_5781() { testInvalid("{{any}, {any, any}}","{(any & any), {int}}"); }
		@Test public void test_5782() { testInvalid("{{any}, {any, any}}","{(any & int), {int}}"); }
		@Test public void test_5783() { testInvalid("{{any}, {any, any}}","{{any, any}, !int}"); }
		@Test public void test_5784() { testInvalid("{{any}, {any, any}}","{{any, int}, !int}"); }
		@Test public void test_5785() { testInvalid("{{any}, {any, any}}","{(any | any), !int}"); }
		@Test public void test_5786() { testInvalid("{{any}, {any, any}}","{(int | any), !int}"); }
		@Test public void test_5787() { testInvalid("{{any}, {any, any}}","{(any & any), !int}"); }
		@Test public void test_5788() { testInvalid("{{any}, {any, any}}","{(int & any), !int}"); }
		@Test public void test_5789() { testInvalid("{{any}, {any, any}}","{(int & int), !int}"); }
		@Test public void test_5790() { testValid("{{any}, {any, any}}","{{any}, {any, any}}"); }
		@Test public void test_5791() { testValid("{{any}, {any, any}}","{{int}, {any, any}}"); }
		@Test public void test_5792() { testInvalid("{{any}, {any, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_5793() { testInvalid("{{any}, {any, any}}","{(any | any), {any, any}}"); }
		@Test public void test_5794() { testInvalid("{{any}, {any, any}}","{(any | int), {any, any}}"); }
		@Test public void test_5795() { testInvalid("{{any}, {any, any}}","{!int, {int, any}}"); }
		@Test public void test_5796() { testInvalid("{{any}, {any, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_5797() { testInvalid("{{any}, {any, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_5798() { testInvalid("{{any}, {any, any}}","{(any & int), {int, any}}"); }
		@Test public void test_5799() { testValid("{{any}, {any, any}}","{{any}, {any, int}}"); }
		@Test public void test_5800() { testInvalid("{{any}, {any, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_5801() { testInvalid("{{any}, {any, any}}","{(int | int), {any, int}}"); }
		@Test public void test_5802() { testInvalid("{{any}, {any, any}}","{(any & int), {any, int}}"); }
		@Test public void test_5803() { testInvalid("{{any}, {any, any}}","{!int, {int, int}}"); }
		@Test public void test_5804() { testInvalid("{{any}, {any, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_5805() { testInvalid("{{any}, {any, any}}","{(any | any), {int, int}}"); }
		@Test public void test_5806() { testInvalid("{{any}, {any, any}}","{(int | any), {int, int}}"); }
		@Test public void test_5807() { testInvalid("{{any}, {any, any}}","{(int & any), {int, int}}"); }
		@Test public void test_5808() { testInvalid("{{any}, {any, any}}","{{int}, (any | any)}"); }
		@Test public void test_5809() { testInvalid("{{any}, {any, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_5810() { testInvalid("{{any}, {any, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_5811() { testInvalid("{{any}, {any, any}}","{(any | any), (any | any)}"); }
		@Test public void test_5812() { testInvalid("{{any}, {any, any}}","{(int | any), (any | any)}"); }
		@Test public void test_5813() { testInvalid("{{any}, {any, any}}","{(int & int), (any | any)}"); }
		@Test public void test_5814() { testInvalid("{{any}, {any, any}}","{!int, (int | any)}"); }
		@Test public void test_5815() { testInvalid("{{any}, {any, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_5816() { testInvalid("{{any}, {any, any}}","{(any | any), (int | any)}"); }
		@Test public void test_5817() { testInvalid("{{any}, {any, any}}","{(int | int), (int | any)}"); }
		@Test public void test_5818() { testInvalid("{{any}, {any, any}}","{{any}, (any | int)}"); }
		@Test public void test_5819() { testInvalid("{{any}, {any, any}}","{!int, (any | int)}"); }
		@Test public void test_5820() { testInvalid("{{any}, {any, any}}","{(any | any), (any | int)}"); }
		@Test public void test_5821() { testInvalid("{{any}, {any, any}}","{(any | int), (any | int)}"); }
		@Test public void test_5822() { testInvalid("{{any}, {any, any}}","{(any & int), (any | int)}"); }
		@Test public void test_5823() { testInvalid("{{any}, {any, any}}","{{int}, (int | int)}"); }
		@Test public void test_5824() { testInvalid("{{any}, {any, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_5825() { testInvalid("{{any}, {any, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_5826() { testInvalid("{{any}, {any, any}}","{{int}, (any & any)}"); }
		@Test public void test_5827() { testInvalid("{{any}, {any, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_5828() { testInvalid("{{any}, {any, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_5829() { testInvalid("{{any}, {any, any}}","{(int | any), (any & any)}"); }
		@Test public void test_5830() { testInvalid("{{any}, {any, any}}","{(any & any), (any & any)}"); }
		@Test public void test_5831() { testInvalid("{{any}, {any, any}}","{(int & any), (any & any)}"); }
		@Test public void test_5832() { testInvalid("{{any}, {any, any}}","{{any}, (int & any)}"); }
		@Test public void test_5833() { testInvalid("{{any}, {any, any}}","{{int}, (int & any)}"); }
		@Test public void test_5834() { testInvalid("{{any}, {any, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_5835() { testInvalid("{{any}, {any, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_5836() { testInvalid("{{any}, {any, any}}","{(any | int), (int & any)}"); }
		@Test public void test_5837() { testInvalid("{{any}, {any, any}}","{(any & any), (int & any)}"); }
		@Test public void test_5838() { testInvalid("{{any}, {any, any}}","{(int & any), (int & any)}"); }
		@Test public void test_5839() { testInvalid("{{any}, {any, any}}","{(int & int), (int & any)}"); }
		@Test public void test_5840() { testInvalid("{{any}, {any, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_5841() { testInvalid("{{any}, {any, any}}","{(any & any), (any & int)}"); }
		@Test public void test_5842() { testInvalid("{{any}, {any, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_5843() { testInvalid("{{any}, {any, any}}","{(int | int), (int & int)}"); }
		@Test public void test_5844() { testInvalid("{{any}, {any, any}}","{(any & any), (int & int)}"); }
		@Test public void test_5845() { testInvalid("{{any}, {any, any}}","{(any & int), (int & int)}"); }
		@Test public void test_5846() { testInvalid("{{any}, {any, any}}","{(int & int), (int & int)}"); }
		@Test public void test_5847() { testInvalid("{{any}, {any, any}}","(!int | {any})"); }
		@Test public void test_5848() { testInvalid("{{any}, {any, any}}","({any, any} | {any})"); }
		@Test public void test_5849() { testInvalid("{{any}, {any, any}}","((any | any) | {any})"); }
		@Test public void test_5850() { testInvalid("{{any}, {any, any}}","((int | any) | {any})"); }
		@Test public void test_5851() { testInvalid("{{any}, {any, any}}","((any & any) | {any})"); }
		@Test public void test_5852() { testInvalid("{{any}, {any, any}}","((int & any) | {any})"); }
		@Test public void test_5853() { testInvalid("{{any}, {any, any}}","((any & int) | {any})"); }
		@Test public void test_5854() { testInvalid("{{any}, {any, any}}","({int} | {int})"); }
		@Test public void test_5855() { testInvalid("{{any}, {any, any}}","(!any | {int})"); }
		@Test public void test_5856() { testInvalid("{{any}, {any, any}}","(!int | {int})"); }
		@Test public void test_5857() { testInvalid("{{any}, {any, any}}","({any, int} | {int})"); }
		@Test public void test_5858() { testInvalid("{{any}, {any, any}}","((int & any) | {int})"); }
		@Test public void test_5859() { testInvalid("{{any}, {any, any}}","((any & int) | {int})"); }
		@Test public void test_5860() { testInvalid("{{any}, {any, any}}","((int & int) | {int})"); }
		@Test public void test_5861() { testInvalid("{{any}, {any, any}}","({any} | !any)"); }
		@Test public void test_5862() { testInvalid("{{any}, {any, any}}","({int} | !any)"); }
		@Test public void test_5863() { testInvalid("{{any}, {any, any}}","({any, any} | !any)"); }
		@Test public void test_5864() { testInvalid("{{any}, {any, any}}","({int, int} | !any)"); }
		@Test public void test_5865() { testInvalid("{{any}, {any, any}}","((any | any) | !any)"); }
		@Test public void test_5866() { testInvalid("{{any}, {any, any}}","((int | any) | !any)"); }
		@Test public void test_5867() { testInvalid("{{any}, {any, any}}","((int | int) | !any)"); }
		@Test public void test_5868() { testInvalid("{{any}, {any, any}}","((int & int) | !any)"); }
		@Test public void test_5869() { testInvalid("{{any}, {any, any}}","(!int | !int)"); }
		@Test public void test_5870() { testInvalid("{{any}, {any, any}}","({any, any} | !int)"); }
		@Test public void test_5871() { testInvalid("{{any}, {any, any}}","({int, int} | !int)"); }
		@Test public void test_5872() { testInvalid("{{any}, {any, any}}","((int | any) | !int)"); }
		@Test public void test_5873() { testInvalid("{{any}, {any, any}}","((any | int) | !int)"); }
		@Test public void test_5874() { testInvalid("{{any}, {any, any}}","((any & int) | !int)"); }
		@Test public void test_5875() { testInvalid("{{any}, {any, any}}","((int & int) | !int)"); }
		@Test public void test_5876() { testInvalid("{{any}, {any, any}}","({int} | {any, any})"); }
		@Test public void test_5877() { testInvalid("{{any}, {any, any}}","(!any | {any, any})"); }
		@Test public void test_5878() { testInvalid("{{any}, {any, any}}","(!int | {any, any})"); }
		@Test public void test_5879() { testInvalid("{{any}, {any, any}}","({any, int} | {any, any})"); }
		@Test public void test_5880() { testInvalid("{{any}, {any, any}}","((int | any) | {any, any})"); }
		@Test public void test_5881() { testInvalid("{{any}, {any, any}}","((any & any) | {any, any})"); }
		@Test public void test_5882() { testInvalid("{{any}, {any, any}}","((any & int) | {any, any})"); }
		@Test public void test_5883() { testInvalid("{{any}, {any, any}}","(!int | {int, any})"); }
		@Test public void test_5884() { testInvalid("{{any}, {any, any}}","({any, int} | {int, any})"); }
		@Test public void test_5885() { testInvalid("{{any}, {any, any}}","((any | any) | {int, any})"); }
		@Test public void test_5886() { testInvalid("{{any}, {any, any}}","((int | any) | {int, any})"); }
		@Test public void test_5887() { testInvalid("{{any}, {any, any}}","((any | int) | {int, any})"); }
		@Test public void test_5888() { testInvalid("{{any}, {any, any}}","((int & any) | {int, any})"); }
		@Test public void test_5889() { testInvalid("{{any}, {any, any}}","({any} | {any, int})"); }
		@Test public void test_5890() { testInvalid("{{any}, {any, any}}","(!int | {any, int})"); }
		@Test public void test_5891() { testInvalid("{{any}, {any, any}}","({any, int} | {any, int})"); }
		@Test public void test_5892() { testInvalid("{{any}, {any, any}}","((any | any) | {any, int})"); }
		@Test public void test_5893() { testInvalid("{{any}, {any, any}}","((any | int) | {any, int})"); }
		@Test public void test_5894() { testInvalid("{{any}, {any, any}}","((int | int) | {any, int})"); }
		@Test public void test_5895() { testInvalid("{{any}, {any, any}}","((int & any) | {any, int})"); }
		@Test public void test_5896() { testInvalid("{{any}, {any, any}}","(!any | {int, int})"); }
		@Test public void test_5897() { testInvalid("{{any}, {any, any}}","(!int | {int, int})"); }
		@Test public void test_5898() { testInvalid("{{any}, {any, any}}","({any, any} | {int, int})"); }
		@Test public void test_5899() { testInvalid("{{any}, {any, any}}","({any, int} | {int, int})"); }
		@Test public void test_5900() { testInvalid("{{any}, {any, any}}","((any | any) | {int, int})"); }
		@Test public void test_5901() { testInvalid("{{any}, {any, any}}","((int | int) | {int, int})"); }
		@Test public void test_5902() { testInvalid("{{any}, {any, any}}","((int & any) | {int, int})"); }
		@Test public void test_5903() { testInvalid("{{any}, {any, any}}","((any & int) | {int, int})"); }
		@Test public void test_5904() { testInvalid("{{any}, {any, any}}","((int & int) | {int, int})"); }
		@Test public void test_5905() { testInvalid("{{any}, {any, any}}","({any} | (any | any))"); }
		@Test public void test_5906() { testInvalid("{{any}, {any, any}}","(!any | (any | any))"); }
		@Test public void test_5907() { testInvalid("{{any}, {any, any}}","({any, any} | (any | any))"); }
		@Test public void test_5908() { testInvalid("{{any}, {any, any}}","({any, int} | (any | any))"); }
		@Test public void test_5909() { testInvalid("{{any}, {any, any}}","({int, int} | (any | any))"); }
		@Test public void test_5910() { testInvalid("{{any}, {any, any}}","((int | any) | (any | any))"); }
		@Test public void test_5911() { testInvalid("{{any}, {any, any}}","((any | int) | (any | any))"); }
		@Test public void test_5912() { testInvalid("{{any}, {any, any}}","((any & int) | (any | any))"); }
		@Test public void test_5913() { testInvalid("{{any}, {any, any}}","((int & int) | (any | any))"); }
		@Test public void test_5914() { testInvalid("{{any}, {any, any}}","({any} | (int | any))"); }
		@Test public void test_5915() { testInvalid("{{any}, {any, any}}","(!int | (int | any))"); }
		@Test public void test_5916() { testInvalid("{{any}, {any, any}}","({int, any} | (int | any))"); }
		@Test public void test_5917() { testInvalid("{{any}, {any, any}}","({any, int} | (int | any))"); }
		@Test public void test_5918() { testInvalid("{{any}, {any, any}}","((int & any) | (int | any))"); }
		@Test public void test_5919() { testInvalid("{{any}, {any, any}}","((any & int) | (int | any))"); }
		@Test public void test_5920() { testInvalid("{{any}, {any, any}}","({any} | (any | int))"); }
		@Test public void test_5921() { testInvalid("{{any}, {any, any}}","({int} | (any | int))"); }
		@Test public void test_5922() { testInvalid("{{any}, {any, any}}","(!any | (any | int))"); }
		@Test public void test_5923() { testInvalid("{{any}, {any, any}}","(!int | (any | int))"); }
		@Test public void test_5924() { testInvalid("{{any}, {any, any}}","({any, int} | (any | int))"); }
		@Test public void test_5925() { testInvalid("{{any}, {any, any}}","({int, int} | (any | int))"); }
		@Test public void test_5926() { testInvalid("{{any}, {any, any}}","((int | any) | (any | int))"); }
		@Test public void test_5927() { testInvalid("{{any}, {any, any}}","((any | int) | (any | int))"); }
		@Test public void test_5928() { testInvalid("{{any}, {any, any}}","((int | int) | (any | int))"); }
		@Test public void test_5929() { testInvalid("{{any}, {any, any}}","((any & any) | (any | int))"); }
		@Test public void test_5930() { testInvalid("{{any}, {any, any}}","({int} | (int | int))"); }
		@Test public void test_5931() { testInvalid("{{any}, {any, any}}","(!any | (int | int))"); }
		@Test public void test_5932() { testInvalid("{{any}, {any, any}}","(!int | (int | int))"); }
		@Test public void test_5933() { testInvalid("{{any}, {any, any}}","({int, any} | (int | int))"); }
		@Test public void test_5934() { testInvalid("{{any}, {any, any}}","({any, int} | (int | int))"); }
		@Test public void test_5935() { testInvalid("{{any}, {any, any}}","((any | int) | (int | int))"); }
		@Test public void test_5936() { testInvalid("{{any}, {any, any}}","((int | int) | (int | int))"); }
		@Test public void test_5937() { testInvalid("{{any}, {any, any}}","((any & any) | (int | int))"); }
		@Test public void test_5938() { testInvalid("{{any}, {any, any}}","((int & any) | (int | int))"); }
		@Test public void test_5939() { testInvalid("{{any}, {any, any}}","((int & int) | (int | int))"); }
		@Test public void test_5940() { testInvalid("{{any}, {any, any}}","(!any | (any & any))"); }
		@Test public void test_5941() { testInvalid("{{any}, {any, any}}","(!int | (any & any))"); }
		@Test public void test_5942() { testInvalid("{{any}, {any, any}}","({any, any} | (any & any))"); }
		@Test public void test_5943() { testInvalid("{{any}, {any, any}}","({int, any} | (any & any))"); }
		@Test public void test_5944() { testInvalid("{{any}, {any, any}}","({any, int} | (any & any))"); }
		@Test public void test_5945() { testInvalid("{{any}, {any, any}}","({int, int} | (any & any))"); }
		@Test public void test_5946() { testInvalid("{{any}, {any, any}}","((int | any) | (any & any))"); }
		@Test public void test_5947() { testInvalid("{{any}, {any, any}}","((int | int) | (any & any))"); }
		@Test public void test_5948() { testInvalid("{{any}, {any, any}}","((int & any) | (any & any))"); }
		@Test public void test_5949() { testInvalid("{{any}, {any, any}}","((any & int) | (any & any))"); }
		@Test public void test_5950() { testInvalid("{{any}, {any, any}}","((int & int) | (any & any))"); }
		@Test public void test_5951() { testInvalid("{{any}, {any, any}}","({any} | (int & any))"); }
		@Test public void test_5952() { testInvalid("{{int}, {any, any}}","{int}"); }
		@Test public void test_5953() { testInvalid("{{int}, {any, any}}","{any, any}"); }
		@Test public void test_5954() { testInvalid("{{int}, {any, any}}","{int, int}"); }
		@Test public void test_5955() { testInvalid("{{int}, {any, any}}","(any | int)"); }
		@Test public void test_5956() { testInvalid("{{int}, {any, any}}","(int & any)"); }
		@Test public void test_5957() { testInvalid("{{int}, {any, any}}","{{any}}"); }
		@Test public void test_5958() { testInvalid("{{int}, {any, any}}","{{int, any}}"); }
		@Test public void test_5959() { testInvalid("{{int}, {any, any}}","{{int, int}}"); }
		@Test public void test_5960() { testInvalid("{{int}, {any, any}}","{(any | int)}"); }
		@Test public void test_5961() { testInvalid("{{int}, {any, any}}","!{int, any}"); }
		@Test public void test_5962() { testInvalid("{{int}, {any, any}}","!{int, int}"); }
		@Test public void test_5963() { testValid("{{int}, {any, any}}","!(any | any)"); }
		@Test public void test_5964() { testValid("{{int}, {any, any}}","!(any & any)"); }
		@Test public void test_5965() { testInvalid("{{int}, {any, any}}","!(int & int)"); }
		@Test public void test_5966() { testInvalid("{{int}, {any, any}}","{{int}, {any}}"); }
		@Test public void test_5967() { testInvalid("{{int}, {any, any}}","{!int, {any}}"); }
		@Test public void test_5968() { testInvalid("{{int}, {any, any}}","{{int, int}, {any}}"); }
		@Test public void test_5969() { testInvalid("{{int}, {any, any}}","{(any | int), {any}}"); }
		@Test public void test_5970() { testInvalid("{{int}, {any, any}}","{!int, {int}}"); }
		@Test public void test_5971() { testInvalid("{{int}, {any, any}}","{{any, any}, {int}}"); }
		@Test public void test_5972() { testInvalid("{{int}, {any, any}}","{(any | any), {int}}"); }
		@Test public void test_5973() { testInvalid("{{int}, {any, any}}","{(any & any), {int}}"); }
		@Test public void test_5974() { testInvalid("{{int}, {any, any}}","{(any & int), {int}}"); }
		@Test public void test_5975() { testInvalid("{{int}, {any, any}}","{{any, any}, !int}"); }
		@Test public void test_5976() { testInvalid("{{int}, {any, any}}","{{any, int}, !int}"); }
		@Test public void test_5977() { testInvalid("{{int}, {any, any}}","{(any | any), !int}"); }
		@Test public void test_5978() { testInvalid("{{int}, {any, any}}","{(int | any), !int}"); }
		@Test public void test_5979() { testInvalid("{{int}, {any, any}}","{(any & any), !int}"); }
		@Test public void test_5980() { testInvalid("{{int}, {any, any}}","{(int & any), !int}"); }
		@Test public void test_5981() { testInvalid("{{int}, {any, any}}","{(int & int), !int}"); }
		@Test public void test_5982() { testInvalid("{{int}, {any, any}}","{{any}, {any, any}}"); }
		@Test public void test_5983() { testValid("{{int}, {any, any}}","{{int}, {any, any}}"); }
		@Test public void test_5984() { testInvalid("{{int}, {any, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_5985() { testInvalid("{{int}, {any, any}}","{(any | any), {any, any}}"); }
		@Test public void test_5986() { testInvalid("{{int}, {any, any}}","{(any | int), {any, any}}"); }
		@Test public void test_5987() { testInvalid("{{int}, {any, any}}","{!int, {int, any}}"); }
		@Test public void test_5988() { testInvalid("{{int}, {any, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_5989() { testInvalid("{{int}, {any, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_5990() { testInvalid("{{int}, {any, any}}","{(any & int), {int, any}}"); }
		@Test public void test_5991() { testInvalid("{{int}, {any, any}}","{{any}, {any, int}}"); }
		@Test public void test_5992() { testInvalid("{{int}, {any, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_5993() { testInvalid("{{int}, {any, any}}","{(int | int), {any, int}}"); }
		@Test public void test_5994() { testInvalid("{{int}, {any, any}}","{(any & int), {any, int}}"); }
		@Test public void test_5995() { testInvalid("{{int}, {any, any}}","{!int, {int, int}}"); }
		@Test public void test_5996() { testInvalid("{{int}, {any, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_5997() { testInvalid("{{int}, {any, any}}","{(any | any), {int, int}}"); }
		@Test public void test_5998() { testInvalid("{{int}, {any, any}}","{(int | any), {int, int}}"); }
		@Test public void test_5999() { testInvalid("{{int}, {any, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6000() { testInvalid("{{int}, {any, any}}","{{int}, (any | any)}"); }
		@Test public void test_6001() { testInvalid("{{int}, {any, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6002() { testInvalid("{{int}, {any, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6003() { testInvalid("{{int}, {any, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6004() { testInvalid("{{int}, {any, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6005() { testInvalid("{{int}, {any, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6006() { testInvalid("{{int}, {any, any}}","{!int, (int | any)}"); }
		@Test public void test_6007() { testInvalid("{{int}, {any, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6008() { testInvalid("{{int}, {any, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6009() { testInvalid("{{int}, {any, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6010() { testInvalid("{{int}, {any, any}}","{{any}, (any | int)}"); }
		@Test public void test_6011() { testInvalid("{{int}, {any, any}}","{!int, (any | int)}"); }
		@Test public void test_6012() { testInvalid("{{int}, {any, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6013() { testInvalid("{{int}, {any, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6014() { testInvalid("{{int}, {any, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6015() { testInvalid("{{int}, {any, any}}","{{int}, (int | int)}"); }
		@Test public void test_6016() { testInvalid("{{int}, {any, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6017() { testInvalid("{{int}, {any, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6018() { testInvalid("{{int}, {any, any}}","{{int}, (any & any)}"); }
		@Test public void test_6019() { testInvalid("{{int}, {any, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6020() { testInvalid("{{int}, {any, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6021() { testInvalid("{{int}, {any, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6022() { testInvalid("{{int}, {any, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6023() { testInvalid("{{int}, {any, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6024() { testInvalid("{{int}, {any, any}}","{{any}, (int & any)}"); }
		@Test public void test_6025() { testInvalid("{{int}, {any, any}}","{{int}, (int & any)}"); }
		@Test public void test_6026() { testInvalid("{{int}, {any, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6027() { testInvalid("{{int}, {any, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6028() { testInvalid("{{int}, {any, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6029() { testInvalid("{{int}, {any, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6030() { testInvalid("{{int}, {any, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6031() { testInvalid("{{int}, {any, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6032() { testInvalid("{{int}, {any, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6033() { testInvalid("{{int}, {any, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6034() { testInvalid("{{int}, {any, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6035() { testInvalid("{{int}, {any, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6036() { testInvalid("{{int}, {any, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6037() { testInvalid("{{int}, {any, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6038() { testInvalid("{{int}, {any, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6039() { testInvalid("{{int}, {any, any}}","(!int | {any})"); }
		@Test public void test_6040() { testInvalid("{{int}, {any, any}}","({any, any} | {any})"); }
		@Test public void test_6041() { testInvalid("{{int}, {any, any}}","((any | any) | {any})"); }
		@Test public void test_6042() { testInvalid("{{int}, {any, any}}","((int | any) | {any})"); }
		@Test public void test_6043() { testInvalid("{{int}, {any, any}}","((any & any) | {any})"); }
		@Test public void test_6044() { testInvalid("{{int}, {any, any}}","((int & any) | {any})"); }
		@Test public void test_6045() { testInvalid("{{int}, {any, any}}","((any & int) | {any})"); }
		@Test public void test_6046() { testInvalid("{{int}, {any, any}}","({int} | {int})"); }
		@Test public void test_6047() { testInvalid("{{int}, {any, any}}","(!any | {int})"); }
		@Test public void test_6048() { testInvalid("{{int}, {any, any}}","(!int | {int})"); }
		@Test public void test_6049() { testInvalid("{{int}, {any, any}}","({any, int} | {int})"); }
		@Test public void test_6050() { testInvalid("{{int}, {any, any}}","((int & any) | {int})"); }
		@Test public void test_6051() { testInvalid("{{int}, {any, any}}","((any & int) | {int})"); }
		@Test public void test_6052() { testInvalid("{{int}, {any, any}}","((int & int) | {int})"); }
		@Test public void test_6053() { testInvalid("{{int}, {any, any}}","({any} | !any)"); }
		@Test public void test_6054() { testInvalid("{{int}, {any, any}}","({int} | !any)"); }
		@Test public void test_6055() { testInvalid("{{int}, {any, any}}","({any, any} | !any)"); }
		@Test public void test_6056() { testInvalid("{{int}, {any, any}}","({int, int} | !any)"); }
		@Test public void test_6057() { testInvalid("{{int}, {any, any}}","((any | any) | !any)"); }
		@Test public void test_6058() { testInvalid("{{int}, {any, any}}","((int | any) | !any)"); }
		@Test public void test_6059() { testInvalid("{{int}, {any, any}}","((int | int) | !any)"); }
		@Test public void test_6060() { testInvalid("{{int}, {any, any}}","((int & int) | !any)"); }
		@Test public void test_6061() { testInvalid("{{int}, {any, any}}","(!int | !int)"); }
		@Test public void test_6062() { testInvalid("{{int}, {any, any}}","({any, any} | !int)"); }
		@Test public void test_6063() { testInvalid("{{int}, {any, any}}","({int, int} | !int)"); }
		@Test public void test_6064() { testInvalid("{{int}, {any, any}}","((int | any) | !int)"); }
		@Test public void test_6065() { testInvalid("{{int}, {any, any}}","((any | int) | !int)"); }
		@Test public void test_6066() { testInvalid("{{int}, {any, any}}","((any & int) | !int)"); }
		@Test public void test_6067() { testInvalid("{{int}, {any, any}}","((int & int) | !int)"); }
		@Test public void test_6068() { testInvalid("{{int}, {any, any}}","({int} | {any, any})"); }
		@Test public void test_6069() { testInvalid("{{int}, {any, any}}","(!any | {any, any})"); }
		@Test public void test_6070() { testInvalid("{{int}, {any, any}}","(!int | {any, any})"); }
		@Test public void test_6071() { testInvalid("{{int}, {any, any}}","({any, int} | {any, any})"); }
		@Test public void test_6072() { testInvalid("{{int}, {any, any}}","((int | any) | {any, any})"); }
		@Test public void test_6073() { testInvalid("{{int}, {any, any}}","((any & any) | {any, any})"); }
		@Test public void test_6074() { testInvalid("{{int}, {any, any}}","((any & int) | {any, any})"); }
		@Test public void test_6075() { testInvalid("{{int}, {any, any}}","(!int | {int, any})"); }
		@Test public void test_6076() { testInvalid("{{int}, {any, any}}","({any, int} | {int, any})"); }
		@Test public void test_6077() { testInvalid("{{int}, {any, any}}","((any | any) | {int, any})"); }
		@Test public void test_6078() { testInvalid("{{int}, {any, any}}","((int | any) | {int, any})"); }
		@Test public void test_6079() { testInvalid("{{int}, {any, any}}","((any | int) | {int, any})"); }
		@Test public void test_6080() { testInvalid("{{int}, {any, any}}","((int & any) | {int, any})"); }
		@Test public void test_6081() { testInvalid("{{int}, {any, any}}","({any} | {any, int})"); }
		@Test public void test_6082() { testInvalid("{{int}, {any, any}}","(!int | {any, int})"); }
		@Test public void test_6083() { testInvalid("{{int}, {any, any}}","({any, int} | {any, int})"); }
		@Test public void test_6084() { testInvalid("{{int}, {any, any}}","((any | any) | {any, int})"); }
		@Test public void test_6085() { testInvalid("{{int}, {any, any}}","((any | int) | {any, int})"); }
		@Test public void test_6086() { testInvalid("{{int}, {any, any}}","((int | int) | {any, int})"); }
		@Test public void test_6087() { testInvalid("{{int}, {any, any}}","((int & any) | {any, int})"); }
		@Test public void test_6088() { testInvalid("{{int}, {any, any}}","(!any | {int, int})"); }
		@Test public void test_6089() { testInvalid("{{int}, {any, any}}","(!int | {int, int})"); }
		@Test public void test_6090() { testInvalid("{{int}, {any, any}}","({any, any} | {int, int})"); }
		@Test public void test_6091() { testInvalid("{{int}, {any, any}}","({any, int} | {int, int})"); }
		@Test public void test_6092() { testInvalid("{{int}, {any, any}}","((any | any) | {int, int})"); }
		@Test public void test_6093() { testInvalid("{{int}, {any, any}}","((int | int) | {int, int})"); }
		@Test public void test_6094() { testInvalid("{{int}, {any, any}}","((int & any) | {int, int})"); }
		@Test public void test_6095() { testInvalid("{{int}, {any, any}}","((any & int) | {int, int})"); }
		@Test public void test_6096() { testInvalid("{{int}, {any, any}}","((int & int) | {int, int})"); }
		@Test public void test_6097() { testInvalid("{{int}, {any, any}}","({any} | (any | any))"); }
		@Test public void test_6098() { testInvalid("{{int}, {any, any}}","(!any | (any | any))"); }
		@Test public void test_6099() { testInvalid("{{int}, {any, any}}","({any, any} | (any | any))"); }
		@Test public void test_6100() { testInvalid("{{int}, {any, any}}","({any, int} | (any | any))"); }
		@Test public void test_6101() { testInvalid("{{int}, {any, any}}","({int, int} | (any | any))"); }
		@Test public void test_6102() { testInvalid("{{int}, {any, any}}","((int | any) | (any | any))"); }
		@Test public void test_6103() { testInvalid("{{int}, {any, any}}","((any | int) | (any | any))"); }
		@Test public void test_6104() { testInvalid("{{int}, {any, any}}","((any & int) | (any | any))"); }
		@Test public void test_6105() { testInvalid("{{int}, {any, any}}","((int & int) | (any | any))"); }
		@Test public void test_6106() { testInvalid("{{int}, {any, any}}","({any} | (int | any))"); }
		@Test public void test_6107() { testInvalid("{{int}, {any, any}}","(!int | (int | any))"); }
		@Test public void test_6108() { testInvalid("{{int}, {any, any}}","({int, any} | (int | any))"); }
		@Test public void test_6109() { testInvalid("{{int}, {any, any}}","({any, int} | (int | any))"); }
		@Test public void test_6110() { testInvalid("{{int}, {any, any}}","((int & any) | (int | any))"); }
		@Test public void test_6111() { testInvalid("{{int}, {any, any}}","((any & int) | (int | any))"); }
		@Test public void test_6112() { testInvalid("{{int}, {any, any}}","({any} | (any | int))"); }
		@Test public void test_6113() { testInvalid("{{int}, {any, any}}","({int} | (any | int))"); }
		@Test public void test_6114() { testInvalid("{{int}, {any, any}}","(!any | (any | int))"); }
		@Test public void test_6115() { testInvalid("{{int}, {any, any}}","(!int | (any | int))"); }
		@Test public void test_6116() { testInvalid("{{int}, {any, any}}","({any, int} | (any | int))"); }
		@Test public void test_6117() { testInvalid("{{int}, {any, any}}","({int, int} | (any | int))"); }
		@Test public void test_6118() { testInvalid("{{int}, {any, any}}","((int | any) | (any | int))"); }
		@Test public void test_6119() { testInvalid("{{int}, {any, any}}","((any | int) | (any | int))"); }
		@Test public void test_6120() { testInvalid("{{int}, {any, any}}","((int | int) | (any | int))"); }
		@Test public void test_6121() { testInvalid("{{int}, {any, any}}","((any & any) | (any | int))"); }
		@Test public void test_6122() { testInvalid("{{int}, {any, any}}","({int} | (int | int))"); }
		@Test public void test_6123() { testInvalid("{{int}, {any, any}}","(!any | (int | int))"); }
		@Test public void test_6124() { testInvalid("{{int}, {any, any}}","(!int | (int | int))"); }
		@Test public void test_6125() { testInvalid("{{int}, {any, any}}","({int, any} | (int | int))"); }
		@Test public void test_6126() { testInvalid("{{int}, {any, any}}","({any, int} | (int | int))"); }
		@Test public void test_6127() { testInvalid("{{int}, {any, any}}","((any | int) | (int | int))"); }
		@Test public void test_6128() { testInvalid("{{int}, {any, any}}","((int | int) | (int | int))"); }
		@Test public void test_6129() { testInvalid("{{int}, {any, any}}","((any & any) | (int | int))"); }
		@Test public void test_6130() { testInvalid("{{int}, {any, any}}","((int & any) | (int | int))"); }
		@Test public void test_6131() { testInvalid("{{int}, {any, any}}","((int & int) | (int | int))"); }
		@Test public void test_6132() { testInvalid("{{int}, {any, any}}","(!any | (any & any))"); }
		@Test public void test_6133() { testInvalid("{{int}, {any, any}}","(!int | (any & any))"); }
		@Test public void test_6134() { testInvalid("{{int}, {any, any}}","({any, any} | (any & any))"); }
		@Test public void test_6135() { testInvalid("{{int}, {any, any}}","({int, any} | (any & any))"); }
		@Test public void test_6136() { testInvalid("{{int}, {any, any}}","({any, int} | (any & any))"); }
		@Test public void test_6137() { testInvalid("{{int}, {any, any}}","({int, int} | (any & any))"); }
		@Test public void test_6138() { testInvalid("{{int}, {any, any}}","((int | any) | (any & any))"); }
		@Test public void test_6139() { testInvalid("{{int}, {any, any}}","((int | int) | (any & any))"); }
		@Test public void test_6140() { testInvalid("{{int}, {any, any}}","((int & any) | (any & any))"); }
		@Test public void test_6141() { testInvalid("{{int}, {any, any}}","((any & int) | (any & any))"); }
		@Test public void test_6142() { testInvalid("{{int}, {any, any}}","((int & int) | (any & any))"); }
		@Test public void test_6143() { testInvalid("{{int}, {any, any}}","({any} | (int & any))"); }
		@Test public void test_6144() { testInvalid("{{int, int}, {any, any}}","{int}"); }
		@Test public void test_6145() { testInvalid("{{int, int}, {any, any}}","{any, any}"); }
		@Test public void test_6146() { testInvalid("{{int, int}, {any, any}}","{int, int}"); }
		@Test public void test_6147() { testInvalid("{{int, int}, {any, any}}","(any | int)"); }
		@Test public void test_6148() { testInvalid("{{int, int}, {any, any}}","(int & any)"); }
		@Test public void test_6149() { testInvalid("{{int, int}, {any, any}}","{{any}}"); }
		@Test public void test_6150() { testInvalid("{{int, int}, {any, any}}","{{int, any}}"); }
		@Test public void test_6151() { testInvalid("{{int, int}, {any, any}}","{{int, int}}"); }
		@Test public void test_6152() { testInvalid("{{int, int}, {any, any}}","{(any | int)}"); }
		@Test public void test_6153() { testInvalid("{{int, int}, {any, any}}","!{int, any}"); }
		@Test public void test_6154() { testInvalid("{{int, int}, {any, any}}","!{int, int}"); }
		@Test public void test_6155() { testValid("{{int, int}, {any, any}}","!(any | any)"); }
		@Test public void test_6156() { testValid("{{int, int}, {any, any}}","!(any & any)"); }
		@Test public void test_6157() { testInvalid("{{int, int}, {any, any}}","!(int & int)"); }
		@Test public void test_6158() { testInvalid("{{int, int}, {any, any}}","{{int}, {any}}"); }
		@Test public void test_6159() { testInvalid("{{int, int}, {any, any}}","{!int, {any}}"); }
		@Test public void test_6160() { testInvalid("{{int, int}, {any, any}}","{{int, int}, {any}}"); }
		@Test public void test_6161() { testInvalid("{{int, int}, {any, any}}","{(any | int), {any}}"); }
		@Test public void test_6162() { testInvalid("{{int, int}, {any, any}}","{!int, {int}}"); }
		@Test public void test_6163() { testInvalid("{{int, int}, {any, any}}","{{any, any}, {int}}"); }
		@Test public void test_6164() { testInvalid("{{int, int}, {any, any}}","{(any | any), {int}}"); }
		@Test public void test_6165() { testInvalid("{{int, int}, {any, any}}","{(any & any), {int}}"); }
		@Test public void test_6166() { testInvalid("{{int, int}, {any, any}}","{(any & int), {int}}"); }
		@Test public void test_6167() { testInvalid("{{int, int}, {any, any}}","{{any, any}, !int}"); }
		@Test public void test_6168() { testInvalid("{{int, int}, {any, any}}","{{any, int}, !int}"); }
		@Test public void test_6169() { testInvalid("{{int, int}, {any, any}}","{(any | any), !int}"); }
		@Test public void test_6170() { testInvalid("{{int, int}, {any, any}}","{(int | any), !int}"); }
		@Test public void test_6171() { testInvalid("{{int, int}, {any, any}}","{(any & any), !int}"); }
		@Test public void test_6172() { testInvalid("{{int, int}, {any, any}}","{(int & any), !int}"); }
		@Test public void test_6173() { testInvalid("{{int, int}, {any, any}}","{(int & int), !int}"); }
		@Test public void test_6174() { testInvalid("{{int, int}, {any, any}}","{{any}, {any, any}}"); }
		@Test public void test_6175() { testInvalid("{{int, int}, {any, any}}","{{int}, {any, any}}"); }
		@Test public void test_6176() { testValid("{{int, int}, {any, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_6177() { testInvalid("{{int, int}, {any, any}}","{(any | any), {any, any}}"); }
		@Test public void test_6178() { testInvalid("{{int, int}, {any, any}}","{(any | int), {any, any}}"); }
		@Test public void test_6179() { testInvalid("{{int, int}, {any, any}}","{!int, {int, any}}"); }
		@Test public void test_6180() { testInvalid("{{int, int}, {any, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_6181() { testInvalid("{{int, int}, {any, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_6182() { testInvalid("{{int, int}, {any, any}}","{(any & int), {int, any}}"); }
		@Test public void test_6183() { testInvalid("{{int, int}, {any, any}}","{{any}, {any, int}}"); }
		@Test public void test_6184() { testValid("{{int, int}, {any, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_6185() { testInvalid("{{int, int}, {any, any}}","{(int | int), {any, int}}"); }
		@Test public void test_6186() { testInvalid("{{int, int}, {any, any}}","{(any & int), {any, int}}"); }
		@Test public void test_6187() { testInvalid("{{int, int}, {any, any}}","{!int, {int, int}}"); }
		@Test public void test_6188() { testValid("{{int, int}, {any, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_6189() { testInvalid("{{int, int}, {any, any}}","{(any | any), {int, int}}"); }
		@Test public void test_6190() { testInvalid("{{int, int}, {any, any}}","{(int | any), {int, int}}"); }
		@Test public void test_6191() { testInvalid("{{int, int}, {any, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6192() { testInvalid("{{int, int}, {any, any}}","{{int}, (any | any)}"); }
		@Test public void test_6193() { testInvalid("{{int, int}, {any, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6194() { testInvalid("{{int, int}, {any, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6195() { testInvalid("{{int, int}, {any, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6196() { testInvalid("{{int, int}, {any, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6197() { testInvalid("{{int, int}, {any, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6198() { testInvalid("{{int, int}, {any, any}}","{!int, (int | any)}"); }
		@Test public void test_6199() { testInvalid("{{int, int}, {any, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6200() { testInvalid("{{int, int}, {any, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6201() { testInvalid("{{int, int}, {any, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6202() { testInvalid("{{int, int}, {any, any}}","{{any}, (any | int)}"); }
		@Test public void test_6203() { testInvalid("{{int, int}, {any, any}}","{!int, (any | int)}"); }
		@Test public void test_6204() { testInvalid("{{int, int}, {any, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6205() { testInvalid("{{int, int}, {any, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6206() { testInvalid("{{int, int}, {any, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6207() { testInvalid("{{int, int}, {any, any}}","{{int}, (int | int)}"); }
		@Test public void test_6208() { testInvalid("{{int, int}, {any, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6209() { testInvalid("{{int, int}, {any, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6210() { testInvalid("{{int, int}, {any, any}}","{{int}, (any & any)}"); }
		@Test public void test_6211() { testInvalid("{{int, int}, {any, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6212() { testInvalid("{{int, int}, {any, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6213() { testInvalid("{{int, int}, {any, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6214() { testInvalid("{{int, int}, {any, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6215() { testInvalid("{{int, int}, {any, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6216() { testInvalid("{{int, int}, {any, any}}","{{any}, (int & any)}"); }
		@Test public void test_6217() { testInvalid("{{int, int}, {any, any}}","{{int}, (int & any)}"); }
		@Test public void test_6218() { testInvalid("{{int, int}, {any, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6219() { testInvalid("{{int, int}, {any, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6220() { testInvalid("{{int, int}, {any, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6221() { testInvalid("{{int, int}, {any, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6222() { testInvalid("{{int, int}, {any, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6223() { testInvalid("{{int, int}, {any, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6224() { testInvalid("{{int, int}, {any, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6225() { testInvalid("{{int, int}, {any, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6226() { testInvalid("{{int, int}, {any, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6227() { testInvalid("{{int, int}, {any, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6228() { testInvalid("{{int, int}, {any, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6229() { testInvalid("{{int, int}, {any, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6230() { testInvalid("{{int, int}, {any, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6231() { testInvalid("{{int, int}, {any, any}}","(!int | {any})"); }
		@Test public void test_6232() { testInvalid("{{int, int}, {any, any}}","({any, any} | {any})"); }
		@Test public void test_6233() { testInvalid("{{int, int}, {any, any}}","((any | any) | {any})"); }
		@Test public void test_6234() { testInvalid("{{int, int}, {any, any}}","((int | any) | {any})"); }
		@Test public void test_6235() { testInvalid("{{int, int}, {any, any}}","((any & any) | {any})"); }
		@Test public void test_6236() { testInvalid("{{int, int}, {any, any}}","((int & any) | {any})"); }
		@Test public void test_6237() { testInvalid("{{int, int}, {any, any}}","((any & int) | {any})"); }
		@Test public void test_6238() { testInvalid("{{int, int}, {any, any}}","({int} | {int})"); }
		@Test public void test_6239() { testInvalid("{{int, int}, {any, any}}","(!any | {int})"); }
		@Test public void test_6240() { testInvalid("{{int, int}, {any, any}}","(!int | {int})"); }
		@Test public void test_6241() { testInvalid("{{int, int}, {any, any}}","({any, int} | {int})"); }
		@Test public void test_6242() { testInvalid("{{int, int}, {any, any}}","((int & any) | {int})"); }
		@Test public void test_6243() { testInvalid("{{int, int}, {any, any}}","((any & int) | {int})"); }
		@Test public void test_6244() { testInvalid("{{int, int}, {any, any}}","((int & int) | {int})"); }
		@Test public void test_6245() { testInvalid("{{int, int}, {any, any}}","({any} | !any)"); }
		@Test public void test_6246() { testInvalid("{{int, int}, {any, any}}","({int} | !any)"); }
		@Test public void test_6247() { testInvalid("{{int, int}, {any, any}}","({any, any} | !any)"); }
		@Test public void test_6248() { testInvalid("{{int, int}, {any, any}}","({int, int} | !any)"); }
		@Test public void test_6249() { testInvalid("{{int, int}, {any, any}}","((any | any) | !any)"); }
		@Test public void test_6250() { testInvalid("{{int, int}, {any, any}}","((int | any) | !any)"); }
		@Test public void test_6251() { testInvalid("{{int, int}, {any, any}}","((int | int) | !any)"); }
		@Test public void test_6252() { testInvalid("{{int, int}, {any, any}}","((int & int) | !any)"); }
		@Test public void test_6253() { testInvalid("{{int, int}, {any, any}}","(!int | !int)"); }
		@Test public void test_6254() { testInvalid("{{int, int}, {any, any}}","({any, any} | !int)"); }
		@Test public void test_6255() { testInvalid("{{int, int}, {any, any}}","({int, int} | !int)"); }
		@Test public void test_6256() { testInvalid("{{int, int}, {any, any}}","((int | any) | !int)"); }
		@Test public void test_6257() { testInvalid("{{int, int}, {any, any}}","((any | int) | !int)"); }
		@Test public void test_6258() { testInvalid("{{int, int}, {any, any}}","((any & int) | !int)"); }
		@Test public void test_6259() { testInvalid("{{int, int}, {any, any}}","((int & int) | !int)"); }
		@Test public void test_6260() { testInvalid("{{int, int}, {any, any}}","({int} | {any, any})"); }
		@Test public void test_6261() { testInvalid("{{int, int}, {any, any}}","(!any | {any, any})"); }
		@Test public void test_6262() { testInvalid("{{int, int}, {any, any}}","(!int | {any, any})"); }
		@Test public void test_6263() { testInvalid("{{int, int}, {any, any}}","({any, int} | {any, any})"); }
		@Test public void test_6264() { testInvalid("{{int, int}, {any, any}}","((int | any) | {any, any})"); }
		@Test public void test_6265() { testInvalid("{{int, int}, {any, any}}","((any & any) | {any, any})"); }
		@Test public void test_6266() { testInvalid("{{int, int}, {any, any}}","((any & int) | {any, any})"); }
		@Test public void test_6267() { testInvalid("{{int, int}, {any, any}}","(!int | {int, any})"); }
		@Test public void test_6268() { testInvalid("{{int, int}, {any, any}}","({any, int} | {int, any})"); }
		@Test public void test_6269() { testInvalid("{{int, int}, {any, any}}","((any | any) | {int, any})"); }
		@Test public void test_6270() { testInvalid("{{int, int}, {any, any}}","((int | any) | {int, any})"); }
		@Test public void test_6271() { testInvalid("{{int, int}, {any, any}}","((any | int) | {int, any})"); }
		@Test public void test_6272() { testInvalid("{{int, int}, {any, any}}","((int & any) | {int, any})"); }
		@Test public void test_6273() { testInvalid("{{int, int}, {any, any}}","({any} | {any, int})"); }
		@Test public void test_6274() { testInvalid("{{int, int}, {any, any}}","(!int | {any, int})"); }
		@Test public void test_6275() { testInvalid("{{int, int}, {any, any}}","({any, int} | {any, int})"); }
		@Test public void test_6276() { testInvalid("{{int, int}, {any, any}}","((any | any) | {any, int})"); }
		@Test public void test_6277() { testInvalid("{{int, int}, {any, any}}","((any | int) | {any, int})"); }
		@Test public void test_6278() { testInvalid("{{int, int}, {any, any}}","((int | int) | {any, int})"); }
		@Test public void test_6279() { testInvalid("{{int, int}, {any, any}}","((int & any) | {any, int})"); }
		@Test public void test_6280() { testInvalid("{{int, int}, {any, any}}","(!any | {int, int})"); }
		@Test public void test_6281() { testInvalid("{{int, int}, {any, any}}","(!int | {int, int})"); }
		@Test public void test_6282() { testInvalid("{{int, int}, {any, any}}","({any, any} | {int, int})"); }
		@Test public void test_6283() { testInvalid("{{int, int}, {any, any}}","({any, int} | {int, int})"); }
		@Test public void test_6284() { testInvalid("{{int, int}, {any, any}}","((any | any) | {int, int})"); }
		@Test public void test_6285() { testInvalid("{{int, int}, {any, any}}","((int | int) | {int, int})"); }
		@Test public void test_6286() { testInvalid("{{int, int}, {any, any}}","((int & any) | {int, int})"); }
		@Test public void test_6287() { testInvalid("{{int, int}, {any, any}}","((any & int) | {int, int})"); }
		@Test public void test_6288() { testInvalid("{{int, int}, {any, any}}","((int & int) | {int, int})"); }
		@Test public void test_6289() { testInvalid("{{int, int}, {any, any}}","({any} | (any | any))"); }
		@Test public void test_6290() { testInvalid("{{int, int}, {any, any}}","(!any | (any | any))"); }
		@Test public void test_6291() { testInvalid("{{int, int}, {any, any}}","({any, any} | (any | any))"); }
		@Test public void test_6292() { testInvalid("{{int, int}, {any, any}}","({any, int} | (any | any))"); }
		@Test public void test_6293() { testInvalid("{{int, int}, {any, any}}","({int, int} | (any | any))"); }
		@Test public void test_6294() { testInvalid("{{int, int}, {any, any}}","((int | any) | (any | any))"); }
		@Test public void test_6295() { testInvalid("{{int, int}, {any, any}}","((any | int) | (any | any))"); }
		@Test public void test_6296() { testInvalid("{{int, int}, {any, any}}","((any & int) | (any | any))"); }
		@Test public void test_6297() { testInvalid("{{int, int}, {any, any}}","((int & int) | (any | any))"); }
		@Test public void test_6298() { testInvalid("{{int, int}, {any, any}}","({any} | (int | any))"); }
		@Test public void test_6299() { testInvalid("{{int, int}, {any, any}}","(!int | (int | any))"); }
		@Test public void test_6300() { testInvalid("{{int, int}, {any, any}}","({int, any} | (int | any))"); }
		@Test public void test_6301() { testInvalid("{{int, int}, {any, any}}","({any, int} | (int | any))"); }
		@Test public void test_6302() { testInvalid("{{int, int}, {any, any}}","((int & any) | (int | any))"); }
		@Test public void test_6303() { testInvalid("{{int, int}, {any, any}}","((any & int) | (int | any))"); }
		@Test public void test_6304() { testInvalid("{{int, int}, {any, any}}","({any} | (any | int))"); }
		@Test public void test_6305() { testInvalid("{{int, int}, {any, any}}","({int} | (any | int))"); }
		@Test public void test_6306() { testInvalid("{{int, int}, {any, any}}","(!any | (any | int))"); }
		@Test public void test_6307() { testInvalid("{{int, int}, {any, any}}","(!int | (any | int))"); }
		@Test public void test_6308() { testInvalid("{{int, int}, {any, any}}","({any, int} | (any | int))"); }
		@Test public void test_6309() { testInvalid("{{int, int}, {any, any}}","({int, int} | (any | int))"); }
		@Test public void test_6310() { testInvalid("{{int, int}, {any, any}}","((int | any) | (any | int))"); }
		@Test public void test_6311() { testInvalid("{{int, int}, {any, any}}","((any | int) | (any | int))"); }
		@Test public void test_6312() { testInvalid("{{int, int}, {any, any}}","((int | int) | (any | int))"); }
		@Test public void test_6313() { testInvalid("{{int, int}, {any, any}}","((any & any) | (any | int))"); }
		@Test public void test_6314() { testInvalid("{{int, int}, {any, any}}","({int} | (int | int))"); }
		@Test public void test_6315() { testInvalid("{{int, int}, {any, any}}","(!any | (int | int))"); }
		@Test public void test_6316() { testInvalid("{{int, int}, {any, any}}","(!int | (int | int))"); }
		@Test public void test_6317() { testInvalid("{{int, int}, {any, any}}","({int, any} | (int | int))"); }
		@Test public void test_6318() { testInvalid("{{int, int}, {any, any}}","({any, int} | (int | int))"); }
		@Test public void test_6319() { testInvalid("{{int, int}, {any, any}}","((any | int) | (int | int))"); }
		@Test public void test_6320() { testInvalid("{{int, int}, {any, any}}","((int | int) | (int | int))"); }
		@Test public void test_6321() { testInvalid("{{int, int}, {any, any}}","((any & any) | (int | int))"); }
		@Test public void test_6322() { testInvalid("{{int, int}, {any, any}}","((int & any) | (int | int))"); }
		@Test public void test_6323() { testInvalid("{{int, int}, {any, any}}","((int & int) | (int | int))"); }
		@Test public void test_6324() { testInvalid("{{int, int}, {any, any}}","(!any | (any & any))"); }
		@Test public void test_6325() { testInvalid("{{int, int}, {any, any}}","(!int | (any & any))"); }
		@Test public void test_6326() { testInvalid("{{int, int}, {any, any}}","({any, any} | (any & any))"); }
		@Test public void test_6327() { testInvalid("{{int, int}, {any, any}}","({int, any} | (any & any))"); }
		@Test public void test_6328() { testInvalid("{{int, int}, {any, any}}","({any, int} | (any & any))"); }
		@Test public void test_6329() { testInvalid("{{int, int}, {any, any}}","({int, int} | (any & any))"); }
		@Test public void test_6330() { testInvalid("{{int, int}, {any, any}}","((int | any) | (any & any))"); }
		@Test public void test_6331() { testInvalid("{{int, int}, {any, any}}","((int | int) | (any & any))"); }
		@Test public void test_6332() { testInvalid("{{int, int}, {any, any}}","((int & any) | (any & any))"); }
		@Test public void test_6333() { testInvalid("{{int, int}, {any, any}}","((any & int) | (any & any))"); }
		@Test public void test_6334() { testInvalid("{{int, int}, {any, any}}","((int & int) | (any & any))"); }
		@Test public void test_6335() { testInvalid("{{int, int}, {any, any}}","({any} | (int & any))"); }
		@Test public void test_6336() { testInvalid("{(any | any), {any, any}}","{int}"); }
		@Test public void test_6337() { testInvalid("{(any | any), {any, any}}","{any, any}"); }
		@Test public void test_6338() { testInvalid("{(any | any), {any, any}}","{int, int}"); }
		@Test public void test_6339() { testInvalid("{(any | any), {any, any}}","(any | int)"); }
		@Test public void test_6340() { testInvalid("{(any | any), {any, any}}","(int & any)"); }
		@Test public void test_6341() { testInvalid("{(any | any), {any, any}}","{{any}}"); }
		@Test public void test_6342() { testInvalid("{(any | any), {any, any}}","{{int, any}}"); }
		@Test public void test_6343() { testInvalid("{(any | any), {any, any}}","{{int, int}}"); }
		@Test public void test_6344() { testInvalid("{(any | any), {any, any}}","{(any | int)}"); }
		@Test public void test_6345() { testInvalid("{(any | any), {any, any}}","!{int, any}"); }
		@Test public void test_6346() { testInvalid("{(any | any), {any, any}}","!{int, int}"); }
		@Test public void test_6347() { testValid("{(any | any), {any, any}}","!(any | any)"); }
		@Test public void test_6348() { testValid("{(any | any), {any, any}}","!(any & any)"); }
		@Test public void test_6349() { testInvalid("{(any | any), {any, any}}","!(int & int)"); }
		@Test public void test_6350() { testInvalid("{(any | any), {any, any}}","{{int}, {any}}"); }
		@Test public void test_6351() { testInvalid("{(any | any), {any, any}}","{!int, {any}}"); }
		@Test public void test_6352() { testInvalid("{(any | any), {any, any}}","{{int, int}, {any}}"); }
		@Test public void test_6353() { testInvalid("{(any | any), {any, any}}","{(any | int), {any}}"); }
		@Test public void test_6354() { testInvalid("{(any | any), {any, any}}","{!int, {int}}"); }
		@Test public void test_6355() { testInvalid("{(any | any), {any, any}}","{{any, any}, {int}}"); }
		@Test public void test_6356() { testInvalid("{(any | any), {any, any}}","{(any | any), {int}}"); }
		@Test public void test_6357() { testInvalid("{(any | any), {any, any}}","{(any & any), {int}}"); }
		@Test public void test_6358() { testInvalid("{(any | any), {any, any}}","{(any & int), {int}}"); }
		@Test public void test_6359() { testInvalid("{(any | any), {any, any}}","{{any, any}, !int}"); }
		@Test public void test_6360() { testInvalid("{(any | any), {any, any}}","{{any, int}, !int}"); }
		@Test public void test_6361() { testInvalid("{(any | any), {any, any}}","{(any | any), !int}"); }
		@Test public void test_6362() { testInvalid("{(any | any), {any, any}}","{(int | any), !int}"); }
		@Test public void test_6363() { testInvalid("{(any | any), {any, any}}","{(any & any), !int}"); }
		@Test public void test_6364() { testInvalid("{(any | any), {any, any}}","{(int & any), !int}"); }
		@Test public void test_6365() { testInvalid("{(any | any), {any, any}}","{(int & int), !int}"); }
		@Test public void test_6366() { testValid("{(any | any), {any, any}}","{{any}, {any, any}}"); }
		@Test public void test_6367() { testValid("{(any | any), {any, any}}","{{int}, {any, any}}"); }
		@Test public void test_6368() { testValid("{(any | any), {any, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_6369() { testValid("{(any | any), {any, any}}","{(any | any), {any, any}}"); }
		@Test public void test_6370() { testValid("{(any | any), {any, any}}","{(any | int), {any, any}}"); }
		@Test public void test_6371() { testValid("{(any | any), {any, any}}","{!int, {int, any}}"); }
		@Test public void test_6372() { testValid("{(any | any), {any, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_6373() { testValid("{(any | any), {any, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_6374() { testValid("{(any | any), {any, any}}","{(any & int), {int, any}}"); }
		@Test public void test_6375() { testValid("{(any | any), {any, any}}","{{any}, {any, int}}"); }
		@Test public void test_6376() { testValid("{(any | any), {any, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_6377() { testValid("{(any | any), {any, any}}","{(int | int), {any, int}}"); }
		@Test public void test_6378() { testValid("{(any | any), {any, any}}","{(any & int), {any, int}}"); }
		@Test public void test_6379() { testValid("{(any | any), {any, any}}","{!int, {int, int}}"); }
		@Test public void test_6380() { testValid("{(any | any), {any, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_6381() { testValid("{(any | any), {any, any}}","{(any | any), {int, int}}"); }
		@Test public void test_6382() { testValid("{(any | any), {any, any}}","{(int | any), {int, int}}"); }
		@Test public void test_6383() { testValid("{(any | any), {any, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6384() { testInvalid("{(any | any), {any, any}}","{{int}, (any | any)}"); }
		@Test public void test_6385() { testInvalid("{(any | any), {any, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6386() { testInvalid("{(any | any), {any, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6387() { testInvalid("{(any | any), {any, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6388() { testInvalid("{(any | any), {any, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6389() { testInvalid("{(any | any), {any, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6390() { testInvalid("{(any | any), {any, any}}","{!int, (int | any)}"); }
		@Test public void test_6391() { testInvalid("{(any | any), {any, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6392() { testInvalid("{(any | any), {any, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6393() { testInvalid("{(any | any), {any, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6394() { testInvalid("{(any | any), {any, any}}","{{any}, (any | int)}"); }
		@Test public void test_6395() { testInvalid("{(any | any), {any, any}}","{!int, (any | int)}"); }
		@Test public void test_6396() { testInvalid("{(any | any), {any, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6397() { testInvalid("{(any | any), {any, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6398() { testInvalid("{(any | any), {any, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6399() { testInvalid("{(any | any), {any, any}}","{{int}, (int | int)}"); }
		@Test public void test_6400() { testInvalid("{(any | any), {any, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6401() { testInvalid("{(any | any), {any, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6402() { testInvalid("{(any | any), {any, any}}","{{int}, (any & any)}"); }
		@Test public void test_6403() { testInvalid("{(any | any), {any, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6404() { testInvalid("{(any | any), {any, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6405() { testInvalid("{(any | any), {any, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6406() { testInvalid("{(any | any), {any, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6407() { testInvalid("{(any | any), {any, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6408() { testInvalid("{(any | any), {any, any}}","{{any}, (int & any)}"); }
		@Test public void test_6409() { testInvalid("{(any | any), {any, any}}","{{int}, (int & any)}"); }
		@Test public void test_6410() { testInvalid("{(any | any), {any, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6411() { testInvalid("{(any | any), {any, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6412() { testInvalid("{(any | any), {any, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6413() { testInvalid("{(any | any), {any, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6414() { testInvalid("{(any | any), {any, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6415() { testInvalid("{(any | any), {any, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6416() { testInvalid("{(any | any), {any, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6417() { testInvalid("{(any | any), {any, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6418() { testInvalid("{(any | any), {any, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6419() { testInvalid("{(any | any), {any, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6420() { testInvalid("{(any | any), {any, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6421() { testInvalid("{(any | any), {any, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6422() { testInvalid("{(any | any), {any, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6423() { testInvalid("{(any | any), {any, any}}","(!int | {any})"); }
		@Test public void test_6424() { testInvalid("{(any | any), {any, any}}","({any, any} | {any})"); }
		@Test public void test_6425() { testInvalid("{(any | any), {any, any}}","((any | any) | {any})"); }
		@Test public void test_6426() { testInvalid("{(any | any), {any, any}}","((int | any) | {any})"); }
		@Test public void test_6427() { testInvalid("{(any | any), {any, any}}","((any & any) | {any})"); }
		@Test public void test_6428() { testInvalid("{(any | any), {any, any}}","((int & any) | {any})"); }
		@Test public void test_6429() { testInvalid("{(any | any), {any, any}}","((any & int) | {any})"); }
		@Test public void test_6430() { testInvalid("{(any | any), {any, any}}","({int} | {int})"); }
		@Test public void test_6431() { testInvalid("{(any | any), {any, any}}","(!any | {int})"); }
		@Test public void test_6432() { testInvalid("{(any | any), {any, any}}","(!int | {int})"); }
		@Test public void test_6433() { testInvalid("{(any | any), {any, any}}","({any, int} | {int})"); }
		@Test public void test_6434() { testInvalid("{(any | any), {any, any}}","((int & any) | {int})"); }
		@Test public void test_6435() { testInvalid("{(any | any), {any, any}}","((any & int) | {int})"); }
		@Test public void test_6436() { testInvalid("{(any | any), {any, any}}","((int & int) | {int})"); }
		@Test public void test_6437() { testInvalid("{(any | any), {any, any}}","({any} | !any)"); }
		@Test public void test_6438() { testInvalid("{(any | any), {any, any}}","({int} | !any)"); }
		@Test public void test_6439() { testInvalid("{(any | any), {any, any}}","({any, any} | !any)"); }
		@Test public void test_6440() { testInvalid("{(any | any), {any, any}}","({int, int} | !any)"); }
		@Test public void test_6441() { testInvalid("{(any | any), {any, any}}","((any | any) | !any)"); }
		@Test public void test_6442() { testInvalid("{(any | any), {any, any}}","((int | any) | !any)"); }
		@Test public void test_6443() { testInvalid("{(any | any), {any, any}}","((int | int) | !any)"); }
		@Test public void test_6444() { testInvalid("{(any | any), {any, any}}","((int & int) | !any)"); }
		@Test public void test_6445() { testInvalid("{(any | any), {any, any}}","(!int | !int)"); }
		@Test public void test_6446() { testInvalid("{(any | any), {any, any}}","({any, any} | !int)"); }
		@Test public void test_6447() { testInvalid("{(any | any), {any, any}}","({int, int} | !int)"); }
		@Test public void test_6448() { testInvalid("{(any | any), {any, any}}","((int | any) | !int)"); }
		@Test public void test_6449() { testInvalid("{(any | any), {any, any}}","((any | int) | !int)"); }
		@Test public void test_6450() { testInvalid("{(any | any), {any, any}}","((any & int) | !int)"); }
		@Test public void test_6451() { testInvalid("{(any | any), {any, any}}","((int & int) | !int)"); }
		@Test public void test_6452() { testInvalid("{(any | any), {any, any}}","({int} | {any, any})"); }
		@Test public void test_6453() { testInvalid("{(any | any), {any, any}}","(!any | {any, any})"); }
		@Test public void test_6454() { testInvalid("{(any | any), {any, any}}","(!int | {any, any})"); }
		@Test public void test_6455() { testInvalid("{(any | any), {any, any}}","({any, int} | {any, any})"); }
		@Test public void test_6456() { testInvalid("{(any | any), {any, any}}","((int | any) | {any, any})"); }
		@Test public void test_6457() { testInvalid("{(any | any), {any, any}}","((any & any) | {any, any})"); }
		@Test public void test_6458() { testInvalid("{(any | any), {any, any}}","((any & int) | {any, any})"); }
		@Test public void test_6459() { testInvalid("{(any | any), {any, any}}","(!int | {int, any})"); }
		@Test public void test_6460() { testInvalid("{(any | any), {any, any}}","({any, int} | {int, any})"); }
		@Test public void test_6461() { testInvalid("{(any | any), {any, any}}","((any | any) | {int, any})"); }
		@Test public void test_6462() { testInvalid("{(any | any), {any, any}}","((int | any) | {int, any})"); }
		@Test public void test_6463() { testInvalid("{(any | any), {any, any}}","((any | int) | {int, any})"); }
		@Test public void test_6464() { testInvalid("{(any | any), {any, any}}","((int & any) | {int, any})"); }
		@Test public void test_6465() { testInvalid("{(any | any), {any, any}}","({any} | {any, int})"); }
		@Test public void test_6466() { testInvalid("{(any | any), {any, any}}","(!int | {any, int})"); }
		@Test public void test_6467() { testInvalid("{(any | any), {any, any}}","({any, int} | {any, int})"); }
		@Test public void test_6468() { testInvalid("{(any | any), {any, any}}","((any | any) | {any, int})"); }
		@Test public void test_6469() { testInvalid("{(any | any), {any, any}}","((any | int) | {any, int})"); }
		@Test public void test_6470() { testInvalid("{(any | any), {any, any}}","((int | int) | {any, int})"); }
		@Test public void test_6471() { testInvalid("{(any | any), {any, any}}","((int & any) | {any, int})"); }
		@Test public void test_6472() { testInvalid("{(any | any), {any, any}}","(!any | {int, int})"); }
		@Test public void test_6473() { testInvalid("{(any | any), {any, any}}","(!int | {int, int})"); }
		@Test public void test_6474() { testInvalid("{(any | any), {any, any}}","({any, any} | {int, int})"); }
		@Test public void test_6475() { testInvalid("{(any | any), {any, any}}","({any, int} | {int, int})"); }
		@Test public void test_6476() { testInvalid("{(any | any), {any, any}}","((any | any) | {int, int})"); }
		@Test public void test_6477() { testInvalid("{(any | any), {any, any}}","((int | int) | {int, int})"); }
		@Test public void test_6478() { testInvalid("{(any | any), {any, any}}","((int & any) | {int, int})"); }
		@Test public void test_6479() { testInvalid("{(any | any), {any, any}}","((any & int) | {int, int})"); }
		@Test public void test_6480() { testInvalid("{(any | any), {any, any}}","((int & int) | {int, int})"); }
		@Test public void test_6481() { testInvalid("{(any | any), {any, any}}","({any} | (any | any))"); }
		@Test public void test_6482() { testInvalid("{(any | any), {any, any}}","(!any | (any | any))"); }
		@Test public void test_6483() { testInvalid("{(any | any), {any, any}}","({any, any} | (any | any))"); }
		@Test public void test_6484() { testInvalid("{(any | any), {any, any}}","({any, int} | (any | any))"); }
		@Test public void test_6485() { testInvalid("{(any | any), {any, any}}","({int, int} | (any | any))"); }
		@Test public void test_6486() { testInvalid("{(any | any), {any, any}}","((int | any) | (any | any))"); }
		@Test public void test_6487() { testInvalid("{(any | any), {any, any}}","((any | int) | (any | any))"); }
		@Test public void test_6488() { testInvalid("{(any | any), {any, any}}","((any & int) | (any | any))"); }
		@Test public void test_6489() { testInvalid("{(any | any), {any, any}}","((int & int) | (any | any))"); }
		@Test public void test_6490() { testInvalid("{(any | any), {any, any}}","({any} | (int | any))"); }
		@Test public void test_6491() { testInvalid("{(any | any), {any, any}}","(!int | (int | any))"); }
		@Test public void test_6492() { testInvalid("{(any | any), {any, any}}","({int, any} | (int | any))"); }
		@Test public void test_6493() { testInvalid("{(any | any), {any, any}}","({any, int} | (int | any))"); }
		@Test public void test_6494() { testInvalid("{(any | any), {any, any}}","((int & any) | (int | any))"); }
		@Test public void test_6495() { testInvalid("{(any | any), {any, any}}","((any & int) | (int | any))"); }
		@Test public void test_6496() { testInvalid("{(any | any), {any, any}}","({any} | (any | int))"); }
		@Test public void test_6497() { testInvalid("{(any | any), {any, any}}","({int} | (any | int))"); }
		@Test public void test_6498() { testInvalid("{(any | any), {any, any}}","(!any | (any | int))"); }
		@Test public void test_6499() { testInvalid("{(any | any), {any, any}}","(!int | (any | int))"); }
		@Test public void test_6500() { testInvalid("{(any | any), {any, any}}","({any, int} | (any | int))"); }
		@Test public void test_6501() { testInvalid("{(any | any), {any, any}}","({int, int} | (any | int))"); }
		@Test public void test_6502() { testInvalid("{(any | any), {any, any}}","((int | any) | (any | int))"); }
		@Test public void test_6503() { testInvalid("{(any | any), {any, any}}","((any | int) | (any | int))"); }
		@Test public void test_6504() { testInvalid("{(any | any), {any, any}}","((int | int) | (any | int))"); }
		@Test public void test_6505() { testInvalid("{(any | any), {any, any}}","((any & any) | (any | int))"); }
		@Test public void test_6506() { testInvalid("{(any | any), {any, any}}","({int} | (int | int))"); }
		@Test public void test_6507() { testInvalid("{(any | any), {any, any}}","(!any | (int | int))"); }
		@Test public void test_6508() { testInvalid("{(any | any), {any, any}}","(!int | (int | int))"); }
		@Test public void test_6509() { testInvalid("{(any | any), {any, any}}","({int, any} | (int | int))"); }
		@Test public void test_6510() { testInvalid("{(any | any), {any, any}}","({any, int} | (int | int))"); }
		@Test public void test_6511() { testInvalid("{(any | any), {any, any}}","((any | int) | (int | int))"); }
		@Test public void test_6512() { testInvalid("{(any | any), {any, any}}","((int | int) | (int | int))"); }
		@Test public void test_6513() { testInvalid("{(any | any), {any, any}}","((any & any) | (int | int))"); }
		@Test public void test_6514() { testInvalid("{(any | any), {any, any}}","((int & any) | (int | int))"); }
		@Test public void test_6515() { testInvalid("{(any | any), {any, any}}","((int & int) | (int | int))"); }
		@Test public void test_6516() { testInvalid("{(any | any), {any, any}}","(!any | (any & any))"); }
		@Test public void test_6517() { testInvalid("{(any | any), {any, any}}","(!int | (any & any))"); }
		@Test public void test_6518() { testInvalid("{(any | any), {any, any}}","({any, any} | (any & any))"); }
		@Test public void test_6519() { testInvalid("{(any | any), {any, any}}","({int, any} | (any & any))"); }
		@Test public void test_6520() { testInvalid("{(any | any), {any, any}}","({any, int} | (any & any))"); }
		@Test public void test_6521() { testInvalid("{(any | any), {any, any}}","({int, int} | (any & any))"); }
		@Test public void test_6522() { testInvalid("{(any | any), {any, any}}","((int | any) | (any & any))"); }
		@Test public void test_6523() { testInvalid("{(any | any), {any, any}}","((int | int) | (any & any))"); }
		@Test public void test_6524() { testInvalid("{(any | any), {any, any}}","((int & any) | (any & any))"); }
		@Test public void test_6525() { testInvalid("{(any | any), {any, any}}","((any & int) | (any & any))"); }
		@Test public void test_6526() { testInvalid("{(any | any), {any, any}}","((int & int) | (any & any))"); }
		@Test public void test_6527() { testInvalid("{(any | any), {any, any}}","({any} | (int & any))"); }
		@Test public void test_6528() { testInvalid("{(any | int), {any, any}}","{int}"); }
		@Test public void test_6529() { testInvalid("{(any | int), {any, any}}","{any, any}"); }
		@Test public void test_6530() { testInvalid("{(any | int), {any, any}}","{int, int}"); }
		@Test public void test_6531() { testInvalid("{(any | int), {any, any}}","(any | int)"); }
		@Test public void test_6532() { testInvalid("{(any | int), {any, any}}","(int & any)"); }
		@Test public void test_6533() { testInvalid("{(any | int), {any, any}}","{{any}}"); }
		@Test public void test_6534() { testInvalid("{(any | int), {any, any}}","{{int, any}}"); }
		@Test public void test_6535() { testInvalid("{(any | int), {any, any}}","{{int, int}}"); }
		@Test public void test_6536() { testInvalid("{(any | int), {any, any}}","{(any | int)}"); }
		@Test public void test_6537() { testInvalid("{(any | int), {any, any}}","!{int, any}"); }
		@Test public void test_6538() { testInvalid("{(any | int), {any, any}}","!{int, int}"); }
		@Test public void test_6539() { testValid("{(any | int), {any, any}}","!(any | any)"); }
		@Test public void test_6540() { testValid("{(any | int), {any, any}}","!(any & any)"); }
		@Test public void test_6541() { testInvalid("{(any | int), {any, any}}","!(int & int)"); }
		@Test public void test_6542() { testInvalid("{(any | int), {any, any}}","{{int}, {any}}"); }
		@Test public void test_6543() { testInvalid("{(any | int), {any, any}}","{!int, {any}}"); }
		@Test public void test_6544() { testInvalid("{(any | int), {any, any}}","{{int, int}, {any}}"); }
		@Test public void test_6545() { testInvalid("{(any | int), {any, any}}","{(any | int), {any}}"); }
		@Test public void test_6546() { testInvalid("{(any | int), {any, any}}","{!int, {int}}"); }
		@Test public void test_6547() { testInvalid("{(any | int), {any, any}}","{{any, any}, {int}}"); }
		@Test public void test_6548() { testInvalid("{(any | int), {any, any}}","{(any | any), {int}}"); }
		@Test public void test_6549() { testInvalid("{(any | int), {any, any}}","{(any & any), {int}}"); }
		@Test public void test_6550() { testInvalid("{(any | int), {any, any}}","{(any & int), {int}}"); }
		@Test public void test_6551() { testInvalid("{(any | int), {any, any}}","{{any, any}, !int}"); }
		@Test public void test_6552() { testInvalid("{(any | int), {any, any}}","{{any, int}, !int}"); }
		@Test public void test_6553() { testInvalid("{(any | int), {any, any}}","{(any | any), !int}"); }
		@Test public void test_6554() { testInvalid("{(any | int), {any, any}}","{(int | any), !int}"); }
		@Test public void test_6555() { testInvalid("{(any | int), {any, any}}","{(any & any), !int}"); }
		@Test public void test_6556() { testInvalid("{(any | int), {any, any}}","{(int & any), !int}"); }
		@Test public void test_6557() { testInvalid("{(any | int), {any, any}}","{(int & int), !int}"); }
		@Test public void test_6558() { testValid("{(any | int), {any, any}}","{{any}, {any, any}}"); }
		@Test public void test_6559() { testValid("{(any | int), {any, any}}","{{int}, {any, any}}"); }
		@Test public void test_6560() { testValid("{(any | int), {any, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_6561() { testValid("{(any | int), {any, any}}","{(any | any), {any, any}}"); }
		@Test public void test_6562() { testValid("{(any | int), {any, any}}","{(any | int), {any, any}}"); }
		@Test public void test_6563() { testValid("{(any | int), {any, any}}","{!int, {int, any}}"); }
		@Test public void test_6564() { testValid("{(any | int), {any, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_6565() { testValid("{(any | int), {any, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_6566() { testValid("{(any | int), {any, any}}","{(any & int), {int, any}}"); }
		@Test public void test_6567() { testValid("{(any | int), {any, any}}","{{any}, {any, int}}"); }
		@Test public void test_6568() { testValid("{(any | int), {any, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_6569() { testValid("{(any | int), {any, any}}","{(int | int), {any, int}}"); }
		@Test public void test_6570() { testValid("{(any | int), {any, any}}","{(any & int), {any, int}}"); }
		@Test public void test_6571() { testValid("{(any | int), {any, any}}","{!int, {int, int}}"); }
		@Test public void test_6572() { testValid("{(any | int), {any, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_6573() { testValid("{(any | int), {any, any}}","{(any | any), {int, int}}"); }
		@Test public void test_6574() { testValid("{(any | int), {any, any}}","{(int | any), {int, int}}"); }
		@Test public void test_6575() { testValid("{(any | int), {any, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6576() { testInvalid("{(any | int), {any, any}}","{{int}, (any | any)}"); }
		@Test public void test_6577() { testInvalid("{(any | int), {any, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6578() { testInvalid("{(any | int), {any, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6579() { testInvalid("{(any | int), {any, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6580() { testInvalid("{(any | int), {any, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6581() { testInvalid("{(any | int), {any, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6582() { testInvalid("{(any | int), {any, any}}","{!int, (int | any)}"); }
		@Test public void test_6583() { testInvalid("{(any | int), {any, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6584() { testInvalid("{(any | int), {any, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6585() { testInvalid("{(any | int), {any, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6586() { testInvalid("{(any | int), {any, any}}","{{any}, (any | int)}"); }
		@Test public void test_6587() { testInvalid("{(any | int), {any, any}}","{!int, (any | int)}"); }
		@Test public void test_6588() { testInvalid("{(any | int), {any, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6589() { testInvalid("{(any | int), {any, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6590() { testInvalid("{(any | int), {any, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6591() { testInvalid("{(any | int), {any, any}}","{{int}, (int | int)}"); }
		@Test public void test_6592() { testInvalid("{(any | int), {any, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6593() { testInvalid("{(any | int), {any, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6594() { testInvalid("{(any | int), {any, any}}","{{int}, (any & any)}"); }
		@Test public void test_6595() { testInvalid("{(any | int), {any, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6596() { testInvalid("{(any | int), {any, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6597() { testInvalid("{(any | int), {any, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6598() { testInvalid("{(any | int), {any, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6599() { testInvalid("{(any | int), {any, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6600() { testInvalid("{(any | int), {any, any}}","{{any}, (int & any)}"); }
		@Test public void test_6601() { testInvalid("{(any | int), {any, any}}","{{int}, (int & any)}"); }
		@Test public void test_6602() { testInvalid("{(any | int), {any, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6603() { testInvalid("{(any | int), {any, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6604() { testInvalid("{(any | int), {any, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6605() { testInvalid("{(any | int), {any, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6606() { testInvalid("{(any | int), {any, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6607() { testInvalid("{(any | int), {any, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6608() { testInvalid("{(any | int), {any, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6609() { testInvalid("{(any | int), {any, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6610() { testInvalid("{(any | int), {any, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6611() { testInvalid("{(any | int), {any, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6612() { testInvalid("{(any | int), {any, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6613() { testInvalid("{(any | int), {any, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6614() { testInvalid("{(any | int), {any, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6615() { testInvalid("{(any | int), {any, any}}","(!int | {any})"); }
		@Test public void test_6616() { testInvalid("{(any | int), {any, any}}","({any, any} | {any})"); }
		@Test public void test_6617() { testInvalid("{(any | int), {any, any}}","((any | any) | {any})"); }
		@Test public void test_6618() { testInvalid("{(any | int), {any, any}}","((int | any) | {any})"); }
		@Test public void test_6619() { testInvalid("{(any | int), {any, any}}","((any & any) | {any})"); }
		@Test public void test_6620() { testInvalid("{(any | int), {any, any}}","((int & any) | {any})"); }
		@Test public void test_6621() { testInvalid("{(any | int), {any, any}}","((any & int) | {any})"); }
		@Test public void test_6622() { testInvalid("{(any | int), {any, any}}","({int} | {int})"); }
		@Test public void test_6623() { testInvalid("{(any | int), {any, any}}","(!any | {int})"); }
		@Test public void test_6624() { testInvalid("{(any | int), {any, any}}","(!int | {int})"); }
		@Test public void test_6625() { testInvalid("{(any | int), {any, any}}","({any, int} | {int})"); }
		@Test public void test_6626() { testInvalid("{(any | int), {any, any}}","((int & any) | {int})"); }
		@Test public void test_6627() { testInvalid("{(any | int), {any, any}}","((any & int) | {int})"); }
		@Test public void test_6628() { testInvalid("{(any | int), {any, any}}","((int & int) | {int})"); }
		@Test public void test_6629() { testInvalid("{(any | int), {any, any}}","({any} | !any)"); }
		@Test public void test_6630() { testInvalid("{(any | int), {any, any}}","({int} | !any)"); }
		@Test public void test_6631() { testInvalid("{(any | int), {any, any}}","({any, any} | !any)"); }
		@Test public void test_6632() { testInvalid("{(any | int), {any, any}}","({int, int} | !any)"); }
		@Test public void test_6633() { testInvalid("{(any | int), {any, any}}","((any | any) | !any)"); }
		@Test public void test_6634() { testInvalid("{(any | int), {any, any}}","((int | any) | !any)"); }
		@Test public void test_6635() { testInvalid("{(any | int), {any, any}}","((int | int) | !any)"); }
		@Test public void test_6636() { testInvalid("{(any | int), {any, any}}","((int & int) | !any)"); }
		@Test public void test_6637() { testInvalid("{(any | int), {any, any}}","(!int | !int)"); }
		@Test public void test_6638() { testInvalid("{(any | int), {any, any}}","({any, any} | !int)"); }
		@Test public void test_6639() { testInvalid("{(any | int), {any, any}}","({int, int} | !int)"); }
		@Test public void test_6640() { testInvalid("{(any | int), {any, any}}","((int | any) | !int)"); }
		@Test public void test_6641() { testInvalid("{(any | int), {any, any}}","((any | int) | !int)"); }
		@Test public void test_6642() { testInvalid("{(any | int), {any, any}}","((any & int) | !int)"); }
		@Test public void test_6643() { testInvalid("{(any | int), {any, any}}","((int & int) | !int)"); }
		@Test public void test_6644() { testInvalid("{(any | int), {any, any}}","({int} | {any, any})"); }
		@Test public void test_6645() { testInvalid("{(any | int), {any, any}}","(!any | {any, any})"); }
		@Test public void test_6646() { testInvalid("{(any | int), {any, any}}","(!int | {any, any})"); }
		@Test public void test_6647() { testInvalid("{(any | int), {any, any}}","({any, int} | {any, any})"); }
		@Test public void test_6648() { testInvalid("{(any | int), {any, any}}","((int | any) | {any, any})"); }
		@Test public void test_6649() { testInvalid("{(any | int), {any, any}}","((any & any) | {any, any})"); }
		@Test public void test_6650() { testInvalid("{(any | int), {any, any}}","((any & int) | {any, any})"); }
		@Test public void test_6651() { testInvalid("{(any | int), {any, any}}","(!int | {int, any})"); }
		@Test public void test_6652() { testInvalid("{(any | int), {any, any}}","({any, int} | {int, any})"); }
		@Test public void test_6653() { testInvalid("{(any | int), {any, any}}","((any | any) | {int, any})"); }
		@Test public void test_6654() { testInvalid("{(any | int), {any, any}}","((int | any) | {int, any})"); }
		@Test public void test_6655() { testInvalid("{(any | int), {any, any}}","((any | int) | {int, any})"); }
		@Test public void test_6656() { testInvalid("{(any | int), {any, any}}","((int & any) | {int, any})"); }
		@Test public void test_6657() { testInvalid("{(any | int), {any, any}}","({any} | {any, int})"); }
		@Test public void test_6658() { testInvalid("{(any | int), {any, any}}","(!int | {any, int})"); }
		@Test public void test_6659() { testInvalid("{(any | int), {any, any}}","({any, int} | {any, int})"); }
		@Test public void test_6660() { testInvalid("{(any | int), {any, any}}","((any | any) | {any, int})"); }
		@Test public void test_6661() { testInvalid("{(any | int), {any, any}}","((any | int) | {any, int})"); }
		@Test public void test_6662() { testInvalid("{(any | int), {any, any}}","((int | int) | {any, int})"); }
		@Test public void test_6663() { testInvalid("{(any | int), {any, any}}","((int & any) | {any, int})"); }
		@Test public void test_6664() { testInvalid("{(any | int), {any, any}}","(!any | {int, int})"); }
		@Test public void test_6665() { testInvalid("{(any | int), {any, any}}","(!int | {int, int})"); }
		@Test public void test_6666() { testInvalid("{(any | int), {any, any}}","({any, any} | {int, int})"); }
		@Test public void test_6667() { testInvalid("{(any | int), {any, any}}","({any, int} | {int, int})"); }
		@Test public void test_6668() { testInvalid("{(any | int), {any, any}}","((any | any) | {int, int})"); }
		@Test public void test_6669() { testInvalid("{(any | int), {any, any}}","((int | int) | {int, int})"); }
		@Test public void test_6670() { testInvalid("{(any | int), {any, any}}","((int & any) | {int, int})"); }
		@Test public void test_6671() { testInvalid("{(any | int), {any, any}}","((any & int) | {int, int})"); }
		@Test public void test_6672() { testInvalid("{(any | int), {any, any}}","((int & int) | {int, int})"); }
		@Test public void test_6673() { testInvalid("{(any | int), {any, any}}","({any} | (any | any))"); }
		@Test public void test_6674() { testInvalid("{(any | int), {any, any}}","(!any | (any | any))"); }
		@Test public void test_6675() { testInvalid("{(any | int), {any, any}}","({any, any} | (any | any))"); }
		@Test public void test_6676() { testInvalid("{(any | int), {any, any}}","({any, int} | (any | any))"); }
		@Test public void test_6677() { testInvalid("{(any | int), {any, any}}","({int, int} | (any | any))"); }
		@Test public void test_6678() { testInvalid("{(any | int), {any, any}}","((int | any) | (any | any))"); }
		@Test public void test_6679() { testInvalid("{(any | int), {any, any}}","((any | int) | (any | any))"); }
		@Test public void test_6680() { testInvalid("{(any | int), {any, any}}","((any & int) | (any | any))"); }
		@Test public void test_6681() { testInvalid("{(any | int), {any, any}}","((int & int) | (any | any))"); }
		@Test public void test_6682() { testInvalid("{(any | int), {any, any}}","({any} | (int | any))"); }
		@Test public void test_6683() { testInvalid("{(any | int), {any, any}}","(!int | (int | any))"); }
		@Test public void test_6684() { testInvalid("{(any | int), {any, any}}","({int, any} | (int | any))"); }
		@Test public void test_6685() { testInvalid("{(any | int), {any, any}}","({any, int} | (int | any))"); }
		@Test public void test_6686() { testInvalid("{(any | int), {any, any}}","((int & any) | (int | any))"); }
		@Test public void test_6687() { testInvalid("{(any | int), {any, any}}","((any & int) | (int | any))"); }
		@Test public void test_6688() { testInvalid("{(any | int), {any, any}}","({any} | (any | int))"); }
		@Test public void test_6689() { testInvalid("{(any | int), {any, any}}","({int} | (any | int))"); }
		@Test public void test_6690() { testInvalid("{(any | int), {any, any}}","(!any | (any | int))"); }
		@Test public void test_6691() { testInvalid("{(any | int), {any, any}}","(!int | (any | int))"); }
		@Test public void test_6692() { testInvalid("{(any | int), {any, any}}","({any, int} | (any | int))"); }
		@Test public void test_6693() { testInvalid("{(any | int), {any, any}}","({int, int} | (any | int))"); }
		@Test public void test_6694() { testInvalid("{(any | int), {any, any}}","((int | any) | (any | int))"); }
		@Test public void test_6695() { testInvalid("{(any | int), {any, any}}","((any | int) | (any | int))"); }
		@Test public void test_6696() { testInvalid("{(any | int), {any, any}}","((int | int) | (any | int))"); }
		@Test public void test_6697() { testInvalid("{(any | int), {any, any}}","((any & any) | (any | int))"); }
		@Test public void test_6698() { testInvalid("{(any | int), {any, any}}","({int} | (int | int))"); }
		@Test public void test_6699() { testInvalid("{(any | int), {any, any}}","(!any | (int | int))"); }
		@Test public void test_6700() { testInvalid("{(any | int), {any, any}}","(!int | (int | int))"); }
		@Test public void test_6701() { testInvalid("{(any | int), {any, any}}","({int, any} | (int | int))"); }
		@Test public void test_6702() { testInvalid("{(any | int), {any, any}}","({any, int} | (int | int))"); }
		@Test public void test_6703() { testInvalid("{(any | int), {any, any}}","((any | int) | (int | int))"); }
		@Test public void test_6704() { testInvalid("{(any | int), {any, any}}","((int | int) | (int | int))"); }
		@Test public void test_6705() { testInvalid("{(any | int), {any, any}}","((any & any) | (int | int))"); }
		@Test public void test_6706() { testInvalid("{(any | int), {any, any}}","((int & any) | (int | int))"); }
		@Test public void test_6707() { testInvalid("{(any | int), {any, any}}","((int & int) | (int | int))"); }
		@Test public void test_6708() { testInvalid("{(any | int), {any, any}}","(!any | (any & any))"); }
		@Test public void test_6709() { testInvalid("{(any | int), {any, any}}","(!int | (any & any))"); }
		@Test public void test_6710() { testInvalid("{(any | int), {any, any}}","({any, any} | (any & any))"); }
		@Test public void test_6711() { testInvalid("{(any | int), {any, any}}","({int, any} | (any & any))"); }
		@Test public void test_6712() { testInvalid("{(any | int), {any, any}}","({any, int} | (any & any))"); }
		@Test public void test_6713() { testInvalid("{(any | int), {any, any}}","({int, int} | (any & any))"); }
		@Test public void test_6714() { testInvalid("{(any | int), {any, any}}","((int | any) | (any & any))"); }
		@Test public void test_6715() { testInvalid("{(any | int), {any, any}}","((int | int) | (any & any))"); }
		@Test public void test_6716() { testInvalid("{(any | int), {any, any}}","((int & any) | (any & any))"); }
		@Test public void test_6717() { testInvalid("{(any | int), {any, any}}","((any & int) | (any & any))"); }
		@Test public void test_6718() { testInvalid("{(any | int), {any, any}}","((int & int) | (any & any))"); }
		@Test public void test_6719() { testInvalid("{(any | int), {any, any}}","({any} | (int & any))"); }
		@Test public void test_6720() { testInvalid("{!int, {int, any}}","{int}"); }
		@Test public void test_6721() { testInvalid("{!int, {int, any}}","{any, any}"); }
		@Test public void test_6722() { testInvalid("{!int, {int, any}}","{int, int}"); }
		@Test public void test_6723() { testInvalid("{!int, {int, any}}","(any | int)"); }
		@Test public void test_6724() { testInvalid("{!int, {int, any}}","(int & any)"); }
		@Test public void test_6725() { testInvalid("{!int, {int, any}}","{{any}}"); }
		@Test public void test_6726() { testInvalid("{!int, {int, any}}","{{int, any}}"); }
		@Test public void test_6727() { testInvalid("{!int, {int, any}}","{{int, int}}"); }
		@Test public void test_6728() { testInvalid("{!int, {int, any}}","{(any | int)}"); }
		@Test public void test_6729() { testInvalid("{!int, {int, any}}","!{int, any}"); }
		@Test public void test_6730() { testInvalid("{!int, {int, any}}","!{int, int}"); }
		@Test public void test_6731() { testValid("{!int, {int, any}}","!(any | any)"); }
		@Test public void test_6732() { testValid("{!int, {int, any}}","!(any & any)"); }
		@Test public void test_6733() { testInvalid("{!int, {int, any}}","!(int & int)"); }
		@Test public void test_6734() { testInvalid("{!int, {int, any}}","{{int}, {any}}"); }
		@Test public void test_6735() { testInvalid("{!int, {int, any}}","{!int, {any}}"); }
		@Test public void test_6736() { testInvalid("{!int, {int, any}}","{{int, int}, {any}}"); }
		@Test public void test_6737() { testInvalid("{!int, {int, any}}","{(any | int), {any}}"); }
		@Test public void test_6738() { testInvalid("{!int, {int, any}}","{!int, {int}}"); }
		@Test public void test_6739() { testInvalid("{!int, {int, any}}","{{any, any}, {int}}"); }
		@Test public void test_6740() { testInvalid("{!int, {int, any}}","{(any | any), {int}}"); }
		@Test public void test_6741() { testInvalid("{!int, {int, any}}","{(any & any), {int}}"); }
		@Test public void test_6742() { testInvalid("{!int, {int, any}}","{(any & int), {int}}"); }
		@Test public void test_6743() { testInvalid("{!int, {int, any}}","{{any, any}, !int}"); }
		@Test public void test_6744() { testInvalid("{!int, {int, any}}","{{any, int}, !int}"); }
		@Test public void test_6745() { testInvalid("{!int, {int, any}}","{(any | any), !int}"); }
		@Test public void test_6746() { testInvalid("{!int, {int, any}}","{(int | any), !int}"); }
		@Test public void test_6747() { testInvalid("{!int, {int, any}}","{(any & any), !int}"); }
		@Test public void test_6748() { testInvalid("{!int, {int, any}}","{(int & any), !int}"); }
		@Test public void test_6749() { testInvalid("{!int, {int, any}}","{(int & int), !int}"); }
		@Test public void test_6750() { testInvalid("{!int, {int, any}}","{{any}, {any, any}}"); }
		@Test public void test_6751() { testInvalid("{!int, {int, any}}","{{int}, {any, any}}"); }
		@Test public void test_6752() { testInvalid("{!int, {int, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_6753() { testInvalid("{!int, {int, any}}","{(any | any), {any, any}}"); }
		@Test public void test_6754() { testInvalid("{!int, {int, any}}","{(any | int), {any, any}}"); }
		@Test public void test_6755() { testValid("{!int, {int, any}}","{!int, {int, any}}"); }
		@Test public void test_6756() { testValid("{!int, {int, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_6757() { testValid("{!int, {int, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_6758() { testInvalid("{!int, {int, any}}","{(any & int), {int, any}}"); }
		@Test public void test_6759() { testInvalid("{!int, {int, any}}","{{any}, {any, int}}"); }
		@Test public void test_6760() { testInvalid("{!int, {int, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_6761() { testInvalid("{!int, {int, any}}","{(int | int), {any, int}}"); }
		@Test public void test_6762() { testInvalid("{!int, {int, any}}","{(any & int), {any, int}}"); }
		@Test public void test_6763() { testValid("{!int, {int, any}}","{!int, {int, int}}"); }
		@Test public void test_6764() { testValid("{!int, {int, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_6765() { testInvalid("{!int, {int, any}}","{(any | any), {int, int}}"); }
		@Test public void test_6766() { testInvalid("{!int, {int, any}}","{(int | any), {int, int}}"); }
		@Test public void test_6767() { testInvalid("{!int, {int, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6768() { testInvalid("{!int, {int, any}}","{{int}, (any | any)}"); }
		@Test public void test_6769() { testInvalid("{!int, {int, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6770() { testInvalid("{!int, {int, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6771() { testInvalid("{!int, {int, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6772() { testInvalid("{!int, {int, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6773() { testInvalid("{!int, {int, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6774() { testInvalid("{!int, {int, any}}","{!int, (int | any)}"); }
		@Test public void test_6775() { testInvalid("{!int, {int, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6776() { testInvalid("{!int, {int, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6777() { testInvalid("{!int, {int, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6778() { testInvalid("{!int, {int, any}}","{{any}, (any | int)}"); }
		@Test public void test_6779() { testInvalid("{!int, {int, any}}","{!int, (any | int)}"); }
		@Test public void test_6780() { testInvalid("{!int, {int, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6781() { testInvalid("{!int, {int, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6782() { testInvalid("{!int, {int, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6783() { testInvalid("{!int, {int, any}}","{{int}, (int | int)}"); }
		@Test public void test_6784() { testInvalid("{!int, {int, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6785() { testInvalid("{!int, {int, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6786() { testInvalid("{!int, {int, any}}","{{int}, (any & any)}"); }
		@Test public void test_6787() { testInvalid("{!int, {int, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6788() { testInvalid("{!int, {int, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6789() { testInvalid("{!int, {int, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6790() { testInvalid("{!int, {int, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6791() { testInvalid("{!int, {int, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6792() { testInvalid("{!int, {int, any}}","{{any}, (int & any)}"); }
		@Test public void test_6793() { testInvalid("{!int, {int, any}}","{{int}, (int & any)}"); }
		@Test public void test_6794() { testInvalid("{!int, {int, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6795() { testInvalid("{!int, {int, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6796() { testInvalid("{!int, {int, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6797() { testInvalid("{!int, {int, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6798() { testInvalid("{!int, {int, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6799() { testInvalid("{!int, {int, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6800() { testInvalid("{!int, {int, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6801() { testInvalid("{!int, {int, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6802() { testInvalid("{!int, {int, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6803() { testInvalid("{!int, {int, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6804() { testInvalid("{!int, {int, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6805() { testInvalid("{!int, {int, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6806() { testInvalid("{!int, {int, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6807() { testInvalid("{!int, {int, any}}","(!int | {any})"); }
		@Test public void test_6808() { testInvalid("{!int, {int, any}}","({any, any} | {any})"); }
		@Test public void test_6809() { testInvalid("{!int, {int, any}}","((any | any) | {any})"); }
		@Test public void test_6810() { testInvalid("{!int, {int, any}}","((int | any) | {any})"); }
		@Test public void test_6811() { testInvalid("{!int, {int, any}}","((any & any) | {any})"); }
		@Test public void test_6812() { testInvalid("{!int, {int, any}}","((int & any) | {any})"); }
		@Test public void test_6813() { testInvalid("{!int, {int, any}}","((any & int) | {any})"); }
		@Test public void test_6814() { testInvalid("{!int, {int, any}}","({int} | {int})"); }
		@Test public void test_6815() { testInvalid("{!int, {int, any}}","(!any | {int})"); }
		@Test public void test_6816() { testInvalid("{!int, {int, any}}","(!int | {int})"); }
		@Test public void test_6817() { testInvalid("{!int, {int, any}}","({any, int} | {int})"); }
		@Test public void test_6818() { testInvalid("{!int, {int, any}}","((int & any) | {int})"); }
		@Test public void test_6819() { testInvalid("{!int, {int, any}}","((any & int) | {int})"); }
		@Test public void test_6820() { testInvalid("{!int, {int, any}}","((int & int) | {int})"); }
		@Test public void test_6821() { testInvalid("{!int, {int, any}}","({any} | !any)"); }
		@Test public void test_6822() { testInvalid("{!int, {int, any}}","({int} | !any)"); }
		@Test public void test_6823() { testInvalid("{!int, {int, any}}","({any, any} | !any)"); }
		@Test public void test_6824() { testInvalid("{!int, {int, any}}","({int, int} | !any)"); }
		@Test public void test_6825() { testInvalid("{!int, {int, any}}","((any | any) | !any)"); }
		@Test public void test_6826() { testInvalid("{!int, {int, any}}","((int | any) | !any)"); }
		@Test public void test_6827() { testInvalid("{!int, {int, any}}","((int | int) | !any)"); }
		@Test public void test_6828() { testInvalid("{!int, {int, any}}","((int & int) | !any)"); }
		@Test public void test_6829() { testInvalid("{!int, {int, any}}","(!int | !int)"); }
		@Test public void test_6830() { testInvalid("{!int, {int, any}}","({any, any} | !int)"); }
		@Test public void test_6831() { testInvalid("{!int, {int, any}}","({int, int} | !int)"); }
		@Test public void test_6832() { testInvalid("{!int, {int, any}}","((int | any) | !int)"); }
		@Test public void test_6833() { testInvalid("{!int, {int, any}}","((any | int) | !int)"); }
		@Test public void test_6834() { testInvalid("{!int, {int, any}}","((any & int) | !int)"); }
		@Test public void test_6835() { testInvalid("{!int, {int, any}}","((int & int) | !int)"); }
		@Test public void test_6836() { testInvalid("{!int, {int, any}}","({int} | {any, any})"); }
		@Test public void test_6837() { testInvalid("{!int, {int, any}}","(!any | {any, any})"); }
		@Test public void test_6838() { testInvalid("{!int, {int, any}}","(!int | {any, any})"); }
		@Test public void test_6839() { testInvalid("{!int, {int, any}}","({any, int} | {any, any})"); }
		@Test public void test_6840() { testInvalid("{!int, {int, any}}","((int | any) | {any, any})"); }
		@Test public void test_6841() { testInvalid("{!int, {int, any}}","((any & any) | {any, any})"); }
		@Test public void test_6842() { testInvalid("{!int, {int, any}}","((any & int) | {any, any})"); }
		@Test public void test_6843() { testInvalid("{!int, {int, any}}","(!int | {int, any})"); }
		@Test public void test_6844() { testInvalid("{!int, {int, any}}","({any, int} | {int, any})"); }
		@Test public void test_6845() { testInvalid("{!int, {int, any}}","((any | any) | {int, any})"); }
		@Test public void test_6846() { testInvalid("{!int, {int, any}}","((int | any) | {int, any})"); }
		@Test public void test_6847() { testInvalid("{!int, {int, any}}","((any | int) | {int, any})"); }
		@Test public void test_6848() { testInvalid("{!int, {int, any}}","((int & any) | {int, any})"); }
		@Test public void test_6849() { testInvalid("{!int, {int, any}}","({any} | {any, int})"); }
		@Test public void test_6850() { testInvalid("{!int, {int, any}}","(!int | {any, int})"); }
		@Test public void test_6851() { testInvalid("{!int, {int, any}}","({any, int} | {any, int})"); }
		@Test public void test_6852() { testInvalid("{!int, {int, any}}","((any | any) | {any, int})"); }
		@Test public void test_6853() { testInvalid("{!int, {int, any}}","((any | int) | {any, int})"); }
		@Test public void test_6854() { testInvalid("{!int, {int, any}}","((int | int) | {any, int})"); }
		@Test public void test_6855() { testInvalid("{!int, {int, any}}","((int & any) | {any, int})"); }
		@Test public void test_6856() { testInvalid("{!int, {int, any}}","(!any | {int, int})"); }
		@Test public void test_6857() { testInvalid("{!int, {int, any}}","(!int | {int, int})"); }
		@Test public void test_6858() { testInvalid("{!int, {int, any}}","({any, any} | {int, int})"); }
		@Test public void test_6859() { testInvalid("{!int, {int, any}}","({any, int} | {int, int})"); }
		@Test public void test_6860() { testInvalid("{!int, {int, any}}","((any | any) | {int, int})"); }
		@Test public void test_6861() { testInvalid("{!int, {int, any}}","((int | int) | {int, int})"); }
		@Test public void test_6862() { testInvalid("{!int, {int, any}}","((int & any) | {int, int})"); }
		@Test public void test_6863() { testInvalid("{!int, {int, any}}","((any & int) | {int, int})"); }
		@Test public void test_6864() { testInvalid("{!int, {int, any}}","((int & int) | {int, int})"); }
		@Test public void test_6865() { testInvalid("{!int, {int, any}}","({any} | (any | any))"); }
		@Test public void test_6866() { testInvalid("{!int, {int, any}}","(!any | (any | any))"); }
		@Test public void test_6867() { testInvalid("{!int, {int, any}}","({any, any} | (any | any))"); }
		@Test public void test_6868() { testInvalid("{!int, {int, any}}","({any, int} | (any | any))"); }
		@Test public void test_6869() { testInvalid("{!int, {int, any}}","({int, int} | (any | any))"); }
		@Test public void test_6870() { testInvalid("{!int, {int, any}}","((int | any) | (any | any))"); }
		@Test public void test_6871() { testInvalid("{!int, {int, any}}","((any | int) | (any | any))"); }
		@Test public void test_6872() { testInvalid("{!int, {int, any}}","((any & int) | (any | any))"); }
		@Test public void test_6873() { testInvalid("{!int, {int, any}}","((int & int) | (any | any))"); }
		@Test public void test_6874() { testInvalid("{!int, {int, any}}","({any} | (int | any))"); }
		@Test public void test_6875() { testInvalid("{!int, {int, any}}","(!int | (int | any))"); }
		@Test public void test_6876() { testInvalid("{!int, {int, any}}","({int, any} | (int | any))"); }
		@Test public void test_6877() { testInvalid("{!int, {int, any}}","({any, int} | (int | any))"); }
		@Test public void test_6878() { testInvalid("{!int, {int, any}}","((int & any) | (int | any))"); }
		@Test public void test_6879() { testInvalid("{!int, {int, any}}","((any & int) | (int | any))"); }
		@Test public void test_6880() { testInvalid("{!int, {int, any}}","({any} | (any | int))"); }
		@Test public void test_6881() { testInvalid("{!int, {int, any}}","({int} | (any | int))"); }
		@Test public void test_6882() { testInvalid("{!int, {int, any}}","(!any | (any | int))"); }
		@Test public void test_6883() { testInvalid("{!int, {int, any}}","(!int | (any | int))"); }
		@Test public void test_6884() { testInvalid("{!int, {int, any}}","({any, int} | (any | int))"); }
		@Test public void test_6885() { testInvalid("{!int, {int, any}}","({int, int} | (any | int))"); }
		@Test public void test_6886() { testInvalid("{!int, {int, any}}","((int | any) | (any | int))"); }
		@Test public void test_6887() { testInvalid("{!int, {int, any}}","((any | int) | (any | int))"); }
		@Test public void test_6888() { testInvalid("{!int, {int, any}}","((int | int) | (any | int))"); }
		@Test public void test_6889() { testInvalid("{!int, {int, any}}","((any & any) | (any | int))"); }
		@Test public void test_6890() { testInvalid("{!int, {int, any}}","({int} | (int | int))"); }
		@Test public void test_6891() { testInvalid("{!int, {int, any}}","(!any | (int | int))"); }
		@Test public void test_6892() { testInvalid("{!int, {int, any}}","(!int | (int | int))"); }
		@Test public void test_6893() { testInvalid("{!int, {int, any}}","({int, any} | (int | int))"); }
		@Test public void test_6894() { testInvalid("{!int, {int, any}}","({any, int} | (int | int))"); }
		@Test public void test_6895() { testInvalid("{!int, {int, any}}","((any | int) | (int | int))"); }
		@Test public void test_6896() { testInvalid("{!int, {int, any}}","((int | int) | (int | int))"); }
		@Test public void test_6897() { testInvalid("{!int, {int, any}}","((any & any) | (int | int))"); }
		@Test public void test_6898() { testInvalid("{!int, {int, any}}","((int & any) | (int | int))"); }
		@Test public void test_6899() { testInvalid("{!int, {int, any}}","((int & int) | (int | int))"); }
		@Test public void test_6900() { testInvalid("{!int, {int, any}}","(!any | (any & any))"); }
		@Test public void test_6901() { testInvalid("{!int, {int, any}}","(!int | (any & any))"); }
		@Test public void test_6902() { testInvalid("{!int, {int, any}}","({any, any} | (any & any))"); }
		@Test public void test_6903() { testInvalid("{!int, {int, any}}","({int, any} | (any & any))"); }
		@Test public void test_6904() { testInvalid("{!int, {int, any}}","({any, int} | (any & any))"); }
		@Test public void test_6905() { testInvalid("{!int, {int, any}}","({int, int} | (any & any))"); }
		@Test public void test_6906() { testInvalid("{!int, {int, any}}","((int | any) | (any & any))"); }
		@Test public void test_6907() { testInvalid("{!int, {int, any}}","((int | int) | (any & any))"); }
		@Test public void test_6908() { testInvalid("{!int, {int, any}}","((int & any) | (any & any))"); }
		@Test public void test_6909() { testInvalid("{!int, {int, any}}","((any & int) | (any & any))"); }
		@Test public void test_6910() { testInvalid("{!int, {int, any}}","((int & int) | (any & any))"); }
		@Test public void test_6911() { testInvalid("{!int, {int, any}}","({any} | (int & any))"); }
		@Test public void test_6912() { testInvalid("{{int, any}, {int, any}}","{int}"); }
		@Test public void test_6913() { testInvalid("{{int, any}, {int, any}}","{any, any}"); }
		@Test public void test_6914() { testInvalid("{{int, any}, {int, any}}","{int, int}"); }
		@Test public void test_6915() { testInvalid("{{int, any}, {int, any}}","(any | int)"); }
		@Test public void test_6916() { testInvalid("{{int, any}, {int, any}}","(int & any)"); }
		@Test public void test_6917() { testInvalid("{{int, any}, {int, any}}","{{any}}"); }
		@Test public void test_6918() { testInvalid("{{int, any}, {int, any}}","{{int, any}}"); }
		@Test public void test_6919() { testInvalid("{{int, any}, {int, any}}","{{int, int}}"); }
		@Test public void test_6920() { testInvalid("{{int, any}, {int, any}}","{(any | int)}"); }
		@Test public void test_6921() { testInvalid("{{int, any}, {int, any}}","!{int, any}"); }
		@Test public void test_6922() { testInvalid("{{int, any}, {int, any}}","!{int, int}"); }
		@Test public void test_6923() { testValid("{{int, any}, {int, any}}","!(any | any)"); }
		@Test public void test_6924() { testValid("{{int, any}, {int, any}}","!(any & any)"); }
		@Test public void test_6925() { testInvalid("{{int, any}, {int, any}}","!(int & int)"); }
		@Test public void test_6926() { testInvalid("{{int, any}, {int, any}}","{{int}, {any}}"); }
		@Test public void test_6927() { testInvalid("{{int, any}, {int, any}}","{!int, {any}}"); }
		@Test public void test_6928() { testInvalid("{{int, any}, {int, any}}","{{int, int}, {any}}"); }
		@Test public void test_6929() { testInvalid("{{int, any}, {int, any}}","{(any | int), {any}}"); }
		@Test public void test_6930() { testInvalid("{{int, any}, {int, any}}","{!int, {int}}"); }
		@Test public void test_6931() { testInvalid("{{int, any}, {int, any}}","{{any, any}, {int}}"); }
		@Test public void test_6932() { testInvalid("{{int, any}, {int, any}}","{(any | any), {int}}"); }
		@Test public void test_6933() { testInvalid("{{int, any}, {int, any}}","{(any & any), {int}}"); }
		@Test public void test_6934() { testInvalid("{{int, any}, {int, any}}","{(any & int), {int}}"); }
		@Test public void test_6935() { testInvalid("{{int, any}, {int, any}}","{{any, any}, !int}"); }
		@Test public void test_6936() { testInvalid("{{int, any}, {int, any}}","{{any, int}, !int}"); }
		@Test public void test_6937() { testInvalid("{{int, any}, {int, any}}","{(any | any), !int}"); }
		@Test public void test_6938() { testInvalid("{{int, any}, {int, any}}","{(int | any), !int}"); }
		@Test public void test_6939() { testInvalid("{{int, any}, {int, any}}","{(any & any), !int}"); }
		@Test public void test_6940() { testInvalid("{{int, any}, {int, any}}","{(int & any), !int}"); }
		@Test public void test_6941() { testInvalid("{{int, any}, {int, any}}","{(int & int), !int}"); }
		@Test public void test_6942() { testInvalid("{{int, any}, {int, any}}","{{any}, {any, any}}"); }
		@Test public void test_6943() { testInvalid("{{int, any}, {int, any}}","{{int}, {any, any}}"); }
		@Test public void test_6944() { testInvalid("{{int, any}, {int, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_6945() { testInvalid("{{int, any}, {int, any}}","{(any | any), {any, any}}"); }
		@Test public void test_6946() { testInvalid("{{int, any}, {int, any}}","{(any | int), {any, any}}"); }
		@Test public void test_6947() { testInvalid("{{int, any}, {int, any}}","{!int, {int, any}}"); }
		@Test public void test_6948() { testValid("{{int, any}, {int, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_6949() { testInvalid("{{int, any}, {int, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_6950() { testInvalid("{{int, any}, {int, any}}","{(any & int), {int, any}}"); }
		@Test public void test_6951() { testInvalid("{{int, any}, {int, any}}","{{any}, {any, int}}"); }
		@Test public void test_6952() { testInvalid("{{int, any}, {int, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_6953() { testInvalid("{{int, any}, {int, any}}","{(int | int), {any, int}}"); }
		@Test public void test_6954() { testInvalid("{{int, any}, {int, any}}","{(any & int), {any, int}}"); }
		@Test public void test_6955() { testInvalid("{{int, any}, {int, any}}","{!int, {int, int}}"); }
		@Test public void test_6956() { testValid("{{int, any}, {int, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_6957() { testInvalid("{{int, any}, {int, any}}","{(any | any), {int, int}}"); }
		@Test public void test_6958() { testInvalid("{{int, any}, {int, any}}","{(int | any), {int, int}}"); }
		@Test public void test_6959() { testInvalid("{{int, any}, {int, any}}","{(int & any), {int, int}}"); }
		@Test public void test_6960() { testInvalid("{{int, any}, {int, any}}","{{int}, (any | any)}"); }
		@Test public void test_6961() { testInvalid("{{int, any}, {int, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_6962() { testInvalid("{{int, any}, {int, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_6963() { testInvalid("{{int, any}, {int, any}}","{(any | any), (any | any)}"); }
		@Test public void test_6964() { testInvalid("{{int, any}, {int, any}}","{(int | any), (any | any)}"); }
		@Test public void test_6965() { testInvalid("{{int, any}, {int, any}}","{(int & int), (any | any)}"); }
		@Test public void test_6966() { testInvalid("{{int, any}, {int, any}}","{!int, (int | any)}"); }
		@Test public void test_6967() { testInvalid("{{int, any}, {int, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_6968() { testInvalid("{{int, any}, {int, any}}","{(any | any), (int | any)}"); }
		@Test public void test_6969() { testInvalid("{{int, any}, {int, any}}","{(int | int), (int | any)}"); }
		@Test public void test_6970() { testInvalid("{{int, any}, {int, any}}","{{any}, (any | int)}"); }
		@Test public void test_6971() { testInvalid("{{int, any}, {int, any}}","{!int, (any | int)}"); }
		@Test public void test_6972() { testInvalid("{{int, any}, {int, any}}","{(any | any), (any | int)}"); }
		@Test public void test_6973() { testInvalid("{{int, any}, {int, any}}","{(any | int), (any | int)}"); }
		@Test public void test_6974() { testInvalid("{{int, any}, {int, any}}","{(any & int), (any | int)}"); }
		@Test public void test_6975() { testInvalid("{{int, any}, {int, any}}","{{int}, (int | int)}"); }
		@Test public void test_6976() { testInvalid("{{int, any}, {int, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_6977() { testInvalid("{{int, any}, {int, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_6978() { testInvalid("{{int, any}, {int, any}}","{{int}, (any & any)}"); }
		@Test public void test_6979() { testInvalid("{{int, any}, {int, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_6980() { testInvalid("{{int, any}, {int, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_6981() { testInvalid("{{int, any}, {int, any}}","{(int | any), (any & any)}"); }
		@Test public void test_6982() { testInvalid("{{int, any}, {int, any}}","{(any & any), (any & any)}"); }
		@Test public void test_6983() { testInvalid("{{int, any}, {int, any}}","{(int & any), (any & any)}"); }
		@Test public void test_6984() { testInvalid("{{int, any}, {int, any}}","{{any}, (int & any)}"); }
		@Test public void test_6985() { testInvalid("{{int, any}, {int, any}}","{{int}, (int & any)}"); }
		@Test public void test_6986() { testInvalid("{{int, any}, {int, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_6987() { testInvalid("{{int, any}, {int, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_6988() { testInvalid("{{int, any}, {int, any}}","{(any | int), (int & any)}"); }
		@Test public void test_6989() { testInvalid("{{int, any}, {int, any}}","{(any & any), (int & any)}"); }
		@Test public void test_6990() { testInvalid("{{int, any}, {int, any}}","{(int & any), (int & any)}"); }
		@Test public void test_6991() { testInvalid("{{int, any}, {int, any}}","{(int & int), (int & any)}"); }
		@Test public void test_6992() { testInvalid("{{int, any}, {int, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_6993() { testInvalid("{{int, any}, {int, any}}","{(any & any), (any & int)}"); }
		@Test public void test_6994() { testInvalid("{{int, any}, {int, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_6995() { testInvalid("{{int, any}, {int, any}}","{(int | int), (int & int)}"); }
		@Test public void test_6996() { testInvalid("{{int, any}, {int, any}}","{(any & any), (int & int)}"); }
		@Test public void test_6997() { testInvalid("{{int, any}, {int, any}}","{(any & int), (int & int)}"); }
		@Test public void test_6998() { testInvalid("{{int, any}, {int, any}}","{(int & int), (int & int)}"); }
		@Test public void test_6999() { testInvalid("{{int, any}, {int, any}}","(!int | {any})"); }
		@Test public void test_7000() { testInvalid("{{int, any}, {int, any}}","({any, any} | {any})"); }
		@Test public void test_7001() { testInvalid("{{int, any}, {int, any}}","((any | any) | {any})"); }
		@Test public void test_7002() { testInvalid("{{int, any}, {int, any}}","((int | any) | {any})"); }
		@Test public void test_7003() { testInvalid("{{int, any}, {int, any}}","((any & any) | {any})"); }
		@Test public void test_7004() { testInvalid("{{int, any}, {int, any}}","((int & any) | {any})"); }
		@Test public void test_7005() { testInvalid("{{int, any}, {int, any}}","((any & int) | {any})"); }
		@Test public void test_7006() { testInvalid("{{int, any}, {int, any}}","({int} | {int})"); }
		@Test public void test_7007() { testInvalid("{{int, any}, {int, any}}","(!any | {int})"); }
		@Test public void test_7008() { testInvalid("{{int, any}, {int, any}}","(!int | {int})"); }
		@Test public void test_7009() { testInvalid("{{int, any}, {int, any}}","({any, int} | {int})"); }
		@Test public void test_7010() { testInvalid("{{int, any}, {int, any}}","((int & any) | {int})"); }
		@Test public void test_7011() { testInvalid("{{int, any}, {int, any}}","((any & int) | {int})"); }
		@Test public void test_7012() { testInvalid("{{int, any}, {int, any}}","((int & int) | {int})"); }
		@Test public void test_7013() { testInvalid("{{int, any}, {int, any}}","({any} | !any)"); }
		@Test public void test_7014() { testInvalid("{{int, any}, {int, any}}","({int} | !any)"); }
		@Test public void test_7015() { testInvalid("{{int, any}, {int, any}}","({any, any} | !any)"); }
		@Test public void test_7016() { testInvalid("{{int, any}, {int, any}}","({int, int} | !any)"); }
		@Test public void test_7017() { testInvalid("{{int, any}, {int, any}}","((any | any) | !any)"); }
		@Test public void test_7018() { testInvalid("{{int, any}, {int, any}}","((int | any) | !any)"); }
		@Test public void test_7019() { testInvalid("{{int, any}, {int, any}}","((int | int) | !any)"); }
		@Test public void test_7020() { testInvalid("{{int, any}, {int, any}}","((int & int) | !any)"); }
		@Test public void test_7021() { testInvalid("{{int, any}, {int, any}}","(!int | !int)"); }
		@Test public void test_7022() { testInvalid("{{int, any}, {int, any}}","({any, any} | !int)"); }
		@Test public void test_7023() { testInvalid("{{int, any}, {int, any}}","({int, int} | !int)"); }
		@Test public void test_7024() { testInvalid("{{int, any}, {int, any}}","((int | any) | !int)"); }
		@Test public void test_7025() { testInvalid("{{int, any}, {int, any}}","((any | int) | !int)"); }
		@Test public void test_7026() { testInvalid("{{int, any}, {int, any}}","((any & int) | !int)"); }
		@Test public void test_7027() { testInvalid("{{int, any}, {int, any}}","((int & int) | !int)"); }
		@Test public void test_7028() { testInvalid("{{int, any}, {int, any}}","({int} | {any, any})"); }
		@Test public void test_7029() { testInvalid("{{int, any}, {int, any}}","(!any | {any, any})"); }
		@Test public void test_7030() { testInvalid("{{int, any}, {int, any}}","(!int | {any, any})"); }
		@Test public void test_7031() { testInvalid("{{int, any}, {int, any}}","({any, int} | {any, any})"); }
		@Test public void test_7032() { testInvalid("{{int, any}, {int, any}}","((int | any) | {any, any})"); }
		@Test public void test_7033() { testInvalid("{{int, any}, {int, any}}","((any & any) | {any, any})"); }
		@Test public void test_7034() { testInvalid("{{int, any}, {int, any}}","((any & int) | {any, any})"); }
		@Test public void test_7035() { testInvalid("{{int, any}, {int, any}}","(!int | {int, any})"); }
		@Test public void test_7036() { testInvalid("{{int, any}, {int, any}}","({any, int} | {int, any})"); }
		@Test public void test_7037() { testInvalid("{{int, any}, {int, any}}","((any | any) | {int, any})"); }
		@Test public void test_7038() { testInvalid("{{int, any}, {int, any}}","((int | any) | {int, any})"); }
		@Test public void test_7039() { testInvalid("{{int, any}, {int, any}}","((any | int) | {int, any})"); }
		@Test public void test_7040() { testInvalid("{{int, any}, {int, any}}","((int & any) | {int, any})"); }
		@Test public void test_7041() { testInvalid("{{int, any}, {int, any}}","({any} | {any, int})"); }
		@Test public void test_7042() { testInvalid("{{int, any}, {int, any}}","(!int | {any, int})"); }
		@Test public void test_7043() { testInvalid("{{int, any}, {int, any}}","({any, int} | {any, int})"); }
		@Test public void test_7044() { testInvalid("{{int, any}, {int, any}}","((any | any) | {any, int})"); }
		@Test public void test_7045() { testInvalid("{{int, any}, {int, any}}","((any | int) | {any, int})"); }
		@Test public void test_7046() { testInvalid("{{int, any}, {int, any}}","((int | int) | {any, int})"); }
		@Test public void test_7047() { testInvalid("{{int, any}, {int, any}}","((int & any) | {any, int})"); }
		@Test public void test_7048() { testInvalid("{{int, any}, {int, any}}","(!any | {int, int})"); }
		@Test public void test_7049() { testInvalid("{{int, any}, {int, any}}","(!int | {int, int})"); }
		@Test public void test_7050() { testInvalid("{{int, any}, {int, any}}","({any, any} | {int, int})"); }
		@Test public void test_7051() { testInvalid("{{int, any}, {int, any}}","({any, int} | {int, int})"); }
		@Test public void test_7052() { testInvalid("{{int, any}, {int, any}}","((any | any) | {int, int})"); }
		@Test public void test_7053() { testInvalid("{{int, any}, {int, any}}","((int | int) | {int, int})"); }
		@Test public void test_7054() { testInvalid("{{int, any}, {int, any}}","((int & any) | {int, int})"); }
		@Test public void test_7055() { testInvalid("{{int, any}, {int, any}}","((any & int) | {int, int})"); }
		@Test public void test_7056() { testInvalid("{{int, any}, {int, any}}","((int & int) | {int, int})"); }
		@Test public void test_7057() { testInvalid("{{int, any}, {int, any}}","({any} | (any | any))"); }
		@Test public void test_7058() { testInvalid("{{int, any}, {int, any}}","(!any | (any | any))"); }
		@Test public void test_7059() { testInvalid("{{int, any}, {int, any}}","({any, any} | (any | any))"); }
		@Test public void test_7060() { testInvalid("{{int, any}, {int, any}}","({any, int} | (any | any))"); }
		@Test public void test_7061() { testInvalid("{{int, any}, {int, any}}","({int, int} | (any | any))"); }
		@Test public void test_7062() { testInvalid("{{int, any}, {int, any}}","((int | any) | (any | any))"); }
		@Test public void test_7063() { testInvalid("{{int, any}, {int, any}}","((any | int) | (any | any))"); }
		@Test public void test_7064() { testInvalid("{{int, any}, {int, any}}","((any & int) | (any | any))"); }
		@Test public void test_7065() { testInvalid("{{int, any}, {int, any}}","((int & int) | (any | any))"); }
		@Test public void test_7066() { testInvalid("{{int, any}, {int, any}}","({any} | (int | any))"); }
		@Test public void test_7067() { testInvalid("{{int, any}, {int, any}}","(!int | (int | any))"); }
		@Test public void test_7068() { testInvalid("{{int, any}, {int, any}}","({int, any} | (int | any))"); }
		@Test public void test_7069() { testInvalid("{{int, any}, {int, any}}","({any, int} | (int | any))"); }
		@Test public void test_7070() { testInvalid("{{int, any}, {int, any}}","((int & any) | (int | any))"); }
		@Test public void test_7071() { testInvalid("{{int, any}, {int, any}}","((any & int) | (int | any))"); }
		@Test public void test_7072() { testInvalid("{{int, any}, {int, any}}","({any} | (any | int))"); }
		@Test public void test_7073() { testInvalid("{{int, any}, {int, any}}","({int} | (any | int))"); }
		@Test public void test_7074() { testInvalid("{{int, any}, {int, any}}","(!any | (any | int))"); }
		@Test public void test_7075() { testInvalid("{{int, any}, {int, any}}","(!int | (any | int))"); }
		@Test public void test_7076() { testInvalid("{{int, any}, {int, any}}","({any, int} | (any | int))"); }
		@Test public void test_7077() { testInvalid("{{int, any}, {int, any}}","({int, int} | (any | int))"); }
		@Test public void test_7078() { testInvalid("{{int, any}, {int, any}}","((int | any) | (any | int))"); }
		@Test public void test_7079() { testInvalid("{{int, any}, {int, any}}","((any | int) | (any | int))"); }
		@Test public void test_7080() { testInvalid("{{int, any}, {int, any}}","((int | int) | (any | int))"); }
		@Test public void test_7081() { testInvalid("{{int, any}, {int, any}}","((any & any) | (any | int))"); }
		@Test public void test_7082() { testInvalid("{{int, any}, {int, any}}","({int} | (int | int))"); }
		@Test public void test_7083() { testInvalid("{{int, any}, {int, any}}","(!any | (int | int))"); }
		@Test public void test_7084() { testInvalid("{{int, any}, {int, any}}","(!int | (int | int))"); }
		@Test public void test_7085() { testInvalid("{{int, any}, {int, any}}","({int, any} | (int | int))"); }
		@Test public void test_7086() { testInvalid("{{int, any}, {int, any}}","({any, int} | (int | int))"); }
		@Test public void test_7087() { testInvalid("{{int, any}, {int, any}}","((any | int) | (int | int))"); }
		@Test public void test_7088() { testInvalid("{{int, any}, {int, any}}","((int | int) | (int | int))"); }
		@Test public void test_7089() { testInvalid("{{int, any}, {int, any}}","((any & any) | (int | int))"); }
		@Test public void test_7090() { testInvalid("{{int, any}, {int, any}}","((int & any) | (int | int))"); }
		@Test public void test_7091() { testInvalid("{{int, any}, {int, any}}","((int & int) | (int | int))"); }
		@Test public void test_7092() { testInvalid("{{int, any}, {int, any}}","(!any | (any & any))"); }
		@Test public void test_7093() { testInvalid("{{int, any}, {int, any}}","(!int | (any & any))"); }
		@Test public void test_7094() { testInvalid("{{int, any}, {int, any}}","({any, any} | (any & any))"); }
		@Test public void test_7095() { testInvalid("{{int, any}, {int, any}}","({int, any} | (any & any))"); }
		@Test public void test_7096() { testInvalid("{{int, any}, {int, any}}","({any, int} | (any & any))"); }
		@Test public void test_7097() { testInvalid("{{int, any}, {int, any}}","({int, int} | (any & any))"); }
		@Test public void test_7098() { testInvalid("{{int, any}, {int, any}}","((int | any) | (any & any))"); }
		@Test public void test_7099() { testInvalid("{{int, any}, {int, any}}","((int | int) | (any & any))"); }
		@Test public void test_7100() { testInvalid("{{int, any}, {int, any}}","((int & any) | (any & any))"); }
		@Test public void test_7101() { testInvalid("{{int, any}, {int, any}}","((any & int) | (any & any))"); }
		@Test public void test_7102() { testInvalid("{{int, any}, {int, any}}","((int & int) | (any & any))"); }
		@Test public void test_7103() { testInvalid("{{int, any}, {int, any}}","({any} | (int & any))"); }
		@Test public void test_7104() { testInvalid("{{any, int}, {int, any}}","{int}"); }
		@Test public void test_7105() { testInvalid("{{any, int}, {int, any}}","{any, any}"); }
		@Test public void test_7106() { testInvalid("{{any, int}, {int, any}}","{int, int}"); }
		@Test public void test_7107() { testInvalid("{{any, int}, {int, any}}","(any | int)"); }
		@Test public void test_7108() { testInvalid("{{any, int}, {int, any}}","(int & any)"); }
		@Test public void test_7109() { testInvalid("{{any, int}, {int, any}}","{{any}}"); }
		@Test public void test_7110() { testInvalid("{{any, int}, {int, any}}","{{int, any}}"); }
		@Test public void test_7111() { testInvalid("{{any, int}, {int, any}}","{{int, int}}"); }
		@Test public void test_7112() { testInvalid("{{any, int}, {int, any}}","{(any | int)}"); }
		@Test public void test_7113() { testInvalid("{{any, int}, {int, any}}","!{int, any}"); }
		@Test public void test_7114() { testInvalid("{{any, int}, {int, any}}","!{int, int}"); }
		@Test public void test_7115() { testValid("{{any, int}, {int, any}}","!(any | any)"); }
		@Test public void test_7116() { testValid("{{any, int}, {int, any}}","!(any & any)"); }
		@Test public void test_7117() { testInvalid("{{any, int}, {int, any}}","!(int & int)"); }
		@Test public void test_7118() { testInvalid("{{any, int}, {int, any}}","{{int}, {any}}"); }
		@Test public void test_7119() { testInvalid("{{any, int}, {int, any}}","{!int, {any}}"); }
		@Test public void test_7120() { testInvalid("{{any, int}, {int, any}}","{{int, int}, {any}}"); }
		@Test public void test_7121() { testInvalid("{{any, int}, {int, any}}","{(any | int), {any}}"); }
		@Test public void test_7122() { testInvalid("{{any, int}, {int, any}}","{!int, {int}}"); }
		@Test public void test_7123() { testInvalid("{{any, int}, {int, any}}","{{any, any}, {int}}"); }
		@Test public void test_7124() { testInvalid("{{any, int}, {int, any}}","{(any | any), {int}}"); }
		@Test public void test_7125() { testInvalid("{{any, int}, {int, any}}","{(any & any), {int}}"); }
		@Test public void test_7126() { testInvalid("{{any, int}, {int, any}}","{(any & int), {int}}"); }
		@Test public void test_7127() { testInvalid("{{any, int}, {int, any}}","{{any, any}, !int}"); }
		@Test public void test_7128() { testInvalid("{{any, int}, {int, any}}","{{any, int}, !int}"); }
		@Test public void test_7129() { testInvalid("{{any, int}, {int, any}}","{(any | any), !int}"); }
		@Test public void test_7130() { testInvalid("{{any, int}, {int, any}}","{(int | any), !int}"); }
		@Test public void test_7131() { testInvalid("{{any, int}, {int, any}}","{(any & any), !int}"); }
		@Test public void test_7132() { testInvalid("{{any, int}, {int, any}}","{(int & any), !int}"); }
		@Test public void test_7133() { testInvalid("{{any, int}, {int, any}}","{(int & int), !int}"); }
		@Test public void test_7134() { testInvalid("{{any, int}, {int, any}}","{{any}, {any, any}}"); }
		@Test public void test_7135() { testInvalid("{{any, int}, {int, any}}","{{int}, {any, any}}"); }
		@Test public void test_7136() { testInvalid("{{any, int}, {int, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_7137() { testInvalid("{{any, int}, {int, any}}","{(any | any), {any, any}}"); }
		@Test public void test_7138() { testInvalid("{{any, int}, {int, any}}","{(any | int), {any, any}}"); }
		@Test public void test_7139() { testInvalid("{{any, int}, {int, any}}","{!int, {int, any}}"); }
		@Test public void test_7140() { testInvalid("{{any, int}, {int, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_7141() { testValid("{{any, int}, {int, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_7142() { testInvalid("{{any, int}, {int, any}}","{(any & int), {int, any}}"); }
		@Test public void test_7143() { testInvalid("{{any, int}, {int, any}}","{{any}, {any, int}}"); }
		@Test public void test_7144() { testInvalid("{{any, int}, {int, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_7145() { testInvalid("{{any, int}, {int, any}}","{(int | int), {any, int}}"); }
		@Test public void test_7146() { testInvalid("{{any, int}, {int, any}}","{(any & int), {any, int}}"); }
		@Test public void test_7147() { testInvalid("{{any, int}, {int, any}}","{!int, {int, int}}"); }
		@Test public void test_7148() { testValid("{{any, int}, {int, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_7149() { testInvalid("{{any, int}, {int, any}}","{(any | any), {int, int}}"); }
		@Test public void test_7150() { testInvalid("{{any, int}, {int, any}}","{(int | any), {int, int}}"); }
		@Test public void test_7151() { testInvalid("{{any, int}, {int, any}}","{(int & any), {int, int}}"); }
		@Test public void test_7152() { testInvalid("{{any, int}, {int, any}}","{{int}, (any | any)}"); }
		@Test public void test_7153() { testInvalid("{{any, int}, {int, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_7154() { testInvalid("{{any, int}, {int, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_7155() { testInvalid("{{any, int}, {int, any}}","{(any | any), (any | any)}"); }
		@Test public void test_7156() { testInvalid("{{any, int}, {int, any}}","{(int | any), (any | any)}"); }
		@Test public void test_7157() { testInvalid("{{any, int}, {int, any}}","{(int & int), (any | any)}"); }
		@Test public void test_7158() { testInvalid("{{any, int}, {int, any}}","{!int, (int | any)}"); }
		@Test public void test_7159() { testInvalid("{{any, int}, {int, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_7160() { testInvalid("{{any, int}, {int, any}}","{(any | any), (int | any)}"); }
		@Test public void test_7161() { testInvalid("{{any, int}, {int, any}}","{(int | int), (int | any)}"); }
		@Test public void test_7162() { testInvalid("{{any, int}, {int, any}}","{{any}, (any | int)}"); }
		@Test public void test_7163() { testInvalid("{{any, int}, {int, any}}","{!int, (any | int)}"); }
		@Test public void test_7164() { testInvalid("{{any, int}, {int, any}}","{(any | any), (any | int)}"); }
		@Test public void test_7165() { testInvalid("{{any, int}, {int, any}}","{(any | int), (any | int)}"); }
		@Test public void test_7166() { testInvalid("{{any, int}, {int, any}}","{(any & int), (any | int)}"); }
		@Test public void test_7167() { testInvalid("{{any, int}, {int, any}}","{{int}, (int | int)}"); }
		@Test public void test_7168() { testInvalid("{{any, int}, {int, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_7169() { testInvalid("{{any, int}, {int, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_7170() { testInvalid("{{any, int}, {int, any}}","{{int}, (any & any)}"); }
		@Test public void test_7171() { testInvalid("{{any, int}, {int, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_7172() { testInvalid("{{any, int}, {int, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_7173() { testInvalid("{{any, int}, {int, any}}","{(int | any), (any & any)}"); }
		@Test public void test_7174() { testInvalid("{{any, int}, {int, any}}","{(any & any), (any & any)}"); }
		@Test public void test_7175() { testInvalid("{{any, int}, {int, any}}","{(int & any), (any & any)}"); }
		@Test public void test_7176() { testInvalid("{{any, int}, {int, any}}","{{any}, (int & any)}"); }
		@Test public void test_7177() { testInvalid("{{any, int}, {int, any}}","{{int}, (int & any)}"); }
		@Test public void test_7178() { testInvalid("{{any, int}, {int, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_7179() { testInvalid("{{any, int}, {int, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_7180() { testInvalid("{{any, int}, {int, any}}","{(any | int), (int & any)}"); }
		@Test public void test_7181() { testInvalid("{{any, int}, {int, any}}","{(any & any), (int & any)}"); }
		@Test public void test_7182() { testInvalid("{{any, int}, {int, any}}","{(int & any), (int & any)}"); }
		@Test public void test_7183() { testInvalid("{{any, int}, {int, any}}","{(int & int), (int & any)}"); }
		@Test public void test_7184() { testInvalid("{{any, int}, {int, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_7185() { testInvalid("{{any, int}, {int, any}}","{(any & any), (any & int)}"); }
		@Test public void test_7186() { testInvalid("{{any, int}, {int, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_7187() { testInvalid("{{any, int}, {int, any}}","{(int | int), (int & int)}"); }
		@Test public void test_7188() { testInvalid("{{any, int}, {int, any}}","{(any & any), (int & int)}"); }
		@Test public void test_7189() { testInvalid("{{any, int}, {int, any}}","{(any & int), (int & int)}"); }
		@Test public void test_7190() { testInvalid("{{any, int}, {int, any}}","{(int & int), (int & int)}"); }
		@Test public void test_7191() { testInvalid("{{any, int}, {int, any}}","(!int | {any})"); }
		@Test public void test_7192() { testInvalid("{{any, int}, {int, any}}","({any, any} | {any})"); }
		@Test public void test_7193() { testInvalid("{{any, int}, {int, any}}","((any | any) | {any})"); }
		@Test public void test_7194() { testInvalid("{{any, int}, {int, any}}","((int | any) | {any})"); }
		@Test public void test_7195() { testInvalid("{{any, int}, {int, any}}","((any & any) | {any})"); }
		@Test public void test_7196() { testInvalid("{{any, int}, {int, any}}","((int & any) | {any})"); }
		@Test public void test_7197() { testInvalid("{{any, int}, {int, any}}","((any & int) | {any})"); }
		@Test public void test_7198() { testInvalid("{{any, int}, {int, any}}","({int} | {int})"); }
		@Test public void test_7199() { testInvalid("{{any, int}, {int, any}}","(!any | {int})"); }
		@Test public void test_7200() { testInvalid("{{any, int}, {int, any}}","(!int | {int})"); }
		@Test public void test_7201() { testInvalid("{{any, int}, {int, any}}","({any, int} | {int})"); }
		@Test public void test_7202() { testInvalid("{{any, int}, {int, any}}","((int & any) | {int})"); }
		@Test public void test_7203() { testInvalid("{{any, int}, {int, any}}","((any & int) | {int})"); }
		@Test public void test_7204() { testInvalid("{{any, int}, {int, any}}","((int & int) | {int})"); }
		@Test public void test_7205() { testInvalid("{{any, int}, {int, any}}","({any} | !any)"); }
		@Test public void test_7206() { testInvalid("{{any, int}, {int, any}}","({int} | !any)"); }
		@Test public void test_7207() { testInvalid("{{any, int}, {int, any}}","({any, any} | !any)"); }
		@Test public void test_7208() { testInvalid("{{any, int}, {int, any}}","({int, int} | !any)"); }
		@Test public void test_7209() { testInvalid("{{any, int}, {int, any}}","((any | any) | !any)"); }
		@Test public void test_7210() { testInvalid("{{any, int}, {int, any}}","((int | any) | !any)"); }
		@Test public void test_7211() { testInvalid("{{any, int}, {int, any}}","((int | int) | !any)"); }
		@Test public void test_7212() { testInvalid("{{any, int}, {int, any}}","((int & int) | !any)"); }
		@Test public void test_7213() { testInvalid("{{any, int}, {int, any}}","(!int | !int)"); }
		@Test public void test_7214() { testInvalid("{{any, int}, {int, any}}","({any, any} | !int)"); }
		@Test public void test_7215() { testInvalid("{{any, int}, {int, any}}","({int, int} | !int)"); }
		@Test public void test_7216() { testInvalid("{{any, int}, {int, any}}","((int | any) | !int)"); }
		@Test public void test_7217() { testInvalid("{{any, int}, {int, any}}","((any | int) | !int)"); }
		@Test public void test_7218() { testInvalid("{{any, int}, {int, any}}","((any & int) | !int)"); }
		@Test public void test_7219() { testInvalid("{{any, int}, {int, any}}","((int & int) | !int)"); }
		@Test public void test_7220() { testInvalid("{{any, int}, {int, any}}","({int} | {any, any})"); }
		@Test public void test_7221() { testInvalid("{{any, int}, {int, any}}","(!any | {any, any})"); }
		@Test public void test_7222() { testInvalid("{{any, int}, {int, any}}","(!int | {any, any})"); }
		@Test public void test_7223() { testInvalid("{{any, int}, {int, any}}","({any, int} | {any, any})"); }
		@Test public void test_7224() { testInvalid("{{any, int}, {int, any}}","((int | any) | {any, any})"); }
		@Test public void test_7225() { testInvalid("{{any, int}, {int, any}}","((any & any) | {any, any})"); }
		@Test public void test_7226() { testInvalid("{{any, int}, {int, any}}","((any & int) | {any, any})"); }
		@Test public void test_7227() { testInvalid("{{any, int}, {int, any}}","(!int | {int, any})"); }
		@Test public void test_7228() { testInvalid("{{any, int}, {int, any}}","({any, int} | {int, any})"); }
		@Test public void test_7229() { testInvalid("{{any, int}, {int, any}}","((any | any) | {int, any})"); }
		@Test public void test_7230() { testInvalid("{{any, int}, {int, any}}","((int | any) | {int, any})"); }
		@Test public void test_7231() { testInvalid("{{any, int}, {int, any}}","((any | int) | {int, any})"); }
		@Test public void test_7232() { testInvalid("{{any, int}, {int, any}}","((int & any) | {int, any})"); }
		@Test public void test_7233() { testInvalid("{{any, int}, {int, any}}","({any} | {any, int})"); }
		@Test public void test_7234() { testInvalid("{{any, int}, {int, any}}","(!int | {any, int})"); }
		@Test public void test_7235() { testInvalid("{{any, int}, {int, any}}","({any, int} | {any, int})"); }
		@Test public void test_7236() { testInvalid("{{any, int}, {int, any}}","((any | any) | {any, int})"); }
		@Test public void test_7237() { testInvalid("{{any, int}, {int, any}}","((any | int) | {any, int})"); }
		@Test public void test_7238() { testInvalid("{{any, int}, {int, any}}","((int | int) | {any, int})"); }
		@Test public void test_7239() { testInvalid("{{any, int}, {int, any}}","((int & any) | {any, int})"); }
		@Test public void test_7240() { testInvalid("{{any, int}, {int, any}}","(!any | {int, int})"); }
		@Test public void test_7241() { testInvalid("{{any, int}, {int, any}}","(!int | {int, int})"); }
		@Test public void test_7242() { testInvalid("{{any, int}, {int, any}}","({any, any} | {int, int})"); }
		@Test public void test_7243() { testInvalid("{{any, int}, {int, any}}","({any, int} | {int, int})"); }
		@Test public void test_7244() { testInvalid("{{any, int}, {int, any}}","((any | any) | {int, int})"); }
		@Test public void test_7245() { testInvalid("{{any, int}, {int, any}}","((int | int) | {int, int})"); }
		@Test public void test_7246() { testInvalid("{{any, int}, {int, any}}","((int & any) | {int, int})"); }
		@Test public void test_7247() { testInvalid("{{any, int}, {int, any}}","((any & int) | {int, int})"); }
		@Test public void test_7248() { testInvalid("{{any, int}, {int, any}}","((int & int) | {int, int})"); }
		@Test public void test_7249() { testInvalid("{{any, int}, {int, any}}","({any} | (any | any))"); }
		@Test public void test_7250() { testInvalid("{{any, int}, {int, any}}","(!any | (any | any))"); }
		@Test public void test_7251() { testInvalid("{{any, int}, {int, any}}","({any, any} | (any | any))"); }
		@Test public void test_7252() { testInvalid("{{any, int}, {int, any}}","({any, int} | (any | any))"); }
		@Test public void test_7253() { testInvalid("{{any, int}, {int, any}}","({int, int} | (any | any))"); }
		@Test public void test_7254() { testInvalid("{{any, int}, {int, any}}","((int | any) | (any | any))"); }
		@Test public void test_7255() { testInvalid("{{any, int}, {int, any}}","((any | int) | (any | any))"); }
		@Test public void test_7256() { testInvalid("{{any, int}, {int, any}}","((any & int) | (any | any))"); }
		@Test public void test_7257() { testInvalid("{{any, int}, {int, any}}","((int & int) | (any | any))"); }
		@Test public void test_7258() { testInvalid("{{any, int}, {int, any}}","({any} | (int | any))"); }
		@Test public void test_7259() { testInvalid("{{any, int}, {int, any}}","(!int | (int | any))"); }
		@Test public void test_7260() { testInvalid("{{any, int}, {int, any}}","({int, any} | (int | any))"); }
		@Test public void test_7261() { testInvalid("{{any, int}, {int, any}}","({any, int} | (int | any))"); }
		@Test public void test_7262() { testInvalid("{{any, int}, {int, any}}","((int & any) | (int | any))"); }
		@Test public void test_7263() { testInvalid("{{any, int}, {int, any}}","((any & int) | (int | any))"); }
		@Test public void test_7264() { testInvalid("{{any, int}, {int, any}}","({any} | (any | int))"); }
		@Test public void test_7265() { testInvalid("{{any, int}, {int, any}}","({int} | (any | int))"); }
		@Test public void test_7266() { testInvalid("{{any, int}, {int, any}}","(!any | (any | int))"); }
		@Test public void test_7267() { testInvalid("{{any, int}, {int, any}}","(!int | (any | int))"); }
		@Test public void test_7268() { testInvalid("{{any, int}, {int, any}}","({any, int} | (any | int))"); }
		@Test public void test_7269() { testInvalid("{{any, int}, {int, any}}","({int, int} | (any | int))"); }
		@Test public void test_7270() { testInvalid("{{any, int}, {int, any}}","((int | any) | (any | int))"); }
		@Test public void test_7271() { testInvalid("{{any, int}, {int, any}}","((any | int) | (any | int))"); }
		@Test public void test_7272() { testInvalid("{{any, int}, {int, any}}","((int | int) | (any | int))"); }
		@Test public void test_7273() { testInvalid("{{any, int}, {int, any}}","((any & any) | (any | int))"); }
		@Test public void test_7274() { testInvalid("{{any, int}, {int, any}}","({int} | (int | int))"); }
		@Test public void test_7275() { testInvalid("{{any, int}, {int, any}}","(!any | (int | int))"); }
		@Test public void test_7276() { testInvalid("{{any, int}, {int, any}}","(!int | (int | int))"); }
		@Test public void test_7277() { testInvalid("{{any, int}, {int, any}}","({int, any} | (int | int))"); }
		@Test public void test_7278() { testInvalid("{{any, int}, {int, any}}","({any, int} | (int | int))"); }
		@Test public void test_7279() { testInvalid("{{any, int}, {int, any}}","((any | int) | (int | int))"); }
		@Test public void test_7280() { testInvalid("{{any, int}, {int, any}}","((int | int) | (int | int))"); }
		@Test public void test_7281() { testInvalid("{{any, int}, {int, any}}","((any & any) | (int | int))"); }
		@Test public void test_7282() { testInvalid("{{any, int}, {int, any}}","((int & any) | (int | int))"); }
		@Test public void test_7283() { testInvalid("{{any, int}, {int, any}}","((int & int) | (int | int))"); }
		@Test public void test_7284() { testInvalid("{{any, int}, {int, any}}","(!any | (any & any))"); }
		@Test public void test_7285() { testInvalid("{{any, int}, {int, any}}","(!int | (any & any))"); }
		@Test public void test_7286() { testInvalid("{{any, int}, {int, any}}","({any, any} | (any & any))"); }
		@Test public void test_7287() { testInvalid("{{any, int}, {int, any}}","({int, any} | (any & any))"); }
		@Test public void test_7288() { testInvalid("{{any, int}, {int, any}}","({any, int} | (any & any))"); }
		@Test public void test_7289() { testInvalid("{{any, int}, {int, any}}","({int, int} | (any & any))"); }
		@Test public void test_7290() { testInvalid("{{any, int}, {int, any}}","((int | any) | (any & any))"); }
		@Test public void test_7291() { testInvalid("{{any, int}, {int, any}}","((int | int) | (any & any))"); }
		@Test public void test_7292() { testInvalid("{{any, int}, {int, any}}","((int & any) | (any & any))"); }
		@Test public void test_7293() { testInvalid("{{any, int}, {int, any}}","((any & int) | (any & any))"); }
		@Test public void test_7294() { testInvalid("{{any, int}, {int, any}}","((int & int) | (any & any))"); }
		@Test public void test_7295() { testInvalid("{{any, int}, {int, any}}","({any} | (int & any))"); }
		@Test public void test_7296() { testInvalid("{(any & int), {int, any}}","{int}"); }
		@Test public void test_7297() { testInvalid("{(any & int), {int, any}}","{any, any}"); }
		@Test public void test_7298() { testInvalid("{(any & int), {int, any}}","{int, int}"); }
		@Test public void test_7299() { testInvalid("{(any & int), {int, any}}","(any | int)"); }
		@Test public void test_7300() { testInvalid("{(any & int), {int, any}}","(int & any)"); }
		@Test public void test_7301() { testInvalid("{(any & int), {int, any}}","{{any}}"); }
		@Test public void test_7302() { testInvalid("{(any & int), {int, any}}","{{int, any}}"); }
		@Test public void test_7303() { testInvalid("{(any & int), {int, any}}","{{int, int}}"); }
		@Test public void test_7304() { testInvalid("{(any & int), {int, any}}","{(any | int)}"); }
		@Test public void test_7305() { testInvalid("{(any & int), {int, any}}","!{int, any}"); }
		@Test public void test_7306() { testInvalid("{(any & int), {int, any}}","!{int, int}"); }
		@Test public void test_7307() { testValid("{(any & int), {int, any}}","!(any | any)"); }
		@Test public void test_7308() { testValid("{(any & int), {int, any}}","!(any & any)"); }
		@Test public void test_7309() { testInvalid("{(any & int), {int, any}}","!(int & int)"); }
		@Test public void test_7310() { testInvalid("{(any & int), {int, any}}","{{int}, {any}}"); }
		@Test public void test_7311() { testInvalid("{(any & int), {int, any}}","{!int, {any}}"); }
		@Test public void test_7312() { testInvalid("{(any & int), {int, any}}","{{int, int}, {any}}"); }
		@Test public void test_7313() { testInvalid("{(any & int), {int, any}}","{(any | int), {any}}"); }
		@Test public void test_7314() { testInvalid("{(any & int), {int, any}}","{!int, {int}}"); }
		@Test public void test_7315() { testInvalid("{(any & int), {int, any}}","{{any, any}, {int}}"); }
		@Test public void test_7316() { testInvalid("{(any & int), {int, any}}","{(any | any), {int}}"); }
		@Test public void test_7317() { testInvalid("{(any & int), {int, any}}","{(any & any), {int}}"); }
		@Test public void test_7318() { testInvalid("{(any & int), {int, any}}","{(any & int), {int}}"); }
		@Test public void test_7319() { testInvalid("{(any & int), {int, any}}","{{any, any}, !int}"); }
		@Test public void test_7320() { testInvalid("{(any & int), {int, any}}","{{any, int}, !int}"); }
		@Test public void test_7321() { testInvalid("{(any & int), {int, any}}","{(any | any), !int}"); }
		@Test public void test_7322() { testInvalid("{(any & int), {int, any}}","{(int | any), !int}"); }
		@Test public void test_7323() { testInvalid("{(any & int), {int, any}}","{(any & any), !int}"); }
		@Test public void test_7324() { testInvalid("{(any & int), {int, any}}","{(int & any), !int}"); }
		@Test public void test_7325() { testInvalid("{(any & int), {int, any}}","{(int & int), !int}"); }
		@Test public void test_7326() { testInvalid("{(any & int), {int, any}}","{{any}, {any, any}}"); }
		@Test public void test_7327() { testInvalid("{(any & int), {int, any}}","{{int}, {any, any}}"); }
		@Test public void test_7328() { testInvalid("{(any & int), {int, any}}","{{int, int}, {any, any}}"); }
		@Test public void test_7329() { testInvalid("{(any & int), {int, any}}","{(any | any), {any, any}}"); }
		@Test public void test_7330() { testInvalid("{(any & int), {int, any}}","{(any | int), {any, any}}"); }
		@Test public void test_7331() { testInvalid("{(any & int), {int, any}}","{!int, {int, any}}"); }
		@Test public void test_7332() { testInvalid("{(any & int), {int, any}}","{{int, any}, {int, any}}"); }
		@Test public void test_7333() { testInvalid("{(any & int), {int, any}}","{{any, int}, {int, any}}"); }
		@Test public void test_7334() { testValid("{(any & int), {int, any}}","{(any & int), {int, any}}"); }
		@Test public void test_7335() { testInvalid("{(any & int), {int, any}}","{{any}, {any, int}}"); }
		@Test public void test_7336() { testInvalid("{(any & int), {int, any}}","{{int, int}, {any, int}}"); }
		@Test public void test_7337() { testInvalid("{(any & int), {int, any}}","{(int | int), {any, int}}"); }
		@Test public void test_7338() { testInvalid("{(any & int), {int, any}}","{(any & int), {any, int}}"); }
		@Test public void test_7339() { testInvalid("{(any & int), {int, any}}","{!int, {int, int}}"); }
		@Test public void test_7340() { testInvalid("{(any & int), {int, any}}","{{int, int}, {int, int}}"); }
		@Test public void test_7341() { testInvalid("{(any & int), {int, any}}","{(any | any), {int, int}}"); }
		@Test public void test_7342() { testInvalid("{(any & int), {int, any}}","{(int | any), {int, int}}"); }
		@Test public void test_7343() { testValid("{(any & int), {int, any}}","{(int & any), {int, int}}"); }
		@Test public void test_7344() { testInvalid("{(any & int), {int, any}}","{{int}, (any | any)}"); }
		@Test public void test_7345() { testInvalid("{(any & int), {int, any}}","{{int, any}, (any | any)}"); }
		@Test public void test_7346() { testInvalid("{(any & int), {int, any}}","{{any, int}, (any | any)}"); }
		@Test public void test_7347() { testInvalid("{(any & int), {int, any}}","{(any | any), (any | any)}"); }
		@Test public void test_7348() { testInvalid("{(any & int), {int, any}}","{(int | any), (any | any)}"); }
		@Test public void test_7349() { testInvalid("{(any & int), {int, any}}","{(int & int), (any | any)}"); }
		@Test public void test_7350() { testInvalid("{(any & int), {int, any}}","{!int, (int | any)}"); }
		@Test public void test_7351() { testInvalid("{(any & int), {int, any}}","{{int, int}, (int | any)}"); }
		@Test public void test_7352() { testInvalid("{(any & int), {int, any}}","{(any | any), (int | any)}"); }
		@Test public void test_7353() { testInvalid("{(any & int), {int, any}}","{(int | int), (int | any)}"); }
		@Test public void test_7354() { testInvalid("{(any & int), {int, any}}","{{any}, (any | int)}"); }
		@Test public void test_7355() { testInvalid("{(any & int), {int, any}}","{!int, (any | int)}"); }
		@Test public void test_7356() { testInvalid("{(any & int), {int, any}}","{(any | any), (any | int)}"); }
		@Test public void test_7357() { testInvalid("{(any & int), {int, any}}","{(any | int), (any | int)}"); }
		@Test public void test_7358() { testInvalid("{(any & int), {int, any}}","{(any & int), (any | int)}"); }
		@Test public void test_7359() { testInvalid("{(any & int), {int, any}}","{{int}, (int | int)}"); }
		@Test public void test_7360() { testInvalid("{(any & int), {int, any}}","{{any, any}, (int | int)}"); }
		@Test public void test_7361() { testInvalid("{(any & int), {int, any}}","{{int, int}, (int | int)}"); }
		@Test public void test_7362() { testInvalid("{(any & int), {int, any}}","{{int}, (any & any)}"); }
		@Test public void test_7363() { testInvalid("{(any & int), {int, any}}","{{int, any}, (any & any)}"); }
		@Test public void test_7364() { testInvalid("{(any & int), {int, any}}","{{any, int}, (any & any)}"); }
		@Test public void test_7365() { testInvalid("{(any & int), {int, any}}","{(int | any), (any & any)}"); }
		@Test public void test_7366() { testInvalid("{(any & int), {int, any}}","{(any & any), (any & any)}"); }
		@Test public void test_7367() { testInvalid("{(any & int), {int, any}}","{(int & any), (any & any)}"); }
		@Test public void test_7368() { testInvalid("{(any & int), {int, any}}","{{any}, (int & any)}"); }
		@Test public void test_7369() { testInvalid("{(any & int), {int, any}}","{{int}, (int & any)}"); }
		@Test public void test_7370() { testInvalid("{(any & int), {int, any}}","{{any, any}, (int & any)}"); }
		@Test public void test_7371() { testInvalid("{(any & int), {int, any}}","{{int, any}, (int & any)}"); }
		@Test public void test_7372() { testInvalid("{(any & int), {int, any}}","{(any | int), (int & any)}"); }
		@Test public void test_7373() { testInvalid("{(any & int), {int, any}}","{(any & any), (int & any)}"); }
		@Test public void test_7374() { testInvalid("{(any & int), {int, any}}","{(int & any), (int & any)}"); }
		@Test public void test_7375() { testInvalid("{(any & int), {int, any}}","{(int & int), (int & any)}"); }
		@Test public void test_7376() { testInvalid("{(any & int), {int, any}}","{{int, any}, (any & int)}"); }
		@Test public void test_7377() { testInvalid("{(any & int), {int, any}}","{(any & any), (any & int)}"); }
		@Test public void test_7378() { testInvalid("{(any & int), {int, any}}","{{any, int}, (int & int)}"); }
		@Test public void test_7379() { testInvalid("{(any & int), {int, any}}","{(int | int), (int & int)}"); }
		@Test public void test_7380() { testInvalid("{(any & int), {int, any}}","{(any & any), (int & int)}"); }
		@Test public void test_7381() { testInvalid("{(any & int), {int, any}}","{(any & int), (int & int)}"); }
		@Test public void test_7382() { testInvalid("{(any & int), {int, any}}","{(int & int), (int & int)}"); }
		@Test public void test_7383() { testInvalid("{(any & int), {int, any}}","(!int | {any})"); }
		@Test public void test_7384() { testInvalid("{(any & int), {int, any}}","({any, any} | {any})"); }
		@Test public void test_7385() { testInvalid("{(any & int), {int, any}}","((any | any) | {any})"); }
		@Test public void test_7386() { testInvalid("{(any & int), {int, any}}","((int | any) | {any})"); }
		@Test public void test_7387() { testInvalid("{(any & int), {int, any}}","((any & any) | {any})"); }
		@Test public void test_7388() { testInvalid("{(any & int), {int, any}}","((int & any) | {any})"); }
		@Test public void test_7389() { testInvalid("{(any & int), {int, any}}","((any & int) | {any})"); }
		@Test public void test_7390() { testInvalid("{(any & int), {int, any}}","({int} | {int})"); }
		@Test public void test_7391() { testInvalid("{(any & int), {int, any}}","(!any | {int})"); }
		@Test public void test_7392() { testInvalid("{(any & int), {int, any}}","(!int | {int})"); }
		@Test public void test_7393() { testInvalid("{(any & int), {int, any}}","({any, int} | {int})"); }
		@Test public void test_7394() { testInvalid("{(any & int), {int, any}}","((int & any) | {int})"); }
		@Test public void test_7395() { testInvalid("{(any & int), {int, any}}","((any & int) | {int})"); }
		@Test public void test_7396() { testInvalid("{(any & int), {int, any}}","((int & int) | {int})"); }
		@Test public void test_7397() { testInvalid("{(any & int), {int, any}}","({any} | !any)"); }
		@Test public void test_7398() { testInvalid("{(any & int), {int, any}}","({int} | !any)"); }
		@Test public void test_7399() { testInvalid("{(any & int), {int, any}}","({any, any} | !any)"); }
		@Test public void test_7400() { testInvalid("{(any & int), {int, any}}","({int, int} | !any)"); }
		@Test public void test_7401() { testInvalid("{(any & int), {int, any}}","((any | any) | !any)"); }
		@Test public void test_7402() { testInvalid("{(any & int), {int, any}}","((int | any) | !any)"); }
		@Test public void test_7403() { testInvalid("{(any & int), {int, any}}","((int | int) | !any)"); }
		@Test public void test_7404() { testInvalid("{(any & int), {int, any}}","((int & int) | !any)"); }
		@Test public void test_7405() { testInvalid("{(any & int), {int, any}}","(!int | !int)"); }
		@Test public void test_7406() { testInvalid("{(any & int), {int, any}}","({any, any} | !int)"); }
		@Test public void test_7407() { testInvalid("{(any & int), {int, any}}","({int, int} | !int)"); }
		@Test public void test_7408() { testInvalid("{(any & int), {int, any}}","((int | any) | !int)"); }
		@Test public void test_7409() { testInvalid("{(any & int), {int, any}}","((any | int) | !int)"); }
		@Test public void test_7410() { testInvalid("{(any & int), {int, any}}","((any & int) | !int)"); }
		@Test public void test_7411() { testInvalid("{(any & int), {int, any}}","((int & int) | !int)"); }
		@Test public void test_7412() { testInvalid("{(any & int), {int, any}}","({int} | {any, any})"); }
		@Test public void test_7413() { testInvalid("{(any & int), {int, any}}","(!any | {any, any})"); }
		@Test public void test_7414() { testInvalid("{(any & int), {int, any}}","(!int | {any, any})"); }
		@Test public void test_7415() { testInvalid("{(any & int), {int, any}}","({any, int} | {any, any})"); }
		@Test public void test_7416() { testInvalid("{(any & int), {int, any}}","((int | any) | {any, any})"); }
		@Test public void test_7417() { testInvalid("{(any & int), {int, any}}","((any & any) | {any, any})"); }
		@Test public void test_7418() { testInvalid("{(any & int), {int, any}}","((any & int) | {any, any})"); }
		@Test public void test_7419() { testInvalid("{(any & int), {int, any}}","(!int | {int, any})"); }
		@Test public void test_7420() { testInvalid("{(any & int), {int, any}}","({any, int} | {int, any})"); }
		@Test public void test_7421() { testInvalid("{(any & int), {int, any}}","((any | any) | {int, any})"); }
		@Test public void test_7422() { testInvalid("{(any & int), {int, any}}","((int | any) | {int, any})"); }
		@Test public void test_7423() { testInvalid("{(any & int), {int, any}}","((any | int) | {int, any})"); }
		@Test public void test_7424() { testInvalid("{(any & int), {int, any}}","((int & any) | {int, any})"); }
		@Test public void test_7425() { testInvalid("{(any & int), {int, any}}","({any} | {any, int})"); }
		@Test public void test_7426() { testInvalid("{(any & int), {int, any}}","(!int | {any, int})"); }
		@Test public void test_7427() { testInvalid("{(any & int), {int, any}}","({any, int} | {any, int})"); }
		@Test public void test_7428() { testInvalid("{(any & int), {int, any}}","((any | any) | {any, int})"); }
		@Test public void test_7429() { testInvalid("{(any & int), {int, any}}","((any | int) | {any, int})"); }
		@Test public void test_7430() { testInvalid("{(any & int), {int, any}}","((int | int) | {any, int})"); }
		@Test public void test_7431() { testInvalid("{(any & int), {int, any}}","((int & any) | {any, int})"); }
		@Test public void test_7432() { testInvalid("{(any & int), {int, any}}","(!any | {int, int})"); }
		@Test public void test_7433() { testInvalid("{(any & int), {int, any}}","(!int | {int, int})"); }
		@Test public void test_7434() { testInvalid("{(any & int), {int, any}}","({any, any} | {int, int})"); }
		@Test public void test_7435() { testInvalid("{(any & int), {int, any}}","({any, int} | {int, int})"); }
		@Test public void test_7436() { testInvalid("{(any & int), {int, any}}","((any | any) | {int, int})"); }
		@Test public void test_7437() { testInvalid("{(any & int), {int, any}}","((int | int) | {int, int})"); }
		@Test public void test_7438() { testInvalid("{(any & int), {int, any}}","((int & any) | {int, int})"); }
		@Test public void test_7439() { testInvalid("{(any & int), {int, any}}","((any & int) | {int, int})"); }
		@Test public void test_7440() { testInvalid("{(any & int), {int, any}}","((int & int) | {int, int})"); }
		@Test public void test_7441() { testInvalid("{(any & int), {int, any}}","({any} | (any | any))"); }
		@Test public void test_7442() { testInvalid("{(any & int), {int, any}}","(!any | (any | any))"); }
		@Test public void test_7443() { testInvalid("{(any & int), {int, any}}","({any, any} | (any | any))"); }
		@Test public void test_7444() { testInvalid("{(any & int), {int, any}}","({any, int} | (any | any))"); }
		@Test public void test_7445() { testInvalid("{(any & int), {int, any}}","({int, int} | (any | any))"); }
		@Test public void test_7446() { testInvalid("{(any & int), {int, any}}","((int | any) | (any | any))"); }
		@Test public void test_7447() { testInvalid("{(any & int), {int, any}}","((any | int) | (any | any))"); }
		@Test public void test_7448() { testInvalid("{(any & int), {int, any}}","((any & int) | (any | any))"); }
		@Test public void test_7449() { testInvalid("{(any & int), {int, any}}","((int & int) | (any | any))"); }
		@Test public void test_7450() { testInvalid("{(any & int), {int, any}}","({any} | (int | any))"); }
		@Test public void test_7451() { testInvalid("{(any & int), {int, any}}","(!int | (int | any))"); }
		@Test public void test_7452() { testInvalid("{(any & int), {int, any}}","({int, any} | (int | any))"); }
		@Test public void test_7453() { testInvalid("{(any & int), {int, any}}","({any, int} | (int | any))"); }
		@Test public void test_7454() { testInvalid("{(any & int), {int, any}}","((int & any) | (int | any))"); }
		@Test public void test_7455() { testInvalid("{(any & int), {int, any}}","((any & int) | (int | any))"); }
		@Test public void test_7456() { testInvalid("{(any & int), {int, any}}","({any} | (any | int))"); }
		@Test public void test_7457() { testInvalid("{(any & int), {int, any}}","({int} | (any | int))"); }
		@Test public void test_7458() { testInvalid("{(any & int), {int, any}}","(!any | (any | int))"); }
		@Test public void test_7459() { testInvalid("{(any & int), {int, any}}","(!int | (any | int))"); }
		@Test public void test_7460() { testInvalid("{(any & int), {int, any}}","({any, int} | (any | int))"); }
		@Test public void test_7461() { testInvalid("{(any & int), {int, any}}","({int, int} | (any | int))"); }
		@Test public void test_7462() { testInvalid("{(any & int), {int, any}}","((int | any) | (any | int))"); }
		@Test public void test_7463() { testInvalid("{(any & int), {int, any}}","((any | int) | (any | int))"); }
		@Test public void test_7464() { testInvalid("{(any & int), {int, any}}","((int | int) | (any | int))"); }
		@Test public void test_7465() { testInvalid("{(any & int), {int, any}}","((any & any) | (any | int))"); }
		@Test public void test_7466() { testInvalid("{(any & int), {int, any}}","({int} | (int | int))"); }
		@Test public void test_7467() { testInvalid("{(any & int), {int, any}}","(!any | (int | int))"); }
		@Test public void test_7468() { testInvalid("{(any & int), {int, any}}","(!int | (int | int))"); }
		@Test public void test_7469() { testInvalid("{(any & int), {int, any}}","({int, any} | (int | int))"); }
		@Test public void test_7470() { testInvalid("{(any & int), {int, any}}","({any, int} | (int | int))"); }
		@Test public void test_7471() { testInvalid("{(any & int), {int, any}}","((any | int) | (int | int))"); }
		@Test public void test_7472() { testInvalid("{(any & int), {int, any}}","((int | int) | (int | int))"); }
		@Test public void test_7473() { testInvalid("{(any & int), {int, any}}","((any & any) | (int | int))"); }
		@Test public void test_7474() { testInvalid("{(any & int), {int, any}}","((int & any) | (int | int))"); }
		@Test public void test_7475() { testInvalid("{(any & int), {int, any}}","((int & int) | (int | int))"); }
		@Test public void test_7476() { testInvalid("{(any & int), {int, any}}","(!any | (any & any))"); }
		@Test public void test_7477() { testInvalid("{(any & int), {int, any}}","(!int | (any & any))"); }
		@Test public void test_7478() { testInvalid("{(any & int), {int, any}}","({any, any} | (any & any))"); }
		@Test public void test_7479() { testInvalid("{(any & int), {int, any}}","({int, any} | (any & any))"); }
		@Test public void test_7480() { testInvalid("{(any & int), {int, any}}","({any, int} | (any & any))"); }
		@Test public void test_7481() { testInvalid("{(any & int), {int, any}}","({int, int} | (any & any))"); }
		@Test public void test_7482() { testInvalid("{(any & int), {int, any}}","((int | any) | (any & any))"); }
		@Test public void test_7483() { testInvalid("{(any & int), {int, any}}","((int | int) | (any & any))"); }
		@Test public void test_7484() { testInvalid("{(any & int), {int, any}}","((int & any) | (any & any))"); }
		@Test public void test_7485() { testInvalid("{(any & int), {int, any}}","((any & int) | (any & any))"); }
		@Test public void test_7486() { testInvalid("{(any & int), {int, any}}","((int & int) | (any & any))"); }
		@Test public void test_7487() { testInvalid("{(any & int), {int, any}}","({any} | (int & any))"); }
		@Test public void test_7488() { testInvalid("{{any}, {any, int}}","{int}"); }
		@Test public void test_7489() { testInvalid("{{any}, {any, int}}","{any, any}"); }
		@Test public void test_7490() { testInvalid("{{any}, {any, int}}","{int, int}"); }
		@Test public void test_7491() { testInvalid("{{any}, {any, int}}","(any | int)"); }
		@Test public void test_7492() { testInvalid("{{any}, {any, int}}","(int & any)"); }
		@Test public void test_7493() { testInvalid("{{any}, {any, int}}","{{any}}"); }
		@Test public void test_7494() { testInvalid("{{any}, {any, int}}","{{int, any}}"); }
		@Test public void test_7495() { testInvalid("{{any}, {any, int}}","{{int, int}}"); }
		@Test public void test_7496() { testInvalid("{{any}, {any, int}}","{(any | int)}"); }
		@Test public void test_7497() { testInvalid("{{any}, {any, int}}","!{int, any}"); }
		@Test public void test_7498() { testInvalid("{{any}, {any, int}}","!{int, int}"); }
		@Test public void test_7499() { testValid("{{any}, {any, int}}","!(any | any)"); }
		@Test public void test_7500() { testValid("{{any}, {any, int}}","!(any & any)"); }
		@Test public void test_7501() { testInvalid("{{any}, {any, int}}","!(int & int)"); }
		@Test public void test_7502() { testInvalid("{{any}, {any, int}}","{{int}, {any}}"); }
		@Test public void test_7503() { testInvalid("{{any}, {any, int}}","{!int, {any}}"); }
		@Test public void test_7504() { testInvalid("{{any}, {any, int}}","{{int, int}, {any}}"); }
		@Test public void test_7505() { testInvalid("{{any}, {any, int}}","{(any | int), {any}}"); }
		@Test public void test_7506() { testInvalid("{{any}, {any, int}}","{!int, {int}}"); }
		@Test public void test_7507() { testInvalid("{{any}, {any, int}}","{{any, any}, {int}}"); }
		@Test public void test_7508() { testInvalid("{{any}, {any, int}}","{(any | any), {int}}"); }
		@Test public void test_7509() { testInvalid("{{any}, {any, int}}","{(any & any), {int}}"); }
		@Test public void test_7510() { testInvalid("{{any}, {any, int}}","{(any & int), {int}}"); }
		@Test public void test_7511() { testInvalid("{{any}, {any, int}}","{{any, any}, !int}"); }
		@Test public void test_7512() { testInvalid("{{any}, {any, int}}","{{any, int}, !int}"); }
		@Test public void test_7513() { testInvalid("{{any}, {any, int}}","{(any | any), !int}"); }
		@Test public void test_7514() { testInvalid("{{any}, {any, int}}","{(int | any), !int}"); }
		@Test public void test_7515() { testInvalid("{{any}, {any, int}}","{(any & any), !int}"); }
		@Test public void test_7516() { testInvalid("{{any}, {any, int}}","{(int & any), !int}"); }
		@Test public void test_7517() { testInvalid("{{any}, {any, int}}","{(int & int), !int}"); }
		@Test public void test_7518() { testInvalid("{{any}, {any, int}}","{{any}, {any, any}}"); }
		@Test public void test_7519() { testInvalid("{{any}, {any, int}}","{{int}, {any, any}}"); }
		@Test public void test_7520() { testInvalid("{{any}, {any, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_7521() { testInvalid("{{any}, {any, int}}","{(any | any), {any, any}}"); }
		@Test public void test_7522() { testInvalid("{{any}, {any, int}}","{(any | int), {any, any}}"); }
		@Test public void test_7523() { testInvalid("{{any}, {any, int}}","{!int, {int, any}}"); }
		@Test public void test_7524() { testInvalid("{{any}, {any, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_7525() { testInvalid("{{any}, {any, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_7526() { testInvalid("{{any}, {any, int}}","{(any & int), {int, any}}"); }
		@Test public void test_7527() { testValid("{{any}, {any, int}}","{{any}, {any, int}}"); }
		@Test public void test_7528() { testInvalid("{{any}, {any, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_7529() { testInvalid("{{any}, {any, int}}","{(int | int), {any, int}}"); }
		@Test public void test_7530() { testInvalid("{{any}, {any, int}}","{(any & int), {any, int}}"); }
		@Test public void test_7531() { testInvalid("{{any}, {any, int}}","{!int, {int, int}}"); }
		@Test public void test_7532() { testInvalid("{{any}, {any, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_7533() { testInvalid("{{any}, {any, int}}","{(any | any), {int, int}}"); }
		@Test public void test_7534() { testInvalid("{{any}, {any, int}}","{(int | any), {int, int}}"); }
		@Test public void test_7535() { testInvalid("{{any}, {any, int}}","{(int & any), {int, int}}"); }
		@Test public void test_7536() { testInvalid("{{any}, {any, int}}","{{int}, (any | any)}"); }
		@Test public void test_7537() { testInvalid("{{any}, {any, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_7538() { testInvalid("{{any}, {any, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_7539() { testInvalid("{{any}, {any, int}}","{(any | any), (any | any)}"); }
		@Test public void test_7540() { testInvalid("{{any}, {any, int}}","{(int | any), (any | any)}"); }
		@Test public void test_7541() { testInvalid("{{any}, {any, int}}","{(int & int), (any | any)}"); }
		@Test public void test_7542() { testInvalid("{{any}, {any, int}}","{!int, (int | any)}"); }
		@Test public void test_7543() { testInvalid("{{any}, {any, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_7544() { testInvalid("{{any}, {any, int}}","{(any | any), (int | any)}"); }
		@Test public void test_7545() { testInvalid("{{any}, {any, int}}","{(int | int), (int | any)}"); }
		@Test public void test_7546() { testInvalid("{{any}, {any, int}}","{{any}, (any | int)}"); }
		@Test public void test_7547() { testInvalid("{{any}, {any, int}}","{!int, (any | int)}"); }
		@Test public void test_7548() { testInvalid("{{any}, {any, int}}","{(any | any), (any | int)}"); }
		@Test public void test_7549() { testInvalid("{{any}, {any, int}}","{(any | int), (any | int)}"); }
		@Test public void test_7550() { testInvalid("{{any}, {any, int}}","{(any & int), (any | int)}"); }
		@Test public void test_7551() { testInvalid("{{any}, {any, int}}","{{int}, (int | int)}"); }
		@Test public void test_7552() { testInvalid("{{any}, {any, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_7553() { testInvalid("{{any}, {any, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_7554() { testInvalid("{{any}, {any, int}}","{{int}, (any & any)}"); }
		@Test public void test_7555() { testInvalid("{{any}, {any, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_7556() { testInvalid("{{any}, {any, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_7557() { testInvalid("{{any}, {any, int}}","{(int | any), (any & any)}"); }
		@Test public void test_7558() { testInvalid("{{any}, {any, int}}","{(any & any), (any & any)}"); }
		@Test public void test_7559() { testInvalid("{{any}, {any, int}}","{(int & any), (any & any)}"); }
		@Test public void test_7560() { testInvalid("{{any}, {any, int}}","{{any}, (int & any)}"); }
		@Test public void test_7561() { testInvalid("{{any}, {any, int}}","{{int}, (int & any)}"); }
		@Test public void test_7562() { testInvalid("{{any}, {any, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_7563() { testInvalid("{{any}, {any, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_7564() { testInvalid("{{any}, {any, int}}","{(any | int), (int & any)}"); }
		@Test public void test_7565() { testInvalid("{{any}, {any, int}}","{(any & any), (int & any)}"); }
		@Test public void test_7566() { testInvalid("{{any}, {any, int}}","{(int & any), (int & any)}"); }
		@Test public void test_7567() { testInvalid("{{any}, {any, int}}","{(int & int), (int & any)}"); }
		@Test public void test_7568() { testInvalid("{{any}, {any, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_7569() { testInvalid("{{any}, {any, int}}","{(any & any), (any & int)}"); }
		@Test public void test_7570() { testInvalid("{{any}, {any, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_7571() { testInvalid("{{any}, {any, int}}","{(int | int), (int & int)}"); }
		@Test public void test_7572() { testInvalid("{{any}, {any, int}}","{(any & any), (int & int)}"); }
		@Test public void test_7573() { testInvalid("{{any}, {any, int}}","{(any & int), (int & int)}"); }
		@Test public void test_7574() { testInvalid("{{any}, {any, int}}","{(int & int), (int & int)}"); }
		@Test public void test_7575() { testInvalid("{{any}, {any, int}}","(!int | {any})"); }
		@Test public void test_7576() { testInvalid("{{any}, {any, int}}","({any, any} | {any})"); }
		@Test public void test_7577() { testInvalid("{{any}, {any, int}}","((any | any) | {any})"); }
		@Test public void test_7578() { testInvalid("{{any}, {any, int}}","((int | any) | {any})"); }
		@Test public void test_7579() { testInvalid("{{any}, {any, int}}","((any & any) | {any})"); }
		@Test public void test_7580() { testInvalid("{{any}, {any, int}}","((int & any) | {any})"); }
		@Test public void test_7581() { testInvalid("{{any}, {any, int}}","((any & int) | {any})"); }
		@Test public void test_7582() { testInvalid("{{any}, {any, int}}","({int} | {int})"); }
		@Test public void test_7583() { testInvalid("{{any}, {any, int}}","(!any | {int})"); }
		@Test public void test_7584() { testInvalid("{{any}, {any, int}}","(!int | {int})"); }
		@Test public void test_7585() { testInvalid("{{any}, {any, int}}","({any, int} | {int})"); }
		@Test public void test_7586() { testInvalid("{{any}, {any, int}}","((int & any) | {int})"); }
		@Test public void test_7587() { testInvalid("{{any}, {any, int}}","((any & int) | {int})"); }
		@Test public void test_7588() { testInvalid("{{any}, {any, int}}","((int & int) | {int})"); }
		@Test public void test_7589() { testInvalid("{{any}, {any, int}}","({any} | !any)"); }
		@Test public void test_7590() { testInvalid("{{any}, {any, int}}","({int} | !any)"); }
		@Test public void test_7591() { testInvalid("{{any}, {any, int}}","({any, any} | !any)"); }
		@Test public void test_7592() { testInvalid("{{any}, {any, int}}","({int, int} | !any)"); }
		@Test public void test_7593() { testInvalid("{{any}, {any, int}}","((any | any) | !any)"); }
		@Test public void test_7594() { testInvalid("{{any}, {any, int}}","((int | any) | !any)"); }
		@Test public void test_7595() { testInvalid("{{any}, {any, int}}","((int | int) | !any)"); }
		@Test public void test_7596() { testInvalid("{{any}, {any, int}}","((int & int) | !any)"); }
		@Test public void test_7597() { testInvalid("{{any}, {any, int}}","(!int | !int)"); }
		@Test public void test_7598() { testInvalid("{{any}, {any, int}}","({any, any} | !int)"); }
		@Test public void test_7599() { testInvalid("{{any}, {any, int}}","({int, int} | !int)"); }
		@Test public void test_7600() { testInvalid("{{any}, {any, int}}","((int | any) | !int)"); }
		@Test public void test_7601() { testInvalid("{{any}, {any, int}}","((any | int) | !int)"); }
		@Test public void test_7602() { testInvalid("{{any}, {any, int}}","((any & int) | !int)"); }
		@Test public void test_7603() { testInvalid("{{any}, {any, int}}","((int & int) | !int)"); }
		@Test public void test_7604() { testInvalid("{{any}, {any, int}}","({int} | {any, any})"); }
		@Test public void test_7605() { testInvalid("{{any}, {any, int}}","(!any | {any, any})"); }
		@Test public void test_7606() { testInvalid("{{any}, {any, int}}","(!int | {any, any})"); }
		@Test public void test_7607() { testInvalid("{{any}, {any, int}}","({any, int} | {any, any})"); }
		@Test public void test_7608() { testInvalid("{{any}, {any, int}}","((int | any) | {any, any})"); }
		@Test public void test_7609() { testInvalid("{{any}, {any, int}}","((any & any) | {any, any})"); }
		@Test public void test_7610() { testInvalid("{{any}, {any, int}}","((any & int) | {any, any})"); }
		@Test public void test_7611() { testInvalid("{{any}, {any, int}}","(!int | {int, any})"); }
		@Test public void test_7612() { testInvalid("{{any}, {any, int}}","({any, int} | {int, any})"); }
		@Test public void test_7613() { testInvalid("{{any}, {any, int}}","((any | any) | {int, any})"); }
		@Test public void test_7614() { testInvalid("{{any}, {any, int}}","((int | any) | {int, any})"); }
		@Test public void test_7615() { testInvalid("{{any}, {any, int}}","((any | int) | {int, any})"); }
		@Test public void test_7616() { testInvalid("{{any}, {any, int}}","((int & any) | {int, any})"); }
		@Test public void test_7617() { testInvalid("{{any}, {any, int}}","({any} | {any, int})"); }
		@Test public void test_7618() { testInvalid("{{any}, {any, int}}","(!int | {any, int})"); }
		@Test public void test_7619() { testInvalid("{{any}, {any, int}}","({any, int} | {any, int})"); }
		@Test public void test_7620() { testInvalid("{{any}, {any, int}}","((any | any) | {any, int})"); }
		@Test public void test_7621() { testInvalid("{{any}, {any, int}}","((any | int) | {any, int})"); }
		@Test public void test_7622() { testInvalid("{{any}, {any, int}}","((int | int) | {any, int})"); }
		@Test public void test_7623() { testInvalid("{{any}, {any, int}}","((int & any) | {any, int})"); }
		@Test public void test_7624() { testInvalid("{{any}, {any, int}}","(!any | {int, int})"); }
		@Test public void test_7625() { testInvalid("{{any}, {any, int}}","(!int | {int, int})"); }
		@Test public void test_7626() { testInvalid("{{any}, {any, int}}","({any, any} | {int, int})"); }
		@Test public void test_7627() { testInvalid("{{any}, {any, int}}","({any, int} | {int, int})"); }
		@Test public void test_7628() { testInvalid("{{any}, {any, int}}","((any | any) | {int, int})"); }
		@Test public void test_7629() { testInvalid("{{any}, {any, int}}","((int | int) | {int, int})"); }
		@Test public void test_7630() { testInvalid("{{any}, {any, int}}","((int & any) | {int, int})"); }
		@Test public void test_7631() { testInvalid("{{any}, {any, int}}","((any & int) | {int, int})"); }
		@Test public void test_7632() { testInvalid("{{any}, {any, int}}","((int & int) | {int, int})"); }
		@Test public void test_7633() { testInvalid("{{any}, {any, int}}","({any} | (any | any))"); }
		@Test public void test_7634() { testInvalid("{{any}, {any, int}}","(!any | (any | any))"); }
		@Test public void test_7635() { testInvalid("{{any}, {any, int}}","({any, any} | (any | any))"); }
		@Test public void test_7636() { testInvalid("{{any}, {any, int}}","({any, int} | (any | any))"); }
		@Test public void test_7637() { testInvalid("{{any}, {any, int}}","({int, int} | (any | any))"); }
		@Test public void test_7638() { testInvalid("{{any}, {any, int}}","((int | any) | (any | any))"); }
		@Test public void test_7639() { testInvalid("{{any}, {any, int}}","((any | int) | (any | any))"); }
		@Test public void test_7640() { testInvalid("{{any}, {any, int}}","((any & int) | (any | any))"); }
		@Test public void test_7641() { testInvalid("{{any}, {any, int}}","((int & int) | (any | any))"); }
		@Test public void test_7642() { testInvalid("{{any}, {any, int}}","({any} | (int | any))"); }
		@Test public void test_7643() { testInvalid("{{any}, {any, int}}","(!int | (int | any))"); }
		@Test public void test_7644() { testInvalid("{{any}, {any, int}}","({int, any} | (int | any))"); }
		@Test public void test_7645() { testInvalid("{{any}, {any, int}}","({any, int} | (int | any))"); }
		@Test public void test_7646() { testInvalid("{{any}, {any, int}}","((int & any) | (int | any))"); }
		@Test public void test_7647() { testInvalid("{{any}, {any, int}}","((any & int) | (int | any))"); }
		@Test public void test_7648() { testInvalid("{{any}, {any, int}}","({any} | (any | int))"); }
		@Test public void test_7649() { testInvalid("{{any}, {any, int}}","({int} | (any | int))"); }
		@Test public void test_7650() { testInvalid("{{any}, {any, int}}","(!any | (any | int))"); }
		@Test public void test_7651() { testInvalid("{{any}, {any, int}}","(!int | (any | int))"); }
		@Test public void test_7652() { testInvalid("{{any}, {any, int}}","({any, int} | (any | int))"); }
		@Test public void test_7653() { testInvalid("{{any}, {any, int}}","({int, int} | (any | int))"); }
		@Test public void test_7654() { testInvalid("{{any}, {any, int}}","((int | any) | (any | int))"); }
		@Test public void test_7655() { testInvalid("{{any}, {any, int}}","((any | int) | (any | int))"); }
		@Test public void test_7656() { testInvalid("{{any}, {any, int}}","((int | int) | (any | int))"); }
		@Test public void test_7657() { testInvalid("{{any}, {any, int}}","((any & any) | (any | int))"); }
		@Test public void test_7658() { testInvalid("{{any}, {any, int}}","({int} | (int | int))"); }
		@Test public void test_7659() { testInvalid("{{any}, {any, int}}","(!any | (int | int))"); }
		@Test public void test_7660() { testInvalid("{{any}, {any, int}}","(!int | (int | int))"); }
		@Test public void test_7661() { testInvalid("{{any}, {any, int}}","({int, any} | (int | int))"); }
		@Test public void test_7662() { testInvalid("{{any}, {any, int}}","({any, int} | (int | int))"); }
		@Test public void test_7663() { testInvalid("{{any}, {any, int}}","((any | int) | (int | int))"); }
		@Test public void test_7664() { testInvalid("{{any}, {any, int}}","((int | int) | (int | int))"); }
		@Test public void test_7665() { testInvalid("{{any}, {any, int}}","((any & any) | (int | int))"); }
		@Test public void test_7666() { testInvalid("{{any}, {any, int}}","((int & any) | (int | int))"); }
		@Test public void test_7667() { testInvalid("{{any}, {any, int}}","((int & int) | (int | int))"); }
		@Test public void test_7668() { testInvalid("{{any}, {any, int}}","(!any | (any & any))"); }
		@Test public void test_7669() { testInvalid("{{any}, {any, int}}","(!int | (any & any))"); }
		@Test public void test_7670() { testInvalid("{{any}, {any, int}}","({any, any} | (any & any))"); }
		@Test public void test_7671() { testInvalid("{{any}, {any, int}}","({int, any} | (any & any))"); }
		@Test public void test_7672() { testInvalid("{{any}, {any, int}}","({any, int} | (any & any))"); }
		@Test public void test_7673() { testInvalid("{{any}, {any, int}}","({int, int} | (any & any))"); }
		@Test public void test_7674() { testInvalid("{{any}, {any, int}}","((int | any) | (any & any))"); }
		@Test public void test_7675() { testInvalid("{{any}, {any, int}}","((int | int) | (any & any))"); }
		@Test public void test_7676() { testInvalid("{{any}, {any, int}}","((int & any) | (any & any))"); }
		@Test public void test_7677() { testInvalid("{{any}, {any, int}}","((any & int) | (any & any))"); }
		@Test public void test_7678() { testInvalid("{{any}, {any, int}}","((int & int) | (any & any))"); }
		@Test public void test_7679() { testInvalid("{{any}, {any, int}}","({any} | (int & any))"); }
		@Test public void test_7680() { testInvalid("{{int, int}, {any, int}}","{int}"); }
		@Test public void test_7681() { testInvalid("{{int, int}, {any, int}}","{any, any}"); }
		@Test public void test_7682() { testInvalid("{{int, int}, {any, int}}","{int, int}"); }
		@Test public void test_7683() { testInvalid("{{int, int}, {any, int}}","(any | int)"); }
		@Test public void test_7684() { testInvalid("{{int, int}, {any, int}}","(int & any)"); }
		@Test public void test_7685() { testInvalid("{{int, int}, {any, int}}","{{any}}"); }
		@Test public void test_7686() { testInvalid("{{int, int}, {any, int}}","{{int, any}}"); }
		@Test public void test_7687() { testInvalid("{{int, int}, {any, int}}","{{int, int}}"); }
		@Test public void test_7688() { testInvalid("{{int, int}, {any, int}}","{(any | int)}"); }
		@Test public void test_7689() { testInvalid("{{int, int}, {any, int}}","!{int, any}"); }
		@Test public void test_7690() { testInvalid("{{int, int}, {any, int}}","!{int, int}"); }
		@Test public void test_7691() { testValid("{{int, int}, {any, int}}","!(any | any)"); }
		@Test public void test_7692() { testValid("{{int, int}, {any, int}}","!(any & any)"); }
		@Test public void test_7693() { testInvalid("{{int, int}, {any, int}}","!(int & int)"); }
		@Test public void test_7694() { testInvalid("{{int, int}, {any, int}}","{{int}, {any}}"); }
		@Test public void test_7695() { testInvalid("{{int, int}, {any, int}}","{!int, {any}}"); }
		@Test public void test_7696() { testInvalid("{{int, int}, {any, int}}","{{int, int}, {any}}"); }
		@Test public void test_7697() { testInvalid("{{int, int}, {any, int}}","{(any | int), {any}}"); }
		@Test public void test_7698() { testInvalid("{{int, int}, {any, int}}","{!int, {int}}"); }
		@Test public void test_7699() { testInvalid("{{int, int}, {any, int}}","{{any, any}, {int}}"); }
		@Test public void test_7700() { testInvalid("{{int, int}, {any, int}}","{(any | any), {int}}"); }
		@Test public void test_7701() { testInvalid("{{int, int}, {any, int}}","{(any & any), {int}}"); }
		@Test public void test_7702() { testInvalid("{{int, int}, {any, int}}","{(any & int), {int}}"); }
		@Test public void test_7703() { testInvalid("{{int, int}, {any, int}}","{{any, any}, !int}"); }
		@Test public void test_7704() { testInvalid("{{int, int}, {any, int}}","{{any, int}, !int}"); }
		@Test public void test_7705() { testInvalid("{{int, int}, {any, int}}","{(any | any), !int}"); }
		@Test public void test_7706() { testInvalid("{{int, int}, {any, int}}","{(int | any), !int}"); }
		@Test public void test_7707() { testInvalid("{{int, int}, {any, int}}","{(any & any), !int}"); }
		@Test public void test_7708() { testInvalid("{{int, int}, {any, int}}","{(int & any), !int}"); }
		@Test public void test_7709() { testInvalid("{{int, int}, {any, int}}","{(int & int), !int}"); }
		@Test public void test_7710() { testInvalid("{{int, int}, {any, int}}","{{any}, {any, any}}"); }
		@Test public void test_7711() { testInvalid("{{int, int}, {any, int}}","{{int}, {any, any}}"); }
		@Test public void test_7712() { testInvalid("{{int, int}, {any, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_7713() { testInvalid("{{int, int}, {any, int}}","{(any | any), {any, any}}"); }
		@Test public void test_7714() { testInvalid("{{int, int}, {any, int}}","{(any | int), {any, any}}"); }
		@Test public void test_7715() { testInvalid("{{int, int}, {any, int}}","{!int, {int, any}}"); }
		@Test public void test_7716() { testInvalid("{{int, int}, {any, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_7717() { testInvalid("{{int, int}, {any, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_7718() { testInvalid("{{int, int}, {any, int}}","{(any & int), {int, any}}"); }
		@Test public void test_7719() { testInvalid("{{int, int}, {any, int}}","{{any}, {any, int}}"); }
		@Test public void test_7720() { testValid("{{int, int}, {any, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_7721() { testInvalid("{{int, int}, {any, int}}","{(int | int), {any, int}}"); }
		@Test public void test_7722() { testInvalid("{{int, int}, {any, int}}","{(any & int), {any, int}}"); }
		@Test public void test_7723() { testInvalid("{{int, int}, {any, int}}","{!int, {int, int}}"); }
		@Test public void test_7724() { testValid("{{int, int}, {any, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_7725() { testInvalid("{{int, int}, {any, int}}","{(any | any), {int, int}}"); }
		@Test public void test_7726() { testInvalid("{{int, int}, {any, int}}","{(int | any), {int, int}}"); }
		@Test public void test_7727() { testInvalid("{{int, int}, {any, int}}","{(int & any), {int, int}}"); }
		@Test public void test_7728() { testInvalid("{{int, int}, {any, int}}","{{int}, (any | any)}"); }
		@Test public void test_7729() { testInvalid("{{int, int}, {any, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_7730() { testInvalid("{{int, int}, {any, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_7731() { testInvalid("{{int, int}, {any, int}}","{(any | any), (any | any)}"); }
		@Test public void test_7732() { testInvalid("{{int, int}, {any, int}}","{(int | any), (any | any)}"); }
		@Test public void test_7733() { testInvalid("{{int, int}, {any, int}}","{(int & int), (any | any)}"); }
		@Test public void test_7734() { testInvalid("{{int, int}, {any, int}}","{!int, (int | any)}"); }
		@Test public void test_7735() { testInvalid("{{int, int}, {any, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_7736() { testInvalid("{{int, int}, {any, int}}","{(any | any), (int | any)}"); }
		@Test public void test_7737() { testInvalid("{{int, int}, {any, int}}","{(int | int), (int | any)}"); }
		@Test public void test_7738() { testInvalid("{{int, int}, {any, int}}","{{any}, (any | int)}"); }
		@Test public void test_7739() { testInvalid("{{int, int}, {any, int}}","{!int, (any | int)}"); }
		@Test public void test_7740() { testInvalid("{{int, int}, {any, int}}","{(any | any), (any | int)}"); }
		@Test public void test_7741() { testInvalid("{{int, int}, {any, int}}","{(any | int), (any | int)}"); }
		@Test public void test_7742() { testInvalid("{{int, int}, {any, int}}","{(any & int), (any | int)}"); }
		@Test public void test_7743() { testInvalid("{{int, int}, {any, int}}","{{int}, (int | int)}"); }
		@Test public void test_7744() { testInvalid("{{int, int}, {any, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_7745() { testInvalid("{{int, int}, {any, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_7746() { testInvalid("{{int, int}, {any, int}}","{{int}, (any & any)}"); }
		@Test public void test_7747() { testInvalid("{{int, int}, {any, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_7748() { testInvalid("{{int, int}, {any, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_7749() { testInvalid("{{int, int}, {any, int}}","{(int | any), (any & any)}"); }
		@Test public void test_7750() { testInvalid("{{int, int}, {any, int}}","{(any & any), (any & any)}"); }
		@Test public void test_7751() { testInvalid("{{int, int}, {any, int}}","{(int & any), (any & any)}"); }
		@Test public void test_7752() { testInvalid("{{int, int}, {any, int}}","{{any}, (int & any)}"); }
		@Test public void test_7753() { testInvalid("{{int, int}, {any, int}}","{{int}, (int & any)}"); }
		@Test public void test_7754() { testInvalid("{{int, int}, {any, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_7755() { testInvalid("{{int, int}, {any, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_7756() { testInvalid("{{int, int}, {any, int}}","{(any | int), (int & any)}"); }
		@Test public void test_7757() { testInvalid("{{int, int}, {any, int}}","{(any & any), (int & any)}"); }
		@Test public void test_7758() { testInvalid("{{int, int}, {any, int}}","{(int & any), (int & any)}"); }
		@Test public void test_7759() { testInvalid("{{int, int}, {any, int}}","{(int & int), (int & any)}"); }
		@Test public void test_7760() { testInvalid("{{int, int}, {any, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_7761() { testInvalid("{{int, int}, {any, int}}","{(any & any), (any & int)}"); }
		@Test public void test_7762() { testInvalid("{{int, int}, {any, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_7763() { testInvalid("{{int, int}, {any, int}}","{(int | int), (int & int)}"); }
		@Test public void test_7764() { testInvalid("{{int, int}, {any, int}}","{(any & any), (int & int)}"); }
		@Test public void test_7765() { testInvalid("{{int, int}, {any, int}}","{(any & int), (int & int)}"); }
		@Test public void test_7766() { testInvalid("{{int, int}, {any, int}}","{(int & int), (int & int)}"); }
		@Test public void test_7767() { testInvalid("{{int, int}, {any, int}}","(!int | {any})"); }
		@Test public void test_7768() { testInvalid("{{int, int}, {any, int}}","({any, any} | {any})"); }
		@Test public void test_7769() { testInvalid("{{int, int}, {any, int}}","((any | any) | {any})"); }
		@Test public void test_7770() { testInvalid("{{int, int}, {any, int}}","((int | any) | {any})"); }
		@Test public void test_7771() { testInvalid("{{int, int}, {any, int}}","((any & any) | {any})"); }
		@Test public void test_7772() { testInvalid("{{int, int}, {any, int}}","((int & any) | {any})"); }
		@Test public void test_7773() { testInvalid("{{int, int}, {any, int}}","((any & int) | {any})"); }
		@Test public void test_7774() { testInvalid("{{int, int}, {any, int}}","({int} | {int})"); }
		@Test public void test_7775() { testInvalid("{{int, int}, {any, int}}","(!any | {int})"); }
		@Test public void test_7776() { testInvalid("{{int, int}, {any, int}}","(!int | {int})"); }
		@Test public void test_7777() { testInvalid("{{int, int}, {any, int}}","({any, int} | {int})"); }
		@Test public void test_7778() { testInvalid("{{int, int}, {any, int}}","((int & any) | {int})"); }
		@Test public void test_7779() { testInvalid("{{int, int}, {any, int}}","((any & int) | {int})"); }
		@Test public void test_7780() { testInvalid("{{int, int}, {any, int}}","((int & int) | {int})"); }
		@Test public void test_7781() { testInvalid("{{int, int}, {any, int}}","({any} | !any)"); }
		@Test public void test_7782() { testInvalid("{{int, int}, {any, int}}","({int} | !any)"); }
		@Test public void test_7783() { testInvalid("{{int, int}, {any, int}}","({any, any} | !any)"); }
		@Test public void test_7784() { testInvalid("{{int, int}, {any, int}}","({int, int} | !any)"); }
		@Test public void test_7785() { testInvalid("{{int, int}, {any, int}}","((any | any) | !any)"); }
		@Test public void test_7786() { testInvalid("{{int, int}, {any, int}}","((int | any) | !any)"); }
		@Test public void test_7787() { testInvalid("{{int, int}, {any, int}}","((int | int) | !any)"); }
		@Test public void test_7788() { testInvalid("{{int, int}, {any, int}}","((int & int) | !any)"); }
		@Test public void test_7789() { testInvalid("{{int, int}, {any, int}}","(!int | !int)"); }
		@Test public void test_7790() { testInvalid("{{int, int}, {any, int}}","({any, any} | !int)"); }
		@Test public void test_7791() { testInvalid("{{int, int}, {any, int}}","({int, int} | !int)"); }
		@Test public void test_7792() { testInvalid("{{int, int}, {any, int}}","((int | any) | !int)"); }
		@Test public void test_7793() { testInvalid("{{int, int}, {any, int}}","((any | int) | !int)"); }
		@Test public void test_7794() { testInvalid("{{int, int}, {any, int}}","((any & int) | !int)"); }
		@Test public void test_7795() { testInvalid("{{int, int}, {any, int}}","((int & int) | !int)"); }
		@Test public void test_7796() { testInvalid("{{int, int}, {any, int}}","({int} | {any, any})"); }
		@Test public void test_7797() { testInvalid("{{int, int}, {any, int}}","(!any | {any, any})"); }
		@Test public void test_7798() { testInvalid("{{int, int}, {any, int}}","(!int | {any, any})"); }
		@Test public void test_7799() { testInvalid("{{int, int}, {any, int}}","({any, int} | {any, any})"); }
		@Test public void test_7800() { testInvalid("{{int, int}, {any, int}}","((int | any) | {any, any})"); }
		@Test public void test_7801() { testInvalid("{{int, int}, {any, int}}","((any & any) | {any, any})"); }
		@Test public void test_7802() { testInvalid("{{int, int}, {any, int}}","((any & int) | {any, any})"); }
		@Test public void test_7803() { testInvalid("{{int, int}, {any, int}}","(!int | {int, any})"); }
		@Test public void test_7804() { testInvalid("{{int, int}, {any, int}}","({any, int} | {int, any})"); }
		@Test public void test_7805() { testInvalid("{{int, int}, {any, int}}","((any | any) | {int, any})"); }
		@Test public void test_7806() { testInvalid("{{int, int}, {any, int}}","((int | any) | {int, any})"); }
		@Test public void test_7807() { testInvalid("{{int, int}, {any, int}}","((any | int) | {int, any})"); }
		@Test public void test_7808() { testInvalid("{{int, int}, {any, int}}","((int & any) | {int, any})"); }
		@Test public void test_7809() { testInvalid("{{int, int}, {any, int}}","({any} | {any, int})"); }
		@Test public void test_7810() { testInvalid("{{int, int}, {any, int}}","(!int | {any, int})"); }
		@Test public void test_7811() { testInvalid("{{int, int}, {any, int}}","({any, int} | {any, int})"); }
		@Test public void test_7812() { testInvalid("{{int, int}, {any, int}}","((any | any) | {any, int})"); }
		@Test public void test_7813() { testInvalid("{{int, int}, {any, int}}","((any | int) | {any, int})"); }
		@Test public void test_7814() { testInvalid("{{int, int}, {any, int}}","((int | int) | {any, int})"); }
		@Test public void test_7815() { testInvalid("{{int, int}, {any, int}}","((int & any) | {any, int})"); }
		@Test public void test_7816() { testInvalid("{{int, int}, {any, int}}","(!any | {int, int})"); }
		@Test public void test_7817() { testInvalid("{{int, int}, {any, int}}","(!int | {int, int})"); }
		@Test public void test_7818() { testInvalid("{{int, int}, {any, int}}","({any, any} | {int, int})"); }
		@Test public void test_7819() { testInvalid("{{int, int}, {any, int}}","({any, int} | {int, int})"); }
		@Test public void test_7820() { testInvalid("{{int, int}, {any, int}}","((any | any) | {int, int})"); }
		@Test public void test_7821() { testInvalid("{{int, int}, {any, int}}","((int | int) | {int, int})"); }
		@Test public void test_7822() { testInvalid("{{int, int}, {any, int}}","((int & any) | {int, int})"); }
		@Test public void test_7823() { testInvalid("{{int, int}, {any, int}}","((any & int) | {int, int})"); }
		@Test public void test_7824() { testInvalid("{{int, int}, {any, int}}","((int & int) | {int, int})"); }
		@Test public void test_7825() { testInvalid("{{int, int}, {any, int}}","({any} | (any | any))"); }
		@Test public void test_7826() { testInvalid("{{int, int}, {any, int}}","(!any | (any | any))"); }
		@Test public void test_7827() { testInvalid("{{int, int}, {any, int}}","({any, any} | (any | any))"); }
		@Test public void test_7828() { testInvalid("{{int, int}, {any, int}}","({any, int} | (any | any))"); }
		@Test public void test_7829() { testInvalid("{{int, int}, {any, int}}","({int, int} | (any | any))"); }
		@Test public void test_7830() { testInvalid("{{int, int}, {any, int}}","((int | any) | (any | any))"); }
		@Test public void test_7831() { testInvalid("{{int, int}, {any, int}}","((any | int) | (any | any))"); }
		@Test public void test_7832() { testInvalid("{{int, int}, {any, int}}","((any & int) | (any | any))"); }
		@Test public void test_7833() { testInvalid("{{int, int}, {any, int}}","((int & int) | (any | any))"); }
		@Test public void test_7834() { testInvalid("{{int, int}, {any, int}}","({any} | (int | any))"); }
		@Test public void test_7835() { testInvalid("{{int, int}, {any, int}}","(!int | (int | any))"); }
		@Test public void test_7836() { testInvalid("{{int, int}, {any, int}}","({int, any} | (int | any))"); }
		@Test public void test_7837() { testInvalid("{{int, int}, {any, int}}","({any, int} | (int | any))"); }
		@Test public void test_7838() { testInvalid("{{int, int}, {any, int}}","((int & any) | (int | any))"); }
		@Test public void test_7839() { testInvalid("{{int, int}, {any, int}}","((any & int) | (int | any))"); }
		@Test public void test_7840() { testInvalid("{{int, int}, {any, int}}","({any} | (any | int))"); }
		@Test public void test_7841() { testInvalid("{{int, int}, {any, int}}","({int} | (any | int))"); }
		@Test public void test_7842() { testInvalid("{{int, int}, {any, int}}","(!any | (any | int))"); }
		@Test public void test_7843() { testInvalid("{{int, int}, {any, int}}","(!int | (any | int))"); }
		@Test public void test_7844() { testInvalid("{{int, int}, {any, int}}","({any, int} | (any | int))"); }
		@Test public void test_7845() { testInvalid("{{int, int}, {any, int}}","({int, int} | (any | int))"); }
		@Test public void test_7846() { testInvalid("{{int, int}, {any, int}}","((int | any) | (any | int))"); }
		@Test public void test_7847() { testInvalid("{{int, int}, {any, int}}","((any | int) | (any | int))"); }
		@Test public void test_7848() { testInvalid("{{int, int}, {any, int}}","((int | int) | (any | int))"); }
		@Test public void test_7849() { testInvalid("{{int, int}, {any, int}}","((any & any) | (any | int))"); }
		@Test public void test_7850() { testInvalid("{{int, int}, {any, int}}","({int} | (int | int))"); }
		@Test public void test_7851() { testInvalid("{{int, int}, {any, int}}","(!any | (int | int))"); }
		@Test public void test_7852() { testInvalid("{{int, int}, {any, int}}","(!int | (int | int))"); }
		@Test public void test_7853() { testInvalid("{{int, int}, {any, int}}","({int, any} | (int | int))"); }
		@Test public void test_7854() { testInvalid("{{int, int}, {any, int}}","({any, int} | (int | int))"); }
		@Test public void test_7855() { testInvalid("{{int, int}, {any, int}}","((any | int) | (int | int))"); }
		@Test public void test_7856() { testInvalid("{{int, int}, {any, int}}","((int | int) | (int | int))"); }
		@Test public void test_7857() { testInvalid("{{int, int}, {any, int}}","((any & any) | (int | int))"); }
		@Test public void test_7858() { testInvalid("{{int, int}, {any, int}}","((int & any) | (int | int))"); }
		@Test public void test_7859() { testInvalid("{{int, int}, {any, int}}","((int & int) | (int | int))"); }
		@Test public void test_7860() { testInvalid("{{int, int}, {any, int}}","(!any | (any & any))"); }
		@Test public void test_7861() { testInvalid("{{int, int}, {any, int}}","(!int | (any & any))"); }
		@Test public void test_7862() { testInvalid("{{int, int}, {any, int}}","({any, any} | (any & any))"); }
		@Test public void test_7863() { testInvalid("{{int, int}, {any, int}}","({int, any} | (any & any))"); }
		@Test public void test_7864() { testInvalid("{{int, int}, {any, int}}","({any, int} | (any & any))"); }
		@Test public void test_7865() { testInvalid("{{int, int}, {any, int}}","({int, int} | (any & any))"); }
		@Test public void test_7866() { testInvalid("{{int, int}, {any, int}}","((int | any) | (any & any))"); }
		@Test public void test_7867() { testInvalid("{{int, int}, {any, int}}","((int | int) | (any & any))"); }
		@Test public void test_7868() { testInvalid("{{int, int}, {any, int}}","((int & any) | (any & any))"); }
		@Test public void test_7869() { testInvalid("{{int, int}, {any, int}}","((any & int) | (any & any))"); }
		@Test public void test_7870() { testInvalid("{{int, int}, {any, int}}","((int & int) | (any & any))"); }
		@Test public void test_7871() { testInvalid("{{int, int}, {any, int}}","({any} | (int & any))"); }
		@Test public void test_7872() { testInvalid("{(int | int), {any, int}}","{int}"); }
		@Test public void test_7873() { testInvalid("{(int | int), {any, int}}","{any, any}"); }
		@Test public void test_7874() { testInvalid("{(int | int), {any, int}}","{int, int}"); }
		@Test public void test_7875() { testInvalid("{(int | int), {any, int}}","(any | int)"); }
		@Test public void test_7876() { testInvalid("{(int | int), {any, int}}","(int & any)"); }
		@Test public void test_7877() { testInvalid("{(int | int), {any, int}}","{{any}}"); }
		@Test public void test_7878() { testInvalid("{(int | int), {any, int}}","{{int, any}}"); }
		@Test public void test_7879() { testInvalid("{(int | int), {any, int}}","{{int, int}}"); }
		@Test public void test_7880() { testInvalid("{(int | int), {any, int}}","{(any | int)}"); }
		@Test public void test_7881() { testInvalid("{(int | int), {any, int}}","!{int, any}"); }
		@Test public void test_7882() { testInvalid("{(int | int), {any, int}}","!{int, int}"); }
		@Test public void test_7883() { testValid("{(int | int), {any, int}}","!(any | any)"); }
		@Test public void test_7884() { testValid("{(int | int), {any, int}}","!(any & any)"); }
		@Test public void test_7885() { testInvalid("{(int | int), {any, int}}","!(int & int)"); }
		@Test public void test_7886() { testInvalid("{(int | int), {any, int}}","{{int}, {any}}"); }
		@Test public void test_7887() { testInvalid("{(int | int), {any, int}}","{!int, {any}}"); }
		@Test public void test_7888() { testInvalid("{(int | int), {any, int}}","{{int, int}, {any}}"); }
		@Test public void test_7889() { testInvalid("{(int | int), {any, int}}","{(any | int), {any}}"); }
		@Test public void test_7890() { testInvalid("{(int | int), {any, int}}","{!int, {int}}"); }
		@Test public void test_7891() { testInvalid("{(int | int), {any, int}}","{{any, any}, {int}}"); }
		@Test public void test_7892() { testInvalid("{(int | int), {any, int}}","{(any | any), {int}}"); }
		@Test public void test_7893() { testInvalid("{(int | int), {any, int}}","{(any & any), {int}}"); }
		@Test public void test_7894() { testInvalid("{(int | int), {any, int}}","{(any & int), {int}}"); }
		@Test public void test_7895() { testInvalid("{(int | int), {any, int}}","{{any, any}, !int}"); }
		@Test public void test_7896() { testInvalid("{(int | int), {any, int}}","{{any, int}, !int}"); }
		@Test public void test_7897() { testInvalid("{(int | int), {any, int}}","{(any | any), !int}"); }
		@Test public void test_7898() { testInvalid("{(int | int), {any, int}}","{(int | any), !int}"); }
		@Test public void test_7899() { testInvalid("{(int | int), {any, int}}","{(any & any), !int}"); }
		@Test public void test_7900() { testInvalid("{(int | int), {any, int}}","{(int & any), !int}"); }
		@Test public void test_7901() { testInvalid("{(int | int), {any, int}}","{(int & int), !int}"); }
		@Test public void test_7902() { testInvalid("{(int | int), {any, int}}","{{any}, {any, any}}"); }
		@Test public void test_7903() { testInvalid("{(int | int), {any, int}}","{{int}, {any, any}}"); }
		@Test public void test_7904() { testInvalid("{(int | int), {any, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_7905() { testInvalid("{(int | int), {any, int}}","{(any | any), {any, any}}"); }
		@Test public void test_7906() { testInvalid("{(int | int), {any, int}}","{(any | int), {any, any}}"); }
		@Test public void test_7907() { testInvalid("{(int | int), {any, int}}","{!int, {int, any}}"); }
		@Test public void test_7908() { testInvalid("{(int | int), {any, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_7909() { testInvalid("{(int | int), {any, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_7910() { testInvalid("{(int | int), {any, int}}","{(any & int), {int, any}}"); }
		@Test public void test_7911() { testInvalid("{(int | int), {any, int}}","{{any}, {any, int}}"); }
		@Test public void test_7912() { testInvalid("{(int | int), {any, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_7913() { testValid("{(int | int), {any, int}}","{(int | int), {any, int}}"); }
		@Test public void test_7914() { testValid("{(int | int), {any, int}}","{(any & int), {any, int}}"); }
		@Test public void test_7915() { testInvalid("{(int | int), {any, int}}","{!int, {int, int}}"); }
		@Test public void test_7916() { testInvalid("{(int | int), {any, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_7917() { testInvalid("{(int | int), {any, int}}","{(any | any), {int, int}}"); }
		@Test public void test_7918() { testInvalid("{(int | int), {any, int}}","{(int | any), {int, int}}"); }
		@Test public void test_7919() { testValid("{(int | int), {any, int}}","{(int & any), {int, int}}"); }
		@Test public void test_7920() { testInvalid("{(int | int), {any, int}}","{{int}, (any | any)}"); }
		@Test public void test_7921() { testInvalid("{(int | int), {any, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_7922() { testInvalid("{(int | int), {any, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_7923() { testInvalid("{(int | int), {any, int}}","{(any | any), (any | any)}"); }
		@Test public void test_7924() { testInvalid("{(int | int), {any, int}}","{(int | any), (any | any)}"); }
		@Test public void test_7925() { testInvalid("{(int | int), {any, int}}","{(int & int), (any | any)}"); }
		@Test public void test_7926() { testInvalid("{(int | int), {any, int}}","{!int, (int | any)}"); }
		@Test public void test_7927() { testInvalid("{(int | int), {any, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_7928() { testInvalid("{(int | int), {any, int}}","{(any | any), (int | any)}"); }
		@Test public void test_7929() { testInvalid("{(int | int), {any, int}}","{(int | int), (int | any)}"); }
		@Test public void test_7930() { testInvalid("{(int | int), {any, int}}","{{any}, (any | int)}"); }
		@Test public void test_7931() { testInvalid("{(int | int), {any, int}}","{!int, (any | int)}"); }
		@Test public void test_7932() { testInvalid("{(int | int), {any, int}}","{(any | any), (any | int)}"); }
		@Test public void test_7933() { testInvalid("{(int | int), {any, int}}","{(any | int), (any | int)}"); }
		@Test public void test_7934() { testInvalid("{(int | int), {any, int}}","{(any & int), (any | int)}"); }
		@Test public void test_7935() { testInvalid("{(int | int), {any, int}}","{{int}, (int | int)}"); }
		@Test public void test_7936() { testInvalid("{(int | int), {any, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_7937() { testInvalid("{(int | int), {any, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_7938() { testInvalid("{(int | int), {any, int}}","{{int}, (any & any)}"); }
		@Test public void test_7939() { testInvalid("{(int | int), {any, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_7940() { testInvalid("{(int | int), {any, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_7941() { testInvalid("{(int | int), {any, int}}","{(int | any), (any & any)}"); }
		@Test public void test_7942() { testInvalid("{(int | int), {any, int}}","{(any & any), (any & any)}"); }
		@Test public void test_7943() { testInvalid("{(int | int), {any, int}}","{(int & any), (any & any)}"); }
		@Test public void test_7944() { testInvalid("{(int | int), {any, int}}","{{any}, (int & any)}"); }
		@Test public void test_7945() { testInvalid("{(int | int), {any, int}}","{{int}, (int & any)}"); }
		@Test public void test_7946() { testInvalid("{(int | int), {any, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_7947() { testInvalid("{(int | int), {any, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_7948() { testInvalid("{(int | int), {any, int}}","{(any | int), (int & any)}"); }
		@Test public void test_7949() { testInvalid("{(int | int), {any, int}}","{(any & any), (int & any)}"); }
		@Test public void test_7950() { testInvalid("{(int | int), {any, int}}","{(int & any), (int & any)}"); }
		@Test public void test_7951() { testInvalid("{(int | int), {any, int}}","{(int & int), (int & any)}"); }
		@Test public void test_7952() { testInvalid("{(int | int), {any, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_7953() { testInvalid("{(int | int), {any, int}}","{(any & any), (any & int)}"); }
		@Test public void test_7954() { testInvalid("{(int | int), {any, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_7955() { testInvalid("{(int | int), {any, int}}","{(int | int), (int & int)}"); }
		@Test public void test_7956() { testInvalid("{(int | int), {any, int}}","{(any & any), (int & int)}"); }
		@Test public void test_7957() { testInvalid("{(int | int), {any, int}}","{(any & int), (int & int)}"); }
		@Test public void test_7958() { testInvalid("{(int | int), {any, int}}","{(int & int), (int & int)}"); }
		@Test public void test_7959() { testInvalid("{(int | int), {any, int}}","(!int | {any})"); }
		@Test public void test_7960() { testInvalid("{(int | int), {any, int}}","({any, any} | {any})"); }
		@Test public void test_7961() { testInvalid("{(int | int), {any, int}}","((any | any) | {any})"); }
		@Test public void test_7962() { testInvalid("{(int | int), {any, int}}","((int | any) | {any})"); }
		@Test public void test_7963() { testInvalid("{(int | int), {any, int}}","((any & any) | {any})"); }
		@Test public void test_7964() { testInvalid("{(int | int), {any, int}}","((int & any) | {any})"); }
		@Test public void test_7965() { testInvalid("{(int | int), {any, int}}","((any & int) | {any})"); }
		@Test public void test_7966() { testInvalid("{(int | int), {any, int}}","({int} | {int})"); }
		@Test public void test_7967() { testInvalid("{(int | int), {any, int}}","(!any | {int})"); }
		@Test public void test_7968() { testInvalid("{(int | int), {any, int}}","(!int | {int})"); }
		@Test public void test_7969() { testInvalid("{(int | int), {any, int}}","({any, int} | {int})"); }
		@Test public void test_7970() { testInvalid("{(int | int), {any, int}}","((int & any) | {int})"); }
		@Test public void test_7971() { testInvalid("{(int | int), {any, int}}","((any & int) | {int})"); }
		@Test public void test_7972() { testInvalid("{(int | int), {any, int}}","((int & int) | {int})"); }
		@Test public void test_7973() { testInvalid("{(int | int), {any, int}}","({any} | !any)"); }
		@Test public void test_7974() { testInvalid("{(int | int), {any, int}}","({int} | !any)"); }
		@Test public void test_7975() { testInvalid("{(int | int), {any, int}}","({any, any} | !any)"); }
		@Test public void test_7976() { testInvalid("{(int | int), {any, int}}","({int, int} | !any)"); }
		@Test public void test_7977() { testInvalid("{(int | int), {any, int}}","((any | any) | !any)"); }
		@Test public void test_7978() { testInvalid("{(int | int), {any, int}}","((int | any) | !any)"); }
		@Test public void test_7979() { testInvalid("{(int | int), {any, int}}","((int | int) | !any)"); }
		@Test public void test_7980() { testInvalid("{(int | int), {any, int}}","((int & int) | !any)"); }
		@Test public void test_7981() { testInvalid("{(int | int), {any, int}}","(!int | !int)"); }
		@Test public void test_7982() { testInvalid("{(int | int), {any, int}}","({any, any} | !int)"); }
		@Test public void test_7983() { testInvalid("{(int | int), {any, int}}","({int, int} | !int)"); }
		@Test public void test_7984() { testInvalid("{(int | int), {any, int}}","((int | any) | !int)"); }
		@Test public void test_7985() { testInvalid("{(int | int), {any, int}}","((any | int) | !int)"); }
		@Test public void test_7986() { testInvalid("{(int | int), {any, int}}","((any & int) | !int)"); }
		@Test public void test_7987() { testInvalid("{(int | int), {any, int}}","((int & int) | !int)"); }
		@Test public void test_7988() { testInvalid("{(int | int), {any, int}}","({int} | {any, any})"); }
		@Test public void test_7989() { testInvalid("{(int | int), {any, int}}","(!any | {any, any})"); }
		@Test public void test_7990() { testInvalid("{(int | int), {any, int}}","(!int | {any, any})"); }
		@Test public void test_7991() { testInvalid("{(int | int), {any, int}}","({any, int} | {any, any})"); }
		@Test public void test_7992() { testInvalid("{(int | int), {any, int}}","((int | any) | {any, any})"); }
		@Test public void test_7993() { testInvalid("{(int | int), {any, int}}","((any & any) | {any, any})"); }
		@Test public void test_7994() { testInvalid("{(int | int), {any, int}}","((any & int) | {any, any})"); }
		@Test public void test_7995() { testInvalid("{(int | int), {any, int}}","(!int | {int, any})"); }
		@Test public void test_7996() { testInvalid("{(int | int), {any, int}}","({any, int} | {int, any})"); }
		@Test public void test_7997() { testInvalid("{(int | int), {any, int}}","((any | any) | {int, any})"); }
		@Test public void test_7998() { testInvalid("{(int | int), {any, int}}","((int | any) | {int, any})"); }
		@Test public void test_7999() { testInvalid("{(int | int), {any, int}}","((any | int) | {int, any})"); }
		@Test public void test_8000() { testInvalid("{(int | int), {any, int}}","((int & any) | {int, any})"); }
		@Test public void test_8001() { testInvalid("{(int | int), {any, int}}","({any} | {any, int})"); }
		@Test public void test_8002() { testInvalid("{(int | int), {any, int}}","(!int | {any, int})"); }
		@Test public void test_8003() { testInvalid("{(int | int), {any, int}}","({any, int} | {any, int})"); }
		@Test public void test_8004() { testInvalid("{(int | int), {any, int}}","((any | any) | {any, int})"); }
		@Test public void test_8005() { testInvalid("{(int | int), {any, int}}","((any | int) | {any, int})"); }
		@Test public void test_8006() { testInvalid("{(int | int), {any, int}}","((int | int) | {any, int})"); }
		@Test public void test_8007() { testInvalid("{(int | int), {any, int}}","((int & any) | {any, int})"); }
		@Test public void test_8008() { testInvalid("{(int | int), {any, int}}","(!any | {int, int})"); }
		@Test public void test_8009() { testInvalid("{(int | int), {any, int}}","(!int | {int, int})"); }
		@Test public void test_8010() { testInvalid("{(int | int), {any, int}}","({any, any} | {int, int})"); }
		@Test public void test_8011() { testInvalid("{(int | int), {any, int}}","({any, int} | {int, int})"); }
		@Test public void test_8012() { testInvalid("{(int | int), {any, int}}","((any | any) | {int, int})"); }
		@Test public void test_8013() { testInvalid("{(int | int), {any, int}}","((int | int) | {int, int})"); }
		@Test public void test_8014() { testInvalid("{(int | int), {any, int}}","((int & any) | {int, int})"); }
		@Test public void test_8015() { testInvalid("{(int | int), {any, int}}","((any & int) | {int, int})"); }
		@Test public void test_8016() { testInvalid("{(int | int), {any, int}}","((int & int) | {int, int})"); }
		@Test public void test_8017() { testInvalid("{(int | int), {any, int}}","({any} | (any | any))"); }
		@Test public void test_8018() { testInvalid("{(int | int), {any, int}}","(!any | (any | any))"); }
		@Test public void test_8019() { testInvalid("{(int | int), {any, int}}","({any, any} | (any | any))"); }
		@Test public void test_8020() { testInvalid("{(int | int), {any, int}}","({any, int} | (any | any))"); }
		@Test public void test_8021() { testInvalid("{(int | int), {any, int}}","({int, int} | (any | any))"); }
		@Test public void test_8022() { testInvalid("{(int | int), {any, int}}","((int | any) | (any | any))"); }
		@Test public void test_8023() { testInvalid("{(int | int), {any, int}}","((any | int) | (any | any))"); }
		@Test public void test_8024() { testInvalid("{(int | int), {any, int}}","((any & int) | (any | any))"); }
		@Test public void test_8025() { testInvalid("{(int | int), {any, int}}","((int & int) | (any | any))"); }
		@Test public void test_8026() { testInvalid("{(int | int), {any, int}}","({any} | (int | any))"); }
		@Test public void test_8027() { testInvalid("{(int | int), {any, int}}","(!int | (int | any))"); }
		@Test public void test_8028() { testInvalid("{(int | int), {any, int}}","({int, any} | (int | any))"); }
		@Test public void test_8029() { testInvalid("{(int | int), {any, int}}","({any, int} | (int | any))"); }
		@Test public void test_8030() { testInvalid("{(int | int), {any, int}}","((int & any) | (int | any))"); }
		@Test public void test_8031() { testInvalid("{(int | int), {any, int}}","((any & int) | (int | any))"); }
		@Test public void test_8032() { testInvalid("{(int | int), {any, int}}","({any} | (any | int))"); }
		@Test public void test_8033() { testInvalid("{(int | int), {any, int}}","({int} | (any | int))"); }
		@Test public void test_8034() { testInvalid("{(int | int), {any, int}}","(!any | (any | int))"); }
		@Test public void test_8035() { testInvalid("{(int | int), {any, int}}","(!int | (any | int))"); }
		@Test public void test_8036() { testInvalid("{(int | int), {any, int}}","({any, int} | (any | int))"); }
		@Test public void test_8037() { testInvalid("{(int | int), {any, int}}","({int, int} | (any | int))"); }
		@Test public void test_8038() { testInvalid("{(int | int), {any, int}}","((int | any) | (any | int))"); }
		@Test public void test_8039() { testInvalid("{(int | int), {any, int}}","((any | int) | (any | int))"); }
		@Test public void test_8040() { testInvalid("{(int | int), {any, int}}","((int | int) | (any | int))"); }
		@Test public void test_8041() { testInvalid("{(int | int), {any, int}}","((any & any) | (any | int))"); }
		@Test public void test_8042() { testInvalid("{(int | int), {any, int}}","({int} | (int | int))"); }
		@Test public void test_8043() { testInvalid("{(int | int), {any, int}}","(!any | (int | int))"); }
		@Test public void test_8044() { testInvalid("{(int | int), {any, int}}","(!int | (int | int))"); }
		@Test public void test_8045() { testInvalid("{(int | int), {any, int}}","({int, any} | (int | int))"); }
		@Test public void test_8046() { testInvalid("{(int | int), {any, int}}","({any, int} | (int | int))"); }
		@Test public void test_8047() { testInvalid("{(int | int), {any, int}}","((any | int) | (int | int))"); }
		@Test public void test_8048() { testInvalid("{(int | int), {any, int}}","((int | int) | (int | int))"); }
		@Test public void test_8049() { testInvalid("{(int | int), {any, int}}","((any & any) | (int | int))"); }
		@Test public void test_8050() { testInvalid("{(int | int), {any, int}}","((int & any) | (int | int))"); }
		@Test public void test_8051() { testInvalid("{(int | int), {any, int}}","((int & int) | (int | int))"); }
		@Test public void test_8052() { testInvalid("{(int | int), {any, int}}","(!any | (any & any))"); }
		@Test public void test_8053() { testInvalid("{(int | int), {any, int}}","(!int | (any & any))"); }
		@Test public void test_8054() { testInvalid("{(int | int), {any, int}}","({any, any} | (any & any))"); }
		@Test public void test_8055() { testInvalid("{(int | int), {any, int}}","({int, any} | (any & any))"); }
		@Test public void test_8056() { testInvalid("{(int | int), {any, int}}","({any, int} | (any & any))"); }
		@Test public void test_8057() { testInvalid("{(int | int), {any, int}}","({int, int} | (any & any))"); }
		@Test public void test_8058() { testInvalid("{(int | int), {any, int}}","((int | any) | (any & any))"); }
		@Test public void test_8059() { testInvalid("{(int | int), {any, int}}","((int | int) | (any & any))"); }
		@Test public void test_8060() { testInvalid("{(int | int), {any, int}}","((int & any) | (any & any))"); }
		@Test public void test_8061() { testInvalid("{(int | int), {any, int}}","((any & int) | (any & any))"); }
		@Test public void test_8062() { testInvalid("{(int | int), {any, int}}","((int & int) | (any & any))"); }
		@Test public void test_8063() { testInvalid("{(int | int), {any, int}}","({any} | (int & any))"); }
		@Test public void test_8064() { testInvalid("{(any & int), {any, int}}","{int}"); }
		@Test public void test_8065() { testInvalid("{(any & int), {any, int}}","{any, any}"); }
		@Test public void test_8066() { testInvalid("{(any & int), {any, int}}","{int, int}"); }
		@Test public void test_8067() { testInvalid("{(any & int), {any, int}}","(any | int)"); }
		@Test public void test_8068() { testInvalid("{(any & int), {any, int}}","(int & any)"); }
		@Test public void test_8069() { testInvalid("{(any & int), {any, int}}","{{any}}"); }
		@Test public void test_8070() { testInvalid("{(any & int), {any, int}}","{{int, any}}"); }
		@Test public void test_8071() { testInvalid("{(any & int), {any, int}}","{{int, int}}"); }
		@Test public void test_8072() { testInvalid("{(any & int), {any, int}}","{(any | int)}"); }
		@Test public void test_8073() { testInvalid("{(any & int), {any, int}}","!{int, any}"); }
		@Test public void test_8074() { testInvalid("{(any & int), {any, int}}","!{int, int}"); }
		@Test public void test_8075() { testValid("{(any & int), {any, int}}","!(any | any)"); }
		@Test public void test_8076() { testValid("{(any & int), {any, int}}","!(any & any)"); }
		@Test public void test_8077() { testInvalid("{(any & int), {any, int}}","!(int & int)"); }
		@Test public void test_8078() { testInvalid("{(any & int), {any, int}}","{{int}, {any}}"); }
		@Test public void test_8079() { testInvalid("{(any & int), {any, int}}","{!int, {any}}"); }
		@Test public void test_8080() { testInvalid("{(any & int), {any, int}}","{{int, int}, {any}}"); }
		@Test public void test_8081() { testInvalid("{(any & int), {any, int}}","{(any | int), {any}}"); }
		@Test public void test_8082() { testInvalid("{(any & int), {any, int}}","{!int, {int}}"); }
		@Test public void test_8083() { testInvalid("{(any & int), {any, int}}","{{any, any}, {int}}"); }
		@Test public void test_8084() { testInvalid("{(any & int), {any, int}}","{(any | any), {int}}"); }
		@Test public void test_8085() { testInvalid("{(any & int), {any, int}}","{(any & any), {int}}"); }
		@Test public void test_8086() { testInvalid("{(any & int), {any, int}}","{(any & int), {int}}"); }
		@Test public void test_8087() { testInvalid("{(any & int), {any, int}}","{{any, any}, !int}"); }
		@Test public void test_8088() { testInvalid("{(any & int), {any, int}}","{{any, int}, !int}"); }
		@Test public void test_8089() { testInvalid("{(any & int), {any, int}}","{(any | any), !int}"); }
		@Test public void test_8090() { testInvalid("{(any & int), {any, int}}","{(int | any), !int}"); }
		@Test public void test_8091() { testInvalid("{(any & int), {any, int}}","{(any & any), !int}"); }
		@Test public void test_8092() { testInvalid("{(any & int), {any, int}}","{(int & any), !int}"); }
		@Test public void test_8093() { testInvalid("{(any & int), {any, int}}","{(int & int), !int}"); }
		@Test public void test_8094() { testInvalid("{(any & int), {any, int}}","{{any}, {any, any}}"); }
		@Test public void test_8095() { testInvalid("{(any & int), {any, int}}","{{int}, {any, any}}"); }
		@Test public void test_8096() { testInvalid("{(any & int), {any, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_8097() { testInvalid("{(any & int), {any, int}}","{(any | any), {any, any}}"); }
		@Test public void test_8098() { testInvalid("{(any & int), {any, int}}","{(any | int), {any, any}}"); }
		@Test public void test_8099() { testInvalid("{(any & int), {any, int}}","{!int, {int, any}}"); }
		@Test public void test_8100() { testInvalid("{(any & int), {any, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_8101() { testInvalid("{(any & int), {any, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_8102() { testInvalid("{(any & int), {any, int}}","{(any & int), {int, any}}"); }
		@Test public void test_8103() { testInvalid("{(any & int), {any, int}}","{{any}, {any, int}}"); }
		@Test public void test_8104() { testInvalid("{(any & int), {any, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_8105() { testValid("{(any & int), {any, int}}","{(int | int), {any, int}}"); }
		@Test public void test_8106() { testValid("{(any & int), {any, int}}","{(any & int), {any, int}}"); }
		@Test public void test_8107() { testInvalid("{(any & int), {any, int}}","{!int, {int, int}}"); }
		@Test public void test_8108() { testInvalid("{(any & int), {any, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_8109() { testInvalid("{(any & int), {any, int}}","{(any | any), {int, int}}"); }
		@Test public void test_8110() { testInvalid("{(any & int), {any, int}}","{(int | any), {int, int}}"); }
		@Test public void test_8111() { testValid("{(any & int), {any, int}}","{(int & any), {int, int}}"); }
		@Test public void test_8112() { testInvalid("{(any & int), {any, int}}","{{int}, (any | any)}"); }
		@Test public void test_8113() { testInvalid("{(any & int), {any, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_8114() { testInvalid("{(any & int), {any, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_8115() { testInvalid("{(any & int), {any, int}}","{(any | any), (any | any)}"); }
		@Test public void test_8116() { testInvalid("{(any & int), {any, int}}","{(int | any), (any | any)}"); }
		@Test public void test_8117() { testInvalid("{(any & int), {any, int}}","{(int & int), (any | any)}"); }
		@Test public void test_8118() { testInvalid("{(any & int), {any, int}}","{!int, (int | any)}"); }
		@Test public void test_8119() { testInvalid("{(any & int), {any, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_8120() { testInvalid("{(any & int), {any, int}}","{(any | any), (int | any)}"); }
		@Test public void test_8121() { testInvalid("{(any & int), {any, int}}","{(int | int), (int | any)}"); }
		@Test public void test_8122() { testInvalid("{(any & int), {any, int}}","{{any}, (any | int)}"); }
		@Test public void test_8123() { testInvalid("{(any & int), {any, int}}","{!int, (any | int)}"); }
		@Test public void test_8124() { testInvalid("{(any & int), {any, int}}","{(any | any), (any | int)}"); }
		@Test public void test_8125() { testInvalid("{(any & int), {any, int}}","{(any | int), (any | int)}"); }
		@Test public void test_8126() { testInvalid("{(any & int), {any, int}}","{(any & int), (any | int)}"); }
		@Test public void test_8127() { testInvalid("{(any & int), {any, int}}","{{int}, (int | int)}"); }
		@Test public void test_8128() { testInvalid("{(any & int), {any, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_8129() { testInvalid("{(any & int), {any, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_8130() { testInvalid("{(any & int), {any, int}}","{{int}, (any & any)}"); }
		@Test public void test_8131() { testInvalid("{(any & int), {any, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_8132() { testInvalid("{(any & int), {any, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_8133() { testInvalid("{(any & int), {any, int}}","{(int | any), (any & any)}"); }
		@Test public void test_8134() { testInvalid("{(any & int), {any, int}}","{(any & any), (any & any)}"); }
		@Test public void test_8135() { testInvalid("{(any & int), {any, int}}","{(int & any), (any & any)}"); }
		@Test public void test_8136() { testInvalid("{(any & int), {any, int}}","{{any}, (int & any)}"); }
		@Test public void test_8137() { testInvalid("{(any & int), {any, int}}","{{int}, (int & any)}"); }
		@Test public void test_8138() { testInvalid("{(any & int), {any, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_8139() { testInvalid("{(any & int), {any, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_8140() { testInvalid("{(any & int), {any, int}}","{(any | int), (int & any)}"); }
		@Test public void test_8141() { testInvalid("{(any & int), {any, int}}","{(any & any), (int & any)}"); }
		@Test public void test_8142() { testInvalid("{(any & int), {any, int}}","{(int & any), (int & any)}"); }
		@Test public void test_8143() { testInvalid("{(any & int), {any, int}}","{(int & int), (int & any)}"); }
		@Test public void test_8144() { testInvalid("{(any & int), {any, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_8145() { testInvalid("{(any & int), {any, int}}","{(any & any), (any & int)}"); }
		@Test public void test_8146() { testInvalid("{(any & int), {any, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_8147() { testInvalid("{(any & int), {any, int}}","{(int | int), (int & int)}"); }
		@Test public void test_8148() { testInvalid("{(any & int), {any, int}}","{(any & any), (int & int)}"); }
		@Test public void test_8149() { testInvalid("{(any & int), {any, int}}","{(any & int), (int & int)}"); }
		@Test public void test_8150() { testInvalid("{(any & int), {any, int}}","{(int & int), (int & int)}"); }
		@Test public void test_8151() { testInvalid("{(any & int), {any, int}}","(!int | {any})"); }
		@Test public void test_8152() { testInvalid("{(any & int), {any, int}}","({any, any} | {any})"); }
		@Test public void test_8153() { testInvalid("{(any & int), {any, int}}","((any | any) | {any})"); }
		@Test public void test_8154() { testInvalid("{(any & int), {any, int}}","((int | any) | {any})"); }
		@Test public void test_8155() { testInvalid("{(any & int), {any, int}}","((any & any) | {any})"); }
		@Test public void test_8156() { testInvalid("{(any & int), {any, int}}","((int & any) | {any})"); }
		@Test public void test_8157() { testInvalid("{(any & int), {any, int}}","((any & int) | {any})"); }
		@Test public void test_8158() { testInvalid("{(any & int), {any, int}}","({int} | {int})"); }
		@Test public void test_8159() { testInvalid("{(any & int), {any, int}}","(!any | {int})"); }
		@Test public void test_8160() { testInvalid("{(any & int), {any, int}}","(!int | {int})"); }
		@Test public void test_8161() { testInvalid("{(any & int), {any, int}}","({any, int} | {int})"); }
		@Test public void test_8162() { testInvalid("{(any & int), {any, int}}","((int & any) | {int})"); }
		@Test public void test_8163() { testInvalid("{(any & int), {any, int}}","((any & int) | {int})"); }
		@Test public void test_8164() { testInvalid("{(any & int), {any, int}}","((int & int) | {int})"); }
		@Test public void test_8165() { testInvalid("{(any & int), {any, int}}","({any} | !any)"); }
		@Test public void test_8166() { testInvalid("{(any & int), {any, int}}","({int} | !any)"); }
		@Test public void test_8167() { testInvalid("{(any & int), {any, int}}","({any, any} | !any)"); }
		@Test public void test_8168() { testInvalid("{(any & int), {any, int}}","({int, int} | !any)"); }
		@Test public void test_8169() { testInvalid("{(any & int), {any, int}}","((any | any) | !any)"); }
		@Test public void test_8170() { testInvalid("{(any & int), {any, int}}","((int | any) | !any)"); }
		@Test public void test_8171() { testInvalid("{(any & int), {any, int}}","((int | int) | !any)"); }
		@Test public void test_8172() { testInvalid("{(any & int), {any, int}}","((int & int) | !any)"); }
		@Test public void test_8173() { testInvalid("{(any & int), {any, int}}","(!int | !int)"); }
		@Test public void test_8174() { testInvalid("{(any & int), {any, int}}","({any, any} | !int)"); }
		@Test public void test_8175() { testInvalid("{(any & int), {any, int}}","({int, int} | !int)"); }
		@Test public void test_8176() { testInvalid("{(any & int), {any, int}}","((int | any) | !int)"); }
		@Test public void test_8177() { testInvalid("{(any & int), {any, int}}","((any | int) | !int)"); }
		@Test public void test_8178() { testInvalid("{(any & int), {any, int}}","((any & int) | !int)"); }
		@Test public void test_8179() { testInvalid("{(any & int), {any, int}}","((int & int) | !int)"); }
		@Test public void test_8180() { testInvalid("{(any & int), {any, int}}","({int} | {any, any})"); }
		@Test public void test_8181() { testInvalid("{(any & int), {any, int}}","(!any | {any, any})"); }
		@Test public void test_8182() { testInvalid("{(any & int), {any, int}}","(!int | {any, any})"); }
		@Test public void test_8183() { testInvalid("{(any & int), {any, int}}","({any, int} | {any, any})"); }
		@Test public void test_8184() { testInvalid("{(any & int), {any, int}}","((int | any) | {any, any})"); }
		@Test public void test_8185() { testInvalid("{(any & int), {any, int}}","((any & any) | {any, any})"); }
		@Test public void test_8186() { testInvalid("{(any & int), {any, int}}","((any & int) | {any, any})"); }
		@Test public void test_8187() { testInvalid("{(any & int), {any, int}}","(!int | {int, any})"); }
		@Test public void test_8188() { testInvalid("{(any & int), {any, int}}","({any, int} | {int, any})"); }
		@Test public void test_8189() { testInvalid("{(any & int), {any, int}}","((any | any) | {int, any})"); }
		@Test public void test_8190() { testInvalid("{(any & int), {any, int}}","((int | any) | {int, any})"); }
		@Test public void test_8191() { testInvalid("{(any & int), {any, int}}","((any | int) | {int, any})"); }
		@Test public void test_8192() { testInvalid("{(any & int), {any, int}}","((int & any) | {int, any})"); }
		@Test public void test_8193() { testInvalid("{(any & int), {any, int}}","({any} | {any, int})"); }
		@Test public void test_8194() { testInvalid("{(any & int), {any, int}}","(!int | {any, int})"); }
		@Test public void test_8195() { testInvalid("{(any & int), {any, int}}","({any, int} | {any, int})"); }
		@Test public void test_8196() { testInvalid("{(any & int), {any, int}}","((any | any) | {any, int})"); }
		@Test public void test_8197() { testInvalid("{(any & int), {any, int}}","((any | int) | {any, int})"); }
		@Test public void test_8198() { testInvalid("{(any & int), {any, int}}","((int | int) | {any, int})"); }
		@Test public void test_8199() { testInvalid("{(any & int), {any, int}}","((int & any) | {any, int})"); }
		@Test public void test_8200() { testInvalid("{(any & int), {any, int}}","(!any | {int, int})"); }
		@Test public void test_8201() { testInvalid("{(any & int), {any, int}}","(!int | {int, int})"); }
		@Test public void test_8202() { testInvalid("{(any & int), {any, int}}","({any, any} | {int, int})"); }
		@Test public void test_8203() { testInvalid("{(any & int), {any, int}}","({any, int} | {int, int})"); }
		@Test public void test_8204() { testInvalid("{(any & int), {any, int}}","((any | any) | {int, int})"); }
		@Test public void test_8205() { testInvalid("{(any & int), {any, int}}","((int | int) | {int, int})"); }
		@Test public void test_8206() { testInvalid("{(any & int), {any, int}}","((int & any) | {int, int})"); }
		@Test public void test_8207() { testInvalid("{(any & int), {any, int}}","((any & int) | {int, int})"); }
		@Test public void test_8208() { testInvalid("{(any & int), {any, int}}","((int & int) | {int, int})"); }
		@Test public void test_8209() { testInvalid("{(any & int), {any, int}}","({any} | (any | any))"); }
		@Test public void test_8210() { testInvalid("{(any & int), {any, int}}","(!any | (any | any))"); }
		@Test public void test_8211() { testInvalid("{(any & int), {any, int}}","({any, any} | (any | any))"); }
		@Test public void test_8212() { testInvalid("{(any & int), {any, int}}","({any, int} | (any | any))"); }
		@Test public void test_8213() { testInvalid("{(any & int), {any, int}}","({int, int} | (any | any))"); }
		@Test public void test_8214() { testInvalid("{(any & int), {any, int}}","((int | any) | (any | any))"); }
		@Test public void test_8215() { testInvalid("{(any & int), {any, int}}","((any | int) | (any | any))"); }
		@Test public void test_8216() { testInvalid("{(any & int), {any, int}}","((any & int) | (any | any))"); }
		@Test public void test_8217() { testInvalid("{(any & int), {any, int}}","((int & int) | (any | any))"); }
		@Test public void test_8218() { testInvalid("{(any & int), {any, int}}","({any} | (int | any))"); }
		@Test public void test_8219() { testInvalid("{(any & int), {any, int}}","(!int | (int | any))"); }
		@Test public void test_8220() { testInvalid("{(any & int), {any, int}}","({int, any} | (int | any))"); }
		@Test public void test_8221() { testInvalid("{(any & int), {any, int}}","({any, int} | (int | any))"); }
		@Test public void test_8222() { testInvalid("{(any & int), {any, int}}","((int & any) | (int | any))"); }
		@Test public void test_8223() { testInvalid("{(any & int), {any, int}}","((any & int) | (int | any))"); }
		@Test public void test_8224() { testInvalid("{(any & int), {any, int}}","({any} | (any | int))"); }
		@Test public void test_8225() { testInvalid("{(any & int), {any, int}}","({int} | (any | int))"); }
		@Test public void test_8226() { testInvalid("{(any & int), {any, int}}","(!any | (any | int))"); }
		@Test public void test_8227() { testInvalid("{(any & int), {any, int}}","(!int | (any | int))"); }
		@Test public void test_8228() { testInvalid("{(any & int), {any, int}}","({any, int} | (any | int))"); }
		@Test public void test_8229() { testInvalid("{(any & int), {any, int}}","({int, int} | (any | int))"); }
		@Test public void test_8230() { testInvalid("{(any & int), {any, int}}","((int | any) | (any | int))"); }
		@Test public void test_8231() { testInvalid("{(any & int), {any, int}}","((any | int) | (any | int))"); }
		@Test public void test_8232() { testInvalid("{(any & int), {any, int}}","((int | int) | (any | int))"); }
		@Test public void test_8233() { testInvalid("{(any & int), {any, int}}","((any & any) | (any | int))"); }
		@Test public void test_8234() { testInvalid("{(any & int), {any, int}}","({int} | (int | int))"); }
		@Test public void test_8235() { testInvalid("{(any & int), {any, int}}","(!any | (int | int))"); }
		@Test public void test_8236() { testInvalid("{(any & int), {any, int}}","(!int | (int | int))"); }
		@Test public void test_8237() { testInvalid("{(any & int), {any, int}}","({int, any} | (int | int))"); }
		@Test public void test_8238() { testInvalid("{(any & int), {any, int}}","({any, int} | (int | int))"); }
		@Test public void test_8239() { testInvalid("{(any & int), {any, int}}","((any | int) | (int | int))"); }
		@Test public void test_8240() { testInvalid("{(any & int), {any, int}}","((int | int) | (int | int))"); }
		@Test public void test_8241() { testInvalid("{(any & int), {any, int}}","((any & any) | (int | int))"); }
		@Test public void test_8242() { testInvalid("{(any & int), {any, int}}","((int & any) | (int | int))"); }
		@Test public void test_8243() { testInvalid("{(any & int), {any, int}}","((int & int) | (int | int))"); }
		@Test public void test_8244() { testInvalid("{(any & int), {any, int}}","(!any | (any & any))"); }
		@Test public void test_8245() { testInvalid("{(any & int), {any, int}}","(!int | (any & any))"); }
		@Test public void test_8246() { testInvalid("{(any & int), {any, int}}","({any, any} | (any & any))"); }
		@Test public void test_8247() { testInvalid("{(any & int), {any, int}}","({int, any} | (any & any))"); }
		@Test public void test_8248() { testInvalid("{(any & int), {any, int}}","({any, int} | (any & any))"); }
		@Test public void test_8249() { testInvalid("{(any & int), {any, int}}","({int, int} | (any & any))"); }
		@Test public void test_8250() { testInvalid("{(any & int), {any, int}}","((int | any) | (any & any))"); }
		@Test public void test_8251() { testInvalid("{(any & int), {any, int}}","((int | int) | (any & any))"); }
		@Test public void test_8252() { testInvalid("{(any & int), {any, int}}","((int & any) | (any & any))"); }
		@Test public void test_8253() { testInvalid("{(any & int), {any, int}}","((any & int) | (any & any))"); }
		@Test public void test_8254() { testInvalid("{(any & int), {any, int}}","((int & int) | (any & any))"); }
		@Test public void test_8255() { testInvalid("{(any & int), {any, int}}","({any} | (int & any))"); }
		@Test public void test_8256() { testInvalid("{!int, {int, int}}","{int}"); }
		@Test public void test_8257() { testInvalid("{!int, {int, int}}","{any, any}"); }
		@Test public void test_8258() { testInvalid("{!int, {int, int}}","{int, int}"); }
		@Test public void test_8259() { testInvalid("{!int, {int, int}}","(any | int)"); }
		@Test public void test_8260() { testInvalid("{!int, {int, int}}","(int & any)"); }
		@Test public void test_8261() { testInvalid("{!int, {int, int}}","{{any}}"); }
		@Test public void test_8262() { testInvalid("{!int, {int, int}}","{{int, any}}"); }
		@Test public void test_8263() { testInvalid("{!int, {int, int}}","{{int, int}}"); }
		@Test public void test_8264() { testInvalid("{!int, {int, int}}","{(any | int)}"); }
		@Test public void test_8265() { testInvalid("{!int, {int, int}}","!{int, any}"); }
		@Test public void test_8266() { testInvalid("{!int, {int, int}}","!{int, int}"); }
		@Test public void test_8267() { testValid("{!int, {int, int}}","!(any | any)"); }
		@Test public void test_8268() { testValid("{!int, {int, int}}","!(any & any)"); }
		@Test public void test_8269() { testInvalid("{!int, {int, int}}","!(int & int)"); }
		@Test public void test_8270() { testInvalid("{!int, {int, int}}","{{int}, {any}}"); }
		@Test public void test_8271() { testInvalid("{!int, {int, int}}","{!int, {any}}"); }
		@Test public void test_8272() { testInvalid("{!int, {int, int}}","{{int, int}, {any}}"); }
		@Test public void test_8273() { testInvalid("{!int, {int, int}}","{(any | int), {any}}"); }
		@Test public void test_8274() { testInvalid("{!int, {int, int}}","{!int, {int}}"); }
		@Test public void test_8275() { testInvalid("{!int, {int, int}}","{{any, any}, {int}}"); }
		@Test public void test_8276() { testInvalid("{!int, {int, int}}","{(any | any), {int}}"); }
		@Test public void test_8277() { testInvalid("{!int, {int, int}}","{(any & any), {int}}"); }
		@Test public void test_8278() { testInvalid("{!int, {int, int}}","{(any & int), {int}}"); }
		@Test public void test_8279() { testInvalid("{!int, {int, int}}","{{any, any}, !int}"); }
		@Test public void test_8280() { testInvalid("{!int, {int, int}}","{{any, int}, !int}"); }
		@Test public void test_8281() { testInvalid("{!int, {int, int}}","{(any | any), !int}"); }
		@Test public void test_8282() { testInvalid("{!int, {int, int}}","{(int | any), !int}"); }
		@Test public void test_8283() { testInvalid("{!int, {int, int}}","{(any & any), !int}"); }
		@Test public void test_8284() { testInvalid("{!int, {int, int}}","{(int & any), !int}"); }
		@Test public void test_8285() { testInvalid("{!int, {int, int}}","{(int & int), !int}"); }
		@Test public void test_8286() { testInvalid("{!int, {int, int}}","{{any}, {any, any}}"); }
		@Test public void test_8287() { testInvalid("{!int, {int, int}}","{{int}, {any, any}}"); }
		@Test public void test_8288() { testInvalid("{!int, {int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_8289() { testInvalid("{!int, {int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_8290() { testInvalid("{!int, {int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_8291() { testInvalid("{!int, {int, int}}","{!int, {int, any}}"); }
		@Test public void test_8292() { testInvalid("{!int, {int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_8293() { testInvalid("{!int, {int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_8294() { testInvalid("{!int, {int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_8295() { testInvalid("{!int, {int, int}}","{{any}, {any, int}}"); }
		@Test public void test_8296() { testInvalid("{!int, {int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_8297() { testInvalid("{!int, {int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_8298() { testInvalid("{!int, {int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_8299() { testValid("{!int, {int, int}}","{!int, {int, int}}"); }
		@Test public void test_8300() { testValid("{!int, {int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_8301() { testInvalid("{!int, {int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_8302() { testInvalid("{!int, {int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_8303() { testInvalid("{!int, {int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_8304() { testInvalid("{!int, {int, int}}","{{int}, (any | any)}"); }
		@Test public void test_8305() { testInvalid("{!int, {int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_8306() { testInvalid("{!int, {int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_8307() { testInvalid("{!int, {int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_8308() { testInvalid("{!int, {int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_8309() { testInvalid("{!int, {int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_8310() { testInvalid("{!int, {int, int}}","{!int, (int | any)}"); }
		@Test public void test_8311() { testInvalid("{!int, {int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_8312() { testInvalid("{!int, {int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_8313() { testInvalid("{!int, {int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_8314() { testInvalid("{!int, {int, int}}","{{any}, (any | int)}"); }
		@Test public void test_8315() { testInvalid("{!int, {int, int}}","{!int, (any | int)}"); }
		@Test public void test_8316() { testInvalid("{!int, {int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_8317() { testInvalid("{!int, {int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_8318() { testInvalid("{!int, {int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_8319() { testInvalid("{!int, {int, int}}","{{int}, (int | int)}"); }
		@Test public void test_8320() { testInvalid("{!int, {int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_8321() { testInvalid("{!int, {int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_8322() { testInvalid("{!int, {int, int}}","{{int}, (any & any)}"); }
		@Test public void test_8323() { testInvalid("{!int, {int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_8324() { testInvalid("{!int, {int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_8325() { testInvalid("{!int, {int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_8326() { testInvalid("{!int, {int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_8327() { testInvalid("{!int, {int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_8328() { testInvalid("{!int, {int, int}}","{{any}, (int & any)}"); }
		@Test public void test_8329() { testInvalid("{!int, {int, int}}","{{int}, (int & any)}"); }
		@Test public void test_8330() { testInvalid("{!int, {int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_8331() { testInvalid("{!int, {int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_8332() { testInvalid("{!int, {int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_8333() { testInvalid("{!int, {int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_8334() { testInvalid("{!int, {int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_8335() { testInvalid("{!int, {int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_8336() { testInvalid("{!int, {int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_8337() { testInvalid("{!int, {int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_8338() { testInvalid("{!int, {int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_8339() { testInvalid("{!int, {int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_8340() { testInvalid("{!int, {int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_8341() { testInvalid("{!int, {int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_8342() { testInvalid("{!int, {int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_8343() { testInvalid("{!int, {int, int}}","(!int | {any})"); }
		@Test public void test_8344() { testInvalid("{!int, {int, int}}","({any, any} | {any})"); }
		@Test public void test_8345() { testInvalid("{!int, {int, int}}","((any | any) | {any})"); }
		@Test public void test_8346() { testInvalid("{!int, {int, int}}","((int | any) | {any})"); }
		@Test public void test_8347() { testInvalid("{!int, {int, int}}","((any & any) | {any})"); }
		@Test public void test_8348() { testInvalid("{!int, {int, int}}","((int & any) | {any})"); }
		@Test public void test_8349() { testInvalid("{!int, {int, int}}","((any & int) | {any})"); }
		@Test public void test_8350() { testInvalid("{!int, {int, int}}","({int} | {int})"); }
		@Test public void test_8351() { testInvalid("{!int, {int, int}}","(!any | {int})"); }
		@Test public void test_8352() { testInvalid("{!int, {int, int}}","(!int | {int})"); }
		@Test public void test_8353() { testInvalid("{!int, {int, int}}","({any, int} | {int})"); }
		@Test public void test_8354() { testInvalid("{!int, {int, int}}","((int & any) | {int})"); }
		@Test public void test_8355() { testInvalid("{!int, {int, int}}","((any & int) | {int})"); }
		@Test public void test_8356() { testInvalid("{!int, {int, int}}","((int & int) | {int})"); }
		@Test public void test_8357() { testInvalid("{!int, {int, int}}","({any} | !any)"); }
		@Test public void test_8358() { testInvalid("{!int, {int, int}}","({int} | !any)"); }
		@Test public void test_8359() { testInvalid("{!int, {int, int}}","({any, any} | !any)"); }
		@Test public void test_8360() { testInvalid("{!int, {int, int}}","({int, int} | !any)"); }
		@Test public void test_8361() { testInvalid("{!int, {int, int}}","((any | any) | !any)"); }
		@Test public void test_8362() { testInvalid("{!int, {int, int}}","((int | any) | !any)"); }
		@Test public void test_8363() { testInvalid("{!int, {int, int}}","((int | int) | !any)"); }
		@Test public void test_8364() { testInvalid("{!int, {int, int}}","((int & int) | !any)"); }
		@Test public void test_8365() { testInvalid("{!int, {int, int}}","(!int | !int)"); }
		@Test public void test_8366() { testInvalid("{!int, {int, int}}","({any, any} | !int)"); }
		@Test public void test_8367() { testInvalid("{!int, {int, int}}","({int, int} | !int)"); }
		@Test public void test_8368() { testInvalid("{!int, {int, int}}","((int | any) | !int)"); }
		@Test public void test_8369() { testInvalid("{!int, {int, int}}","((any | int) | !int)"); }
		@Test public void test_8370() { testInvalid("{!int, {int, int}}","((any & int) | !int)"); }
		@Test public void test_8371() { testInvalid("{!int, {int, int}}","((int & int) | !int)"); }
		@Test public void test_8372() { testInvalid("{!int, {int, int}}","({int} | {any, any})"); }
		@Test public void test_8373() { testInvalid("{!int, {int, int}}","(!any | {any, any})"); }
		@Test public void test_8374() { testInvalid("{!int, {int, int}}","(!int | {any, any})"); }
		@Test public void test_8375() { testInvalid("{!int, {int, int}}","({any, int} | {any, any})"); }
		@Test public void test_8376() { testInvalid("{!int, {int, int}}","((int | any) | {any, any})"); }
		@Test public void test_8377() { testInvalid("{!int, {int, int}}","((any & any) | {any, any})"); }
		@Test public void test_8378() { testInvalid("{!int, {int, int}}","((any & int) | {any, any})"); }
		@Test public void test_8379() { testInvalid("{!int, {int, int}}","(!int | {int, any})"); }
		@Test public void test_8380() { testInvalid("{!int, {int, int}}","({any, int} | {int, any})"); }
		@Test public void test_8381() { testInvalid("{!int, {int, int}}","((any | any) | {int, any})"); }
		@Test public void test_8382() { testInvalid("{!int, {int, int}}","((int | any) | {int, any})"); }
		@Test public void test_8383() { testInvalid("{!int, {int, int}}","((any | int) | {int, any})"); }
		@Test public void test_8384() { testInvalid("{!int, {int, int}}","((int & any) | {int, any})"); }
		@Test public void test_8385() { testInvalid("{!int, {int, int}}","({any} | {any, int})"); }
		@Test public void test_8386() { testInvalid("{!int, {int, int}}","(!int | {any, int})"); }
		@Test public void test_8387() { testInvalid("{!int, {int, int}}","({any, int} | {any, int})"); }
		@Test public void test_8388() { testInvalid("{!int, {int, int}}","((any | any) | {any, int})"); }
		@Test public void test_8389() { testInvalid("{!int, {int, int}}","((any | int) | {any, int})"); }
		@Test public void test_8390() { testInvalid("{!int, {int, int}}","((int | int) | {any, int})"); }
		@Test public void test_8391() { testInvalid("{!int, {int, int}}","((int & any) | {any, int})"); }
		@Test public void test_8392() { testInvalid("{!int, {int, int}}","(!any | {int, int})"); }
		@Test public void test_8393() { testInvalid("{!int, {int, int}}","(!int | {int, int})"); }
		@Test public void test_8394() { testInvalid("{!int, {int, int}}","({any, any} | {int, int})"); }
		@Test public void test_8395() { testInvalid("{!int, {int, int}}","({any, int} | {int, int})"); }
		@Test public void test_8396() { testInvalid("{!int, {int, int}}","((any | any) | {int, int})"); }
		@Test public void test_8397() { testInvalid("{!int, {int, int}}","((int | int) | {int, int})"); }
		@Test public void test_8398() { testInvalid("{!int, {int, int}}","((int & any) | {int, int})"); }
		@Test public void test_8399() { testInvalid("{!int, {int, int}}","((any & int) | {int, int})"); }
		@Test public void test_8400() { testInvalid("{!int, {int, int}}","((int & int) | {int, int})"); }
		@Test public void test_8401() { testInvalid("{!int, {int, int}}","({any} | (any | any))"); }
		@Test public void test_8402() { testInvalid("{!int, {int, int}}","(!any | (any | any))"); }
		@Test public void test_8403() { testInvalid("{!int, {int, int}}","({any, any} | (any | any))"); }
		@Test public void test_8404() { testInvalid("{!int, {int, int}}","({any, int} | (any | any))"); }
		@Test public void test_8405() { testInvalid("{!int, {int, int}}","({int, int} | (any | any))"); }
		@Test public void test_8406() { testInvalid("{!int, {int, int}}","((int | any) | (any | any))"); }
		@Test public void test_8407() { testInvalid("{!int, {int, int}}","((any | int) | (any | any))"); }
		@Test public void test_8408() { testInvalid("{!int, {int, int}}","((any & int) | (any | any))"); }
		@Test public void test_8409() { testInvalid("{!int, {int, int}}","((int & int) | (any | any))"); }
		@Test public void test_8410() { testInvalid("{!int, {int, int}}","({any} | (int | any))"); }
		@Test public void test_8411() { testInvalid("{!int, {int, int}}","(!int | (int | any))"); }
		@Test public void test_8412() { testInvalid("{!int, {int, int}}","({int, any} | (int | any))"); }
		@Test public void test_8413() { testInvalid("{!int, {int, int}}","({any, int} | (int | any))"); }
		@Test public void test_8414() { testInvalid("{!int, {int, int}}","((int & any) | (int | any))"); }
		@Test public void test_8415() { testInvalid("{!int, {int, int}}","((any & int) | (int | any))"); }
		@Test public void test_8416() { testInvalid("{!int, {int, int}}","({any} | (any | int))"); }
		@Test public void test_8417() { testInvalid("{!int, {int, int}}","({int} | (any | int))"); }
		@Test public void test_8418() { testInvalid("{!int, {int, int}}","(!any | (any | int))"); }
		@Test public void test_8419() { testInvalid("{!int, {int, int}}","(!int | (any | int))"); }
		@Test public void test_8420() { testInvalid("{!int, {int, int}}","({any, int} | (any | int))"); }
		@Test public void test_8421() { testInvalid("{!int, {int, int}}","({int, int} | (any | int))"); }
		@Test public void test_8422() { testInvalid("{!int, {int, int}}","((int | any) | (any | int))"); }
		@Test public void test_8423() { testInvalid("{!int, {int, int}}","((any | int) | (any | int))"); }
		@Test public void test_8424() { testInvalid("{!int, {int, int}}","((int | int) | (any | int))"); }
		@Test public void test_8425() { testInvalid("{!int, {int, int}}","((any & any) | (any | int))"); }
		@Test public void test_8426() { testInvalid("{!int, {int, int}}","({int} | (int | int))"); }
		@Test public void test_8427() { testInvalid("{!int, {int, int}}","(!any | (int | int))"); }
		@Test public void test_8428() { testInvalid("{!int, {int, int}}","(!int | (int | int))"); }
		@Test public void test_8429() { testInvalid("{!int, {int, int}}","({int, any} | (int | int))"); }
		@Test public void test_8430() { testInvalid("{!int, {int, int}}","({any, int} | (int | int))"); }
		@Test public void test_8431() { testInvalid("{!int, {int, int}}","((any | int) | (int | int))"); }
		@Test public void test_8432() { testInvalid("{!int, {int, int}}","((int | int) | (int | int))"); }
		@Test public void test_8433() { testInvalid("{!int, {int, int}}","((any & any) | (int | int))"); }
		@Test public void test_8434() { testInvalid("{!int, {int, int}}","((int & any) | (int | int))"); }
		@Test public void test_8435() { testInvalid("{!int, {int, int}}","((int & int) | (int | int))"); }
		@Test public void test_8436() { testInvalid("{!int, {int, int}}","(!any | (any & any))"); }
		@Test public void test_8437() { testInvalid("{!int, {int, int}}","(!int | (any & any))"); }
		@Test public void test_8438() { testInvalid("{!int, {int, int}}","({any, any} | (any & any))"); }
		@Test public void test_8439() { testInvalid("{!int, {int, int}}","({int, any} | (any & any))"); }
		@Test public void test_8440() { testInvalid("{!int, {int, int}}","({any, int} | (any & any))"); }
		@Test public void test_8441() { testInvalid("{!int, {int, int}}","({int, int} | (any & any))"); }
		@Test public void test_8442() { testInvalid("{!int, {int, int}}","((int | any) | (any & any))"); }
		@Test public void test_8443() { testInvalid("{!int, {int, int}}","((int | int) | (any & any))"); }
		@Test public void test_8444() { testInvalid("{!int, {int, int}}","((int & any) | (any & any))"); }
		@Test public void test_8445() { testInvalid("{!int, {int, int}}","((any & int) | (any & any))"); }
		@Test public void test_8446() { testInvalid("{!int, {int, int}}","((int & int) | (any & any))"); }
		@Test public void test_8447() { testInvalid("{!int, {int, int}}","({any} | (int & any))"); }
		@Test public void test_8448() { testInvalid("{{int, int}, {int, int}}","{int}"); }
		@Test public void test_8449() { testInvalid("{{int, int}, {int, int}}","{any, any}"); }
		@Test public void test_8450() { testInvalid("{{int, int}, {int, int}}","{int, int}"); }
		@Test public void test_8451() { testInvalid("{{int, int}, {int, int}}","(any | int)"); }
		@Test public void test_8452() { testInvalid("{{int, int}, {int, int}}","(int & any)"); }
		@Test public void test_8453() { testInvalid("{{int, int}, {int, int}}","{{any}}"); }
		@Test public void test_8454() { testInvalid("{{int, int}, {int, int}}","{{int, any}}"); }
		@Test public void test_8455() { testInvalid("{{int, int}, {int, int}}","{{int, int}}"); }
		@Test public void test_8456() { testInvalid("{{int, int}, {int, int}}","{(any | int)}"); }
		@Test public void test_8457() { testInvalid("{{int, int}, {int, int}}","!{int, any}"); }
		@Test public void test_8458() { testInvalid("{{int, int}, {int, int}}","!{int, int}"); }
		@Test public void test_8459() { testValid("{{int, int}, {int, int}}","!(any | any)"); }
		@Test public void test_8460() { testValid("{{int, int}, {int, int}}","!(any & any)"); }
		@Test public void test_8461() { testInvalid("{{int, int}, {int, int}}","!(int & int)"); }
		@Test public void test_8462() { testInvalid("{{int, int}, {int, int}}","{{int}, {any}}"); }
		@Test public void test_8463() { testInvalid("{{int, int}, {int, int}}","{!int, {any}}"); }
		@Test public void test_8464() { testInvalid("{{int, int}, {int, int}}","{{int, int}, {any}}"); }
		@Test public void test_8465() { testInvalid("{{int, int}, {int, int}}","{(any | int), {any}}"); }
		@Test public void test_8466() { testInvalid("{{int, int}, {int, int}}","{!int, {int}}"); }
		@Test public void test_8467() { testInvalid("{{int, int}, {int, int}}","{{any, any}, {int}}"); }
		@Test public void test_8468() { testInvalid("{{int, int}, {int, int}}","{(any | any), {int}}"); }
		@Test public void test_8469() { testInvalid("{{int, int}, {int, int}}","{(any & any), {int}}"); }
		@Test public void test_8470() { testInvalid("{{int, int}, {int, int}}","{(any & int), {int}}"); }
		@Test public void test_8471() { testInvalid("{{int, int}, {int, int}}","{{any, any}, !int}"); }
		@Test public void test_8472() { testInvalid("{{int, int}, {int, int}}","{{any, int}, !int}"); }
		@Test public void test_8473() { testInvalid("{{int, int}, {int, int}}","{(any | any), !int}"); }
		@Test public void test_8474() { testInvalid("{{int, int}, {int, int}}","{(int | any), !int}"); }
		@Test public void test_8475() { testInvalid("{{int, int}, {int, int}}","{(any & any), !int}"); }
		@Test public void test_8476() { testInvalid("{{int, int}, {int, int}}","{(int & any), !int}"); }
		@Test public void test_8477() { testInvalid("{{int, int}, {int, int}}","{(int & int), !int}"); }
		@Test public void test_8478() { testInvalid("{{int, int}, {int, int}}","{{any}, {any, any}}"); }
		@Test public void test_8479() { testInvalid("{{int, int}, {int, int}}","{{int}, {any, any}}"); }
		@Test public void test_8480() { testInvalid("{{int, int}, {int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_8481() { testInvalid("{{int, int}, {int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_8482() { testInvalid("{{int, int}, {int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_8483() { testInvalid("{{int, int}, {int, int}}","{!int, {int, any}}"); }
		@Test public void test_8484() { testInvalid("{{int, int}, {int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_8485() { testInvalid("{{int, int}, {int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_8486() { testInvalid("{{int, int}, {int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_8487() { testInvalid("{{int, int}, {int, int}}","{{any}, {any, int}}"); }
		@Test public void test_8488() { testInvalid("{{int, int}, {int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_8489() { testInvalid("{{int, int}, {int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_8490() { testInvalid("{{int, int}, {int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_8491() { testInvalid("{{int, int}, {int, int}}","{!int, {int, int}}"); }
		@Test public void test_8492() { testValid("{{int, int}, {int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_8493() { testInvalid("{{int, int}, {int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_8494() { testInvalid("{{int, int}, {int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_8495() { testInvalid("{{int, int}, {int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_8496() { testInvalid("{{int, int}, {int, int}}","{{int}, (any | any)}"); }
		@Test public void test_8497() { testInvalid("{{int, int}, {int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_8498() { testInvalid("{{int, int}, {int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_8499() { testInvalid("{{int, int}, {int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_8500() { testInvalid("{{int, int}, {int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_8501() { testInvalid("{{int, int}, {int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_8502() { testInvalid("{{int, int}, {int, int}}","{!int, (int | any)}"); }
		@Test public void test_8503() { testInvalid("{{int, int}, {int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_8504() { testInvalid("{{int, int}, {int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_8505() { testInvalid("{{int, int}, {int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_8506() { testInvalid("{{int, int}, {int, int}}","{{any}, (any | int)}"); }
		@Test public void test_8507() { testInvalid("{{int, int}, {int, int}}","{!int, (any | int)}"); }
		@Test public void test_8508() { testInvalid("{{int, int}, {int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_8509() { testInvalid("{{int, int}, {int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_8510() { testInvalid("{{int, int}, {int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_8511() { testInvalid("{{int, int}, {int, int}}","{{int}, (int | int)}"); }
		@Test public void test_8512() { testInvalid("{{int, int}, {int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_8513() { testInvalid("{{int, int}, {int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_8514() { testInvalid("{{int, int}, {int, int}}","{{int}, (any & any)}"); }
		@Test public void test_8515() { testInvalid("{{int, int}, {int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_8516() { testInvalid("{{int, int}, {int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_8517() { testInvalid("{{int, int}, {int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_8518() { testInvalid("{{int, int}, {int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_8519() { testInvalid("{{int, int}, {int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_8520() { testInvalid("{{int, int}, {int, int}}","{{any}, (int & any)}"); }
		@Test public void test_8521() { testInvalid("{{int, int}, {int, int}}","{{int}, (int & any)}"); }
		@Test public void test_8522() { testInvalid("{{int, int}, {int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_8523() { testInvalid("{{int, int}, {int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_8524() { testInvalid("{{int, int}, {int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_8525() { testInvalid("{{int, int}, {int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_8526() { testInvalid("{{int, int}, {int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_8527() { testInvalid("{{int, int}, {int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_8528() { testInvalid("{{int, int}, {int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_8529() { testInvalid("{{int, int}, {int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_8530() { testInvalid("{{int, int}, {int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_8531() { testInvalid("{{int, int}, {int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_8532() { testInvalid("{{int, int}, {int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_8533() { testInvalid("{{int, int}, {int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_8534() { testInvalid("{{int, int}, {int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_8535() { testInvalid("{{int, int}, {int, int}}","(!int | {any})"); }
		@Test public void test_8536() { testInvalid("{{int, int}, {int, int}}","({any, any} | {any})"); }
		@Test public void test_8537() { testInvalid("{{int, int}, {int, int}}","((any | any) | {any})"); }
		@Test public void test_8538() { testInvalid("{{int, int}, {int, int}}","((int | any) | {any})"); }
		@Test public void test_8539() { testInvalid("{{int, int}, {int, int}}","((any & any) | {any})"); }
		@Test public void test_8540() { testInvalid("{{int, int}, {int, int}}","((int & any) | {any})"); }
		@Test public void test_8541() { testInvalid("{{int, int}, {int, int}}","((any & int) | {any})"); }
		@Test public void test_8542() { testInvalid("{{int, int}, {int, int}}","({int} | {int})"); }
		@Test public void test_8543() { testInvalid("{{int, int}, {int, int}}","(!any | {int})"); }
		@Test public void test_8544() { testInvalid("{{int, int}, {int, int}}","(!int | {int})"); }
		@Test public void test_8545() { testInvalid("{{int, int}, {int, int}}","({any, int} | {int})"); }
		@Test public void test_8546() { testInvalid("{{int, int}, {int, int}}","((int & any) | {int})"); }
		@Test public void test_8547() { testInvalid("{{int, int}, {int, int}}","((any & int) | {int})"); }
		@Test public void test_8548() { testInvalid("{{int, int}, {int, int}}","((int & int) | {int})"); }
		@Test public void test_8549() { testInvalid("{{int, int}, {int, int}}","({any} | !any)"); }
		@Test public void test_8550() { testInvalid("{{int, int}, {int, int}}","({int} | !any)"); }
		@Test public void test_8551() { testInvalid("{{int, int}, {int, int}}","({any, any} | !any)"); }
		@Test public void test_8552() { testInvalid("{{int, int}, {int, int}}","({int, int} | !any)"); }
		@Test public void test_8553() { testInvalid("{{int, int}, {int, int}}","((any | any) | !any)"); }
		@Test public void test_8554() { testInvalid("{{int, int}, {int, int}}","((int | any) | !any)"); }
		@Test public void test_8555() { testInvalid("{{int, int}, {int, int}}","((int | int) | !any)"); }
		@Test public void test_8556() { testInvalid("{{int, int}, {int, int}}","((int & int) | !any)"); }
		@Test public void test_8557() { testInvalid("{{int, int}, {int, int}}","(!int | !int)"); }
		@Test public void test_8558() { testInvalid("{{int, int}, {int, int}}","({any, any} | !int)"); }
		@Test public void test_8559() { testInvalid("{{int, int}, {int, int}}","({int, int} | !int)"); }
		@Test public void test_8560() { testInvalid("{{int, int}, {int, int}}","((int | any) | !int)"); }
		@Test public void test_8561() { testInvalid("{{int, int}, {int, int}}","((any | int) | !int)"); }
		@Test public void test_8562() { testInvalid("{{int, int}, {int, int}}","((any & int) | !int)"); }
		@Test public void test_8563() { testInvalid("{{int, int}, {int, int}}","((int & int) | !int)"); }
		@Test public void test_8564() { testInvalid("{{int, int}, {int, int}}","({int} | {any, any})"); }
		@Test public void test_8565() { testInvalid("{{int, int}, {int, int}}","(!any | {any, any})"); }
		@Test public void test_8566() { testInvalid("{{int, int}, {int, int}}","(!int | {any, any})"); }
		@Test public void test_8567() { testInvalid("{{int, int}, {int, int}}","({any, int} | {any, any})"); }
		@Test public void test_8568() { testInvalid("{{int, int}, {int, int}}","((int | any) | {any, any})"); }
		@Test public void test_8569() { testInvalid("{{int, int}, {int, int}}","((any & any) | {any, any})"); }
		@Test public void test_8570() { testInvalid("{{int, int}, {int, int}}","((any & int) | {any, any})"); }
		@Test public void test_8571() { testInvalid("{{int, int}, {int, int}}","(!int | {int, any})"); }
		@Test public void test_8572() { testInvalid("{{int, int}, {int, int}}","({any, int} | {int, any})"); }
		@Test public void test_8573() { testInvalid("{{int, int}, {int, int}}","((any | any) | {int, any})"); }
		@Test public void test_8574() { testInvalid("{{int, int}, {int, int}}","((int | any) | {int, any})"); }
		@Test public void test_8575() { testInvalid("{{int, int}, {int, int}}","((any | int) | {int, any})"); }
		@Test public void test_8576() { testInvalid("{{int, int}, {int, int}}","((int & any) | {int, any})"); }
		@Test public void test_8577() { testInvalid("{{int, int}, {int, int}}","({any} | {any, int})"); }
		@Test public void test_8578() { testInvalid("{{int, int}, {int, int}}","(!int | {any, int})"); }
		@Test public void test_8579() { testInvalid("{{int, int}, {int, int}}","({any, int} | {any, int})"); }
		@Test public void test_8580() { testInvalid("{{int, int}, {int, int}}","((any | any) | {any, int})"); }
		@Test public void test_8581() { testInvalid("{{int, int}, {int, int}}","((any | int) | {any, int})"); }
		@Test public void test_8582() { testInvalid("{{int, int}, {int, int}}","((int | int) | {any, int})"); }
		@Test public void test_8583() { testInvalid("{{int, int}, {int, int}}","((int & any) | {any, int})"); }
		@Test public void test_8584() { testInvalid("{{int, int}, {int, int}}","(!any | {int, int})"); }
		@Test public void test_8585() { testInvalid("{{int, int}, {int, int}}","(!int | {int, int})"); }
		@Test public void test_8586() { testInvalid("{{int, int}, {int, int}}","({any, any} | {int, int})"); }
		@Test public void test_8587() { testInvalid("{{int, int}, {int, int}}","({any, int} | {int, int})"); }
		@Test public void test_8588() { testInvalid("{{int, int}, {int, int}}","((any | any) | {int, int})"); }
		@Test public void test_8589() { testInvalid("{{int, int}, {int, int}}","((int | int) | {int, int})"); }
		@Test public void test_8590() { testInvalid("{{int, int}, {int, int}}","((int & any) | {int, int})"); }
		@Test public void test_8591() { testInvalid("{{int, int}, {int, int}}","((any & int) | {int, int})"); }
		@Test public void test_8592() { testInvalid("{{int, int}, {int, int}}","((int & int) | {int, int})"); }
		@Test public void test_8593() { testInvalid("{{int, int}, {int, int}}","({any} | (any | any))"); }
		@Test public void test_8594() { testInvalid("{{int, int}, {int, int}}","(!any | (any | any))"); }
		@Test public void test_8595() { testInvalid("{{int, int}, {int, int}}","({any, any} | (any | any))"); }
		@Test public void test_8596() { testInvalid("{{int, int}, {int, int}}","({any, int} | (any | any))"); }
		@Test public void test_8597() { testInvalid("{{int, int}, {int, int}}","({int, int} | (any | any))"); }
		@Test public void test_8598() { testInvalid("{{int, int}, {int, int}}","((int | any) | (any | any))"); }
		@Test public void test_8599() { testInvalid("{{int, int}, {int, int}}","((any | int) | (any | any))"); }
		@Test public void test_8600() { testInvalid("{{int, int}, {int, int}}","((any & int) | (any | any))"); }
		@Test public void test_8601() { testInvalid("{{int, int}, {int, int}}","((int & int) | (any | any))"); }
		@Test public void test_8602() { testInvalid("{{int, int}, {int, int}}","({any} | (int | any))"); }
		@Test public void test_8603() { testInvalid("{{int, int}, {int, int}}","(!int | (int | any))"); }
		@Test public void test_8604() { testInvalid("{{int, int}, {int, int}}","({int, any} | (int | any))"); }
		@Test public void test_8605() { testInvalid("{{int, int}, {int, int}}","({any, int} | (int | any))"); }
		@Test public void test_8606() { testInvalid("{{int, int}, {int, int}}","((int & any) | (int | any))"); }
		@Test public void test_8607() { testInvalid("{{int, int}, {int, int}}","((any & int) | (int | any))"); }
		@Test public void test_8608() { testInvalid("{{int, int}, {int, int}}","({any} | (any | int))"); }
		@Test public void test_8609() { testInvalid("{{int, int}, {int, int}}","({int} | (any | int))"); }
		@Test public void test_8610() { testInvalid("{{int, int}, {int, int}}","(!any | (any | int))"); }
		@Test public void test_8611() { testInvalid("{{int, int}, {int, int}}","(!int | (any | int))"); }
		@Test public void test_8612() { testInvalid("{{int, int}, {int, int}}","({any, int} | (any | int))"); }
		@Test public void test_8613() { testInvalid("{{int, int}, {int, int}}","({int, int} | (any | int))"); }
		@Test public void test_8614() { testInvalid("{{int, int}, {int, int}}","((int | any) | (any | int))"); }
		@Test public void test_8615() { testInvalid("{{int, int}, {int, int}}","((any | int) | (any | int))"); }
		@Test public void test_8616() { testInvalid("{{int, int}, {int, int}}","((int | int) | (any | int))"); }
		@Test public void test_8617() { testInvalid("{{int, int}, {int, int}}","((any & any) | (any | int))"); }
		@Test public void test_8618() { testInvalid("{{int, int}, {int, int}}","({int} | (int | int))"); }
		@Test public void test_8619() { testInvalid("{{int, int}, {int, int}}","(!any | (int | int))"); }
		@Test public void test_8620() { testInvalid("{{int, int}, {int, int}}","(!int | (int | int))"); }
		@Test public void test_8621() { testInvalid("{{int, int}, {int, int}}","({int, any} | (int | int))"); }
		@Test public void test_8622() { testInvalid("{{int, int}, {int, int}}","({any, int} | (int | int))"); }
		@Test public void test_8623() { testInvalid("{{int, int}, {int, int}}","((any | int) | (int | int))"); }
		@Test public void test_8624() { testInvalid("{{int, int}, {int, int}}","((int | int) | (int | int))"); }
		@Test public void test_8625() { testInvalid("{{int, int}, {int, int}}","((any & any) | (int | int))"); }
		@Test public void test_8626() { testInvalid("{{int, int}, {int, int}}","((int & any) | (int | int))"); }
		@Test public void test_8627() { testInvalid("{{int, int}, {int, int}}","((int & int) | (int | int))"); }
		@Test public void test_8628() { testInvalid("{{int, int}, {int, int}}","(!any | (any & any))"); }
		@Test public void test_8629() { testInvalid("{{int, int}, {int, int}}","(!int | (any & any))"); }
		@Test public void test_8630() { testInvalid("{{int, int}, {int, int}}","({any, any} | (any & any))"); }
		@Test public void test_8631() { testInvalid("{{int, int}, {int, int}}","({int, any} | (any & any))"); }
		@Test public void test_8632() { testInvalid("{{int, int}, {int, int}}","({any, int} | (any & any))"); }
		@Test public void test_8633() { testInvalid("{{int, int}, {int, int}}","({int, int} | (any & any))"); }
		@Test public void test_8634() { testInvalid("{{int, int}, {int, int}}","((int | any) | (any & any))"); }
		@Test public void test_8635() { testInvalid("{{int, int}, {int, int}}","((int | int) | (any & any))"); }
		@Test public void test_8636() { testInvalid("{{int, int}, {int, int}}","((int & any) | (any & any))"); }
		@Test public void test_8637() { testInvalid("{{int, int}, {int, int}}","((any & int) | (any & any))"); }
		@Test public void test_8638() { testInvalid("{{int, int}, {int, int}}","((int & int) | (any & any))"); }
		@Test public void test_8639() { testInvalid("{{int, int}, {int, int}}","({any} | (int & any))"); }
		@Test public void test_8640() { testInvalid("{(any | any), {int, int}}","{int}"); }
		@Test public void test_8641() { testInvalid("{(any | any), {int, int}}","{any, any}"); }
		@Test public void test_8642() { testInvalid("{(any | any), {int, int}}","{int, int}"); }
		@Test public void test_8643() { testInvalid("{(any | any), {int, int}}","(any | int)"); }
		@Test public void test_8644() { testInvalid("{(any | any), {int, int}}","(int & any)"); }
		@Test public void test_8645() { testInvalid("{(any | any), {int, int}}","{{any}}"); }
		@Test public void test_8646() { testInvalid("{(any | any), {int, int}}","{{int, any}}"); }
		@Test public void test_8647() { testInvalid("{(any | any), {int, int}}","{{int, int}}"); }
		@Test public void test_8648() { testInvalid("{(any | any), {int, int}}","{(any | int)}"); }
		@Test public void test_8649() { testInvalid("{(any | any), {int, int}}","!{int, any}"); }
		@Test public void test_8650() { testInvalid("{(any | any), {int, int}}","!{int, int}"); }
		@Test public void test_8651() { testValid("{(any | any), {int, int}}","!(any | any)"); }
		@Test public void test_8652() { testValid("{(any | any), {int, int}}","!(any & any)"); }
		@Test public void test_8653() { testInvalid("{(any | any), {int, int}}","!(int & int)"); }
		@Test public void test_8654() { testInvalid("{(any | any), {int, int}}","{{int}, {any}}"); }
		@Test public void test_8655() { testInvalid("{(any | any), {int, int}}","{!int, {any}}"); }
		@Test public void test_8656() { testInvalid("{(any | any), {int, int}}","{{int, int}, {any}}"); }
		@Test public void test_8657() { testInvalid("{(any | any), {int, int}}","{(any | int), {any}}"); }
		@Test public void test_8658() { testInvalid("{(any | any), {int, int}}","{!int, {int}}"); }
		@Test public void test_8659() { testInvalid("{(any | any), {int, int}}","{{any, any}, {int}}"); }
		@Test public void test_8660() { testInvalid("{(any | any), {int, int}}","{(any | any), {int}}"); }
		@Test public void test_8661() { testInvalid("{(any | any), {int, int}}","{(any & any), {int}}"); }
		@Test public void test_8662() { testInvalid("{(any | any), {int, int}}","{(any & int), {int}}"); }
		@Test public void test_8663() { testInvalid("{(any | any), {int, int}}","{{any, any}, !int}"); }
		@Test public void test_8664() { testInvalid("{(any | any), {int, int}}","{{any, int}, !int}"); }
		@Test public void test_8665() { testInvalid("{(any | any), {int, int}}","{(any | any), !int}"); }
		@Test public void test_8666() { testInvalid("{(any | any), {int, int}}","{(int | any), !int}"); }
		@Test public void test_8667() { testInvalid("{(any | any), {int, int}}","{(any & any), !int}"); }
		@Test public void test_8668() { testInvalid("{(any | any), {int, int}}","{(int & any), !int}"); }
		@Test public void test_8669() { testInvalid("{(any | any), {int, int}}","{(int & int), !int}"); }
		@Test public void test_8670() { testInvalid("{(any | any), {int, int}}","{{any}, {any, any}}"); }
		@Test public void test_8671() { testInvalid("{(any | any), {int, int}}","{{int}, {any, any}}"); }
		@Test public void test_8672() { testInvalid("{(any | any), {int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_8673() { testInvalid("{(any | any), {int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_8674() { testInvalid("{(any | any), {int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_8675() { testInvalid("{(any | any), {int, int}}","{!int, {int, any}}"); }
		@Test public void test_8676() { testInvalid("{(any | any), {int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_8677() { testInvalid("{(any | any), {int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_8678() { testInvalid("{(any | any), {int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_8679() { testInvalid("{(any | any), {int, int}}","{{any}, {any, int}}"); }
		@Test public void test_8680() { testInvalid("{(any | any), {int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_8681() { testInvalid("{(any | any), {int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_8682() { testInvalid("{(any | any), {int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_8683() { testValid("{(any | any), {int, int}}","{!int, {int, int}}"); }
		@Test public void test_8684() { testValid("{(any | any), {int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_8685() { testValid("{(any | any), {int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_8686() { testValid("{(any | any), {int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_8687() { testValid("{(any | any), {int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_8688() { testInvalid("{(any | any), {int, int}}","{{int}, (any | any)}"); }
		@Test public void test_8689() { testInvalid("{(any | any), {int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_8690() { testInvalid("{(any | any), {int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_8691() { testInvalid("{(any | any), {int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_8692() { testInvalid("{(any | any), {int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_8693() { testInvalid("{(any | any), {int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_8694() { testInvalid("{(any | any), {int, int}}","{!int, (int | any)}"); }
		@Test public void test_8695() { testInvalid("{(any | any), {int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_8696() { testInvalid("{(any | any), {int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_8697() { testInvalid("{(any | any), {int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_8698() { testInvalid("{(any | any), {int, int}}","{{any}, (any | int)}"); }
		@Test public void test_8699() { testInvalid("{(any | any), {int, int}}","{!int, (any | int)}"); }
		@Test public void test_8700() { testInvalid("{(any | any), {int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_8701() { testInvalid("{(any | any), {int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_8702() { testInvalid("{(any | any), {int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_8703() { testInvalid("{(any | any), {int, int}}","{{int}, (int | int)}"); }
		@Test public void test_8704() { testInvalid("{(any | any), {int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_8705() { testInvalid("{(any | any), {int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_8706() { testInvalid("{(any | any), {int, int}}","{{int}, (any & any)}"); }
		@Test public void test_8707() { testInvalid("{(any | any), {int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_8708() { testInvalid("{(any | any), {int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_8709() { testInvalid("{(any | any), {int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_8710() { testInvalid("{(any | any), {int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_8711() { testInvalid("{(any | any), {int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_8712() { testInvalid("{(any | any), {int, int}}","{{any}, (int & any)}"); }
		@Test public void test_8713() { testInvalid("{(any | any), {int, int}}","{{int}, (int & any)}"); }
		@Test public void test_8714() { testInvalid("{(any | any), {int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_8715() { testInvalid("{(any | any), {int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_8716() { testInvalid("{(any | any), {int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_8717() { testInvalid("{(any | any), {int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_8718() { testInvalid("{(any | any), {int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_8719() { testInvalid("{(any | any), {int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_8720() { testInvalid("{(any | any), {int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_8721() { testInvalid("{(any | any), {int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_8722() { testInvalid("{(any | any), {int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_8723() { testInvalid("{(any | any), {int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_8724() { testInvalid("{(any | any), {int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_8725() { testInvalid("{(any | any), {int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_8726() { testInvalid("{(any | any), {int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_8727() { testInvalid("{(any | any), {int, int}}","(!int | {any})"); }
		@Test public void test_8728() { testInvalid("{(any | any), {int, int}}","({any, any} | {any})"); }
		@Test public void test_8729() { testInvalid("{(any | any), {int, int}}","((any | any) | {any})"); }
		@Test public void test_8730() { testInvalid("{(any | any), {int, int}}","((int | any) | {any})"); }
		@Test public void test_8731() { testInvalid("{(any | any), {int, int}}","((any & any) | {any})"); }
		@Test public void test_8732() { testInvalid("{(any | any), {int, int}}","((int & any) | {any})"); }
		@Test public void test_8733() { testInvalid("{(any | any), {int, int}}","((any & int) | {any})"); }
		@Test public void test_8734() { testInvalid("{(any | any), {int, int}}","({int} | {int})"); }
		@Test public void test_8735() { testInvalid("{(any | any), {int, int}}","(!any | {int})"); }
		@Test public void test_8736() { testInvalid("{(any | any), {int, int}}","(!int | {int})"); }
		@Test public void test_8737() { testInvalid("{(any | any), {int, int}}","({any, int} | {int})"); }
		@Test public void test_8738() { testInvalid("{(any | any), {int, int}}","((int & any) | {int})"); }
		@Test public void test_8739() { testInvalid("{(any | any), {int, int}}","((any & int) | {int})"); }
		@Test public void test_8740() { testInvalid("{(any | any), {int, int}}","((int & int) | {int})"); }
		@Test public void test_8741() { testInvalid("{(any | any), {int, int}}","({any} | !any)"); }
		@Test public void test_8742() { testInvalid("{(any | any), {int, int}}","({int} | !any)"); }
		@Test public void test_8743() { testInvalid("{(any | any), {int, int}}","({any, any} | !any)"); }
		@Test public void test_8744() { testInvalid("{(any | any), {int, int}}","({int, int} | !any)"); }
		@Test public void test_8745() { testInvalid("{(any | any), {int, int}}","((any | any) | !any)"); }
		@Test public void test_8746() { testInvalid("{(any | any), {int, int}}","((int | any) | !any)"); }
		@Test public void test_8747() { testInvalid("{(any | any), {int, int}}","((int | int) | !any)"); }
		@Test public void test_8748() { testInvalid("{(any | any), {int, int}}","((int & int) | !any)"); }
		@Test public void test_8749() { testInvalid("{(any | any), {int, int}}","(!int | !int)"); }
		@Test public void test_8750() { testInvalid("{(any | any), {int, int}}","({any, any} | !int)"); }
		@Test public void test_8751() { testInvalid("{(any | any), {int, int}}","({int, int} | !int)"); }
		@Test public void test_8752() { testInvalid("{(any | any), {int, int}}","((int | any) | !int)"); }
		@Test public void test_8753() { testInvalid("{(any | any), {int, int}}","((any | int) | !int)"); }
		@Test public void test_8754() { testInvalid("{(any | any), {int, int}}","((any & int) | !int)"); }
		@Test public void test_8755() { testInvalid("{(any | any), {int, int}}","((int & int) | !int)"); }
		@Test public void test_8756() { testInvalid("{(any | any), {int, int}}","({int} | {any, any})"); }
		@Test public void test_8757() { testInvalid("{(any | any), {int, int}}","(!any | {any, any})"); }
		@Test public void test_8758() { testInvalid("{(any | any), {int, int}}","(!int | {any, any})"); }
		@Test public void test_8759() { testInvalid("{(any | any), {int, int}}","({any, int} | {any, any})"); }
		@Test public void test_8760() { testInvalid("{(any | any), {int, int}}","((int | any) | {any, any})"); }
		@Test public void test_8761() { testInvalid("{(any | any), {int, int}}","((any & any) | {any, any})"); }
		@Test public void test_8762() { testInvalid("{(any | any), {int, int}}","((any & int) | {any, any})"); }
		@Test public void test_8763() { testInvalid("{(any | any), {int, int}}","(!int | {int, any})"); }
		@Test public void test_8764() { testInvalid("{(any | any), {int, int}}","({any, int} | {int, any})"); }
		@Test public void test_8765() { testInvalid("{(any | any), {int, int}}","((any | any) | {int, any})"); }
		@Test public void test_8766() { testInvalid("{(any | any), {int, int}}","((int | any) | {int, any})"); }
		@Test public void test_8767() { testInvalid("{(any | any), {int, int}}","((any | int) | {int, any})"); }
		@Test public void test_8768() { testInvalid("{(any | any), {int, int}}","((int & any) | {int, any})"); }
		@Test public void test_8769() { testInvalid("{(any | any), {int, int}}","({any} | {any, int})"); }
		@Test public void test_8770() { testInvalid("{(any | any), {int, int}}","(!int | {any, int})"); }
		@Test public void test_8771() { testInvalid("{(any | any), {int, int}}","({any, int} | {any, int})"); }
		@Test public void test_8772() { testInvalid("{(any | any), {int, int}}","((any | any) | {any, int})"); }
		@Test public void test_8773() { testInvalid("{(any | any), {int, int}}","((any | int) | {any, int})"); }
		@Test public void test_8774() { testInvalid("{(any | any), {int, int}}","((int | int) | {any, int})"); }
		@Test public void test_8775() { testInvalid("{(any | any), {int, int}}","((int & any) | {any, int})"); }
		@Test public void test_8776() { testInvalid("{(any | any), {int, int}}","(!any | {int, int})"); }
		@Test public void test_8777() { testInvalid("{(any | any), {int, int}}","(!int | {int, int})"); }
		@Test public void test_8778() { testInvalid("{(any | any), {int, int}}","({any, any} | {int, int})"); }
		@Test public void test_8779() { testInvalid("{(any | any), {int, int}}","({any, int} | {int, int})"); }
		@Test public void test_8780() { testInvalid("{(any | any), {int, int}}","((any | any) | {int, int})"); }
		@Test public void test_8781() { testInvalid("{(any | any), {int, int}}","((int | int) | {int, int})"); }
		@Test public void test_8782() { testInvalid("{(any | any), {int, int}}","((int & any) | {int, int})"); }
		@Test public void test_8783() { testInvalid("{(any | any), {int, int}}","((any & int) | {int, int})"); }
		@Test public void test_8784() { testInvalid("{(any | any), {int, int}}","((int & int) | {int, int})"); }
		@Test public void test_8785() { testInvalid("{(any | any), {int, int}}","({any} | (any | any))"); }
		@Test public void test_8786() { testInvalid("{(any | any), {int, int}}","(!any | (any | any))"); }
		@Test public void test_8787() { testInvalid("{(any | any), {int, int}}","({any, any} | (any | any))"); }
		@Test public void test_8788() { testInvalid("{(any | any), {int, int}}","({any, int} | (any | any))"); }
		@Test public void test_8789() { testInvalid("{(any | any), {int, int}}","({int, int} | (any | any))"); }
		@Test public void test_8790() { testInvalid("{(any | any), {int, int}}","((int | any) | (any | any))"); }
		@Test public void test_8791() { testInvalid("{(any | any), {int, int}}","((any | int) | (any | any))"); }
		@Test public void test_8792() { testInvalid("{(any | any), {int, int}}","((any & int) | (any | any))"); }
		@Test public void test_8793() { testInvalid("{(any | any), {int, int}}","((int & int) | (any | any))"); }
		@Test public void test_8794() { testInvalid("{(any | any), {int, int}}","({any} | (int | any))"); }
		@Test public void test_8795() { testInvalid("{(any | any), {int, int}}","(!int | (int | any))"); }
		@Test public void test_8796() { testInvalid("{(any | any), {int, int}}","({int, any} | (int | any))"); }
		@Test public void test_8797() { testInvalid("{(any | any), {int, int}}","({any, int} | (int | any))"); }
		@Test public void test_8798() { testInvalid("{(any | any), {int, int}}","((int & any) | (int | any))"); }
		@Test public void test_8799() { testInvalid("{(any | any), {int, int}}","((any & int) | (int | any))"); }
		@Test public void test_8800() { testInvalid("{(any | any), {int, int}}","({any} | (any | int))"); }
		@Test public void test_8801() { testInvalid("{(any | any), {int, int}}","({int} | (any | int))"); }
		@Test public void test_8802() { testInvalid("{(any | any), {int, int}}","(!any | (any | int))"); }
		@Test public void test_8803() { testInvalid("{(any | any), {int, int}}","(!int | (any | int))"); }
		@Test public void test_8804() { testInvalid("{(any | any), {int, int}}","({any, int} | (any | int))"); }
		@Test public void test_8805() { testInvalid("{(any | any), {int, int}}","({int, int} | (any | int))"); }
		@Test public void test_8806() { testInvalid("{(any | any), {int, int}}","((int | any) | (any | int))"); }
		@Test public void test_8807() { testInvalid("{(any | any), {int, int}}","((any | int) | (any | int))"); }
		@Test public void test_8808() { testInvalid("{(any | any), {int, int}}","((int | int) | (any | int))"); }
		@Test public void test_8809() { testInvalid("{(any | any), {int, int}}","((any & any) | (any | int))"); }
		@Test public void test_8810() { testInvalid("{(any | any), {int, int}}","({int} | (int | int))"); }
		@Test public void test_8811() { testInvalid("{(any | any), {int, int}}","(!any | (int | int))"); }
		@Test public void test_8812() { testInvalid("{(any | any), {int, int}}","(!int | (int | int))"); }
		@Test public void test_8813() { testInvalid("{(any | any), {int, int}}","({int, any} | (int | int))"); }
		@Test public void test_8814() { testInvalid("{(any | any), {int, int}}","({any, int} | (int | int))"); }
		@Test public void test_8815() { testInvalid("{(any | any), {int, int}}","((any | int) | (int | int))"); }
		@Test public void test_8816() { testInvalid("{(any | any), {int, int}}","((int | int) | (int | int))"); }
		@Test public void test_8817() { testInvalid("{(any | any), {int, int}}","((any & any) | (int | int))"); }
		@Test public void test_8818() { testInvalid("{(any | any), {int, int}}","((int & any) | (int | int))"); }
		@Test public void test_8819() { testInvalid("{(any | any), {int, int}}","((int & int) | (int | int))"); }
		@Test public void test_8820() { testInvalid("{(any | any), {int, int}}","(!any | (any & any))"); }
		@Test public void test_8821() { testInvalid("{(any | any), {int, int}}","(!int | (any & any))"); }
		@Test public void test_8822() { testInvalid("{(any | any), {int, int}}","({any, any} | (any & any))"); }
		@Test public void test_8823() { testInvalid("{(any | any), {int, int}}","({int, any} | (any & any))"); }
		@Test public void test_8824() { testInvalid("{(any | any), {int, int}}","({any, int} | (any & any))"); }
		@Test public void test_8825() { testInvalid("{(any | any), {int, int}}","({int, int} | (any & any))"); }
		@Test public void test_8826() { testInvalid("{(any | any), {int, int}}","((int | any) | (any & any))"); }
		@Test public void test_8827() { testInvalid("{(any | any), {int, int}}","((int | int) | (any & any))"); }
		@Test public void test_8828() { testInvalid("{(any | any), {int, int}}","((int & any) | (any & any))"); }
		@Test public void test_8829() { testInvalid("{(any | any), {int, int}}","((any & int) | (any & any))"); }
		@Test public void test_8830() { testInvalid("{(any | any), {int, int}}","((int & int) | (any & any))"); }
		@Test public void test_8831() { testInvalid("{(any | any), {int, int}}","({any} | (int & any))"); }
		@Test public void test_8832() { testInvalid("{(int | any), {int, int}}","{int}"); }
		@Test public void test_8833() { testInvalid("{(int | any), {int, int}}","{any, any}"); }
		@Test public void test_8834() { testInvalid("{(int | any), {int, int}}","{int, int}"); }
		@Test public void test_8835() { testInvalid("{(int | any), {int, int}}","(any | int)"); }
		@Test public void test_8836() { testInvalid("{(int | any), {int, int}}","(int & any)"); }
		@Test public void test_8837() { testInvalid("{(int | any), {int, int}}","{{any}}"); }
		@Test public void test_8838() { testInvalid("{(int | any), {int, int}}","{{int, any}}"); }
		@Test public void test_8839() { testInvalid("{(int | any), {int, int}}","{{int, int}}"); }
		@Test public void test_8840() { testInvalid("{(int | any), {int, int}}","{(any | int)}"); }
		@Test public void test_8841() { testInvalid("{(int | any), {int, int}}","!{int, any}"); }
		@Test public void test_8842() { testInvalid("{(int | any), {int, int}}","!{int, int}"); }
		@Test public void test_8843() { testValid("{(int | any), {int, int}}","!(any | any)"); }
		@Test public void test_8844() { testValid("{(int | any), {int, int}}","!(any & any)"); }
		@Test public void test_8845() { testInvalid("{(int | any), {int, int}}","!(int & int)"); }
		@Test public void test_8846() { testInvalid("{(int | any), {int, int}}","{{int}, {any}}"); }
		@Test public void test_8847() { testInvalid("{(int | any), {int, int}}","{!int, {any}}"); }
		@Test public void test_8848() { testInvalid("{(int | any), {int, int}}","{{int, int}, {any}}"); }
		@Test public void test_8849() { testInvalid("{(int | any), {int, int}}","{(any | int), {any}}"); }
		@Test public void test_8850() { testInvalid("{(int | any), {int, int}}","{!int, {int}}"); }
		@Test public void test_8851() { testInvalid("{(int | any), {int, int}}","{{any, any}, {int}}"); }
		@Test public void test_8852() { testInvalid("{(int | any), {int, int}}","{(any | any), {int}}"); }
		@Test public void test_8853() { testInvalid("{(int | any), {int, int}}","{(any & any), {int}}"); }
		@Test public void test_8854() { testInvalid("{(int | any), {int, int}}","{(any & int), {int}}"); }
		@Test public void test_8855() { testInvalid("{(int | any), {int, int}}","{{any, any}, !int}"); }
		@Test public void test_8856() { testInvalid("{(int | any), {int, int}}","{{any, int}, !int}"); }
		@Test public void test_8857() { testInvalid("{(int | any), {int, int}}","{(any | any), !int}"); }
		@Test public void test_8858() { testInvalid("{(int | any), {int, int}}","{(int | any), !int}"); }
		@Test public void test_8859() { testInvalid("{(int | any), {int, int}}","{(any & any), !int}"); }
		@Test public void test_8860() { testInvalid("{(int | any), {int, int}}","{(int & any), !int}"); }
		@Test public void test_8861() { testInvalid("{(int | any), {int, int}}","{(int & int), !int}"); }
		@Test public void test_8862() { testInvalid("{(int | any), {int, int}}","{{any}, {any, any}}"); }
		@Test public void test_8863() { testInvalid("{(int | any), {int, int}}","{{int}, {any, any}}"); }
		@Test public void test_8864() { testInvalid("{(int | any), {int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_8865() { testInvalid("{(int | any), {int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_8866() { testInvalid("{(int | any), {int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_8867() { testInvalid("{(int | any), {int, int}}","{!int, {int, any}}"); }
		@Test public void test_8868() { testInvalid("{(int | any), {int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_8869() { testInvalid("{(int | any), {int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_8870() { testInvalid("{(int | any), {int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_8871() { testInvalid("{(int | any), {int, int}}","{{any}, {any, int}}"); }
		@Test public void test_8872() { testInvalid("{(int | any), {int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_8873() { testInvalid("{(int | any), {int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_8874() { testInvalid("{(int | any), {int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_8875() { testValid("{(int | any), {int, int}}","{!int, {int, int}}"); }
		@Test public void test_8876() { testValid("{(int | any), {int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_8877() { testValid("{(int | any), {int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_8878() { testValid("{(int | any), {int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_8879() { testValid("{(int | any), {int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_8880() { testInvalid("{(int | any), {int, int}}","{{int}, (any | any)}"); }
		@Test public void test_8881() { testInvalid("{(int | any), {int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_8882() { testInvalid("{(int | any), {int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_8883() { testInvalid("{(int | any), {int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_8884() { testInvalid("{(int | any), {int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_8885() { testInvalid("{(int | any), {int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_8886() { testInvalid("{(int | any), {int, int}}","{!int, (int | any)}"); }
		@Test public void test_8887() { testInvalid("{(int | any), {int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_8888() { testInvalid("{(int | any), {int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_8889() { testInvalid("{(int | any), {int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_8890() { testInvalid("{(int | any), {int, int}}","{{any}, (any | int)}"); }
		@Test public void test_8891() { testInvalid("{(int | any), {int, int}}","{!int, (any | int)}"); }
		@Test public void test_8892() { testInvalid("{(int | any), {int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_8893() { testInvalid("{(int | any), {int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_8894() { testInvalid("{(int | any), {int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_8895() { testInvalid("{(int | any), {int, int}}","{{int}, (int | int)}"); }
		@Test public void test_8896() { testInvalid("{(int | any), {int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_8897() { testInvalid("{(int | any), {int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_8898() { testInvalid("{(int | any), {int, int}}","{{int}, (any & any)}"); }
		@Test public void test_8899() { testInvalid("{(int | any), {int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_8900() { testInvalid("{(int | any), {int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_8901() { testInvalid("{(int | any), {int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_8902() { testInvalid("{(int | any), {int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_8903() { testInvalid("{(int | any), {int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_8904() { testInvalid("{(int | any), {int, int}}","{{any}, (int & any)}"); }
		@Test public void test_8905() { testInvalid("{(int | any), {int, int}}","{{int}, (int & any)}"); }
		@Test public void test_8906() { testInvalid("{(int | any), {int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_8907() { testInvalid("{(int | any), {int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_8908() { testInvalid("{(int | any), {int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_8909() { testInvalid("{(int | any), {int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_8910() { testInvalid("{(int | any), {int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_8911() { testInvalid("{(int | any), {int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_8912() { testInvalid("{(int | any), {int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_8913() { testInvalid("{(int | any), {int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_8914() { testInvalid("{(int | any), {int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_8915() { testInvalid("{(int | any), {int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_8916() { testInvalid("{(int | any), {int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_8917() { testInvalid("{(int | any), {int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_8918() { testInvalid("{(int | any), {int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_8919() { testInvalid("{(int | any), {int, int}}","(!int | {any})"); }
		@Test public void test_8920() { testInvalid("{(int | any), {int, int}}","({any, any} | {any})"); }
		@Test public void test_8921() { testInvalid("{(int | any), {int, int}}","((any | any) | {any})"); }
		@Test public void test_8922() { testInvalid("{(int | any), {int, int}}","((int | any) | {any})"); }
		@Test public void test_8923() { testInvalid("{(int | any), {int, int}}","((any & any) | {any})"); }
		@Test public void test_8924() { testInvalid("{(int | any), {int, int}}","((int & any) | {any})"); }
		@Test public void test_8925() { testInvalid("{(int | any), {int, int}}","((any & int) | {any})"); }
		@Test public void test_8926() { testInvalid("{(int | any), {int, int}}","({int} | {int})"); }
		@Test public void test_8927() { testInvalid("{(int | any), {int, int}}","(!any | {int})"); }
		@Test public void test_8928() { testInvalid("{(int | any), {int, int}}","(!int | {int})"); }
		@Test public void test_8929() { testInvalid("{(int | any), {int, int}}","({any, int} | {int})"); }
		@Test public void test_8930() { testInvalid("{(int | any), {int, int}}","((int & any) | {int})"); }
		@Test public void test_8931() { testInvalid("{(int | any), {int, int}}","((any & int) | {int})"); }
		@Test public void test_8932() { testInvalid("{(int | any), {int, int}}","((int & int) | {int})"); }
		@Test public void test_8933() { testInvalid("{(int | any), {int, int}}","({any} | !any)"); }
		@Test public void test_8934() { testInvalid("{(int | any), {int, int}}","({int} | !any)"); }
		@Test public void test_8935() { testInvalid("{(int | any), {int, int}}","({any, any} | !any)"); }
		@Test public void test_8936() { testInvalid("{(int | any), {int, int}}","({int, int} | !any)"); }
		@Test public void test_8937() { testInvalid("{(int | any), {int, int}}","((any | any) | !any)"); }
		@Test public void test_8938() { testInvalid("{(int | any), {int, int}}","((int | any) | !any)"); }
		@Test public void test_8939() { testInvalid("{(int | any), {int, int}}","((int | int) | !any)"); }
		@Test public void test_8940() { testInvalid("{(int | any), {int, int}}","((int & int) | !any)"); }
		@Test public void test_8941() { testInvalid("{(int | any), {int, int}}","(!int | !int)"); }
		@Test public void test_8942() { testInvalid("{(int | any), {int, int}}","({any, any} | !int)"); }
		@Test public void test_8943() { testInvalid("{(int | any), {int, int}}","({int, int} | !int)"); }
		@Test public void test_8944() { testInvalid("{(int | any), {int, int}}","((int | any) | !int)"); }
		@Test public void test_8945() { testInvalid("{(int | any), {int, int}}","((any | int) | !int)"); }
		@Test public void test_8946() { testInvalid("{(int | any), {int, int}}","((any & int) | !int)"); }
		@Test public void test_8947() { testInvalid("{(int | any), {int, int}}","((int & int) | !int)"); }
		@Test public void test_8948() { testInvalid("{(int | any), {int, int}}","({int} | {any, any})"); }
		@Test public void test_8949() { testInvalid("{(int | any), {int, int}}","(!any | {any, any})"); }
		@Test public void test_8950() { testInvalid("{(int | any), {int, int}}","(!int | {any, any})"); }
		@Test public void test_8951() { testInvalid("{(int | any), {int, int}}","({any, int} | {any, any})"); }
		@Test public void test_8952() { testInvalid("{(int | any), {int, int}}","((int | any) | {any, any})"); }
		@Test public void test_8953() { testInvalid("{(int | any), {int, int}}","((any & any) | {any, any})"); }
		@Test public void test_8954() { testInvalid("{(int | any), {int, int}}","((any & int) | {any, any})"); }
		@Test public void test_8955() { testInvalid("{(int | any), {int, int}}","(!int | {int, any})"); }
		@Test public void test_8956() { testInvalid("{(int | any), {int, int}}","({any, int} | {int, any})"); }
		@Test public void test_8957() { testInvalid("{(int | any), {int, int}}","((any | any) | {int, any})"); }
		@Test public void test_8958() { testInvalid("{(int | any), {int, int}}","((int | any) | {int, any})"); }
		@Test public void test_8959() { testInvalid("{(int | any), {int, int}}","((any | int) | {int, any})"); }
		@Test public void test_8960() { testInvalid("{(int | any), {int, int}}","((int & any) | {int, any})"); }
		@Test public void test_8961() { testInvalid("{(int | any), {int, int}}","({any} | {any, int})"); }
		@Test public void test_8962() { testInvalid("{(int | any), {int, int}}","(!int | {any, int})"); }
		@Test public void test_8963() { testInvalid("{(int | any), {int, int}}","({any, int} | {any, int})"); }
		@Test public void test_8964() { testInvalid("{(int | any), {int, int}}","((any | any) | {any, int})"); }
		@Test public void test_8965() { testInvalid("{(int | any), {int, int}}","((any | int) | {any, int})"); }
		@Test public void test_8966() { testInvalid("{(int | any), {int, int}}","((int | int) | {any, int})"); }
		@Test public void test_8967() { testInvalid("{(int | any), {int, int}}","((int & any) | {any, int})"); }
		@Test public void test_8968() { testInvalid("{(int | any), {int, int}}","(!any | {int, int})"); }
		@Test public void test_8969() { testInvalid("{(int | any), {int, int}}","(!int | {int, int})"); }
		@Test public void test_8970() { testInvalid("{(int | any), {int, int}}","({any, any} | {int, int})"); }
		@Test public void test_8971() { testInvalid("{(int | any), {int, int}}","({any, int} | {int, int})"); }
		@Test public void test_8972() { testInvalid("{(int | any), {int, int}}","((any | any) | {int, int})"); }
		@Test public void test_8973() { testInvalid("{(int | any), {int, int}}","((int | int) | {int, int})"); }
		@Test public void test_8974() { testInvalid("{(int | any), {int, int}}","((int & any) | {int, int})"); }
		@Test public void test_8975() { testInvalid("{(int | any), {int, int}}","((any & int) | {int, int})"); }
		@Test public void test_8976() { testInvalid("{(int | any), {int, int}}","((int & int) | {int, int})"); }
		@Test public void test_8977() { testInvalid("{(int | any), {int, int}}","({any} | (any | any))"); }
		@Test public void test_8978() { testInvalid("{(int | any), {int, int}}","(!any | (any | any))"); }
		@Test public void test_8979() { testInvalid("{(int | any), {int, int}}","({any, any} | (any | any))"); }
		@Test public void test_8980() { testInvalid("{(int | any), {int, int}}","({any, int} | (any | any))"); }
		@Test public void test_8981() { testInvalid("{(int | any), {int, int}}","({int, int} | (any | any))"); }
		@Test public void test_8982() { testInvalid("{(int | any), {int, int}}","((int | any) | (any | any))"); }
		@Test public void test_8983() { testInvalid("{(int | any), {int, int}}","((any | int) | (any | any))"); }
		@Test public void test_8984() { testInvalid("{(int | any), {int, int}}","((any & int) | (any | any))"); }
		@Test public void test_8985() { testInvalid("{(int | any), {int, int}}","((int & int) | (any | any))"); }
		@Test public void test_8986() { testInvalid("{(int | any), {int, int}}","({any} | (int | any))"); }
		@Test public void test_8987() { testInvalid("{(int | any), {int, int}}","(!int | (int | any))"); }
		@Test public void test_8988() { testInvalid("{(int | any), {int, int}}","({int, any} | (int | any))"); }
		@Test public void test_8989() { testInvalid("{(int | any), {int, int}}","({any, int} | (int | any))"); }
		@Test public void test_8990() { testInvalid("{(int | any), {int, int}}","((int & any) | (int | any))"); }
		@Test public void test_8991() { testInvalid("{(int | any), {int, int}}","((any & int) | (int | any))"); }
		@Test public void test_8992() { testInvalid("{(int | any), {int, int}}","({any} | (any | int))"); }
		@Test public void test_8993() { testInvalid("{(int | any), {int, int}}","({int} | (any | int))"); }
		@Test public void test_8994() { testInvalid("{(int | any), {int, int}}","(!any | (any | int))"); }
		@Test public void test_8995() { testInvalid("{(int | any), {int, int}}","(!int | (any | int))"); }
		@Test public void test_8996() { testInvalid("{(int | any), {int, int}}","({any, int} | (any | int))"); }
		@Test public void test_8997() { testInvalid("{(int | any), {int, int}}","({int, int} | (any | int))"); }
		@Test public void test_8998() { testInvalid("{(int | any), {int, int}}","((int | any) | (any | int))"); }
		@Test public void test_8999() { testInvalid("{(int | any), {int, int}}","((any | int) | (any | int))"); }
		@Test public void test_9000() { testInvalid("{(int | any), {int, int}}","((int | int) | (any | int))"); }
		@Test public void test_9001() { testInvalid("{(int | any), {int, int}}","((any & any) | (any | int))"); }
		@Test public void test_9002() { testInvalid("{(int | any), {int, int}}","({int} | (int | int))"); }
		@Test public void test_9003() { testInvalid("{(int | any), {int, int}}","(!any | (int | int))"); }
		@Test public void test_9004() { testInvalid("{(int | any), {int, int}}","(!int | (int | int))"); }
		@Test public void test_9005() { testInvalid("{(int | any), {int, int}}","({int, any} | (int | int))"); }
		@Test public void test_9006() { testInvalid("{(int | any), {int, int}}","({any, int} | (int | int))"); }
		@Test public void test_9007() { testInvalid("{(int | any), {int, int}}","((any | int) | (int | int))"); }
		@Test public void test_9008() { testInvalid("{(int | any), {int, int}}","((int | int) | (int | int))"); }
		@Test public void test_9009() { testInvalid("{(int | any), {int, int}}","((any & any) | (int | int))"); }
		@Test public void test_9010() { testInvalid("{(int | any), {int, int}}","((int & any) | (int | int))"); }
		@Test public void test_9011() { testInvalid("{(int | any), {int, int}}","((int & int) | (int | int))"); }
		@Test public void test_9012() { testInvalid("{(int | any), {int, int}}","(!any | (any & any))"); }
		@Test public void test_9013() { testInvalid("{(int | any), {int, int}}","(!int | (any & any))"); }
		@Test public void test_9014() { testInvalid("{(int | any), {int, int}}","({any, any} | (any & any))"); }
		@Test public void test_9015() { testInvalid("{(int | any), {int, int}}","({int, any} | (any & any))"); }
		@Test public void test_9016() { testInvalid("{(int | any), {int, int}}","({any, int} | (any & any))"); }
		@Test public void test_9017() { testInvalid("{(int | any), {int, int}}","({int, int} | (any & any))"); }
		@Test public void test_9018() { testInvalid("{(int | any), {int, int}}","((int | any) | (any & any))"); }
		@Test public void test_9019() { testInvalid("{(int | any), {int, int}}","((int | int) | (any & any))"); }
		@Test public void test_9020() { testInvalid("{(int | any), {int, int}}","((int & any) | (any & any))"); }
		@Test public void test_9021() { testInvalid("{(int | any), {int, int}}","((any & int) | (any & any))"); }
		@Test public void test_9022() { testInvalid("{(int | any), {int, int}}","((int & int) | (any & any))"); }
		@Test public void test_9023() { testInvalid("{(int | any), {int, int}}","({any} | (int & any))"); }
		@Test public void test_9024() { testInvalid("{(int & any), {int, int}}","{int}"); }
		@Test public void test_9025() { testInvalid("{(int & any), {int, int}}","{any, any}"); }
		@Test public void test_9026() { testInvalid("{(int & any), {int, int}}","{int, int}"); }
		@Test public void test_9027() { testInvalid("{(int & any), {int, int}}","(any | int)"); }
		@Test public void test_9028() { testInvalid("{(int & any), {int, int}}","(int & any)"); }
		@Test public void test_9029() { testInvalid("{(int & any), {int, int}}","{{any}}"); }
		@Test public void test_9030() { testInvalid("{(int & any), {int, int}}","{{int, any}}"); }
		@Test public void test_9031() { testInvalid("{(int & any), {int, int}}","{{int, int}}"); }
		@Test public void test_9032() { testInvalid("{(int & any), {int, int}}","{(any | int)}"); }
		@Test public void test_9033() { testInvalid("{(int & any), {int, int}}","!{int, any}"); }
		@Test public void test_9034() { testInvalid("{(int & any), {int, int}}","!{int, int}"); }
		@Test public void test_9035() { testValid("{(int & any), {int, int}}","!(any | any)"); }
		@Test public void test_9036() { testValid("{(int & any), {int, int}}","!(any & any)"); }
		@Test public void test_9037() { testInvalid("{(int & any), {int, int}}","!(int & int)"); }
		@Test public void test_9038() { testInvalid("{(int & any), {int, int}}","{{int}, {any}}"); }
		@Test public void test_9039() { testInvalid("{(int & any), {int, int}}","{!int, {any}}"); }
		@Test public void test_9040() { testInvalid("{(int & any), {int, int}}","{{int, int}, {any}}"); }
		@Test public void test_9041() { testInvalid("{(int & any), {int, int}}","{(any | int), {any}}"); }
		@Test public void test_9042() { testInvalid("{(int & any), {int, int}}","{!int, {int}}"); }
		@Test public void test_9043() { testInvalid("{(int & any), {int, int}}","{{any, any}, {int}}"); }
		@Test public void test_9044() { testInvalid("{(int & any), {int, int}}","{(any | any), {int}}"); }
		@Test public void test_9045() { testInvalid("{(int & any), {int, int}}","{(any & any), {int}}"); }
		@Test public void test_9046() { testInvalid("{(int & any), {int, int}}","{(any & int), {int}}"); }
		@Test public void test_9047() { testInvalid("{(int & any), {int, int}}","{{any, any}, !int}"); }
		@Test public void test_9048() { testInvalid("{(int & any), {int, int}}","{{any, int}, !int}"); }
		@Test public void test_9049() { testInvalid("{(int & any), {int, int}}","{(any | any), !int}"); }
		@Test public void test_9050() { testInvalid("{(int & any), {int, int}}","{(int | any), !int}"); }
		@Test public void test_9051() { testInvalid("{(int & any), {int, int}}","{(any & any), !int}"); }
		@Test public void test_9052() { testInvalid("{(int & any), {int, int}}","{(int & any), !int}"); }
		@Test public void test_9053() { testInvalid("{(int & any), {int, int}}","{(int & int), !int}"); }
		@Test public void test_9054() { testInvalid("{(int & any), {int, int}}","{{any}, {any, any}}"); }
		@Test public void test_9055() { testInvalid("{(int & any), {int, int}}","{{int}, {any, any}}"); }
		@Test public void test_9056() { testInvalid("{(int & any), {int, int}}","{{int, int}, {any, any}}"); }
		@Test public void test_9057() { testInvalid("{(int & any), {int, int}}","{(any | any), {any, any}}"); }
		@Test public void test_9058() { testInvalid("{(int & any), {int, int}}","{(any | int), {any, any}}"); }
		@Test public void test_9059() { testInvalid("{(int & any), {int, int}}","{!int, {int, any}}"); }
		@Test public void test_9060() { testInvalid("{(int & any), {int, int}}","{{int, any}, {int, any}}"); }
		@Test public void test_9061() { testInvalid("{(int & any), {int, int}}","{{any, int}, {int, any}}"); }
		@Test public void test_9062() { testInvalid("{(int & any), {int, int}}","{(any & int), {int, any}}"); }
		@Test public void test_9063() { testInvalid("{(int & any), {int, int}}","{{any}, {any, int}}"); }
		@Test public void test_9064() { testInvalid("{(int & any), {int, int}}","{{int, int}, {any, int}}"); }
		@Test public void test_9065() { testInvalid("{(int & any), {int, int}}","{(int | int), {any, int}}"); }
		@Test public void test_9066() { testInvalid("{(int & any), {int, int}}","{(any & int), {any, int}}"); }
		@Test public void test_9067() { testInvalid("{(int & any), {int, int}}","{!int, {int, int}}"); }
		@Test public void test_9068() { testInvalid("{(int & any), {int, int}}","{{int, int}, {int, int}}"); }
		@Test public void test_9069() { testInvalid("{(int & any), {int, int}}","{(any | any), {int, int}}"); }
		@Test public void test_9070() { testInvalid("{(int & any), {int, int}}","{(int | any), {int, int}}"); }
		@Test public void test_9071() { testValid("{(int & any), {int, int}}","{(int & any), {int, int}}"); }
		@Test public void test_9072() { testInvalid("{(int & any), {int, int}}","{{int}, (any | any)}"); }
		@Test public void test_9073() { testInvalid("{(int & any), {int, int}}","{{int, any}, (any | any)}"); }
		@Test public void test_9074() { testInvalid("{(int & any), {int, int}}","{{any, int}, (any | any)}"); }
		@Test public void test_9075() { testInvalid("{(int & any), {int, int}}","{(any | any), (any | any)}"); }
		@Test public void test_9076() { testInvalid("{(int & any), {int, int}}","{(int | any), (any | any)}"); }
		@Test public void test_9077() { testInvalid("{(int & any), {int, int}}","{(int & int), (any | any)}"); }
		@Test public void test_9078() { testInvalid("{(int & any), {int, int}}","{!int, (int | any)}"); }
		@Test public void test_9079() { testInvalid("{(int & any), {int, int}}","{{int, int}, (int | any)}"); }
		@Test public void test_9080() { testInvalid("{(int & any), {int, int}}","{(any | any), (int | any)}"); }
		@Test public void test_9081() { testInvalid("{(int & any), {int, int}}","{(int | int), (int | any)}"); }
		@Test public void test_9082() { testInvalid("{(int & any), {int, int}}","{{any}, (any | int)}"); }
		@Test public void test_9083() { testInvalid("{(int & any), {int, int}}","{!int, (any | int)}"); }
		@Test public void test_9084() { testInvalid("{(int & any), {int, int}}","{(any | any), (any | int)}"); }
		@Test public void test_9085() { testInvalid("{(int & any), {int, int}}","{(any | int), (any | int)}"); }
		@Test public void test_9086() { testInvalid("{(int & any), {int, int}}","{(any & int), (any | int)}"); }
		@Test public void test_9087() { testInvalid("{(int & any), {int, int}}","{{int}, (int | int)}"); }
		@Test public void test_9088() { testInvalid("{(int & any), {int, int}}","{{any, any}, (int | int)}"); }
		@Test public void test_9089() { testInvalid("{(int & any), {int, int}}","{{int, int}, (int | int)}"); }
		@Test public void test_9090() { testInvalid("{(int & any), {int, int}}","{{int}, (any & any)}"); }
		@Test public void test_9091() { testInvalid("{(int & any), {int, int}}","{{int, any}, (any & any)}"); }
		@Test public void test_9092() { testInvalid("{(int & any), {int, int}}","{{any, int}, (any & any)}"); }
		@Test public void test_9093() { testInvalid("{(int & any), {int, int}}","{(int | any), (any & any)}"); }
		@Test public void test_9094() { testInvalid("{(int & any), {int, int}}","{(any & any), (any & any)}"); }
		@Test public void test_9095() { testInvalid("{(int & any), {int, int}}","{(int & any), (any & any)}"); }
		@Test public void test_9096() { testInvalid("{(int & any), {int, int}}","{{any}, (int & any)}"); }
		@Test public void test_9097() { testInvalid("{(int & any), {int, int}}","{{int}, (int & any)}"); }
		@Test public void test_9098() { testInvalid("{(int & any), {int, int}}","{{any, any}, (int & any)}"); }
		@Test public void test_9099() { testInvalid("{(int & any), {int, int}}","{{int, any}, (int & any)}"); }
		@Test public void test_9100() { testInvalid("{(int & any), {int, int}}","{(any | int), (int & any)}"); }
		@Test public void test_9101() { testInvalid("{(int & any), {int, int}}","{(any & any), (int & any)}"); }
		@Test public void test_9102() { testInvalid("{(int & any), {int, int}}","{(int & any), (int & any)}"); }
		@Test public void test_9103() { testInvalid("{(int & any), {int, int}}","{(int & int), (int & any)}"); }
		@Test public void test_9104() { testInvalid("{(int & any), {int, int}}","{{int, any}, (any & int)}"); }
		@Test public void test_9105() { testInvalid("{(int & any), {int, int}}","{(any & any), (any & int)}"); }
		@Test public void test_9106() { testInvalid("{(int & any), {int, int}}","{{any, int}, (int & int)}"); }
		@Test public void test_9107() { testInvalid("{(int & any), {int, int}}","{(int | int), (int & int)}"); }
		@Test public void test_9108() { testInvalid("{(int & any), {int, int}}","{(any & any), (int & int)}"); }
		@Test public void test_9109() { testInvalid("{(int & any), {int, int}}","{(any & int), (int & int)}"); }
		@Test public void test_9110() { testInvalid("{(int & any), {int, int}}","{(int & int), (int & int)}"); }
		@Test public void test_9111() { testInvalid("{(int & any), {int, int}}","(!int | {any})"); }
		@Test public void test_9112() { testInvalid("{(int & any), {int, int}}","({any, any} | {any})"); }
		@Test public void test_9113() { testInvalid("{(int & any), {int, int}}","((any | any) | {any})"); }
		@Test public void test_9114() { testInvalid("{(int & any), {int, int}}","((int | any) | {any})"); }
		@Test public void test_9115() { testInvalid("{(int & any), {int, int}}","((any & any) | {any})"); }
		@Test public void test_9116() { testInvalid("{(int & any), {int, int}}","((int & any) | {any})"); }
		@Test public void test_9117() { testInvalid("{(int & any), {int, int}}","((any & int) | {any})"); }
		@Test public void test_9118() { testInvalid("{(int & any), {int, int}}","({int} | {int})"); }
		@Test public void test_9119() { testInvalid("{(int & any), {int, int}}","(!any | {int})"); }
		@Test public void test_9120() { testInvalid("{(int & any), {int, int}}","(!int | {int})"); }
		@Test public void test_9121() { testInvalid("{(int & any), {int, int}}","({any, int} | {int})"); }
		@Test public void test_9122() { testInvalid("{(int & any), {int, int}}","((int & any) | {int})"); }
		@Test public void test_9123() { testInvalid("{(int & any), {int, int}}","((any & int) | {int})"); }
		@Test public void test_9124() { testInvalid("{(int & any), {int, int}}","((int & int) | {int})"); }
		@Test public void test_9125() { testInvalid("{(int & any), {int, int}}","({any} | !any)"); }
		@Test public void test_9126() { testInvalid("{(int & any), {int, int}}","({int} | !any)"); }
		@Test public void test_9127() { testInvalid("{(int & any), {int, int}}","({any, any} | !any)"); }
		@Test public void test_9128() { testInvalid("{(int & any), {int, int}}","({int, int} | !any)"); }
		@Test public void test_9129() { testInvalid("{(int & any), {int, int}}","((any | any) | !any)"); }
		@Test public void test_9130() { testInvalid("{(int & any), {int, int}}","((int | any) | !any)"); }
		@Test public void test_9131() { testInvalid("{(int & any), {int, int}}","((int | int) | !any)"); }
		@Test public void test_9132() { testInvalid("{(int & any), {int, int}}","((int & int) | !any)"); }
		@Test public void test_9133() { testInvalid("{(int & any), {int, int}}","(!int | !int)"); }
		@Test public void test_9134() { testInvalid("{(int & any), {int, int}}","({any, any} | !int)"); }
		@Test public void test_9135() { testInvalid("{(int & any), {int, int}}","({int, int} | !int)"); }
		@Test public void test_9136() { testInvalid("{(int & any), {int, int}}","((int | any) | !int)"); }
		@Test public void test_9137() { testInvalid("{(int & any), {int, int}}","((any | int) | !int)"); }
		@Test public void test_9138() { testInvalid("{(int & any), {int, int}}","((any & int) | !int)"); }
		@Test public void test_9139() { testInvalid("{(int & any), {int, int}}","((int & int) | !int)"); }
		@Test public void test_9140() { testInvalid("{(int & any), {int, int}}","({int} | {any, any})"); }
		@Test public void test_9141() { testInvalid("{(int & any), {int, int}}","(!any | {any, any})"); }
		@Test public void test_9142() { testInvalid("{(int & any), {int, int}}","(!int | {any, any})"); }
		@Test public void test_9143() { testInvalid("{(int & any), {int, int}}","({any, int} | {any, any})"); }
		@Test public void test_9144() { testInvalid("{(int & any), {int, int}}","((int | any) | {any, any})"); }
		@Test public void test_9145() { testInvalid("{(int & any), {int, int}}","((any & any) | {any, any})"); }
		@Test public void test_9146() { testInvalid("{(int & any), {int, int}}","((any & int) | {any, any})"); }
		@Test public void test_9147() { testInvalid("{(int & any), {int, int}}","(!int | {int, any})"); }
		@Test public void test_9148() { testInvalid("{(int & any), {int, int}}","({any, int} | {int, any})"); }
		@Test public void test_9149() { testInvalid("{(int & any), {int, int}}","((any | any) | {int, any})"); }
		@Test public void test_9150() { testInvalid("{(int & any), {int, int}}","((int | any) | {int, any})"); }
		@Test public void test_9151() { testInvalid("{(int & any), {int, int}}","((any | int) | {int, any})"); }
		@Test public void test_9152() { testInvalid("{(int & any), {int, int}}","((int & any) | {int, any})"); }
		@Test public void test_9153() { testInvalid("{(int & any), {int, int}}","({any} | {any, int})"); }
		@Test public void test_9154() { testInvalid("{(int & any), {int, int}}","(!int | {any, int})"); }
		@Test public void test_9155() { testInvalid("{(int & any), {int, int}}","({any, int} | {any, int})"); }
		@Test public void test_9156() { testInvalid("{(int & any), {int, int}}","((any | any) | {any, int})"); }
		@Test public void test_9157() { testInvalid("{(int & any), {int, int}}","((any | int) | {any, int})"); }
		@Test public void test_9158() { testInvalid("{(int & any), {int, int}}","((int | int) | {any, int})"); }
		@Test public void test_9159() { testInvalid("{(int & any), {int, int}}","((int & any) | {any, int})"); }
		@Test public void test_9160() { testInvalid("{(int & any), {int, int}}","(!any | {int, int})"); }
		@Test public void test_9161() { testInvalid("{(int & any), {int, int}}","(!int | {int, int})"); }
		@Test public void test_9162() { testInvalid("{(int & any), {int, int}}","({any, any} | {int, int})"); }
		@Test public void test_9163() { testInvalid("{(int & any), {int, int}}","({any, int} | {int, int})"); }
		@Test public void test_9164() { testInvalid("{(int & any), {int, int}}","((any | any) | {int, int})"); }
		@Test public void test_9165() { testInvalid("{(int & any), {int, int}}","((int | int) | {int, int})"); }
		@Test public void test_9166() { testInvalid("{(int & any), {int, int}}","((int & any) | {int, int})"); }
		@Test public void test_9167() { testInvalid("{(int & any), {int, int}}","((any & int) | {int, int})"); }
		@Test public void test_9168() { testInvalid("{(int & any), {int, int}}","((int & int) | {int, int})"); }
		@Test public void test_9169() { testInvalid("{(int & any), {int, int}}","({any} | (any | any))"); }
		@Test public void test_9170() { testInvalid("{(int & any), {int, int}}","(!any | (any | any))"); }
		@Test public void test_9171() { testInvalid("{(int & any), {int, int}}","({any, any} | (any | any))"); }
		@Test public void test_9172() { testInvalid("{(int & any), {int, int}}","({any, int} | (any | any))"); }
		@Test public void test_9173() { testInvalid("{(int & any), {int, int}}","({int, int} | (any | any))"); }
		@Test public void test_9174() { testInvalid("{(int & any), {int, int}}","((int | any) | (any | any))"); }
		@Test public void test_9175() { testInvalid("{(int & any), {int, int}}","((any | int) | (any | any))"); }
		@Test public void test_9176() { testInvalid("{(int & any), {int, int}}","((any & int) | (any | any))"); }
		@Test public void test_9177() { testInvalid("{(int & any), {int, int}}","((int & int) | (any | any))"); }
		@Test public void test_9178() { testInvalid("{(int & any), {int, int}}","({any} | (int | any))"); }
		@Test public void test_9179() { testInvalid("{(int & any), {int, int}}","(!int | (int | any))"); }
		@Test public void test_9180() { testInvalid("{(int & any), {int, int}}","({int, any} | (int | any))"); }
		@Test public void test_9181() { testInvalid("{(int & any), {int, int}}","({any, int} | (int | any))"); }
		@Test public void test_9182() { testInvalid("{(int & any), {int, int}}","((int & any) | (int | any))"); }
		@Test public void test_9183() { testInvalid("{(int & any), {int, int}}","((any & int) | (int | any))"); }
		@Test public void test_9184() { testInvalid("{(int & any), {int, int}}","({any} | (any | int))"); }
		@Test public void test_9185() { testInvalid("{(int & any), {int, int}}","({int} | (any | int))"); }
		@Test public void test_9186() { testInvalid("{(int & any), {int, int}}","(!any | (any | int))"); }
		@Test public void test_9187() { testInvalid("{(int & any), {int, int}}","(!int | (any | int))"); }
		@Test public void test_9188() { testInvalid("{(int & any), {int, int}}","({any, int} | (any | int))"); }
		@Test public void test_9189() { testInvalid("{(int & any), {int, int}}","({int, int} | (any | int))"); }
		@Test public void test_9190() { testInvalid("{(int & any), {int, int}}","((int | any) | (any | int))"); }
		@Test public void test_9191() { testInvalid("{(int & any), {int, int}}","((any | int) | (any | int))"); }
		@Test public void test_9192() { testInvalid("{(int & any), {int, int}}","((int | int) | (any | int))"); }
		@Test public void test_9193() { testInvalid("{(int & any), {int, int}}","((any & any) | (any | int))"); }
		@Test public void test_9194() { testInvalid("{(int & any), {int, int}}","({int} | (int | int))"); }
		@Test public void test_9195() { testInvalid("{(int & any), {int, int}}","(!any | (int | int))"); }
		@Test public void test_9196() { testInvalid("{(int & any), {int, int}}","(!int | (int | int))"); }
		@Test public void test_9197() { testInvalid("{(int & any), {int, int}}","({int, any} | (int | int))"); }
		@Test public void test_9198() { testInvalid("{(int & any), {int, int}}","({any, int} | (int | int))"); }
		@Test public void test_9199() { testInvalid("{(int & any), {int, int}}","((any | int) | (int | int))"); }
		@Test public void test_9200() { testInvalid("{(int & any), {int, int}}","((int | int) | (int | int))"); }
		@Test public void test_9201() { testInvalid("{(int & any), {int, int}}","((any & any) | (int | int))"); }
		@Test public void test_9202() { testInvalid("{(int & any), {int, int}}","((int & any) | (int | int))"); }
		@Test public void test_9203() { testInvalid("{(int & any), {int, int}}","((int & int) | (int | int))"); }
		@Test public void test_9204() { testInvalid("{(int & any), {int, int}}","(!any | (any & any))"); }
		@Test public void test_9205() { testInvalid("{(int & any), {int, int}}","(!int | (any & any))"); }
		@Test public void test_9206() { testInvalid("{(int & any), {int, int}}","({any, any} | (any & any))"); }
		@Test public void test_9207() { testInvalid("{(int & any), {int, int}}","({int, any} | (any & any))"); }
		@Test public void test_9208() { testInvalid("{(int & any), {int, int}}","({any, int} | (any & any))"); }
		@Test public void test_9209() { testInvalid("{(int & any), {int, int}}","({int, int} | (any & any))"); }
		@Test public void test_9210() { testInvalid("{(int & any), {int, int}}","((int | any) | (any & any))"); }
		@Test public void test_9211() { testInvalid("{(int & any), {int, int}}","((int | int) | (any & any))"); }
		@Test public void test_9212() { testInvalid("{(int & any), {int, int}}","((int & any) | (any & any))"); }
		@Test public void test_9213() { testInvalid("{(int & any), {int, int}}","((any & int) | (any & any))"); }
		@Test public void test_9214() { testInvalid("{(int & any), {int, int}}","((int & int) | (any & any))"); }
		@Test public void test_9215() { testInvalid("{(int & any), {int, int}}","({any} | (int & any))"); }
		@Test public void test_9216() { testInvalid("{{int}, (any | any)}","{int}"); }
		@Test public void test_9217() { testInvalid("{{int}, (any | any)}","{any, any}"); }
		@Test public void test_9218() { testInvalid("{{int}, (any | any)}","{int, int}"); }
		@Test public void test_9219() { testInvalid("{{int}, (any | any)}","(any | int)"); }
		@Test public void test_9220() { testInvalid("{{int}, (any | any)}","(int & any)"); }
		@Test public void test_9221() { testInvalid("{{int}, (any | any)}","{{any}}"); }
		@Test public void test_9222() { testInvalid("{{int}, (any | any)}","{{int, any}}"); }
		@Test public void test_9223() { testInvalid("{{int}, (any | any)}","{{int, int}}"); }
		@Test public void test_9224() { testInvalid("{{int}, (any | any)}","{(any | int)}"); }
		@Test public void test_9225() { testInvalid("{{int}, (any | any)}","!{int, any}"); }
		@Test public void test_9226() { testInvalid("{{int}, (any | any)}","!{int, int}"); }
		@Test public void test_9227() { testValid("{{int}, (any | any)}","!(any | any)"); }
		@Test public void test_9228() { testValid("{{int}, (any | any)}","!(any & any)"); }
		@Test public void test_9229() { testInvalid("{{int}, (any | any)}","!(int & int)"); }
		@Test public void test_9230() { testValid("{{int}, (any | any)}","{{int}, {any}}"); }
		@Test public void test_9231() { testInvalid("{{int}, (any | any)}","{!int, {any}}"); }
		@Test public void test_9232() { testInvalid("{{int}, (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_9233() { testInvalid("{{int}, (any | any)}","{(any | int), {any}}"); }
		@Test public void test_9234() { testInvalid("{{int}, (any | any)}","{!int, {int}}"); }
		@Test public void test_9235() { testInvalid("{{int}, (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_9236() { testInvalid("{{int}, (any | any)}","{(any | any), {int}}"); }
		@Test public void test_9237() { testInvalid("{{int}, (any | any)}","{(any & any), {int}}"); }
		@Test public void test_9238() { testInvalid("{{int}, (any | any)}","{(any & int), {int}}"); }
		@Test public void test_9239() { testInvalid("{{int}, (any | any)}","{{any, any}, !int}"); }
		@Test public void test_9240() { testInvalid("{{int}, (any | any)}","{{any, int}, !int}"); }
		@Test public void test_9241() { testInvalid("{{int}, (any | any)}","{(any | any), !int}"); }
		@Test public void test_9242() { testInvalid("{{int}, (any | any)}","{(int | any), !int}"); }
		@Test public void test_9243() { testInvalid("{{int}, (any | any)}","{(any & any), !int}"); }
		@Test public void test_9244() { testInvalid("{{int}, (any | any)}","{(int & any), !int}"); }
		@Test public void test_9245() { testInvalid("{{int}, (any | any)}","{(int & int), !int}"); }
		@Test public void test_9246() { testInvalid("{{int}, (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_9247() { testValid("{{int}, (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_9248() { testInvalid("{{int}, (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_9249() { testInvalid("{{int}, (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_9250() { testInvalid("{{int}, (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_9251() { testInvalid("{{int}, (any | any)}","{!int, {int, any}}"); }
		@Test public void test_9252() { testInvalid("{{int}, (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_9253() { testInvalid("{{int}, (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_9254() { testInvalid("{{int}, (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_9255() { testInvalid("{{int}, (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_9256() { testInvalid("{{int}, (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_9257() { testInvalid("{{int}, (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_9258() { testInvalid("{{int}, (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_9259() { testInvalid("{{int}, (any | any)}","{!int, {int, int}}"); }
		@Test public void test_9260() { testInvalid("{{int}, (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_9261() { testInvalid("{{int}, (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_9262() { testInvalid("{{int}, (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_9263() { testInvalid("{{int}, (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_9264() { testValid("{{int}, (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_9265() { testInvalid("{{int}, (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_9266() { testInvalid("{{int}, (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_9267() { testInvalid("{{int}, (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_9268() { testInvalid("{{int}, (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_9269() { testInvalid("{{int}, (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_9270() { testInvalid("{{int}, (any | any)}","{!int, (int | any)}"); }
		@Test public void test_9271() { testInvalid("{{int}, (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_9272() { testInvalid("{{int}, (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_9273() { testInvalid("{{int}, (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_9274() { testInvalid("{{int}, (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_9275() { testInvalid("{{int}, (any | any)}","{!int, (any | int)}"); }
		@Test public void test_9276() { testInvalid("{{int}, (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_9277() { testInvalid("{{int}, (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_9278() { testInvalid("{{int}, (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_9279() { testValid("{{int}, (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_9280() { testInvalid("{{int}, (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_9281() { testInvalid("{{int}, (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_9282() { testValid("{{int}, (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_9283() { testInvalid("{{int}, (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_9284() { testInvalid("{{int}, (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_9285() { testInvalid("{{int}, (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_9286() { testInvalid("{{int}, (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_9287() { testInvalid("{{int}, (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_9288() { testInvalid("{{int}, (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_9289() { testValid("{{int}, (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_9290() { testInvalid("{{int}, (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_9291() { testInvalid("{{int}, (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_9292() { testInvalid("{{int}, (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_9293() { testInvalid("{{int}, (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_9294() { testInvalid("{{int}, (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_9295() { testInvalid("{{int}, (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_9296() { testInvalid("{{int}, (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_9297() { testInvalid("{{int}, (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_9298() { testInvalid("{{int}, (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_9299() { testInvalid("{{int}, (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_9300() { testInvalid("{{int}, (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_9301() { testInvalid("{{int}, (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_9302() { testInvalid("{{int}, (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_9303() { testInvalid("{{int}, (any | any)}","(!int | {any})"); }
		@Test public void test_9304() { testInvalid("{{int}, (any | any)}","({any, any} | {any})"); }
		@Test public void test_9305() { testInvalid("{{int}, (any | any)}","((any | any) | {any})"); }
		@Test public void test_9306() { testInvalid("{{int}, (any | any)}","((int | any) | {any})"); }
		@Test public void test_9307() { testInvalid("{{int}, (any | any)}","((any & any) | {any})"); }
		@Test public void test_9308() { testInvalid("{{int}, (any | any)}","((int & any) | {any})"); }
		@Test public void test_9309() { testInvalid("{{int}, (any | any)}","((any & int) | {any})"); }
		@Test public void test_9310() { testInvalid("{{int}, (any | any)}","({int} | {int})"); }
		@Test public void test_9311() { testInvalid("{{int}, (any | any)}","(!any | {int})"); }
		@Test public void test_9312() { testInvalid("{{int}, (any | any)}","(!int | {int})"); }
		@Test public void test_9313() { testInvalid("{{int}, (any | any)}","({any, int} | {int})"); }
		@Test public void test_9314() { testInvalid("{{int}, (any | any)}","((int & any) | {int})"); }
		@Test public void test_9315() { testInvalid("{{int}, (any | any)}","((any & int) | {int})"); }
		@Test public void test_9316() { testInvalid("{{int}, (any | any)}","((int & int) | {int})"); }
		@Test public void test_9317() { testInvalid("{{int}, (any | any)}","({any} | !any)"); }
		@Test public void test_9318() { testInvalid("{{int}, (any | any)}","({int} | !any)"); }
		@Test public void test_9319() { testInvalid("{{int}, (any | any)}","({any, any} | !any)"); }
		@Test public void test_9320() { testInvalid("{{int}, (any | any)}","({int, int} | !any)"); }
		@Test public void test_9321() { testInvalid("{{int}, (any | any)}","((any | any) | !any)"); }
		@Test public void test_9322() { testInvalid("{{int}, (any | any)}","((int | any) | !any)"); }
		@Test public void test_9323() { testInvalid("{{int}, (any | any)}","((int | int) | !any)"); }
		@Test public void test_9324() { testInvalid("{{int}, (any | any)}","((int & int) | !any)"); }
		@Test public void test_9325() { testInvalid("{{int}, (any | any)}","(!int | !int)"); }
		@Test public void test_9326() { testInvalid("{{int}, (any | any)}","({any, any} | !int)"); }
		@Test public void test_9327() { testInvalid("{{int}, (any | any)}","({int, int} | !int)"); }
		@Test public void test_9328() { testInvalid("{{int}, (any | any)}","((int | any) | !int)"); }
		@Test public void test_9329() { testInvalid("{{int}, (any | any)}","((any | int) | !int)"); }
		@Test public void test_9330() { testInvalid("{{int}, (any | any)}","((any & int) | !int)"); }
		@Test public void test_9331() { testInvalid("{{int}, (any | any)}","((int & int) | !int)"); }
		@Test public void test_9332() { testInvalid("{{int}, (any | any)}","({int} | {any, any})"); }
		@Test public void test_9333() { testInvalid("{{int}, (any | any)}","(!any | {any, any})"); }
		@Test public void test_9334() { testInvalid("{{int}, (any | any)}","(!int | {any, any})"); }
		@Test public void test_9335() { testInvalid("{{int}, (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_9336() { testInvalid("{{int}, (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_9337() { testInvalid("{{int}, (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_9338() { testInvalid("{{int}, (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_9339() { testInvalid("{{int}, (any | any)}","(!int | {int, any})"); }
		@Test public void test_9340() { testInvalid("{{int}, (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_9341() { testInvalid("{{int}, (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_9342() { testInvalid("{{int}, (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_9343() { testInvalid("{{int}, (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_9344() { testInvalid("{{int}, (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_9345() { testInvalid("{{int}, (any | any)}","({any} | {any, int})"); }
		@Test public void test_9346() { testInvalid("{{int}, (any | any)}","(!int | {any, int})"); }
		@Test public void test_9347() { testInvalid("{{int}, (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_9348() { testInvalid("{{int}, (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_9349() { testInvalid("{{int}, (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_9350() { testInvalid("{{int}, (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_9351() { testInvalid("{{int}, (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_9352() { testInvalid("{{int}, (any | any)}","(!any | {int, int})"); }
		@Test public void test_9353() { testInvalid("{{int}, (any | any)}","(!int | {int, int})"); }
		@Test public void test_9354() { testInvalid("{{int}, (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_9355() { testInvalid("{{int}, (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_9356() { testInvalid("{{int}, (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_9357() { testInvalid("{{int}, (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_9358() { testInvalid("{{int}, (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_9359() { testInvalid("{{int}, (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_9360() { testInvalid("{{int}, (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_9361() { testInvalid("{{int}, (any | any)}","({any} | (any | any))"); }
		@Test public void test_9362() { testInvalid("{{int}, (any | any)}","(!any | (any | any))"); }
		@Test public void test_9363() { testInvalid("{{int}, (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_9364() { testInvalid("{{int}, (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_9365() { testInvalid("{{int}, (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_9366() { testInvalid("{{int}, (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_9367() { testInvalid("{{int}, (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_9368() { testInvalid("{{int}, (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_9369() { testInvalid("{{int}, (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_9370() { testInvalid("{{int}, (any | any)}","({any} | (int | any))"); }
		@Test public void test_9371() { testInvalid("{{int}, (any | any)}","(!int | (int | any))"); }
		@Test public void test_9372() { testInvalid("{{int}, (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_9373() { testInvalid("{{int}, (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_9374() { testInvalid("{{int}, (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_9375() { testInvalid("{{int}, (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_9376() { testInvalid("{{int}, (any | any)}","({any} | (any | int))"); }
		@Test public void test_9377() { testInvalid("{{int}, (any | any)}","({int} | (any | int))"); }
		@Test public void test_9378() { testInvalid("{{int}, (any | any)}","(!any | (any | int))"); }
		@Test public void test_9379() { testInvalid("{{int}, (any | any)}","(!int | (any | int))"); }
		@Test public void test_9380() { testInvalid("{{int}, (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_9381() { testInvalid("{{int}, (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_9382() { testInvalid("{{int}, (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_9383() { testInvalid("{{int}, (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_9384() { testInvalid("{{int}, (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_9385() { testInvalid("{{int}, (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_9386() { testInvalid("{{int}, (any | any)}","({int} | (int | int))"); }
		@Test public void test_9387() { testInvalid("{{int}, (any | any)}","(!any | (int | int))"); }
		@Test public void test_9388() { testInvalid("{{int}, (any | any)}","(!int | (int | int))"); }
		@Test public void test_9389() { testInvalid("{{int}, (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_9390() { testInvalid("{{int}, (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_9391() { testInvalid("{{int}, (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_9392() { testInvalid("{{int}, (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_9393() { testInvalid("{{int}, (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_9394() { testInvalid("{{int}, (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_9395() { testInvalid("{{int}, (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_9396() { testInvalid("{{int}, (any | any)}","(!any | (any & any))"); }
		@Test public void test_9397() { testInvalid("{{int}, (any | any)}","(!int | (any & any))"); }
		@Test public void test_9398() { testInvalid("{{int}, (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_9399() { testInvalid("{{int}, (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_9400() { testInvalid("{{int}, (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_9401() { testInvalid("{{int}, (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_9402() { testInvalid("{{int}, (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_9403() { testInvalid("{{int}, (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_9404() { testInvalid("{{int}, (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_9405() { testInvalid("{{int}, (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_9406() { testInvalid("{{int}, (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_9407() { testInvalid("{{int}, (any | any)}","({any} | (int & any))"); }
		@Test public void test_9408() { testInvalid("{{int, any}, (any | any)}","{int}"); }
		@Test public void test_9409() { testInvalid("{{int, any}, (any | any)}","{any, any}"); }
		@Test public void test_9410() { testInvalid("{{int, any}, (any | any)}","{int, int}"); }
		@Test public void test_9411() { testInvalid("{{int, any}, (any | any)}","(any | int)"); }
		@Test public void test_9412() { testInvalid("{{int, any}, (any | any)}","(int & any)"); }
		@Test public void test_9413() { testInvalid("{{int, any}, (any | any)}","{{any}}"); }
		@Test public void test_9414() { testInvalid("{{int, any}, (any | any)}","{{int, any}}"); }
		@Test public void test_9415() { testInvalid("{{int, any}, (any | any)}","{{int, int}}"); }
		@Test public void test_9416() { testInvalid("{{int, any}, (any | any)}","{(any | int)}"); }
		@Test public void test_9417() { testInvalid("{{int, any}, (any | any)}","!{int, any}"); }
		@Test public void test_9418() { testInvalid("{{int, any}, (any | any)}","!{int, int}"); }
		@Test public void test_9419() { testValid("{{int, any}, (any | any)}","!(any | any)"); }
		@Test public void test_9420() { testValid("{{int, any}, (any | any)}","!(any & any)"); }
		@Test public void test_9421() { testInvalid("{{int, any}, (any | any)}","!(int & int)"); }
		@Test public void test_9422() { testInvalid("{{int, any}, (any | any)}","{{int}, {any}}"); }
		@Test public void test_9423() { testInvalid("{{int, any}, (any | any)}","{!int, {any}}"); }
		@Test public void test_9424() { testValid("{{int, any}, (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_9425() { testInvalid("{{int, any}, (any | any)}","{(any | int), {any}}"); }
		@Test public void test_9426() { testInvalid("{{int, any}, (any | any)}","{!int, {int}}"); }
		@Test public void test_9427() { testInvalid("{{int, any}, (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_9428() { testInvalid("{{int, any}, (any | any)}","{(any | any), {int}}"); }
		@Test public void test_9429() { testInvalid("{{int, any}, (any | any)}","{(any & any), {int}}"); }
		@Test public void test_9430() { testInvalid("{{int, any}, (any | any)}","{(any & int), {int}}"); }
		@Test public void test_9431() { testInvalid("{{int, any}, (any | any)}","{{any, any}, !int}"); }
		@Test public void test_9432() { testInvalid("{{int, any}, (any | any)}","{{any, int}, !int}"); }
		@Test public void test_9433() { testInvalid("{{int, any}, (any | any)}","{(any | any), !int}"); }
		@Test public void test_9434() { testInvalid("{{int, any}, (any | any)}","{(int | any), !int}"); }
		@Test public void test_9435() { testInvalid("{{int, any}, (any | any)}","{(any & any), !int}"); }
		@Test public void test_9436() { testInvalid("{{int, any}, (any | any)}","{(int & any), !int}"); }
		@Test public void test_9437() { testInvalid("{{int, any}, (any | any)}","{(int & int), !int}"); }
		@Test public void test_9438() { testInvalid("{{int, any}, (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_9439() { testInvalid("{{int, any}, (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_9440() { testValid("{{int, any}, (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_9441() { testInvalid("{{int, any}, (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_9442() { testInvalid("{{int, any}, (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_9443() { testInvalid("{{int, any}, (any | any)}","{!int, {int, any}}"); }
		@Test public void test_9444() { testValid("{{int, any}, (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_9445() { testInvalid("{{int, any}, (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_9446() { testInvalid("{{int, any}, (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_9447() { testInvalid("{{int, any}, (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_9448() { testValid("{{int, any}, (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_9449() { testInvalid("{{int, any}, (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_9450() { testInvalid("{{int, any}, (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_9451() { testInvalid("{{int, any}, (any | any)}","{!int, {int, int}}"); }
		@Test public void test_9452() { testValid("{{int, any}, (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_9453() { testInvalid("{{int, any}, (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_9454() { testInvalid("{{int, any}, (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_9455() { testInvalid("{{int, any}, (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_9456() { testInvalid("{{int, any}, (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_9457() { testValid("{{int, any}, (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_9458() { testInvalid("{{int, any}, (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_9459() { testInvalid("{{int, any}, (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_9460() { testInvalid("{{int, any}, (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_9461() { testInvalid("{{int, any}, (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_9462() { testInvalid("{{int, any}, (any | any)}","{!int, (int | any)}"); }
		@Test public void test_9463() { testValid("{{int, any}, (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_9464() { testInvalid("{{int, any}, (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_9465() { testInvalid("{{int, any}, (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_9466() { testInvalid("{{int, any}, (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_9467() { testInvalid("{{int, any}, (any | any)}","{!int, (any | int)}"); }
		@Test public void test_9468() { testInvalid("{{int, any}, (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_9469() { testInvalid("{{int, any}, (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_9470() { testInvalid("{{int, any}, (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_9471() { testInvalid("{{int, any}, (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_9472() { testInvalid("{{int, any}, (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_9473() { testValid("{{int, any}, (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_9474() { testInvalid("{{int, any}, (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_9475() { testValid("{{int, any}, (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_9476() { testInvalid("{{int, any}, (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_9477() { testInvalid("{{int, any}, (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_9478() { testInvalid("{{int, any}, (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_9479() { testInvalid("{{int, any}, (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_9480() { testInvalid("{{int, any}, (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_9481() { testInvalid("{{int, any}, (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_9482() { testInvalid("{{int, any}, (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_9483() { testValid("{{int, any}, (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_9484() { testInvalid("{{int, any}, (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_9485() { testInvalid("{{int, any}, (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_9486() { testInvalid("{{int, any}, (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_9487() { testInvalid("{{int, any}, (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_9488() { testValid("{{int, any}, (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_9489() { testInvalid("{{int, any}, (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_9490() { testInvalid("{{int, any}, (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_9491() { testInvalid("{{int, any}, (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_9492() { testInvalid("{{int, any}, (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_9493() { testInvalid("{{int, any}, (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_9494() { testInvalid("{{int, any}, (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_9495() { testInvalid("{{int, any}, (any | any)}","(!int | {any})"); }
		@Test public void test_9496() { testInvalid("{{int, any}, (any | any)}","({any, any} | {any})"); }
		@Test public void test_9497() { testInvalid("{{int, any}, (any | any)}","((any | any) | {any})"); }
		@Test public void test_9498() { testInvalid("{{int, any}, (any | any)}","((int | any) | {any})"); }
		@Test public void test_9499() { testInvalid("{{int, any}, (any | any)}","((any & any) | {any})"); }
		@Test public void test_9500() { testInvalid("{{int, any}, (any | any)}","((int & any) | {any})"); }
		@Test public void test_9501() { testInvalid("{{int, any}, (any | any)}","((any & int) | {any})"); }
		@Test public void test_9502() { testInvalid("{{int, any}, (any | any)}","({int} | {int})"); }
		@Test public void test_9503() { testInvalid("{{int, any}, (any | any)}","(!any | {int})"); }
		@Test public void test_9504() { testInvalid("{{int, any}, (any | any)}","(!int | {int})"); }
		@Test public void test_9505() { testInvalid("{{int, any}, (any | any)}","({any, int} | {int})"); }
		@Test public void test_9506() { testInvalid("{{int, any}, (any | any)}","((int & any) | {int})"); }
		@Test public void test_9507() { testInvalid("{{int, any}, (any | any)}","((any & int) | {int})"); }
		@Test public void test_9508() { testInvalid("{{int, any}, (any | any)}","((int & int) | {int})"); }
		@Test public void test_9509() { testInvalid("{{int, any}, (any | any)}","({any} | !any)"); }
		@Test public void test_9510() { testInvalid("{{int, any}, (any | any)}","({int} | !any)"); }
		@Test public void test_9511() { testInvalid("{{int, any}, (any | any)}","({any, any} | !any)"); }
		@Test public void test_9512() { testInvalid("{{int, any}, (any | any)}","({int, int} | !any)"); }
		@Test public void test_9513() { testInvalid("{{int, any}, (any | any)}","((any | any) | !any)"); }
		@Test public void test_9514() { testInvalid("{{int, any}, (any | any)}","((int | any) | !any)"); }
		@Test public void test_9515() { testInvalid("{{int, any}, (any | any)}","((int | int) | !any)"); }
		@Test public void test_9516() { testInvalid("{{int, any}, (any | any)}","((int & int) | !any)"); }
		@Test public void test_9517() { testInvalid("{{int, any}, (any | any)}","(!int | !int)"); }
		@Test public void test_9518() { testInvalid("{{int, any}, (any | any)}","({any, any} | !int)"); }
		@Test public void test_9519() { testInvalid("{{int, any}, (any | any)}","({int, int} | !int)"); }
		@Test public void test_9520() { testInvalid("{{int, any}, (any | any)}","((int | any) | !int)"); }
		@Test public void test_9521() { testInvalid("{{int, any}, (any | any)}","((any | int) | !int)"); }
		@Test public void test_9522() { testInvalid("{{int, any}, (any | any)}","((any & int) | !int)"); }
		@Test public void test_9523() { testInvalid("{{int, any}, (any | any)}","((int & int) | !int)"); }
		@Test public void test_9524() { testInvalid("{{int, any}, (any | any)}","({int} | {any, any})"); }
		@Test public void test_9525() { testInvalid("{{int, any}, (any | any)}","(!any | {any, any})"); }
		@Test public void test_9526() { testInvalid("{{int, any}, (any | any)}","(!int | {any, any})"); }
		@Test public void test_9527() { testInvalid("{{int, any}, (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_9528() { testInvalid("{{int, any}, (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_9529() { testInvalid("{{int, any}, (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_9530() { testInvalid("{{int, any}, (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_9531() { testInvalid("{{int, any}, (any | any)}","(!int | {int, any})"); }
		@Test public void test_9532() { testInvalid("{{int, any}, (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_9533() { testInvalid("{{int, any}, (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_9534() { testInvalid("{{int, any}, (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_9535() { testInvalid("{{int, any}, (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_9536() { testInvalid("{{int, any}, (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_9537() { testInvalid("{{int, any}, (any | any)}","({any} | {any, int})"); }
		@Test public void test_9538() { testInvalid("{{int, any}, (any | any)}","(!int | {any, int})"); }
		@Test public void test_9539() { testInvalid("{{int, any}, (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_9540() { testInvalid("{{int, any}, (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_9541() { testInvalid("{{int, any}, (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_9542() { testInvalid("{{int, any}, (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_9543() { testInvalid("{{int, any}, (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_9544() { testInvalid("{{int, any}, (any | any)}","(!any | {int, int})"); }
		@Test public void test_9545() { testInvalid("{{int, any}, (any | any)}","(!int | {int, int})"); }
		@Test public void test_9546() { testInvalid("{{int, any}, (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_9547() { testInvalid("{{int, any}, (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_9548() { testInvalid("{{int, any}, (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_9549() { testInvalid("{{int, any}, (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_9550() { testInvalid("{{int, any}, (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_9551() { testInvalid("{{int, any}, (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_9552() { testInvalid("{{int, any}, (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_9553() { testInvalid("{{int, any}, (any | any)}","({any} | (any | any))"); }
		@Test public void test_9554() { testInvalid("{{int, any}, (any | any)}","(!any | (any | any))"); }
		@Test public void test_9555() { testInvalid("{{int, any}, (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_9556() { testInvalid("{{int, any}, (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_9557() { testInvalid("{{int, any}, (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_9558() { testInvalid("{{int, any}, (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_9559() { testInvalid("{{int, any}, (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_9560() { testInvalid("{{int, any}, (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_9561() { testInvalid("{{int, any}, (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_9562() { testInvalid("{{int, any}, (any | any)}","({any} | (int | any))"); }
		@Test public void test_9563() { testInvalid("{{int, any}, (any | any)}","(!int | (int | any))"); }
		@Test public void test_9564() { testInvalid("{{int, any}, (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_9565() { testInvalid("{{int, any}, (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_9566() { testInvalid("{{int, any}, (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_9567() { testInvalid("{{int, any}, (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_9568() { testInvalid("{{int, any}, (any | any)}","({any} | (any | int))"); }
		@Test public void test_9569() { testInvalid("{{int, any}, (any | any)}","({int} | (any | int))"); }
		@Test public void test_9570() { testInvalid("{{int, any}, (any | any)}","(!any | (any | int))"); }
		@Test public void test_9571() { testInvalid("{{int, any}, (any | any)}","(!int | (any | int))"); }
		@Test public void test_9572() { testInvalid("{{int, any}, (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_9573() { testInvalid("{{int, any}, (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_9574() { testInvalid("{{int, any}, (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_9575() { testInvalid("{{int, any}, (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_9576() { testInvalid("{{int, any}, (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_9577() { testInvalid("{{int, any}, (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_9578() { testInvalid("{{int, any}, (any | any)}","({int} | (int | int))"); }
		@Test public void test_9579() { testInvalid("{{int, any}, (any | any)}","(!any | (int | int))"); }
		@Test public void test_9580() { testInvalid("{{int, any}, (any | any)}","(!int | (int | int))"); }
		@Test public void test_9581() { testInvalid("{{int, any}, (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_9582() { testInvalid("{{int, any}, (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_9583() { testInvalid("{{int, any}, (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_9584() { testInvalid("{{int, any}, (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_9585() { testInvalid("{{int, any}, (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_9586() { testInvalid("{{int, any}, (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_9587() { testInvalid("{{int, any}, (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_9588() { testInvalid("{{int, any}, (any | any)}","(!any | (any & any))"); }
		@Test public void test_9589() { testInvalid("{{int, any}, (any | any)}","(!int | (any & any))"); }
		@Test public void test_9590() { testInvalid("{{int, any}, (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_9591() { testInvalid("{{int, any}, (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_9592() { testInvalid("{{int, any}, (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_9593() { testInvalid("{{int, any}, (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_9594() { testInvalid("{{int, any}, (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_9595() { testInvalid("{{int, any}, (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_9596() { testInvalid("{{int, any}, (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_9597() { testInvalid("{{int, any}, (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_9598() { testInvalid("{{int, any}, (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_9599() { testInvalid("{{int, any}, (any | any)}","({any} | (int & any))"); }
		@Test public void test_9600() { testInvalid("{{any, int}, (any | any)}","{int}"); }
		@Test public void test_9601() { testInvalid("{{any, int}, (any | any)}","{any, any}"); }
		@Test public void test_9602() { testInvalid("{{any, int}, (any | any)}","{int, int}"); }
		@Test public void test_9603() { testInvalid("{{any, int}, (any | any)}","(any | int)"); }
		@Test public void test_9604() { testInvalid("{{any, int}, (any | any)}","(int & any)"); }
		@Test public void test_9605() { testInvalid("{{any, int}, (any | any)}","{{any}}"); }
		@Test public void test_9606() { testInvalid("{{any, int}, (any | any)}","{{int, any}}"); }
		@Test public void test_9607() { testInvalid("{{any, int}, (any | any)}","{{int, int}}"); }
		@Test public void test_9608() { testInvalid("{{any, int}, (any | any)}","{(any | int)}"); }
		@Test public void test_9609() { testInvalid("{{any, int}, (any | any)}","!{int, any}"); }
		@Test public void test_9610() { testInvalid("{{any, int}, (any | any)}","!{int, int}"); }
		@Test public void test_9611() { testValid("{{any, int}, (any | any)}","!(any | any)"); }
		@Test public void test_9612() { testValid("{{any, int}, (any | any)}","!(any & any)"); }
		@Test public void test_9613() { testInvalid("{{any, int}, (any | any)}","!(int & int)"); }
		@Test public void test_9614() { testInvalid("{{any, int}, (any | any)}","{{int}, {any}}"); }
		@Test public void test_9615() { testInvalid("{{any, int}, (any | any)}","{!int, {any}}"); }
		@Test public void test_9616() { testValid("{{any, int}, (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_9617() { testInvalid("{{any, int}, (any | any)}","{(any | int), {any}}"); }
		@Test public void test_9618() { testInvalid("{{any, int}, (any | any)}","{!int, {int}}"); }
		@Test public void test_9619() { testInvalid("{{any, int}, (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_9620() { testInvalid("{{any, int}, (any | any)}","{(any | any), {int}}"); }
		@Test public void test_9621() { testInvalid("{{any, int}, (any | any)}","{(any & any), {int}}"); }
		@Test public void test_9622() { testInvalid("{{any, int}, (any | any)}","{(any & int), {int}}"); }
		@Test public void test_9623() { testInvalid("{{any, int}, (any | any)}","{{any, any}, !int}"); }
		@Test public void test_9624() { testValid("{{any, int}, (any | any)}","{{any, int}, !int}"); }
		@Test public void test_9625() { testInvalid("{{any, int}, (any | any)}","{(any | any), !int}"); }
		@Test public void test_9626() { testInvalid("{{any, int}, (any | any)}","{(int | any), !int}"); }
		@Test public void test_9627() { testInvalid("{{any, int}, (any | any)}","{(any & any), !int}"); }
		@Test public void test_9628() { testInvalid("{{any, int}, (any | any)}","{(int & any), !int}"); }
		@Test public void test_9629() { testInvalid("{{any, int}, (any | any)}","{(int & int), !int}"); }
		@Test public void test_9630() { testInvalid("{{any, int}, (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_9631() { testInvalid("{{any, int}, (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_9632() { testValid("{{any, int}, (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_9633() { testInvalid("{{any, int}, (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_9634() { testInvalid("{{any, int}, (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_9635() { testInvalid("{{any, int}, (any | any)}","{!int, {int, any}}"); }
		@Test public void test_9636() { testInvalid("{{any, int}, (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_9637() { testValid("{{any, int}, (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_9638() { testInvalid("{{any, int}, (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_9639() { testInvalid("{{any, int}, (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_9640() { testValid("{{any, int}, (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_9641() { testInvalid("{{any, int}, (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_9642() { testInvalid("{{any, int}, (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_9643() { testInvalid("{{any, int}, (any | any)}","{!int, {int, int}}"); }
		@Test public void test_9644() { testValid("{{any, int}, (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_9645() { testInvalid("{{any, int}, (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_9646() { testInvalid("{{any, int}, (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_9647() { testInvalid("{{any, int}, (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_9648() { testInvalid("{{any, int}, (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_9649() { testInvalid("{{any, int}, (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_9650() { testValid("{{any, int}, (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_9651() { testInvalid("{{any, int}, (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_9652() { testInvalid("{{any, int}, (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_9653() { testInvalid("{{any, int}, (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_9654() { testInvalid("{{any, int}, (any | any)}","{!int, (int | any)}"); }
		@Test public void test_9655() { testValid("{{any, int}, (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_9656() { testInvalid("{{any, int}, (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_9657() { testInvalid("{{any, int}, (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_9658() { testInvalid("{{any, int}, (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_9659() { testInvalid("{{any, int}, (any | any)}","{!int, (any | int)}"); }
		@Test public void test_9660() { testInvalid("{{any, int}, (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_9661() { testInvalid("{{any, int}, (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_9662() { testInvalid("{{any, int}, (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_9663() { testInvalid("{{any, int}, (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_9664() { testInvalid("{{any, int}, (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_9665() { testValid("{{any, int}, (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_9666() { testInvalid("{{any, int}, (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_9667() { testInvalid("{{any, int}, (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_9668() { testValid("{{any, int}, (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_9669() { testInvalid("{{any, int}, (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_9670() { testInvalid("{{any, int}, (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_9671() { testInvalid("{{any, int}, (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_9672() { testInvalid("{{any, int}, (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_9673() { testInvalid("{{any, int}, (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_9674() { testInvalid("{{any, int}, (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_9675() { testInvalid("{{any, int}, (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_9676() { testInvalid("{{any, int}, (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_9677() { testInvalid("{{any, int}, (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_9678() { testInvalid("{{any, int}, (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_9679() { testInvalid("{{any, int}, (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_9680() { testInvalid("{{any, int}, (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_9681() { testInvalid("{{any, int}, (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_9682() { testValid("{{any, int}, (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_9683() { testInvalid("{{any, int}, (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_9684() { testInvalid("{{any, int}, (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_9685() { testInvalid("{{any, int}, (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_9686() { testInvalid("{{any, int}, (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_9687() { testInvalid("{{any, int}, (any | any)}","(!int | {any})"); }
		@Test public void test_9688() { testInvalid("{{any, int}, (any | any)}","({any, any} | {any})"); }
		@Test public void test_9689() { testInvalid("{{any, int}, (any | any)}","((any | any) | {any})"); }
		@Test public void test_9690() { testInvalid("{{any, int}, (any | any)}","((int | any) | {any})"); }
		@Test public void test_9691() { testInvalid("{{any, int}, (any | any)}","((any & any) | {any})"); }
		@Test public void test_9692() { testInvalid("{{any, int}, (any | any)}","((int & any) | {any})"); }
		@Test public void test_9693() { testInvalid("{{any, int}, (any | any)}","((any & int) | {any})"); }
		@Test public void test_9694() { testInvalid("{{any, int}, (any | any)}","({int} | {int})"); }
		@Test public void test_9695() { testInvalid("{{any, int}, (any | any)}","(!any | {int})"); }
		@Test public void test_9696() { testInvalid("{{any, int}, (any | any)}","(!int | {int})"); }
		@Test public void test_9697() { testInvalid("{{any, int}, (any | any)}","({any, int} | {int})"); }
		@Test public void test_9698() { testInvalid("{{any, int}, (any | any)}","((int & any) | {int})"); }
		@Test public void test_9699() { testInvalid("{{any, int}, (any | any)}","((any & int) | {int})"); }
		@Test public void test_9700() { testInvalid("{{any, int}, (any | any)}","((int & int) | {int})"); }
		@Test public void test_9701() { testInvalid("{{any, int}, (any | any)}","({any} | !any)"); }
		@Test public void test_9702() { testInvalid("{{any, int}, (any | any)}","({int} | !any)"); }
		@Test public void test_9703() { testInvalid("{{any, int}, (any | any)}","({any, any} | !any)"); }
		@Test public void test_9704() { testInvalid("{{any, int}, (any | any)}","({int, int} | !any)"); }
		@Test public void test_9705() { testInvalid("{{any, int}, (any | any)}","((any | any) | !any)"); }
		@Test public void test_9706() { testInvalid("{{any, int}, (any | any)}","((int | any) | !any)"); }
		@Test public void test_9707() { testInvalid("{{any, int}, (any | any)}","((int | int) | !any)"); }
		@Test public void test_9708() { testInvalid("{{any, int}, (any | any)}","((int & int) | !any)"); }
		@Test public void test_9709() { testInvalid("{{any, int}, (any | any)}","(!int | !int)"); }
		@Test public void test_9710() { testInvalid("{{any, int}, (any | any)}","({any, any} | !int)"); }
		@Test public void test_9711() { testInvalid("{{any, int}, (any | any)}","({int, int} | !int)"); }
		@Test public void test_9712() { testInvalid("{{any, int}, (any | any)}","((int | any) | !int)"); }
		@Test public void test_9713() { testInvalid("{{any, int}, (any | any)}","((any | int) | !int)"); }
		@Test public void test_9714() { testInvalid("{{any, int}, (any | any)}","((any & int) | !int)"); }
		@Test public void test_9715() { testInvalid("{{any, int}, (any | any)}","((int & int) | !int)"); }
		@Test public void test_9716() { testInvalid("{{any, int}, (any | any)}","({int} | {any, any})"); }
		@Test public void test_9717() { testInvalid("{{any, int}, (any | any)}","(!any | {any, any})"); }
		@Test public void test_9718() { testInvalid("{{any, int}, (any | any)}","(!int | {any, any})"); }
		@Test public void test_9719() { testInvalid("{{any, int}, (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_9720() { testInvalid("{{any, int}, (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_9721() { testInvalid("{{any, int}, (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_9722() { testInvalid("{{any, int}, (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_9723() { testInvalid("{{any, int}, (any | any)}","(!int | {int, any})"); }
		@Test public void test_9724() { testInvalid("{{any, int}, (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_9725() { testInvalid("{{any, int}, (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_9726() { testInvalid("{{any, int}, (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_9727() { testInvalid("{{any, int}, (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_9728() { testInvalid("{{any, int}, (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_9729() { testInvalid("{{any, int}, (any | any)}","({any} | {any, int})"); }
		@Test public void test_9730() { testInvalid("{{any, int}, (any | any)}","(!int | {any, int})"); }
		@Test public void test_9731() { testInvalid("{{any, int}, (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_9732() { testInvalid("{{any, int}, (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_9733() { testInvalid("{{any, int}, (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_9734() { testInvalid("{{any, int}, (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_9735() { testInvalid("{{any, int}, (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_9736() { testInvalid("{{any, int}, (any | any)}","(!any | {int, int})"); }
		@Test public void test_9737() { testInvalid("{{any, int}, (any | any)}","(!int | {int, int})"); }
		@Test public void test_9738() { testInvalid("{{any, int}, (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_9739() { testInvalid("{{any, int}, (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_9740() { testInvalid("{{any, int}, (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_9741() { testInvalid("{{any, int}, (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_9742() { testInvalid("{{any, int}, (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_9743() { testInvalid("{{any, int}, (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_9744() { testInvalid("{{any, int}, (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_9745() { testInvalid("{{any, int}, (any | any)}","({any} | (any | any))"); }
		@Test public void test_9746() { testInvalid("{{any, int}, (any | any)}","(!any | (any | any))"); }
		@Test public void test_9747() { testInvalid("{{any, int}, (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_9748() { testInvalid("{{any, int}, (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_9749() { testInvalid("{{any, int}, (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_9750() { testInvalid("{{any, int}, (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_9751() { testInvalid("{{any, int}, (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_9752() { testInvalid("{{any, int}, (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_9753() { testInvalid("{{any, int}, (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_9754() { testInvalid("{{any, int}, (any | any)}","({any} | (int | any))"); }
		@Test public void test_9755() { testInvalid("{{any, int}, (any | any)}","(!int | (int | any))"); }
		@Test public void test_9756() { testInvalid("{{any, int}, (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_9757() { testInvalid("{{any, int}, (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_9758() { testInvalid("{{any, int}, (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_9759() { testInvalid("{{any, int}, (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_9760() { testInvalid("{{any, int}, (any | any)}","({any} | (any | int))"); }
		@Test public void test_9761() { testInvalid("{{any, int}, (any | any)}","({int} | (any | int))"); }
		@Test public void test_9762() { testInvalid("{{any, int}, (any | any)}","(!any | (any | int))"); }
		@Test public void test_9763() { testInvalid("{{any, int}, (any | any)}","(!int | (any | int))"); }
		@Test public void test_9764() { testInvalid("{{any, int}, (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_9765() { testInvalid("{{any, int}, (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_9766() { testInvalid("{{any, int}, (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_9767() { testInvalid("{{any, int}, (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_9768() { testInvalid("{{any, int}, (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_9769() { testInvalid("{{any, int}, (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_9770() { testInvalid("{{any, int}, (any | any)}","({int} | (int | int))"); }
		@Test public void test_9771() { testInvalid("{{any, int}, (any | any)}","(!any | (int | int))"); }
		@Test public void test_9772() { testInvalid("{{any, int}, (any | any)}","(!int | (int | int))"); }
		@Test public void test_9773() { testInvalid("{{any, int}, (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_9774() { testInvalid("{{any, int}, (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_9775() { testInvalid("{{any, int}, (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_9776() { testInvalid("{{any, int}, (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_9777() { testInvalid("{{any, int}, (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_9778() { testInvalid("{{any, int}, (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_9779() { testInvalid("{{any, int}, (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_9780() { testInvalid("{{any, int}, (any | any)}","(!any | (any & any))"); }
		@Test public void test_9781() { testInvalid("{{any, int}, (any | any)}","(!int | (any & any))"); }
		@Test public void test_9782() { testInvalid("{{any, int}, (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_9783() { testInvalid("{{any, int}, (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_9784() { testInvalid("{{any, int}, (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_9785() { testInvalid("{{any, int}, (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_9786() { testInvalid("{{any, int}, (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_9787() { testInvalid("{{any, int}, (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_9788() { testInvalid("{{any, int}, (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_9789() { testInvalid("{{any, int}, (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_9790() { testInvalid("{{any, int}, (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_9791() { testInvalid("{{any, int}, (any | any)}","({any} | (int & any))"); }
		@Test public void test_9792() { testInvalid("{(any | any), (any | any)}","{int}"); }
		@Test public void test_9793() { testValid("{(any | any), (any | any)}","{any, any}"); }
		@Test public void test_9794() { testValid("{(any | any), (any | any)}","{int, int}"); }
		@Test public void test_9795() { testInvalid("{(any | any), (any | any)}","(any | int)"); }
		@Test public void test_9796() { testInvalid("{(any | any), (any | any)}","(int & any)"); }
		@Test public void test_9797() { testInvalid("{(any | any), (any | any)}","{{any}}"); }
		@Test public void test_9798() { testInvalid("{(any | any), (any | any)}","{{int, any}}"); }
		@Test public void test_9799() { testInvalid("{(any | any), (any | any)}","{{int, int}}"); }
		@Test public void test_9800() { testInvalid("{(any | any), (any | any)}","{(any | int)}"); }
		@Test public void test_9801() { testInvalid("{(any | any), (any | any)}","!{int, any}"); }
		@Test public void test_9802() { testInvalid("{(any | any), (any | any)}","!{int, int}"); }
		@Test public void test_9803() { testValid("{(any | any), (any | any)}","!(any | any)"); }
		@Test public void test_9804() { testValid("{(any | any), (any | any)}","!(any & any)"); }
		@Test public void test_9805() { testInvalid("{(any | any), (any | any)}","!(int & int)"); }
		@Test public void test_9806() { testValid("{(any | any), (any | any)}","{{int}, {any}}"); }
		@Test public void test_9807() { testValid("{(any | any), (any | any)}","{!int, {any}}"); }
		@Test public void test_9808() { testValid("{(any | any), (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_9809() { testValid("{(any | any), (any | any)}","{(any | int), {any}}"); }
		@Test public void test_9810() { testValid("{(any | any), (any | any)}","{!int, {int}}"); }
		@Test public void test_9811() { testValid("{(any | any), (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_9812() { testValid("{(any | any), (any | any)}","{(any | any), {int}}"); }
		@Test public void test_9813() { testValid("{(any | any), (any | any)}","{(any & any), {int}}"); }
		@Test public void test_9814() { testValid("{(any | any), (any | any)}","{(any & int), {int}}"); }
		@Test public void test_9815() { testValid("{(any | any), (any | any)}","{{any, any}, !int}"); }
		@Test public void test_9816() { testValid("{(any | any), (any | any)}","{{any, int}, !int}"); }
		@Test public void test_9817() { testValid("{(any | any), (any | any)}","{(any | any), !int}"); }
		@Test public void test_9818() { testValid("{(any | any), (any | any)}","{(int | any), !int}"); }
		@Test public void test_9819() { testValid("{(any | any), (any | any)}","{(any & any), !int}"); }
		@Test public void test_9820() { testValid("{(any | any), (any | any)}","{(int & any), !int}"); }
		@Test public void test_9821() { testValid("{(any | any), (any | any)}","{(int & int), !int}"); }
		@Test public void test_9822() { testValid("{(any | any), (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_9823() { testValid("{(any | any), (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_9824() { testValid("{(any | any), (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_9825() { testValid("{(any | any), (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_9826() { testValid("{(any | any), (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_9827() { testValid("{(any | any), (any | any)}","{!int, {int, any}}"); }
		@Test public void test_9828() { testValid("{(any | any), (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_9829() { testValid("{(any | any), (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_9830() { testValid("{(any | any), (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_9831() { testValid("{(any | any), (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_9832() { testValid("{(any | any), (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_9833() { testValid("{(any | any), (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_9834() { testValid("{(any | any), (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_9835() { testValid("{(any | any), (any | any)}","{!int, {int, int}}"); }
		@Test public void test_9836() { testValid("{(any | any), (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_9837() { testValid("{(any | any), (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_9838() { testValid("{(any | any), (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_9839() { testValid("{(any | any), (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_9840() { testValid("{(any | any), (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_9841() { testValid("{(any | any), (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_9842() { testValid("{(any | any), (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_9843() { testValid("{(any | any), (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_9844() { testValid("{(any | any), (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_9845() { testValid("{(any | any), (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_9846() { testValid("{(any | any), (any | any)}","{!int, (int | any)}"); }
		@Test public void test_9847() { testValid("{(any | any), (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_9848() { testValid("{(any | any), (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_9849() { testValid("{(any | any), (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_9850() { testValid("{(any | any), (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_9851() { testValid("{(any | any), (any | any)}","{!int, (any | int)}"); }
		@Test public void test_9852() { testValid("{(any | any), (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_9853() { testValid("{(any | any), (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_9854() { testValid("{(any | any), (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_9855() { testValid("{(any | any), (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_9856() { testValid("{(any | any), (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_9857() { testValid("{(any | any), (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_9858() { testValid("{(any | any), (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_9859() { testValid("{(any | any), (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_9860() { testValid("{(any | any), (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_9861() { testValid("{(any | any), (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_9862() { testValid("{(any | any), (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_9863() { testValid("{(any | any), (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_9864() { testValid("{(any | any), (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_9865() { testValid("{(any | any), (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_9866() { testValid("{(any | any), (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_9867() { testValid("{(any | any), (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_9868() { testValid("{(any | any), (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_9869() { testValid("{(any | any), (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_9870() { testValid("{(any | any), (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_9871() { testValid("{(any | any), (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_9872() { testValid("{(any | any), (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_9873() { testValid("{(any | any), (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_9874() { testValid("{(any | any), (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_9875() { testValid("{(any | any), (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_9876() { testValid("{(any | any), (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_9877() { testValid("{(any | any), (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_9878() { testValid("{(any | any), (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_9879() { testInvalid("{(any | any), (any | any)}","(!int | {any})"); }
		@Test public void test_9880() { testInvalid("{(any | any), (any | any)}","({any, any} | {any})"); }
		@Test public void test_9881() { testInvalid("{(any | any), (any | any)}","((any | any) | {any})"); }
		@Test public void test_9882() { testInvalid("{(any | any), (any | any)}","((int | any) | {any})"); }
		@Test public void test_9883() { testInvalid("{(any | any), (any | any)}","((any & any) | {any})"); }
		@Test public void test_9884() { testInvalid("{(any | any), (any | any)}","((int & any) | {any})"); }
		@Test public void test_9885() { testInvalid("{(any | any), (any | any)}","((any & int) | {any})"); }
		@Test public void test_9886() { testInvalid("{(any | any), (any | any)}","({int} | {int})"); }
		@Test public void test_9887() { testInvalid("{(any | any), (any | any)}","(!any | {int})"); }
		@Test public void test_9888() { testInvalid("{(any | any), (any | any)}","(!int | {int})"); }
		@Test public void test_9889() { testInvalid("{(any | any), (any | any)}","({any, int} | {int})"); }
		@Test public void test_9890() { testInvalid("{(any | any), (any | any)}","((int & any) | {int})"); }
		@Test public void test_9891() { testInvalid("{(any | any), (any | any)}","((any & int) | {int})"); }
		@Test public void test_9892() { testInvalid("{(any | any), (any | any)}","((int & int) | {int})"); }
		@Test public void test_9893() { testInvalid("{(any | any), (any | any)}","({any} | !any)"); }
		@Test public void test_9894() { testInvalid("{(any | any), (any | any)}","({int} | !any)"); }
		@Test public void test_9895() { testValid("{(any | any), (any | any)}","({any, any} | !any)"); }
		@Test public void test_9896() { testValid("{(any | any), (any | any)}","({int, int} | !any)"); }
		@Test public void test_9897() { testInvalid("{(any | any), (any | any)}","((any | any) | !any)"); }
		@Test public void test_9898() { testInvalid("{(any | any), (any | any)}","((int | any) | !any)"); }
		@Test public void test_9899() { testInvalid("{(any | any), (any | any)}","((int | int) | !any)"); }
		@Test public void test_9900() { testInvalid("{(any | any), (any | any)}","((int & int) | !any)"); }
		@Test public void test_9901() { testInvalid("{(any | any), (any | any)}","(!int | !int)"); }
		@Test public void test_9902() { testInvalid("{(any | any), (any | any)}","({any, any} | !int)"); }
		@Test public void test_9903() { testInvalid("{(any | any), (any | any)}","({int, int} | !int)"); }
		@Test public void test_9904() { testInvalid("{(any | any), (any | any)}","((int | any) | !int)"); }
		@Test public void test_9905() { testInvalid("{(any | any), (any | any)}","((any | int) | !int)"); }
		@Test public void test_9906() { testInvalid("{(any | any), (any | any)}","((any & int) | !int)"); }
		@Test public void test_9907() { testInvalid("{(any | any), (any | any)}","((int & int) | !int)"); }
		@Test public void test_9908() { testInvalid("{(any | any), (any | any)}","({int} | {any, any})"); }
		@Test public void test_9909() { testValid("{(any | any), (any | any)}","(!any | {any, any})"); }
		@Test public void test_9910() { testInvalid("{(any | any), (any | any)}","(!int | {any, any})"); }
		@Test public void test_9911() { testValid("{(any | any), (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_9912() { testInvalid("{(any | any), (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_9913() { testInvalid("{(any | any), (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_9914() { testInvalid("{(any | any), (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_9915() { testInvalid("{(any | any), (any | any)}","(!int | {int, any})"); }
		@Test public void test_9916() { testValid("{(any | any), (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_9917() { testInvalid("{(any | any), (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_9918() { testInvalid("{(any | any), (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_9919() { testInvalid("{(any | any), (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_9920() { testInvalid("{(any | any), (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_9921() { testInvalid("{(any | any), (any | any)}","({any} | {any, int})"); }
		@Test public void test_9922() { testInvalid("{(any | any), (any | any)}","(!int | {any, int})"); }
		@Test public void test_9923() { testValid("{(any | any), (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_9924() { testInvalid("{(any | any), (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_9925() { testInvalid("{(any | any), (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_9926() { testInvalid("{(any | any), (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_9927() { testInvalid("{(any | any), (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_9928() { testValid("{(any | any), (any | any)}","(!any | {int, int})"); }
		@Test public void test_9929() { testInvalid("{(any | any), (any | any)}","(!int | {int, int})"); }
		@Test public void test_9930() { testValid("{(any | any), (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_9931() { testValid("{(any | any), (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_9932() { testInvalid("{(any | any), (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_9933() { testInvalid("{(any | any), (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_9934() { testInvalid("{(any | any), (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_9935() { testInvalid("{(any | any), (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_9936() { testInvalid("{(any | any), (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_9937() { testInvalid("{(any | any), (any | any)}","({any} | (any | any))"); }
		@Test public void test_9938() { testInvalid("{(any | any), (any | any)}","(!any | (any | any))"); }
		@Test public void test_9939() { testInvalid("{(any | any), (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_9940() { testInvalid("{(any | any), (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_9941() { testInvalid("{(any | any), (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_9942() { testInvalid("{(any | any), (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_9943() { testInvalid("{(any | any), (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_9944() { testInvalid("{(any | any), (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_9945() { testInvalid("{(any | any), (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_9946() { testInvalid("{(any | any), (any | any)}","({any} | (int | any))"); }
		@Test public void test_9947() { testInvalid("{(any | any), (any | any)}","(!int | (int | any))"); }
		@Test public void test_9948() { testInvalid("{(any | any), (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_9949() { testInvalid("{(any | any), (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_9950() { testInvalid("{(any | any), (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_9951() { testInvalid("{(any | any), (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_9952() { testInvalid("{(any | any), (any | any)}","({any} | (any | int))"); }
		@Test public void test_9953() { testInvalid("{(any | any), (any | any)}","({int} | (any | int))"); }
		@Test public void test_9954() { testInvalid("{(any | any), (any | any)}","(!any | (any | int))"); }
		@Test public void test_9955() { testInvalid("{(any | any), (any | any)}","(!int | (any | int))"); }
		@Test public void test_9956() { testInvalid("{(any | any), (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_9957() { testInvalid("{(any | any), (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_9958() { testInvalid("{(any | any), (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_9959() { testInvalid("{(any | any), (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_9960() { testInvalid("{(any | any), (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_9961() { testInvalid("{(any | any), (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_9962() { testInvalid("{(any | any), (any | any)}","({int} | (int | int))"); }
		@Test public void test_9963() { testInvalid("{(any | any), (any | any)}","(!any | (int | int))"); }
		@Test public void test_9964() { testInvalid("{(any | any), (any | any)}","(!int | (int | int))"); }
		@Test public void test_9965() { testInvalid("{(any | any), (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_9966() { testInvalid("{(any | any), (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_9967() { testInvalid("{(any | any), (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_9968() { testInvalid("{(any | any), (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_9969() { testInvalid("{(any | any), (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_9970() { testInvalid("{(any | any), (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_9971() { testInvalid("{(any | any), (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_9972() { testInvalid("{(any | any), (any | any)}","(!any | (any & any))"); }
		@Test public void test_9973() { testInvalid("{(any | any), (any | any)}","(!int | (any & any))"); }
		@Test public void test_9974() { testInvalid("{(any | any), (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_9975() { testInvalid("{(any | any), (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_9976() { testInvalid("{(any | any), (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_9977() { testInvalid("{(any | any), (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_9978() { testInvalid("{(any | any), (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_9979() { testInvalid("{(any | any), (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_9980() { testInvalid("{(any | any), (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_9981() { testInvalid("{(any | any), (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_9982() { testInvalid("{(any | any), (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_9983() { testInvalid("{(any | any), (any | any)}","({any} | (int & any))"); }
		@Test public void test_9984() { testInvalid("{(int | any), (any | any)}","{int}"); }
		@Test public void test_9985() { testValid("{(int | any), (any | any)}","{any, any}"); }
		@Test public void test_9986() { testValid("{(int | any), (any | any)}","{int, int}"); }
		@Test public void test_9987() { testInvalid("{(int | any), (any | any)}","(any | int)"); }
		@Test public void test_9988() { testInvalid("{(int | any), (any | any)}","(int & any)"); }
		@Test public void test_9989() { testInvalid("{(int | any), (any | any)}","{{any}}"); }
		@Test public void test_9990() { testInvalid("{(int | any), (any | any)}","{{int, any}}"); }
		@Test public void test_9991() { testInvalid("{(int | any), (any | any)}","{{int, int}}"); }
		@Test public void test_9992() { testInvalid("{(int | any), (any | any)}","{(any | int)}"); }
		@Test public void test_9993() { testInvalid("{(int | any), (any | any)}","!{int, any}"); }
		@Test public void test_9994() { testInvalid("{(int | any), (any | any)}","!{int, int}"); }
		@Test public void test_9995() { testValid("{(int | any), (any | any)}","!(any | any)"); }
		@Test public void test_9996() { testValid("{(int | any), (any | any)}","!(any & any)"); }
		@Test public void test_9997() { testInvalid("{(int | any), (any | any)}","!(int & int)"); }
		@Test public void test_9998() { testValid("{(int | any), (any | any)}","{{int}, {any}}"); }
		@Test public void test_9999() { testValid("{(int | any), (any | any)}","{!int, {any}}"); }
	}
	public static class Part_1 {
		@Test public void test_10000() { testValid("{(int | any), (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_10001() { testValid("{(int | any), (any | any)}","{(any | int), {any}}"); }
		@Test public void test_10002() { testValid("{(int | any), (any | any)}","{!int, {int}}"); }
		@Test public void test_10003() { testValid("{(int | any), (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_10004() { testValid("{(int | any), (any | any)}","{(any | any), {int}}"); }
		@Test public void test_10005() { testValid("{(int | any), (any | any)}","{(any & any), {int}}"); }
		@Test public void test_10006() { testValid("{(int | any), (any | any)}","{(any & int), {int}}"); }
		@Test public void test_10007() { testValid("{(int | any), (any | any)}","{{any, any}, !int}"); }
		@Test public void test_10008() { testValid("{(int | any), (any | any)}","{{any, int}, !int}"); }
		@Test public void test_10009() { testValid("{(int | any), (any | any)}","{(any | any), !int}"); }
		@Test public void test_10010() { testValid("{(int | any), (any | any)}","{(int | any), !int}"); }
		@Test public void test_10011() { testValid("{(int | any), (any | any)}","{(any & any), !int}"); }
		@Test public void test_10012() { testValid("{(int | any), (any | any)}","{(int & any), !int}"); }
		@Test public void test_10013() { testValid("{(int | any), (any | any)}","{(int & int), !int}"); }
		@Test public void test_10014() { testValid("{(int | any), (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_10015() { testValid("{(int | any), (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_10016() { testValid("{(int | any), (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10017() { testValid("{(int | any), (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10018() { testValid("{(int | any), (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10019() { testValid("{(int | any), (any | any)}","{!int, {int, any}}"); }
		@Test public void test_10020() { testValid("{(int | any), (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10021() { testValid("{(int | any), (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10022() { testValid("{(int | any), (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10023() { testValid("{(int | any), (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_10024() { testValid("{(int | any), (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10025() { testValid("{(int | any), (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10026() { testValid("{(int | any), (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10027() { testValid("{(int | any), (any | any)}","{!int, {int, int}}"); }
		@Test public void test_10028() { testValid("{(int | any), (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10029() { testValid("{(int | any), (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10030() { testValid("{(int | any), (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10031() { testValid("{(int | any), (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10032() { testValid("{(int | any), (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_10033() { testValid("{(int | any), (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10034() { testValid("{(int | any), (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10035() { testValid("{(int | any), (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10036() { testValid("{(int | any), (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10037() { testValid("{(int | any), (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10038() { testValid("{(int | any), (any | any)}","{!int, (int | any)}"); }
		@Test public void test_10039() { testValid("{(int | any), (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_10040() { testValid("{(int | any), (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_10041() { testValid("{(int | any), (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_10042() { testValid("{(int | any), (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_10043() { testValid("{(int | any), (any | any)}","{!int, (any | int)}"); }
		@Test public void test_10044() { testValid("{(int | any), (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_10045() { testValid("{(int | any), (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_10046() { testValid("{(int | any), (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_10047() { testValid("{(int | any), (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_10048() { testValid("{(int | any), (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_10049() { testValid("{(int | any), (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_10050() { testValid("{(int | any), (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_10051() { testValid("{(int | any), (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_10052() { testValid("{(int | any), (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_10053() { testValid("{(int | any), (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_10054() { testValid("{(int | any), (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_10055() { testValid("{(int | any), (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_10056() { testValid("{(int | any), (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_10057() { testValid("{(int | any), (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_10058() { testValid("{(int | any), (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_10059() { testValid("{(int | any), (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_10060() { testValid("{(int | any), (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_10061() { testValid("{(int | any), (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_10062() { testValid("{(int | any), (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_10063() { testValid("{(int | any), (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_10064() { testValid("{(int | any), (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_10065() { testValid("{(int | any), (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_10066() { testValid("{(int | any), (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_10067() { testValid("{(int | any), (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_10068() { testValid("{(int | any), (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_10069() { testValid("{(int | any), (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_10070() { testValid("{(int | any), (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_10071() { testInvalid("{(int | any), (any | any)}","(!int | {any})"); }
		@Test public void test_10072() { testInvalid("{(int | any), (any | any)}","({any, any} | {any})"); }
		@Test public void test_10073() { testInvalid("{(int | any), (any | any)}","((any | any) | {any})"); }
		@Test public void test_10074() { testInvalid("{(int | any), (any | any)}","((int | any) | {any})"); }
		@Test public void test_10075() { testInvalid("{(int | any), (any | any)}","((any & any) | {any})"); }
		@Test public void test_10076() { testInvalid("{(int | any), (any | any)}","((int & any) | {any})"); }
		@Test public void test_10077() { testInvalid("{(int | any), (any | any)}","((any & int) | {any})"); }
		@Test public void test_10078() { testInvalid("{(int | any), (any | any)}","({int} | {int})"); }
		@Test public void test_10079() { testInvalid("{(int | any), (any | any)}","(!any | {int})"); }
		@Test public void test_10080() { testInvalid("{(int | any), (any | any)}","(!int | {int})"); }
		@Test public void test_10081() { testInvalid("{(int | any), (any | any)}","({any, int} | {int})"); }
		@Test public void test_10082() { testInvalid("{(int | any), (any | any)}","((int & any) | {int})"); }
		@Test public void test_10083() { testInvalid("{(int | any), (any | any)}","((any & int) | {int})"); }
		@Test public void test_10084() { testInvalid("{(int | any), (any | any)}","((int & int) | {int})"); }
		@Test public void test_10085() { testInvalid("{(int | any), (any | any)}","({any} | !any)"); }
		@Test public void test_10086() { testInvalid("{(int | any), (any | any)}","({int} | !any)"); }
		@Test public void test_10087() { testValid("{(int | any), (any | any)}","({any, any} | !any)"); }
		@Test public void test_10088() { testValid("{(int | any), (any | any)}","({int, int} | !any)"); }
		@Test public void test_10089() { testInvalid("{(int | any), (any | any)}","((any | any) | !any)"); }
		@Test public void test_10090() { testInvalid("{(int | any), (any | any)}","((int | any) | !any)"); }
		@Test public void test_10091() { testInvalid("{(int | any), (any | any)}","((int | int) | !any)"); }
		@Test public void test_10092() { testInvalid("{(int | any), (any | any)}","((int & int) | !any)"); }
		@Test public void test_10093() { testInvalid("{(int | any), (any | any)}","(!int | !int)"); }
		@Test public void test_10094() { testInvalid("{(int | any), (any | any)}","({any, any} | !int)"); }
		@Test public void test_10095() { testInvalid("{(int | any), (any | any)}","({int, int} | !int)"); }
		@Test public void test_10096() { testInvalid("{(int | any), (any | any)}","((int | any) | !int)"); }
		@Test public void test_10097() { testInvalid("{(int | any), (any | any)}","((any | int) | !int)"); }
		@Test public void test_10098() { testInvalid("{(int | any), (any | any)}","((any & int) | !int)"); }
		@Test public void test_10099() { testInvalid("{(int | any), (any | any)}","((int & int) | !int)"); }
		@Test public void test_10100() { testInvalid("{(int | any), (any | any)}","({int} | {any, any})"); }
		@Test public void test_10101() { testValid("{(int | any), (any | any)}","(!any | {any, any})"); }
		@Test public void test_10102() { testInvalid("{(int | any), (any | any)}","(!int | {any, any})"); }
		@Test public void test_10103() { testValid("{(int | any), (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_10104() { testInvalid("{(int | any), (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_10105() { testInvalid("{(int | any), (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_10106() { testInvalid("{(int | any), (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_10107() { testInvalid("{(int | any), (any | any)}","(!int | {int, any})"); }
		@Test public void test_10108() { testValid("{(int | any), (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_10109() { testInvalid("{(int | any), (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_10110() { testInvalid("{(int | any), (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_10111() { testInvalid("{(int | any), (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_10112() { testInvalid("{(int | any), (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_10113() { testInvalid("{(int | any), (any | any)}","({any} | {any, int})"); }
		@Test public void test_10114() { testInvalid("{(int | any), (any | any)}","(!int | {any, int})"); }
		@Test public void test_10115() { testValid("{(int | any), (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_10116() { testInvalid("{(int | any), (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_10117() { testInvalid("{(int | any), (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_10118() { testInvalid("{(int | any), (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_10119() { testInvalid("{(int | any), (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_10120() { testValid("{(int | any), (any | any)}","(!any | {int, int})"); }
		@Test public void test_10121() { testInvalid("{(int | any), (any | any)}","(!int | {int, int})"); }
		@Test public void test_10122() { testValid("{(int | any), (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_10123() { testValid("{(int | any), (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_10124() { testInvalid("{(int | any), (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_10125() { testInvalid("{(int | any), (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_10126() { testInvalid("{(int | any), (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_10127() { testInvalid("{(int | any), (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_10128() { testInvalid("{(int | any), (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_10129() { testInvalid("{(int | any), (any | any)}","({any} | (any | any))"); }
		@Test public void test_10130() { testInvalid("{(int | any), (any | any)}","(!any | (any | any))"); }
		@Test public void test_10131() { testInvalid("{(int | any), (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_10132() { testInvalid("{(int | any), (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_10133() { testInvalid("{(int | any), (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_10134() { testInvalid("{(int | any), (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_10135() { testInvalid("{(int | any), (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_10136() { testInvalid("{(int | any), (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_10137() { testInvalid("{(int | any), (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_10138() { testInvalid("{(int | any), (any | any)}","({any} | (int | any))"); }
		@Test public void test_10139() { testInvalid("{(int | any), (any | any)}","(!int | (int | any))"); }
		@Test public void test_10140() { testInvalid("{(int | any), (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_10141() { testInvalid("{(int | any), (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_10142() { testInvalid("{(int | any), (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_10143() { testInvalid("{(int | any), (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_10144() { testInvalid("{(int | any), (any | any)}","({any} | (any | int))"); }
		@Test public void test_10145() { testInvalid("{(int | any), (any | any)}","({int} | (any | int))"); }
		@Test public void test_10146() { testInvalid("{(int | any), (any | any)}","(!any | (any | int))"); }
		@Test public void test_10147() { testInvalid("{(int | any), (any | any)}","(!int | (any | int))"); }
		@Test public void test_10148() { testInvalid("{(int | any), (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_10149() { testInvalid("{(int | any), (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_10150() { testInvalid("{(int | any), (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_10151() { testInvalid("{(int | any), (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_10152() { testInvalid("{(int | any), (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_10153() { testInvalid("{(int | any), (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_10154() { testInvalid("{(int | any), (any | any)}","({int} | (int | int))"); }
		@Test public void test_10155() { testInvalid("{(int | any), (any | any)}","(!any | (int | int))"); }
		@Test public void test_10156() { testInvalid("{(int | any), (any | any)}","(!int | (int | int))"); }
		@Test public void test_10157() { testInvalid("{(int | any), (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_10158() { testInvalid("{(int | any), (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_10159() { testInvalid("{(int | any), (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_10160() { testInvalid("{(int | any), (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_10161() { testInvalid("{(int | any), (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_10162() { testInvalid("{(int | any), (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_10163() { testInvalid("{(int | any), (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_10164() { testInvalid("{(int | any), (any | any)}","(!any | (any & any))"); }
		@Test public void test_10165() { testInvalid("{(int | any), (any | any)}","(!int | (any & any))"); }
		@Test public void test_10166() { testInvalid("{(int | any), (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_10167() { testInvalid("{(int | any), (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_10168() { testInvalid("{(int | any), (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_10169() { testInvalid("{(int | any), (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_10170() { testInvalid("{(int | any), (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_10171() { testInvalid("{(int | any), (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_10172() { testInvalid("{(int | any), (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_10173() { testInvalid("{(int | any), (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_10174() { testInvalid("{(int | any), (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_10175() { testInvalid("{(int | any), (any | any)}","({any} | (int & any))"); }
		@Test public void test_10176() { testInvalid("{(int & int), (any | any)}","{int}"); }
		@Test public void test_10177() { testInvalid("{(int & int), (any | any)}","{any, any}"); }
		@Test public void test_10178() { testValid("{(int & int), (any | any)}","{int, int}"); }
		@Test public void test_10179() { testInvalid("{(int & int), (any | any)}","(any | int)"); }
		@Test public void test_10180() { testInvalid("{(int & int), (any | any)}","(int & any)"); }
		@Test public void test_10181() { testInvalid("{(int & int), (any | any)}","{{any}}"); }
		@Test public void test_10182() { testInvalid("{(int & int), (any | any)}","{{int, any}}"); }
		@Test public void test_10183() { testInvalid("{(int & int), (any | any)}","{{int, int}}"); }
		@Test public void test_10184() { testInvalid("{(int & int), (any | any)}","{(any | int)}"); }
		@Test public void test_10185() { testInvalid("{(int & int), (any | any)}","!{int, any}"); }
		@Test public void test_10186() { testInvalid("{(int & int), (any | any)}","!{int, int}"); }
		@Test public void test_10187() { testValid("{(int & int), (any | any)}","!(any | any)"); }
		@Test public void test_10188() { testValid("{(int & int), (any | any)}","!(any & any)"); }
		@Test public void test_10189() { testInvalid("{(int & int), (any | any)}","!(int & int)"); }
		@Test public void test_10190() { testInvalid("{(int & int), (any | any)}","{{int}, {any}}"); }
		@Test public void test_10191() { testInvalid("{(int & int), (any | any)}","{!int, {any}}"); }
		@Test public void test_10192() { testInvalid("{(int & int), (any | any)}","{{int, int}, {any}}"); }
		@Test public void test_10193() { testInvalid("{(int & int), (any | any)}","{(any | int), {any}}"); }
		@Test public void test_10194() { testInvalid("{(int & int), (any | any)}","{!int, {int}}"); }
		@Test public void test_10195() { testInvalid("{(int & int), (any | any)}","{{any, any}, {int}}"); }
		@Test public void test_10196() { testInvalid("{(int & int), (any | any)}","{(any | any), {int}}"); }
		@Test public void test_10197() { testInvalid("{(int & int), (any | any)}","{(any & any), {int}}"); }
		@Test public void test_10198() { testValid("{(int & int), (any | any)}","{(any & int), {int}}"); }
		@Test public void test_10199() { testInvalid("{(int & int), (any | any)}","{{any, any}, !int}"); }
		@Test public void test_10200() { testInvalid("{(int & int), (any | any)}","{{any, int}, !int}"); }
		@Test public void test_10201() { testInvalid("{(int & int), (any | any)}","{(any | any), !int}"); }
		@Test public void test_10202() { testInvalid("{(int & int), (any | any)}","{(int | any), !int}"); }
		@Test public void test_10203() { testInvalid("{(int & int), (any | any)}","{(any & any), !int}"); }
		@Test public void test_10204() { testValid("{(int & int), (any | any)}","{(int & any), !int}"); }
		@Test public void test_10205() { testValid("{(int & int), (any | any)}","{(int & int), !int}"); }
		@Test public void test_10206() { testInvalid("{(int & int), (any | any)}","{{any}, {any, any}}"); }
		@Test public void test_10207() { testInvalid("{(int & int), (any | any)}","{{int}, {any, any}}"); }
		@Test public void test_10208() { testInvalid("{(int & int), (any | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10209() { testInvalid("{(int & int), (any | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10210() { testInvalid("{(int & int), (any | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10211() { testInvalid("{(int & int), (any | any)}","{!int, {int, any}}"); }
		@Test public void test_10212() { testInvalid("{(int & int), (any | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10213() { testInvalid("{(int & int), (any | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10214() { testValid("{(int & int), (any | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10215() { testInvalid("{(int & int), (any | any)}","{{any}, {any, int}}"); }
		@Test public void test_10216() { testInvalid("{(int & int), (any | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10217() { testValid("{(int & int), (any | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10218() { testValid("{(int & int), (any | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10219() { testInvalid("{(int & int), (any | any)}","{!int, {int, int}}"); }
		@Test public void test_10220() { testInvalid("{(int & int), (any | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10221() { testInvalid("{(int & int), (any | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10222() { testInvalid("{(int & int), (any | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10223() { testValid("{(int & int), (any | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10224() { testInvalid("{(int & int), (any | any)}","{{int}, (any | any)}"); }
		@Test public void test_10225() { testInvalid("{(int & int), (any | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10226() { testInvalid("{(int & int), (any | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10227() { testInvalid("{(int & int), (any | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10228() { testInvalid("{(int & int), (any | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10229() { testValid("{(int & int), (any | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10230() { testInvalid("{(int & int), (any | any)}","{!int, (int | any)}"); }
		@Test public void test_10231() { testInvalid("{(int & int), (any | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_10232() { testInvalid("{(int & int), (any | any)}","{(any | any), (int | any)}"); }
		@Test public void test_10233() { testValid("{(int & int), (any | any)}","{(int | int), (int | any)}"); }
		@Test public void test_10234() { testInvalid("{(int & int), (any | any)}","{{any}, (any | int)}"); }
		@Test public void test_10235() { testInvalid("{(int & int), (any | any)}","{!int, (any | int)}"); }
		@Test public void test_10236() { testInvalid("{(int & int), (any | any)}","{(any | any), (any | int)}"); }
		@Test public void test_10237() { testInvalid("{(int & int), (any | any)}","{(any | int), (any | int)}"); }
		@Test public void test_10238() { testValid("{(int & int), (any | any)}","{(any & int), (any | int)}"); }
		@Test public void test_10239() { testInvalid("{(int & int), (any | any)}","{{int}, (int | int)}"); }
		@Test public void test_10240() { testInvalid("{(int & int), (any | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_10241() { testInvalid("{(int & int), (any | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_10242() { testInvalid("{(int & int), (any | any)}","{{int}, (any & any)}"); }
		@Test public void test_10243() { testInvalid("{(int & int), (any | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_10244() { testInvalid("{(int & int), (any | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_10245() { testInvalid("{(int & int), (any | any)}","{(int | any), (any & any)}"); }
		@Test public void test_10246() { testInvalid("{(int & int), (any | any)}","{(any & any), (any & any)}"); }
		@Test public void test_10247() { testValid("{(int & int), (any | any)}","{(int & any), (any & any)}"); }
		@Test public void test_10248() { testInvalid("{(int & int), (any | any)}","{{any}, (int & any)}"); }
		@Test public void test_10249() { testInvalid("{(int & int), (any | any)}","{{int}, (int & any)}"); }
		@Test public void test_10250() { testInvalid("{(int & int), (any | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_10251() { testInvalid("{(int & int), (any | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_10252() { testInvalid("{(int & int), (any | any)}","{(any | int), (int & any)}"); }
		@Test public void test_10253() { testInvalid("{(int & int), (any | any)}","{(any & any), (int & any)}"); }
		@Test public void test_10254() { testValid("{(int & int), (any | any)}","{(int & any), (int & any)}"); }
		@Test public void test_10255() { testValid("{(int & int), (any | any)}","{(int & int), (int & any)}"); }
		@Test public void test_10256() { testInvalid("{(int & int), (any | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_10257() { testInvalid("{(int & int), (any | any)}","{(any & any), (any & int)}"); }
		@Test public void test_10258() { testInvalid("{(int & int), (any | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_10259() { testValid("{(int & int), (any | any)}","{(int | int), (int & int)}"); }
		@Test public void test_10260() { testInvalid("{(int & int), (any | any)}","{(any & any), (int & int)}"); }
		@Test public void test_10261() { testValid("{(int & int), (any | any)}","{(any & int), (int & int)}"); }
		@Test public void test_10262() { testValid("{(int & int), (any | any)}","{(int & int), (int & int)}"); }
		@Test public void test_10263() { testInvalid("{(int & int), (any | any)}","(!int | {any})"); }
		@Test public void test_10264() { testInvalid("{(int & int), (any | any)}","({any, any} | {any})"); }
		@Test public void test_10265() { testInvalid("{(int & int), (any | any)}","((any | any) | {any})"); }
		@Test public void test_10266() { testInvalid("{(int & int), (any | any)}","((int | any) | {any})"); }
		@Test public void test_10267() { testInvalid("{(int & int), (any | any)}","((any & any) | {any})"); }
		@Test public void test_10268() { testInvalid("{(int & int), (any | any)}","((int & any) | {any})"); }
		@Test public void test_10269() { testInvalid("{(int & int), (any | any)}","((any & int) | {any})"); }
		@Test public void test_10270() { testInvalid("{(int & int), (any | any)}","({int} | {int})"); }
		@Test public void test_10271() { testInvalid("{(int & int), (any | any)}","(!any | {int})"); }
		@Test public void test_10272() { testInvalid("{(int & int), (any | any)}","(!int | {int})"); }
		@Test public void test_10273() { testInvalid("{(int & int), (any | any)}","({any, int} | {int})"); }
		@Test public void test_10274() { testInvalid("{(int & int), (any | any)}","((int & any) | {int})"); }
		@Test public void test_10275() { testInvalid("{(int & int), (any | any)}","((any & int) | {int})"); }
		@Test public void test_10276() { testInvalid("{(int & int), (any | any)}","((int & int) | {int})"); }
		@Test public void test_10277() { testInvalid("{(int & int), (any | any)}","({any} | !any)"); }
		@Test public void test_10278() { testInvalid("{(int & int), (any | any)}","({int} | !any)"); }
		@Test public void test_10279() { testInvalid("{(int & int), (any | any)}","({any, any} | !any)"); }
		@Test public void test_10280() { testValid("{(int & int), (any | any)}","({int, int} | !any)"); }
		@Test public void test_10281() { testInvalid("{(int & int), (any | any)}","((any | any) | !any)"); }
		@Test public void test_10282() { testInvalid("{(int & int), (any | any)}","((int | any) | !any)"); }
		@Test public void test_10283() { testInvalid("{(int & int), (any | any)}","((int | int) | !any)"); }
		@Test public void test_10284() { testInvalid("{(int & int), (any | any)}","((int & int) | !any)"); }
		@Test public void test_10285() { testInvalid("{(int & int), (any | any)}","(!int | !int)"); }
		@Test public void test_10286() { testInvalid("{(int & int), (any | any)}","({any, any} | !int)"); }
		@Test public void test_10287() { testInvalid("{(int & int), (any | any)}","({int, int} | !int)"); }
		@Test public void test_10288() { testInvalid("{(int & int), (any | any)}","((int | any) | !int)"); }
		@Test public void test_10289() { testInvalid("{(int & int), (any | any)}","((any | int) | !int)"); }
		@Test public void test_10290() { testInvalid("{(int & int), (any | any)}","((any & int) | !int)"); }
		@Test public void test_10291() { testInvalid("{(int & int), (any | any)}","((int & int) | !int)"); }
		@Test public void test_10292() { testInvalid("{(int & int), (any | any)}","({int} | {any, any})"); }
		@Test public void test_10293() { testInvalid("{(int & int), (any | any)}","(!any | {any, any})"); }
		@Test public void test_10294() { testInvalid("{(int & int), (any | any)}","(!int | {any, any})"); }
		@Test public void test_10295() { testInvalid("{(int & int), (any | any)}","({any, int} | {any, any})"); }
		@Test public void test_10296() { testInvalid("{(int & int), (any | any)}","((int | any) | {any, any})"); }
		@Test public void test_10297() { testInvalid("{(int & int), (any | any)}","((any & any) | {any, any})"); }
		@Test public void test_10298() { testInvalid("{(int & int), (any | any)}","((any & int) | {any, any})"); }
		@Test public void test_10299() { testInvalid("{(int & int), (any | any)}","(!int | {int, any})"); }
		@Test public void test_10300() { testInvalid("{(int & int), (any | any)}","({any, int} | {int, any})"); }
		@Test public void test_10301() { testInvalid("{(int & int), (any | any)}","((any | any) | {int, any})"); }
		@Test public void test_10302() { testInvalid("{(int & int), (any | any)}","((int | any) | {int, any})"); }
		@Test public void test_10303() { testInvalid("{(int & int), (any | any)}","((any | int) | {int, any})"); }
		@Test public void test_10304() { testInvalid("{(int & int), (any | any)}","((int & any) | {int, any})"); }
		@Test public void test_10305() { testInvalid("{(int & int), (any | any)}","({any} | {any, int})"); }
		@Test public void test_10306() { testInvalid("{(int & int), (any | any)}","(!int | {any, int})"); }
		@Test public void test_10307() { testInvalid("{(int & int), (any | any)}","({any, int} | {any, int})"); }
		@Test public void test_10308() { testInvalid("{(int & int), (any | any)}","((any | any) | {any, int})"); }
		@Test public void test_10309() { testInvalid("{(int & int), (any | any)}","((any | int) | {any, int})"); }
		@Test public void test_10310() { testInvalid("{(int & int), (any | any)}","((int | int) | {any, int})"); }
		@Test public void test_10311() { testInvalid("{(int & int), (any | any)}","((int & any) | {any, int})"); }
		@Test public void test_10312() { testValid("{(int & int), (any | any)}","(!any | {int, int})"); }
		@Test public void test_10313() { testInvalid("{(int & int), (any | any)}","(!int | {int, int})"); }
		@Test public void test_10314() { testInvalid("{(int & int), (any | any)}","({any, any} | {int, int})"); }
		@Test public void test_10315() { testInvalid("{(int & int), (any | any)}","({any, int} | {int, int})"); }
		@Test public void test_10316() { testInvalid("{(int & int), (any | any)}","((any | any) | {int, int})"); }
		@Test public void test_10317() { testInvalid("{(int & int), (any | any)}","((int | int) | {int, int})"); }
		@Test public void test_10318() { testInvalid("{(int & int), (any | any)}","((int & any) | {int, int})"); }
		@Test public void test_10319() { testInvalid("{(int & int), (any | any)}","((any & int) | {int, int})"); }
		@Test public void test_10320() { testInvalid("{(int & int), (any | any)}","((int & int) | {int, int})"); }
		@Test public void test_10321() { testInvalid("{(int & int), (any | any)}","({any} | (any | any))"); }
		@Test public void test_10322() { testInvalid("{(int & int), (any | any)}","(!any | (any | any))"); }
		@Test public void test_10323() { testInvalid("{(int & int), (any | any)}","({any, any} | (any | any))"); }
		@Test public void test_10324() { testInvalid("{(int & int), (any | any)}","({any, int} | (any | any))"); }
		@Test public void test_10325() { testInvalid("{(int & int), (any | any)}","({int, int} | (any | any))"); }
		@Test public void test_10326() { testInvalid("{(int & int), (any | any)}","((int | any) | (any | any))"); }
		@Test public void test_10327() { testInvalid("{(int & int), (any | any)}","((any | int) | (any | any))"); }
		@Test public void test_10328() { testInvalid("{(int & int), (any | any)}","((any & int) | (any | any))"); }
		@Test public void test_10329() { testInvalid("{(int & int), (any | any)}","((int & int) | (any | any))"); }
		@Test public void test_10330() { testInvalid("{(int & int), (any | any)}","({any} | (int | any))"); }
		@Test public void test_10331() { testInvalid("{(int & int), (any | any)}","(!int | (int | any))"); }
		@Test public void test_10332() { testInvalid("{(int & int), (any | any)}","({int, any} | (int | any))"); }
		@Test public void test_10333() { testInvalid("{(int & int), (any | any)}","({any, int} | (int | any))"); }
		@Test public void test_10334() { testInvalid("{(int & int), (any | any)}","((int & any) | (int | any))"); }
		@Test public void test_10335() { testInvalid("{(int & int), (any | any)}","((any & int) | (int | any))"); }
		@Test public void test_10336() { testInvalid("{(int & int), (any | any)}","({any} | (any | int))"); }
		@Test public void test_10337() { testInvalid("{(int & int), (any | any)}","({int} | (any | int))"); }
		@Test public void test_10338() { testInvalid("{(int & int), (any | any)}","(!any | (any | int))"); }
		@Test public void test_10339() { testInvalid("{(int & int), (any | any)}","(!int | (any | int))"); }
		@Test public void test_10340() { testInvalid("{(int & int), (any | any)}","({any, int} | (any | int))"); }
		@Test public void test_10341() { testInvalid("{(int & int), (any | any)}","({int, int} | (any | int))"); }
		@Test public void test_10342() { testInvalid("{(int & int), (any | any)}","((int | any) | (any | int))"); }
		@Test public void test_10343() { testInvalid("{(int & int), (any | any)}","((any | int) | (any | int))"); }
		@Test public void test_10344() { testInvalid("{(int & int), (any | any)}","((int | int) | (any | int))"); }
		@Test public void test_10345() { testInvalid("{(int & int), (any | any)}","((any & any) | (any | int))"); }
		@Test public void test_10346() { testInvalid("{(int & int), (any | any)}","({int} | (int | int))"); }
		@Test public void test_10347() { testInvalid("{(int & int), (any | any)}","(!any | (int | int))"); }
		@Test public void test_10348() { testInvalid("{(int & int), (any | any)}","(!int | (int | int))"); }
		@Test public void test_10349() { testInvalid("{(int & int), (any | any)}","({int, any} | (int | int))"); }
		@Test public void test_10350() { testInvalid("{(int & int), (any | any)}","({any, int} | (int | int))"); }
		@Test public void test_10351() { testInvalid("{(int & int), (any | any)}","((any | int) | (int | int))"); }
		@Test public void test_10352() { testInvalid("{(int & int), (any | any)}","((int | int) | (int | int))"); }
		@Test public void test_10353() { testInvalid("{(int & int), (any | any)}","((any & any) | (int | int))"); }
		@Test public void test_10354() { testInvalid("{(int & int), (any | any)}","((int & any) | (int | int))"); }
		@Test public void test_10355() { testInvalid("{(int & int), (any | any)}","((int & int) | (int | int))"); }
		@Test public void test_10356() { testInvalid("{(int & int), (any | any)}","(!any | (any & any))"); }
		@Test public void test_10357() { testInvalid("{(int & int), (any | any)}","(!int | (any & any))"); }
		@Test public void test_10358() { testInvalid("{(int & int), (any | any)}","({any, any} | (any & any))"); }
		@Test public void test_10359() { testInvalid("{(int & int), (any | any)}","({int, any} | (any & any))"); }
		@Test public void test_10360() { testInvalid("{(int & int), (any | any)}","({any, int} | (any & any))"); }
		@Test public void test_10361() { testInvalid("{(int & int), (any | any)}","({int, int} | (any & any))"); }
		@Test public void test_10362() { testInvalid("{(int & int), (any | any)}","((int | any) | (any & any))"); }
		@Test public void test_10363() { testInvalid("{(int & int), (any | any)}","((int | int) | (any & any))"); }
		@Test public void test_10364() { testInvalid("{(int & int), (any | any)}","((int & any) | (any & any))"); }
		@Test public void test_10365() { testInvalid("{(int & int), (any | any)}","((any & int) | (any & any))"); }
		@Test public void test_10366() { testInvalid("{(int & int), (any | any)}","((int & int) | (any & any))"); }
		@Test public void test_10367() { testInvalid("{(int & int), (any | any)}","({any} | (int & any))"); }
		@Test public void test_10368() { testInvalid("{!int, (int | any)}","{int}"); }
		@Test public void test_10369() { testInvalid("{!int, (int | any)}","{any, any}"); }
		@Test public void test_10370() { testInvalid("{!int, (int | any)}","{int, int}"); }
		@Test public void test_10371() { testInvalid("{!int, (int | any)}","(any | int)"); }
		@Test public void test_10372() { testInvalid("{!int, (int | any)}","(int & any)"); }
		@Test public void test_10373() { testInvalid("{!int, (int | any)}","{{any}}"); }
		@Test public void test_10374() { testInvalid("{!int, (int | any)}","{{int, any}}"); }
		@Test public void test_10375() { testInvalid("{!int, (int | any)}","{{int, int}}"); }
		@Test public void test_10376() { testInvalid("{!int, (int | any)}","{(any | int)}"); }
		@Test public void test_10377() { testInvalid("{!int, (int | any)}","!{int, any}"); }
		@Test public void test_10378() { testInvalid("{!int, (int | any)}","!{int, int}"); }
		@Test public void test_10379() { testValid("{!int, (int | any)}","!(any | any)"); }
		@Test public void test_10380() { testValid("{!int, (int | any)}","!(any & any)"); }
		@Test public void test_10381() { testInvalid("{!int, (int | any)}","!(int & int)"); }
		@Test public void test_10382() { testValid("{!int, (int | any)}","{{int}, {any}}"); }
		@Test public void test_10383() { testValid("{!int, (int | any)}","{!int, {any}}"); }
		@Test public void test_10384() { testValid("{!int, (int | any)}","{{int, int}, {any}}"); }
		@Test public void test_10385() { testInvalid("{!int, (int | any)}","{(any | int), {any}}"); }
		@Test public void test_10386() { testValid("{!int, (int | any)}","{!int, {int}}"); }
		@Test public void test_10387() { testValid("{!int, (int | any)}","{{any, any}, {int}}"); }
		@Test public void test_10388() { testInvalid("{!int, (int | any)}","{(any | any), {int}}"); }
		@Test public void test_10389() { testInvalid("{!int, (int | any)}","{(any & any), {int}}"); }
		@Test public void test_10390() { testInvalid("{!int, (int | any)}","{(any & int), {int}}"); }
		@Test public void test_10391() { testValid("{!int, (int | any)}","{{any, any}, !int}"); }
		@Test public void test_10392() { testValid("{!int, (int | any)}","{{any, int}, !int}"); }
		@Test public void test_10393() { testInvalid("{!int, (int | any)}","{(any | any), !int}"); }
		@Test public void test_10394() { testInvalid("{!int, (int | any)}","{(int | any), !int}"); }
		@Test public void test_10395() { testInvalid("{!int, (int | any)}","{(any & any), !int}"); }
		@Test public void test_10396() { testInvalid("{!int, (int | any)}","{(int & any), !int}"); }
		@Test public void test_10397() { testInvalid("{!int, (int | any)}","{(int & int), !int}"); }
		@Test public void test_10398() { testValid("{!int, (int | any)}","{{any}, {any, any}}"); }
		@Test public void test_10399() { testValid("{!int, (int | any)}","{{int}, {any, any}}"); }
		@Test public void test_10400() { testValid("{!int, (int | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10401() { testInvalid("{!int, (int | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10402() { testInvalid("{!int, (int | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10403() { testValid("{!int, (int | any)}","{!int, {int, any}}"); }
		@Test public void test_10404() { testValid("{!int, (int | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10405() { testValid("{!int, (int | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10406() { testInvalid("{!int, (int | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10407() { testValid("{!int, (int | any)}","{{any}, {any, int}}"); }
		@Test public void test_10408() { testValid("{!int, (int | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10409() { testInvalid("{!int, (int | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10410() { testInvalid("{!int, (int | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10411() { testValid("{!int, (int | any)}","{!int, {int, int}}"); }
		@Test public void test_10412() { testValid("{!int, (int | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10413() { testInvalid("{!int, (int | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10414() { testInvalid("{!int, (int | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10415() { testInvalid("{!int, (int | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10416() { testValid("{!int, (int | any)}","{{int}, (any | any)}"); }
		@Test public void test_10417() { testValid("{!int, (int | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10418() { testValid("{!int, (int | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10419() { testInvalid("{!int, (int | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10420() { testInvalid("{!int, (int | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10421() { testInvalid("{!int, (int | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10422() { testValid("{!int, (int | any)}","{!int, (int | any)}"); }
		@Test public void test_10423() { testValid("{!int, (int | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_10424() { testInvalid("{!int, (int | any)}","{(any | any), (int | any)}"); }
		@Test public void test_10425() { testInvalid("{!int, (int | any)}","{(int | int), (int | any)}"); }
		@Test public void test_10426() { testValid("{!int, (int | any)}","{{any}, (any | int)}"); }
		@Test public void test_10427() { testValid("{!int, (int | any)}","{!int, (any | int)}"); }
		@Test public void test_10428() { testInvalid("{!int, (int | any)}","{(any | any), (any | int)}"); }
		@Test public void test_10429() { testInvalid("{!int, (int | any)}","{(any | int), (any | int)}"); }
		@Test public void test_10430() { testInvalid("{!int, (int | any)}","{(any & int), (any | int)}"); }
		@Test public void test_10431() { testValid("{!int, (int | any)}","{{int}, (int | int)}"); }
		@Test public void test_10432() { testValid("{!int, (int | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_10433() { testValid("{!int, (int | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_10434() { testValid("{!int, (int | any)}","{{int}, (any & any)}"); }
		@Test public void test_10435() { testValid("{!int, (int | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_10436() { testValid("{!int, (int | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_10437() { testInvalid("{!int, (int | any)}","{(int | any), (any & any)}"); }
		@Test public void test_10438() { testInvalid("{!int, (int | any)}","{(any & any), (any & any)}"); }
		@Test public void test_10439() { testInvalid("{!int, (int | any)}","{(int & any), (any & any)}"); }
		@Test public void test_10440() { testValid("{!int, (int | any)}","{{any}, (int & any)}"); }
		@Test public void test_10441() { testValid("{!int, (int | any)}","{{int}, (int & any)}"); }
		@Test public void test_10442() { testValid("{!int, (int | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_10443() { testValid("{!int, (int | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_10444() { testInvalid("{!int, (int | any)}","{(any | int), (int & any)}"); }
		@Test public void test_10445() { testInvalid("{!int, (int | any)}","{(any & any), (int & any)}"); }
		@Test public void test_10446() { testInvalid("{!int, (int | any)}","{(int & any), (int & any)}"); }
		@Test public void test_10447() { testInvalid("{!int, (int | any)}","{(int & int), (int & any)}"); }
		@Test public void test_10448() { testValid("{!int, (int | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_10449() { testInvalid("{!int, (int | any)}","{(any & any), (any & int)}"); }
		@Test public void test_10450() { testValid("{!int, (int | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_10451() { testInvalid("{!int, (int | any)}","{(int | int), (int & int)}"); }
		@Test public void test_10452() { testInvalid("{!int, (int | any)}","{(any & any), (int & int)}"); }
		@Test public void test_10453() { testInvalid("{!int, (int | any)}","{(any & int), (int & int)}"); }
		@Test public void test_10454() { testInvalid("{!int, (int | any)}","{(int & int), (int & int)}"); }
		@Test public void test_10455() { testInvalid("{!int, (int | any)}","(!int | {any})"); }
		@Test public void test_10456() { testInvalid("{!int, (int | any)}","({any, any} | {any})"); }
		@Test public void test_10457() { testInvalid("{!int, (int | any)}","((any | any) | {any})"); }
		@Test public void test_10458() { testInvalid("{!int, (int | any)}","((int | any) | {any})"); }
		@Test public void test_10459() { testInvalid("{!int, (int | any)}","((any & any) | {any})"); }
		@Test public void test_10460() { testInvalid("{!int, (int | any)}","((int & any) | {any})"); }
		@Test public void test_10461() { testInvalid("{!int, (int | any)}","((any & int) | {any})"); }
		@Test public void test_10462() { testInvalid("{!int, (int | any)}","({int} | {int})"); }
		@Test public void test_10463() { testInvalid("{!int, (int | any)}","(!any | {int})"); }
		@Test public void test_10464() { testInvalid("{!int, (int | any)}","(!int | {int})"); }
		@Test public void test_10465() { testInvalid("{!int, (int | any)}","({any, int} | {int})"); }
		@Test public void test_10466() { testInvalid("{!int, (int | any)}","((int & any) | {int})"); }
		@Test public void test_10467() { testInvalid("{!int, (int | any)}","((any & int) | {int})"); }
		@Test public void test_10468() { testInvalid("{!int, (int | any)}","((int & int) | {int})"); }
		@Test public void test_10469() { testInvalid("{!int, (int | any)}","({any} | !any)"); }
		@Test public void test_10470() { testInvalid("{!int, (int | any)}","({int} | !any)"); }
		@Test public void test_10471() { testInvalid("{!int, (int | any)}","({any, any} | !any)"); }
		@Test public void test_10472() { testInvalid("{!int, (int | any)}","({int, int} | !any)"); }
		@Test public void test_10473() { testInvalid("{!int, (int | any)}","((any | any) | !any)"); }
		@Test public void test_10474() { testInvalid("{!int, (int | any)}","((int | any) | !any)"); }
		@Test public void test_10475() { testInvalid("{!int, (int | any)}","((int | int) | !any)"); }
		@Test public void test_10476() { testInvalid("{!int, (int | any)}","((int & int) | !any)"); }
		@Test public void test_10477() { testInvalid("{!int, (int | any)}","(!int | !int)"); }
		@Test public void test_10478() { testInvalid("{!int, (int | any)}","({any, any} | !int)"); }
		@Test public void test_10479() { testInvalid("{!int, (int | any)}","({int, int} | !int)"); }
		@Test public void test_10480() { testInvalid("{!int, (int | any)}","((int | any) | !int)"); }
		@Test public void test_10481() { testInvalid("{!int, (int | any)}","((any | int) | !int)"); }
		@Test public void test_10482() { testInvalid("{!int, (int | any)}","((any & int) | !int)"); }
		@Test public void test_10483() { testInvalid("{!int, (int | any)}","((int & int) | !int)"); }
		@Test public void test_10484() { testInvalid("{!int, (int | any)}","({int} | {any, any})"); }
		@Test public void test_10485() { testInvalid("{!int, (int | any)}","(!any | {any, any})"); }
		@Test public void test_10486() { testInvalid("{!int, (int | any)}","(!int | {any, any})"); }
		@Test public void test_10487() { testInvalid("{!int, (int | any)}","({any, int} | {any, any})"); }
		@Test public void test_10488() { testInvalid("{!int, (int | any)}","((int | any) | {any, any})"); }
		@Test public void test_10489() { testInvalid("{!int, (int | any)}","((any & any) | {any, any})"); }
		@Test public void test_10490() { testInvalid("{!int, (int | any)}","((any & int) | {any, any})"); }
		@Test public void test_10491() { testInvalid("{!int, (int | any)}","(!int | {int, any})"); }
		@Test public void test_10492() { testInvalid("{!int, (int | any)}","({any, int} | {int, any})"); }
		@Test public void test_10493() { testInvalid("{!int, (int | any)}","((any | any) | {int, any})"); }
		@Test public void test_10494() { testInvalid("{!int, (int | any)}","((int | any) | {int, any})"); }
		@Test public void test_10495() { testInvalid("{!int, (int | any)}","((any | int) | {int, any})"); }
		@Test public void test_10496() { testInvalid("{!int, (int | any)}","((int & any) | {int, any})"); }
		@Test public void test_10497() { testInvalid("{!int, (int | any)}","({any} | {any, int})"); }
		@Test public void test_10498() { testInvalid("{!int, (int | any)}","(!int | {any, int})"); }
		@Test public void test_10499() { testInvalid("{!int, (int | any)}","({any, int} | {any, int})"); }
		@Test public void test_10500() { testInvalid("{!int, (int | any)}","((any | any) | {any, int})"); }
		@Test public void test_10501() { testInvalid("{!int, (int | any)}","((any | int) | {any, int})"); }
		@Test public void test_10502() { testInvalid("{!int, (int | any)}","((int | int) | {any, int})"); }
		@Test public void test_10503() { testInvalid("{!int, (int | any)}","((int & any) | {any, int})"); }
		@Test public void test_10504() { testInvalid("{!int, (int | any)}","(!any | {int, int})"); }
		@Test public void test_10505() { testInvalid("{!int, (int | any)}","(!int | {int, int})"); }
		@Test public void test_10506() { testInvalid("{!int, (int | any)}","({any, any} | {int, int})"); }
		@Test public void test_10507() { testInvalid("{!int, (int | any)}","({any, int} | {int, int})"); }
		@Test public void test_10508() { testInvalid("{!int, (int | any)}","((any | any) | {int, int})"); }
		@Test public void test_10509() { testInvalid("{!int, (int | any)}","((int | int) | {int, int})"); }
		@Test public void test_10510() { testInvalid("{!int, (int | any)}","((int & any) | {int, int})"); }
		@Test public void test_10511() { testInvalid("{!int, (int | any)}","((any & int) | {int, int})"); }
		@Test public void test_10512() { testInvalid("{!int, (int | any)}","((int & int) | {int, int})"); }
		@Test public void test_10513() { testInvalid("{!int, (int | any)}","({any} | (any | any))"); }
		@Test public void test_10514() { testInvalid("{!int, (int | any)}","(!any | (any | any))"); }
		@Test public void test_10515() { testInvalid("{!int, (int | any)}","({any, any} | (any | any))"); }
		@Test public void test_10516() { testInvalid("{!int, (int | any)}","({any, int} | (any | any))"); }
		@Test public void test_10517() { testInvalid("{!int, (int | any)}","({int, int} | (any | any))"); }
		@Test public void test_10518() { testInvalid("{!int, (int | any)}","((int | any) | (any | any))"); }
		@Test public void test_10519() { testInvalid("{!int, (int | any)}","((any | int) | (any | any))"); }
		@Test public void test_10520() { testInvalid("{!int, (int | any)}","((any & int) | (any | any))"); }
		@Test public void test_10521() { testInvalid("{!int, (int | any)}","((int & int) | (any | any))"); }
		@Test public void test_10522() { testInvalid("{!int, (int | any)}","({any} | (int | any))"); }
		@Test public void test_10523() { testInvalid("{!int, (int | any)}","(!int | (int | any))"); }
		@Test public void test_10524() { testInvalid("{!int, (int | any)}","({int, any} | (int | any))"); }
		@Test public void test_10525() { testInvalid("{!int, (int | any)}","({any, int} | (int | any))"); }
		@Test public void test_10526() { testInvalid("{!int, (int | any)}","((int & any) | (int | any))"); }
		@Test public void test_10527() { testInvalid("{!int, (int | any)}","((any & int) | (int | any))"); }
		@Test public void test_10528() { testInvalid("{!int, (int | any)}","({any} | (any | int))"); }
		@Test public void test_10529() { testInvalid("{!int, (int | any)}","({int} | (any | int))"); }
		@Test public void test_10530() { testInvalid("{!int, (int | any)}","(!any | (any | int))"); }
		@Test public void test_10531() { testInvalid("{!int, (int | any)}","(!int | (any | int))"); }
		@Test public void test_10532() { testInvalid("{!int, (int | any)}","({any, int} | (any | int))"); }
		@Test public void test_10533() { testInvalid("{!int, (int | any)}","({int, int} | (any | int))"); }
		@Test public void test_10534() { testInvalid("{!int, (int | any)}","((int | any) | (any | int))"); }
		@Test public void test_10535() { testInvalid("{!int, (int | any)}","((any | int) | (any | int))"); }
		@Test public void test_10536() { testInvalid("{!int, (int | any)}","((int | int) | (any | int))"); }
		@Test public void test_10537() { testInvalid("{!int, (int | any)}","((any & any) | (any | int))"); }
		@Test public void test_10538() { testInvalid("{!int, (int | any)}","({int} | (int | int))"); }
		@Test public void test_10539() { testInvalid("{!int, (int | any)}","(!any | (int | int))"); }
		@Test public void test_10540() { testInvalid("{!int, (int | any)}","(!int | (int | int))"); }
		@Test public void test_10541() { testInvalid("{!int, (int | any)}","({int, any} | (int | int))"); }
		@Test public void test_10542() { testInvalid("{!int, (int | any)}","({any, int} | (int | int))"); }
		@Test public void test_10543() { testInvalid("{!int, (int | any)}","((any | int) | (int | int))"); }
		@Test public void test_10544() { testInvalid("{!int, (int | any)}","((int | int) | (int | int))"); }
		@Test public void test_10545() { testInvalid("{!int, (int | any)}","((any & any) | (int | int))"); }
		@Test public void test_10546() { testInvalid("{!int, (int | any)}","((int & any) | (int | int))"); }
		@Test public void test_10547() { testInvalid("{!int, (int | any)}","((int & int) | (int | int))"); }
		@Test public void test_10548() { testInvalid("{!int, (int | any)}","(!any | (any & any))"); }
		@Test public void test_10549() { testInvalid("{!int, (int | any)}","(!int | (any & any))"); }
		@Test public void test_10550() { testInvalid("{!int, (int | any)}","({any, any} | (any & any))"); }
		@Test public void test_10551() { testInvalid("{!int, (int | any)}","({int, any} | (any & any))"); }
		@Test public void test_10552() { testInvalid("{!int, (int | any)}","({any, int} | (any & any))"); }
		@Test public void test_10553() { testInvalid("{!int, (int | any)}","({int, int} | (any & any))"); }
		@Test public void test_10554() { testInvalid("{!int, (int | any)}","((int | any) | (any & any))"); }
		@Test public void test_10555() { testInvalid("{!int, (int | any)}","((int | int) | (any & any))"); }
		@Test public void test_10556() { testInvalid("{!int, (int | any)}","((int & any) | (any & any))"); }
		@Test public void test_10557() { testInvalid("{!int, (int | any)}","((any & int) | (any & any))"); }
		@Test public void test_10558() { testInvalid("{!int, (int | any)}","((int & int) | (any & any))"); }
		@Test public void test_10559() { testInvalid("{!int, (int | any)}","({any} | (int & any))"); }
		@Test public void test_10560() { testInvalid("{{int, int}, (int | any)}","{int}"); }
		@Test public void test_10561() { testInvalid("{{int, int}, (int | any)}","{any, any}"); }
		@Test public void test_10562() { testInvalid("{{int, int}, (int | any)}","{int, int}"); }
		@Test public void test_10563() { testInvalid("{{int, int}, (int | any)}","(any | int)"); }
		@Test public void test_10564() { testInvalid("{{int, int}, (int | any)}","(int & any)"); }
		@Test public void test_10565() { testInvalid("{{int, int}, (int | any)}","{{any}}"); }
		@Test public void test_10566() { testInvalid("{{int, int}, (int | any)}","{{int, any}}"); }
		@Test public void test_10567() { testInvalid("{{int, int}, (int | any)}","{{int, int}}"); }
		@Test public void test_10568() { testInvalid("{{int, int}, (int | any)}","{(any | int)}"); }
		@Test public void test_10569() { testInvalid("{{int, int}, (int | any)}","!{int, any}"); }
		@Test public void test_10570() { testInvalid("{{int, int}, (int | any)}","!{int, int}"); }
		@Test public void test_10571() { testValid("{{int, int}, (int | any)}","!(any | any)"); }
		@Test public void test_10572() { testValid("{{int, int}, (int | any)}","!(any & any)"); }
		@Test public void test_10573() { testInvalid("{{int, int}, (int | any)}","!(int & int)"); }
		@Test public void test_10574() { testInvalid("{{int, int}, (int | any)}","{{int}, {any}}"); }
		@Test public void test_10575() { testInvalid("{{int, int}, (int | any)}","{!int, {any}}"); }
		@Test public void test_10576() { testValid("{{int, int}, (int | any)}","{{int, int}, {any}}"); }
		@Test public void test_10577() { testInvalid("{{int, int}, (int | any)}","{(any | int), {any}}"); }
		@Test public void test_10578() { testInvalid("{{int, int}, (int | any)}","{!int, {int}}"); }
		@Test public void test_10579() { testInvalid("{{int, int}, (int | any)}","{{any, any}, {int}}"); }
		@Test public void test_10580() { testInvalid("{{int, int}, (int | any)}","{(any | any), {int}}"); }
		@Test public void test_10581() { testInvalid("{{int, int}, (int | any)}","{(any & any), {int}}"); }
		@Test public void test_10582() { testInvalid("{{int, int}, (int | any)}","{(any & int), {int}}"); }
		@Test public void test_10583() { testInvalid("{{int, int}, (int | any)}","{{any, any}, !int}"); }
		@Test public void test_10584() { testInvalid("{{int, int}, (int | any)}","{{any, int}, !int}"); }
		@Test public void test_10585() { testInvalid("{{int, int}, (int | any)}","{(any | any), !int}"); }
		@Test public void test_10586() { testInvalid("{{int, int}, (int | any)}","{(int | any), !int}"); }
		@Test public void test_10587() { testInvalid("{{int, int}, (int | any)}","{(any & any), !int}"); }
		@Test public void test_10588() { testInvalid("{{int, int}, (int | any)}","{(int & any), !int}"); }
		@Test public void test_10589() { testInvalid("{{int, int}, (int | any)}","{(int & int), !int}"); }
		@Test public void test_10590() { testInvalid("{{int, int}, (int | any)}","{{any}, {any, any}}"); }
		@Test public void test_10591() { testInvalid("{{int, int}, (int | any)}","{{int}, {any, any}}"); }
		@Test public void test_10592() { testValid("{{int, int}, (int | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10593() { testInvalid("{{int, int}, (int | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10594() { testInvalid("{{int, int}, (int | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10595() { testInvalid("{{int, int}, (int | any)}","{!int, {int, any}}"); }
		@Test public void test_10596() { testInvalid("{{int, int}, (int | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10597() { testInvalid("{{int, int}, (int | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10598() { testInvalid("{{int, int}, (int | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10599() { testInvalid("{{int, int}, (int | any)}","{{any}, {any, int}}"); }
		@Test public void test_10600() { testValid("{{int, int}, (int | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10601() { testInvalid("{{int, int}, (int | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10602() { testInvalid("{{int, int}, (int | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10603() { testInvalid("{{int, int}, (int | any)}","{!int, {int, int}}"); }
		@Test public void test_10604() { testValid("{{int, int}, (int | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10605() { testInvalid("{{int, int}, (int | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10606() { testInvalid("{{int, int}, (int | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10607() { testInvalid("{{int, int}, (int | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10608() { testInvalid("{{int, int}, (int | any)}","{{int}, (any | any)}"); }
		@Test public void test_10609() { testInvalid("{{int, int}, (int | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10610() { testInvalid("{{int, int}, (int | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10611() { testInvalid("{{int, int}, (int | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10612() { testInvalid("{{int, int}, (int | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10613() { testInvalid("{{int, int}, (int | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10614() { testInvalid("{{int, int}, (int | any)}","{!int, (int | any)}"); }
		@Test public void test_10615() { testValid("{{int, int}, (int | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_10616() { testInvalid("{{int, int}, (int | any)}","{(any | any), (int | any)}"); }
		@Test public void test_10617() { testInvalid("{{int, int}, (int | any)}","{(int | int), (int | any)}"); }
		@Test public void test_10618() { testInvalid("{{int, int}, (int | any)}","{{any}, (any | int)}"); }
		@Test public void test_10619() { testInvalid("{{int, int}, (int | any)}","{!int, (any | int)}"); }
		@Test public void test_10620() { testInvalid("{{int, int}, (int | any)}","{(any | any), (any | int)}"); }
		@Test public void test_10621() { testInvalid("{{int, int}, (int | any)}","{(any | int), (any | int)}"); }
		@Test public void test_10622() { testInvalid("{{int, int}, (int | any)}","{(any & int), (any | int)}"); }
		@Test public void test_10623() { testInvalid("{{int, int}, (int | any)}","{{int}, (int | int)}"); }
		@Test public void test_10624() { testInvalid("{{int, int}, (int | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_10625() { testValid("{{int, int}, (int | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_10626() { testInvalid("{{int, int}, (int | any)}","{{int}, (any & any)}"); }
		@Test public void test_10627() { testInvalid("{{int, int}, (int | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_10628() { testInvalid("{{int, int}, (int | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_10629() { testInvalid("{{int, int}, (int | any)}","{(int | any), (any & any)}"); }
		@Test public void test_10630() { testInvalid("{{int, int}, (int | any)}","{(any & any), (any & any)}"); }
		@Test public void test_10631() { testInvalid("{{int, int}, (int | any)}","{(int & any), (any & any)}"); }
		@Test public void test_10632() { testInvalid("{{int, int}, (int | any)}","{{any}, (int & any)}"); }
		@Test public void test_10633() { testInvalid("{{int, int}, (int | any)}","{{int}, (int & any)}"); }
		@Test public void test_10634() { testInvalid("{{int, int}, (int | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_10635() { testInvalid("{{int, int}, (int | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_10636() { testInvalid("{{int, int}, (int | any)}","{(any | int), (int & any)}"); }
		@Test public void test_10637() { testInvalid("{{int, int}, (int | any)}","{(any & any), (int & any)}"); }
		@Test public void test_10638() { testInvalid("{{int, int}, (int | any)}","{(int & any), (int & any)}"); }
		@Test public void test_10639() { testInvalid("{{int, int}, (int | any)}","{(int & int), (int & any)}"); }
		@Test public void test_10640() { testInvalid("{{int, int}, (int | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_10641() { testInvalid("{{int, int}, (int | any)}","{(any & any), (any & int)}"); }
		@Test public void test_10642() { testInvalid("{{int, int}, (int | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_10643() { testInvalid("{{int, int}, (int | any)}","{(int | int), (int & int)}"); }
		@Test public void test_10644() { testInvalid("{{int, int}, (int | any)}","{(any & any), (int & int)}"); }
		@Test public void test_10645() { testInvalid("{{int, int}, (int | any)}","{(any & int), (int & int)}"); }
		@Test public void test_10646() { testInvalid("{{int, int}, (int | any)}","{(int & int), (int & int)}"); }
		@Test public void test_10647() { testInvalid("{{int, int}, (int | any)}","(!int | {any})"); }
		@Test public void test_10648() { testInvalid("{{int, int}, (int | any)}","({any, any} | {any})"); }
		@Test public void test_10649() { testInvalid("{{int, int}, (int | any)}","((any | any) | {any})"); }
		@Test public void test_10650() { testInvalid("{{int, int}, (int | any)}","((int | any) | {any})"); }
		@Test public void test_10651() { testInvalid("{{int, int}, (int | any)}","((any & any) | {any})"); }
		@Test public void test_10652() { testInvalid("{{int, int}, (int | any)}","((int & any) | {any})"); }
		@Test public void test_10653() { testInvalid("{{int, int}, (int | any)}","((any & int) | {any})"); }
		@Test public void test_10654() { testInvalid("{{int, int}, (int | any)}","({int} | {int})"); }
		@Test public void test_10655() { testInvalid("{{int, int}, (int | any)}","(!any | {int})"); }
		@Test public void test_10656() { testInvalid("{{int, int}, (int | any)}","(!int | {int})"); }
		@Test public void test_10657() { testInvalid("{{int, int}, (int | any)}","({any, int} | {int})"); }
		@Test public void test_10658() { testInvalid("{{int, int}, (int | any)}","((int & any) | {int})"); }
		@Test public void test_10659() { testInvalid("{{int, int}, (int | any)}","((any & int) | {int})"); }
		@Test public void test_10660() { testInvalid("{{int, int}, (int | any)}","((int & int) | {int})"); }
		@Test public void test_10661() { testInvalid("{{int, int}, (int | any)}","({any} | !any)"); }
		@Test public void test_10662() { testInvalid("{{int, int}, (int | any)}","({int} | !any)"); }
		@Test public void test_10663() { testInvalid("{{int, int}, (int | any)}","({any, any} | !any)"); }
		@Test public void test_10664() { testInvalid("{{int, int}, (int | any)}","({int, int} | !any)"); }
		@Test public void test_10665() { testInvalid("{{int, int}, (int | any)}","((any | any) | !any)"); }
		@Test public void test_10666() { testInvalid("{{int, int}, (int | any)}","((int | any) | !any)"); }
		@Test public void test_10667() { testInvalid("{{int, int}, (int | any)}","((int | int) | !any)"); }
		@Test public void test_10668() { testInvalid("{{int, int}, (int | any)}","((int & int) | !any)"); }
		@Test public void test_10669() { testInvalid("{{int, int}, (int | any)}","(!int | !int)"); }
		@Test public void test_10670() { testInvalid("{{int, int}, (int | any)}","({any, any} | !int)"); }
		@Test public void test_10671() { testInvalid("{{int, int}, (int | any)}","({int, int} | !int)"); }
		@Test public void test_10672() { testInvalid("{{int, int}, (int | any)}","((int | any) | !int)"); }
		@Test public void test_10673() { testInvalid("{{int, int}, (int | any)}","((any | int) | !int)"); }
		@Test public void test_10674() { testInvalid("{{int, int}, (int | any)}","((any & int) | !int)"); }
		@Test public void test_10675() { testInvalid("{{int, int}, (int | any)}","((int & int) | !int)"); }
		@Test public void test_10676() { testInvalid("{{int, int}, (int | any)}","({int} | {any, any})"); }
		@Test public void test_10677() { testInvalid("{{int, int}, (int | any)}","(!any | {any, any})"); }
		@Test public void test_10678() { testInvalid("{{int, int}, (int | any)}","(!int | {any, any})"); }
		@Test public void test_10679() { testInvalid("{{int, int}, (int | any)}","({any, int} | {any, any})"); }
		@Test public void test_10680() { testInvalid("{{int, int}, (int | any)}","((int | any) | {any, any})"); }
		@Test public void test_10681() { testInvalid("{{int, int}, (int | any)}","((any & any) | {any, any})"); }
		@Test public void test_10682() { testInvalid("{{int, int}, (int | any)}","((any & int) | {any, any})"); }
		@Test public void test_10683() { testInvalid("{{int, int}, (int | any)}","(!int | {int, any})"); }
		@Test public void test_10684() { testInvalid("{{int, int}, (int | any)}","({any, int} | {int, any})"); }
		@Test public void test_10685() { testInvalid("{{int, int}, (int | any)}","((any | any) | {int, any})"); }
		@Test public void test_10686() { testInvalid("{{int, int}, (int | any)}","((int | any) | {int, any})"); }
		@Test public void test_10687() { testInvalid("{{int, int}, (int | any)}","((any | int) | {int, any})"); }
		@Test public void test_10688() { testInvalid("{{int, int}, (int | any)}","((int & any) | {int, any})"); }
		@Test public void test_10689() { testInvalid("{{int, int}, (int | any)}","({any} | {any, int})"); }
		@Test public void test_10690() { testInvalid("{{int, int}, (int | any)}","(!int | {any, int})"); }
		@Test public void test_10691() { testInvalid("{{int, int}, (int | any)}","({any, int} | {any, int})"); }
		@Test public void test_10692() { testInvalid("{{int, int}, (int | any)}","((any | any) | {any, int})"); }
		@Test public void test_10693() { testInvalid("{{int, int}, (int | any)}","((any | int) | {any, int})"); }
		@Test public void test_10694() { testInvalid("{{int, int}, (int | any)}","((int | int) | {any, int})"); }
		@Test public void test_10695() { testInvalid("{{int, int}, (int | any)}","((int & any) | {any, int})"); }
		@Test public void test_10696() { testInvalid("{{int, int}, (int | any)}","(!any | {int, int})"); }
		@Test public void test_10697() { testInvalid("{{int, int}, (int | any)}","(!int | {int, int})"); }
		@Test public void test_10698() { testInvalid("{{int, int}, (int | any)}","({any, any} | {int, int})"); }
		@Test public void test_10699() { testInvalid("{{int, int}, (int | any)}","({any, int} | {int, int})"); }
		@Test public void test_10700() { testInvalid("{{int, int}, (int | any)}","((any | any) | {int, int})"); }
		@Test public void test_10701() { testInvalid("{{int, int}, (int | any)}","((int | int) | {int, int})"); }
		@Test public void test_10702() { testInvalid("{{int, int}, (int | any)}","((int & any) | {int, int})"); }
		@Test public void test_10703() { testInvalid("{{int, int}, (int | any)}","((any & int) | {int, int})"); }
		@Test public void test_10704() { testInvalid("{{int, int}, (int | any)}","((int & int) | {int, int})"); }
		@Test public void test_10705() { testInvalid("{{int, int}, (int | any)}","({any} | (any | any))"); }
		@Test public void test_10706() { testInvalid("{{int, int}, (int | any)}","(!any | (any | any))"); }
		@Test public void test_10707() { testInvalid("{{int, int}, (int | any)}","({any, any} | (any | any))"); }
		@Test public void test_10708() { testInvalid("{{int, int}, (int | any)}","({any, int} | (any | any))"); }
		@Test public void test_10709() { testInvalid("{{int, int}, (int | any)}","({int, int} | (any | any))"); }
		@Test public void test_10710() { testInvalid("{{int, int}, (int | any)}","((int | any) | (any | any))"); }
		@Test public void test_10711() { testInvalid("{{int, int}, (int | any)}","((any | int) | (any | any))"); }
		@Test public void test_10712() { testInvalid("{{int, int}, (int | any)}","((any & int) | (any | any))"); }
		@Test public void test_10713() { testInvalid("{{int, int}, (int | any)}","((int & int) | (any | any))"); }
		@Test public void test_10714() { testInvalid("{{int, int}, (int | any)}","({any} | (int | any))"); }
		@Test public void test_10715() { testInvalid("{{int, int}, (int | any)}","(!int | (int | any))"); }
		@Test public void test_10716() { testInvalid("{{int, int}, (int | any)}","({int, any} | (int | any))"); }
		@Test public void test_10717() { testInvalid("{{int, int}, (int | any)}","({any, int} | (int | any))"); }
		@Test public void test_10718() { testInvalid("{{int, int}, (int | any)}","((int & any) | (int | any))"); }
		@Test public void test_10719() { testInvalid("{{int, int}, (int | any)}","((any & int) | (int | any))"); }
		@Test public void test_10720() { testInvalid("{{int, int}, (int | any)}","({any} | (any | int))"); }
		@Test public void test_10721() { testInvalid("{{int, int}, (int | any)}","({int} | (any | int))"); }
		@Test public void test_10722() { testInvalid("{{int, int}, (int | any)}","(!any | (any | int))"); }
		@Test public void test_10723() { testInvalid("{{int, int}, (int | any)}","(!int | (any | int))"); }
		@Test public void test_10724() { testInvalid("{{int, int}, (int | any)}","({any, int} | (any | int))"); }
		@Test public void test_10725() { testInvalid("{{int, int}, (int | any)}","({int, int} | (any | int))"); }
		@Test public void test_10726() { testInvalid("{{int, int}, (int | any)}","((int | any) | (any | int))"); }
		@Test public void test_10727() { testInvalid("{{int, int}, (int | any)}","((any | int) | (any | int))"); }
		@Test public void test_10728() { testInvalid("{{int, int}, (int | any)}","((int | int) | (any | int))"); }
		@Test public void test_10729() { testInvalid("{{int, int}, (int | any)}","((any & any) | (any | int))"); }
		@Test public void test_10730() { testInvalid("{{int, int}, (int | any)}","({int} | (int | int))"); }
		@Test public void test_10731() { testInvalid("{{int, int}, (int | any)}","(!any | (int | int))"); }
		@Test public void test_10732() { testInvalid("{{int, int}, (int | any)}","(!int | (int | int))"); }
		@Test public void test_10733() { testInvalid("{{int, int}, (int | any)}","({int, any} | (int | int))"); }
		@Test public void test_10734() { testInvalid("{{int, int}, (int | any)}","({any, int} | (int | int))"); }
		@Test public void test_10735() { testInvalid("{{int, int}, (int | any)}","((any | int) | (int | int))"); }
		@Test public void test_10736() { testInvalid("{{int, int}, (int | any)}","((int | int) | (int | int))"); }
		@Test public void test_10737() { testInvalid("{{int, int}, (int | any)}","((any & any) | (int | int))"); }
		@Test public void test_10738() { testInvalid("{{int, int}, (int | any)}","((int & any) | (int | int))"); }
		@Test public void test_10739() { testInvalid("{{int, int}, (int | any)}","((int & int) | (int | int))"); }
		@Test public void test_10740() { testInvalid("{{int, int}, (int | any)}","(!any | (any & any))"); }
		@Test public void test_10741() { testInvalid("{{int, int}, (int | any)}","(!int | (any & any))"); }
		@Test public void test_10742() { testInvalid("{{int, int}, (int | any)}","({any, any} | (any & any))"); }
		@Test public void test_10743() { testInvalid("{{int, int}, (int | any)}","({int, any} | (any & any))"); }
		@Test public void test_10744() { testInvalid("{{int, int}, (int | any)}","({any, int} | (any & any))"); }
		@Test public void test_10745() { testInvalid("{{int, int}, (int | any)}","({int, int} | (any & any))"); }
		@Test public void test_10746() { testInvalid("{{int, int}, (int | any)}","((int | any) | (any & any))"); }
		@Test public void test_10747() { testInvalid("{{int, int}, (int | any)}","((int | int) | (any & any))"); }
		@Test public void test_10748() { testInvalid("{{int, int}, (int | any)}","((int & any) | (any & any))"); }
		@Test public void test_10749() { testInvalid("{{int, int}, (int | any)}","((any & int) | (any & any))"); }
		@Test public void test_10750() { testInvalid("{{int, int}, (int | any)}","((int & int) | (any & any))"); }
		@Test public void test_10751() { testInvalid("{{int, int}, (int | any)}","({any} | (int & any))"); }
		@Test public void test_10752() { testInvalid("{(any | any), (int | any)}","{int}"); }
		@Test public void test_10753() { testValid("{(any | any), (int | any)}","{any, any}"); }
		@Test public void test_10754() { testValid("{(any | any), (int | any)}","{int, int}"); }
		@Test public void test_10755() { testInvalid("{(any | any), (int | any)}","(any | int)"); }
		@Test public void test_10756() { testInvalid("{(any | any), (int | any)}","(int & any)"); }
		@Test public void test_10757() { testInvalid("{(any | any), (int | any)}","{{any}}"); }
		@Test public void test_10758() { testInvalid("{(any | any), (int | any)}","{{int, any}}"); }
		@Test public void test_10759() { testInvalid("{(any | any), (int | any)}","{{int, int}}"); }
		@Test public void test_10760() { testInvalid("{(any | any), (int | any)}","{(any | int)}"); }
		@Test public void test_10761() { testInvalid("{(any | any), (int | any)}","!{int, any}"); }
		@Test public void test_10762() { testInvalid("{(any | any), (int | any)}","!{int, int}"); }
		@Test public void test_10763() { testValid("{(any | any), (int | any)}","!(any | any)"); }
		@Test public void test_10764() { testValid("{(any | any), (int | any)}","!(any & any)"); }
		@Test public void test_10765() { testInvalid("{(any | any), (int | any)}","!(int & int)"); }
		@Test public void test_10766() { testValid("{(any | any), (int | any)}","{{int}, {any}}"); }
		@Test public void test_10767() { testValid("{(any | any), (int | any)}","{!int, {any}}"); }
		@Test public void test_10768() { testValid("{(any | any), (int | any)}","{{int, int}, {any}}"); }
		@Test public void test_10769() { testValid("{(any | any), (int | any)}","{(any | int), {any}}"); }
		@Test public void test_10770() { testValid("{(any | any), (int | any)}","{!int, {int}}"); }
		@Test public void test_10771() { testValid("{(any | any), (int | any)}","{{any, any}, {int}}"); }
		@Test public void test_10772() { testValid("{(any | any), (int | any)}","{(any | any), {int}}"); }
		@Test public void test_10773() { testValid("{(any | any), (int | any)}","{(any & any), {int}}"); }
		@Test public void test_10774() { testValid("{(any | any), (int | any)}","{(any & int), {int}}"); }
		@Test public void test_10775() { testValid("{(any | any), (int | any)}","{{any, any}, !int}"); }
		@Test public void test_10776() { testValid("{(any | any), (int | any)}","{{any, int}, !int}"); }
		@Test public void test_10777() { testValid("{(any | any), (int | any)}","{(any | any), !int}"); }
		@Test public void test_10778() { testValid("{(any | any), (int | any)}","{(int | any), !int}"); }
		@Test public void test_10779() { testValid("{(any | any), (int | any)}","{(any & any), !int}"); }
		@Test public void test_10780() { testValid("{(any | any), (int | any)}","{(int & any), !int}"); }
		@Test public void test_10781() { testValid("{(any | any), (int | any)}","{(int & int), !int}"); }
		@Test public void test_10782() { testValid("{(any | any), (int | any)}","{{any}, {any, any}}"); }
		@Test public void test_10783() { testValid("{(any | any), (int | any)}","{{int}, {any, any}}"); }
		@Test public void test_10784() { testValid("{(any | any), (int | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10785() { testValid("{(any | any), (int | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10786() { testValid("{(any | any), (int | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10787() { testValid("{(any | any), (int | any)}","{!int, {int, any}}"); }
		@Test public void test_10788() { testValid("{(any | any), (int | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10789() { testValid("{(any | any), (int | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10790() { testValid("{(any | any), (int | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10791() { testValid("{(any | any), (int | any)}","{{any}, {any, int}}"); }
		@Test public void test_10792() { testValid("{(any | any), (int | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10793() { testValid("{(any | any), (int | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10794() { testValid("{(any | any), (int | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10795() { testValid("{(any | any), (int | any)}","{!int, {int, int}}"); }
		@Test public void test_10796() { testValid("{(any | any), (int | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10797() { testValid("{(any | any), (int | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10798() { testValid("{(any | any), (int | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10799() { testValid("{(any | any), (int | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10800() { testValid("{(any | any), (int | any)}","{{int}, (any | any)}"); }
		@Test public void test_10801() { testValid("{(any | any), (int | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10802() { testValid("{(any | any), (int | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10803() { testValid("{(any | any), (int | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10804() { testValid("{(any | any), (int | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10805() { testValid("{(any | any), (int | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10806() { testValid("{(any | any), (int | any)}","{!int, (int | any)}"); }
		@Test public void test_10807() { testValid("{(any | any), (int | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_10808() { testValid("{(any | any), (int | any)}","{(any | any), (int | any)}"); }
		@Test public void test_10809() { testValid("{(any | any), (int | any)}","{(int | int), (int | any)}"); }
		@Test public void test_10810() { testValid("{(any | any), (int | any)}","{{any}, (any | int)}"); }
		@Test public void test_10811() { testValid("{(any | any), (int | any)}","{!int, (any | int)}"); }
		@Test public void test_10812() { testValid("{(any | any), (int | any)}","{(any | any), (any | int)}"); }
		@Test public void test_10813() { testValid("{(any | any), (int | any)}","{(any | int), (any | int)}"); }
		@Test public void test_10814() { testValid("{(any | any), (int | any)}","{(any & int), (any | int)}"); }
		@Test public void test_10815() { testValid("{(any | any), (int | any)}","{{int}, (int | int)}"); }
		@Test public void test_10816() { testValid("{(any | any), (int | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_10817() { testValid("{(any | any), (int | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_10818() { testValid("{(any | any), (int | any)}","{{int}, (any & any)}"); }
		@Test public void test_10819() { testValid("{(any | any), (int | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_10820() { testValid("{(any | any), (int | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_10821() { testValid("{(any | any), (int | any)}","{(int | any), (any & any)}"); }
		@Test public void test_10822() { testValid("{(any | any), (int | any)}","{(any & any), (any & any)}"); }
		@Test public void test_10823() { testValid("{(any | any), (int | any)}","{(int & any), (any & any)}"); }
		@Test public void test_10824() { testValid("{(any | any), (int | any)}","{{any}, (int & any)}"); }
		@Test public void test_10825() { testValid("{(any | any), (int | any)}","{{int}, (int & any)}"); }
		@Test public void test_10826() { testValid("{(any | any), (int | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_10827() { testValid("{(any | any), (int | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_10828() { testValid("{(any | any), (int | any)}","{(any | int), (int & any)}"); }
		@Test public void test_10829() { testValid("{(any | any), (int | any)}","{(any & any), (int & any)}"); }
		@Test public void test_10830() { testValid("{(any | any), (int | any)}","{(int & any), (int & any)}"); }
		@Test public void test_10831() { testValid("{(any | any), (int | any)}","{(int & int), (int & any)}"); }
		@Test public void test_10832() { testValid("{(any | any), (int | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_10833() { testValid("{(any | any), (int | any)}","{(any & any), (any & int)}"); }
		@Test public void test_10834() { testValid("{(any | any), (int | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_10835() { testValid("{(any | any), (int | any)}","{(int | int), (int & int)}"); }
		@Test public void test_10836() { testValid("{(any | any), (int | any)}","{(any & any), (int & int)}"); }
		@Test public void test_10837() { testValid("{(any | any), (int | any)}","{(any & int), (int & int)}"); }
		@Test public void test_10838() { testValid("{(any | any), (int | any)}","{(int & int), (int & int)}"); }
		@Test public void test_10839() { testInvalid("{(any | any), (int | any)}","(!int | {any})"); }
		@Test public void test_10840() { testInvalid("{(any | any), (int | any)}","({any, any} | {any})"); }
		@Test public void test_10841() { testInvalid("{(any | any), (int | any)}","((any | any) | {any})"); }
		@Test public void test_10842() { testInvalid("{(any | any), (int | any)}","((int | any) | {any})"); }
		@Test public void test_10843() { testInvalid("{(any | any), (int | any)}","((any & any) | {any})"); }
		@Test public void test_10844() { testInvalid("{(any | any), (int | any)}","((int & any) | {any})"); }
		@Test public void test_10845() { testInvalid("{(any | any), (int | any)}","((any & int) | {any})"); }
		@Test public void test_10846() { testInvalid("{(any | any), (int | any)}","({int} | {int})"); }
		@Test public void test_10847() { testInvalid("{(any | any), (int | any)}","(!any | {int})"); }
		@Test public void test_10848() { testInvalid("{(any | any), (int | any)}","(!int | {int})"); }
		@Test public void test_10849() { testInvalid("{(any | any), (int | any)}","({any, int} | {int})"); }
		@Test public void test_10850() { testInvalid("{(any | any), (int | any)}","((int & any) | {int})"); }
		@Test public void test_10851() { testInvalid("{(any | any), (int | any)}","((any & int) | {int})"); }
		@Test public void test_10852() { testInvalid("{(any | any), (int | any)}","((int & int) | {int})"); }
		@Test public void test_10853() { testInvalid("{(any | any), (int | any)}","({any} | !any)"); }
		@Test public void test_10854() { testInvalid("{(any | any), (int | any)}","({int} | !any)"); }
		@Test public void test_10855() { testValid("{(any | any), (int | any)}","({any, any} | !any)"); }
		@Test public void test_10856() { testValid("{(any | any), (int | any)}","({int, int} | !any)"); }
		@Test public void test_10857() { testInvalid("{(any | any), (int | any)}","((any | any) | !any)"); }
		@Test public void test_10858() { testInvalid("{(any | any), (int | any)}","((int | any) | !any)"); }
		@Test public void test_10859() { testInvalid("{(any | any), (int | any)}","((int | int) | !any)"); }
		@Test public void test_10860() { testInvalid("{(any | any), (int | any)}","((int & int) | !any)"); }
		@Test public void test_10861() { testInvalid("{(any | any), (int | any)}","(!int | !int)"); }
		@Test public void test_10862() { testInvalid("{(any | any), (int | any)}","({any, any} | !int)"); }
		@Test public void test_10863() { testInvalid("{(any | any), (int | any)}","({int, int} | !int)"); }
		@Test public void test_10864() { testInvalid("{(any | any), (int | any)}","((int | any) | !int)"); }
		@Test public void test_10865() { testInvalid("{(any | any), (int | any)}","((any | int) | !int)"); }
		@Test public void test_10866() { testInvalid("{(any | any), (int | any)}","((any & int) | !int)"); }
		@Test public void test_10867() { testInvalid("{(any | any), (int | any)}","((int & int) | !int)"); }
		@Test public void test_10868() { testInvalid("{(any | any), (int | any)}","({int} | {any, any})"); }
		@Test public void test_10869() { testValid("{(any | any), (int | any)}","(!any | {any, any})"); }
		@Test public void test_10870() { testInvalid("{(any | any), (int | any)}","(!int | {any, any})"); }
		@Test public void test_10871() { testValid("{(any | any), (int | any)}","({any, int} | {any, any})"); }
		@Test public void test_10872() { testInvalid("{(any | any), (int | any)}","((int | any) | {any, any})"); }
		@Test public void test_10873() { testInvalid("{(any | any), (int | any)}","((any & any) | {any, any})"); }
		@Test public void test_10874() { testInvalid("{(any | any), (int | any)}","((any & int) | {any, any})"); }
		@Test public void test_10875() { testInvalid("{(any | any), (int | any)}","(!int | {int, any})"); }
		@Test public void test_10876() { testValid("{(any | any), (int | any)}","({any, int} | {int, any})"); }
		@Test public void test_10877() { testInvalid("{(any | any), (int | any)}","((any | any) | {int, any})"); }
		@Test public void test_10878() { testInvalid("{(any | any), (int | any)}","((int | any) | {int, any})"); }
		@Test public void test_10879() { testInvalid("{(any | any), (int | any)}","((any | int) | {int, any})"); }
		@Test public void test_10880() { testInvalid("{(any | any), (int | any)}","((int & any) | {int, any})"); }
		@Test public void test_10881() { testInvalid("{(any | any), (int | any)}","({any} | {any, int})"); }
		@Test public void test_10882() { testInvalid("{(any | any), (int | any)}","(!int | {any, int})"); }
		@Test public void test_10883() { testValid("{(any | any), (int | any)}","({any, int} | {any, int})"); }
		@Test public void test_10884() { testInvalid("{(any | any), (int | any)}","((any | any) | {any, int})"); }
		@Test public void test_10885() { testInvalid("{(any | any), (int | any)}","((any | int) | {any, int})"); }
		@Test public void test_10886() { testInvalid("{(any | any), (int | any)}","((int | int) | {any, int})"); }
		@Test public void test_10887() { testInvalid("{(any | any), (int | any)}","((int & any) | {any, int})"); }
		@Test public void test_10888() { testValid("{(any | any), (int | any)}","(!any | {int, int})"); }
		@Test public void test_10889() { testInvalid("{(any | any), (int | any)}","(!int | {int, int})"); }
		@Test public void test_10890() { testValid("{(any | any), (int | any)}","({any, any} | {int, int})"); }
		@Test public void test_10891() { testValid("{(any | any), (int | any)}","({any, int} | {int, int})"); }
		@Test public void test_10892() { testInvalid("{(any | any), (int | any)}","((any | any) | {int, int})"); }
		@Test public void test_10893() { testInvalid("{(any | any), (int | any)}","((int | int) | {int, int})"); }
		@Test public void test_10894() { testInvalid("{(any | any), (int | any)}","((int & any) | {int, int})"); }
		@Test public void test_10895() { testInvalid("{(any | any), (int | any)}","((any & int) | {int, int})"); }
		@Test public void test_10896() { testInvalid("{(any | any), (int | any)}","((int & int) | {int, int})"); }
		@Test public void test_10897() { testInvalid("{(any | any), (int | any)}","({any} | (any | any))"); }
		@Test public void test_10898() { testInvalid("{(any | any), (int | any)}","(!any | (any | any))"); }
		@Test public void test_10899() { testInvalid("{(any | any), (int | any)}","({any, any} | (any | any))"); }
		@Test public void test_10900() { testInvalid("{(any | any), (int | any)}","({any, int} | (any | any))"); }
		@Test public void test_10901() { testInvalid("{(any | any), (int | any)}","({int, int} | (any | any))"); }
		@Test public void test_10902() { testInvalid("{(any | any), (int | any)}","((int | any) | (any | any))"); }
		@Test public void test_10903() { testInvalid("{(any | any), (int | any)}","((any | int) | (any | any))"); }
		@Test public void test_10904() { testInvalid("{(any | any), (int | any)}","((any & int) | (any | any))"); }
		@Test public void test_10905() { testInvalid("{(any | any), (int | any)}","((int & int) | (any | any))"); }
		@Test public void test_10906() { testInvalid("{(any | any), (int | any)}","({any} | (int | any))"); }
		@Test public void test_10907() { testInvalid("{(any | any), (int | any)}","(!int | (int | any))"); }
		@Test public void test_10908() { testInvalid("{(any | any), (int | any)}","({int, any} | (int | any))"); }
		@Test public void test_10909() { testInvalid("{(any | any), (int | any)}","({any, int} | (int | any))"); }
		@Test public void test_10910() { testInvalid("{(any | any), (int | any)}","((int & any) | (int | any))"); }
		@Test public void test_10911() { testInvalid("{(any | any), (int | any)}","((any & int) | (int | any))"); }
		@Test public void test_10912() { testInvalid("{(any | any), (int | any)}","({any} | (any | int))"); }
		@Test public void test_10913() { testInvalid("{(any | any), (int | any)}","({int} | (any | int))"); }
		@Test public void test_10914() { testInvalid("{(any | any), (int | any)}","(!any | (any | int))"); }
		@Test public void test_10915() { testInvalid("{(any | any), (int | any)}","(!int | (any | int))"); }
		@Test public void test_10916() { testInvalid("{(any | any), (int | any)}","({any, int} | (any | int))"); }
		@Test public void test_10917() { testInvalid("{(any | any), (int | any)}","({int, int} | (any | int))"); }
		@Test public void test_10918() { testInvalid("{(any | any), (int | any)}","((int | any) | (any | int))"); }
		@Test public void test_10919() { testInvalid("{(any | any), (int | any)}","((any | int) | (any | int))"); }
		@Test public void test_10920() { testInvalid("{(any | any), (int | any)}","((int | int) | (any | int))"); }
		@Test public void test_10921() { testInvalid("{(any | any), (int | any)}","((any & any) | (any | int))"); }
		@Test public void test_10922() { testInvalid("{(any | any), (int | any)}","({int} | (int | int))"); }
		@Test public void test_10923() { testInvalid("{(any | any), (int | any)}","(!any | (int | int))"); }
		@Test public void test_10924() { testInvalid("{(any | any), (int | any)}","(!int | (int | int))"); }
		@Test public void test_10925() { testInvalid("{(any | any), (int | any)}","({int, any} | (int | int))"); }
		@Test public void test_10926() { testInvalid("{(any | any), (int | any)}","({any, int} | (int | int))"); }
		@Test public void test_10927() { testInvalid("{(any | any), (int | any)}","((any | int) | (int | int))"); }
		@Test public void test_10928() { testInvalid("{(any | any), (int | any)}","((int | int) | (int | int))"); }
		@Test public void test_10929() { testInvalid("{(any | any), (int | any)}","((any & any) | (int | int))"); }
		@Test public void test_10930() { testInvalid("{(any | any), (int | any)}","((int & any) | (int | int))"); }
		@Test public void test_10931() { testInvalid("{(any | any), (int | any)}","((int & int) | (int | int))"); }
		@Test public void test_10932() { testInvalid("{(any | any), (int | any)}","(!any | (any & any))"); }
		@Test public void test_10933() { testInvalid("{(any | any), (int | any)}","(!int | (any & any))"); }
		@Test public void test_10934() { testInvalid("{(any | any), (int | any)}","({any, any} | (any & any))"); }
		@Test public void test_10935() { testInvalid("{(any | any), (int | any)}","({int, any} | (any & any))"); }
		@Test public void test_10936() { testInvalid("{(any | any), (int | any)}","({any, int} | (any & any))"); }
		@Test public void test_10937() { testInvalid("{(any | any), (int | any)}","({int, int} | (any & any))"); }
		@Test public void test_10938() { testInvalid("{(any | any), (int | any)}","((int | any) | (any & any))"); }
		@Test public void test_10939() { testInvalid("{(any | any), (int | any)}","((int | int) | (any & any))"); }
		@Test public void test_10940() { testInvalid("{(any | any), (int | any)}","((int & any) | (any & any))"); }
		@Test public void test_10941() { testInvalid("{(any | any), (int | any)}","((any & int) | (any & any))"); }
		@Test public void test_10942() { testInvalid("{(any | any), (int | any)}","((int & int) | (any & any))"); }
		@Test public void test_10943() { testInvalid("{(any | any), (int | any)}","({any} | (int & any))"); }
		@Test public void test_10944() { testInvalid("{(int | int), (int | any)}","{int}"); }
		@Test public void test_10945() { testInvalid("{(int | int), (int | any)}","{any, any}"); }
		@Test public void test_10946() { testValid("{(int | int), (int | any)}","{int, int}"); }
		@Test public void test_10947() { testInvalid("{(int | int), (int | any)}","(any | int)"); }
		@Test public void test_10948() { testInvalid("{(int | int), (int | any)}","(int & any)"); }
		@Test public void test_10949() { testInvalid("{(int | int), (int | any)}","{{any}}"); }
		@Test public void test_10950() { testInvalid("{(int | int), (int | any)}","{{int, any}}"); }
		@Test public void test_10951() { testInvalid("{(int | int), (int | any)}","{{int, int}}"); }
		@Test public void test_10952() { testInvalid("{(int | int), (int | any)}","{(any | int)}"); }
		@Test public void test_10953() { testInvalid("{(int | int), (int | any)}","!{int, any}"); }
		@Test public void test_10954() { testInvalid("{(int | int), (int | any)}","!{int, int}"); }
		@Test public void test_10955() { testValid("{(int | int), (int | any)}","!(any | any)"); }
		@Test public void test_10956() { testValid("{(int | int), (int | any)}","!(any & any)"); }
		@Test public void test_10957() { testInvalid("{(int | int), (int | any)}","!(int & int)"); }
		@Test public void test_10958() { testInvalid("{(int | int), (int | any)}","{{int}, {any}}"); }
		@Test public void test_10959() { testInvalid("{(int | int), (int | any)}","{!int, {any}}"); }
		@Test public void test_10960() { testInvalid("{(int | int), (int | any)}","{{int, int}, {any}}"); }
		@Test public void test_10961() { testInvalid("{(int | int), (int | any)}","{(any | int), {any}}"); }
		@Test public void test_10962() { testInvalid("{(int | int), (int | any)}","{!int, {int}}"); }
		@Test public void test_10963() { testInvalid("{(int | int), (int | any)}","{{any, any}, {int}}"); }
		@Test public void test_10964() { testInvalid("{(int | int), (int | any)}","{(any | any), {int}}"); }
		@Test public void test_10965() { testInvalid("{(int | int), (int | any)}","{(any & any), {int}}"); }
		@Test public void test_10966() { testValid("{(int | int), (int | any)}","{(any & int), {int}}"); }
		@Test public void test_10967() { testInvalid("{(int | int), (int | any)}","{{any, any}, !int}"); }
		@Test public void test_10968() { testInvalid("{(int | int), (int | any)}","{{any, int}, !int}"); }
		@Test public void test_10969() { testInvalid("{(int | int), (int | any)}","{(any | any), !int}"); }
		@Test public void test_10970() { testInvalid("{(int | int), (int | any)}","{(int | any), !int}"); }
		@Test public void test_10971() { testInvalid("{(int | int), (int | any)}","{(any & any), !int}"); }
		@Test public void test_10972() { testValid("{(int | int), (int | any)}","{(int & any), !int}"); }
		@Test public void test_10973() { testValid("{(int | int), (int | any)}","{(int & int), !int}"); }
		@Test public void test_10974() { testInvalid("{(int | int), (int | any)}","{{any}, {any, any}}"); }
		@Test public void test_10975() { testInvalid("{(int | int), (int | any)}","{{int}, {any, any}}"); }
		@Test public void test_10976() { testInvalid("{(int | int), (int | any)}","{{int, int}, {any, any}}"); }
		@Test public void test_10977() { testInvalid("{(int | int), (int | any)}","{(any | any), {any, any}}"); }
		@Test public void test_10978() { testInvalid("{(int | int), (int | any)}","{(any | int), {any, any}}"); }
		@Test public void test_10979() { testInvalid("{(int | int), (int | any)}","{!int, {int, any}}"); }
		@Test public void test_10980() { testInvalid("{(int | int), (int | any)}","{{int, any}, {int, any}}"); }
		@Test public void test_10981() { testInvalid("{(int | int), (int | any)}","{{any, int}, {int, any}}"); }
		@Test public void test_10982() { testValid("{(int | int), (int | any)}","{(any & int), {int, any}}"); }
		@Test public void test_10983() { testInvalid("{(int | int), (int | any)}","{{any}, {any, int}}"); }
		@Test public void test_10984() { testInvalid("{(int | int), (int | any)}","{{int, int}, {any, int}}"); }
		@Test public void test_10985() { testValid("{(int | int), (int | any)}","{(int | int), {any, int}}"); }
		@Test public void test_10986() { testValid("{(int | int), (int | any)}","{(any & int), {any, int}}"); }
		@Test public void test_10987() { testInvalid("{(int | int), (int | any)}","{!int, {int, int}}"); }
		@Test public void test_10988() { testInvalid("{(int | int), (int | any)}","{{int, int}, {int, int}}"); }
		@Test public void test_10989() { testInvalid("{(int | int), (int | any)}","{(any | any), {int, int}}"); }
		@Test public void test_10990() { testInvalid("{(int | int), (int | any)}","{(int | any), {int, int}}"); }
		@Test public void test_10991() { testValid("{(int | int), (int | any)}","{(int & any), {int, int}}"); }
		@Test public void test_10992() { testInvalid("{(int | int), (int | any)}","{{int}, (any | any)}"); }
		@Test public void test_10993() { testInvalid("{(int | int), (int | any)}","{{int, any}, (any | any)}"); }
		@Test public void test_10994() { testInvalid("{(int | int), (int | any)}","{{any, int}, (any | any)}"); }
		@Test public void test_10995() { testInvalid("{(int | int), (int | any)}","{(any | any), (any | any)}"); }
		@Test public void test_10996() { testInvalid("{(int | int), (int | any)}","{(int | any), (any | any)}"); }
		@Test public void test_10997() { testValid("{(int | int), (int | any)}","{(int & int), (any | any)}"); }
		@Test public void test_10998() { testInvalid("{(int | int), (int | any)}","{!int, (int | any)}"); }
		@Test public void test_10999() { testInvalid("{(int | int), (int | any)}","{{int, int}, (int | any)}"); }
		@Test public void test_11000() { testInvalid("{(int | int), (int | any)}","{(any | any), (int | any)}"); }
		@Test public void test_11001() { testValid("{(int | int), (int | any)}","{(int | int), (int | any)}"); }
		@Test public void test_11002() { testInvalid("{(int | int), (int | any)}","{{any}, (any | int)}"); }
		@Test public void test_11003() { testInvalid("{(int | int), (int | any)}","{!int, (any | int)}"); }
		@Test public void test_11004() { testInvalid("{(int | int), (int | any)}","{(any | any), (any | int)}"); }
		@Test public void test_11005() { testInvalid("{(int | int), (int | any)}","{(any | int), (any | int)}"); }
		@Test public void test_11006() { testValid("{(int | int), (int | any)}","{(any & int), (any | int)}"); }
		@Test public void test_11007() { testInvalid("{(int | int), (int | any)}","{{int}, (int | int)}"); }
		@Test public void test_11008() { testInvalid("{(int | int), (int | any)}","{{any, any}, (int | int)}"); }
		@Test public void test_11009() { testInvalid("{(int | int), (int | any)}","{{int, int}, (int | int)}"); }
		@Test public void test_11010() { testInvalid("{(int | int), (int | any)}","{{int}, (any & any)}"); }
		@Test public void test_11011() { testInvalid("{(int | int), (int | any)}","{{int, any}, (any & any)}"); }
		@Test public void test_11012() { testInvalid("{(int | int), (int | any)}","{{any, int}, (any & any)}"); }
		@Test public void test_11013() { testInvalid("{(int | int), (int | any)}","{(int | any), (any & any)}"); }
		@Test public void test_11014() { testInvalid("{(int | int), (int | any)}","{(any & any), (any & any)}"); }
		@Test public void test_11015() { testValid("{(int | int), (int | any)}","{(int & any), (any & any)}"); }
		@Test public void test_11016() { testInvalid("{(int | int), (int | any)}","{{any}, (int & any)}"); }
		@Test public void test_11017() { testInvalid("{(int | int), (int | any)}","{{int}, (int & any)}"); }
		@Test public void test_11018() { testInvalid("{(int | int), (int | any)}","{{any, any}, (int & any)}"); }
		@Test public void test_11019() { testInvalid("{(int | int), (int | any)}","{{int, any}, (int & any)}"); }
		@Test public void test_11020() { testInvalid("{(int | int), (int | any)}","{(any | int), (int & any)}"); }
		@Test public void test_11021() { testInvalid("{(int | int), (int | any)}","{(any & any), (int & any)}"); }
		@Test public void test_11022() { testValid("{(int | int), (int | any)}","{(int & any), (int & any)}"); }
		@Test public void test_11023() { testValid("{(int | int), (int | any)}","{(int & int), (int & any)}"); }
		@Test public void test_11024() { testInvalid("{(int | int), (int | any)}","{{int, any}, (any & int)}"); }
		@Test public void test_11025() { testInvalid("{(int | int), (int | any)}","{(any & any), (any & int)}"); }
		@Test public void test_11026() { testInvalid("{(int | int), (int | any)}","{{any, int}, (int & int)}"); }
		@Test public void test_11027() { testValid("{(int | int), (int | any)}","{(int | int), (int & int)}"); }
		@Test public void test_11028() { testInvalid("{(int | int), (int | any)}","{(any & any), (int & int)}"); }
		@Test public void test_11029() { testValid("{(int | int), (int | any)}","{(any & int), (int & int)}"); }
		@Test public void test_11030() { testValid("{(int | int), (int | any)}","{(int & int), (int & int)}"); }
		@Test public void test_11031() { testInvalid("{(int | int), (int | any)}","(!int | {any})"); }
		@Test public void test_11032() { testInvalid("{(int | int), (int | any)}","({any, any} | {any})"); }
		@Test public void test_11033() { testInvalid("{(int | int), (int | any)}","((any | any) | {any})"); }
		@Test public void test_11034() { testInvalid("{(int | int), (int | any)}","((int | any) | {any})"); }
		@Test public void test_11035() { testInvalid("{(int | int), (int | any)}","((any & any) | {any})"); }
		@Test public void test_11036() { testInvalid("{(int | int), (int | any)}","((int & any) | {any})"); }
		@Test public void test_11037() { testInvalid("{(int | int), (int | any)}","((any & int) | {any})"); }
		@Test public void test_11038() { testInvalid("{(int | int), (int | any)}","({int} | {int})"); }
		@Test public void test_11039() { testInvalid("{(int | int), (int | any)}","(!any | {int})"); }
		@Test public void test_11040() { testInvalid("{(int | int), (int | any)}","(!int | {int})"); }
		@Test public void test_11041() { testInvalid("{(int | int), (int | any)}","({any, int} | {int})"); }
		@Test public void test_11042() { testInvalid("{(int | int), (int | any)}","((int & any) | {int})"); }
		@Test public void test_11043() { testInvalid("{(int | int), (int | any)}","((any & int) | {int})"); }
		@Test public void test_11044() { testInvalid("{(int | int), (int | any)}","((int & int) | {int})"); }
		@Test public void test_11045() { testInvalid("{(int | int), (int | any)}","({any} | !any)"); }
		@Test public void test_11046() { testInvalid("{(int | int), (int | any)}","({int} | !any)"); }
		@Test public void test_11047() { testInvalid("{(int | int), (int | any)}","({any, any} | !any)"); }
		@Test public void test_11048() { testValid("{(int | int), (int | any)}","({int, int} | !any)"); }
		@Test public void test_11049() { testInvalid("{(int | int), (int | any)}","((any | any) | !any)"); }
		@Test public void test_11050() { testInvalid("{(int | int), (int | any)}","((int | any) | !any)"); }
		@Test public void test_11051() { testInvalid("{(int | int), (int | any)}","((int | int) | !any)"); }
		@Test public void test_11052() { testInvalid("{(int | int), (int | any)}","((int & int) | !any)"); }
		@Test public void test_11053() { testInvalid("{(int | int), (int | any)}","(!int | !int)"); }
		@Test public void test_11054() { testInvalid("{(int | int), (int | any)}","({any, any} | !int)"); }
		@Test public void test_11055() { testInvalid("{(int | int), (int | any)}","({int, int} | !int)"); }
		@Test public void test_11056() { testInvalid("{(int | int), (int | any)}","((int | any) | !int)"); }
		@Test public void test_11057() { testInvalid("{(int | int), (int | any)}","((any | int) | !int)"); }
		@Test public void test_11058() { testInvalid("{(int | int), (int | any)}","((any & int) | !int)"); }
		@Test public void test_11059() { testInvalid("{(int | int), (int | any)}","((int & int) | !int)"); }
		@Test public void test_11060() { testInvalid("{(int | int), (int | any)}","({int} | {any, any})"); }
		@Test public void test_11061() { testInvalid("{(int | int), (int | any)}","(!any | {any, any})"); }
		@Test public void test_11062() { testInvalid("{(int | int), (int | any)}","(!int | {any, any})"); }
		@Test public void test_11063() { testInvalid("{(int | int), (int | any)}","({any, int} | {any, any})"); }
		@Test public void test_11064() { testInvalid("{(int | int), (int | any)}","((int | any) | {any, any})"); }
		@Test public void test_11065() { testInvalid("{(int | int), (int | any)}","((any & any) | {any, any})"); }
		@Test public void test_11066() { testInvalid("{(int | int), (int | any)}","((any & int) | {any, any})"); }
		@Test public void test_11067() { testInvalid("{(int | int), (int | any)}","(!int | {int, any})"); }
		@Test public void test_11068() { testInvalid("{(int | int), (int | any)}","({any, int} | {int, any})"); }
		@Test public void test_11069() { testInvalid("{(int | int), (int | any)}","((any | any) | {int, any})"); }
		@Test public void test_11070() { testInvalid("{(int | int), (int | any)}","((int | any) | {int, any})"); }
		@Test public void test_11071() { testInvalid("{(int | int), (int | any)}","((any | int) | {int, any})"); }
		@Test public void test_11072() { testInvalid("{(int | int), (int | any)}","((int & any) | {int, any})"); }
		@Test public void test_11073() { testInvalid("{(int | int), (int | any)}","({any} | {any, int})"); }
		@Test public void test_11074() { testInvalid("{(int | int), (int | any)}","(!int | {any, int})"); }
		@Test public void test_11075() { testInvalid("{(int | int), (int | any)}","({any, int} | {any, int})"); }
		@Test public void test_11076() { testInvalid("{(int | int), (int | any)}","((any | any) | {any, int})"); }
		@Test public void test_11077() { testInvalid("{(int | int), (int | any)}","((any | int) | {any, int})"); }
		@Test public void test_11078() { testInvalid("{(int | int), (int | any)}","((int | int) | {any, int})"); }
		@Test public void test_11079() { testInvalid("{(int | int), (int | any)}","((int & any) | {any, int})"); }
		@Test public void test_11080() { testValid("{(int | int), (int | any)}","(!any | {int, int})"); }
		@Test public void test_11081() { testInvalid("{(int | int), (int | any)}","(!int | {int, int})"); }
		@Test public void test_11082() { testInvalid("{(int | int), (int | any)}","({any, any} | {int, int})"); }
		@Test public void test_11083() { testInvalid("{(int | int), (int | any)}","({any, int} | {int, int})"); }
		@Test public void test_11084() { testInvalid("{(int | int), (int | any)}","((any | any) | {int, int})"); }
		@Test public void test_11085() { testInvalid("{(int | int), (int | any)}","((int | int) | {int, int})"); }
		@Test public void test_11086() { testInvalid("{(int | int), (int | any)}","((int & any) | {int, int})"); }
		@Test public void test_11087() { testInvalid("{(int | int), (int | any)}","((any & int) | {int, int})"); }
		@Test public void test_11088() { testInvalid("{(int | int), (int | any)}","((int & int) | {int, int})"); }
		@Test public void test_11089() { testInvalid("{(int | int), (int | any)}","({any} | (any | any))"); }
		@Test public void test_11090() { testInvalid("{(int | int), (int | any)}","(!any | (any | any))"); }
		@Test public void test_11091() { testInvalid("{(int | int), (int | any)}","({any, any} | (any | any))"); }
		@Test public void test_11092() { testInvalid("{(int | int), (int | any)}","({any, int} | (any | any))"); }
		@Test public void test_11093() { testInvalid("{(int | int), (int | any)}","({int, int} | (any | any))"); }
		@Test public void test_11094() { testInvalid("{(int | int), (int | any)}","((int | any) | (any | any))"); }
		@Test public void test_11095() { testInvalid("{(int | int), (int | any)}","((any | int) | (any | any))"); }
		@Test public void test_11096() { testInvalid("{(int | int), (int | any)}","((any & int) | (any | any))"); }
		@Test public void test_11097() { testInvalid("{(int | int), (int | any)}","((int & int) | (any | any))"); }
		@Test public void test_11098() { testInvalid("{(int | int), (int | any)}","({any} | (int | any))"); }
		@Test public void test_11099() { testInvalid("{(int | int), (int | any)}","(!int | (int | any))"); }
		@Test public void test_11100() { testInvalid("{(int | int), (int | any)}","({int, any} | (int | any))"); }
		@Test public void test_11101() { testInvalid("{(int | int), (int | any)}","({any, int} | (int | any))"); }
		@Test public void test_11102() { testInvalid("{(int | int), (int | any)}","((int & any) | (int | any))"); }
		@Test public void test_11103() { testInvalid("{(int | int), (int | any)}","((any & int) | (int | any))"); }
		@Test public void test_11104() { testInvalid("{(int | int), (int | any)}","({any} | (any | int))"); }
		@Test public void test_11105() { testInvalid("{(int | int), (int | any)}","({int} | (any | int))"); }
		@Test public void test_11106() { testInvalid("{(int | int), (int | any)}","(!any | (any | int))"); }
		@Test public void test_11107() { testInvalid("{(int | int), (int | any)}","(!int | (any | int))"); }
		@Test public void test_11108() { testInvalid("{(int | int), (int | any)}","({any, int} | (any | int))"); }
		@Test public void test_11109() { testInvalid("{(int | int), (int | any)}","({int, int} | (any | int))"); }
		@Test public void test_11110() { testInvalid("{(int | int), (int | any)}","((int | any) | (any | int))"); }
		@Test public void test_11111() { testInvalid("{(int | int), (int | any)}","((any | int) | (any | int))"); }
		@Test public void test_11112() { testInvalid("{(int | int), (int | any)}","((int | int) | (any | int))"); }
		@Test public void test_11113() { testInvalid("{(int | int), (int | any)}","((any & any) | (any | int))"); }
		@Test public void test_11114() { testInvalid("{(int | int), (int | any)}","({int} | (int | int))"); }
		@Test public void test_11115() { testInvalid("{(int | int), (int | any)}","(!any | (int | int))"); }
		@Test public void test_11116() { testInvalid("{(int | int), (int | any)}","(!int | (int | int))"); }
		@Test public void test_11117() { testInvalid("{(int | int), (int | any)}","({int, any} | (int | int))"); }
		@Test public void test_11118() { testInvalid("{(int | int), (int | any)}","({any, int} | (int | int))"); }
		@Test public void test_11119() { testInvalid("{(int | int), (int | any)}","((any | int) | (int | int))"); }
		@Test public void test_11120() { testInvalid("{(int | int), (int | any)}","((int | int) | (int | int))"); }
		@Test public void test_11121() { testInvalid("{(int | int), (int | any)}","((any & any) | (int | int))"); }
		@Test public void test_11122() { testInvalid("{(int | int), (int | any)}","((int & any) | (int | int))"); }
		@Test public void test_11123() { testInvalid("{(int | int), (int | any)}","((int & int) | (int | int))"); }
		@Test public void test_11124() { testInvalid("{(int | int), (int | any)}","(!any | (any & any))"); }
		@Test public void test_11125() { testInvalid("{(int | int), (int | any)}","(!int | (any & any))"); }
		@Test public void test_11126() { testInvalid("{(int | int), (int | any)}","({any, any} | (any & any))"); }
		@Test public void test_11127() { testInvalid("{(int | int), (int | any)}","({int, any} | (any & any))"); }
		@Test public void test_11128() { testInvalid("{(int | int), (int | any)}","({any, int} | (any & any))"); }
		@Test public void test_11129() { testInvalid("{(int | int), (int | any)}","({int, int} | (any & any))"); }
		@Test public void test_11130() { testInvalid("{(int | int), (int | any)}","((int | any) | (any & any))"); }
		@Test public void test_11131() { testInvalid("{(int | int), (int | any)}","((int | int) | (any & any))"); }
		@Test public void test_11132() { testInvalid("{(int | int), (int | any)}","((int & any) | (any & any))"); }
		@Test public void test_11133() { testInvalid("{(int | int), (int | any)}","((any & int) | (any & any))"); }
		@Test public void test_11134() { testInvalid("{(int | int), (int | any)}","((int & int) | (any & any))"); }
		@Test public void test_11135() { testInvalid("{(int | int), (int | any)}","({any} | (int & any))"); }
		@Test public void test_11136() { testInvalid("{{any}, (any | int)}","{int}"); }
		@Test public void test_11137() { testInvalid("{{any}, (any | int)}","{any, any}"); }
		@Test public void test_11138() { testInvalid("{{any}, (any | int)}","{int, int}"); }
		@Test public void test_11139() { testInvalid("{{any}, (any | int)}","(any | int)"); }
		@Test public void test_11140() { testInvalid("{{any}, (any | int)}","(int & any)"); }
		@Test public void test_11141() { testInvalid("{{any}, (any | int)}","{{any}}"); }
		@Test public void test_11142() { testInvalid("{{any}, (any | int)}","{{int, any}}"); }
		@Test public void test_11143() { testInvalid("{{any}, (any | int)}","{{int, int}}"); }
		@Test public void test_11144() { testInvalid("{{any}, (any | int)}","{(any | int)}"); }
		@Test public void test_11145() { testInvalid("{{any}, (any | int)}","!{int, any}"); }
		@Test public void test_11146() { testInvalid("{{any}, (any | int)}","!{int, int}"); }
		@Test public void test_11147() { testValid("{{any}, (any | int)}","!(any | any)"); }
		@Test public void test_11148() { testValid("{{any}, (any | int)}","!(any & any)"); }
		@Test public void test_11149() { testInvalid("{{any}, (any | int)}","!(int & int)"); }
		@Test public void test_11150() { testValid("{{any}, (any | int)}","{{int}, {any}}"); }
		@Test public void test_11151() { testInvalid("{{any}, (any | int)}","{!int, {any}}"); }
		@Test public void test_11152() { testInvalid("{{any}, (any | int)}","{{int, int}, {any}}"); }
		@Test public void test_11153() { testInvalid("{{any}, (any | int)}","{(any | int), {any}}"); }
		@Test public void test_11154() { testInvalid("{{any}, (any | int)}","{!int, {int}}"); }
		@Test public void test_11155() { testInvalid("{{any}, (any | int)}","{{any, any}, {int}}"); }
		@Test public void test_11156() { testInvalid("{{any}, (any | int)}","{(any | any), {int}}"); }
		@Test public void test_11157() { testInvalid("{{any}, (any | int)}","{(any & any), {int}}"); }
		@Test public void test_11158() { testInvalid("{{any}, (any | int)}","{(any & int), {int}}"); }
		@Test public void test_11159() { testInvalid("{{any}, (any | int)}","{{any, any}, !int}"); }
		@Test public void test_11160() { testInvalid("{{any}, (any | int)}","{{any, int}, !int}"); }
		@Test public void test_11161() { testInvalid("{{any}, (any | int)}","{(any | any), !int}"); }
		@Test public void test_11162() { testInvalid("{{any}, (any | int)}","{(int | any), !int}"); }
		@Test public void test_11163() { testInvalid("{{any}, (any | int)}","{(any & any), !int}"); }
		@Test public void test_11164() { testInvalid("{{any}, (any | int)}","{(int & any), !int}"); }
		@Test public void test_11165() { testInvalid("{{any}, (any | int)}","{(int & int), !int}"); }
		@Test public void test_11166() { testValid("{{any}, (any | int)}","{{any}, {any, any}}"); }
		@Test public void test_11167() { testValid("{{any}, (any | int)}","{{int}, {any, any}}"); }
		@Test public void test_11168() { testInvalid("{{any}, (any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_11169() { testInvalid("{{any}, (any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_11170() { testInvalid("{{any}, (any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_11171() { testInvalid("{{any}, (any | int)}","{!int, {int, any}}"); }
		@Test public void test_11172() { testInvalid("{{any}, (any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_11173() { testInvalid("{{any}, (any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_11174() { testInvalid("{{any}, (any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_11175() { testValid("{{any}, (any | int)}","{{any}, {any, int}}"); }
		@Test public void test_11176() { testInvalid("{{any}, (any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_11177() { testInvalid("{{any}, (any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_11178() { testInvalid("{{any}, (any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_11179() { testInvalid("{{any}, (any | int)}","{!int, {int, int}}"); }
		@Test public void test_11180() { testInvalid("{{any}, (any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_11181() { testInvalid("{{any}, (any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_11182() { testInvalid("{{any}, (any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_11183() { testInvalid("{{any}, (any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_11184() { testValid("{{any}, (any | int)}","{{int}, (any | any)}"); }
		@Test public void test_11185() { testInvalid("{{any}, (any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_11186() { testInvalid("{{any}, (any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_11187() { testInvalid("{{any}, (any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_11188() { testInvalid("{{any}, (any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_11189() { testInvalid("{{any}, (any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_11190() { testInvalid("{{any}, (any | int)}","{!int, (int | any)}"); }
		@Test public void test_11191() { testInvalid("{{any}, (any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_11192() { testInvalid("{{any}, (any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_11193() { testInvalid("{{any}, (any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_11194() { testValid("{{any}, (any | int)}","{{any}, (any | int)}"); }
		@Test public void test_11195() { testInvalid("{{any}, (any | int)}","{!int, (any | int)}"); }
		@Test public void test_11196() { testInvalid("{{any}, (any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_11197() { testInvalid("{{any}, (any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_11198() { testInvalid("{{any}, (any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_11199() { testValid("{{any}, (any | int)}","{{int}, (int | int)}"); }
		@Test public void test_11200() { testInvalid("{{any}, (any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_11201() { testInvalid("{{any}, (any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_11202() { testValid("{{any}, (any | int)}","{{int}, (any & any)}"); }
		@Test public void test_11203() { testInvalid("{{any}, (any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_11204() { testInvalid("{{any}, (any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_11205() { testInvalid("{{any}, (any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_11206() { testInvalid("{{any}, (any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_11207() { testInvalid("{{any}, (any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_11208() { testValid("{{any}, (any | int)}","{{any}, (int & any)}"); }
		@Test public void test_11209() { testValid("{{any}, (any | int)}","{{int}, (int & any)}"); }
		@Test public void test_11210() { testInvalid("{{any}, (any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_11211() { testInvalid("{{any}, (any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_11212() { testInvalid("{{any}, (any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_11213() { testInvalid("{{any}, (any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_11214() { testInvalid("{{any}, (any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_11215() { testInvalid("{{any}, (any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_11216() { testInvalid("{{any}, (any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_11217() { testInvalid("{{any}, (any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_11218() { testInvalid("{{any}, (any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_11219() { testInvalid("{{any}, (any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_11220() { testInvalid("{{any}, (any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_11221() { testInvalid("{{any}, (any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_11222() { testInvalid("{{any}, (any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_11223() { testInvalid("{{any}, (any | int)}","(!int | {any})"); }
		@Test public void test_11224() { testInvalid("{{any}, (any | int)}","({any, any} | {any})"); }
		@Test public void test_11225() { testInvalid("{{any}, (any | int)}","((any | any) | {any})"); }
		@Test public void test_11226() { testInvalid("{{any}, (any | int)}","((int | any) | {any})"); }
		@Test public void test_11227() { testInvalid("{{any}, (any | int)}","((any & any) | {any})"); }
		@Test public void test_11228() { testInvalid("{{any}, (any | int)}","((int & any) | {any})"); }
		@Test public void test_11229() { testInvalid("{{any}, (any | int)}","((any & int) | {any})"); }
		@Test public void test_11230() { testInvalid("{{any}, (any | int)}","({int} | {int})"); }
		@Test public void test_11231() { testInvalid("{{any}, (any | int)}","(!any | {int})"); }
		@Test public void test_11232() { testInvalid("{{any}, (any | int)}","(!int | {int})"); }
		@Test public void test_11233() { testInvalid("{{any}, (any | int)}","({any, int} | {int})"); }
		@Test public void test_11234() { testInvalid("{{any}, (any | int)}","((int & any) | {int})"); }
		@Test public void test_11235() { testInvalid("{{any}, (any | int)}","((any & int) | {int})"); }
		@Test public void test_11236() { testInvalid("{{any}, (any | int)}","((int & int) | {int})"); }
		@Test public void test_11237() { testInvalid("{{any}, (any | int)}","({any} | !any)"); }
		@Test public void test_11238() { testInvalid("{{any}, (any | int)}","({int} | !any)"); }
		@Test public void test_11239() { testInvalid("{{any}, (any | int)}","({any, any} | !any)"); }
		@Test public void test_11240() { testInvalid("{{any}, (any | int)}","({int, int} | !any)"); }
		@Test public void test_11241() { testInvalid("{{any}, (any | int)}","((any | any) | !any)"); }
		@Test public void test_11242() { testInvalid("{{any}, (any | int)}","((int | any) | !any)"); }
		@Test public void test_11243() { testInvalid("{{any}, (any | int)}","((int | int) | !any)"); }
		@Test public void test_11244() { testInvalid("{{any}, (any | int)}","((int & int) | !any)"); }
		@Test public void test_11245() { testInvalid("{{any}, (any | int)}","(!int | !int)"); }
		@Test public void test_11246() { testInvalid("{{any}, (any | int)}","({any, any} | !int)"); }
		@Test public void test_11247() { testInvalid("{{any}, (any | int)}","({int, int} | !int)"); }
		@Test public void test_11248() { testInvalid("{{any}, (any | int)}","((int | any) | !int)"); }
		@Test public void test_11249() { testInvalid("{{any}, (any | int)}","((any | int) | !int)"); }
		@Test public void test_11250() { testInvalid("{{any}, (any | int)}","((any & int) | !int)"); }
		@Test public void test_11251() { testInvalid("{{any}, (any | int)}","((int & int) | !int)"); }
		@Test public void test_11252() { testInvalid("{{any}, (any | int)}","({int} | {any, any})"); }
		@Test public void test_11253() { testInvalid("{{any}, (any | int)}","(!any | {any, any})"); }
		@Test public void test_11254() { testInvalid("{{any}, (any | int)}","(!int | {any, any})"); }
		@Test public void test_11255() { testInvalid("{{any}, (any | int)}","({any, int} | {any, any})"); }
		@Test public void test_11256() { testInvalid("{{any}, (any | int)}","((int | any) | {any, any})"); }
		@Test public void test_11257() { testInvalid("{{any}, (any | int)}","((any & any) | {any, any})"); }
		@Test public void test_11258() { testInvalid("{{any}, (any | int)}","((any & int) | {any, any})"); }
		@Test public void test_11259() { testInvalid("{{any}, (any | int)}","(!int | {int, any})"); }
		@Test public void test_11260() { testInvalid("{{any}, (any | int)}","({any, int} | {int, any})"); }
		@Test public void test_11261() { testInvalid("{{any}, (any | int)}","((any | any) | {int, any})"); }
		@Test public void test_11262() { testInvalid("{{any}, (any | int)}","((int | any) | {int, any})"); }
		@Test public void test_11263() { testInvalid("{{any}, (any | int)}","((any | int) | {int, any})"); }
		@Test public void test_11264() { testInvalid("{{any}, (any | int)}","((int & any) | {int, any})"); }
		@Test public void test_11265() { testInvalid("{{any}, (any | int)}","({any} | {any, int})"); }
		@Test public void test_11266() { testInvalid("{{any}, (any | int)}","(!int | {any, int})"); }
		@Test public void test_11267() { testInvalid("{{any}, (any | int)}","({any, int} | {any, int})"); }
		@Test public void test_11268() { testInvalid("{{any}, (any | int)}","((any | any) | {any, int})"); }
		@Test public void test_11269() { testInvalid("{{any}, (any | int)}","((any | int) | {any, int})"); }
		@Test public void test_11270() { testInvalid("{{any}, (any | int)}","((int | int) | {any, int})"); }
		@Test public void test_11271() { testInvalid("{{any}, (any | int)}","((int & any) | {any, int})"); }
		@Test public void test_11272() { testInvalid("{{any}, (any | int)}","(!any | {int, int})"); }
		@Test public void test_11273() { testInvalid("{{any}, (any | int)}","(!int | {int, int})"); }
		@Test public void test_11274() { testInvalid("{{any}, (any | int)}","({any, any} | {int, int})"); }
		@Test public void test_11275() { testInvalid("{{any}, (any | int)}","({any, int} | {int, int})"); }
		@Test public void test_11276() { testInvalid("{{any}, (any | int)}","((any | any) | {int, int})"); }
		@Test public void test_11277() { testInvalid("{{any}, (any | int)}","((int | int) | {int, int})"); }
		@Test public void test_11278() { testInvalid("{{any}, (any | int)}","((int & any) | {int, int})"); }
		@Test public void test_11279() { testInvalid("{{any}, (any | int)}","((any & int) | {int, int})"); }
		@Test public void test_11280() { testInvalid("{{any}, (any | int)}","((int & int) | {int, int})"); }
		@Test public void test_11281() { testInvalid("{{any}, (any | int)}","({any} | (any | any))"); }
		@Test public void test_11282() { testInvalid("{{any}, (any | int)}","(!any | (any | any))"); }
		@Test public void test_11283() { testInvalid("{{any}, (any | int)}","({any, any} | (any | any))"); }
		@Test public void test_11284() { testInvalid("{{any}, (any | int)}","({any, int} | (any | any))"); }
		@Test public void test_11285() { testInvalid("{{any}, (any | int)}","({int, int} | (any | any))"); }
		@Test public void test_11286() { testInvalid("{{any}, (any | int)}","((int | any) | (any | any))"); }
		@Test public void test_11287() { testInvalid("{{any}, (any | int)}","((any | int) | (any | any))"); }
		@Test public void test_11288() { testInvalid("{{any}, (any | int)}","((any & int) | (any | any))"); }
		@Test public void test_11289() { testInvalid("{{any}, (any | int)}","((int & int) | (any | any))"); }
		@Test public void test_11290() { testInvalid("{{any}, (any | int)}","({any} | (int | any))"); }
		@Test public void test_11291() { testInvalid("{{any}, (any | int)}","(!int | (int | any))"); }
		@Test public void test_11292() { testInvalid("{{any}, (any | int)}","({int, any} | (int | any))"); }
		@Test public void test_11293() { testInvalid("{{any}, (any | int)}","({any, int} | (int | any))"); }
		@Test public void test_11294() { testInvalid("{{any}, (any | int)}","((int & any) | (int | any))"); }
		@Test public void test_11295() { testInvalid("{{any}, (any | int)}","((any & int) | (int | any))"); }
		@Test public void test_11296() { testInvalid("{{any}, (any | int)}","({any} | (any | int))"); }
		@Test public void test_11297() { testInvalid("{{any}, (any | int)}","({int} | (any | int))"); }
		@Test public void test_11298() { testInvalid("{{any}, (any | int)}","(!any | (any | int))"); }
		@Test public void test_11299() { testInvalid("{{any}, (any | int)}","(!int | (any | int))"); }
		@Test public void test_11300() { testInvalid("{{any}, (any | int)}","({any, int} | (any | int))"); }
		@Test public void test_11301() { testInvalid("{{any}, (any | int)}","({int, int} | (any | int))"); }
		@Test public void test_11302() { testInvalid("{{any}, (any | int)}","((int | any) | (any | int))"); }
		@Test public void test_11303() { testInvalid("{{any}, (any | int)}","((any | int) | (any | int))"); }
		@Test public void test_11304() { testInvalid("{{any}, (any | int)}","((int | int) | (any | int))"); }
		@Test public void test_11305() { testInvalid("{{any}, (any | int)}","((any & any) | (any | int))"); }
		@Test public void test_11306() { testInvalid("{{any}, (any | int)}","({int} | (int | int))"); }
		@Test public void test_11307() { testInvalid("{{any}, (any | int)}","(!any | (int | int))"); }
		@Test public void test_11308() { testInvalid("{{any}, (any | int)}","(!int | (int | int))"); }
		@Test public void test_11309() { testInvalid("{{any}, (any | int)}","({int, any} | (int | int))"); }
		@Test public void test_11310() { testInvalid("{{any}, (any | int)}","({any, int} | (int | int))"); }
		@Test public void test_11311() { testInvalid("{{any}, (any | int)}","((any | int) | (int | int))"); }
		@Test public void test_11312() { testInvalid("{{any}, (any | int)}","((int | int) | (int | int))"); }
		@Test public void test_11313() { testInvalid("{{any}, (any | int)}","((any & any) | (int | int))"); }
		@Test public void test_11314() { testInvalid("{{any}, (any | int)}","((int & any) | (int | int))"); }
		@Test public void test_11315() { testInvalid("{{any}, (any | int)}","((int & int) | (int | int))"); }
		@Test public void test_11316() { testInvalid("{{any}, (any | int)}","(!any | (any & any))"); }
		@Test public void test_11317() { testInvalid("{{any}, (any | int)}","(!int | (any & any))"); }
		@Test public void test_11318() { testInvalid("{{any}, (any | int)}","({any, any} | (any & any))"); }
		@Test public void test_11319() { testInvalid("{{any}, (any | int)}","({int, any} | (any & any))"); }
		@Test public void test_11320() { testInvalid("{{any}, (any | int)}","({any, int} | (any & any))"); }
		@Test public void test_11321() { testInvalid("{{any}, (any | int)}","({int, int} | (any & any))"); }
		@Test public void test_11322() { testInvalid("{{any}, (any | int)}","((int | any) | (any & any))"); }
		@Test public void test_11323() { testInvalid("{{any}, (any | int)}","((int | int) | (any & any))"); }
		@Test public void test_11324() { testInvalid("{{any}, (any | int)}","((int & any) | (any & any))"); }
		@Test public void test_11325() { testInvalid("{{any}, (any | int)}","((any & int) | (any & any))"); }
		@Test public void test_11326() { testInvalid("{{any}, (any | int)}","((int & int) | (any & any))"); }
		@Test public void test_11327() { testInvalid("{{any}, (any | int)}","({any} | (int & any))"); }
		@Test public void test_11328() { testInvalid("{!int, (any | int)}","{int}"); }
		@Test public void test_11329() { testInvalid("{!int, (any | int)}","{any, any}"); }
		@Test public void test_11330() { testInvalid("{!int, (any | int)}","{int, int}"); }
		@Test public void test_11331() { testInvalid("{!int, (any | int)}","(any | int)"); }
		@Test public void test_11332() { testInvalid("{!int, (any | int)}","(int & any)"); }
		@Test public void test_11333() { testInvalid("{!int, (any | int)}","{{any}}"); }
		@Test public void test_11334() { testInvalid("{!int, (any | int)}","{{int, any}}"); }
		@Test public void test_11335() { testInvalid("{!int, (any | int)}","{{int, int}}"); }
		@Test public void test_11336() { testInvalid("{!int, (any | int)}","{(any | int)}"); }
		@Test public void test_11337() { testInvalid("{!int, (any | int)}","!{int, any}"); }
		@Test public void test_11338() { testInvalid("{!int, (any | int)}","!{int, int}"); }
		@Test public void test_11339() { testValid("{!int, (any | int)}","!(any | any)"); }
		@Test public void test_11340() { testValid("{!int, (any | int)}","!(any & any)"); }
		@Test public void test_11341() { testInvalid("{!int, (any | int)}","!(int & int)"); }
		@Test public void test_11342() { testValid("{!int, (any | int)}","{{int}, {any}}"); }
		@Test public void test_11343() { testValid("{!int, (any | int)}","{!int, {any}}"); }
		@Test public void test_11344() { testValid("{!int, (any | int)}","{{int, int}, {any}}"); }
		@Test public void test_11345() { testInvalid("{!int, (any | int)}","{(any | int), {any}}"); }
		@Test public void test_11346() { testValid("{!int, (any | int)}","{!int, {int}}"); }
		@Test public void test_11347() { testValid("{!int, (any | int)}","{{any, any}, {int}}"); }
		@Test public void test_11348() { testInvalid("{!int, (any | int)}","{(any | any), {int}}"); }
		@Test public void test_11349() { testInvalid("{!int, (any | int)}","{(any & any), {int}}"); }
		@Test public void test_11350() { testInvalid("{!int, (any | int)}","{(any & int), {int}}"); }
		@Test public void test_11351() { testValid("{!int, (any | int)}","{{any, any}, !int}"); }
		@Test public void test_11352() { testValid("{!int, (any | int)}","{{any, int}, !int}"); }
		@Test public void test_11353() { testInvalid("{!int, (any | int)}","{(any | any), !int}"); }
		@Test public void test_11354() { testInvalid("{!int, (any | int)}","{(int | any), !int}"); }
		@Test public void test_11355() { testInvalid("{!int, (any | int)}","{(any & any), !int}"); }
		@Test public void test_11356() { testInvalid("{!int, (any | int)}","{(int & any), !int}"); }
		@Test public void test_11357() { testInvalid("{!int, (any | int)}","{(int & int), !int}"); }
		@Test public void test_11358() { testValid("{!int, (any | int)}","{{any}, {any, any}}"); }
		@Test public void test_11359() { testValid("{!int, (any | int)}","{{int}, {any, any}}"); }
		@Test public void test_11360() { testValid("{!int, (any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_11361() { testInvalid("{!int, (any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_11362() { testInvalid("{!int, (any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_11363() { testValid("{!int, (any | int)}","{!int, {int, any}}"); }
		@Test public void test_11364() { testValid("{!int, (any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_11365() { testValid("{!int, (any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_11366() { testInvalid("{!int, (any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_11367() { testValid("{!int, (any | int)}","{{any}, {any, int}}"); }
		@Test public void test_11368() { testValid("{!int, (any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_11369() { testInvalid("{!int, (any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_11370() { testInvalid("{!int, (any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_11371() { testValid("{!int, (any | int)}","{!int, {int, int}}"); }
		@Test public void test_11372() { testValid("{!int, (any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_11373() { testInvalid("{!int, (any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_11374() { testInvalid("{!int, (any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_11375() { testInvalid("{!int, (any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_11376() { testValid("{!int, (any | int)}","{{int}, (any | any)}"); }
		@Test public void test_11377() { testValid("{!int, (any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_11378() { testValid("{!int, (any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_11379() { testInvalid("{!int, (any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_11380() { testInvalid("{!int, (any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_11381() { testInvalid("{!int, (any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_11382() { testValid("{!int, (any | int)}","{!int, (int | any)}"); }
		@Test public void test_11383() { testValid("{!int, (any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_11384() { testInvalid("{!int, (any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_11385() { testInvalid("{!int, (any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_11386() { testValid("{!int, (any | int)}","{{any}, (any | int)}"); }
		@Test public void test_11387() { testValid("{!int, (any | int)}","{!int, (any | int)}"); }
		@Test public void test_11388() { testInvalid("{!int, (any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_11389() { testInvalid("{!int, (any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_11390() { testInvalid("{!int, (any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_11391() { testValid("{!int, (any | int)}","{{int}, (int | int)}"); }
		@Test public void test_11392() { testValid("{!int, (any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_11393() { testValid("{!int, (any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_11394() { testValid("{!int, (any | int)}","{{int}, (any & any)}"); }
		@Test public void test_11395() { testValid("{!int, (any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_11396() { testValid("{!int, (any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_11397() { testInvalid("{!int, (any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_11398() { testInvalid("{!int, (any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_11399() { testInvalid("{!int, (any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_11400() { testValid("{!int, (any | int)}","{{any}, (int & any)}"); }
		@Test public void test_11401() { testValid("{!int, (any | int)}","{{int}, (int & any)}"); }
		@Test public void test_11402() { testValid("{!int, (any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_11403() { testValid("{!int, (any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_11404() { testInvalid("{!int, (any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_11405() { testInvalid("{!int, (any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_11406() { testInvalid("{!int, (any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_11407() { testInvalid("{!int, (any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_11408() { testValid("{!int, (any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_11409() { testInvalid("{!int, (any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_11410() { testValid("{!int, (any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_11411() { testInvalid("{!int, (any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_11412() { testInvalid("{!int, (any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_11413() { testInvalid("{!int, (any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_11414() { testInvalid("{!int, (any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_11415() { testInvalid("{!int, (any | int)}","(!int | {any})"); }
		@Test public void test_11416() { testInvalid("{!int, (any | int)}","({any, any} | {any})"); }
		@Test public void test_11417() { testInvalid("{!int, (any | int)}","((any | any) | {any})"); }
		@Test public void test_11418() { testInvalid("{!int, (any | int)}","((int | any) | {any})"); }
		@Test public void test_11419() { testInvalid("{!int, (any | int)}","((any & any) | {any})"); }
		@Test public void test_11420() { testInvalid("{!int, (any | int)}","((int & any) | {any})"); }
		@Test public void test_11421() { testInvalid("{!int, (any | int)}","((any & int) | {any})"); }
		@Test public void test_11422() { testInvalid("{!int, (any | int)}","({int} | {int})"); }
		@Test public void test_11423() { testInvalid("{!int, (any | int)}","(!any | {int})"); }
		@Test public void test_11424() { testInvalid("{!int, (any | int)}","(!int | {int})"); }
		@Test public void test_11425() { testInvalid("{!int, (any | int)}","({any, int} | {int})"); }
		@Test public void test_11426() { testInvalid("{!int, (any | int)}","((int & any) | {int})"); }
		@Test public void test_11427() { testInvalid("{!int, (any | int)}","((any & int) | {int})"); }
		@Test public void test_11428() { testInvalid("{!int, (any | int)}","((int & int) | {int})"); }
		@Test public void test_11429() { testInvalid("{!int, (any | int)}","({any} | !any)"); }
		@Test public void test_11430() { testInvalid("{!int, (any | int)}","({int} | !any)"); }
		@Test public void test_11431() { testInvalid("{!int, (any | int)}","({any, any} | !any)"); }
		@Test public void test_11432() { testInvalid("{!int, (any | int)}","({int, int} | !any)"); }
		@Test public void test_11433() { testInvalid("{!int, (any | int)}","((any | any) | !any)"); }
		@Test public void test_11434() { testInvalid("{!int, (any | int)}","((int | any) | !any)"); }
		@Test public void test_11435() { testInvalid("{!int, (any | int)}","((int | int) | !any)"); }
		@Test public void test_11436() { testInvalid("{!int, (any | int)}","((int & int) | !any)"); }
		@Test public void test_11437() { testInvalid("{!int, (any | int)}","(!int | !int)"); }
		@Test public void test_11438() { testInvalid("{!int, (any | int)}","({any, any} | !int)"); }
		@Test public void test_11439() { testInvalid("{!int, (any | int)}","({int, int} | !int)"); }
		@Test public void test_11440() { testInvalid("{!int, (any | int)}","((int | any) | !int)"); }
		@Test public void test_11441() { testInvalid("{!int, (any | int)}","((any | int) | !int)"); }
		@Test public void test_11442() { testInvalid("{!int, (any | int)}","((any & int) | !int)"); }
		@Test public void test_11443() { testInvalid("{!int, (any | int)}","((int & int) | !int)"); }
		@Test public void test_11444() { testInvalid("{!int, (any | int)}","({int} | {any, any})"); }
		@Test public void test_11445() { testInvalid("{!int, (any | int)}","(!any | {any, any})"); }
		@Test public void test_11446() { testInvalid("{!int, (any | int)}","(!int | {any, any})"); }
		@Test public void test_11447() { testInvalid("{!int, (any | int)}","({any, int} | {any, any})"); }
		@Test public void test_11448() { testInvalid("{!int, (any | int)}","((int | any) | {any, any})"); }
		@Test public void test_11449() { testInvalid("{!int, (any | int)}","((any & any) | {any, any})"); }
		@Test public void test_11450() { testInvalid("{!int, (any | int)}","((any & int) | {any, any})"); }
		@Test public void test_11451() { testInvalid("{!int, (any | int)}","(!int | {int, any})"); }
		@Test public void test_11452() { testInvalid("{!int, (any | int)}","({any, int} | {int, any})"); }
		@Test public void test_11453() { testInvalid("{!int, (any | int)}","((any | any) | {int, any})"); }
		@Test public void test_11454() { testInvalid("{!int, (any | int)}","((int | any) | {int, any})"); }
		@Test public void test_11455() { testInvalid("{!int, (any | int)}","((any | int) | {int, any})"); }
		@Test public void test_11456() { testInvalid("{!int, (any | int)}","((int & any) | {int, any})"); }
		@Test public void test_11457() { testInvalid("{!int, (any | int)}","({any} | {any, int})"); }
		@Test public void test_11458() { testInvalid("{!int, (any | int)}","(!int | {any, int})"); }
		@Test public void test_11459() { testInvalid("{!int, (any | int)}","({any, int} | {any, int})"); }
		@Test public void test_11460() { testInvalid("{!int, (any | int)}","((any | any) | {any, int})"); }
		@Test public void test_11461() { testInvalid("{!int, (any | int)}","((any | int) | {any, int})"); }
		@Test public void test_11462() { testInvalid("{!int, (any | int)}","((int | int) | {any, int})"); }
		@Test public void test_11463() { testInvalid("{!int, (any | int)}","((int & any) | {any, int})"); }
		@Test public void test_11464() { testInvalid("{!int, (any | int)}","(!any | {int, int})"); }
		@Test public void test_11465() { testInvalid("{!int, (any | int)}","(!int | {int, int})"); }
		@Test public void test_11466() { testInvalid("{!int, (any | int)}","({any, any} | {int, int})"); }
		@Test public void test_11467() { testInvalid("{!int, (any | int)}","({any, int} | {int, int})"); }
		@Test public void test_11468() { testInvalid("{!int, (any | int)}","((any | any) | {int, int})"); }
		@Test public void test_11469() { testInvalid("{!int, (any | int)}","((int | int) | {int, int})"); }
		@Test public void test_11470() { testInvalid("{!int, (any | int)}","((int & any) | {int, int})"); }
		@Test public void test_11471() { testInvalid("{!int, (any | int)}","((any & int) | {int, int})"); }
		@Test public void test_11472() { testInvalid("{!int, (any | int)}","((int & int) | {int, int})"); }
		@Test public void test_11473() { testInvalid("{!int, (any | int)}","({any} | (any | any))"); }
		@Test public void test_11474() { testInvalid("{!int, (any | int)}","(!any | (any | any))"); }
		@Test public void test_11475() { testInvalid("{!int, (any | int)}","({any, any} | (any | any))"); }
		@Test public void test_11476() { testInvalid("{!int, (any | int)}","({any, int} | (any | any))"); }
		@Test public void test_11477() { testInvalid("{!int, (any | int)}","({int, int} | (any | any))"); }
		@Test public void test_11478() { testInvalid("{!int, (any | int)}","((int | any) | (any | any))"); }
		@Test public void test_11479() { testInvalid("{!int, (any | int)}","((any | int) | (any | any))"); }
		@Test public void test_11480() { testInvalid("{!int, (any | int)}","((any & int) | (any | any))"); }
		@Test public void test_11481() { testInvalid("{!int, (any | int)}","((int & int) | (any | any))"); }
		@Test public void test_11482() { testInvalid("{!int, (any | int)}","({any} | (int | any))"); }
		@Test public void test_11483() { testInvalid("{!int, (any | int)}","(!int | (int | any))"); }
		@Test public void test_11484() { testInvalid("{!int, (any | int)}","({int, any} | (int | any))"); }
		@Test public void test_11485() { testInvalid("{!int, (any | int)}","({any, int} | (int | any))"); }
		@Test public void test_11486() { testInvalid("{!int, (any | int)}","((int & any) | (int | any))"); }
		@Test public void test_11487() { testInvalid("{!int, (any | int)}","((any & int) | (int | any))"); }
		@Test public void test_11488() { testInvalid("{!int, (any | int)}","({any} | (any | int))"); }
		@Test public void test_11489() { testInvalid("{!int, (any | int)}","({int} | (any | int))"); }
		@Test public void test_11490() { testInvalid("{!int, (any | int)}","(!any | (any | int))"); }
		@Test public void test_11491() { testInvalid("{!int, (any | int)}","(!int | (any | int))"); }
		@Test public void test_11492() { testInvalid("{!int, (any | int)}","({any, int} | (any | int))"); }
		@Test public void test_11493() { testInvalid("{!int, (any | int)}","({int, int} | (any | int))"); }
		@Test public void test_11494() { testInvalid("{!int, (any | int)}","((int | any) | (any | int))"); }
		@Test public void test_11495() { testInvalid("{!int, (any | int)}","((any | int) | (any | int))"); }
		@Test public void test_11496() { testInvalid("{!int, (any | int)}","((int | int) | (any | int))"); }
		@Test public void test_11497() { testInvalid("{!int, (any | int)}","((any & any) | (any | int))"); }
		@Test public void test_11498() { testInvalid("{!int, (any | int)}","({int} | (int | int))"); }
		@Test public void test_11499() { testInvalid("{!int, (any | int)}","(!any | (int | int))"); }
		@Test public void test_11500() { testInvalid("{!int, (any | int)}","(!int | (int | int))"); }
		@Test public void test_11501() { testInvalid("{!int, (any | int)}","({int, any} | (int | int))"); }
		@Test public void test_11502() { testInvalid("{!int, (any | int)}","({any, int} | (int | int))"); }
		@Test public void test_11503() { testInvalid("{!int, (any | int)}","((any | int) | (int | int))"); }
		@Test public void test_11504() { testInvalid("{!int, (any | int)}","((int | int) | (int | int))"); }
		@Test public void test_11505() { testInvalid("{!int, (any | int)}","((any & any) | (int | int))"); }
		@Test public void test_11506() { testInvalid("{!int, (any | int)}","((int & any) | (int | int))"); }
		@Test public void test_11507() { testInvalid("{!int, (any | int)}","((int & int) | (int | int))"); }
		@Test public void test_11508() { testInvalid("{!int, (any | int)}","(!any | (any & any))"); }
		@Test public void test_11509() { testInvalid("{!int, (any | int)}","(!int | (any & any))"); }
		@Test public void test_11510() { testInvalid("{!int, (any | int)}","({any, any} | (any & any))"); }
		@Test public void test_11511() { testInvalid("{!int, (any | int)}","({int, any} | (any & any))"); }
		@Test public void test_11512() { testInvalid("{!int, (any | int)}","({any, int} | (any & any))"); }
		@Test public void test_11513() { testInvalid("{!int, (any | int)}","({int, int} | (any & any))"); }
		@Test public void test_11514() { testInvalid("{!int, (any | int)}","((int | any) | (any & any))"); }
		@Test public void test_11515() { testInvalid("{!int, (any | int)}","((int | int) | (any & any))"); }
		@Test public void test_11516() { testInvalid("{!int, (any | int)}","((int & any) | (any & any))"); }
		@Test public void test_11517() { testInvalid("{!int, (any | int)}","((any & int) | (any & any))"); }
		@Test public void test_11518() { testInvalid("{!int, (any | int)}","((int & int) | (any & any))"); }
		@Test public void test_11519() { testInvalid("{!int, (any | int)}","({any} | (int & any))"); }
		@Test public void test_11520() { testInvalid("{(any | any), (any | int)}","{int}"); }
		@Test public void test_11521() { testValid("{(any | any), (any | int)}","{any, any}"); }
		@Test public void test_11522() { testValid("{(any | any), (any | int)}","{int, int}"); }
		@Test public void test_11523() { testInvalid("{(any | any), (any | int)}","(any | int)"); }
		@Test public void test_11524() { testInvalid("{(any | any), (any | int)}","(int & any)"); }
		@Test public void test_11525() { testInvalid("{(any | any), (any | int)}","{{any}}"); }
		@Test public void test_11526() { testInvalid("{(any | any), (any | int)}","{{int, any}}"); }
		@Test public void test_11527() { testInvalid("{(any | any), (any | int)}","{{int, int}}"); }
		@Test public void test_11528() { testInvalid("{(any | any), (any | int)}","{(any | int)}"); }
		@Test public void test_11529() { testInvalid("{(any | any), (any | int)}","!{int, any}"); }
		@Test public void test_11530() { testInvalid("{(any | any), (any | int)}","!{int, int}"); }
		@Test public void test_11531() { testValid("{(any | any), (any | int)}","!(any | any)"); }
		@Test public void test_11532() { testValid("{(any | any), (any | int)}","!(any & any)"); }
		@Test public void test_11533() { testInvalid("{(any | any), (any | int)}","!(int & int)"); }
		@Test public void test_11534() { testValid("{(any | any), (any | int)}","{{int}, {any}}"); }
		@Test public void test_11535() { testValid("{(any | any), (any | int)}","{!int, {any}}"); }
		@Test public void test_11536() { testValid("{(any | any), (any | int)}","{{int, int}, {any}}"); }
		@Test public void test_11537() { testValid("{(any | any), (any | int)}","{(any | int), {any}}"); }
		@Test public void test_11538() { testValid("{(any | any), (any | int)}","{!int, {int}}"); }
		@Test public void test_11539() { testValid("{(any | any), (any | int)}","{{any, any}, {int}}"); }
		@Test public void test_11540() { testValid("{(any | any), (any | int)}","{(any | any), {int}}"); }
		@Test public void test_11541() { testValid("{(any | any), (any | int)}","{(any & any), {int}}"); }
		@Test public void test_11542() { testValid("{(any | any), (any | int)}","{(any & int), {int}}"); }
		@Test public void test_11543() { testValid("{(any | any), (any | int)}","{{any, any}, !int}"); }
		@Test public void test_11544() { testValid("{(any | any), (any | int)}","{{any, int}, !int}"); }
		@Test public void test_11545() { testValid("{(any | any), (any | int)}","{(any | any), !int}"); }
		@Test public void test_11546() { testValid("{(any | any), (any | int)}","{(int | any), !int}"); }
		@Test public void test_11547() { testValid("{(any | any), (any | int)}","{(any & any), !int}"); }
		@Test public void test_11548() { testValid("{(any | any), (any | int)}","{(int & any), !int}"); }
		@Test public void test_11549() { testValid("{(any | any), (any | int)}","{(int & int), !int}"); }
		@Test public void test_11550() { testValid("{(any | any), (any | int)}","{{any}, {any, any}}"); }
		@Test public void test_11551() { testValid("{(any | any), (any | int)}","{{int}, {any, any}}"); }
		@Test public void test_11552() { testValid("{(any | any), (any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_11553() { testValid("{(any | any), (any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_11554() { testValid("{(any | any), (any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_11555() { testValid("{(any | any), (any | int)}","{!int, {int, any}}"); }
		@Test public void test_11556() { testValid("{(any | any), (any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_11557() { testValid("{(any | any), (any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_11558() { testValid("{(any | any), (any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_11559() { testValid("{(any | any), (any | int)}","{{any}, {any, int}}"); }
		@Test public void test_11560() { testValid("{(any | any), (any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_11561() { testValid("{(any | any), (any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_11562() { testValid("{(any | any), (any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_11563() { testValid("{(any | any), (any | int)}","{!int, {int, int}}"); }
		@Test public void test_11564() { testValid("{(any | any), (any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_11565() { testValid("{(any | any), (any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_11566() { testValid("{(any | any), (any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_11567() { testValid("{(any | any), (any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_11568() { testValid("{(any | any), (any | int)}","{{int}, (any | any)}"); }
		@Test public void test_11569() { testValid("{(any | any), (any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_11570() { testValid("{(any | any), (any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_11571() { testValid("{(any | any), (any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_11572() { testValid("{(any | any), (any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_11573() { testValid("{(any | any), (any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_11574() { testValid("{(any | any), (any | int)}","{!int, (int | any)}"); }
		@Test public void test_11575() { testValid("{(any | any), (any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_11576() { testValid("{(any | any), (any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_11577() { testValid("{(any | any), (any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_11578() { testValid("{(any | any), (any | int)}","{{any}, (any | int)}"); }
		@Test public void test_11579() { testValid("{(any | any), (any | int)}","{!int, (any | int)}"); }
		@Test public void test_11580() { testValid("{(any | any), (any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_11581() { testValid("{(any | any), (any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_11582() { testValid("{(any | any), (any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_11583() { testValid("{(any | any), (any | int)}","{{int}, (int | int)}"); }
		@Test public void test_11584() { testValid("{(any | any), (any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_11585() { testValid("{(any | any), (any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_11586() { testValid("{(any | any), (any | int)}","{{int}, (any & any)}"); }
		@Test public void test_11587() { testValid("{(any | any), (any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_11588() { testValid("{(any | any), (any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_11589() { testValid("{(any | any), (any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_11590() { testValid("{(any | any), (any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_11591() { testValid("{(any | any), (any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_11592() { testValid("{(any | any), (any | int)}","{{any}, (int & any)}"); }
		@Test public void test_11593() { testValid("{(any | any), (any | int)}","{{int}, (int & any)}"); }
		@Test public void test_11594() { testValid("{(any | any), (any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_11595() { testValid("{(any | any), (any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_11596() { testValid("{(any | any), (any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_11597() { testValid("{(any | any), (any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_11598() { testValid("{(any | any), (any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_11599() { testValid("{(any | any), (any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_11600() { testValid("{(any | any), (any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_11601() { testValid("{(any | any), (any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_11602() { testValid("{(any | any), (any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_11603() { testValid("{(any | any), (any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_11604() { testValid("{(any | any), (any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_11605() { testValid("{(any | any), (any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_11606() { testValid("{(any | any), (any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_11607() { testInvalid("{(any | any), (any | int)}","(!int | {any})"); }
		@Test public void test_11608() { testInvalid("{(any | any), (any | int)}","({any, any} | {any})"); }
		@Test public void test_11609() { testInvalid("{(any | any), (any | int)}","((any | any) | {any})"); }
		@Test public void test_11610() { testInvalid("{(any | any), (any | int)}","((int | any) | {any})"); }
		@Test public void test_11611() { testInvalid("{(any | any), (any | int)}","((any & any) | {any})"); }
		@Test public void test_11612() { testInvalid("{(any | any), (any | int)}","((int & any) | {any})"); }
		@Test public void test_11613() { testInvalid("{(any | any), (any | int)}","((any & int) | {any})"); }
		@Test public void test_11614() { testInvalid("{(any | any), (any | int)}","({int} | {int})"); }
		@Test public void test_11615() { testInvalid("{(any | any), (any | int)}","(!any | {int})"); }
		@Test public void test_11616() { testInvalid("{(any | any), (any | int)}","(!int | {int})"); }
		@Test public void test_11617() { testInvalid("{(any | any), (any | int)}","({any, int} | {int})"); }
		@Test public void test_11618() { testInvalid("{(any | any), (any | int)}","((int & any) | {int})"); }
		@Test public void test_11619() { testInvalid("{(any | any), (any | int)}","((any & int) | {int})"); }
		@Test public void test_11620() { testInvalid("{(any | any), (any | int)}","((int & int) | {int})"); }
		@Test public void test_11621() { testInvalid("{(any | any), (any | int)}","({any} | !any)"); }
		@Test public void test_11622() { testInvalid("{(any | any), (any | int)}","({int} | !any)"); }
		@Test public void test_11623() { testValid("{(any | any), (any | int)}","({any, any} | !any)"); }
		@Test public void test_11624() { testValid("{(any | any), (any | int)}","({int, int} | !any)"); }
		@Test public void test_11625() { testInvalid("{(any | any), (any | int)}","((any | any) | !any)"); }
		@Test public void test_11626() { testInvalid("{(any | any), (any | int)}","((int | any) | !any)"); }
		@Test public void test_11627() { testInvalid("{(any | any), (any | int)}","((int | int) | !any)"); }
		@Test public void test_11628() { testInvalid("{(any | any), (any | int)}","((int & int) | !any)"); }
		@Test public void test_11629() { testInvalid("{(any | any), (any | int)}","(!int | !int)"); }
		@Test public void test_11630() { testInvalid("{(any | any), (any | int)}","({any, any} | !int)"); }
		@Test public void test_11631() { testInvalid("{(any | any), (any | int)}","({int, int} | !int)"); }
		@Test public void test_11632() { testInvalid("{(any | any), (any | int)}","((int | any) | !int)"); }
		@Test public void test_11633() { testInvalid("{(any | any), (any | int)}","((any | int) | !int)"); }
		@Test public void test_11634() { testInvalid("{(any | any), (any | int)}","((any & int) | !int)"); }
		@Test public void test_11635() { testInvalid("{(any | any), (any | int)}","((int & int) | !int)"); }
		@Test public void test_11636() { testInvalid("{(any | any), (any | int)}","({int} | {any, any})"); }
		@Test public void test_11637() { testValid("{(any | any), (any | int)}","(!any | {any, any})"); }
		@Test public void test_11638() { testInvalid("{(any | any), (any | int)}","(!int | {any, any})"); }
		@Test public void test_11639() { testValid("{(any | any), (any | int)}","({any, int} | {any, any})"); }
		@Test public void test_11640() { testInvalid("{(any | any), (any | int)}","((int | any) | {any, any})"); }
		@Test public void test_11641() { testInvalid("{(any | any), (any | int)}","((any & any) | {any, any})"); }
		@Test public void test_11642() { testInvalid("{(any | any), (any | int)}","((any & int) | {any, any})"); }
		@Test public void test_11643() { testInvalid("{(any | any), (any | int)}","(!int | {int, any})"); }
		@Test public void test_11644() { testValid("{(any | any), (any | int)}","({any, int} | {int, any})"); }
		@Test public void test_11645() { testInvalid("{(any | any), (any | int)}","((any | any) | {int, any})"); }
		@Test public void test_11646() { testInvalid("{(any | any), (any | int)}","((int | any) | {int, any})"); }
		@Test public void test_11647() { testInvalid("{(any | any), (any | int)}","((any | int) | {int, any})"); }
		@Test public void test_11648() { testInvalid("{(any | any), (any | int)}","((int & any) | {int, any})"); }
		@Test public void test_11649() { testInvalid("{(any | any), (any | int)}","({any} | {any, int})"); }
		@Test public void test_11650() { testInvalid("{(any | any), (any | int)}","(!int | {any, int})"); }
		@Test public void test_11651() { testValid("{(any | any), (any | int)}","({any, int} | {any, int})"); }
		@Test public void test_11652() { testInvalid("{(any | any), (any | int)}","((any | any) | {any, int})"); }
		@Test public void test_11653() { testInvalid("{(any | any), (any | int)}","((any | int) | {any, int})"); }
		@Test public void test_11654() { testInvalid("{(any | any), (any | int)}","((int | int) | {any, int})"); }
		@Test public void test_11655() { testInvalid("{(any | any), (any | int)}","((int & any) | {any, int})"); }
		@Test public void test_11656() { testValid("{(any | any), (any | int)}","(!any | {int, int})"); }
		@Test public void test_11657() { testInvalid("{(any | any), (any | int)}","(!int | {int, int})"); }
		@Test public void test_11658() { testValid("{(any | any), (any | int)}","({any, any} | {int, int})"); }
		@Test public void test_11659() { testValid("{(any | any), (any | int)}","({any, int} | {int, int})"); }
		@Test public void test_11660() { testInvalid("{(any | any), (any | int)}","((any | any) | {int, int})"); }
		@Test public void test_11661() { testInvalid("{(any | any), (any | int)}","((int | int) | {int, int})"); }
		@Test public void test_11662() { testInvalid("{(any | any), (any | int)}","((int & any) | {int, int})"); }
		@Test public void test_11663() { testInvalid("{(any | any), (any | int)}","((any & int) | {int, int})"); }
		@Test public void test_11664() { testInvalid("{(any | any), (any | int)}","((int & int) | {int, int})"); }
		@Test public void test_11665() { testInvalid("{(any | any), (any | int)}","({any} | (any | any))"); }
		@Test public void test_11666() { testInvalid("{(any | any), (any | int)}","(!any | (any | any))"); }
		@Test public void test_11667() { testInvalid("{(any | any), (any | int)}","({any, any} | (any | any))"); }
		@Test public void test_11668() { testInvalid("{(any | any), (any | int)}","({any, int} | (any | any))"); }
		@Test public void test_11669() { testInvalid("{(any | any), (any | int)}","({int, int} | (any | any))"); }
		@Test public void test_11670() { testInvalid("{(any | any), (any | int)}","((int | any) | (any | any))"); }
		@Test public void test_11671() { testInvalid("{(any | any), (any | int)}","((any | int) | (any | any))"); }
		@Test public void test_11672() { testInvalid("{(any | any), (any | int)}","((any & int) | (any | any))"); }
		@Test public void test_11673() { testInvalid("{(any | any), (any | int)}","((int & int) | (any | any))"); }
		@Test public void test_11674() { testInvalid("{(any | any), (any | int)}","({any} | (int | any))"); }
		@Test public void test_11675() { testInvalid("{(any | any), (any | int)}","(!int | (int | any))"); }
		@Test public void test_11676() { testInvalid("{(any | any), (any | int)}","({int, any} | (int | any))"); }
		@Test public void test_11677() { testInvalid("{(any | any), (any | int)}","({any, int} | (int | any))"); }
		@Test public void test_11678() { testInvalid("{(any | any), (any | int)}","((int & any) | (int | any))"); }
		@Test public void test_11679() { testInvalid("{(any | any), (any | int)}","((any & int) | (int | any))"); }
		@Test public void test_11680() { testInvalid("{(any | any), (any | int)}","({any} | (any | int))"); }
		@Test public void test_11681() { testInvalid("{(any | any), (any | int)}","({int} | (any | int))"); }
		@Test public void test_11682() { testInvalid("{(any | any), (any | int)}","(!any | (any | int))"); }
		@Test public void test_11683() { testInvalid("{(any | any), (any | int)}","(!int | (any | int))"); }
		@Test public void test_11684() { testInvalid("{(any | any), (any | int)}","({any, int} | (any | int))"); }
		@Test public void test_11685() { testInvalid("{(any | any), (any | int)}","({int, int} | (any | int))"); }
		@Test public void test_11686() { testInvalid("{(any | any), (any | int)}","((int | any) | (any | int))"); }
		@Test public void test_11687() { testInvalid("{(any | any), (any | int)}","((any | int) | (any | int))"); }
		@Test public void test_11688() { testInvalid("{(any | any), (any | int)}","((int | int) | (any | int))"); }
		@Test public void test_11689() { testInvalid("{(any | any), (any | int)}","((any & any) | (any | int))"); }
		@Test public void test_11690() { testInvalid("{(any | any), (any | int)}","({int} | (int | int))"); }
		@Test public void test_11691() { testInvalid("{(any | any), (any | int)}","(!any | (int | int))"); }
		@Test public void test_11692() { testInvalid("{(any | any), (any | int)}","(!int | (int | int))"); }
		@Test public void test_11693() { testInvalid("{(any | any), (any | int)}","({int, any} | (int | int))"); }
		@Test public void test_11694() { testInvalid("{(any | any), (any | int)}","({any, int} | (int | int))"); }
		@Test public void test_11695() { testInvalid("{(any | any), (any | int)}","((any | int) | (int | int))"); }
		@Test public void test_11696() { testInvalid("{(any | any), (any | int)}","((int | int) | (int | int))"); }
		@Test public void test_11697() { testInvalid("{(any | any), (any | int)}","((any & any) | (int | int))"); }
		@Test public void test_11698() { testInvalid("{(any | any), (any | int)}","((int & any) | (int | int))"); }
		@Test public void test_11699() { testInvalid("{(any | any), (any | int)}","((int & int) | (int | int))"); }
		@Test public void test_11700() { testInvalid("{(any | any), (any | int)}","(!any | (any & any))"); }
		@Test public void test_11701() { testInvalid("{(any | any), (any | int)}","(!int | (any & any))"); }
		@Test public void test_11702() { testInvalid("{(any | any), (any | int)}","({any, any} | (any & any))"); }
		@Test public void test_11703() { testInvalid("{(any | any), (any | int)}","({int, any} | (any & any))"); }
		@Test public void test_11704() { testInvalid("{(any | any), (any | int)}","({any, int} | (any & any))"); }
		@Test public void test_11705() { testInvalid("{(any | any), (any | int)}","({int, int} | (any & any))"); }
		@Test public void test_11706() { testInvalid("{(any | any), (any | int)}","((int | any) | (any & any))"); }
		@Test public void test_11707() { testInvalid("{(any | any), (any | int)}","((int | int) | (any & any))"); }
		@Test public void test_11708() { testInvalid("{(any | any), (any | int)}","((int & any) | (any & any))"); }
		@Test public void test_11709() { testInvalid("{(any | any), (any | int)}","((any & int) | (any & any))"); }
		@Test public void test_11710() { testInvalid("{(any | any), (any | int)}","((int & int) | (any & any))"); }
		@Test public void test_11711() { testInvalid("{(any | any), (any | int)}","({any} | (int & any))"); }
		@Test public void test_11712() { testInvalid("{(any | int), (any | int)}","{int}"); }
		@Test public void test_11713() { testValid("{(any | int), (any | int)}","{any, any}"); }
		@Test public void test_11714() { testValid("{(any | int), (any | int)}","{int, int}"); }
		@Test public void test_11715() { testInvalid("{(any | int), (any | int)}","(any | int)"); }
		@Test public void test_11716() { testInvalid("{(any | int), (any | int)}","(int & any)"); }
		@Test public void test_11717() { testInvalid("{(any | int), (any | int)}","{{any}}"); }
		@Test public void test_11718() { testInvalid("{(any | int), (any | int)}","{{int, any}}"); }
		@Test public void test_11719() { testInvalid("{(any | int), (any | int)}","{{int, int}}"); }
		@Test public void test_11720() { testInvalid("{(any | int), (any | int)}","{(any | int)}"); }
		@Test public void test_11721() { testInvalid("{(any | int), (any | int)}","!{int, any}"); }
		@Test public void test_11722() { testInvalid("{(any | int), (any | int)}","!{int, int}"); }
		@Test public void test_11723() { testValid("{(any | int), (any | int)}","!(any | any)"); }
		@Test public void test_11724() { testValid("{(any | int), (any | int)}","!(any & any)"); }
		@Test public void test_11725() { testInvalid("{(any | int), (any | int)}","!(int & int)"); }
		@Test public void test_11726() { testValid("{(any | int), (any | int)}","{{int}, {any}}"); }
		@Test public void test_11727() { testValid("{(any | int), (any | int)}","{!int, {any}}"); }
		@Test public void test_11728() { testValid("{(any | int), (any | int)}","{{int, int}, {any}}"); }
		@Test public void test_11729() { testValid("{(any | int), (any | int)}","{(any | int), {any}}"); }
		@Test public void test_11730() { testValid("{(any | int), (any | int)}","{!int, {int}}"); }
		@Test public void test_11731() { testValid("{(any | int), (any | int)}","{{any, any}, {int}}"); }
		@Test public void test_11732() { testValid("{(any | int), (any | int)}","{(any | any), {int}}"); }
		@Test public void test_11733() { testValid("{(any | int), (any | int)}","{(any & any), {int}}"); }
		@Test public void test_11734() { testValid("{(any | int), (any | int)}","{(any & int), {int}}"); }
		@Test public void test_11735() { testValid("{(any | int), (any | int)}","{{any, any}, !int}"); }
		@Test public void test_11736() { testValid("{(any | int), (any | int)}","{{any, int}, !int}"); }
		@Test public void test_11737() { testValid("{(any | int), (any | int)}","{(any | any), !int}"); }
		@Test public void test_11738() { testValid("{(any | int), (any | int)}","{(int | any), !int}"); }
		@Test public void test_11739() { testValid("{(any | int), (any | int)}","{(any & any), !int}"); }
		@Test public void test_11740() { testValid("{(any | int), (any | int)}","{(int & any), !int}"); }
		@Test public void test_11741() { testValid("{(any | int), (any | int)}","{(int & int), !int}"); }
		@Test public void test_11742() { testValid("{(any | int), (any | int)}","{{any}, {any, any}}"); }
		@Test public void test_11743() { testValid("{(any | int), (any | int)}","{{int}, {any, any}}"); }
		@Test public void test_11744() { testValid("{(any | int), (any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_11745() { testValid("{(any | int), (any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_11746() { testValid("{(any | int), (any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_11747() { testValid("{(any | int), (any | int)}","{!int, {int, any}}"); }
		@Test public void test_11748() { testValid("{(any | int), (any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_11749() { testValid("{(any | int), (any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_11750() { testValid("{(any | int), (any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_11751() { testValid("{(any | int), (any | int)}","{{any}, {any, int}}"); }
		@Test public void test_11752() { testValid("{(any | int), (any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_11753() { testValid("{(any | int), (any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_11754() { testValid("{(any | int), (any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_11755() { testValid("{(any | int), (any | int)}","{!int, {int, int}}"); }
		@Test public void test_11756() { testValid("{(any | int), (any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_11757() { testValid("{(any | int), (any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_11758() { testValid("{(any | int), (any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_11759() { testValid("{(any | int), (any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_11760() { testValid("{(any | int), (any | int)}","{{int}, (any | any)}"); }
		@Test public void test_11761() { testValid("{(any | int), (any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_11762() { testValid("{(any | int), (any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_11763() { testValid("{(any | int), (any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_11764() { testValid("{(any | int), (any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_11765() { testValid("{(any | int), (any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_11766() { testValid("{(any | int), (any | int)}","{!int, (int | any)}"); }
		@Test public void test_11767() { testValid("{(any | int), (any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_11768() { testValid("{(any | int), (any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_11769() { testValid("{(any | int), (any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_11770() { testValid("{(any | int), (any | int)}","{{any}, (any | int)}"); }
		@Test public void test_11771() { testValid("{(any | int), (any | int)}","{!int, (any | int)}"); }
		@Test public void test_11772() { testValid("{(any | int), (any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_11773() { testValid("{(any | int), (any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_11774() { testValid("{(any | int), (any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_11775() { testValid("{(any | int), (any | int)}","{{int}, (int | int)}"); }
		@Test public void test_11776() { testValid("{(any | int), (any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_11777() { testValid("{(any | int), (any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_11778() { testValid("{(any | int), (any | int)}","{{int}, (any & any)}"); }
		@Test public void test_11779() { testValid("{(any | int), (any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_11780() { testValid("{(any | int), (any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_11781() { testValid("{(any | int), (any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_11782() { testValid("{(any | int), (any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_11783() { testValid("{(any | int), (any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_11784() { testValid("{(any | int), (any | int)}","{{any}, (int & any)}"); }
		@Test public void test_11785() { testValid("{(any | int), (any | int)}","{{int}, (int & any)}"); }
		@Test public void test_11786() { testValid("{(any | int), (any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_11787() { testValid("{(any | int), (any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_11788() { testValid("{(any | int), (any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_11789() { testValid("{(any | int), (any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_11790() { testValid("{(any | int), (any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_11791() { testValid("{(any | int), (any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_11792() { testValid("{(any | int), (any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_11793() { testValid("{(any | int), (any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_11794() { testValid("{(any | int), (any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_11795() { testValid("{(any | int), (any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_11796() { testValid("{(any | int), (any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_11797() { testValid("{(any | int), (any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_11798() { testValid("{(any | int), (any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_11799() { testInvalid("{(any | int), (any | int)}","(!int | {any})"); }
		@Test public void test_11800() { testInvalid("{(any | int), (any | int)}","({any, any} | {any})"); }
		@Test public void test_11801() { testInvalid("{(any | int), (any | int)}","((any | any) | {any})"); }
		@Test public void test_11802() { testInvalid("{(any | int), (any | int)}","((int | any) | {any})"); }
		@Test public void test_11803() { testInvalid("{(any | int), (any | int)}","((any & any) | {any})"); }
		@Test public void test_11804() { testInvalid("{(any | int), (any | int)}","((int & any) | {any})"); }
		@Test public void test_11805() { testInvalid("{(any | int), (any | int)}","((any & int) | {any})"); }
		@Test public void test_11806() { testInvalid("{(any | int), (any | int)}","({int} | {int})"); }
		@Test public void test_11807() { testInvalid("{(any | int), (any | int)}","(!any | {int})"); }
		@Test public void test_11808() { testInvalid("{(any | int), (any | int)}","(!int | {int})"); }
		@Test public void test_11809() { testInvalid("{(any | int), (any | int)}","({any, int} | {int})"); }
		@Test public void test_11810() { testInvalid("{(any | int), (any | int)}","((int & any) | {int})"); }
		@Test public void test_11811() { testInvalid("{(any | int), (any | int)}","((any & int) | {int})"); }
		@Test public void test_11812() { testInvalid("{(any | int), (any | int)}","((int & int) | {int})"); }
		@Test public void test_11813() { testInvalid("{(any | int), (any | int)}","({any} | !any)"); }
		@Test public void test_11814() { testInvalid("{(any | int), (any | int)}","({int} | !any)"); }
		@Test public void test_11815() { testValid("{(any | int), (any | int)}","({any, any} | !any)"); }
		@Test public void test_11816() { testValid("{(any | int), (any | int)}","({int, int} | !any)"); }
		@Test public void test_11817() { testInvalid("{(any | int), (any | int)}","((any | any) | !any)"); }
		@Test public void test_11818() { testInvalid("{(any | int), (any | int)}","((int | any) | !any)"); }
		@Test public void test_11819() { testInvalid("{(any | int), (any | int)}","((int | int) | !any)"); }
		@Test public void test_11820() { testInvalid("{(any | int), (any | int)}","((int & int) | !any)"); }
		@Test public void test_11821() { testInvalid("{(any | int), (any | int)}","(!int | !int)"); }
		@Test public void test_11822() { testInvalid("{(any | int), (any | int)}","({any, any} | !int)"); }
		@Test public void test_11823() { testInvalid("{(any | int), (any | int)}","({int, int} | !int)"); }
		@Test public void test_11824() { testInvalid("{(any | int), (any | int)}","((int | any) | !int)"); }
		@Test public void test_11825() { testInvalid("{(any | int), (any | int)}","((any | int) | !int)"); }
		@Test public void test_11826() { testInvalid("{(any | int), (any | int)}","((any & int) | !int)"); }
		@Test public void test_11827() { testInvalid("{(any | int), (any | int)}","((int & int) | !int)"); }
		@Test public void test_11828() { testInvalid("{(any | int), (any | int)}","({int} | {any, any})"); }
		@Test public void test_11829() { testValid("{(any | int), (any | int)}","(!any | {any, any})"); }
		@Test public void test_11830() { testInvalid("{(any | int), (any | int)}","(!int | {any, any})"); }
		@Test public void test_11831() { testValid("{(any | int), (any | int)}","({any, int} | {any, any})"); }
		@Test public void test_11832() { testInvalid("{(any | int), (any | int)}","((int | any) | {any, any})"); }
		@Test public void test_11833() { testInvalid("{(any | int), (any | int)}","((any & any) | {any, any})"); }
		@Test public void test_11834() { testInvalid("{(any | int), (any | int)}","((any & int) | {any, any})"); }
		@Test public void test_11835() { testInvalid("{(any | int), (any | int)}","(!int | {int, any})"); }
		@Test public void test_11836() { testValid("{(any | int), (any | int)}","({any, int} | {int, any})"); }
		@Test public void test_11837() { testInvalid("{(any | int), (any | int)}","((any | any) | {int, any})"); }
		@Test public void test_11838() { testInvalid("{(any | int), (any | int)}","((int | any) | {int, any})"); }
		@Test public void test_11839() { testInvalid("{(any | int), (any | int)}","((any | int) | {int, any})"); }
		@Test public void test_11840() { testInvalid("{(any | int), (any | int)}","((int & any) | {int, any})"); }
		@Test public void test_11841() { testInvalid("{(any | int), (any | int)}","({any} | {any, int})"); }
		@Test public void test_11842() { testInvalid("{(any | int), (any | int)}","(!int | {any, int})"); }
		@Test public void test_11843() { testValid("{(any | int), (any | int)}","({any, int} | {any, int})"); }
		@Test public void test_11844() { testInvalid("{(any | int), (any | int)}","((any | any) | {any, int})"); }
		@Test public void test_11845() { testInvalid("{(any | int), (any | int)}","((any | int) | {any, int})"); }
		@Test public void test_11846() { testInvalid("{(any | int), (any | int)}","((int | int) | {any, int})"); }
		@Test public void test_11847() { testInvalid("{(any | int), (any | int)}","((int & any) | {any, int})"); }
		@Test public void test_11848() { testValid("{(any | int), (any | int)}","(!any | {int, int})"); }
		@Test public void test_11849() { testInvalid("{(any | int), (any | int)}","(!int | {int, int})"); }
		@Test public void test_11850() { testValid("{(any | int), (any | int)}","({any, any} | {int, int})"); }
		@Test public void test_11851() { testValid("{(any | int), (any | int)}","({any, int} | {int, int})"); }
		@Test public void test_11852() { testInvalid("{(any | int), (any | int)}","((any | any) | {int, int})"); }
		@Test public void test_11853() { testInvalid("{(any | int), (any | int)}","((int | int) | {int, int})"); }
		@Test public void test_11854() { testInvalid("{(any | int), (any | int)}","((int & any) | {int, int})"); }
		@Test public void test_11855() { testInvalid("{(any | int), (any | int)}","((any & int) | {int, int})"); }
		@Test public void test_11856() { testInvalid("{(any | int), (any | int)}","((int & int) | {int, int})"); }
		@Test public void test_11857() { testInvalid("{(any | int), (any | int)}","({any} | (any | any))"); }
		@Test public void test_11858() { testInvalid("{(any | int), (any | int)}","(!any | (any | any))"); }
		@Test public void test_11859() { testInvalid("{(any | int), (any | int)}","({any, any} | (any | any))"); }
		@Test public void test_11860() { testInvalid("{(any | int), (any | int)}","({any, int} | (any | any))"); }
		@Test public void test_11861() { testInvalid("{(any | int), (any | int)}","({int, int} | (any | any))"); }
		@Test public void test_11862() { testInvalid("{(any | int), (any | int)}","((int | any) | (any | any))"); }
		@Test public void test_11863() { testInvalid("{(any | int), (any | int)}","((any | int) | (any | any))"); }
		@Test public void test_11864() { testInvalid("{(any | int), (any | int)}","((any & int) | (any | any))"); }
		@Test public void test_11865() { testInvalid("{(any | int), (any | int)}","((int & int) | (any | any))"); }
		@Test public void test_11866() { testInvalid("{(any | int), (any | int)}","({any} | (int | any))"); }
		@Test public void test_11867() { testInvalid("{(any | int), (any | int)}","(!int | (int | any))"); }
		@Test public void test_11868() { testInvalid("{(any | int), (any | int)}","({int, any} | (int | any))"); }
		@Test public void test_11869() { testInvalid("{(any | int), (any | int)}","({any, int} | (int | any))"); }
		@Test public void test_11870() { testInvalid("{(any | int), (any | int)}","((int & any) | (int | any))"); }
		@Test public void test_11871() { testInvalid("{(any | int), (any | int)}","((any & int) | (int | any))"); }
		@Test public void test_11872() { testInvalid("{(any | int), (any | int)}","({any} | (any | int))"); }
		@Test public void test_11873() { testInvalid("{(any | int), (any | int)}","({int} | (any | int))"); }
		@Test public void test_11874() { testInvalid("{(any | int), (any | int)}","(!any | (any | int))"); }
		@Test public void test_11875() { testInvalid("{(any | int), (any | int)}","(!int | (any | int))"); }
		@Test public void test_11876() { testInvalid("{(any | int), (any | int)}","({any, int} | (any | int))"); }
		@Test public void test_11877() { testInvalid("{(any | int), (any | int)}","({int, int} | (any | int))"); }
		@Test public void test_11878() { testInvalid("{(any | int), (any | int)}","((int | any) | (any | int))"); }
		@Test public void test_11879() { testInvalid("{(any | int), (any | int)}","((any | int) | (any | int))"); }
		@Test public void test_11880() { testInvalid("{(any | int), (any | int)}","((int | int) | (any | int))"); }
		@Test public void test_11881() { testInvalid("{(any | int), (any | int)}","((any & any) | (any | int))"); }
		@Test public void test_11882() { testInvalid("{(any | int), (any | int)}","({int} | (int | int))"); }
		@Test public void test_11883() { testInvalid("{(any | int), (any | int)}","(!any | (int | int))"); }
		@Test public void test_11884() { testInvalid("{(any | int), (any | int)}","(!int | (int | int))"); }
		@Test public void test_11885() { testInvalid("{(any | int), (any | int)}","({int, any} | (int | int))"); }
		@Test public void test_11886() { testInvalid("{(any | int), (any | int)}","({any, int} | (int | int))"); }
		@Test public void test_11887() { testInvalid("{(any | int), (any | int)}","((any | int) | (int | int))"); }
		@Test public void test_11888() { testInvalid("{(any | int), (any | int)}","((int | int) | (int | int))"); }
		@Test public void test_11889() { testInvalid("{(any | int), (any | int)}","((any & any) | (int | int))"); }
		@Test public void test_11890() { testInvalid("{(any | int), (any | int)}","((int & any) | (int | int))"); }
		@Test public void test_11891() { testInvalid("{(any | int), (any | int)}","((int & int) | (int | int))"); }
		@Test public void test_11892() { testInvalid("{(any | int), (any | int)}","(!any | (any & any))"); }
		@Test public void test_11893() { testInvalid("{(any | int), (any | int)}","(!int | (any & any))"); }
		@Test public void test_11894() { testInvalid("{(any | int), (any | int)}","({any, any} | (any & any))"); }
		@Test public void test_11895() { testInvalid("{(any | int), (any | int)}","({int, any} | (any & any))"); }
		@Test public void test_11896() { testInvalid("{(any | int), (any | int)}","({any, int} | (any & any))"); }
		@Test public void test_11897() { testInvalid("{(any | int), (any | int)}","({int, int} | (any & any))"); }
		@Test public void test_11898() { testInvalid("{(any | int), (any | int)}","((int | any) | (any & any))"); }
		@Test public void test_11899() { testInvalid("{(any | int), (any | int)}","((int | int) | (any & any))"); }
		@Test public void test_11900() { testInvalid("{(any | int), (any | int)}","((int & any) | (any & any))"); }
		@Test public void test_11901() { testInvalid("{(any | int), (any | int)}","((any & int) | (any & any))"); }
		@Test public void test_11902() { testInvalid("{(any | int), (any | int)}","((int & int) | (any & any))"); }
		@Test public void test_11903() { testInvalid("{(any | int), (any | int)}","({any} | (int & any))"); }
		@Test public void test_11904() { testInvalid("{(any & int), (any | int)}","{int}"); }
		@Test public void test_11905() { testInvalid("{(any & int), (any | int)}","{any, any}"); }
		@Test public void test_11906() { testValid("{(any & int), (any | int)}","{int, int}"); }
		@Test public void test_11907() { testInvalid("{(any & int), (any | int)}","(any | int)"); }
		@Test public void test_11908() { testInvalid("{(any & int), (any | int)}","(int & any)"); }
		@Test public void test_11909() { testInvalid("{(any & int), (any | int)}","{{any}}"); }
		@Test public void test_11910() { testInvalid("{(any & int), (any | int)}","{{int, any}}"); }
		@Test public void test_11911() { testInvalid("{(any & int), (any | int)}","{{int, int}}"); }
		@Test public void test_11912() { testInvalid("{(any & int), (any | int)}","{(any | int)}"); }
		@Test public void test_11913() { testInvalid("{(any & int), (any | int)}","!{int, any}"); }
		@Test public void test_11914() { testInvalid("{(any & int), (any | int)}","!{int, int}"); }
		@Test public void test_11915() { testValid("{(any & int), (any | int)}","!(any | any)"); }
		@Test public void test_11916() { testValid("{(any & int), (any | int)}","!(any & any)"); }
		@Test public void test_11917() { testInvalid("{(any & int), (any | int)}","!(int & int)"); }
		@Test public void test_11918() { testInvalid("{(any & int), (any | int)}","{{int}, {any}}"); }
		@Test public void test_11919() { testInvalid("{(any & int), (any | int)}","{!int, {any}}"); }
		@Test public void test_11920() { testInvalid("{(any & int), (any | int)}","{{int, int}, {any}}"); }
		@Test public void test_11921() { testInvalid("{(any & int), (any | int)}","{(any | int), {any}}"); }
		@Test public void test_11922() { testInvalid("{(any & int), (any | int)}","{!int, {int}}"); }
		@Test public void test_11923() { testInvalid("{(any & int), (any | int)}","{{any, any}, {int}}"); }
		@Test public void test_11924() { testInvalid("{(any & int), (any | int)}","{(any | any), {int}}"); }
		@Test public void test_11925() { testInvalid("{(any & int), (any | int)}","{(any & any), {int}}"); }
		@Test public void test_11926() { testValid("{(any & int), (any | int)}","{(any & int), {int}}"); }
		@Test public void test_11927() { testInvalid("{(any & int), (any | int)}","{{any, any}, !int}"); }
		@Test public void test_11928() { testInvalid("{(any & int), (any | int)}","{{any, int}, !int}"); }
		@Test public void test_11929() { testInvalid("{(any & int), (any | int)}","{(any | any), !int}"); }
		@Test public void test_11930() { testInvalid("{(any & int), (any | int)}","{(int | any), !int}"); }
		@Test public void test_11931() { testInvalid("{(any & int), (any | int)}","{(any & any), !int}"); }
		@Test public void test_11932() { testValid("{(any & int), (any | int)}","{(int & any), !int}"); }
		@Test public void test_11933() { testValid("{(any & int), (any | int)}","{(int & int), !int}"); }
		@Test public void test_11934() { testInvalid("{(any & int), (any | int)}","{{any}, {any, any}}"); }
		@Test public void test_11935() { testInvalid("{(any & int), (any | int)}","{{int}, {any, any}}"); }
		@Test public void test_11936() { testInvalid("{(any & int), (any | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_11937() { testInvalid("{(any & int), (any | int)}","{(any | any), {any, any}}"); }
		@Test public void test_11938() { testInvalid("{(any & int), (any | int)}","{(any | int), {any, any}}"); }
		@Test public void test_11939() { testInvalid("{(any & int), (any | int)}","{!int, {int, any}}"); }
		@Test public void test_11940() { testInvalid("{(any & int), (any | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_11941() { testInvalid("{(any & int), (any | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_11942() { testValid("{(any & int), (any | int)}","{(any & int), {int, any}}"); }
		@Test public void test_11943() { testInvalid("{(any & int), (any | int)}","{{any}, {any, int}}"); }
		@Test public void test_11944() { testInvalid("{(any & int), (any | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_11945() { testValid("{(any & int), (any | int)}","{(int | int), {any, int}}"); }
		@Test public void test_11946() { testValid("{(any & int), (any | int)}","{(any & int), {any, int}}"); }
		@Test public void test_11947() { testInvalid("{(any & int), (any | int)}","{!int, {int, int}}"); }
		@Test public void test_11948() { testInvalid("{(any & int), (any | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_11949() { testInvalid("{(any & int), (any | int)}","{(any | any), {int, int}}"); }
		@Test public void test_11950() { testInvalid("{(any & int), (any | int)}","{(int | any), {int, int}}"); }
		@Test public void test_11951() { testValid("{(any & int), (any | int)}","{(int & any), {int, int}}"); }
		@Test public void test_11952() { testInvalid("{(any & int), (any | int)}","{{int}, (any | any)}"); }
		@Test public void test_11953() { testInvalid("{(any & int), (any | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_11954() { testInvalid("{(any & int), (any | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_11955() { testInvalid("{(any & int), (any | int)}","{(any | any), (any | any)}"); }
		@Test public void test_11956() { testInvalid("{(any & int), (any | int)}","{(int | any), (any | any)}"); }
		@Test public void test_11957() { testValid("{(any & int), (any | int)}","{(int & int), (any | any)}"); }
		@Test public void test_11958() { testInvalid("{(any & int), (any | int)}","{!int, (int | any)}"); }
		@Test public void test_11959() { testInvalid("{(any & int), (any | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_11960() { testInvalid("{(any & int), (any | int)}","{(any | any), (int | any)}"); }
		@Test public void test_11961() { testValid("{(any & int), (any | int)}","{(int | int), (int | any)}"); }
		@Test public void test_11962() { testInvalid("{(any & int), (any | int)}","{{any}, (any | int)}"); }
		@Test public void test_11963() { testInvalid("{(any & int), (any | int)}","{!int, (any | int)}"); }
		@Test public void test_11964() { testInvalid("{(any & int), (any | int)}","{(any | any), (any | int)}"); }
		@Test public void test_11965() { testInvalid("{(any & int), (any | int)}","{(any | int), (any | int)}"); }
		@Test public void test_11966() { testValid("{(any & int), (any | int)}","{(any & int), (any | int)}"); }
		@Test public void test_11967() { testInvalid("{(any & int), (any | int)}","{{int}, (int | int)}"); }
		@Test public void test_11968() { testInvalid("{(any & int), (any | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_11969() { testInvalid("{(any & int), (any | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_11970() { testInvalid("{(any & int), (any | int)}","{{int}, (any & any)}"); }
		@Test public void test_11971() { testInvalid("{(any & int), (any | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_11972() { testInvalid("{(any & int), (any | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_11973() { testInvalid("{(any & int), (any | int)}","{(int | any), (any & any)}"); }
		@Test public void test_11974() { testInvalid("{(any & int), (any | int)}","{(any & any), (any & any)}"); }
		@Test public void test_11975() { testValid("{(any & int), (any | int)}","{(int & any), (any & any)}"); }
		@Test public void test_11976() { testInvalid("{(any & int), (any | int)}","{{any}, (int & any)}"); }
		@Test public void test_11977() { testInvalid("{(any & int), (any | int)}","{{int}, (int & any)}"); }
		@Test public void test_11978() { testInvalid("{(any & int), (any | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_11979() { testInvalid("{(any & int), (any | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_11980() { testInvalid("{(any & int), (any | int)}","{(any | int), (int & any)}"); }
		@Test public void test_11981() { testInvalid("{(any & int), (any | int)}","{(any & any), (int & any)}"); }
		@Test public void test_11982() { testValid("{(any & int), (any | int)}","{(int & any), (int & any)}"); }
		@Test public void test_11983() { testValid("{(any & int), (any | int)}","{(int & int), (int & any)}"); }
		@Test public void test_11984() { testInvalid("{(any & int), (any | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_11985() { testInvalid("{(any & int), (any | int)}","{(any & any), (any & int)}"); }
		@Test public void test_11986() { testInvalid("{(any & int), (any | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_11987() { testValid("{(any & int), (any | int)}","{(int | int), (int & int)}"); }
		@Test public void test_11988() { testInvalid("{(any & int), (any | int)}","{(any & any), (int & int)}"); }
		@Test public void test_11989() { testValid("{(any & int), (any | int)}","{(any & int), (int & int)}"); }
		@Test public void test_11990() { testValid("{(any & int), (any | int)}","{(int & int), (int & int)}"); }
		@Test public void test_11991() { testInvalid("{(any & int), (any | int)}","(!int | {any})"); }
		@Test public void test_11992() { testInvalid("{(any & int), (any | int)}","({any, any} | {any})"); }
		@Test public void test_11993() { testInvalid("{(any & int), (any | int)}","((any | any) | {any})"); }
		@Test public void test_11994() { testInvalid("{(any & int), (any | int)}","((int | any) | {any})"); }
		@Test public void test_11995() { testInvalid("{(any & int), (any | int)}","((any & any) | {any})"); }
		@Test public void test_11996() { testInvalid("{(any & int), (any | int)}","((int & any) | {any})"); }
		@Test public void test_11997() { testInvalid("{(any & int), (any | int)}","((any & int) | {any})"); }
		@Test public void test_11998() { testInvalid("{(any & int), (any | int)}","({int} | {int})"); }
		@Test public void test_11999() { testInvalid("{(any & int), (any | int)}","(!any | {int})"); }
		@Test public void test_12000() { testInvalid("{(any & int), (any | int)}","(!int | {int})"); }
		@Test public void test_12001() { testInvalid("{(any & int), (any | int)}","({any, int} | {int})"); }
		@Test public void test_12002() { testInvalid("{(any & int), (any | int)}","((int & any) | {int})"); }
		@Test public void test_12003() { testInvalid("{(any & int), (any | int)}","((any & int) | {int})"); }
		@Test public void test_12004() { testInvalid("{(any & int), (any | int)}","((int & int) | {int})"); }
		@Test public void test_12005() { testInvalid("{(any & int), (any | int)}","({any} | !any)"); }
		@Test public void test_12006() { testInvalid("{(any & int), (any | int)}","({int} | !any)"); }
		@Test public void test_12007() { testInvalid("{(any & int), (any | int)}","({any, any} | !any)"); }
		@Test public void test_12008() { testValid("{(any & int), (any | int)}","({int, int} | !any)"); }
		@Test public void test_12009() { testInvalid("{(any & int), (any | int)}","((any | any) | !any)"); }
		@Test public void test_12010() { testInvalid("{(any & int), (any | int)}","((int | any) | !any)"); }
		@Test public void test_12011() { testInvalid("{(any & int), (any | int)}","((int | int) | !any)"); }
		@Test public void test_12012() { testInvalid("{(any & int), (any | int)}","((int & int) | !any)"); }
		@Test public void test_12013() { testInvalid("{(any & int), (any | int)}","(!int | !int)"); }
		@Test public void test_12014() { testInvalid("{(any & int), (any | int)}","({any, any} | !int)"); }
		@Test public void test_12015() { testInvalid("{(any & int), (any | int)}","({int, int} | !int)"); }
		@Test public void test_12016() { testInvalid("{(any & int), (any | int)}","((int | any) | !int)"); }
		@Test public void test_12017() { testInvalid("{(any & int), (any | int)}","((any | int) | !int)"); }
		@Test public void test_12018() { testInvalid("{(any & int), (any | int)}","((any & int) | !int)"); }
		@Test public void test_12019() { testInvalid("{(any & int), (any | int)}","((int & int) | !int)"); }
		@Test public void test_12020() { testInvalid("{(any & int), (any | int)}","({int} | {any, any})"); }
		@Test public void test_12021() { testInvalid("{(any & int), (any | int)}","(!any | {any, any})"); }
		@Test public void test_12022() { testInvalid("{(any & int), (any | int)}","(!int | {any, any})"); }
		@Test public void test_12023() { testInvalid("{(any & int), (any | int)}","({any, int} | {any, any})"); }
		@Test public void test_12024() { testInvalid("{(any & int), (any | int)}","((int | any) | {any, any})"); }
		@Test public void test_12025() { testInvalid("{(any & int), (any | int)}","((any & any) | {any, any})"); }
		@Test public void test_12026() { testInvalid("{(any & int), (any | int)}","((any & int) | {any, any})"); }
		@Test public void test_12027() { testInvalid("{(any & int), (any | int)}","(!int | {int, any})"); }
		@Test public void test_12028() { testInvalid("{(any & int), (any | int)}","({any, int} | {int, any})"); }
		@Test public void test_12029() { testInvalid("{(any & int), (any | int)}","((any | any) | {int, any})"); }
		@Test public void test_12030() { testInvalid("{(any & int), (any | int)}","((int | any) | {int, any})"); }
		@Test public void test_12031() { testInvalid("{(any & int), (any | int)}","((any | int) | {int, any})"); }
		@Test public void test_12032() { testInvalid("{(any & int), (any | int)}","((int & any) | {int, any})"); }
		@Test public void test_12033() { testInvalid("{(any & int), (any | int)}","({any} | {any, int})"); }
		@Test public void test_12034() { testInvalid("{(any & int), (any | int)}","(!int | {any, int})"); }
		@Test public void test_12035() { testInvalid("{(any & int), (any | int)}","({any, int} | {any, int})"); }
		@Test public void test_12036() { testInvalid("{(any & int), (any | int)}","((any | any) | {any, int})"); }
		@Test public void test_12037() { testInvalid("{(any & int), (any | int)}","((any | int) | {any, int})"); }
		@Test public void test_12038() { testInvalid("{(any & int), (any | int)}","((int | int) | {any, int})"); }
		@Test public void test_12039() { testInvalid("{(any & int), (any | int)}","((int & any) | {any, int})"); }
		@Test public void test_12040() { testValid("{(any & int), (any | int)}","(!any | {int, int})"); }
		@Test public void test_12041() { testInvalid("{(any & int), (any | int)}","(!int | {int, int})"); }
		@Test public void test_12042() { testInvalid("{(any & int), (any | int)}","({any, any} | {int, int})"); }
		@Test public void test_12043() { testInvalid("{(any & int), (any | int)}","({any, int} | {int, int})"); }
		@Test public void test_12044() { testInvalid("{(any & int), (any | int)}","((any | any) | {int, int})"); }
		@Test public void test_12045() { testInvalid("{(any & int), (any | int)}","((int | int) | {int, int})"); }
		@Test public void test_12046() { testInvalid("{(any & int), (any | int)}","((int & any) | {int, int})"); }
		@Test public void test_12047() { testInvalid("{(any & int), (any | int)}","((any & int) | {int, int})"); }
		@Test public void test_12048() { testInvalid("{(any & int), (any | int)}","((int & int) | {int, int})"); }
		@Test public void test_12049() { testInvalid("{(any & int), (any | int)}","({any} | (any | any))"); }
		@Test public void test_12050() { testInvalid("{(any & int), (any | int)}","(!any | (any | any))"); }
		@Test public void test_12051() { testInvalid("{(any & int), (any | int)}","({any, any} | (any | any))"); }
		@Test public void test_12052() { testInvalid("{(any & int), (any | int)}","({any, int} | (any | any))"); }
		@Test public void test_12053() { testInvalid("{(any & int), (any | int)}","({int, int} | (any | any))"); }
		@Test public void test_12054() { testInvalid("{(any & int), (any | int)}","((int | any) | (any | any))"); }
		@Test public void test_12055() { testInvalid("{(any & int), (any | int)}","((any | int) | (any | any))"); }
		@Test public void test_12056() { testInvalid("{(any & int), (any | int)}","((any & int) | (any | any))"); }
		@Test public void test_12057() { testInvalid("{(any & int), (any | int)}","((int & int) | (any | any))"); }
		@Test public void test_12058() { testInvalid("{(any & int), (any | int)}","({any} | (int | any))"); }
		@Test public void test_12059() { testInvalid("{(any & int), (any | int)}","(!int | (int | any))"); }
		@Test public void test_12060() { testInvalid("{(any & int), (any | int)}","({int, any} | (int | any))"); }
		@Test public void test_12061() { testInvalid("{(any & int), (any | int)}","({any, int} | (int | any))"); }
		@Test public void test_12062() { testInvalid("{(any & int), (any | int)}","((int & any) | (int | any))"); }
		@Test public void test_12063() { testInvalid("{(any & int), (any | int)}","((any & int) | (int | any))"); }
		@Test public void test_12064() { testInvalid("{(any & int), (any | int)}","({any} | (any | int))"); }
		@Test public void test_12065() { testInvalid("{(any & int), (any | int)}","({int} | (any | int))"); }
		@Test public void test_12066() { testInvalid("{(any & int), (any | int)}","(!any | (any | int))"); }
		@Test public void test_12067() { testInvalid("{(any & int), (any | int)}","(!int | (any | int))"); }
		@Test public void test_12068() { testInvalid("{(any & int), (any | int)}","({any, int} | (any | int))"); }
		@Test public void test_12069() { testInvalid("{(any & int), (any | int)}","({int, int} | (any | int))"); }
		@Test public void test_12070() { testInvalid("{(any & int), (any | int)}","((int | any) | (any | int))"); }
		@Test public void test_12071() { testInvalid("{(any & int), (any | int)}","((any | int) | (any | int))"); }
		@Test public void test_12072() { testInvalid("{(any & int), (any | int)}","((int | int) | (any | int))"); }
		@Test public void test_12073() { testInvalid("{(any & int), (any | int)}","((any & any) | (any | int))"); }
		@Test public void test_12074() { testInvalid("{(any & int), (any | int)}","({int} | (int | int))"); }
		@Test public void test_12075() { testInvalid("{(any & int), (any | int)}","(!any | (int | int))"); }
		@Test public void test_12076() { testInvalid("{(any & int), (any | int)}","(!int | (int | int))"); }
		@Test public void test_12077() { testInvalid("{(any & int), (any | int)}","({int, any} | (int | int))"); }
		@Test public void test_12078() { testInvalid("{(any & int), (any | int)}","({any, int} | (int | int))"); }
		@Test public void test_12079() { testInvalid("{(any & int), (any | int)}","((any | int) | (int | int))"); }
		@Test public void test_12080() { testInvalid("{(any & int), (any | int)}","((int | int) | (int | int))"); }
		@Test public void test_12081() { testInvalid("{(any & int), (any | int)}","((any & any) | (int | int))"); }
		@Test public void test_12082() { testInvalid("{(any & int), (any | int)}","((int & any) | (int | int))"); }
		@Test public void test_12083() { testInvalid("{(any & int), (any | int)}","((int & int) | (int | int))"); }
		@Test public void test_12084() { testInvalid("{(any & int), (any | int)}","(!any | (any & any))"); }
		@Test public void test_12085() { testInvalid("{(any & int), (any | int)}","(!int | (any & any))"); }
		@Test public void test_12086() { testInvalid("{(any & int), (any | int)}","({any, any} | (any & any))"); }
		@Test public void test_12087() { testInvalid("{(any & int), (any | int)}","({int, any} | (any & any))"); }
		@Test public void test_12088() { testInvalid("{(any & int), (any | int)}","({any, int} | (any & any))"); }
		@Test public void test_12089() { testInvalid("{(any & int), (any | int)}","({int, int} | (any & any))"); }
		@Test public void test_12090() { testInvalid("{(any & int), (any | int)}","((int | any) | (any & any))"); }
		@Test public void test_12091() { testInvalid("{(any & int), (any | int)}","((int | int) | (any & any))"); }
		@Test public void test_12092() { testInvalid("{(any & int), (any | int)}","((int & any) | (any & any))"); }
		@Test public void test_12093() { testInvalid("{(any & int), (any | int)}","((any & int) | (any & any))"); }
		@Test public void test_12094() { testInvalid("{(any & int), (any | int)}","((int & int) | (any & any))"); }
		@Test public void test_12095() { testInvalid("{(any & int), (any | int)}","({any} | (int & any))"); }
		@Test public void test_12096() { testInvalid("{{int}, (int | int)}","{int}"); }
		@Test public void test_12097() { testInvalid("{{int}, (int | int)}","{any, any}"); }
		@Test public void test_12098() { testInvalid("{{int}, (int | int)}","{int, int}"); }
		@Test public void test_12099() { testInvalid("{{int}, (int | int)}","(any | int)"); }
		@Test public void test_12100() { testInvalid("{{int}, (int | int)}","(int & any)"); }
		@Test public void test_12101() { testInvalid("{{int}, (int | int)}","{{any}}"); }
		@Test public void test_12102() { testInvalid("{{int}, (int | int)}","{{int, any}}"); }
		@Test public void test_12103() { testInvalid("{{int}, (int | int)}","{{int, int}}"); }
		@Test public void test_12104() { testInvalid("{{int}, (int | int)}","{(any | int)}"); }
		@Test public void test_12105() { testInvalid("{{int}, (int | int)}","!{int, any}"); }
		@Test public void test_12106() { testInvalid("{{int}, (int | int)}","!{int, int}"); }
		@Test public void test_12107() { testValid("{{int}, (int | int)}","!(any | any)"); }
		@Test public void test_12108() { testValid("{{int}, (int | int)}","!(any & any)"); }
		@Test public void test_12109() { testInvalid("{{int}, (int | int)}","!(int & int)"); }
		@Test public void test_12110() { testInvalid("{{int}, (int | int)}","{{int}, {any}}"); }
		@Test public void test_12111() { testInvalid("{{int}, (int | int)}","{!int, {any}}"); }
		@Test public void test_12112() { testInvalid("{{int}, (int | int)}","{{int, int}, {any}}"); }
		@Test public void test_12113() { testInvalid("{{int}, (int | int)}","{(any | int), {any}}"); }
		@Test public void test_12114() { testInvalid("{{int}, (int | int)}","{!int, {int}}"); }
		@Test public void test_12115() { testInvalid("{{int}, (int | int)}","{{any, any}, {int}}"); }
		@Test public void test_12116() { testInvalid("{{int}, (int | int)}","{(any | any), {int}}"); }
		@Test public void test_12117() { testInvalid("{{int}, (int | int)}","{(any & any), {int}}"); }
		@Test public void test_12118() { testInvalid("{{int}, (int | int)}","{(any & int), {int}}"); }
		@Test public void test_12119() { testInvalid("{{int}, (int | int)}","{{any, any}, !int}"); }
		@Test public void test_12120() { testInvalid("{{int}, (int | int)}","{{any, int}, !int}"); }
		@Test public void test_12121() { testInvalid("{{int}, (int | int)}","{(any | any), !int}"); }
		@Test public void test_12122() { testInvalid("{{int}, (int | int)}","{(int | any), !int}"); }
		@Test public void test_12123() { testInvalid("{{int}, (int | int)}","{(any & any), !int}"); }
		@Test public void test_12124() { testInvalid("{{int}, (int | int)}","{(int & any), !int}"); }
		@Test public void test_12125() { testInvalid("{{int}, (int | int)}","{(int & int), !int}"); }
		@Test public void test_12126() { testInvalid("{{int}, (int | int)}","{{any}, {any, any}}"); }
		@Test public void test_12127() { testInvalid("{{int}, (int | int)}","{{int}, {any, any}}"); }
		@Test public void test_12128() { testInvalid("{{int}, (int | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_12129() { testInvalid("{{int}, (int | int)}","{(any | any), {any, any}}"); }
		@Test public void test_12130() { testInvalid("{{int}, (int | int)}","{(any | int), {any, any}}"); }
		@Test public void test_12131() { testInvalid("{{int}, (int | int)}","{!int, {int, any}}"); }
		@Test public void test_12132() { testInvalid("{{int}, (int | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_12133() { testInvalid("{{int}, (int | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_12134() { testInvalid("{{int}, (int | int)}","{(any & int), {int, any}}"); }
		@Test public void test_12135() { testInvalid("{{int}, (int | int)}","{{any}, {any, int}}"); }
		@Test public void test_12136() { testInvalid("{{int}, (int | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_12137() { testInvalid("{{int}, (int | int)}","{(int | int), {any, int}}"); }
		@Test public void test_12138() { testInvalid("{{int}, (int | int)}","{(any & int), {any, int}}"); }
		@Test public void test_12139() { testInvalid("{{int}, (int | int)}","{!int, {int, int}}"); }
		@Test public void test_12140() { testInvalid("{{int}, (int | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_12141() { testInvalid("{{int}, (int | int)}","{(any | any), {int, int}}"); }
		@Test public void test_12142() { testInvalid("{{int}, (int | int)}","{(int | any), {int, int}}"); }
		@Test public void test_12143() { testInvalid("{{int}, (int | int)}","{(int & any), {int, int}}"); }
		@Test public void test_12144() { testInvalid("{{int}, (int | int)}","{{int}, (any | any)}"); }
		@Test public void test_12145() { testInvalid("{{int}, (int | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_12146() { testInvalid("{{int}, (int | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_12147() { testInvalid("{{int}, (int | int)}","{(any | any), (any | any)}"); }
		@Test public void test_12148() { testInvalid("{{int}, (int | int)}","{(int | any), (any | any)}"); }
		@Test public void test_12149() { testInvalid("{{int}, (int | int)}","{(int & int), (any | any)}"); }
		@Test public void test_12150() { testInvalid("{{int}, (int | int)}","{!int, (int | any)}"); }
		@Test public void test_12151() { testInvalid("{{int}, (int | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_12152() { testInvalid("{{int}, (int | int)}","{(any | any), (int | any)}"); }
		@Test public void test_12153() { testInvalid("{{int}, (int | int)}","{(int | int), (int | any)}"); }
		@Test public void test_12154() { testInvalid("{{int}, (int | int)}","{{any}, (any | int)}"); }
		@Test public void test_12155() { testInvalid("{{int}, (int | int)}","{!int, (any | int)}"); }
		@Test public void test_12156() { testInvalid("{{int}, (int | int)}","{(any | any), (any | int)}"); }
		@Test public void test_12157() { testInvalid("{{int}, (int | int)}","{(any | int), (any | int)}"); }
		@Test public void test_12158() { testInvalid("{{int}, (int | int)}","{(any & int), (any | int)}"); }
		@Test public void test_12159() { testValid("{{int}, (int | int)}","{{int}, (int | int)}"); }
		@Test public void test_12160() { testInvalid("{{int}, (int | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_12161() { testInvalid("{{int}, (int | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_12162() { testInvalid("{{int}, (int | int)}","{{int}, (any & any)}"); }
		@Test public void test_12163() { testInvalid("{{int}, (int | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_12164() { testInvalid("{{int}, (int | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_12165() { testInvalid("{{int}, (int | int)}","{(int | any), (any & any)}"); }
		@Test public void test_12166() { testInvalid("{{int}, (int | int)}","{(any & any), (any & any)}"); }
		@Test public void test_12167() { testInvalid("{{int}, (int | int)}","{(int & any), (any & any)}"); }
		@Test public void test_12168() { testInvalid("{{int}, (int | int)}","{{any}, (int & any)}"); }
		@Test public void test_12169() { testValid("{{int}, (int | int)}","{{int}, (int & any)}"); }
		@Test public void test_12170() { testInvalid("{{int}, (int | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_12171() { testInvalid("{{int}, (int | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_12172() { testInvalid("{{int}, (int | int)}","{(any | int), (int & any)}"); }
		@Test public void test_12173() { testInvalid("{{int}, (int | int)}","{(any & any), (int & any)}"); }
		@Test public void test_12174() { testInvalid("{{int}, (int | int)}","{(int & any), (int & any)}"); }
		@Test public void test_12175() { testInvalid("{{int}, (int | int)}","{(int & int), (int & any)}"); }
		@Test public void test_12176() { testInvalid("{{int}, (int | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_12177() { testInvalid("{{int}, (int | int)}","{(any & any), (any & int)}"); }
		@Test public void test_12178() { testInvalid("{{int}, (int | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_12179() { testInvalid("{{int}, (int | int)}","{(int | int), (int & int)}"); }
		@Test public void test_12180() { testInvalid("{{int}, (int | int)}","{(any & any), (int & int)}"); }
		@Test public void test_12181() { testInvalid("{{int}, (int | int)}","{(any & int), (int & int)}"); }
		@Test public void test_12182() { testInvalid("{{int}, (int | int)}","{(int & int), (int & int)}"); }
		@Test public void test_12183() { testInvalid("{{int}, (int | int)}","(!int | {any})"); }
		@Test public void test_12184() { testInvalid("{{int}, (int | int)}","({any, any} | {any})"); }
		@Test public void test_12185() { testInvalid("{{int}, (int | int)}","((any | any) | {any})"); }
		@Test public void test_12186() { testInvalid("{{int}, (int | int)}","((int | any) | {any})"); }
		@Test public void test_12187() { testInvalid("{{int}, (int | int)}","((any & any) | {any})"); }
		@Test public void test_12188() { testInvalid("{{int}, (int | int)}","((int & any) | {any})"); }
		@Test public void test_12189() { testInvalid("{{int}, (int | int)}","((any & int) | {any})"); }
		@Test public void test_12190() { testInvalid("{{int}, (int | int)}","({int} | {int})"); }
		@Test public void test_12191() { testInvalid("{{int}, (int | int)}","(!any | {int})"); }
		@Test public void test_12192() { testInvalid("{{int}, (int | int)}","(!int | {int})"); }
		@Test public void test_12193() { testInvalid("{{int}, (int | int)}","({any, int} | {int})"); }
		@Test public void test_12194() { testInvalid("{{int}, (int | int)}","((int & any) | {int})"); }
		@Test public void test_12195() { testInvalid("{{int}, (int | int)}","((any & int) | {int})"); }
		@Test public void test_12196() { testInvalid("{{int}, (int | int)}","((int & int) | {int})"); }
		@Test public void test_12197() { testInvalid("{{int}, (int | int)}","({any} | !any)"); }
		@Test public void test_12198() { testInvalid("{{int}, (int | int)}","({int} | !any)"); }
		@Test public void test_12199() { testInvalid("{{int}, (int | int)}","({any, any} | !any)"); }
		@Test public void test_12200() { testInvalid("{{int}, (int | int)}","({int, int} | !any)"); }
		@Test public void test_12201() { testInvalid("{{int}, (int | int)}","((any | any) | !any)"); }
		@Test public void test_12202() { testInvalid("{{int}, (int | int)}","((int | any) | !any)"); }
		@Test public void test_12203() { testInvalid("{{int}, (int | int)}","((int | int) | !any)"); }
		@Test public void test_12204() { testInvalid("{{int}, (int | int)}","((int & int) | !any)"); }
		@Test public void test_12205() { testInvalid("{{int}, (int | int)}","(!int | !int)"); }
		@Test public void test_12206() { testInvalid("{{int}, (int | int)}","({any, any} | !int)"); }
		@Test public void test_12207() { testInvalid("{{int}, (int | int)}","({int, int} | !int)"); }
		@Test public void test_12208() { testInvalid("{{int}, (int | int)}","((int | any) | !int)"); }
		@Test public void test_12209() { testInvalid("{{int}, (int | int)}","((any | int) | !int)"); }
		@Test public void test_12210() { testInvalid("{{int}, (int | int)}","((any & int) | !int)"); }
		@Test public void test_12211() { testInvalid("{{int}, (int | int)}","((int & int) | !int)"); }
		@Test public void test_12212() { testInvalid("{{int}, (int | int)}","({int} | {any, any})"); }
		@Test public void test_12213() { testInvalid("{{int}, (int | int)}","(!any | {any, any})"); }
		@Test public void test_12214() { testInvalid("{{int}, (int | int)}","(!int | {any, any})"); }
		@Test public void test_12215() { testInvalid("{{int}, (int | int)}","({any, int} | {any, any})"); }
		@Test public void test_12216() { testInvalid("{{int}, (int | int)}","((int | any) | {any, any})"); }
		@Test public void test_12217() { testInvalid("{{int}, (int | int)}","((any & any) | {any, any})"); }
		@Test public void test_12218() { testInvalid("{{int}, (int | int)}","((any & int) | {any, any})"); }
		@Test public void test_12219() { testInvalid("{{int}, (int | int)}","(!int | {int, any})"); }
		@Test public void test_12220() { testInvalid("{{int}, (int | int)}","({any, int} | {int, any})"); }
		@Test public void test_12221() { testInvalid("{{int}, (int | int)}","((any | any) | {int, any})"); }
		@Test public void test_12222() { testInvalid("{{int}, (int | int)}","((int | any) | {int, any})"); }
		@Test public void test_12223() { testInvalid("{{int}, (int | int)}","((any | int) | {int, any})"); }
		@Test public void test_12224() { testInvalid("{{int}, (int | int)}","((int & any) | {int, any})"); }
		@Test public void test_12225() { testInvalid("{{int}, (int | int)}","({any} | {any, int})"); }
		@Test public void test_12226() { testInvalid("{{int}, (int | int)}","(!int | {any, int})"); }
		@Test public void test_12227() { testInvalid("{{int}, (int | int)}","({any, int} | {any, int})"); }
		@Test public void test_12228() { testInvalid("{{int}, (int | int)}","((any | any) | {any, int})"); }
		@Test public void test_12229() { testInvalid("{{int}, (int | int)}","((any | int) | {any, int})"); }
		@Test public void test_12230() { testInvalid("{{int}, (int | int)}","((int | int) | {any, int})"); }
		@Test public void test_12231() { testInvalid("{{int}, (int | int)}","((int & any) | {any, int})"); }
		@Test public void test_12232() { testInvalid("{{int}, (int | int)}","(!any | {int, int})"); }
		@Test public void test_12233() { testInvalid("{{int}, (int | int)}","(!int | {int, int})"); }
		@Test public void test_12234() { testInvalid("{{int}, (int | int)}","({any, any} | {int, int})"); }
		@Test public void test_12235() { testInvalid("{{int}, (int | int)}","({any, int} | {int, int})"); }
		@Test public void test_12236() { testInvalid("{{int}, (int | int)}","((any | any) | {int, int})"); }
		@Test public void test_12237() { testInvalid("{{int}, (int | int)}","((int | int) | {int, int})"); }
		@Test public void test_12238() { testInvalid("{{int}, (int | int)}","((int & any) | {int, int})"); }
		@Test public void test_12239() { testInvalid("{{int}, (int | int)}","((any & int) | {int, int})"); }
		@Test public void test_12240() { testInvalid("{{int}, (int | int)}","((int & int) | {int, int})"); }
		@Test public void test_12241() { testInvalid("{{int}, (int | int)}","({any} | (any | any))"); }
		@Test public void test_12242() { testInvalid("{{int}, (int | int)}","(!any | (any | any))"); }
		@Test public void test_12243() { testInvalid("{{int}, (int | int)}","({any, any} | (any | any))"); }
		@Test public void test_12244() { testInvalid("{{int}, (int | int)}","({any, int} | (any | any))"); }
		@Test public void test_12245() { testInvalid("{{int}, (int | int)}","({int, int} | (any | any))"); }
		@Test public void test_12246() { testInvalid("{{int}, (int | int)}","((int | any) | (any | any))"); }
		@Test public void test_12247() { testInvalid("{{int}, (int | int)}","((any | int) | (any | any))"); }
		@Test public void test_12248() { testInvalid("{{int}, (int | int)}","((any & int) | (any | any))"); }
		@Test public void test_12249() { testInvalid("{{int}, (int | int)}","((int & int) | (any | any))"); }
		@Test public void test_12250() { testInvalid("{{int}, (int | int)}","({any} | (int | any))"); }
		@Test public void test_12251() { testInvalid("{{int}, (int | int)}","(!int | (int | any))"); }
		@Test public void test_12252() { testInvalid("{{int}, (int | int)}","({int, any} | (int | any))"); }
		@Test public void test_12253() { testInvalid("{{int}, (int | int)}","({any, int} | (int | any))"); }
		@Test public void test_12254() { testInvalid("{{int}, (int | int)}","((int & any) | (int | any))"); }
		@Test public void test_12255() { testInvalid("{{int}, (int | int)}","((any & int) | (int | any))"); }
		@Test public void test_12256() { testInvalid("{{int}, (int | int)}","({any} | (any | int))"); }
		@Test public void test_12257() { testInvalid("{{int}, (int | int)}","({int} | (any | int))"); }
		@Test public void test_12258() { testInvalid("{{int}, (int | int)}","(!any | (any | int))"); }
		@Test public void test_12259() { testInvalid("{{int}, (int | int)}","(!int | (any | int))"); }
		@Test public void test_12260() { testInvalid("{{int}, (int | int)}","({any, int} | (any | int))"); }
		@Test public void test_12261() { testInvalid("{{int}, (int | int)}","({int, int} | (any | int))"); }
		@Test public void test_12262() { testInvalid("{{int}, (int | int)}","((int | any) | (any | int))"); }
		@Test public void test_12263() { testInvalid("{{int}, (int | int)}","((any | int) | (any | int))"); }
		@Test public void test_12264() { testInvalid("{{int}, (int | int)}","((int | int) | (any | int))"); }
		@Test public void test_12265() { testInvalid("{{int}, (int | int)}","((any & any) | (any | int))"); }
		@Test public void test_12266() { testInvalid("{{int}, (int | int)}","({int} | (int | int))"); }
		@Test public void test_12267() { testInvalid("{{int}, (int | int)}","(!any | (int | int))"); }
		@Test public void test_12268() { testInvalid("{{int}, (int | int)}","(!int | (int | int))"); }
		@Test public void test_12269() { testInvalid("{{int}, (int | int)}","({int, any} | (int | int))"); }
		@Test public void test_12270() { testInvalid("{{int}, (int | int)}","({any, int} | (int | int))"); }
		@Test public void test_12271() { testInvalid("{{int}, (int | int)}","((any | int) | (int | int))"); }
		@Test public void test_12272() { testInvalid("{{int}, (int | int)}","((int | int) | (int | int))"); }
		@Test public void test_12273() { testInvalid("{{int}, (int | int)}","((any & any) | (int | int))"); }
		@Test public void test_12274() { testInvalid("{{int}, (int | int)}","((int & any) | (int | int))"); }
		@Test public void test_12275() { testInvalid("{{int}, (int | int)}","((int & int) | (int | int))"); }
		@Test public void test_12276() { testInvalid("{{int}, (int | int)}","(!any | (any & any))"); }
		@Test public void test_12277() { testInvalid("{{int}, (int | int)}","(!int | (any & any))"); }
		@Test public void test_12278() { testInvalid("{{int}, (int | int)}","({any, any} | (any & any))"); }
		@Test public void test_12279() { testInvalid("{{int}, (int | int)}","({int, any} | (any & any))"); }
		@Test public void test_12280() { testInvalid("{{int}, (int | int)}","({any, int} | (any & any))"); }
		@Test public void test_12281() { testInvalid("{{int}, (int | int)}","({int, int} | (any & any))"); }
		@Test public void test_12282() { testInvalid("{{int}, (int | int)}","((int | any) | (any & any))"); }
		@Test public void test_12283() { testInvalid("{{int}, (int | int)}","((int | int) | (any & any))"); }
		@Test public void test_12284() { testInvalid("{{int}, (int | int)}","((int & any) | (any & any))"); }
		@Test public void test_12285() { testInvalid("{{int}, (int | int)}","((any & int) | (any & any))"); }
		@Test public void test_12286() { testInvalid("{{int}, (int | int)}","((int & int) | (any & any))"); }
		@Test public void test_12287() { testInvalid("{{int}, (int | int)}","({any} | (int & any))"); }
		@Test public void test_12288() { testInvalid("{{any, any}, (int | int)}","{int}"); }
		@Test public void test_12289() { testInvalid("{{any, any}, (int | int)}","{any, any}"); }
		@Test public void test_12290() { testInvalid("{{any, any}, (int | int)}","{int, int}"); }
		@Test public void test_12291() { testInvalid("{{any, any}, (int | int)}","(any | int)"); }
		@Test public void test_12292() { testInvalid("{{any, any}, (int | int)}","(int & any)"); }
		@Test public void test_12293() { testInvalid("{{any, any}, (int | int)}","{{any}}"); }
		@Test public void test_12294() { testInvalid("{{any, any}, (int | int)}","{{int, any}}"); }
		@Test public void test_12295() { testInvalid("{{any, any}, (int | int)}","{{int, int}}"); }
		@Test public void test_12296() { testInvalid("{{any, any}, (int | int)}","{(any | int)}"); }
		@Test public void test_12297() { testInvalid("{{any, any}, (int | int)}","!{int, any}"); }
		@Test public void test_12298() { testInvalid("{{any, any}, (int | int)}","!{int, int}"); }
		@Test public void test_12299() { testValid("{{any, any}, (int | int)}","!(any | any)"); }
		@Test public void test_12300() { testValid("{{any, any}, (int | int)}","!(any & any)"); }
		@Test public void test_12301() { testInvalid("{{any, any}, (int | int)}","!(int & int)"); }
		@Test public void test_12302() { testInvalid("{{any, any}, (int | int)}","{{int}, {any}}"); }
		@Test public void test_12303() { testInvalid("{{any, any}, (int | int)}","{!int, {any}}"); }
		@Test public void test_12304() { testInvalid("{{any, any}, (int | int)}","{{int, int}, {any}}"); }
		@Test public void test_12305() { testInvalid("{{any, any}, (int | int)}","{(any | int), {any}}"); }
		@Test public void test_12306() { testInvalid("{{any, any}, (int | int)}","{!int, {int}}"); }
		@Test public void test_12307() { testInvalid("{{any, any}, (int | int)}","{{any, any}, {int}}"); }
		@Test public void test_12308() { testInvalid("{{any, any}, (int | int)}","{(any | any), {int}}"); }
		@Test public void test_12309() { testInvalid("{{any, any}, (int | int)}","{(any & any), {int}}"); }
		@Test public void test_12310() { testInvalid("{{any, any}, (int | int)}","{(any & int), {int}}"); }
		@Test public void test_12311() { testInvalid("{{any, any}, (int | int)}","{{any, any}, !int}"); }
		@Test public void test_12312() { testInvalid("{{any, any}, (int | int)}","{{any, int}, !int}"); }
		@Test public void test_12313() { testInvalid("{{any, any}, (int | int)}","{(any | any), !int}"); }
		@Test public void test_12314() { testInvalid("{{any, any}, (int | int)}","{(int | any), !int}"); }
		@Test public void test_12315() { testInvalid("{{any, any}, (int | int)}","{(any & any), !int}"); }
		@Test public void test_12316() { testInvalid("{{any, any}, (int | int)}","{(int & any), !int}"); }
		@Test public void test_12317() { testInvalid("{{any, any}, (int | int)}","{(int & int), !int}"); }
		@Test public void test_12318() { testInvalid("{{any, any}, (int | int)}","{{any}, {any, any}}"); }
		@Test public void test_12319() { testInvalid("{{any, any}, (int | int)}","{{int}, {any, any}}"); }
		@Test public void test_12320() { testInvalid("{{any, any}, (int | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_12321() { testInvalid("{{any, any}, (int | int)}","{(any | any), {any, any}}"); }
		@Test public void test_12322() { testInvalid("{{any, any}, (int | int)}","{(any | int), {any, any}}"); }
		@Test public void test_12323() { testInvalid("{{any, any}, (int | int)}","{!int, {int, any}}"); }
		@Test public void test_12324() { testInvalid("{{any, any}, (int | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_12325() { testInvalid("{{any, any}, (int | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_12326() { testInvalid("{{any, any}, (int | int)}","{(any & int), {int, any}}"); }
		@Test public void test_12327() { testInvalid("{{any, any}, (int | int)}","{{any}, {any, int}}"); }
		@Test public void test_12328() { testInvalid("{{any, any}, (int | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_12329() { testInvalid("{{any, any}, (int | int)}","{(int | int), {any, int}}"); }
		@Test public void test_12330() { testInvalid("{{any, any}, (int | int)}","{(any & int), {any, int}}"); }
		@Test public void test_12331() { testInvalid("{{any, any}, (int | int)}","{!int, {int, int}}"); }
		@Test public void test_12332() { testInvalid("{{any, any}, (int | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_12333() { testInvalid("{{any, any}, (int | int)}","{(any | any), {int, int}}"); }
		@Test public void test_12334() { testInvalid("{{any, any}, (int | int)}","{(int | any), {int, int}}"); }
		@Test public void test_12335() { testInvalid("{{any, any}, (int | int)}","{(int & any), {int, int}}"); }
		@Test public void test_12336() { testInvalid("{{any, any}, (int | int)}","{{int}, (any | any)}"); }
		@Test public void test_12337() { testInvalid("{{any, any}, (int | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_12338() { testInvalid("{{any, any}, (int | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_12339() { testInvalid("{{any, any}, (int | int)}","{(any | any), (any | any)}"); }
		@Test public void test_12340() { testInvalid("{{any, any}, (int | int)}","{(int | any), (any | any)}"); }
		@Test public void test_12341() { testInvalid("{{any, any}, (int | int)}","{(int & int), (any | any)}"); }
		@Test public void test_12342() { testInvalid("{{any, any}, (int | int)}","{!int, (int | any)}"); }
		@Test public void test_12343() { testInvalid("{{any, any}, (int | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_12344() { testInvalid("{{any, any}, (int | int)}","{(any | any), (int | any)}"); }
		@Test public void test_12345() { testInvalid("{{any, any}, (int | int)}","{(int | int), (int | any)}"); }
		@Test public void test_12346() { testInvalid("{{any, any}, (int | int)}","{{any}, (any | int)}"); }
		@Test public void test_12347() { testInvalid("{{any, any}, (int | int)}","{!int, (any | int)}"); }
		@Test public void test_12348() { testInvalid("{{any, any}, (int | int)}","{(any | any), (any | int)}"); }
		@Test public void test_12349() { testInvalid("{{any, any}, (int | int)}","{(any | int), (any | int)}"); }
		@Test public void test_12350() { testInvalid("{{any, any}, (int | int)}","{(any & int), (any | int)}"); }
		@Test public void test_12351() { testInvalid("{{any, any}, (int | int)}","{{int}, (int | int)}"); }
		@Test public void test_12352() { testValid("{{any, any}, (int | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_12353() { testValid("{{any, any}, (int | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_12354() { testInvalid("{{any, any}, (int | int)}","{{int}, (any & any)}"); }
		@Test public void test_12355() { testInvalid("{{any, any}, (int | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_12356() { testInvalid("{{any, any}, (int | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_12357() { testInvalid("{{any, any}, (int | int)}","{(int | any), (any & any)}"); }
		@Test public void test_12358() { testInvalid("{{any, any}, (int | int)}","{(any & any), (any & any)}"); }
		@Test public void test_12359() { testInvalid("{{any, any}, (int | int)}","{(int & any), (any & any)}"); }
		@Test public void test_12360() { testInvalid("{{any, any}, (int | int)}","{{any}, (int & any)}"); }
		@Test public void test_12361() { testInvalid("{{any, any}, (int | int)}","{{int}, (int & any)}"); }
		@Test public void test_12362() { testValid("{{any, any}, (int | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_12363() { testValid("{{any, any}, (int | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_12364() { testInvalid("{{any, any}, (int | int)}","{(any | int), (int & any)}"); }
		@Test public void test_12365() { testInvalid("{{any, any}, (int | int)}","{(any & any), (int & any)}"); }
		@Test public void test_12366() { testInvalid("{{any, any}, (int | int)}","{(int & any), (int & any)}"); }
		@Test public void test_12367() { testInvalid("{{any, any}, (int | int)}","{(int & int), (int & any)}"); }
		@Test public void test_12368() { testValid("{{any, any}, (int | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_12369() { testInvalid("{{any, any}, (int | int)}","{(any & any), (any & int)}"); }
		@Test public void test_12370() { testValid("{{any, any}, (int | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_12371() { testInvalid("{{any, any}, (int | int)}","{(int | int), (int & int)}"); }
		@Test public void test_12372() { testInvalid("{{any, any}, (int | int)}","{(any & any), (int & int)}"); }
		@Test public void test_12373() { testInvalid("{{any, any}, (int | int)}","{(any & int), (int & int)}"); }
		@Test public void test_12374() { testInvalid("{{any, any}, (int | int)}","{(int & int), (int & int)}"); }
		@Test public void test_12375() { testInvalid("{{any, any}, (int | int)}","(!int | {any})"); }
		@Test public void test_12376() { testInvalid("{{any, any}, (int | int)}","({any, any} | {any})"); }
		@Test public void test_12377() { testInvalid("{{any, any}, (int | int)}","((any | any) | {any})"); }
		@Test public void test_12378() { testInvalid("{{any, any}, (int | int)}","((int | any) | {any})"); }
		@Test public void test_12379() { testInvalid("{{any, any}, (int | int)}","((any & any) | {any})"); }
		@Test public void test_12380() { testInvalid("{{any, any}, (int | int)}","((int & any) | {any})"); }
		@Test public void test_12381() { testInvalid("{{any, any}, (int | int)}","((any & int) | {any})"); }
		@Test public void test_12382() { testInvalid("{{any, any}, (int | int)}","({int} | {int})"); }
		@Test public void test_12383() { testInvalid("{{any, any}, (int | int)}","(!any | {int})"); }
		@Test public void test_12384() { testInvalid("{{any, any}, (int | int)}","(!int | {int})"); }
		@Test public void test_12385() { testInvalid("{{any, any}, (int | int)}","({any, int} | {int})"); }
		@Test public void test_12386() { testInvalid("{{any, any}, (int | int)}","((int & any) | {int})"); }
		@Test public void test_12387() { testInvalid("{{any, any}, (int | int)}","((any & int) | {int})"); }
		@Test public void test_12388() { testInvalid("{{any, any}, (int | int)}","((int & int) | {int})"); }
		@Test public void test_12389() { testInvalid("{{any, any}, (int | int)}","({any} | !any)"); }
		@Test public void test_12390() { testInvalid("{{any, any}, (int | int)}","({int} | !any)"); }
		@Test public void test_12391() { testInvalid("{{any, any}, (int | int)}","({any, any} | !any)"); }
		@Test public void test_12392() { testInvalid("{{any, any}, (int | int)}","({int, int} | !any)"); }
		@Test public void test_12393() { testInvalid("{{any, any}, (int | int)}","((any | any) | !any)"); }
		@Test public void test_12394() { testInvalid("{{any, any}, (int | int)}","((int | any) | !any)"); }
		@Test public void test_12395() { testInvalid("{{any, any}, (int | int)}","((int | int) | !any)"); }
		@Test public void test_12396() { testInvalid("{{any, any}, (int | int)}","((int & int) | !any)"); }
		@Test public void test_12397() { testInvalid("{{any, any}, (int | int)}","(!int | !int)"); }
		@Test public void test_12398() { testInvalid("{{any, any}, (int | int)}","({any, any} | !int)"); }
		@Test public void test_12399() { testInvalid("{{any, any}, (int | int)}","({int, int} | !int)"); }
		@Test public void test_12400() { testInvalid("{{any, any}, (int | int)}","((int | any) | !int)"); }
		@Test public void test_12401() { testInvalid("{{any, any}, (int | int)}","((any | int) | !int)"); }
		@Test public void test_12402() { testInvalid("{{any, any}, (int | int)}","((any & int) | !int)"); }
		@Test public void test_12403() { testInvalid("{{any, any}, (int | int)}","((int & int) | !int)"); }
		@Test public void test_12404() { testInvalid("{{any, any}, (int | int)}","({int} | {any, any})"); }
		@Test public void test_12405() { testInvalid("{{any, any}, (int | int)}","(!any | {any, any})"); }
		@Test public void test_12406() { testInvalid("{{any, any}, (int | int)}","(!int | {any, any})"); }
		@Test public void test_12407() { testInvalid("{{any, any}, (int | int)}","({any, int} | {any, any})"); }
		@Test public void test_12408() { testInvalid("{{any, any}, (int | int)}","((int | any) | {any, any})"); }
		@Test public void test_12409() { testInvalid("{{any, any}, (int | int)}","((any & any) | {any, any})"); }
		@Test public void test_12410() { testInvalid("{{any, any}, (int | int)}","((any & int) | {any, any})"); }
		@Test public void test_12411() { testInvalid("{{any, any}, (int | int)}","(!int | {int, any})"); }
		@Test public void test_12412() { testInvalid("{{any, any}, (int | int)}","({any, int} | {int, any})"); }
		@Test public void test_12413() { testInvalid("{{any, any}, (int | int)}","((any | any) | {int, any})"); }
		@Test public void test_12414() { testInvalid("{{any, any}, (int | int)}","((int | any) | {int, any})"); }
		@Test public void test_12415() { testInvalid("{{any, any}, (int | int)}","((any | int) | {int, any})"); }
		@Test public void test_12416() { testInvalid("{{any, any}, (int | int)}","((int & any) | {int, any})"); }
		@Test public void test_12417() { testInvalid("{{any, any}, (int | int)}","({any} | {any, int})"); }
		@Test public void test_12418() { testInvalid("{{any, any}, (int | int)}","(!int | {any, int})"); }
		@Test public void test_12419() { testInvalid("{{any, any}, (int | int)}","({any, int} | {any, int})"); }
		@Test public void test_12420() { testInvalid("{{any, any}, (int | int)}","((any | any) | {any, int})"); }
		@Test public void test_12421() { testInvalid("{{any, any}, (int | int)}","((any | int) | {any, int})"); }
		@Test public void test_12422() { testInvalid("{{any, any}, (int | int)}","((int | int) | {any, int})"); }
		@Test public void test_12423() { testInvalid("{{any, any}, (int | int)}","((int & any) | {any, int})"); }
		@Test public void test_12424() { testInvalid("{{any, any}, (int | int)}","(!any | {int, int})"); }
		@Test public void test_12425() { testInvalid("{{any, any}, (int | int)}","(!int | {int, int})"); }
		@Test public void test_12426() { testInvalid("{{any, any}, (int | int)}","({any, any} | {int, int})"); }
		@Test public void test_12427() { testInvalid("{{any, any}, (int | int)}","({any, int} | {int, int})"); }
		@Test public void test_12428() { testInvalid("{{any, any}, (int | int)}","((any | any) | {int, int})"); }
		@Test public void test_12429() { testInvalid("{{any, any}, (int | int)}","((int | int) | {int, int})"); }
		@Test public void test_12430() { testInvalid("{{any, any}, (int | int)}","((int & any) | {int, int})"); }
		@Test public void test_12431() { testInvalid("{{any, any}, (int | int)}","((any & int) | {int, int})"); }
		@Test public void test_12432() { testInvalid("{{any, any}, (int | int)}","((int & int) | {int, int})"); }
		@Test public void test_12433() { testInvalid("{{any, any}, (int | int)}","({any} | (any | any))"); }
		@Test public void test_12434() { testInvalid("{{any, any}, (int | int)}","(!any | (any | any))"); }
		@Test public void test_12435() { testInvalid("{{any, any}, (int | int)}","({any, any} | (any | any))"); }
		@Test public void test_12436() { testInvalid("{{any, any}, (int | int)}","({any, int} | (any | any))"); }
		@Test public void test_12437() { testInvalid("{{any, any}, (int | int)}","({int, int} | (any | any))"); }
		@Test public void test_12438() { testInvalid("{{any, any}, (int | int)}","((int | any) | (any | any))"); }
		@Test public void test_12439() { testInvalid("{{any, any}, (int | int)}","((any | int) | (any | any))"); }
		@Test public void test_12440() { testInvalid("{{any, any}, (int | int)}","((any & int) | (any | any))"); }
		@Test public void test_12441() { testInvalid("{{any, any}, (int | int)}","((int & int) | (any | any))"); }
		@Test public void test_12442() { testInvalid("{{any, any}, (int | int)}","({any} | (int | any))"); }
		@Test public void test_12443() { testInvalid("{{any, any}, (int | int)}","(!int | (int | any))"); }
		@Test public void test_12444() { testInvalid("{{any, any}, (int | int)}","({int, any} | (int | any))"); }
		@Test public void test_12445() { testInvalid("{{any, any}, (int | int)}","({any, int} | (int | any))"); }
		@Test public void test_12446() { testInvalid("{{any, any}, (int | int)}","((int & any) | (int | any))"); }
		@Test public void test_12447() { testInvalid("{{any, any}, (int | int)}","((any & int) | (int | any))"); }
		@Test public void test_12448() { testInvalid("{{any, any}, (int | int)}","({any} | (any | int))"); }
		@Test public void test_12449() { testInvalid("{{any, any}, (int | int)}","({int} | (any | int))"); }
		@Test public void test_12450() { testInvalid("{{any, any}, (int | int)}","(!any | (any | int))"); }
		@Test public void test_12451() { testInvalid("{{any, any}, (int | int)}","(!int | (any | int))"); }
		@Test public void test_12452() { testInvalid("{{any, any}, (int | int)}","({any, int} | (any | int))"); }
		@Test public void test_12453() { testInvalid("{{any, any}, (int | int)}","({int, int} | (any | int))"); }
		@Test public void test_12454() { testInvalid("{{any, any}, (int | int)}","((int | any) | (any | int))"); }
		@Test public void test_12455() { testInvalid("{{any, any}, (int | int)}","((any | int) | (any | int))"); }
		@Test public void test_12456() { testInvalid("{{any, any}, (int | int)}","((int | int) | (any | int))"); }
		@Test public void test_12457() { testInvalid("{{any, any}, (int | int)}","((any & any) | (any | int))"); }
		@Test public void test_12458() { testInvalid("{{any, any}, (int | int)}","({int} | (int | int))"); }
		@Test public void test_12459() { testInvalid("{{any, any}, (int | int)}","(!any | (int | int))"); }
		@Test public void test_12460() { testInvalid("{{any, any}, (int | int)}","(!int | (int | int))"); }
		@Test public void test_12461() { testInvalid("{{any, any}, (int | int)}","({int, any} | (int | int))"); }
		@Test public void test_12462() { testInvalid("{{any, any}, (int | int)}","({any, int} | (int | int))"); }
		@Test public void test_12463() { testInvalid("{{any, any}, (int | int)}","((any | int) | (int | int))"); }
		@Test public void test_12464() { testInvalid("{{any, any}, (int | int)}","((int | int) | (int | int))"); }
		@Test public void test_12465() { testInvalid("{{any, any}, (int | int)}","((any & any) | (int | int))"); }
		@Test public void test_12466() { testInvalid("{{any, any}, (int | int)}","((int & any) | (int | int))"); }
		@Test public void test_12467() { testInvalid("{{any, any}, (int | int)}","((int & int) | (int | int))"); }
		@Test public void test_12468() { testInvalid("{{any, any}, (int | int)}","(!any | (any & any))"); }
		@Test public void test_12469() { testInvalid("{{any, any}, (int | int)}","(!int | (any & any))"); }
		@Test public void test_12470() { testInvalid("{{any, any}, (int | int)}","({any, any} | (any & any))"); }
		@Test public void test_12471() { testInvalid("{{any, any}, (int | int)}","({int, any} | (any & any))"); }
		@Test public void test_12472() { testInvalid("{{any, any}, (int | int)}","({any, int} | (any & any))"); }
		@Test public void test_12473() { testInvalid("{{any, any}, (int | int)}","({int, int} | (any & any))"); }
		@Test public void test_12474() { testInvalid("{{any, any}, (int | int)}","((int | any) | (any & any))"); }
		@Test public void test_12475() { testInvalid("{{any, any}, (int | int)}","((int | int) | (any & any))"); }
		@Test public void test_12476() { testInvalid("{{any, any}, (int | int)}","((int & any) | (any & any))"); }
		@Test public void test_12477() { testInvalid("{{any, any}, (int | int)}","((any & int) | (any & any))"); }
		@Test public void test_12478() { testInvalid("{{any, any}, (int | int)}","((int & int) | (any & any))"); }
		@Test public void test_12479() { testInvalid("{{any, any}, (int | int)}","({any} | (int & any))"); }
		@Test public void test_12480() { testInvalid("{{int, int}, (int | int)}","{int}"); }
		@Test public void test_12481() { testInvalid("{{int, int}, (int | int)}","{any, any}"); }
		@Test public void test_12482() { testInvalid("{{int, int}, (int | int)}","{int, int}"); }
		@Test public void test_12483() { testInvalid("{{int, int}, (int | int)}","(any | int)"); }
		@Test public void test_12484() { testInvalid("{{int, int}, (int | int)}","(int & any)"); }
		@Test public void test_12485() { testInvalid("{{int, int}, (int | int)}","{{any}}"); }
		@Test public void test_12486() { testInvalid("{{int, int}, (int | int)}","{{int, any}}"); }
		@Test public void test_12487() { testInvalid("{{int, int}, (int | int)}","{{int, int}}"); }
		@Test public void test_12488() { testInvalid("{{int, int}, (int | int)}","{(any | int)}"); }
		@Test public void test_12489() { testInvalid("{{int, int}, (int | int)}","!{int, any}"); }
		@Test public void test_12490() { testInvalid("{{int, int}, (int | int)}","!{int, int}"); }
		@Test public void test_12491() { testValid("{{int, int}, (int | int)}","!(any | any)"); }
		@Test public void test_12492() { testValid("{{int, int}, (int | int)}","!(any & any)"); }
		@Test public void test_12493() { testInvalid("{{int, int}, (int | int)}","!(int & int)"); }
		@Test public void test_12494() { testInvalid("{{int, int}, (int | int)}","{{int}, {any}}"); }
		@Test public void test_12495() { testInvalid("{{int, int}, (int | int)}","{!int, {any}}"); }
		@Test public void test_12496() { testInvalid("{{int, int}, (int | int)}","{{int, int}, {any}}"); }
		@Test public void test_12497() { testInvalid("{{int, int}, (int | int)}","{(any | int), {any}}"); }
		@Test public void test_12498() { testInvalid("{{int, int}, (int | int)}","{!int, {int}}"); }
		@Test public void test_12499() { testInvalid("{{int, int}, (int | int)}","{{any, any}, {int}}"); }
		@Test public void test_12500() { testInvalid("{{int, int}, (int | int)}","{(any | any), {int}}"); }
		@Test public void test_12501() { testInvalid("{{int, int}, (int | int)}","{(any & any), {int}}"); }
		@Test public void test_12502() { testInvalid("{{int, int}, (int | int)}","{(any & int), {int}}"); }
		@Test public void test_12503() { testInvalid("{{int, int}, (int | int)}","{{any, any}, !int}"); }
		@Test public void test_12504() { testInvalid("{{int, int}, (int | int)}","{{any, int}, !int}"); }
		@Test public void test_12505() { testInvalid("{{int, int}, (int | int)}","{(any | any), !int}"); }
		@Test public void test_12506() { testInvalid("{{int, int}, (int | int)}","{(int | any), !int}"); }
		@Test public void test_12507() { testInvalid("{{int, int}, (int | int)}","{(any & any), !int}"); }
		@Test public void test_12508() { testInvalid("{{int, int}, (int | int)}","{(int & any), !int}"); }
		@Test public void test_12509() { testInvalid("{{int, int}, (int | int)}","{(int & int), !int}"); }
		@Test public void test_12510() { testInvalid("{{int, int}, (int | int)}","{{any}, {any, any}}"); }
		@Test public void test_12511() { testInvalid("{{int, int}, (int | int)}","{{int}, {any, any}}"); }
		@Test public void test_12512() { testInvalid("{{int, int}, (int | int)}","{{int, int}, {any, any}}"); }
		@Test public void test_12513() { testInvalid("{{int, int}, (int | int)}","{(any | any), {any, any}}"); }
		@Test public void test_12514() { testInvalid("{{int, int}, (int | int)}","{(any | int), {any, any}}"); }
		@Test public void test_12515() { testInvalid("{{int, int}, (int | int)}","{!int, {int, any}}"); }
		@Test public void test_12516() { testInvalid("{{int, int}, (int | int)}","{{int, any}, {int, any}}"); }
		@Test public void test_12517() { testInvalid("{{int, int}, (int | int)}","{{any, int}, {int, any}}"); }
		@Test public void test_12518() { testInvalid("{{int, int}, (int | int)}","{(any & int), {int, any}}"); }
		@Test public void test_12519() { testInvalid("{{int, int}, (int | int)}","{{any}, {any, int}}"); }
		@Test public void test_12520() { testInvalid("{{int, int}, (int | int)}","{{int, int}, {any, int}}"); }
		@Test public void test_12521() { testInvalid("{{int, int}, (int | int)}","{(int | int), {any, int}}"); }
		@Test public void test_12522() { testInvalid("{{int, int}, (int | int)}","{(any & int), {any, int}}"); }
		@Test public void test_12523() { testInvalid("{{int, int}, (int | int)}","{!int, {int, int}}"); }
		@Test public void test_12524() { testInvalid("{{int, int}, (int | int)}","{{int, int}, {int, int}}"); }
		@Test public void test_12525() { testInvalid("{{int, int}, (int | int)}","{(any | any), {int, int}}"); }
		@Test public void test_12526() { testInvalid("{{int, int}, (int | int)}","{(int | any), {int, int}}"); }
		@Test public void test_12527() { testInvalid("{{int, int}, (int | int)}","{(int & any), {int, int}}"); }
		@Test public void test_12528() { testInvalid("{{int, int}, (int | int)}","{{int}, (any | any)}"); }
		@Test public void test_12529() { testInvalid("{{int, int}, (int | int)}","{{int, any}, (any | any)}"); }
		@Test public void test_12530() { testInvalid("{{int, int}, (int | int)}","{{any, int}, (any | any)}"); }
		@Test public void test_12531() { testInvalid("{{int, int}, (int | int)}","{(any | any), (any | any)}"); }
		@Test public void test_12532() { testInvalid("{{int, int}, (int | int)}","{(int | any), (any | any)}"); }
		@Test public void test_12533() { testInvalid("{{int, int}, (int | int)}","{(int & int), (any | any)}"); }
		@Test public void test_12534() { testInvalid("{{int, int}, (int | int)}","{!int, (int | any)}"); }
		@Test public void test_12535() { testInvalid("{{int, int}, (int | int)}","{{int, int}, (int | any)}"); }
		@Test public void test_12536() { testInvalid("{{int, int}, (int | int)}","{(any | any), (int | any)}"); }
		@Test public void test_12537() { testInvalid("{{int, int}, (int | int)}","{(int | int), (int | any)}"); }
		@Test public void test_12538() { testInvalid("{{int, int}, (int | int)}","{{any}, (any | int)}"); }
		@Test public void test_12539() { testInvalid("{{int, int}, (int | int)}","{!int, (any | int)}"); }
		@Test public void test_12540() { testInvalid("{{int, int}, (int | int)}","{(any | any), (any | int)}"); }
		@Test public void test_12541() { testInvalid("{{int, int}, (int | int)}","{(any | int), (any | int)}"); }
		@Test public void test_12542() { testInvalid("{{int, int}, (int | int)}","{(any & int), (any | int)}"); }
		@Test public void test_12543() { testInvalid("{{int, int}, (int | int)}","{{int}, (int | int)}"); }
		@Test public void test_12544() { testInvalid("{{int, int}, (int | int)}","{{any, any}, (int | int)}"); }
		@Test public void test_12545() { testValid("{{int, int}, (int | int)}","{{int, int}, (int | int)}"); }
		@Test public void test_12546() { testInvalid("{{int, int}, (int | int)}","{{int}, (any & any)}"); }
		@Test public void test_12547() { testInvalid("{{int, int}, (int | int)}","{{int, any}, (any & any)}"); }
		@Test public void test_12548() { testInvalid("{{int, int}, (int | int)}","{{any, int}, (any & any)}"); }
		@Test public void test_12549() { testInvalid("{{int, int}, (int | int)}","{(int | any), (any & any)}"); }
		@Test public void test_12550() { testInvalid("{{int, int}, (int | int)}","{(any & any), (any & any)}"); }
		@Test public void test_12551() { testInvalid("{{int, int}, (int | int)}","{(int & any), (any & any)}"); }
		@Test public void test_12552() { testInvalid("{{int, int}, (int | int)}","{{any}, (int & any)}"); }
		@Test public void test_12553() { testInvalid("{{int, int}, (int | int)}","{{int}, (int & any)}"); }
		@Test public void test_12554() { testInvalid("{{int, int}, (int | int)}","{{any, any}, (int & any)}"); }
		@Test public void test_12555() { testInvalid("{{int, int}, (int | int)}","{{int, any}, (int & any)}"); }
		@Test public void test_12556() { testInvalid("{{int, int}, (int | int)}","{(any | int), (int & any)}"); }
		@Test public void test_12557() { testInvalid("{{int, int}, (int | int)}","{(any & any), (int & any)}"); }
		@Test public void test_12558() { testInvalid("{{int, int}, (int | int)}","{(int & any), (int & any)}"); }
		@Test public void test_12559() { testInvalid("{{int, int}, (int | int)}","{(int & int), (int & any)}"); }
		@Test public void test_12560() { testInvalid("{{int, int}, (int | int)}","{{int, any}, (any & int)}"); }
		@Test public void test_12561() { testInvalid("{{int, int}, (int | int)}","{(any & any), (any & int)}"); }
		@Test public void test_12562() { testInvalid("{{int, int}, (int | int)}","{{any, int}, (int & int)}"); }
		@Test public void test_12563() { testInvalid("{{int, int}, (int | int)}","{(int | int), (int & int)}"); }
		@Test public void test_12564() { testInvalid("{{int, int}, (int | int)}","{(any & any), (int & int)}"); }
		@Test public void test_12565() { testInvalid("{{int, int}, (int | int)}","{(any & int), (int & int)}"); }
		@Test public void test_12566() { testInvalid("{{int, int}, (int | int)}","{(int & int), (int & int)}"); }
		@Test public void test_12567() { testInvalid("{{int, int}, (int | int)}","(!int | {any})"); }
		@Test public void test_12568() { testInvalid("{{int, int}, (int | int)}","({any, any} | {any})"); }
		@Test public void test_12569() { testInvalid("{{int, int}, (int | int)}","((any | any) | {any})"); }
		@Test public void test_12570() { testInvalid("{{int, int}, (int | int)}","((int | any) | {any})"); }
		@Test public void test_12571() { testInvalid("{{int, int}, (int | int)}","((any & any) | {any})"); }
		@Test public void test_12572() { testInvalid("{{int, int}, (int | int)}","((int & any) | {any})"); }
		@Test public void test_12573() { testInvalid("{{int, int}, (int | int)}","((any & int) | {any})"); }
		@Test public void test_12574() { testInvalid("{{int, int}, (int | int)}","({int} | {int})"); }
		@Test public void test_12575() { testInvalid("{{int, int}, (int | int)}","(!any | {int})"); }
		@Test public void test_12576() { testInvalid("{{int, int}, (int | int)}","(!int | {int})"); }
		@Test public void test_12577() { testInvalid("{{int, int}, (int | int)}","({any, int} | {int})"); }
		@Test public void test_12578() { testInvalid("{{int, int}, (int | int)}","((int & any) | {int})"); }
		@Test public void test_12579() { testInvalid("{{int, int}, (int | int)}","((any & int) | {int})"); }
		@Test public void test_12580() { testInvalid("{{int, int}, (int | int)}","((int & int) | {int})"); }
		@Test public void test_12581() { testInvalid("{{int, int}, (int | int)}","({any} | !any)"); }
		@Test public void test_12582() { testInvalid("{{int, int}, (int | int)}","({int} | !any)"); }
		@Test public void test_12583() { testInvalid("{{int, int}, (int | int)}","({any, any} | !any)"); }
		@Test public void test_12584() { testInvalid("{{int, int}, (int | int)}","({int, int} | !any)"); }
		@Test public void test_12585() { testInvalid("{{int, int}, (int | int)}","((any | any) | !any)"); }
		@Test public void test_12586() { testInvalid("{{int, int}, (int | int)}","((int | any) | !any)"); }
		@Test public void test_12587() { testInvalid("{{int, int}, (int | int)}","((int | int) | !any)"); }
		@Test public void test_12588() { testInvalid("{{int, int}, (int | int)}","((int & int) | !any)"); }
		@Test public void test_12589() { testInvalid("{{int, int}, (int | int)}","(!int | !int)"); }
		@Test public void test_12590() { testInvalid("{{int, int}, (int | int)}","({any, any} | !int)"); }
		@Test public void test_12591() { testInvalid("{{int, int}, (int | int)}","({int, int} | !int)"); }
		@Test public void test_12592() { testInvalid("{{int, int}, (int | int)}","((int | any) | !int)"); }
		@Test public void test_12593() { testInvalid("{{int, int}, (int | int)}","((any | int) | !int)"); }
		@Test public void test_12594() { testInvalid("{{int, int}, (int | int)}","((any & int) | !int)"); }
		@Test public void test_12595() { testInvalid("{{int, int}, (int | int)}","((int & int) | !int)"); }
		@Test public void test_12596() { testInvalid("{{int, int}, (int | int)}","({int} | {any, any})"); }
		@Test public void test_12597() { testInvalid("{{int, int}, (int | int)}","(!any | {any, any})"); }
		@Test public void test_12598() { testInvalid("{{int, int}, (int | int)}","(!int | {any, any})"); }
		@Test public void test_12599() { testInvalid("{{int, int}, (int | int)}","({any, int} | {any, any})"); }
		@Test public void test_12600() { testInvalid("{{int, int}, (int | int)}","((int | any) | {any, any})"); }
		@Test public void test_12601() { testInvalid("{{int, int}, (int | int)}","((any & any) | {any, any})"); }
		@Test public void test_12602() { testInvalid("{{int, int}, (int | int)}","((any & int) | {any, any})"); }
		@Test public void test_12603() { testInvalid("{{int, int}, (int | int)}","(!int | {int, any})"); }
		@Test public void test_12604() { testInvalid("{{int, int}, (int | int)}","({any, int} | {int, any})"); }
		@Test public void test_12605() { testInvalid("{{int, int}, (int | int)}","((any | any) | {int, any})"); }
		@Test public void test_12606() { testInvalid("{{int, int}, (int | int)}","((int | any) | {int, any})"); }
		@Test public void test_12607() { testInvalid("{{int, int}, (int | int)}","((any | int) | {int, any})"); }
		@Test public void test_12608() { testInvalid("{{int, int}, (int | int)}","((int & any) | {int, any})"); }
		@Test public void test_12609() { testInvalid("{{int, int}, (int | int)}","({any} | {any, int})"); }
		@Test public void test_12610() { testInvalid("{{int, int}, (int | int)}","(!int | {any, int})"); }
		@Test public void test_12611() { testInvalid("{{int, int}, (int | int)}","({any, int} | {any, int})"); }
		@Test public void test_12612() { testInvalid("{{int, int}, (int | int)}","((any | any) | {any, int})"); }
		@Test public void test_12613() { testInvalid("{{int, int}, (int | int)}","((any | int) | {any, int})"); }
		@Test public void test_12614() { testInvalid("{{int, int}, (int | int)}","((int | int) | {any, int})"); }
		@Test public void test_12615() { testInvalid("{{int, int}, (int | int)}","((int & any) | {any, int})"); }
		@Test public void test_12616() { testInvalid("{{int, int}, (int | int)}","(!any | {int, int})"); }
		@Test public void test_12617() { testInvalid("{{int, int}, (int | int)}","(!int | {int, int})"); }
		@Test public void test_12618() { testInvalid("{{int, int}, (int | int)}","({any, any} | {int, int})"); }
		@Test public void test_12619() { testInvalid("{{int, int}, (int | int)}","({any, int} | {int, int})"); }
		@Test public void test_12620() { testInvalid("{{int, int}, (int | int)}","((any | any) | {int, int})"); }
		@Test public void test_12621() { testInvalid("{{int, int}, (int | int)}","((int | int) | {int, int})"); }
		@Test public void test_12622() { testInvalid("{{int, int}, (int | int)}","((int & any) | {int, int})"); }
		@Test public void test_12623() { testInvalid("{{int, int}, (int | int)}","((any & int) | {int, int})"); }
		@Test public void test_12624() { testInvalid("{{int, int}, (int | int)}","((int & int) | {int, int})"); }
		@Test public void test_12625() { testInvalid("{{int, int}, (int | int)}","({any} | (any | any))"); }
		@Test public void test_12626() { testInvalid("{{int, int}, (int | int)}","(!any | (any | any))"); }
		@Test public void test_12627() { testInvalid("{{int, int}, (int | int)}","({any, any} | (any | any))"); }
		@Test public void test_12628() { testInvalid("{{int, int}, (int | int)}","({any, int} | (any | any))"); }
		@Test public void test_12629() { testInvalid("{{int, int}, (int | int)}","({int, int} | (any | any))"); }
		@Test public void test_12630() { testInvalid("{{int, int}, (int | int)}","((int | any) | (any | any))"); }
		@Test public void test_12631() { testInvalid("{{int, int}, (int | int)}","((any | int) | (any | any))"); }
		@Test public void test_12632() { testInvalid("{{int, int}, (int | int)}","((any & int) | (any | any))"); }
		@Test public void test_12633() { testInvalid("{{int, int}, (int | int)}","((int & int) | (any | any))"); }
		@Test public void test_12634() { testInvalid("{{int, int}, (int | int)}","({any} | (int | any))"); }
		@Test public void test_12635() { testInvalid("{{int, int}, (int | int)}","(!int | (int | any))"); }
		@Test public void test_12636() { testInvalid("{{int, int}, (int | int)}","({int, any} | (int | any))"); }
		@Test public void test_12637() { testInvalid("{{int, int}, (int | int)}","({any, int} | (int | any))"); }
		@Test public void test_12638() { testInvalid("{{int, int}, (int | int)}","((int & any) | (int | any))"); }
		@Test public void test_12639() { testInvalid("{{int, int}, (int | int)}","((any & int) | (int | any))"); }
		@Test public void test_12640() { testInvalid("{{int, int}, (int | int)}","({any} | (any | int))"); }
		@Test public void test_12641() { testInvalid("{{int, int}, (int | int)}","({int} | (any | int))"); }
		@Test public void test_12642() { testInvalid("{{int, int}, (int | int)}","(!any | (any | int))"); }
		@Test public void test_12643() { testInvalid("{{int, int}, (int | int)}","(!int | (any | int))"); }
		@Test public void test_12644() { testInvalid("{{int, int}, (int | int)}","({any, int} | (any | int))"); }
		@Test public void test_12645() { testInvalid("{{int, int}, (int | int)}","({int, int} | (any | int))"); }
		@Test public void test_12646() { testInvalid("{{int, int}, (int | int)}","((int | any) | (any | int))"); }
		@Test public void test_12647() { testInvalid("{{int, int}, (int | int)}","((any | int) | (any | int))"); }
		@Test public void test_12648() { testInvalid("{{int, int}, (int | int)}","((int | int) | (any | int))"); }
		@Test public void test_12649() { testInvalid("{{int, int}, (int | int)}","((any & any) | (any | int))"); }
		@Test public void test_12650() { testInvalid("{{int, int}, (int | int)}","({int} | (int | int))"); }
		@Test public void test_12651() { testInvalid("{{int, int}, (int | int)}","(!any | (int | int))"); }
		@Test public void test_12652() { testInvalid("{{int, int}, (int | int)}","(!int | (int | int))"); }
		@Test public void test_12653() { testInvalid("{{int, int}, (int | int)}","({int, any} | (int | int))"); }
		@Test public void test_12654() { testInvalid("{{int, int}, (int | int)}","({any, int} | (int | int))"); }
		@Test public void test_12655() { testInvalid("{{int, int}, (int | int)}","((any | int) | (int | int))"); }
		@Test public void test_12656() { testInvalid("{{int, int}, (int | int)}","((int | int) | (int | int))"); }
		@Test public void test_12657() { testInvalid("{{int, int}, (int | int)}","((any & any) | (int | int))"); }
		@Test public void test_12658() { testInvalid("{{int, int}, (int | int)}","((int & any) | (int | int))"); }
		@Test public void test_12659() { testInvalid("{{int, int}, (int | int)}","((int & int) | (int | int))"); }
		@Test public void test_12660() { testInvalid("{{int, int}, (int | int)}","(!any | (any & any))"); }
		@Test public void test_12661() { testInvalid("{{int, int}, (int | int)}","(!int | (any & any))"); }
		@Test public void test_12662() { testInvalid("{{int, int}, (int | int)}","({any, any} | (any & any))"); }
		@Test public void test_12663() { testInvalid("{{int, int}, (int | int)}","({int, any} | (any & any))"); }
		@Test public void test_12664() { testInvalid("{{int, int}, (int | int)}","({any, int} | (any & any))"); }
		@Test public void test_12665() { testInvalid("{{int, int}, (int | int)}","({int, int} | (any & any))"); }
		@Test public void test_12666() { testInvalid("{{int, int}, (int | int)}","((int | any) | (any & any))"); }
		@Test public void test_12667() { testInvalid("{{int, int}, (int | int)}","((int | int) | (any & any))"); }
		@Test public void test_12668() { testInvalid("{{int, int}, (int | int)}","((int & any) | (any & any))"); }
		@Test public void test_12669() { testInvalid("{{int, int}, (int | int)}","((any & int) | (any & any))"); }
		@Test public void test_12670() { testInvalid("{{int, int}, (int | int)}","((int & int) | (any & any))"); }
		@Test public void test_12671() { testInvalid("{{int, int}, (int | int)}","({any} | (int & any))"); }
		@Test public void test_12672() { testInvalid("{{int}, (any & any)}","{int}"); }
		@Test public void test_12673() { testInvalid("{{int}, (any & any)}","{any, any}"); }
		@Test public void test_12674() { testInvalid("{{int}, (any & any)}","{int, int}"); }
		@Test public void test_12675() { testInvalid("{{int}, (any & any)}","(any | int)"); }
		@Test public void test_12676() { testInvalid("{{int}, (any & any)}","(int & any)"); }
		@Test public void test_12677() { testInvalid("{{int}, (any & any)}","{{any}}"); }
		@Test public void test_12678() { testInvalid("{{int}, (any & any)}","{{int, any}}"); }
		@Test public void test_12679() { testInvalid("{{int}, (any & any)}","{{int, int}}"); }
		@Test public void test_12680() { testInvalid("{{int}, (any & any)}","{(any | int)}"); }
		@Test public void test_12681() { testInvalid("{{int}, (any & any)}","!{int, any}"); }
		@Test public void test_12682() { testInvalid("{{int}, (any & any)}","!{int, int}"); }
		@Test public void test_12683() { testValid("{{int}, (any & any)}","!(any | any)"); }
		@Test public void test_12684() { testValid("{{int}, (any & any)}","!(any & any)"); }
		@Test public void test_12685() { testInvalid("{{int}, (any & any)}","!(int & int)"); }
		@Test public void test_12686() { testValid("{{int}, (any & any)}","{{int}, {any}}"); }
		@Test public void test_12687() { testInvalid("{{int}, (any & any)}","{!int, {any}}"); }
		@Test public void test_12688() { testInvalid("{{int}, (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_12689() { testInvalid("{{int}, (any & any)}","{(any | int), {any}}"); }
		@Test public void test_12690() { testInvalid("{{int}, (any & any)}","{!int, {int}}"); }
		@Test public void test_12691() { testInvalid("{{int}, (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_12692() { testInvalid("{{int}, (any & any)}","{(any | any), {int}}"); }
		@Test public void test_12693() { testInvalid("{{int}, (any & any)}","{(any & any), {int}}"); }
		@Test public void test_12694() { testInvalid("{{int}, (any & any)}","{(any & int), {int}}"); }
		@Test public void test_12695() { testInvalid("{{int}, (any & any)}","{{any, any}, !int}"); }
		@Test public void test_12696() { testInvalid("{{int}, (any & any)}","{{any, int}, !int}"); }
		@Test public void test_12697() { testInvalid("{{int}, (any & any)}","{(any | any), !int}"); }
		@Test public void test_12698() { testInvalid("{{int}, (any & any)}","{(int | any), !int}"); }
		@Test public void test_12699() { testInvalid("{{int}, (any & any)}","{(any & any), !int}"); }
		@Test public void test_12700() { testInvalid("{{int}, (any & any)}","{(int & any), !int}"); }
		@Test public void test_12701() { testInvalid("{{int}, (any & any)}","{(int & int), !int}"); }
		@Test public void test_12702() { testInvalid("{{int}, (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_12703() { testValid("{{int}, (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_12704() { testInvalid("{{int}, (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_12705() { testInvalid("{{int}, (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_12706() { testInvalid("{{int}, (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_12707() { testInvalid("{{int}, (any & any)}","{!int, {int, any}}"); }
		@Test public void test_12708() { testInvalid("{{int}, (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_12709() { testInvalid("{{int}, (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_12710() { testInvalid("{{int}, (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_12711() { testInvalid("{{int}, (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_12712() { testInvalid("{{int}, (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_12713() { testInvalid("{{int}, (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_12714() { testInvalid("{{int}, (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_12715() { testInvalid("{{int}, (any & any)}","{!int, {int, int}}"); }
		@Test public void test_12716() { testInvalid("{{int}, (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_12717() { testInvalid("{{int}, (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_12718() { testInvalid("{{int}, (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_12719() { testInvalid("{{int}, (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_12720() { testValid("{{int}, (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_12721() { testInvalid("{{int}, (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_12722() { testInvalid("{{int}, (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_12723() { testInvalid("{{int}, (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_12724() { testInvalid("{{int}, (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_12725() { testInvalid("{{int}, (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_12726() { testInvalid("{{int}, (any & any)}","{!int, (int | any)}"); }
		@Test public void test_12727() { testInvalid("{{int}, (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_12728() { testInvalid("{{int}, (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_12729() { testInvalid("{{int}, (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_12730() { testInvalid("{{int}, (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_12731() { testInvalid("{{int}, (any & any)}","{!int, (any | int)}"); }
		@Test public void test_12732() { testInvalid("{{int}, (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_12733() { testInvalid("{{int}, (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_12734() { testInvalid("{{int}, (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_12735() { testValid("{{int}, (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_12736() { testInvalid("{{int}, (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_12737() { testInvalid("{{int}, (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_12738() { testValid("{{int}, (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_12739() { testInvalid("{{int}, (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_12740() { testInvalid("{{int}, (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_12741() { testInvalid("{{int}, (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_12742() { testInvalid("{{int}, (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_12743() { testInvalid("{{int}, (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_12744() { testInvalid("{{int}, (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_12745() { testValid("{{int}, (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_12746() { testInvalid("{{int}, (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_12747() { testInvalid("{{int}, (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_12748() { testInvalid("{{int}, (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_12749() { testInvalid("{{int}, (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_12750() { testInvalid("{{int}, (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_12751() { testInvalid("{{int}, (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_12752() { testInvalid("{{int}, (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_12753() { testInvalid("{{int}, (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_12754() { testInvalid("{{int}, (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_12755() { testInvalid("{{int}, (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_12756() { testInvalid("{{int}, (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_12757() { testInvalid("{{int}, (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_12758() { testInvalid("{{int}, (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_12759() { testInvalid("{{int}, (any & any)}","(!int | {any})"); }
		@Test public void test_12760() { testInvalid("{{int}, (any & any)}","({any, any} | {any})"); }
		@Test public void test_12761() { testInvalid("{{int}, (any & any)}","((any | any) | {any})"); }
		@Test public void test_12762() { testInvalid("{{int}, (any & any)}","((int | any) | {any})"); }
		@Test public void test_12763() { testInvalid("{{int}, (any & any)}","((any & any) | {any})"); }
		@Test public void test_12764() { testInvalid("{{int}, (any & any)}","((int & any) | {any})"); }
		@Test public void test_12765() { testInvalid("{{int}, (any & any)}","((any & int) | {any})"); }
		@Test public void test_12766() { testInvalid("{{int}, (any & any)}","({int} | {int})"); }
		@Test public void test_12767() { testInvalid("{{int}, (any & any)}","(!any | {int})"); }
		@Test public void test_12768() { testInvalid("{{int}, (any & any)}","(!int | {int})"); }
		@Test public void test_12769() { testInvalid("{{int}, (any & any)}","({any, int} | {int})"); }
		@Test public void test_12770() { testInvalid("{{int}, (any & any)}","((int & any) | {int})"); }
		@Test public void test_12771() { testInvalid("{{int}, (any & any)}","((any & int) | {int})"); }
		@Test public void test_12772() { testInvalid("{{int}, (any & any)}","((int & int) | {int})"); }
		@Test public void test_12773() { testInvalid("{{int}, (any & any)}","({any} | !any)"); }
		@Test public void test_12774() { testInvalid("{{int}, (any & any)}","({int} | !any)"); }
		@Test public void test_12775() { testInvalid("{{int}, (any & any)}","({any, any} | !any)"); }
		@Test public void test_12776() { testInvalid("{{int}, (any & any)}","({int, int} | !any)"); }
		@Test public void test_12777() { testInvalid("{{int}, (any & any)}","((any | any) | !any)"); }
		@Test public void test_12778() { testInvalid("{{int}, (any & any)}","((int | any) | !any)"); }
		@Test public void test_12779() { testInvalid("{{int}, (any & any)}","((int | int) | !any)"); }
		@Test public void test_12780() { testInvalid("{{int}, (any & any)}","((int & int) | !any)"); }
		@Test public void test_12781() { testInvalid("{{int}, (any & any)}","(!int | !int)"); }
		@Test public void test_12782() { testInvalid("{{int}, (any & any)}","({any, any} | !int)"); }
		@Test public void test_12783() { testInvalid("{{int}, (any & any)}","({int, int} | !int)"); }
		@Test public void test_12784() { testInvalid("{{int}, (any & any)}","((int | any) | !int)"); }
		@Test public void test_12785() { testInvalid("{{int}, (any & any)}","((any | int) | !int)"); }
		@Test public void test_12786() { testInvalid("{{int}, (any & any)}","((any & int) | !int)"); }
		@Test public void test_12787() { testInvalid("{{int}, (any & any)}","((int & int) | !int)"); }
		@Test public void test_12788() { testInvalid("{{int}, (any & any)}","({int} | {any, any})"); }
		@Test public void test_12789() { testInvalid("{{int}, (any & any)}","(!any | {any, any})"); }
		@Test public void test_12790() { testInvalid("{{int}, (any & any)}","(!int | {any, any})"); }
		@Test public void test_12791() { testInvalid("{{int}, (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_12792() { testInvalid("{{int}, (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_12793() { testInvalid("{{int}, (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_12794() { testInvalid("{{int}, (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_12795() { testInvalid("{{int}, (any & any)}","(!int | {int, any})"); }
		@Test public void test_12796() { testInvalid("{{int}, (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_12797() { testInvalid("{{int}, (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_12798() { testInvalid("{{int}, (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_12799() { testInvalid("{{int}, (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_12800() { testInvalid("{{int}, (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_12801() { testInvalid("{{int}, (any & any)}","({any} | {any, int})"); }
		@Test public void test_12802() { testInvalid("{{int}, (any & any)}","(!int | {any, int})"); }
		@Test public void test_12803() { testInvalid("{{int}, (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_12804() { testInvalid("{{int}, (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_12805() { testInvalid("{{int}, (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_12806() { testInvalid("{{int}, (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_12807() { testInvalid("{{int}, (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_12808() { testInvalid("{{int}, (any & any)}","(!any | {int, int})"); }
		@Test public void test_12809() { testInvalid("{{int}, (any & any)}","(!int | {int, int})"); }
		@Test public void test_12810() { testInvalid("{{int}, (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_12811() { testInvalid("{{int}, (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_12812() { testInvalid("{{int}, (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_12813() { testInvalid("{{int}, (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_12814() { testInvalid("{{int}, (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_12815() { testInvalid("{{int}, (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_12816() { testInvalid("{{int}, (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_12817() { testInvalid("{{int}, (any & any)}","({any} | (any | any))"); }
		@Test public void test_12818() { testInvalid("{{int}, (any & any)}","(!any | (any | any))"); }
		@Test public void test_12819() { testInvalid("{{int}, (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_12820() { testInvalid("{{int}, (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_12821() { testInvalid("{{int}, (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_12822() { testInvalid("{{int}, (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_12823() { testInvalid("{{int}, (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_12824() { testInvalid("{{int}, (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_12825() { testInvalid("{{int}, (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_12826() { testInvalid("{{int}, (any & any)}","({any} | (int | any))"); }
		@Test public void test_12827() { testInvalid("{{int}, (any & any)}","(!int | (int | any))"); }
		@Test public void test_12828() { testInvalid("{{int}, (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_12829() { testInvalid("{{int}, (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_12830() { testInvalid("{{int}, (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_12831() { testInvalid("{{int}, (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_12832() { testInvalid("{{int}, (any & any)}","({any} | (any | int))"); }
		@Test public void test_12833() { testInvalid("{{int}, (any & any)}","({int} | (any | int))"); }
		@Test public void test_12834() { testInvalid("{{int}, (any & any)}","(!any | (any | int))"); }
		@Test public void test_12835() { testInvalid("{{int}, (any & any)}","(!int | (any | int))"); }
		@Test public void test_12836() { testInvalid("{{int}, (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_12837() { testInvalid("{{int}, (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_12838() { testInvalid("{{int}, (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_12839() { testInvalid("{{int}, (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_12840() { testInvalid("{{int}, (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_12841() { testInvalid("{{int}, (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_12842() { testInvalid("{{int}, (any & any)}","({int} | (int | int))"); }
		@Test public void test_12843() { testInvalid("{{int}, (any & any)}","(!any | (int | int))"); }
		@Test public void test_12844() { testInvalid("{{int}, (any & any)}","(!int | (int | int))"); }
		@Test public void test_12845() { testInvalid("{{int}, (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_12846() { testInvalid("{{int}, (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_12847() { testInvalid("{{int}, (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_12848() { testInvalid("{{int}, (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_12849() { testInvalid("{{int}, (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_12850() { testInvalid("{{int}, (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_12851() { testInvalid("{{int}, (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_12852() { testInvalid("{{int}, (any & any)}","(!any | (any & any))"); }
		@Test public void test_12853() { testInvalid("{{int}, (any & any)}","(!int | (any & any))"); }
		@Test public void test_12854() { testInvalid("{{int}, (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_12855() { testInvalid("{{int}, (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_12856() { testInvalid("{{int}, (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_12857() { testInvalid("{{int}, (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_12858() { testInvalid("{{int}, (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_12859() { testInvalid("{{int}, (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_12860() { testInvalid("{{int}, (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_12861() { testInvalid("{{int}, (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_12862() { testInvalid("{{int}, (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_12863() { testInvalid("{{int}, (any & any)}","({any} | (int & any))"); }
		@Test public void test_12864() { testInvalid("{{int, any}, (any & any)}","{int}"); }
		@Test public void test_12865() { testInvalid("{{int, any}, (any & any)}","{any, any}"); }
		@Test public void test_12866() { testInvalid("{{int, any}, (any & any)}","{int, int}"); }
		@Test public void test_12867() { testInvalid("{{int, any}, (any & any)}","(any | int)"); }
		@Test public void test_12868() { testInvalid("{{int, any}, (any & any)}","(int & any)"); }
		@Test public void test_12869() { testInvalid("{{int, any}, (any & any)}","{{any}}"); }
		@Test public void test_12870() { testInvalid("{{int, any}, (any & any)}","{{int, any}}"); }
		@Test public void test_12871() { testInvalid("{{int, any}, (any & any)}","{{int, int}}"); }
		@Test public void test_12872() { testInvalid("{{int, any}, (any & any)}","{(any | int)}"); }
		@Test public void test_12873() { testInvalid("{{int, any}, (any & any)}","!{int, any}"); }
		@Test public void test_12874() { testInvalid("{{int, any}, (any & any)}","!{int, int}"); }
		@Test public void test_12875() { testValid("{{int, any}, (any & any)}","!(any | any)"); }
		@Test public void test_12876() { testValid("{{int, any}, (any & any)}","!(any & any)"); }
		@Test public void test_12877() { testInvalid("{{int, any}, (any & any)}","!(int & int)"); }
		@Test public void test_12878() { testInvalid("{{int, any}, (any & any)}","{{int}, {any}}"); }
		@Test public void test_12879() { testInvalid("{{int, any}, (any & any)}","{!int, {any}}"); }
		@Test public void test_12880() { testValid("{{int, any}, (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_12881() { testInvalid("{{int, any}, (any & any)}","{(any | int), {any}}"); }
		@Test public void test_12882() { testInvalid("{{int, any}, (any & any)}","{!int, {int}}"); }
		@Test public void test_12883() { testInvalid("{{int, any}, (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_12884() { testInvalid("{{int, any}, (any & any)}","{(any | any), {int}}"); }
		@Test public void test_12885() { testInvalid("{{int, any}, (any & any)}","{(any & any), {int}}"); }
		@Test public void test_12886() { testInvalid("{{int, any}, (any & any)}","{(any & int), {int}}"); }
		@Test public void test_12887() { testInvalid("{{int, any}, (any & any)}","{{any, any}, !int}"); }
		@Test public void test_12888() { testInvalid("{{int, any}, (any & any)}","{{any, int}, !int}"); }
		@Test public void test_12889() { testInvalid("{{int, any}, (any & any)}","{(any | any), !int}"); }
		@Test public void test_12890() { testInvalid("{{int, any}, (any & any)}","{(int | any), !int}"); }
		@Test public void test_12891() { testInvalid("{{int, any}, (any & any)}","{(any & any), !int}"); }
		@Test public void test_12892() { testInvalid("{{int, any}, (any & any)}","{(int & any), !int}"); }
		@Test public void test_12893() { testInvalid("{{int, any}, (any & any)}","{(int & int), !int}"); }
		@Test public void test_12894() { testInvalid("{{int, any}, (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_12895() { testInvalid("{{int, any}, (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_12896() { testValid("{{int, any}, (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_12897() { testInvalid("{{int, any}, (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_12898() { testInvalid("{{int, any}, (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_12899() { testInvalid("{{int, any}, (any & any)}","{!int, {int, any}}"); }
		@Test public void test_12900() { testValid("{{int, any}, (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_12901() { testInvalid("{{int, any}, (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_12902() { testInvalid("{{int, any}, (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_12903() { testInvalid("{{int, any}, (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_12904() { testValid("{{int, any}, (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_12905() { testInvalid("{{int, any}, (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_12906() { testInvalid("{{int, any}, (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_12907() { testInvalid("{{int, any}, (any & any)}","{!int, {int, int}}"); }
		@Test public void test_12908() { testValid("{{int, any}, (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_12909() { testInvalid("{{int, any}, (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_12910() { testInvalid("{{int, any}, (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_12911() { testInvalid("{{int, any}, (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_12912() { testInvalid("{{int, any}, (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_12913() { testValid("{{int, any}, (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_12914() { testInvalid("{{int, any}, (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_12915() { testInvalid("{{int, any}, (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_12916() { testInvalid("{{int, any}, (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_12917() { testInvalid("{{int, any}, (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_12918() { testInvalid("{{int, any}, (any & any)}","{!int, (int | any)}"); }
		@Test public void test_12919() { testValid("{{int, any}, (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_12920() { testInvalid("{{int, any}, (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_12921() { testInvalid("{{int, any}, (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_12922() { testInvalid("{{int, any}, (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_12923() { testInvalid("{{int, any}, (any & any)}","{!int, (any | int)}"); }
		@Test public void test_12924() { testInvalid("{{int, any}, (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_12925() { testInvalid("{{int, any}, (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_12926() { testInvalid("{{int, any}, (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_12927() { testInvalid("{{int, any}, (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_12928() { testInvalid("{{int, any}, (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_12929() { testValid("{{int, any}, (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_12930() { testInvalid("{{int, any}, (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_12931() { testValid("{{int, any}, (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_12932() { testInvalid("{{int, any}, (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_12933() { testInvalid("{{int, any}, (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_12934() { testInvalid("{{int, any}, (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_12935() { testInvalid("{{int, any}, (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_12936() { testInvalid("{{int, any}, (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_12937() { testInvalid("{{int, any}, (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_12938() { testInvalid("{{int, any}, (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_12939() { testValid("{{int, any}, (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_12940() { testInvalid("{{int, any}, (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_12941() { testInvalid("{{int, any}, (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_12942() { testInvalid("{{int, any}, (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_12943() { testInvalid("{{int, any}, (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_12944() { testValid("{{int, any}, (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_12945() { testInvalid("{{int, any}, (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_12946() { testInvalid("{{int, any}, (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_12947() { testInvalid("{{int, any}, (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_12948() { testInvalid("{{int, any}, (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_12949() { testInvalid("{{int, any}, (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_12950() { testInvalid("{{int, any}, (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_12951() { testInvalid("{{int, any}, (any & any)}","(!int | {any})"); }
		@Test public void test_12952() { testInvalid("{{int, any}, (any & any)}","({any, any} | {any})"); }
		@Test public void test_12953() { testInvalid("{{int, any}, (any & any)}","((any | any) | {any})"); }
		@Test public void test_12954() { testInvalid("{{int, any}, (any & any)}","((int | any) | {any})"); }
		@Test public void test_12955() { testInvalid("{{int, any}, (any & any)}","((any & any) | {any})"); }
		@Test public void test_12956() { testInvalid("{{int, any}, (any & any)}","((int & any) | {any})"); }
		@Test public void test_12957() { testInvalid("{{int, any}, (any & any)}","((any & int) | {any})"); }
		@Test public void test_12958() { testInvalid("{{int, any}, (any & any)}","({int} | {int})"); }
		@Test public void test_12959() { testInvalid("{{int, any}, (any & any)}","(!any | {int})"); }
		@Test public void test_12960() { testInvalid("{{int, any}, (any & any)}","(!int | {int})"); }
		@Test public void test_12961() { testInvalid("{{int, any}, (any & any)}","({any, int} | {int})"); }
		@Test public void test_12962() { testInvalid("{{int, any}, (any & any)}","((int & any) | {int})"); }
		@Test public void test_12963() { testInvalid("{{int, any}, (any & any)}","((any & int) | {int})"); }
		@Test public void test_12964() { testInvalid("{{int, any}, (any & any)}","((int & int) | {int})"); }
		@Test public void test_12965() { testInvalid("{{int, any}, (any & any)}","({any} | !any)"); }
		@Test public void test_12966() { testInvalid("{{int, any}, (any & any)}","({int} | !any)"); }
		@Test public void test_12967() { testInvalid("{{int, any}, (any & any)}","({any, any} | !any)"); }
		@Test public void test_12968() { testInvalid("{{int, any}, (any & any)}","({int, int} | !any)"); }
		@Test public void test_12969() { testInvalid("{{int, any}, (any & any)}","((any | any) | !any)"); }
		@Test public void test_12970() { testInvalid("{{int, any}, (any & any)}","((int | any) | !any)"); }
		@Test public void test_12971() { testInvalid("{{int, any}, (any & any)}","((int | int) | !any)"); }
		@Test public void test_12972() { testInvalid("{{int, any}, (any & any)}","((int & int) | !any)"); }
		@Test public void test_12973() { testInvalid("{{int, any}, (any & any)}","(!int | !int)"); }
		@Test public void test_12974() { testInvalid("{{int, any}, (any & any)}","({any, any} | !int)"); }
		@Test public void test_12975() { testInvalid("{{int, any}, (any & any)}","({int, int} | !int)"); }
		@Test public void test_12976() { testInvalid("{{int, any}, (any & any)}","((int | any) | !int)"); }
		@Test public void test_12977() { testInvalid("{{int, any}, (any & any)}","((any | int) | !int)"); }
		@Test public void test_12978() { testInvalid("{{int, any}, (any & any)}","((any & int) | !int)"); }
		@Test public void test_12979() { testInvalid("{{int, any}, (any & any)}","((int & int) | !int)"); }
		@Test public void test_12980() { testInvalid("{{int, any}, (any & any)}","({int} | {any, any})"); }
		@Test public void test_12981() { testInvalid("{{int, any}, (any & any)}","(!any | {any, any})"); }
		@Test public void test_12982() { testInvalid("{{int, any}, (any & any)}","(!int | {any, any})"); }
		@Test public void test_12983() { testInvalid("{{int, any}, (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_12984() { testInvalid("{{int, any}, (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_12985() { testInvalid("{{int, any}, (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_12986() { testInvalid("{{int, any}, (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_12987() { testInvalid("{{int, any}, (any & any)}","(!int | {int, any})"); }
		@Test public void test_12988() { testInvalid("{{int, any}, (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_12989() { testInvalid("{{int, any}, (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_12990() { testInvalid("{{int, any}, (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_12991() { testInvalid("{{int, any}, (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_12992() { testInvalid("{{int, any}, (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_12993() { testInvalid("{{int, any}, (any & any)}","({any} | {any, int})"); }
		@Test public void test_12994() { testInvalid("{{int, any}, (any & any)}","(!int | {any, int})"); }
		@Test public void test_12995() { testInvalid("{{int, any}, (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_12996() { testInvalid("{{int, any}, (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_12997() { testInvalid("{{int, any}, (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_12998() { testInvalid("{{int, any}, (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_12999() { testInvalid("{{int, any}, (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_13000() { testInvalid("{{int, any}, (any & any)}","(!any | {int, int})"); }
		@Test public void test_13001() { testInvalid("{{int, any}, (any & any)}","(!int | {int, int})"); }
		@Test public void test_13002() { testInvalid("{{int, any}, (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_13003() { testInvalid("{{int, any}, (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_13004() { testInvalid("{{int, any}, (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_13005() { testInvalid("{{int, any}, (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_13006() { testInvalid("{{int, any}, (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_13007() { testInvalid("{{int, any}, (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_13008() { testInvalid("{{int, any}, (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_13009() { testInvalid("{{int, any}, (any & any)}","({any} | (any | any))"); }
		@Test public void test_13010() { testInvalid("{{int, any}, (any & any)}","(!any | (any | any))"); }
		@Test public void test_13011() { testInvalid("{{int, any}, (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_13012() { testInvalid("{{int, any}, (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_13013() { testInvalid("{{int, any}, (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_13014() { testInvalid("{{int, any}, (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_13015() { testInvalid("{{int, any}, (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_13016() { testInvalid("{{int, any}, (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_13017() { testInvalid("{{int, any}, (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_13018() { testInvalid("{{int, any}, (any & any)}","({any} | (int | any))"); }
		@Test public void test_13019() { testInvalid("{{int, any}, (any & any)}","(!int | (int | any))"); }
		@Test public void test_13020() { testInvalid("{{int, any}, (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_13021() { testInvalid("{{int, any}, (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_13022() { testInvalid("{{int, any}, (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_13023() { testInvalid("{{int, any}, (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_13024() { testInvalid("{{int, any}, (any & any)}","({any} | (any | int))"); }
		@Test public void test_13025() { testInvalid("{{int, any}, (any & any)}","({int} | (any | int))"); }
		@Test public void test_13026() { testInvalid("{{int, any}, (any & any)}","(!any | (any | int))"); }
		@Test public void test_13027() { testInvalid("{{int, any}, (any & any)}","(!int | (any | int))"); }
		@Test public void test_13028() { testInvalid("{{int, any}, (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_13029() { testInvalid("{{int, any}, (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_13030() { testInvalid("{{int, any}, (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_13031() { testInvalid("{{int, any}, (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_13032() { testInvalid("{{int, any}, (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_13033() { testInvalid("{{int, any}, (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_13034() { testInvalid("{{int, any}, (any & any)}","({int} | (int | int))"); }
		@Test public void test_13035() { testInvalid("{{int, any}, (any & any)}","(!any | (int | int))"); }
		@Test public void test_13036() { testInvalid("{{int, any}, (any & any)}","(!int | (int | int))"); }
		@Test public void test_13037() { testInvalid("{{int, any}, (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_13038() { testInvalid("{{int, any}, (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_13039() { testInvalid("{{int, any}, (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_13040() { testInvalid("{{int, any}, (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_13041() { testInvalid("{{int, any}, (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_13042() { testInvalid("{{int, any}, (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_13043() { testInvalid("{{int, any}, (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_13044() { testInvalid("{{int, any}, (any & any)}","(!any | (any & any))"); }
		@Test public void test_13045() { testInvalid("{{int, any}, (any & any)}","(!int | (any & any))"); }
		@Test public void test_13046() { testInvalid("{{int, any}, (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_13047() { testInvalid("{{int, any}, (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_13048() { testInvalid("{{int, any}, (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_13049() { testInvalid("{{int, any}, (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_13050() { testInvalid("{{int, any}, (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_13051() { testInvalid("{{int, any}, (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_13052() { testInvalid("{{int, any}, (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_13053() { testInvalid("{{int, any}, (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_13054() { testInvalid("{{int, any}, (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_13055() { testInvalid("{{int, any}, (any & any)}","({any} | (int & any))"); }
		@Test public void test_13056() { testInvalid("{{any, int}, (any & any)}","{int}"); }
		@Test public void test_13057() { testInvalid("{{any, int}, (any & any)}","{any, any}"); }
		@Test public void test_13058() { testInvalid("{{any, int}, (any & any)}","{int, int}"); }
		@Test public void test_13059() { testInvalid("{{any, int}, (any & any)}","(any | int)"); }
		@Test public void test_13060() { testInvalid("{{any, int}, (any & any)}","(int & any)"); }
		@Test public void test_13061() { testInvalid("{{any, int}, (any & any)}","{{any}}"); }
		@Test public void test_13062() { testInvalid("{{any, int}, (any & any)}","{{int, any}}"); }
		@Test public void test_13063() { testInvalid("{{any, int}, (any & any)}","{{int, int}}"); }
		@Test public void test_13064() { testInvalid("{{any, int}, (any & any)}","{(any | int)}"); }
		@Test public void test_13065() { testInvalid("{{any, int}, (any & any)}","!{int, any}"); }
		@Test public void test_13066() { testInvalid("{{any, int}, (any & any)}","!{int, int}"); }
		@Test public void test_13067() { testValid("{{any, int}, (any & any)}","!(any | any)"); }
		@Test public void test_13068() { testValid("{{any, int}, (any & any)}","!(any & any)"); }
		@Test public void test_13069() { testInvalid("{{any, int}, (any & any)}","!(int & int)"); }
		@Test public void test_13070() { testInvalid("{{any, int}, (any & any)}","{{int}, {any}}"); }
		@Test public void test_13071() { testInvalid("{{any, int}, (any & any)}","{!int, {any}}"); }
		@Test public void test_13072() { testValid("{{any, int}, (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_13073() { testInvalid("{{any, int}, (any & any)}","{(any | int), {any}}"); }
		@Test public void test_13074() { testInvalid("{{any, int}, (any & any)}","{!int, {int}}"); }
		@Test public void test_13075() { testInvalid("{{any, int}, (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_13076() { testInvalid("{{any, int}, (any & any)}","{(any | any), {int}}"); }
		@Test public void test_13077() { testInvalid("{{any, int}, (any & any)}","{(any & any), {int}}"); }
		@Test public void test_13078() { testInvalid("{{any, int}, (any & any)}","{(any & int), {int}}"); }
		@Test public void test_13079() { testInvalid("{{any, int}, (any & any)}","{{any, any}, !int}"); }
		@Test public void test_13080() { testValid("{{any, int}, (any & any)}","{{any, int}, !int}"); }
		@Test public void test_13081() { testInvalid("{{any, int}, (any & any)}","{(any | any), !int}"); }
		@Test public void test_13082() { testInvalid("{{any, int}, (any & any)}","{(int | any), !int}"); }
		@Test public void test_13083() { testInvalid("{{any, int}, (any & any)}","{(any & any), !int}"); }
		@Test public void test_13084() { testInvalid("{{any, int}, (any & any)}","{(int & any), !int}"); }
		@Test public void test_13085() { testInvalid("{{any, int}, (any & any)}","{(int & int), !int}"); }
		@Test public void test_13086() { testInvalid("{{any, int}, (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_13087() { testInvalid("{{any, int}, (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_13088() { testValid("{{any, int}, (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_13089() { testInvalid("{{any, int}, (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_13090() { testInvalid("{{any, int}, (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_13091() { testInvalid("{{any, int}, (any & any)}","{!int, {int, any}}"); }
		@Test public void test_13092() { testInvalid("{{any, int}, (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_13093() { testValid("{{any, int}, (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_13094() { testInvalid("{{any, int}, (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_13095() { testInvalid("{{any, int}, (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_13096() { testValid("{{any, int}, (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_13097() { testInvalid("{{any, int}, (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_13098() { testInvalid("{{any, int}, (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_13099() { testInvalid("{{any, int}, (any & any)}","{!int, {int, int}}"); }
		@Test public void test_13100() { testValid("{{any, int}, (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_13101() { testInvalid("{{any, int}, (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_13102() { testInvalid("{{any, int}, (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_13103() { testInvalid("{{any, int}, (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_13104() { testInvalid("{{any, int}, (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_13105() { testInvalid("{{any, int}, (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_13106() { testValid("{{any, int}, (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_13107() { testInvalid("{{any, int}, (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_13108() { testInvalid("{{any, int}, (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_13109() { testInvalid("{{any, int}, (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_13110() { testInvalid("{{any, int}, (any & any)}","{!int, (int | any)}"); }
		@Test public void test_13111() { testValid("{{any, int}, (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_13112() { testInvalid("{{any, int}, (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_13113() { testInvalid("{{any, int}, (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_13114() { testInvalid("{{any, int}, (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_13115() { testInvalid("{{any, int}, (any & any)}","{!int, (any | int)}"); }
		@Test public void test_13116() { testInvalid("{{any, int}, (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_13117() { testInvalid("{{any, int}, (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_13118() { testInvalid("{{any, int}, (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_13119() { testInvalid("{{any, int}, (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_13120() { testInvalid("{{any, int}, (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_13121() { testValid("{{any, int}, (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_13122() { testInvalid("{{any, int}, (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_13123() { testInvalid("{{any, int}, (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_13124() { testValid("{{any, int}, (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_13125() { testInvalid("{{any, int}, (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_13126() { testInvalid("{{any, int}, (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_13127() { testInvalid("{{any, int}, (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_13128() { testInvalid("{{any, int}, (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_13129() { testInvalid("{{any, int}, (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_13130() { testInvalid("{{any, int}, (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_13131() { testInvalid("{{any, int}, (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_13132() { testInvalid("{{any, int}, (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_13133() { testInvalid("{{any, int}, (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_13134() { testInvalid("{{any, int}, (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_13135() { testInvalid("{{any, int}, (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_13136() { testInvalid("{{any, int}, (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_13137() { testInvalid("{{any, int}, (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_13138() { testValid("{{any, int}, (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_13139() { testInvalid("{{any, int}, (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_13140() { testInvalid("{{any, int}, (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_13141() { testInvalid("{{any, int}, (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_13142() { testInvalid("{{any, int}, (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_13143() { testInvalid("{{any, int}, (any & any)}","(!int | {any})"); }
		@Test public void test_13144() { testInvalid("{{any, int}, (any & any)}","({any, any} | {any})"); }
		@Test public void test_13145() { testInvalid("{{any, int}, (any & any)}","((any | any) | {any})"); }
		@Test public void test_13146() { testInvalid("{{any, int}, (any & any)}","((int | any) | {any})"); }
		@Test public void test_13147() { testInvalid("{{any, int}, (any & any)}","((any & any) | {any})"); }
		@Test public void test_13148() { testInvalid("{{any, int}, (any & any)}","((int & any) | {any})"); }
		@Test public void test_13149() { testInvalid("{{any, int}, (any & any)}","((any & int) | {any})"); }
		@Test public void test_13150() { testInvalid("{{any, int}, (any & any)}","({int} | {int})"); }
		@Test public void test_13151() { testInvalid("{{any, int}, (any & any)}","(!any | {int})"); }
		@Test public void test_13152() { testInvalid("{{any, int}, (any & any)}","(!int | {int})"); }
		@Test public void test_13153() { testInvalid("{{any, int}, (any & any)}","({any, int} | {int})"); }
		@Test public void test_13154() { testInvalid("{{any, int}, (any & any)}","((int & any) | {int})"); }
		@Test public void test_13155() { testInvalid("{{any, int}, (any & any)}","((any & int) | {int})"); }
		@Test public void test_13156() { testInvalid("{{any, int}, (any & any)}","((int & int) | {int})"); }
		@Test public void test_13157() { testInvalid("{{any, int}, (any & any)}","({any} | !any)"); }
		@Test public void test_13158() { testInvalid("{{any, int}, (any & any)}","({int} | !any)"); }
		@Test public void test_13159() { testInvalid("{{any, int}, (any & any)}","({any, any} | !any)"); }
		@Test public void test_13160() { testInvalid("{{any, int}, (any & any)}","({int, int} | !any)"); }
		@Test public void test_13161() { testInvalid("{{any, int}, (any & any)}","((any | any) | !any)"); }
		@Test public void test_13162() { testInvalid("{{any, int}, (any & any)}","((int | any) | !any)"); }
		@Test public void test_13163() { testInvalid("{{any, int}, (any & any)}","((int | int) | !any)"); }
		@Test public void test_13164() { testInvalid("{{any, int}, (any & any)}","((int & int) | !any)"); }
		@Test public void test_13165() { testInvalid("{{any, int}, (any & any)}","(!int | !int)"); }
		@Test public void test_13166() { testInvalid("{{any, int}, (any & any)}","({any, any} | !int)"); }
		@Test public void test_13167() { testInvalid("{{any, int}, (any & any)}","({int, int} | !int)"); }
		@Test public void test_13168() { testInvalid("{{any, int}, (any & any)}","((int | any) | !int)"); }
		@Test public void test_13169() { testInvalid("{{any, int}, (any & any)}","((any | int) | !int)"); }
		@Test public void test_13170() { testInvalid("{{any, int}, (any & any)}","((any & int) | !int)"); }
		@Test public void test_13171() { testInvalid("{{any, int}, (any & any)}","((int & int) | !int)"); }
		@Test public void test_13172() { testInvalid("{{any, int}, (any & any)}","({int} | {any, any})"); }
		@Test public void test_13173() { testInvalid("{{any, int}, (any & any)}","(!any | {any, any})"); }
		@Test public void test_13174() { testInvalid("{{any, int}, (any & any)}","(!int | {any, any})"); }
		@Test public void test_13175() { testInvalid("{{any, int}, (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_13176() { testInvalid("{{any, int}, (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_13177() { testInvalid("{{any, int}, (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_13178() { testInvalid("{{any, int}, (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_13179() { testInvalid("{{any, int}, (any & any)}","(!int | {int, any})"); }
		@Test public void test_13180() { testInvalid("{{any, int}, (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_13181() { testInvalid("{{any, int}, (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_13182() { testInvalid("{{any, int}, (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_13183() { testInvalid("{{any, int}, (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_13184() { testInvalid("{{any, int}, (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_13185() { testInvalid("{{any, int}, (any & any)}","({any} | {any, int})"); }
		@Test public void test_13186() { testInvalid("{{any, int}, (any & any)}","(!int | {any, int})"); }
		@Test public void test_13187() { testInvalid("{{any, int}, (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_13188() { testInvalid("{{any, int}, (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_13189() { testInvalid("{{any, int}, (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_13190() { testInvalid("{{any, int}, (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_13191() { testInvalid("{{any, int}, (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_13192() { testInvalid("{{any, int}, (any & any)}","(!any | {int, int})"); }
		@Test public void test_13193() { testInvalid("{{any, int}, (any & any)}","(!int | {int, int})"); }
		@Test public void test_13194() { testInvalid("{{any, int}, (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_13195() { testInvalid("{{any, int}, (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_13196() { testInvalid("{{any, int}, (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_13197() { testInvalid("{{any, int}, (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_13198() { testInvalid("{{any, int}, (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_13199() { testInvalid("{{any, int}, (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_13200() { testInvalid("{{any, int}, (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_13201() { testInvalid("{{any, int}, (any & any)}","({any} | (any | any))"); }
		@Test public void test_13202() { testInvalid("{{any, int}, (any & any)}","(!any | (any | any))"); }
		@Test public void test_13203() { testInvalid("{{any, int}, (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_13204() { testInvalid("{{any, int}, (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_13205() { testInvalid("{{any, int}, (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_13206() { testInvalid("{{any, int}, (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_13207() { testInvalid("{{any, int}, (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_13208() { testInvalid("{{any, int}, (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_13209() { testInvalid("{{any, int}, (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_13210() { testInvalid("{{any, int}, (any & any)}","({any} | (int | any))"); }
		@Test public void test_13211() { testInvalid("{{any, int}, (any & any)}","(!int | (int | any))"); }
		@Test public void test_13212() { testInvalid("{{any, int}, (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_13213() { testInvalid("{{any, int}, (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_13214() { testInvalid("{{any, int}, (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_13215() { testInvalid("{{any, int}, (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_13216() { testInvalid("{{any, int}, (any & any)}","({any} | (any | int))"); }
		@Test public void test_13217() { testInvalid("{{any, int}, (any & any)}","({int} | (any | int))"); }
		@Test public void test_13218() { testInvalid("{{any, int}, (any & any)}","(!any | (any | int))"); }
		@Test public void test_13219() { testInvalid("{{any, int}, (any & any)}","(!int | (any | int))"); }
		@Test public void test_13220() { testInvalid("{{any, int}, (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_13221() { testInvalid("{{any, int}, (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_13222() { testInvalid("{{any, int}, (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_13223() { testInvalid("{{any, int}, (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_13224() { testInvalid("{{any, int}, (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_13225() { testInvalid("{{any, int}, (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_13226() { testInvalid("{{any, int}, (any & any)}","({int} | (int | int))"); }
		@Test public void test_13227() { testInvalid("{{any, int}, (any & any)}","(!any | (int | int))"); }
		@Test public void test_13228() { testInvalid("{{any, int}, (any & any)}","(!int | (int | int))"); }
		@Test public void test_13229() { testInvalid("{{any, int}, (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_13230() { testInvalid("{{any, int}, (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_13231() { testInvalid("{{any, int}, (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_13232() { testInvalid("{{any, int}, (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_13233() { testInvalid("{{any, int}, (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_13234() { testInvalid("{{any, int}, (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_13235() { testInvalid("{{any, int}, (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_13236() { testInvalid("{{any, int}, (any & any)}","(!any | (any & any))"); }
		@Test public void test_13237() { testInvalid("{{any, int}, (any & any)}","(!int | (any & any))"); }
		@Test public void test_13238() { testInvalid("{{any, int}, (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_13239() { testInvalid("{{any, int}, (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_13240() { testInvalid("{{any, int}, (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_13241() { testInvalid("{{any, int}, (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_13242() { testInvalid("{{any, int}, (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_13243() { testInvalid("{{any, int}, (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_13244() { testInvalid("{{any, int}, (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_13245() { testInvalid("{{any, int}, (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_13246() { testInvalid("{{any, int}, (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_13247() { testInvalid("{{any, int}, (any & any)}","({any} | (int & any))"); }
		@Test public void test_13248() { testInvalid("{(int | any), (any & any)}","{int}"); }
		@Test public void test_13249() { testValid("{(int | any), (any & any)}","{any, any}"); }
		@Test public void test_13250() { testValid("{(int | any), (any & any)}","{int, int}"); }
		@Test public void test_13251() { testInvalid("{(int | any), (any & any)}","(any | int)"); }
		@Test public void test_13252() { testInvalid("{(int | any), (any & any)}","(int & any)"); }
		@Test public void test_13253() { testInvalid("{(int | any), (any & any)}","{{any}}"); }
		@Test public void test_13254() { testInvalid("{(int | any), (any & any)}","{{int, any}}"); }
		@Test public void test_13255() { testInvalid("{(int | any), (any & any)}","{{int, int}}"); }
		@Test public void test_13256() { testInvalid("{(int | any), (any & any)}","{(any | int)}"); }
		@Test public void test_13257() { testInvalid("{(int | any), (any & any)}","!{int, any}"); }
		@Test public void test_13258() { testInvalid("{(int | any), (any & any)}","!{int, int}"); }
		@Test public void test_13259() { testValid("{(int | any), (any & any)}","!(any | any)"); }
		@Test public void test_13260() { testValid("{(int | any), (any & any)}","!(any & any)"); }
		@Test public void test_13261() { testInvalid("{(int | any), (any & any)}","!(int & int)"); }
		@Test public void test_13262() { testValid("{(int | any), (any & any)}","{{int}, {any}}"); }
		@Test public void test_13263() { testValid("{(int | any), (any & any)}","{!int, {any}}"); }
		@Test public void test_13264() { testValid("{(int | any), (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_13265() { testValid("{(int | any), (any & any)}","{(any | int), {any}}"); }
		@Test public void test_13266() { testValid("{(int | any), (any & any)}","{!int, {int}}"); }
		@Test public void test_13267() { testValid("{(int | any), (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_13268() { testValid("{(int | any), (any & any)}","{(any | any), {int}}"); }
		@Test public void test_13269() { testValid("{(int | any), (any & any)}","{(any & any), {int}}"); }
		@Test public void test_13270() { testValid("{(int | any), (any & any)}","{(any & int), {int}}"); }
		@Test public void test_13271() { testValid("{(int | any), (any & any)}","{{any, any}, !int}"); }
		@Test public void test_13272() { testValid("{(int | any), (any & any)}","{{any, int}, !int}"); }
		@Test public void test_13273() { testValid("{(int | any), (any & any)}","{(any | any), !int}"); }
		@Test public void test_13274() { testValid("{(int | any), (any & any)}","{(int | any), !int}"); }
		@Test public void test_13275() { testValid("{(int | any), (any & any)}","{(any & any), !int}"); }
		@Test public void test_13276() { testValid("{(int | any), (any & any)}","{(int & any), !int}"); }
		@Test public void test_13277() { testValid("{(int | any), (any & any)}","{(int & int), !int}"); }
		@Test public void test_13278() { testValid("{(int | any), (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_13279() { testValid("{(int | any), (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_13280() { testValid("{(int | any), (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_13281() { testValid("{(int | any), (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_13282() { testValid("{(int | any), (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_13283() { testValid("{(int | any), (any & any)}","{!int, {int, any}}"); }
		@Test public void test_13284() { testValid("{(int | any), (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_13285() { testValid("{(int | any), (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_13286() { testValid("{(int | any), (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_13287() { testValid("{(int | any), (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_13288() { testValid("{(int | any), (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_13289() { testValid("{(int | any), (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_13290() { testValid("{(int | any), (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_13291() { testValid("{(int | any), (any & any)}","{!int, {int, int}}"); }
		@Test public void test_13292() { testValid("{(int | any), (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_13293() { testValid("{(int | any), (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_13294() { testValid("{(int | any), (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_13295() { testValid("{(int | any), (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_13296() { testValid("{(int | any), (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_13297() { testValid("{(int | any), (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_13298() { testValid("{(int | any), (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_13299() { testValid("{(int | any), (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_13300() { testValid("{(int | any), (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_13301() { testValid("{(int | any), (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_13302() { testValid("{(int | any), (any & any)}","{!int, (int | any)}"); }
		@Test public void test_13303() { testValid("{(int | any), (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_13304() { testValid("{(int | any), (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_13305() { testValid("{(int | any), (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_13306() { testValid("{(int | any), (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_13307() { testValid("{(int | any), (any & any)}","{!int, (any | int)}"); }
		@Test public void test_13308() { testValid("{(int | any), (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_13309() { testValid("{(int | any), (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_13310() { testValid("{(int | any), (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_13311() { testValid("{(int | any), (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_13312() { testValid("{(int | any), (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_13313() { testValid("{(int | any), (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_13314() { testValid("{(int | any), (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_13315() { testValid("{(int | any), (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_13316() { testValid("{(int | any), (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_13317() { testValid("{(int | any), (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_13318() { testValid("{(int | any), (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_13319() { testValid("{(int | any), (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_13320() { testValid("{(int | any), (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_13321() { testValid("{(int | any), (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_13322() { testValid("{(int | any), (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_13323() { testValid("{(int | any), (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_13324() { testValid("{(int | any), (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_13325() { testValid("{(int | any), (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_13326() { testValid("{(int | any), (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_13327() { testValid("{(int | any), (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_13328() { testValid("{(int | any), (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_13329() { testValid("{(int | any), (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_13330() { testValid("{(int | any), (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_13331() { testValid("{(int | any), (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_13332() { testValid("{(int | any), (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_13333() { testValid("{(int | any), (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_13334() { testValid("{(int | any), (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_13335() { testInvalid("{(int | any), (any & any)}","(!int | {any})"); }
		@Test public void test_13336() { testInvalid("{(int | any), (any & any)}","({any, any} | {any})"); }
		@Test public void test_13337() { testInvalid("{(int | any), (any & any)}","((any | any) | {any})"); }
		@Test public void test_13338() { testInvalid("{(int | any), (any & any)}","((int | any) | {any})"); }
		@Test public void test_13339() { testInvalid("{(int | any), (any & any)}","((any & any) | {any})"); }
		@Test public void test_13340() { testInvalid("{(int | any), (any & any)}","((int & any) | {any})"); }
		@Test public void test_13341() { testInvalid("{(int | any), (any & any)}","((any & int) | {any})"); }
		@Test public void test_13342() { testInvalid("{(int | any), (any & any)}","({int} | {int})"); }
		@Test public void test_13343() { testInvalid("{(int | any), (any & any)}","(!any | {int})"); }
		@Test public void test_13344() { testInvalid("{(int | any), (any & any)}","(!int | {int})"); }
		@Test public void test_13345() { testInvalid("{(int | any), (any & any)}","({any, int} | {int})"); }
		@Test public void test_13346() { testInvalid("{(int | any), (any & any)}","((int & any) | {int})"); }
		@Test public void test_13347() { testInvalid("{(int | any), (any & any)}","((any & int) | {int})"); }
		@Test public void test_13348() { testInvalid("{(int | any), (any & any)}","((int & int) | {int})"); }
		@Test public void test_13349() { testInvalid("{(int | any), (any & any)}","({any} | !any)"); }
		@Test public void test_13350() { testInvalid("{(int | any), (any & any)}","({int} | !any)"); }
		@Test public void test_13351() { testValid("{(int | any), (any & any)}","({any, any} | !any)"); }
		@Test public void test_13352() { testValid("{(int | any), (any & any)}","({int, int} | !any)"); }
		@Test public void test_13353() { testInvalid("{(int | any), (any & any)}","((any | any) | !any)"); }
		@Test public void test_13354() { testInvalid("{(int | any), (any & any)}","((int | any) | !any)"); }
		@Test public void test_13355() { testInvalid("{(int | any), (any & any)}","((int | int) | !any)"); }
		@Test public void test_13356() { testInvalid("{(int | any), (any & any)}","((int & int) | !any)"); }
		@Test public void test_13357() { testInvalid("{(int | any), (any & any)}","(!int | !int)"); }
		@Test public void test_13358() { testInvalid("{(int | any), (any & any)}","({any, any} | !int)"); }
		@Test public void test_13359() { testInvalid("{(int | any), (any & any)}","({int, int} | !int)"); }
		@Test public void test_13360() { testInvalid("{(int | any), (any & any)}","((int | any) | !int)"); }
		@Test public void test_13361() { testInvalid("{(int | any), (any & any)}","((any | int) | !int)"); }
		@Test public void test_13362() { testInvalid("{(int | any), (any & any)}","((any & int) | !int)"); }
		@Test public void test_13363() { testInvalid("{(int | any), (any & any)}","((int & int) | !int)"); }
		@Test public void test_13364() { testInvalid("{(int | any), (any & any)}","({int} | {any, any})"); }
		@Test public void test_13365() { testValid("{(int | any), (any & any)}","(!any | {any, any})"); }
		@Test public void test_13366() { testInvalid("{(int | any), (any & any)}","(!int | {any, any})"); }
		@Test public void test_13367() { testValid("{(int | any), (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_13368() { testInvalid("{(int | any), (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_13369() { testInvalid("{(int | any), (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_13370() { testInvalid("{(int | any), (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_13371() { testInvalid("{(int | any), (any & any)}","(!int | {int, any})"); }
		@Test public void test_13372() { testValid("{(int | any), (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_13373() { testInvalid("{(int | any), (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_13374() { testInvalid("{(int | any), (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_13375() { testInvalid("{(int | any), (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_13376() { testInvalid("{(int | any), (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_13377() { testInvalid("{(int | any), (any & any)}","({any} | {any, int})"); }
		@Test public void test_13378() { testInvalid("{(int | any), (any & any)}","(!int | {any, int})"); }
		@Test public void test_13379() { testValid("{(int | any), (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_13380() { testInvalid("{(int | any), (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_13381() { testInvalid("{(int | any), (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_13382() { testInvalid("{(int | any), (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_13383() { testInvalid("{(int | any), (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_13384() { testValid("{(int | any), (any & any)}","(!any | {int, int})"); }
		@Test public void test_13385() { testInvalid("{(int | any), (any & any)}","(!int | {int, int})"); }
		@Test public void test_13386() { testValid("{(int | any), (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_13387() { testValid("{(int | any), (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_13388() { testInvalid("{(int | any), (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_13389() { testInvalid("{(int | any), (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_13390() { testInvalid("{(int | any), (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_13391() { testInvalid("{(int | any), (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_13392() { testInvalid("{(int | any), (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_13393() { testInvalid("{(int | any), (any & any)}","({any} | (any | any))"); }
		@Test public void test_13394() { testInvalid("{(int | any), (any & any)}","(!any | (any | any))"); }
		@Test public void test_13395() { testInvalid("{(int | any), (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_13396() { testInvalid("{(int | any), (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_13397() { testInvalid("{(int | any), (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_13398() { testInvalid("{(int | any), (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_13399() { testInvalid("{(int | any), (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_13400() { testInvalid("{(int | any), (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_13401() { testInvalid("{(int | any), (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_13402() { testInvalid("{(int | any), (any & any)}","({any} | (int | any))"); }
		@Test public void test_13403() { testInvalid("{(int | any), (any & any)}","(!int | (int | any))"); }
		@Test public void test_13404() { testInvalid("{(int | any), (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_13405() { testInvalid("{(int | any), (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_13406() { testInvalid("{(int | any), (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_13407() { testInvalid("{(int | any), (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_13408() { testInvalid("{(int | any), (any & any)}","({any} | (any | int))"); }
		@Test public void test_13409() { testInvalid("{(int | any), (any & any)}","({int} | (any | int))"); }
		@Test public void test_13410() { testInvalid("{(int | any), (any & any)}","(!any | (any | int))"); }
		@Test public void test_13411() { testInvalid("{(int | any), (any & any)}","(!int | (any | int))"); }
		@Test public void test_13412() { testInvalid("{(int | any), (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_13413() { testInvalid("{(int | any), (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_13414() { testInvalid("{(int | any), (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_13415() { testInvalid("{(int | any), (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_13416() { testInvalid("{(int | any), (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_13417() { testInvalid("{(int | any), (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_13418() { testInvalid("{(int | any), (any & any)}","({int} | (int | int))"); }
		@Test public void test_13419() { testInvalid("{(int | any), (any & any)}","(!any | (int | int))"); }
		@Test public void test_13420() { testInvalid("{(int | any), (any & any)}","(!int | (int | int))"); }
		@Test public void test_13421() { testInvalid("{(int | any), (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_13422() { testInvalid("{(int | any), (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_13423() { testInvalid("{(int | any), (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_13424() { testInvalid("{(int | any), (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_13425() { testInvalid("{(int | any), (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_13426() { testInvalid("{(int | any), (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_13427() { testInvalid("{(int | any), (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_13428() { testInvalid("{(int | any), (any & any)}","(!any | (any & any))"); }
		@Test public void test_13429() { testInvalid("{(int | any), (any & any)}","(!int | (any & any))"); }
		@Test public void test_13430() { testInvalid("{(int | any), (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_13431() { testInvalid("{(int | any), (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_13432() { testInvalid("{(int | any), (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_13433() { testInvalid("{(int | any), (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_13434() { testInvalid("{(int | any), (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_13435() { testInvalid("{(int | any), (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_13436() { testInvalid("{(int | any), (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_13437() { testInvalid("{(int | any), (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_13438() { testInvalid("{(int | any), (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_13439() { testInvalid("{(int | any), (any & any)}","({any} | (int & any))"); }
		@Test public void test_13440() { testInvalid("{(any & any), (any & any)}","{int}"); }
		@Test public void test_13441() { testValid("{(any & any), (any & any)}","{any, any}"); }
		@Test public void test_13442() { testValid("{(any & any), (any & any)}","{int, int}"); }
		@Test public void test_13443() { testInvalid("{(any & any), (any & any)}","(any | int)"); }
		@Test public void test_13444() { testInvalid("{(any & any), (any & any)}","(int & any)"); }
		@Test public void test_13445() { testInvalid("{(any & any), (any & any)}","{{any}}"); }
		@Test public void test_13446() { testInvalid("{(any & any), (any & any)}","{{int, any}}"); }
		@Test public void test_13447() { testInvalid("{(any & any), (any & any)}","{{int, int}}"); }
		@Test public void test_13448() { testInvalid("{(any & any), (any & any)}","{(any | int)}"); }
		@Test public void test_13449() { testInvalid("{(any & any), (any & any)}","!{int, any}"); }
		@Test public void test_13450() { testInvalid("{(any & any), (any & any)}","!{int, int}"); }
		@Test public void test_13451() { testValid("{(any & any), (any & any)}","!(any | any)"); }
		@Test public void test_13452() { testValid("{(any & any), (any & any)}","!(any & any)"); }
		@Test public void test_13453() { testInvalid("{(any & any), (any & any)}","!(int & int)"); }
		@Test public void test_13454() { testValid("{(any & any), (any & any)}","{{int}, {any}}"); }
		@Test public void test_13455() { testValid("{(any & any), (any & any)}","{!int, {any}}"); }
		@Test public void test_13456() { testValid("{(any & any), (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_13457() { testValid("{(any & any), (any & any)}","{(any | int), {any}}"); }
		@Test public void test_13458() { testValid("{(any & any), (any & any)}","{!int, {int}}"); }
		@Test public void test_13459() { testValid("{(any & any), (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_13460() { testValid("{(any & any), (any & any)}","{(any | any), {int}}"); }
		@Test public void test_13461() { testValid("{(any & any), (any & any)}","{(any & any), {int}}"); }
		@Test public void test_13462() { testValid("{(any & any), (any & any)}","{(any & int), {int}}"); }
		@Test public void test_13463() { testValid("{(any & any), (any & any)}","{{any, any}, !int}"); }
		@Test public void test_13464() { testValid("{(any & any), (any & any)}","{{any, int}, !int}"); }
		@Test public void test_13465() { testValid("{(any & any), (any & any)}","{(any | any), !int}"); }
		@Test public void test_13466() { testValid("{(any & any), (any & any)}","{(int | any), !int}"); }
		@Test public void test_13467() { testValid("{(any & any), (any & any)}","{(any & any), !int}"); }
		@Test public void test_13468() { testValid("{(any & any), (any & any)}","{(int & any), !int}"); }
		@Test public void test_13469() { testValid("{(any & any), (any & any)}","{(int & int), !int}"); }
		@Test public void test_13470() { testValid("{(any & any), (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_13471() { testValid("{(any & any), (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_13472() { testValid("{(any & any), (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_13473() { testValid("{(any & any), (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_13474() { testValid("{(any & any), (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_13475() { testValid("{(any & any), (any & any)}","{!int, {int, any}}"); }
		@Test public void test_13476() { testValid("{(any & any), (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_13477() { testValid("{(any & any), (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_13478() { testValid("{(any & any), (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_13479() { testValid("{(any & any), (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_13480() { testValid("{(any & any), (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_13481() { testValid("{(any & any), (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_13482() { testValid("{(any & any), (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_13483() { testValid("{(any & any), (any & any)}","{!int, {int, int}}"); }
		@Test public void test_13484() { testValid("{(any & any), (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_13485() { testValid("{(any & any), (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_13486() { testValid("{(any & any), (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_13487() { testValid("{(any & any), (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_13488() { testValid("{(any & any), (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_13489() { testValid("{(any & any), (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_13490() { testValid("{(any & any), (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_13491() { testValid("{(any & any), (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_13492() { testValid("{(any & any), (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_13493() { testValid("{(any & any), (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_13494() { testValid("{(any & any), (any & any)}","{!int, (int | any)}"); }
		@Test public void test_13495() { testValid("{(any & any), (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_13496() { testValid("{(any & any), (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_13497() { testValid("{(any & any), (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_13498() { testValid("{(any & any), (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_13499() { testValid("{(any & any), (any & any)}","{!int, (any | int)}"); }
		@Test public void test_13500() { testValid("{(any & any), (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_13501() { testValid("{(any & any), (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_13502() { testValid("{(any & any), (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_13503() { testValid("{(any & any), (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_13504() { testValid("{(any & any), (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_13505() { testValid("{(any & any), (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_13506() { testValid("{(any & any), (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_13507() { testValid("{(any & any), (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_13508() { testValid("{(any & any), (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_13509() { testValid("{(any & any), (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_13510() { testValid("{(any & any), (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_13511() { testValid("{(any & any), (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_13512() { testValid("{(any & any), (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_13513() { testValid("{(any & any), (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_13514() { testValid("{(any & any), (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_13515() { testValid("{(any & any), (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_13516() { testValid("{(any & any), (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_13517() { testValid("{(any & any), (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_13518() { testValid("{(any & any), (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_13519() { testValid("{(any & any), (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_13520() { testValid("{(any & any), (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_13521() { testValid("{(any & any), (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_13522() { testValid("{(any & any), (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_13523() { testValid("{(any & any), (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_13524() { testValid("{(any & any), (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_13525() { testValid("{(any & any), (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_13526() { testValid("{(any & any), (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_13527() { testInvalid("{(any & any), (any & any)}","(!int | {any})"); }
		@Test public void test_13528() { testInvalid("{(any & any), (any & any)}","({any, any} | {any})"); }
		@Test public void test_13529() { testInvalid("{(any & any), (any & any)}","((any | any) | {any})"); }
		@Test public void test_13530() { testInvalid("{(any & any), (any & any)}","((int | any) | {any})"); }
		@Test public void test_13531() { testInvalid("{(any & any), (any & any)}","((any & any) | {any})"); }
		@Test public void test_13532() { testInvalid("{(any & any), (any & any)}","((int & any) | {any})"); }
		@Test public void test_13533() { testInvalid("{(any & any), (any & any)}","((any & int) | {any})"); }
		@Test public void test_13534() { testInvalid("{(any & any), (any & any)}","({int} | {int})"); }
		@Test public void test_13535() { testInvalid("{(any & any), (any & any)}","(!any | {int})"); }
		@Test public void test_13536() { testInvalid("{(any & any), (any & any)}","(!int | {int})"); }
		@Test public void test_13537() { testInvalid("{(any & any), (any & any)}","({any, int} | {int})"); }
		@Test public void test_13538() { testInvalid("{(any & any), (any & any)}","((int & any) | {int})"); }
		@Test public void test_13539() { testInvalid("{(any & any), (any & any)}","((any & int) | {int})"); }
		@Test public void test_13540() { testInvalid("{(any & any), (any & any)}","((int & int) | {int})"); }
		@Test public void test_13541() { testInvalid("{(any & any), (any & any)}","({any} | !any)"); }
		@Test public void test_13542() { testInvalid("{(any & any), (any & any)}","({int} | !any)"); }
		@Test public void test_13543() { testValid("{(any & any), (any & any)}","({any, any} | !any)"); }
		@Test public void test_13544() { testValid("{(any & any), (any & any)}","({int, int} | !any)"); }
		@Test public void test_13545() { testInvalid("{(any & any), (any & any)}","((any | any) | !any)"); }
		@Test public void test_13546() { testInvalid("{(any & any), (any & any)}","((int | any) | !any)"); }
		@Test public void test_13547() { testInvalid("{(any & any), (any & any)}","((int | int) | !any)"); }
		@Test public void test_13548() { testInvalid("{(any & any), (any & any)}","((int & int) | !any)"); }
		@Test public void test_13549() { testInvalid("{(any & any), (any & any)}","(!int | !int)"); }
		@Test public void test_13550() { testInvalid("{(any & any), (any & any)}","({any, any} | !int)"); }
		@Test public void test_13551() { testInvalid("{(any & any), (any & any)}","({int, int} | !int)"); }
		@Test public void test_13552() { testInvalid("{(any & any), (any & any)}","((int | any) | !int)"); }
		@Test public void test_13553() { testInvalid("{(any & any), (any & any)}","((any | int) | !int)"); }
		@Test public void test_13554() { testInvalid("{(any & any), (any & any)}","((any & int) | !int)"); }
		@Test public void test_13555() { testInvalid("{(any & any), (any & any)}","((int & int) | !int)"); }
		@Test public void test_13556() { testInvalid("{(any & any), (any & any)}","({int} | {any, any})"); }
		@Test public void test_13557() { testValid("{(any & any), (any & any)}","(!any | {any, any})"); }
		@Test public void test_13558() { testInvalid("{(any & any), (any & any)}","(!int | {any, any})"); }
		@Test public void test_13559() { testValid("{(any & any), (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_13560() { testInvalid("{(any & any), (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_13561() { testInvalid("{(any & any), (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_13562() { testInvalid("{(any & any), (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_13563() { testInvalid("{(any & any), (any & any)}","(!int | {int, any})"); }
		@Test public void test_13564() { testValid("{(any & any), (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_13565() { testInvalid("{(any & any), (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_13566() { testInvalid("{(any & any), (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_13567() { testInvalid("{(any & any), (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_13568() { testInvalid("{(any & any), (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_13569() { testInvalid("{(any & any), (any & any)}","({any} | {any, int})"); }
		@Test public void test_13570() { testInvalid("{(any & any), (any & any)}","(!int | {any, int})"); }
		@Test public void test_13571() { testValid("{(any & any), (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_13572() { testInvalid("{(any & any), (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_13573() { testInvalid("{(any & any), (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_13574() { testInvalid("{(any & any), (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_13575() { testInvalid("{(any & any), (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_13576() { testValid("{(any & any), (any & any)}","(!any | {int, int})"); }
		@Test public void test_13577() { testInvalid("{(any & any), (any & any)}","(!int | {int, int})"); }
		@Test public void test_13578() { testValid("{(any & any), (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_13579() { testValid("{(any & any), (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_13580() { testInvalid("{(any & any), (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_13581() { testInvalid("{(any & any), (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_13582() { testInvalid("{(any & any), (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_13583() { testInvalid("{(any & any), (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_13584() { testInvalid("{(any & any), (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_13585() { testInvalid("{(any & any), (any & any)}","({any} | (any | any))"); }
		@Test public void test_13586() { testInvalid("{(any & any), (any & any)}","(!any | (any | any))"); }
		@Test public void test_13587() { testInvalid("{(any & any), (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_13588() { testInvalid("{(any & any), (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_13589() { testInvalid("{(any & any), (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_13590() { testInvalid("{(any & any), (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_13591() { testInvalid("{(any & any), (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_13592() { testInvalid("{(any & any), (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_13593() { testInvalid("{(any & any), (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_13594() { testInvalid("{(any & any), (any & any)}","({any} | (int | any))"); }
		@Test public void test_13595() { testInvalid("{(any & any), (any & any)}","(!int | (int | any))"); }
		@Test public void test_13596() { testInvalid("{(any & any), (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_13597() { testInvalid("{(any & any), (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_13598() { testInvalid("{(any & any), (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_13599() { testInvalid("{(any & any), (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_13600() { testInvalid("{(any & any), (any & any)}","({any} | (any | int))"); }
		@Test public void test_13601() { testInvalid("{(any & any), (any & any)}","({int} | (any | int))"); }
		@Test public void test_13602() { testInvalid("{(any & any), (any & any)}","(!any | (any | int))"); }
		@Test public void test_13603() { testInvalid("{(any & any), (any & any)}","(!int | (any | int))"); }
		@Test public void test_13604() { testInvalid("{(any & any), (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_13605() { testInvalid("{(any & any), (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_13606() { testInvalid("{(any & any), (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_13607() { testInvalid("{(any & any), (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_13608() { testInvalid("{(any & any), (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_13609() { testInvalid("{(any & any), (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_13610() { testInvalid("{(any & any), (any & any)}","({int} | (int | int))"); }
		@Test public void test_13611() { testInvalid("{(any & any), (any & any)}","(!any | (int | int))"); }
		@Test public void test_13612() { testInvalid("{(any & any), (any & any)}","(!int | (int | int))"); }
		@Test public void test_13613() { testInvalid("{(any & any), (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_13614() { testInvalid("{(any & any), (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_13615() { testInvalid("{(any & any), (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_13616() { testInvalid("{(any & any), (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_13617() { testInvalid("{(any & any), (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_13618() { testInvalid("{(any & any), (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_13619() { testInvalid("{(any & any), (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_13620() { testInvalid("{(any & any), (any & any)}","(!any | (any & any))"); }
		@Test public void test_13621() { testInvalid("{(any & any), (any & any)}","(!int | (any & any))"); }
		@Test public void test_13622() { testInvalid("{(any & any), (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_13623() { testInvalid("{(any & any), (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_13624() { testInvalid("{(any & any), (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_13625() { testInvalid("{(any & any), (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_13626() { testInvalid("{(any & any), (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_13627() { testInvalid("{(any & any), (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_13628() { testInvalid("{(any & any), (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_13629() { testInvalid("{(any & any), (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_13630() { testInvalid("{(any & any), (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_13631() { testInvalid("{(any & any), (any & any)}","({any} | (int & any))"); }
		@Test public void test_13632() { testInvalid("{(int & any), (any & any)}","{int}"); }
		@Test public void test_13633() { testInvalid("{(int & any), (any & any)}","{any, any}"); }
		@Test public void test_13634() { testValid("{(int & any), (any & any)}","{int, int}"); }
		@Test public void test_13635() { testInvalid("{(int & any), (any & any)}","(any | int)"); }
		@Test public void test_13636() { testInvalid("{(int & any), (any & any)}","(int & any)"); }
		@Test public void test_13637() { testInvalid("{(int & any), (any & any)}","{{any}}"); }
		@Test public void test_13638() { testInvalid("{(int & any), (any & any)}","{{int, any}}"); }
		@Test public void test_13639() { testInvalid("{(int & any), (any & any)}","{{int, int}}"); }
		@Test public void test_13640() { testInvalid("{(int & any), (any & any)}","{(any | int)}"); }
		@Test public void test_13641() { testInvalid("{(int & any), (any & any)}","!{int, any}"); }
		@Test public void test_13642() { testInvalid("{(int & any), (any & any)}","!{int, int}"); }
		@Test public void test_13643() { testValid("{(int & any), (any & any)}","!(any | any)"); }
		@Test public void test_13644() { testValid("{(int & any), (any & any)}","!(any & any)"); }
		@Test public void test_13645() { testInvalid("{(int & any), (any & any)}","!(int & int)"); }
		@Test public void test_13646() { testInvalid("{(int & any), (any & any)}","{{int}, {any}}"); }
		@Test public void test_13647() { testInvalid("{(int & any), (any & any)}","{!int, {any}}"); }
		@Test public void test_13648() { testInvalid("{(int & any), (any & any)}","{{int, int}, {any}}"); }
		@Test public void test_13649() { testInvalid("{(int & any), (any & any)}","{(any | int), {any}}"); }
		@Test public void test_13650() { testInvalid("{(int & any), (any & any)}","{!int, {int}}"); }
		@Test public void test_13651() { testInvalid("{(int & any), (any & any)}","{{any, any}, {int}}"); }
		@Test public void test_13652() { testInvalid("{(int & any), (any & any)}","{(any | any), {int}}"); }
		@Test public void test_13653() { testInvalid("{(int & any), (any & any)}","{(any & any), {int}}"); }
		@Test public void test_13654() { testValid("{(int & any), (any & any)}","{(any & int), {int}}"); }
		@Test public void test_13655() { testInvalid("{(int & any), (any & any)}","{{any, any}, !int}"); }
		@Test public void test_13656() { testInvalid("{(int & any), (any & any)}","{{any, int}, !int}"); }
		@Test public void test_13657() { testInvalid("{(int & any), (any & any)}","{(any | any), !int}"); }
		@Test public void test_13658() { testInvalid("{(int & any), (any & any)}","{(int | any), !int}"); }
		@Test public void test_13659() { testInvalid("{(int & any), (any & any)}","{(any & any), !int}"); }
		@Test public void test_13660() { testValid("{(int & any), (any & any)}","{(int & any), !int}"); }
		@Test public void test_13661() { testValid("{(int & any), (any & any)}","{(int & int), !int}"); }
		@Test public void test_13662() { testInvalid("{(int & any), (any & any)}","{{any}, {any, any}}"); }
		@Test public void test_13663() { testInvalid("{(int & any), (any & any)}","{{int}, {any, any}}"); }
		@Test public void test_13664() { testInvalid("{(int & any), (any & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_13665() { testInvalid("{(int & any), (any & any)}","{(any | any), {any, any}}"); }
		@Test public void test_13666() { testInvalid("{(int & any), (any & any)}","{(any | int), {any, any}}"); }
		@Test public void test_13667() { testInvalid("{(int & any), (any & any)}","{!int, {int, any}}"); }
		@Test public void test_13668() { testInvalid("{(int & any), (any & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_13669() { testInvalid("{(int & any), (any & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_13670() { testValid("{(int & any), (any & any)}","{(any & int), {int, any}}"); }
		@Test public void test_13671() { testInvalid("{(int & any), (any & any)}","{{any}, {any, int}}"); }
		@Test public void test_13672() { testInvalid("{(int & any), (any & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_13673() { testValid("{(int & any), (any & any)}","{(int | int), {any, int}}"); }
		@Test public void test_13674() { testValid("{(int & any), (any & any)}","{(any & int), {any, int}}"); }
		@Test public void test_13675() { testInvalid("{(int & any), (any & any)}","{!int, {int, int}}"); }
		@Test public void test_13676() { testInvalid("{(int & any), (any & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_13677() { testInvalid("{(int & any), (any & any)}","{(any | any), {int, int}}"); }
		@Test public void test_13678() { testInvalid("{(int & any), (any & any)}","{(int | any), {int, int}}"); }
		@Test public void test_13679() { testValid("{(int & any), (any & any)}","{(int & any), {int, int}}"); }
		@Test public void test_13680() { testInvalid("{(int & any), (any & any)}","{{int}, (any | any)}"); }
		@Test public void test_13681() { testInvalid("{(int & any), (any & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_13682() { testInvalid("{(int & any), (any & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_13683() { testInvalid("{(int & any), (any & any)}","{(any | any), (any | any)}"); }
		@Test public void test_13684() { testInvalid("{(int & any), (any & any)}","{(int | any), (any | any)}"); }
		@Test public void test_13685() { testValid("{(int & any), (any & any)}","{(int & int), (any | any)}"); }
		@Test public void test_13686() { testInvalid("{(int & any), (any & any)}","{!int, (int | any)}"); }
		@Test public void test_13687() { testInvalid("{(int & any), (any & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_13688() { testInvalid("{(int & any), (any & any)}","{(any | any), (int | any)}"); }
		@Test public void test_13689() { testValid("{(int & any), (any & any)}","{(int | int), (int | any)}"); }
		@Test public void test_13690() { testInvalid("{(int & any), (any & any)}","{{any}, (any | int)}"); }
		@Test public void test_13691() { testInvalid("{(int & any), (any & any)}","{!int, (any | int)}"); }
		@Test public void test_13692() { testInvalid("{(int & any), (any & any)}","{(any | any), (any | int)}"); }
		@Test public void test_13693() { testInvalid("{(int & any), (any & any)}","{(any | int), (any | int)}"); }
		@Test public void test_13694() { testValid("{(int & any), (any & any)}","{(any & int), (any | int)}"); }
		@Test public void test_13695() { testInvalid("{(int & any), (any & any)}","{{int}, (int | int)}"); }
		@Test public void test_13696() { testInvalid("{(int & any), (any & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_13697() { testInvalid("{(int & any), (any & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_13698() { testInvalid("{(int & any), (any & any)}","{{int}, (any & any)}"); }
		@Test public void test_13699() { testInvalid("{(int & any), (any & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_13700() { testInvalid("{(int & any), (any & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_13701() { testInvalid("{(int & any), (any & any)}","{(int | any), (any & any)}"); }
		@Test public void test_13702() { testInvalid("{(int & any), (any & any)}","{(any & any), (any & any)}"); }
		@Test public void test_13703() { testValid("{(int & any), (any & any)}","{(int & any), (any & any)}"); }
		@Test public void test_13704() { testInvalid("{(int & any), (any & any)}","{{any}, (int & any)}"); }
		@Test public void test_13705() { testInvalid("{(int & any), (any & any)}","{{int}, (int & any)}"); }
		@Test public void test_13706() { testInvalid("{(int & any), (any & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_13707() { testInvalid("{(int & any), (any & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_13708() { testInvalid("{(int & any), (any & any)}","{(any | int), (int & any)}"); }
		@Test public void test_13709() { testInvalid("{(int & any), (any & any)}","{(any & any), (int & any)}"); }
		@Test public void test_13710() { testValid("{(int & any), (any & any)}","{(int & any), (int & any)}"); }
		@Test public void test_13711() { testValid("{(int & any), (any & any)}","{(int & int), (int & any)}"); }
		@Test public void test_13712() { testInvalid("{(int & any), (any & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_13713() { testInvalid("{(int & any), (any & any)}","{(any & any), (any & int)}"); }
		@Test public void test_13714() { testInvalid("{(int & any), (any & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_13715() { testValid("{(int & any), (any & any)}","{(int | int), (int & int)}"); }
		@Test public void test_13716() { testInvalid("{(int & any), (any & any)}","{(any & any), (int & int)}"); }
		@Test public void test_13717() { testValid("{(int & any), (any & any)}","{(any & int), (int & int)}"); }
		@Test public void test_13718() { testValid("{(int & any), (any & any)}","{(int & int), (int & int)}"); }
		@Test public void test_13719() { testInvalid("{(int & any), (any & any)}","(!int | {any})"); }
		@Test public void test_13720() { testInvalid("{(int & any), (any & any)}","({any, any} | {any})"); }
		@Test public void test_13721() { testInvalid("{(int & any), (any & any)}","((any | any) | {any})"); }
		@Test public void test_13722() { testInvalid("{(int & any), (any & any)}","((int | any) | {any})"); }
		@Test public void test_13723() { testInvalid("{(int & any), (any & any)}","((any & any) | {any})"); }
		@Test public void test_13724() { testInvalid("{(int & any), (any & any)}","((int & any) | {any})"); }
		@Test public void test_13725() { testInvalid("{(int & any), (any & any)}","((any & int) | {any})"); }
		@Test public void test_13726() { testInvalid("{(int & any), (any & any)}","({int} | {int})"); }
		@Test public void test_13727() { testInvalid("{(int & any), (any & any)}","(!any | {int})"); }
		@Test public void test_13728() { testInvalid("{(int & any), (any & any)}","(!int | {int})"); }
		@Test public void test_13729() { testInvalid("{(int & any), (any & any)}","({any, int} | {int})"); }
		@Test public void test_13730() { testInvalid("{(int & any), (any & any)}","((int & any) | {int})"); }
		@Test public void test_13731() { testInvalid("{(int & any), (any & any)}","((any & int) | {int})"); }
		@Test public void test_13732() { testInvalid("{(int & any), (any & any)}","((int & int) | {int})"); }
		@Test public void test_13733() { testInvalid("{(int & any), (any & any)}","({any} | !any)"); }
		@Test public void test_13734() { testInvalid("{(int & any), (any & any)}","({int} | !any)"); }
		@Test public void test_13735() { testInvalid("{(int & any), (any & any)}","({any, any} | !any)"); }
		@Test public void test_13736() { testValid("{(int & any), (any & any)}","({int, int} | !any)"); }
		@Test public void test_13737() { testInvalid("{(int & any), (any & any)}","((any | any) | !any)"); }
		@Test public void test_13738() { testInvalid("{(int & any), (any & any)}","((int | any) | !any)"); }
		@Test public void test_13739() { testInvalid("{(int & any), (any & any)}","((int | int) | !any)"); }
		@Test public void test_13740() { testInvalid("{(int & any), (any & any)}","((int & int) | !any)"); }
		@Test public void test_13741() { testInvalid("{(int & any), (any & any)}","(!int | !int)"); }
		@Test public void test_13742() { testInvalid("{(int & any), (any & any)}","({any, any} | !int)"); }
		@Test public void test_13743() { testInvalid("{(int & any), (any & any)}","({int, int} | !int)"); }
		@Test public void test_13744() { testInvalid("{(int & any), (any & any)}","((int | any) | !int)"); }
		@Test public void test_13745() { testInvalid("{(int & any), (any & any)}","((any | int) | !int)"); }
		@Test public void test_13746() { testInvalid("{(int & any), (any & any)}","((any & int) | !int)"); }
		@Test public void test_13747() { testInvalid("{(int & any), (any & any)}","((int & int) | !int)"); }
		@Test public void test_13748() { testInvalid("{(int & any), (any & any)}","({int} | {any, any})"); }
		@Test public void test_13749() { testInvalid("{(int & any), (any & any)}","(!any | {any, any})"); }
		@Test public void test_13750() { testInvalid("{(int & any), (any & any)}","(!int | {any, any})"); }
		@Test public void test_13751() { testInvalid("{(int & any), (any & any)}","({any, int} | {any, any})"); }
		@Test public void test_13752() { testInvalid("{(int & any), (any & any)}","((int | any) | {any, any})"); }
		@Test public void test_13753() { testInvalid("{(int & any), (any & any)}","((any & any) | {any, any})"); }
		@Test public void test_13754() { testInvalid("{(int & any), (any & any)}","((any & int) | {any, any})"); }
		@Test public void test_13755() { testInvalid("{(int & any), (any & any)}","(!int | {int, any})"); }
		@Test public void test_13756() { testInvalid("{(int & any), (any & any)}","({any, int} | {int, any})"); }
		@Test public void test_13757() { testInvalid("{(int & any), (any & any)}","((any | any) | {int, any})"); }
		@Test public void test_13758() { testInvalid("{(int & any), (any & any)}","((int | any) | {int, any})"); }
		@Test public void test_13759() { testInvalid("{(int & any), (any & any)}","((any | int) | {int, any})"); }
		@Test public void test_13760() { testInvalid("{(int & any), (any & any)}","((int & any) | {int, any})"); }
		@Test public void test_13761() { testInvalid("{(int & any), (any & any)}","({any} | {any, int})"); }
		@Test public void test_13762() { testInvalid("{(int & any), (any & any)}","(!int | {any, int})"); }
		@Test public void test_13763() { testInvalid("{(int & any), (any & any)}","({any, int} | {any, int})"); }
		@Test public void test_13764() { testInvalid("{(int & any), (any & any)}","((any | any) | {any, int})"); }
		@Test public void test_13765() { testInvalid("{(int & any), (any & any)}","((any | int) | {any, int})"); }
		@Test public void test_13766() { testInvalid("{(int & any), (any & any)}","((int | int) | {any, int})"); }
		@Test public void test_13767() { testInvalid("{(int & any), (any & any)}","((int & any) | {any, int})"); }
		@Test public void test_13768() { testValid("{(int & any), (any & any)}","(!any | {int, int})"); }
		@Test public void test_13769() { testInvalid("{(int & any), (any & any)}","(!int | {int, int})"); }
		@Test public void test_13770() { testInvalid("{(int & any), (any & any)}","({any, any} | {int, int})"); }
		@Test public void test_13771() { testInvalid("{(int & any), (any & any)}","({any, int} | {int, int})"); }
		@Test public void test_13772() { testInvalid("{(int & any), (any & any)}","((any | any) | {int, int})"); }
		@Test public void test_13773() { testInvalid("{(int & any), (any & any)}","((int | int) | {int, int})"); }
		@Test public void test_13774() { testInvalid("{(int & any), (any & any)}","((int & any) | {int, int})"); }
		@Test public void test_13775() { testInvalid("{(int & any), (any & any)}","((any & int) | {int, int})"); }
		@Test public void test_13776() { testInvalid("{(int & any), (any & any)}","((int & int) | {int, int})"); }
		@Test public void test_13777() { testInvalid("{(int & any), (any & any)}","({any} | (any | any))"); }
		@Test public void test_13778() { testInvalid("{(int & any), (any & any)}","(!any | (any | any))"); }
		@Test public void test_13779() { testInvalid("{(int & any), (any & any)}","({any, any} | (any | any))"); }
		@Test public void test_13780() { testInvalid("{(int & any), (any & any)}","({any, int} | (any | any))"); }
		@Test public void test_13781() { testInvalid("{(int & any), (any & any)}","({int, int} | (any | any))"); }
		@Test public void test_13782() { testInvalid("{(int & any), (any & any)}","((int | any) | (any | any))"); }
		@Test public void test_13783() { testInvalid("{(int & any), (any & any)}","((any | int) | (any | any))"); }
		@Test public void test_13784() { testInvalid("{(int & any), (any & any)}","((any & int) | (any | any))"); }
		@Test public void test_13785() { testInvalid("{(int & any), (any & any)}","((int & int) | (any | any))"); }
		@Test public void test_13786() { testInvalid("{(int & any), (any & any)}","({any} | (int | any))"); }
		@Test public void test_13787() { testInvalid("{(int & any), (any & any)}","(!int | (int | any))"); }
		@Test public void test_13788() { testInvalid("{(int & any), (any & any)}","({int, any} | (int | any))"); }
		@Test public void test_13789() { testInvalid("{(int & any), (any & any)}","({any, int} | (int | any))"); }
		@Test public void test_13790() { testInvalid("{(int & any), (any & any)}","((int & any) | (int | any))"); }
		@Test public void test_13791() { testInvalid("{(int & any), (any & any)}","((any & int) | (int | any))"); }
		@Test public void test_13792() { testInvalid("{(int & any), (any & any)}","({any} | (any | int))"); }
		@Test public void test_13793() { testInvalid("{(int & any), (any & any)}","({int} | (any | int))"); }
		@Test public void test_13794() { testInvalid("{(int & any), (any & any)}","(!any | (any | int))"); }
		@Test public void test_13795() { testInvalid("{(int & any), (any & any)}","(!int | (any | int))"); }
		@Test public void test_13796() { testInvalid("{(int & any), (any & any)}","({any, int} | (any | int))"); }
		@Test public void test_13797() { testInvalid("{(int & any), (any & any)}","({int, int} | (any | int))"); }
		@Test public void test_13798() { testInvalid("{(int & any), (any & any)}","((int | any) | (any | int))"); }
		@Test public void test_13799() { testInvalid("{(int & any), (any & any)}","((any | int) | (any | int))"); }
		@Test public void test_13800() { testInvalid("{(int & any), (any & any)}","((int | int) | (any | int))"); }
		@Test public void test_13801() { testInvalid("{(int & any), (any & any)}","((any & any) | (any | int))"); }
		@Test public void test_13802() { testInvalid("{(int & any), (any & any)}","({int} | (int | int))"); }
		@Test public void test_13803() { testInvalid("{(int & any), (any & any)}","(!any | (int | int))"); }
		@Test public void test_13804() { testInvalid("{(int & any), (any & any)}","(!int | (int | int))"); }
		@Test public void test_13805() { testInvalid("{(int & any), (any & any)}","({int, any} | (int | int))"); }
		@Test public void test_13806() { testInvalid("{(int & any), (any & any)}","({any, int} | (int | int))"); }
		@Test public void test_13807() { testInvalid("{(int & any), (any & any)}","((any | int) | (int | int))"); }
		@Test public void test_13808() { testInvalid("{(int & any), (any & any)}","((int | int) | (int | int))"); }
		@Test public void test_13809() { testInvalid("{(int & any), (any & any)}","((any & any) | (int | int))"); }
		@Test public void test_13810() { testInvalid("{(int & any), (any & any)}","((int & any) | (int | int))"); }
		@Test public void test_13811() { testInvalid("{(int & any), (any & any)}","((int & int) | (int | int))"); }
		@Test public void test_13812() { testInvalid("{(int & any), (any & any)}","(!any | (any & any))"); }
		@Test public void test_13813() { testInvalid("{(int & any), (any & any)}","(!int | (any & any))"); }
		@Test public void test_13814() { testInvalid("{(int & any), (any & any)}","({any, any} | (any & any))"); }
		@Test public void test_13815() { testInvalid("{(int & any), (any & any)}","({int, any} | (any & any))"); }
		@Test public void test_13816() { testInvalid("{(int & any), (any & any)}","({any, int} | (any & any))"); }
		@Test public void test_13817() { testInvalid("{(int & any), (any & any)}","({int, int} | (any & any))"); }
		@Test public void test_13818() { testInvalid("{(int & any), (any & any)}","((int | any) | (any & any))"); }
		@Test public void test_13819() { testInvalid("{(int & any), (any & any)}","((int | int) | (any & any))"); }
		@Test public void test_13820() { testInvalid("{(int & any), (any & any)}","((int & any) | (any & any))"); }
		@Test public void test_13821() { testInvalid("{(int & any), (any & any)}","((any & int) | (any & any))"); }
		@Test public void test_13822() { testInvalid("{(int & any), (any & any)}","((int & int) | (any & any))"); }
		@Test public void test_13823() { testInvalid("{(int & any), (any & any)}","({any} | (int & any))"); }
		@Test public void test_13824() { testInvalid("{{any}, (int & any)}","{int}"); }
		@Test public void test_13825() { testInvalid("{{any}, (int & any)}","{any, any}"); }
		@Test public void test_13826() { testInvalid("{{any}, (int & any)}","{int, int}"); }
		@Test public void test_13827() { testInvalid("{{any}, (int & any)}","(any | int)"); }
		@Test public void test_13828() { testInvalid("{{any}, (int & any)}","(int & any)"); }
		@Test public void test_13829() { testInvalid("{{any}, (int & any)}","{{any}}"); }
		@Test public void test_13830() { testInvalid("{{any}, (int & any)}","{{int, any}}"); }
		@Test public void test_13831() { testInvalid("{{any}, (int & any)}","{{int, int}}"); }
		@Test public void test_13832() { testInvalid("{{any}, (int & any)}","{(any | int)}"); }
		@Test public void test_13833() { testInvalid("{{any}, (int & any)}","!{int, any}"); }
		@Test public void test_13834() { testInvalid("{{any}, (int & any)}","!{int, int}"); }
		@Test public void test_13835() { testValid("{{any}, (int & any)}","!(any | any)"); }
		@Test public void test_13836() { testValid("{{any}, (int & any)}","!(any & any)"); }
		@Test public void test_13837() { testInvalid("{{any}, (int & any)}","!(int & int)"); }
		@Test public void test_13838() { testInvalid("{{any}, (int & any)}","{{int}, {any}}"); }
		@Test public void test_13839() { testInvalid("{{any}, (int & any)}","{!int, {any}}"); }
		@Test public void test_13840() { testInvalid("{{any}, (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_13841() { testInvalid("{{any}, (int & any)}","{(any | int), {any}}"); }
		@Test public void test_13842() { testInvalid("{{any}, (int & any)}","{!int, {int}}"); }
		@Test public void test_13843() { testInvalid("{{any}, (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_13844() { testInvalid("{{any}, (int & any)}","{(any | any), {int}}"); }
		@Test public void test_13845() { testInvalid("{{any}, (int & any)}","{(any & any), {int}}"); }
		@Test public void test_13846() { testInvalid("{{any}, (int & any)}","{(any & int), {int}}"); }
		@Test public void test_13847() { testInvalid("{{any}, (int & any)}","{{any, any}, !int}"); }
		@Test public void test_13848() { testInvalid("{{any}, (int & any)}","{{any, int}, !int}"); }
		@Test public void test_13849() { testInvalid("{{any}, (int & any)}","{(any | any), !int}"); }
		@Test public void test_13850() { testInvalid("{{any}, (int & any)}","{(int | any), !int}"); }
		@Test public void test_13851() { testInvalid("{{any}, (int & any)}","{(any & any), !int}"); }
		@Test public void test_13852() { testInvalid("{{any}, (int & any)}","{(int & any), !int}"); }
		@Test public void test_13853() { testInvalid("{{any}, (int & any)}","{(int & int), !int}"); }
		@Test public void test_13854() { testInvalid("{{any}, (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_13855() { testInvalid("{{any}, (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_13856() { testInvalid("{{any}, (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_13857() { testInvalid("{{any}, (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_13858() { testInvalid("{{any}, (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_13859() { testInvalid("{{any}, (int & any)}","{!int, {int, any}}"); }
		@Test public void test_13860() { testInvalid("{{any}, (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_13861() { testInvalid("{{any}, (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_13862() { testInvalid("{{any}, (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_13863() { testInvalid("{{any}, (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_13864() { testInvalid("{{any}, (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_13865() { testInvalid("{{any}, (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_13866() { testInvalid("{{any}, (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_13867() { testInvalid("{{any}, (int & any)}","{!int, {int, int}}"); }
		@Test public void test_13868() { testInvalid("{{any}, (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_13869() { testInvalid("{{any}, (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_13870() { testInvalid("{{any}, (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_13871() { testInvalid("{{any}, (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_13872() { testInvalid("{{any}, (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_13873() { testInvalid("{{any}, (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_13874() { testInvalid("{{any}, (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_13875() { testInvalid("{{any}, (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_13876() { testInvalid("{{any}, (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_13877() { testInvalid("{{any}, (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_13878() { testInvalid("{{any}, (int & any)}","{!int, (int | any)}"); }
		@Test public void test_13879() { testInvalid("{{any}, (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_13880() { testInvalid("{{any}, (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_13881() { testInvalid("{{any}, (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_13882() { testInvalid("{{any}, (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_13883() { testInvalid("{{any}, (int & any)}","{!int, (any | int)}"); }
		@Test public void test_13884() { testInvalid("{{any}, (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_13885() { testInvalid("{{any}, (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_13886() { testInvalid("{{any}, (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_13887() { testValid("{{any}, (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_13888() { testInvalid("{{any}, (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_13889() { testInvalid("{{any}, (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_13890() { testInvalid("{{any}, (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_13891() { testInvalid("{{any}, (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_13892() { testInvalid("{{any}, (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_13893() { testInvalid("{{any}, (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_13894() { testInvalid("{{any}, (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_13895() { testInvalid("{{any}, (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_13896() { testValid("{{any}, (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_13897() { testValid("{{any}, (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_13898() { testInvalid("{{any}, (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_13899() { testInvalid("{{any}, (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_13900() { testInvalid("{{any}, (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_13901() { testInvalid("{{any}, (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_13902() { testInvalid("{{any}, (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_13903() { testInvalid("{{any}, (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_13904() { testInvalid("{{any}, (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_13905() { testInvalid("{{any}, (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_13906() { testInvalid("{{any}, (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_13907() { testInvalid("{{any}, (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_13908() { testInvalid("{{any}, (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_13909() { testInvalid("{{any}, (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_13910() { testInvalid("{{any}, (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_13911() { testInvalid("{{any}, (int & any)}","(!int | {any})"); }
		@Test public void test_13912() { testInvalid("{{any}, (int & any)}","({any, any} | {any})"); }
		@Test public void test_13913() { testInvalid("{{any}, (int & any)}","((any | any) | {any})"); }
		@Test public void test_13914() { testInvalid("{{any}, (int & any)}","((int | any) | {any})"); }
		@Test public void test_13915() { testInvalid("{{any}, (int & any)}","((any & any) | {any})"); }
		@Test public void test_13916() { testInvalid("{{any}, (int & any)}","((int & any) | {any})"); }
		@Test public void test_13917() { testInvalid("{{any}, (int & any)}","((any & int) | {any})"); }
		@Test public void test_13918() { testInvalid("{{any}, (int & any)}","({int} | {int})"); }
		@Test public void test_13919() { testInvalid("{{any}, (int & any)}","(!any | {int})"); }
		@Test public void test_13920() { testInvalid("{{any}, (int & any)}","(!int | {int})"); }
		@Test public void test_13921() { testInvalid("{{any}, (int & any)}","({any, int} | {int})"); }
		@Test public void test_13922() { testInvalid("{{any}, (int & any)}","((int & any) | {int})"); }
		@Test public void test_13923() { testInvalid("{{any}, (int & any)}","((any & int) | {int})"); }
		@Test public void test_13924() { testInvalid("{{any}, (int & any)}","((int & int) | {int})"); }
		@Test public void test_13925() { testInvalid("{{any}, (int & any)}","({any} | !any)"); }
		@Test public void test_13926() { testInvalid("{{any}, (int & any)}","({int} | !any)"); }
		@Test public void test_13927() { testInvalid("{{any}, (int & any)}","({any, any} | !any)"); }
		@Test public void test_13928() { testInvalid("{{any}, (int & any)}","({int, int} | !any)"); }
		@Test public void test_13929() { testInvalid("{{any}, (int & any)}","((any | any) | !any)"); }
		@Test public void test_13930() { testInvalid("{{any}, (int & any)}","((int | any) | !any)"); }
		@Test public void test_13931() { testInvalid("{{any}, (int & any)}","((int | int) | !any)"); }
		@Test public void test_13932() { testInvalid("{{any}, (int & any)}","((int & int) | !any)"); }
		@Test public void test_13933() { testInvalid("{{any}, (int & any)}","(!int | !int)"); }
		@Test public void test_13934() { testInvalid("{{any}, (int & any)}","({any, any} | !int)"); }
		@Test public void test_13935() { testInvalid("{{any}, (int & any)}","({int, int} | !int)"); }
		@Test public void test_13936() { testInvalid("{{any}, (int & any)}","((int | any) | !int)"); }
		@Test public void test_13937() { testInvalid("{{any}, (int & any)}","((any | int) | !int)"); }
		@Test public void test_13938() { testInvalid("{{any}, (int & any)}","((any & int) | !int)"); }
		@Test public void test_13939() { testInvalid("{{any}, (int & any)}","((int & int) | !int)"); }
		@Test public void test_13940() { testInvalid("{{any}, (int & any)}","({int} | {any, any})"); }
		@Test public void test_13941() { testInvalid("{{any}, (int & any)}","(!any | {any, any})"); }
		@Test public void test_13942() { testInvalid("{{any}, (int & any)}","(!int | {any, any})"); }
		@Test public void test_13943() { testInvalid("{{any}, (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_13944() { testInvalid("{{any}, (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_13945() { testInvalid("{{any}, (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_13946() { testInvalid("{{any}, (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_13947() { testInvalid("{{any}, (int & any)}","(!int | {int, any})"); }
		@Test public void test_13948() { testInvalid("{{any}, (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_13949() { testInvalid("{{any}, (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_13950() { testInvalid("{{any}, (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_13951() { testInvalid("{{any}, (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_13952() { testInvalid("{{any}, (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_13953() { testInvalid("{{any}, (int & any)}","({any} | {any, int})"); }
		@Test public void test_13954() { testInvalid("{{any}, (int & any)}","(!int | {any, int})"); }
		@Test public void test_13955() { testInvalid("{{any}, (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_13956() { testInvalid("{{any}, (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_13957() { testInvalid("{{any}, (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_13958() { testInvalid("{{any}, (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_13959() { testInvalid("{{any}, (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_13960() { testInvalid("{{any}, (int & any)}","(!any | {int, int})"); }
		@Test public void test_13961() { testInvalid("{{any}, (int & any)}","(!int | {int, int})"); }
		@Test public void test_13962() { testInvalid("{{any}, (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_13963() { testInvalid("{{any}, (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_13964() { testInvalid("{{any}, (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_13965() { testInvalid("{{any}, (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_13966() { testInvalid("{{any}, (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_13967() { testInvalid("{{any}, (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_13968() { testInvalid("{{any}, (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_13969() { testInvalid("{{any}, (int & any)}","({any} | (any | any))"); }
		@Test public void test_13970() { testInvalid("{{any}, (int & any)}","(!any | (any | any))"); }
		@Test public void test_13971() { testInvalid("{{any}, (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_13972() { testInvalid("{{any}, (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_13973() { testInvalid("{{any}, (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_13974() { testInvalid("{{any}, (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_13975() { testInvalid("{{any}, (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_13976() { testInvalid("{{any}, (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_13977() { testInvalid("{{any}, (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_13978() { testInvalid("{{any}, (int & any)}","({any} | (int | any))"); }
		@Test public void test_13979() { testInvalid("{{any}, (int & any)}","(!int | (int | any))"); }
		@Test public void test_13980() { testInvalid("{{any}, (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_13981() { testInvalid("{{any}, (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_13982() { testInvalid("{{any}, (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_13983() { testInvalid("{{any}, (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_13984() { testInvalid("{{any}, (int & any)}","({any} | (any | int))"); }
		@Test public void test_13985() { testInvalid("{{any}, (int & any)}","({int} | (any | int))"); }
		@Test public void test_13986() { testInvalid("{{any}, (int & any)}","(!any | (any | int))"); }
		@Test public void test_13987() { testInvalid("{{any}, (int & any)}","(!int | (any | int))"); }
		@Test public void test_13988() { testInvalid("{{any}, (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_13989() { testInvalid("{{any}, (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_13990() { testInvalid("{{any}, (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_13991() { testInvalid("{{any}, (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_13992() { testInvalid("{{any}, (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_13993() { testInvalid("{{any}, (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_13994() { testInvalid("{{any}, (int & any)}","({int} | (int | int))"); }
		@Test public void test_13995() { testInvalid("{{any}, (int & any)}","(!any | (int | int))"); }
		@Test public void test_13996() { testInvalid("{{any}, (int & any)}","(!int | (int | int))"); }
		@Test public void test_13997() { testInvalid("{{any}, (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_13998() { testInvalid("{{any}, (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_13999() { testInvalid("{{any}, (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14000() { testInvalid("{{any}, (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14001() { testInvalid("{{any}, (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14002() { testInvalid("{{any}, (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14003() { testInvalid("{{any}, (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14004() { testInvalid("{{any}, (int & any)}","(!any | (any & any))"); }
		@Test public void test_14005() { testInvalid("{{any}, (int & any)}","(!int | (any & any))"); }
		@Test public void test_14006() { testInvalid("{{any}, (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14007() { testInvalid("{{any}, (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14008() { testInvalid("{{any}, (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14009() { testInvalid("{{any}, (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14010() { testInvalid("{{any}, (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14011() { testInvalid("{{any}, (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14012() { testInvalid("{{any}, (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14013() { testInvalid("{{any}, (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14014() { testInvalid("{{any}, (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14015() { testInvalid("{{any}, (int & any)}","({any} | (int & any))"); }
		@Test public void test_14016() { testInvalid("{{int}, (int & any)}","{int}"); }
		@Test public void test_14017() { testInvalid("{{int}, (int & any)}","{any, any}"); }
		@Test public void test_14018() { testInvalid("{{int}, (int & any)}","{int, int}"); }
		@Test public void test_14019() { testInvalid("{{int}, (int & any)}","(any | int)"); }
		@Test public void test_14020() { testInvalid("{{int}, (int & any)}","(int & any)"); }
		@Test public void test_14021() { testInvalid("{{int}, (int & any)}","{{any}}"); }
		@Test public void test_14022() { testInvalid("{{int}, (int & any)}","{{int, any}}"); }
		@Test public void test_14023() { testInvalid("{{int}, (int & any)}","{{int, int}}"); }
		@Test public void test_14024() { testInvalid("{{int}, (int & any)}","{(any | int)}"); }
		@Test public void test_14025() { testInvalid("{{int}, (int & any)}","!{int, any}"); }
		@Test public void test_14026() { testInvalid("{{int}, (int & any)}","!{int, int}"); }
		@Test public void test_14027() { testValid("{{int}, (int & any)}","!(any | any)"); }
		@Test public void test_14028() { testValid("{{int}, (int & any)}","!(any & any)"); }
		@Test public void test_14029() { testInvalid("{{int}, (int & any)}","!(int & int)"); }
		@Test public void test_14030() { testInvalid("{{int}, (int & any)}","{{int}, {any}}"); }
		@Test public void test_14031() { testInvalid("{{int}, (int & any)}","{!int, {any}}"); }
		@Test public void test_14032() { testInvalid("{{int}, (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14033() { testInvalid("{{int}, (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14034() { testInvalid("{{int}, (int & any)}","{!int, {int}}"); }
		@Test public void test_14035() { testInvalid("{{int}, (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14036() { testInvalid("{{int}, (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14037() { testInvalid("{{int}, (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14038() { testInvalid("{{int}, (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14039() { testInvalid("{{int}, (int & any)}","{{any, any}, !int}"); }
		@Test public void test_14040() { testInvalid("{{int}, (int & any)}","{{any, int}, !int}"); }
		@Test public void test_14041() { testInvalid("{{int}, (int & any)}","{(any | any), !int}"); }
		@Test public void test_14042() { testInvalid("{{int}, (int & any)}","{(int | any), !int}"); }
		@Test public void test_14043() { testInvalid("{{int}, (int & any)}","{(any & any), !int}"); }
		@Test public void test_14044() { testInvalid("{{int}, (int & any)}","{(int & any), !int}"); }
		@Test public void test_14045() { testInvalid("{{int}, (int & any)}","{(int & int), !int}"); }
		@Test public void test_14046() { testInvalid("{{int}, (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_14047() { testInvalid("{{int}, (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_14048() { testInvalid("{{int}, (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_14049() { testInvalid("{{int}, (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_14050() { testInvalid("{{int}, (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_14051() { testInvalid("{{int}, (int & any)}","{!int, {int, any}}"); }
		@Test public void test_14052() { testInvalid("{{int}, (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_14053() { testInvalid("{{int}, (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_14054() { testInvalid("{{int}, (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_14055() { testInvalid("{{int}, (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_14056() { testInvalid("{{int}, (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_14057() { testInvalid("{{int}, (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_14058() { testInvalid("{{int}, (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_14059() { testInvalid("{{int}, (int & any)}","{!int, {int, int}}"); }
		@Test public void test_14060() { testInvalid("{{int}, (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_14061() { testInvalid("{{int}, (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_14062() { testInvalid("{{int}, (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_14063() { testInvalid("{{int}, (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_14064() { testInvalid("{{int}, (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_14065() { testInvalid("{{int}, (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_14066() { testInvalid("{{int}, (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_14067() { testInvalid("{{int}, (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_14068() { testInvalid("{{int}, (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_14069() { testInvalid("{{int}, (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_14070() { testInvalid("{{int}, (int & any)}","{!int, (int | any)}"); }
		@Test public void test_14071() { testInvalid("{{int}, (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_14072() { testInvalid("{{int}, (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_14073() { testInvalid("{{int}, (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_14074() { testInvalid("{{int}, (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_14075() { testInvalid("{{int}, (int & any)}","{!int, (any | int)}"); }
		@Test public void test_14076() { testInvalid("{{int}, (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_14077() { testInvalid("{{int}, (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_14078() { testInvalid("{{int}, (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_14079() { testValid("{{int}, (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_14080() { testInvalid("{{int}, (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_14081() { testInvalid("{{int}, (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_14082() { testInvalid("{{int}, (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_14083() { testInvalid("{{int}, (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_14084() { testInvalid("{{int}, (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_14085() { testInvalid("{{int}, (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_14086() { testInvalid("{{int}, (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_14087() { testInvalid("{{int}, (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_14088() { testInvalid("{{int}, (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_14089() { testValid("{{int}, (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_14090() { testInvalid("{{int}, (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_14091() { testInvalid("{{int}, (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_14092() { testInvalid("{{int}, (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_14093() { testInvalid("{{int}, (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_14094() { testInvalid("{{int}, (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_14095() { testInvalid("{{int}, (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_14096() { testInvalid("{{int}, (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_14097() { testInvalid("{{int}, (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_14098() { testInvalid("{{int}, (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_14099() { testInvalid("{{int}, (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_14100() { testInvalid("{{int}, (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_14101() { testInvalid("{{int}, (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_14102() { testInvalid("{{int}, (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_14103() { testInvalid("{{int}, (int & any)}","(!int | {any})"); }
		@Test public void test_14104() { testInvalid("{{int}, (int & any)}","({any, any} | {any})"); }
		@Test public void test_14105() { testInvalid("{{int}, (int & any)}","((any | any) | {any})"); }
		@Test public void test_14106() { testInvalid("{{int}, (int & any)}","((int | any) | {any})"); }
		@Test public void test_14107() { testInvalid("{{int}, (int & any)}","((any & any) | {any})"); }
		@Test public void test_14108() { testInvalid("{{int}, (int & any)}","((int & any) | {any})"); }
		@Test public void test_14109() { testInvalid("{{int}, (int & any)}","((any & int) | {any})"); }
		@Test public void test_14110() { testInvalid("{{int}, (int & any)}","({int} | {int})"); }
		@Test public void test_14111() { testInvalid("{{int}, (int & any)}","(!any | {int})"); }
		@Test public void test_14112() { testInvalid("{{int}, (int & any)}","(!int | {int})"); }
		@Test public void test_14113() { testInvalid("{{int}, (int & any)}","({any, int} | {int})"); }
		@Test public void test_14114() { testInvalid("{{int}, (int & any)}","((int & any) | {int})"); }
		@Test public void test_14115() { testInvalid("{{int}, (int & any)}","((any & int) | {int})"); }
		@Test public void test_14116() { testInvalid("{{int}, (int & any)}","((int & int) | {int})"); }
		@Test public void test_14117() { testInvalid("{{int}, (int & any)}","({any} | !any)"); }
		@Test public void test_14118() { testInvalid("{{int}, (int & any)}","({int} | !any)"); }
		@Test public void test_14119() { testInvalid("{{int}, (int & any)}","({any, any} | !any)"); }
		@Test public void test_14120() { testInvalid("{{int}, (int & any)}","({int, int} | !any)"); }
		@Test public void test_14121() { testInvalid("{{int}, (int & any)}","((any | any) | !any)"); }
		@Test public void test_14122() { testInvalid("{{int}, (int & any)}","((int | any) | !any)"); }
		@Test public void test_14123() { testInvalid("{{int}, (int & any)}","((int | int) | !any)"); }
		@Test public void test_14124() { testInvalid("{{int}, (int & any)}","((int & int) | !any)"); }
		@Test public void test_14125() { testInvalid("{{int}, (int & any)}","(!int | !int)"); }
		@Test public void test_14126() { testInvalid("{{int}, (int & any)}","({any, any} | !int)"); }
		@Test public void test_14127() { testInvalid("{{int}, (int & any)}","({int, int} | !int)"); }
		@Test public void test_14128() { testInvalid("{{int}, (int & any)}","((int | any) | !int)"); }
		@Test public void test_14129() { testInvalid("{{int}, (int & any)}","((any | int) | !int)"); }
		@Test public void test_14130() { testInvalid("{{int}, (int & any)}","((any & int) | !int)"); }
		@Test public void test_14131() { testInvalid("{{int}, (int & any)}","((int & int) | !int)"); }
		@Test public void test_14132() { testInvalid("{{int}, (int & any)}","({int} | {any, any})"); }
		@Test public void test_14133() { testInvalid("{{int}, (int & any)}","(!any | {any, any})"); }
		@Test public void test_14134() { testInvalid("{{int}, (int & any)}","(!int | {any, any})"); }
		@Test public void test_14135() { testInvalid("{{int}, (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_14136() { testInvalid("{{int}, (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_14137() { testInvalid("{{int}, (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_14138() { testInvalid("{{int}, (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_14139() { testInvalid("{{int}, (int & any)}","(!int | {int, any})"); }
		@Test public void test_14140() { testInvalid("{{int}, (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_14141() { testInvalid("{{int}, (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_14142() { testInvalid("{{int}, (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_14143() { testInvalid("{{int}, (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_14144() { testInvalid("{{int}, (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_14145() { testInvalid("{{int}, (int & any)}","({any} | {any, int})"); }
		@Test public void test_14146() { testInvalid("{{int}, (int & any)}","(!int | {any, int})"); }
		@Test public void test_14147() { testInvalid("{{int}, (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_14148() { testInvalid("{{int}, (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_14149() { testInvalid("{{int}, (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_14150() { testInvalid("{{int}, (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_14151() { testInvalid("{{int}, (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_14152() { testInvalid("{{int}, (int & any)}","(!any | {int, int})"); }
		@Test public void test_14153() { testInvalid("{{int}, (int & any)}","(!int | {int, int})"); }
		@Test public void test_14154() { testInvalid("{{int}, (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_14155() { testInvalid("{{int}, (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_14156() { testInvalid("{{int}, (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_14157() { testInvalid("{{int}, (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_14158() { testInvalid("{{int}, (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_14159() { testInvalid("{{int}, (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_14160() { testInvalid("{{int}, (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_14161() { testInvalid("{{int}, (int & any)}","({any} | (any | any))"); }
		@Test public void test_14162() { testInvalid("{{int}, (int & any)}","(!any | (any | any))"); }
		@Test public void test_14163() { testInvalid("{{int}, (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_14164() { testInvalid("{{int}, (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_14165() { testInvalid("{{int}, (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_14166() { testInvalid("{{int}, (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_14167() { testInvalid("{{int}, (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_14168() { testInvalid("{{int}, (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_14169() { testInvalid("{{int}, (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_14170() { testInvalid("{{int}, (int & any)}","({any} | (int | any))"); }
		@Test public void test_14171() { testInvalid("{{int}, (int & any)}","(!int | (int | any))"); }
		@Test public void test_14172() { testInvalid("{{int}, (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_14173() { testInvalid("{{int}, (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_14174() { testInvalid("{{int}, (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_14175() { testInvalid("{{int}, (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_14176() { testInvalid("{{int}, (int & any)}","({any} | (any | int))"); }
		@Test public void test_14177() { testInvalid("{{int}, (int & any)}","({int} | (any | int))"); }
		@Test public void test_14178() { testInvalid("{{int}, (int & any)}","(!any | (any | int))"); }
		@Test public void test_14179() { testInvalid("{{int}, (int & any)}","(!int | (any | int))"); }
		@Test public void test_14180() { testInvalid("{{int}, (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_14181() { testInvalid("{{int}, (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_14182() { testInvalid("{{int}, (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_14183() { testInvalid("{{int}, (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_14184() { testInvalid("{{int}, (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_14185() { testInvalid("{{int}, (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_14186() { testInvalid("{{int}, (int & any)}","({int} | (int | int))"); }
		@Test public void test_14187() { testInvalid("{{int}, (int & any)}","(!any | (int | int))"); }
		@Test public void test_14188() { testInvalid("{{int}, (int & any)}","(!int | (int | int))"); }
		@Test public void test_14189() { testInvalid("{{int}, (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_14190() { testInvalid("{{int}, (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_14191() { testInvalid("{{int}, (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14192() { testInvalid("{{int}, (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14193() { testInvalid("{{int}, (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14194() { testInvalid("{{int}, (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14195() { testInvalid("{{int}, (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14196() { testInvalid("{{int}, (int & any)}","(!any | (any & any))"); }
		@Test public void test_14197() { testInvalid("{{int}, (int & any)}","(!int | (any & any))"); }
		@Test public void test_14198() { testInvalid("{{int}, (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14199() { testInvalid("{{int}, (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14200() { testInvalid("{{int}, (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14201() { testInvalid("{{int}, (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14202() { testInvalid("{{int}, (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14203() { testInvalid("{{int}, (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14204() { testInvalid("{{int}, (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14205() { testInvalid("{{int}, (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14206() { testInvalid("{{int}, (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14207() { testInvalid("{{int}, (int & any)}","({any} | (int & any))"); }
		@Test public void test_14208() { testInvalid("{{any, any}, (int & any)}","{int}"); }
		@Test public void test_14209() { testInvalid("{{any, any}, (int & any)}","{any, any}"); }
		@Test public void test_14210() { testInvalid("{{any, any}, (int & any)}","{int, int}"); }
		@Test public void test_14211() { testInvalid("{{any, any}, (int & any)}","(any | int)"); }
		@Test public void test_14212() { testInvalid("{{any, any}, (int & any)}","(int & any)"); }
		@Test public void test_14213() { testInvalid("{{any, any}, (int & any)}","{{any}}"); }
		@Test public void test_14214() { testInvalid("{{any, any}, (int & any)}","{{int, any}}"); }
		@Test public void test_14215() { testInvalid("{{any, any}, (int & any)}","{{int, int}}"); }
		@Test public void test_14216() { testInvalid("{{any, any}, (int & any)}","{(any | int)}"); }
		@Test public void test_14217() { testInvalid("{{any, any}, (int & any)}","!{int, any}"); }
		@Test public void test_14218() { testInvalid("{{any, any}, (int & any)}","!{int, int}"); }
		@Test public void test_14219() { testValid("{{any, any}, (int & any)}","!(any | any)"); }
		@Test public void test_14220() { testValid("{{any, any}, (int & any)}","!(any & any)"); }
		@Test public void test_14221() { testInvalid("{{any, any}, (int & any)}","!(int & int)"); }
		@Test public void test_14222() { testInvalid("{{any, any}, (int & any)}","{{int}, {any}}"); }
		@Test public void test_14223() { testInvalid("{{any, any}, (int & any)}","{!int, {any}}"); }
		@Test public void test_14224() { testInvalid("{{any, any}, (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14225() { testInvalid("{{any, any}, (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14226() { testInvalid("{{any, any}, (int & any)}","{!int, {int}}"); }
		@Test public void test_14227() { testInvalid("{{any, any}, (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14228() { testInvalid("{{any, any}, (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14229() { testInvalid("{{any, any}, (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14230() { testInvalid("{{any, any}, (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14231() { testInvalid("{{any, any}, (int & any)}","{{any, any}, !int}"); }
		@Test public void test_14232() { testInvalid("{{any, any}, (int & any)}","{{any, int}, !int}"); }
		@Test public void test_14233() { testInvalid("{{any, any}, (int & any)}","{(any | any), !int}"); }
		@Test public void test_14234() { testInvalid("{{any, any}, (int & any)}","{(int | any), !int}"); }
		@Test public void test_14235() { testInvalid("{{any, any}, (int & any)}","{(any & any), !int}"); }
		@Test public void test_14236() { testInvalid("{{any, any}, (int & any)}","{(int & any), !int}"); }
		@Test public void test_14237() { testInvalid("{{any, any}, (int & any)}","{(int & int), !int}"); }
		@Test public void test_14238() { testInvalid("{{any, any}, (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_14239() { testInvalid("{{any, any}, (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_14240() { testInvalid("{{any, any}, (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_14241() { testInvalid("{{any, any}, (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_14242() { testInvalid("{{any, any}, (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_14243() { testInvalid("{{any, any}, (int & any)}","{!int, {int, any}}"); }
		@Test public void test_14244() { testInvalid("{{any, any}, (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_14245() { testInvalid("{{any, any}, (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_14246() { testInvalid("{{any, any}, (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_14247() { testInvalid("{{any, any}, (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_14248() { testInvalid("{{any, any}, (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_14249() { testInvalid("{{any, any}, (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_14250() { testInvalid("{{any, any}, (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_14251() { testInvalid("{{any, any}, (int & any)}","{!int, {int, int}}"); }
		@Test public void test_14252() { testInvalid("{{any, any}, (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_14253() { testInvalid("{{any, any}, (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_14254() { testInvalid("{{any, any}, (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_14255() { testInvalid("{{any, any}, (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_14256() { testInvalid("{{any, any}, (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_14257() { testInvalid("{{any, any}, (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_14258() { testInvalid("{{any, any}, (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_14259() { testInvalid("{{any, any}, (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_14260() { testInvalid("{{any, any}, (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_14261() { testInvalid("{{any, any}, (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_14262() { testInvalid("{{any, any}, (int & any)}","{!int, (int | any)}"); }
		@Test public void test_14263() { testInvalid("{{any, any}, (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_14264() { testInvalid("{{any, any}, (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_14265() { testInvalid("{{any, any}, (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_14266() { testInvalid("{{any, any}, (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_14267() { testInvalid("{{any, any}, (int & any)}","{!int, (any | int)}"); }
		@Test public void test_14268() { testInvalid("{{any, any}, (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_14269() { testInvalid("{{any, any}, (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_14270() { testInvalid("{{any, any}, (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_14271() { testInvalid("{{any, any}, (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_14272() { testValid("{{any, any}, (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_14273() { testValid("{{any, any}, (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_14274() { testInvalid("{{any, any}, (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_14275() { testInvalid("{{any, any}, (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_14276() { testInvalid("{{any, any}, (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_14277() { testInvalid("{{any, any}, (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_14278() { testInvalid("{{any, any}, (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_14279() { testInvalid("{{any, any}, (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_14280() { testInvalid("{{any, any}, (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_14281() { testInvalid("{{any, any}, (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_14282() { testValid("{{any, any}, (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_14283() { testValid("{{any, any}, (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_14284() { testInvalid("{{any, any}, (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_14285() { testInvalid("{{any, any}, (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_14286() { testInvalid("{{any, any}, (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_14287() { testInvalid("{{any, any}, (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_14288() { testValid("{{any, any}, (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_14289() { testInvalid("{{any, any}, (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_14290() { testValid("{{any, any}, (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_14291() { testInvalid("{{any, any}, (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_14292() { testInvalid("{{any, any}, (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_14293() { testInvalid("{{any, any}, (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_14294() { testInvalid("{{any, any}, (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_14295() { testInvalid("{{any, any}, (int & any)}","(!int | {any})"); }
		@Test public void test_14296() { testInvalid("{{any, any}, (int & any)}","({any, any} | {any})"); }
		@Test public void test_14297() { testInvalid("{{any, any}, (int & any)}","((any | any) | {any})"); }
		@Test public void test_14298() { testInvalid("{{any, any}, (int & any)}","((int | any) | {any})"); }
		@Test public void test_14299() { testInvalid("{{any, any}, (int & any)}","((any & any) | {any})"); }
		@Test public void test_14300() { testInvalid("{{any, any}, (int & any)}","((int & any) | {any})"); }
		@Test public void test_14301() { testInvalid("{{any, any}, (int & any)}","((any & int) | {any})"); }
		@Test public void test_14302() { testInvalid("{{any, any}, (int & any)}","({int} | {int})"); }
		@Test public void test_14303() { testInvalid("{{any, any}, (int & any)}","(!any | {int})"); }
		@Test public void test_14304() { testInvalid("{{any, any}, (int & any)}","(!int | {int})"); }
		@Test public void test_14305() { testInvalid("{{any, any}, (int & any)}","({any, int} | {int})"); }
		@Test public void test_14306() { testInvalid("{{any, any}, (int & any)}","((int & any) | {int})"); }
		@Test public void test_14307() { testInvalid("{{any, any}, (int & any)}","((any & int) | {int})"); }
		@Test public void test_14308() { testInvalid("{{any, any}, (int & any)}","((int & int) | {int})"); }
		@Test public void test_14309() { testInvalid("{{any, any}, (int & any)}","({any} | !any)"); }
		@Test public void test_14310() { testInvalid("{{any, any}, (int & any)}","({int} | !any)"); }
		@Test public void test_14311() { testInvalid("{{any, any}, (int & any)}","({any, any} | !any)"); }
		@Test public void test_14312() { testInvalid("{{any, any}, (int & any)}","({int, int} | !any)"); }
		@Test public void test_14313() { testInvalid("{{any, any}, (int & any)}","((any | any) | !any)"); }
		@Test public void test_14314() { testInvalid("{{any, any}, (int & any)}","((int | any) | !any)"); }
		@Test public void test_14315() { testInvalid("{{any, any}, (int & any)}","((int | int) | !any)"); }
		@Test public void test_14316() { testInvalid("{{any, any}, (int & any)}","((int & int) | !any)"); }
		@Test public void test_14317() { testInvalid("{{any, any}, (int & any)}","(!int | !int)"); }
		@Test public void test_14318() { testInvalid("{{any, any}, (int & any)}","({any, any} | !int)"); }
		@Test public void test_14319() { testInvalid("{{any, any}, (int & any)}","({int, int} | !int)"); }
		@Test public void test_14320() { testInvalid("{{any, any}, (int & any)}","((int | any) | !int)"); }
		@Test public void test_14321() { testInvalid("{{any, any}, (int & any)}","((any | int) | !int)"); }
		@Test public void test_14322() { testInvalid("{{any, any}, (int & any)}","((any & int) | !int)"); }
		@Test public void test_14323() { testInvalid("{{any, any}, (int & any)}","((int & int) | !int)"); }
		@Test public void test_14324() { testInvalid("{{any, any}, (int & any)}","({int} | {any, any})"); }
		@Test public void test_14325() { testInvalid("{{any, any}, (int & any)}","(!any | {any, any})"); }
		@Test public void test_14326() { testInvalid("{{any, any}, (int & any)}","(!int | {any, any})"); }
		@Test public void test_14327() { testInvalid("{{any, any}, (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_14328() { testInvalid("{{any, any}, (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_14329() { testInvalid("{{any, any}, (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_14330() { testInvalid("{{any, any}, (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_14331() { testInvalid("{{any, any}, (int & any)}","(!int | {int, any})"); }
		@Test public void test_14332() { testInvalid("{{any, any}, (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_14333() { testInvalid("{{any, any}, (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_14334() { testInvalid("{{any, any}, (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_14335() { testInvalid("{{any, any}, (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_14336() { testInvalid("{{any, any}, (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_14337() { testInvalid("{{any, any}, (int & any)}","({any} | {any, int})"); }
		@Test public void test_14338() { testInvalid("{{any, any}, (int & any)}","(!int | {any, int})"); }
		@Test public void test_14339() { testInvalid("{{any, any}, (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_14340() { testInvalid("{{any, any}, (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_14341() { testInvalid("{{any, any}, (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_14342() { testInvalid("{{any, any}, (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_14343() { testInvalid("{{any, any}, (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_14344() { testInvalid("{{any, any}, (int & any)}","(!any | {int, int})"); }
		@Test public void test_14345() { testInvalid("{{any, any}, (int & any)}","(!int | {int, int})"); }
		@Test public void test_14346() { testInvalid("{{any, any}, (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_14347() { testInvalid("{{any, any}, (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_14348() { testInvalid("{{any, any}, (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_14349() { testInvalid("{{any, any}, (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_14350() { testInvalid("{{any, any}, (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_14351() { testInvalid("{{any, any}, (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_14352() { testInvalid("{{any, any}, (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_14353() { testInvalid("{{any, any}, (int & any)}","({any} | (any | any))"); }
		@Test public void test_14354() { testInvalid("{{any, any}, (int & any)}","(!any | (any | any))"); }
		@Test public void test_14355() { testInvalid("{{any, any}, (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_14356() { testInvalid("{{any, any}, (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_14357() { testInvalid("{{any, any}, (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_14358() { testInvalid("{{any, any}, (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_14359() { testInvalid("{{any, any}, (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_14360() { testInvalid("{{any, any}, (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_14361() { testInvalid("{{any, any}, (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_14362() { testInvalid("{{any, any}, (int & any)}","({any} | (int | any))"); }
		@Test public void test_14363() { testInvalid("{{any, any}, (int & any)}","(!int | (int | any))"); }
		@Test public void test_14364() { testInvalid("{{any, any}, (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_14365() { testInvalid("{{any, any}, (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_14366() { testInvalid("{{any, any}, (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_14367() { testInvalid("{{any, any}, (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_14368() { testInvalid("{{any, any}, (int & any)}","({any} | (any | int))"); }
		@Test public void test_14369() { testInvalid("{{any, any}, (int & any)}","({int} | (any | int))"); }
		@Test public void test_14370() { testInvalid("{{any, any}, (int & any)}","(!any | (any | int))"); }
		@Test public void test_14371() { testInvalid("{{any, any}, (int & any)}","(!int | (any | int))"); }
		@Test public void test_14372() { testInvalid("{{any, any}, (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_14373() { testInvalid("{{any, any}, (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_14374() { testInvalid("{{any, any}, (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_14375() { testInvalid("{{any, any}, (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_14376() { testInvalid("{{any, any}, (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_14377() { testInvalid("{{any, any}, (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_14378() { testInvalid("{{any, any}, (int & any)}","({int} | (int | int))"); }
		@Test public void test_14379() { testInvalid("{{any, any}, (int & any)}","(!any | (int | int))"); }
		@Test public void test_14380() { testInvalid("{{any, any}, (int & any)}","(!int | (int | int))"); }
		@Test public void test_14381() { testInvalid("{{any, any}, (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_14382() { testInvalid("{{any, any}, (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_14383() { testInvalid("{{any, any}, (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14384() { testInvalid("{{any, any}, (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14385() { testInvalid("{{any, any}, (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14386() { testInvalid("{{any, any}, (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14387() { testInvalid("{{any, any}, (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14388() { testInvalid("{{any, any}, (int & any)}","(!any | (any & any))"); }
		@Test public void test_14389() { testInvalid("{{any, any}, (int & any)}","(!int | (any & any))"); }
		@Test public void test_14390() { testInvalid("{{any, any}, (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14391() { testInvalid("{{any, any}, (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14392() { testInvalid("{{any, any}, (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14393() { testInvalid("{{any, any}, (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14394() { testInvalid("{{any, any}, (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14395() { testInvalid("{{any, any}, (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14396() { testInvalid("{{any, any}, (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14397() { testInvalid("{{any, any}, (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14398() { testInvalid("{{any, any}, (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14399() { testInvalid("{{any, any}, (int & any)}","({any} | (int & any))"); }
		@Test public void test_14400() { testInvalid("{{int, any}, (int & any)}","{int}"); }
		@Test public void test_14401() { testInvalid("{{int, any}, (int & any)}","{any, any}"); }
		@Test public void test_14402() { testInvalid("{{int, any}, (int & any)}","{int, int}"); }
		@Test public void test_14403() { testInvalid("{{int, any}, (int & any)}","(any | int)"); }
		@Test public void test_14404() { testInvalid("{{int, any}, (int & any)}","(int & any)"); }
		@Test public void test_14405() { testInvalid("{{int, any}, (int & any)}","{{any}}"); }
		@Test public void test_14406() { testInvalid("{{int, any}, (int & any)}","{{int, any}}"); }
		@Test public void test_14407() { testInvalid("{{int, any}, (int & any)}","{{int, int}}"); }
		@Test public void test_14408() { testInvalid("{{int, any}, (int & any)}","{(any | int)}"); }
		@Test public void test_14409() { testInvalid("{{int, any}, (int & any)}","!{int, any}"); }
		@Test public void test_14410() { testInvalid("{{int, any}, (int & any)}","!{int, int}"); }
		@Test public void test_14411() { testValid("{{int, any}, (int & any)}","!(any | any)"); }
		@Test public void test_14412() { testValid("{{int, any}, (int & any)}","!(any & any)"); }
		@Test public void test_14413() { testInvalid("{{int, any}, (int & any)}","!(int & int)"); }
		@Test public void test_14414() { testInvalid("{{int, any}, (int & any)}","{{int}, {any}}"); }
		@Test public void test_14415() { testInvalid("{{int, any}, (int & any)}","{!int, {any}}"); }
		@Test public void test_14416() { testInvalid("{{int, any}, (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14417() { testInvalid("{{int, any}, (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14418() { testInvalid("{{int, any}, (int & any)}","{!int, {int}}"); }
		@Test public void test_14419() { testInvalid("{{int, any}, (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14420() { testInvalid("{{int, any}, (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14421() { testInvalid("{{int, any}, (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14422() { testInvalid("{{int, any}, (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14423() { testInvalid("{{int, any}, (int & any)}","{{any, any}, !int}"); }
		@Test public void test_14424() { testInvalid("{{int, any}, (int & any)}","{{any, int}, !int}"); }
		@Test public void test_14425() { testInvalid("{{int, any}, (int & any)}","{(any | any), !int}"); }
		@Test public void test_14426() { testInvalid("{{int, any}, (int & any)}","{(int | any), !int}"); }
		@Test public void test_14427() { testInvalid("{{int, any}, (int & any)}","{(any & any), !int}"); }
		@Test public void test_14428() { testInvalid("{{int, any}, (int & any)}","{(int & any), !int}"); }
		@Test public void test_14429() { testInvalid("{{int, any}, (int & any)}","{(int & int), !int}"); }
		@Test public void test_14430() { testInvalid("{{int, any}, (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_14431() { testInvalid("{{int, any}, (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_14432() { testInvalid("{{int, any}, (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_14433() { testInvalid("{{int, any}, (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_14434() { testInvalid("{{int, any}, (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_14435() { testInvalid("{{int, any}, (int & any)}","{!int, {int, any}}"); }
		@Test public void test_14436() { testInvalid("{{int, any}, (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_14437() { testInvalid("{{int, any}, (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_14438() { testInvalid("{{int, any}, (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_14439() { testInvalid("{{int, any}, (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_14440() { testInvalid("{{int, any}, (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_14441() { testInvalid("{{int, any}, (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_14442() { testInvalid("{{int, any}, (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_14443() { testInvalid("{{int, any}, (int & any)}","{!int, {int, int}}"); }
		@Test public void test_14444() { testInvalid("{{int, any}, (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_14445() { testInvalid("{{int, any}, (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_14446() { testInvalid("{{int, any}, (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_14447() { testInvalid("{{int, any}, (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_14448() { testInvalid("{{int, any}, (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_14449() { testInvalid("{{int, any}, (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_14450() { testInvalid("{{int, any}, (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_14451() { testInvalid("{{int, any}, (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_14452() { testInvalid("{{int, any}, (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_14453() { testInvalid("{{int, any}, (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_14454() { testInvalid("{{int, any}, (int & any)}","{!int, (int | any)}"); }
		@Test public void test_14455() { testInvalid("{{int, any}, (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_14456() { testInvalid("{{int, any}, (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_14457() { testInvalid("{{int, any}, (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_14458() { testInvalid("{{int, any}, (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_14459() { testInvalid("{{int, any}, (int & any)}","{!int, (any | int)}"); }
		@Test public void test_14460() { testInvalid("{{int, any}, (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_14461() { testInvalid("{{int, any}, (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_14462() { testInvalid("{{int, any}, (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_14463() { testInvalid("{{int, any}, (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_14464() { testInvalid("{{int, any}, (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_14465() { testValid("{{int, any}, (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_14466() { testInvalid("{{int, any}, (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_14467() { testInvalid("{{int, any}, (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_14468() { testInvalid("{{int, any}, (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_14469() { testInvalid("{{int, any}, (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_14470() { testInvalid("{{int, any}, (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_14471() { testInvalid("{{int, any}, (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_14472() { testInvalid("{{int, any}, (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_14473() { testInvalid("{{int, any}, (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_14474() { testInvalid("{{int, any}, (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_14475() { testValid("{{int, any}, (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_14476() { testInvalid("{{int, any}, (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_14477() { testInvalid("{{int, any}, (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_14478() { testInvalid("{{int, any}, (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_14479() { testInvalid("{{int, any}, (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_14480() { testValid("{{int, any}, (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_14481() { testInvalid("{{int, any}, (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_14482() { testInvalid("{{int, any}, (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_14483() { testInvalid("{{int, any}, (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_14484() { testInvalid("{{int, any}, (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_14485() { testInvalid("{{int, any}, (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_14486() { testInvalid("{{int, any}, (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_14487() { testInvalid("{{int, any}, (int & any)}","(!int | {any})"); }
		@Test public void test_14488() { testInvalid("{{int, any}, (int & any)}","({any, any} | {any})"); }
		@Test public void test_14489() { testInvalid("{{int, any}, (int & any)}","((any | any) | {any})"); }
		@Test public void test_14490() { testInvalid("{{int, any}, (int & any)}","((int | any) | {any})"); }
		@Test public void test_14491() { testInvalid("{{int, any}, (int & any)}","((any & any) | {any})"); }
		@Test public void test_14492() { testInvalid("{{int, any}, (int & any)}","((int & any) | {any})"); }
		@Test public void test_14493() { testInvalid("{{int, any}, (int & any)}","((any & int) | {any})"); }
		@Test public void test_14494() { testInvalid("{{int, any}, (int & any)}","({int} | {int})"); }
		@Test public void test_14495() { testInvalid("{{int, any}, (int & any)}","(!any | {int})"); }
		@Test public void test_14496() { testInvalid("{{int, any}, (int & any)}","(!int | {int})"); }
		@Test public void test_14497() { testInvalid("{{int, any}, (int & any)}","({any, int} | {int})"); }
		@Test public void test_14498() { testInvalid("{{int, any}, (int & any)}","((int & any) | {int})"); }
		@Test public void test_14499() { testInvalid("{{int, any}, (int & any)}","((any & int) | {int})"); }
		@Test public void test_14500() { testInvalid("{{int, any}, (int & any)}","((int & int) | {int})"); }
		@Test public void test_14501() { testInvalid("{{int, any}, (int & any)}","({any} | !any)"); }
		@Test public void test_14502() { testInvalid("{{int, any}, (int & any)}","({int} | !any)"); }
		@Test public void test_14503() { testInvalid("{{int, any}, (int & any)}","({any, any} | !any)"); }
		@Test public void test_14504() { testInvalid("{{int, any}, (int & any)}","({int, int} | !any)"); }
		@Test public void test_14505() { testInvalid("{{int, any}, (int & any)}","((any | any) | !any)"); }
		@Test public void test_14506() { testInvalid("{{int, any}, (int & any)}","((int | any) | !any)"); }
		@Test public void test_14507() { testInvalid("{{int, any}, (int & any)}","((int | int) | !any)"); }
		@Test public void test_14508() { testInvalid("{{int, any}, (int & any)}","((int & int) | !any)"); }
		@Test public void test_14509() { testInvalid("{{int, any}, (int & any)}","(!int | !int)"); }
		@Test public void test_14510() { testInvalid("{{int, any}, (int & any)}","({any, any} | !int)"); }
		@Test public void test_14511() { testInvalid("{{int, any}, (int & any)}","({int, int} | !int)"); }
		@Test public void test_14512() { testInvalid("{{int, any}, (int & any)}","((int | any) | !int)"); }
		@Test public void test_14513() { testInvalid("{{int, any}, (int & any)}","((any | int) | !int)"); }
		@Test public void test_14514() { testInvalid("{{int, any}, (int & any)}","((any & int) | !int)"); }
		@Test public void test_14515() { testInvalid("{{int, any}, (int & any)}","((int & int) | !int)"); }
		@Test public void test_14516() { testInvalid("{{int, any}, (int & any)}","({int} | {any, any})"); }
		@Test public void test_14517() { testInvalid("{{int, any}, (int & any)}","(!any | {any, any})"); }
		@Test public void test_14518() { testInvalid("{{int, any}, (int & any)}","(!int | {any, any})"); }
		@Test public void test_14519() { testInvalid("{{int, any}, (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_14520() { testInvalid("{{int, any}, (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_14521() { testInvalid("{{int, any}, (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_14522() { testInvalid("{{int, any}, (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_14523() { testInvalid("{{int, any}, (int & any)}","(!int | {int, any})"); }
		@Test public void test_14524() { testInvalid("{{int, any}, (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_14525() { testInvalid("{{int, any}, (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_14526() { testInvalid("{{int, any}, (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_14527() { testInvalid("{{int, any}, (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_14528() { testInvalid("{{int, any}, (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_14529() { testInvalid("{{int, any}, (int & any)}","({any} | {any, int})"); }
		@Test public void test_14530() { testInvalid("{{int, any}, (int & any)}","(!int | {any, int})"); }
		@Test public void test_14531() { testInvalid("{{int, any}, (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_14532() { testInvalid("{{int, any}, (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_14533() { testInvalid("{{int, any}, (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_14534() { testInvalid("{{int, any}, (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_14535() { testInvalid("{{int, any}, (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_14536() { testInvalid("{{int, any}, (int & any)}","(!any | {int, int})"); }
		@Test public void test_14537() { testInvalid("{{int, any}, (int & any)}","(!int | {int, int})"); }
		@Test public void test_14538() { testInvalid("{{int, any}, (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_14539() { testInvalid("{{int, any}, (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_14540() { testInvalid("{{int, any}, (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_14541() { testInvalid("{{int, any}, (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_14542() { testInvalid("{{int, any}, (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_14543() { testInvalid("{{int, any}, (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_14544() { testInvalid("{{int, any}, (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_14545() { testInvalid("{{int, any}, (int & any)}","({any} | (any | any))"); }
		@Test public void test_14546() { testInvalid("{{int, any}, (int & any)}","(!any | (any | any))"); }
		@Test public void test_14547() { testInvalid("{{int, any}, (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_14548() { testInvalid("{{int, any}, (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_14549() { testInvalid("{{int, any}, (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_14550() { testInvalid("{{int, any}, (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_14551() { testInvalid("{{int, any}, (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_14552() { testInvalid("{{int, any}, (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_14553() { testInvalid("{{int, any}, (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_14554() { testInvalid("{{int, any}, (int & any)}","({any} | (int | any))"); }
		@Test public void test_14555() { testInvalid("{{int, any}, (int & any)}","(!int | (int | any))"); }
		@Test public void test_14556() { testInvalid("{{int, any}, (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_14557() { testInvalid("{{int, any}, (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_14558() { testInvalid("{{int, any}, (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_14559() { testInvalid("{{int, any}, (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_14560() { testInvalid("{{int, any}, (int & any)}","({any} | (any | int))"); }
		@Test public void test_14561() { testInvalid("{{int, any}, (int & any)}","({int} | (any | int))"); }
		@Test public void test_14562() { testInvalid("{{int, any}, (int & any)}","(!any | (any | int))"); }
		@Test public void test_14563() { testInvalid("{{int, any}, (int & any)}","(!int | (any | int))"); }
		@Test public void test_14564() { testInvalid("{{int, any}, (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_14565() { testInvalid("{{int, any}, (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_14566() { testInvalid("{{int, any}, (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_14567() { testInvalid("{{int, any}, (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_14568() { testInvalid("{{int, any}, (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_14569() { testInvalid("{{int, any}, (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_14570() { testInvalid("{{int, any}, (int & any)}","({int} | (int | int))"); }
		@Test public void test_14571() { testInvalid("{{int, any}, (int & any)}","(!any | (int | int))"); }
		@Test public void test_14572() { testInvalid("{{int, any}, (int & any)}","(!int | (int | int))"); }
		@Test public void test_14573() { testInvalid("{{int, any}, (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_14574() { testInvalid("{{int, any}, (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_14575() { testInvalid("{{int, any}, (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14576() { testInvalid("{{int, any}, (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14577() { testInvalid("{{int, any}, (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14578() { testInvalid("{{int, any}, (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14579() { testInvalid("{{int, any}, (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14580() { testInvalid("{{int, any}, (int & any)}","(!any | (any & any))"); }
		@Test public void test_14581() { testInvalid("{{int, any}, (int & any)}","(!int | (any & any))"); }
		@Test public void test_14582() { testInvalid("{{int, any}, (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14583() { testInvalid("{{int, any}, (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14584() { testInvalid("{{int, any}, (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14585() { testInvalid("{{int, any}, (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14586() { testInvalid("{{int, any}, (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14587() { testInvalid("{{int, any}, (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14588() { testInvalid("{{int, any}, (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14589() { testInvalid("{{int, any}, (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14590() { testInvalid("{{int, any}, (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14591() { testInvalid("{{int, any}, (int & any)}","({any} | (int & any))"); }
		@Test public void test_14592() { testInvalid("{(any | int), (int & any)}","{int}"); }
		@Test public void test_14593() { testInvalid("{(any | int), (int & any)}","{any, any}"); }
		@Test public void test_14594() { testValid("{(any | int), (int & any)}","{int, int}"); }
		@Test public void test_14595() { testInvalid("{(any | int), (int & any)}","(any | int)"); }
		@Test public void test_14596() { testInvalid("{(any | int), (int & any)}","(int & any)"); }
		@Test public void test_14597() { testInvalid("{(any | int), (int & any)}","{{any}}"); }
		@Test public void test_14598() { testInvalid("{(any | int), (int & any)}","{{int, any}}"); }
		@Test public void test_14599() { testInvalid("{(any | int), (int & any)}","{{int, int}}"); }
		@Test public void test_14600() { testInvalid("{(any | int), (int & any)}","{(any | int)}"); }
		@Test public void test_14601() { testInvalid("{(any | int), (int & any)}","!{int, any}"); }
		@Test public void test_14602() { testInvalid("{(any | int), (int & any)}","!{int, int}"); }
		@Test public void test_14603() { testValid("{(any | int), (int & any)}","!(any | any)"); }
		@Test public void test_14604() { testValid("{(any | int), (int & any)}","!(any & any)"); }
		@Test public void test_14605() { testInvalid("{(any | int), (int & any)}","!(int & int)"); }
		@Test public void test_14606() { testInvalid("{(any | int), (int & any)}","{{int}, {any}}"); }
		@Test public void test_14607() { testInvalid("{(any | int), (int & any)}","{!int, {any}}"); }
		@Test public void test_14608() { testInvalid("{(any | int), (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14609() { testInvalid("{(any | int), (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14610() { testInvalid("{(any | int), (int & any)}","{!int, {int}}"); }
		@Test public void test_14611() { testInvalid("{(any | int), (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14612() { testInvalid("{(any | int), (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14613() { testInvalid("{(any | int), (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14614() { testInvalid("{(any | int), (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14615() { testInvalid("{(any | int), (int & any)}","{{any, any}, !int}"); }
		@Test public void test_14616() { testInvalid("{(any | int), (int & any)}","{{any, int}, !int}"); }
		@Test public void test_14617() { testInvalid("{(any | int), (int & any)}","{(any | any), !int}"); }
		@Test public void test_14618() { testInvalid("{(any | int), (int & any)}","{(int | any), !int}"); }
		@Test public void test_14619() { testInvalid("{(any | int), (int & any)}","{(any & any), !int}"); }
		@Test public void test_14620() { testInvalid("{(any | int), (int & any)}","{(int & any), !int}"); }
		@Test public void test_14621() { testInvalid("{(any | int), (int & any)}","{(int & int), !int}"); }
		@Test public void test_14622() { testInvalid("{(any | int), (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_14623() { testInvalid("{(any | int), (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_14624() { testInvalid("{(any | int), (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_14625() { testInvalid("{(any | int), (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_14626() { testInvalid("{(any | int), (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_14627() { testInvalid("{(any | int), (int & any)}","{!int, {int, any}}"); }
		@Test public void test_14628() { testInvalid("{(any | int), (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_14629() { testInvalid("{(any | int), (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_14630() { testInvalid("{(any | int), (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_14631() { testInvalid("{(any | int), (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_14632() { testInvalid("{(any | int), (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_14633() { testInvalid("{(any | int), (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_14634() { testInvalid("{(any | int), (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_14635() { testInvalid("{(any | int), (int & any)}","{!int, {int, int}}"); }
		@Test public void test_14636() { testInvalid("{(any | int), (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_14637() { testInvalid("{(any | int), (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_14638() { testInvalid("{(any | int), (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_14639() { testInvalid("{(any | int), (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_14640() { testInvalid("{(any | int), (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_14641() { testInvalid("{(any | int), (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_14642() { testInvalid("{(any | int), (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_14643() { testInvalid("{(any | int), (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_14644() { testInvalid("{(any | int), (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_14645() { testInvalid("{(any | int), (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_14646() { testInvalid("{(any | int), (int & any)}","{!int, (int | any)}"); }
		@Test public void test_14647() { testInvalid("{(any | int), (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_14648() { testInvalid("{(any | int), (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_14649() { testInvalid("{(any | int), (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_14650() { testInvalid("{(any | int), (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_14651() { testInvalid("{(any | int), (int & any)}","{!int, (any | int)}"); }
		@Test public void test_14652() { testInvalid("{(any | int), (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_14653() { testInvalid("{(any | int), (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_14654() { testInvalid("{(any | int), (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_14655() { testValid("{(any | int), (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_14656() { testValid("{(any | int), (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_14657() { testValid("{(any | int), (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_14658() { testInvalid("{(any | int), (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_14659() { testInvalid("{(any | int), (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_14660() { testInvalid("{(any | int), (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_14661() { testInvalid("{(any | int), (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_14662() { testInvalid("{(any | int), (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_14663() { testInvalid("{(any | int), (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_14664() { testValid("{(any | int), (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_14665() { testValid("{(any | int), (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_14666() { testValid("{(any | int), (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_14667() { testValid("{(any | int), (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_14668() { testValid("{(any | int), (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_14669() { testValid("{(any | int), (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_14670() { testValid("{(any | int), (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_14671() { testValid("{(any | int), (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_14672() { testValid("{(any | int), (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_14673() { testValid("{(any | int), (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_14674() { testValid("{(any | int), (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_14675() { testValid("{(any | int), (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_14676() { testValid("{(any | int), (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_14677() { testValid("{(any | int), (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_14678() { testValid("{(any | int), (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_14679() { testInvalid("{(any | int), (int & any)}","(!int | {any})"); }
		@Test public void test_14680() { testInvalid("{(any | int), (int & any)}","({any, any} | {any})"); }
		@Test public void test_14681() { testInvalid("{(any | int), (int & any)}","((any | any) | {any})"); }
		@Test public void test_14682() { testInvalid("{(any | int), (int & any)}","((int | any) | {any})"); }
		@Test public void test_14683() { testInvalid("{(any | int), (int & any)}","((any & any) | {any})"); }
		@Test public void test_14684() { testInvalid("{(any | int), (int & any)}","((int & any) | {any})"); }
		@Test public void test_14685() { testInvalid("{(any | int), (int & any)}","((any & int) | {any})"); }
		@Test public void test_14686() { testInvalid("{(any | int), (int & any)}","({int} | {int})"); }
		@Test public void test_14687() { testInvalid("{(any | int), (int & any)}","(!any | {int})"); }
		@Test public void test_14688() { testInvalid("{(any | int), (int & any)}","(!int | {int})"); }
		@Test public void test_14689() { testInvalid("{(any | int), (int & any)}","({any, int} | {int})"); }
		@Test public void test_14690() { testInvalid("{(any | int), (int & any)}","((int & any) | {int})"); }
		@Test public void test_14691() { testInvalid("{(any | int), (int & any)}","((any & int) | {int})"); }
		@Test public void test_14692() { testInvalid("{(any | int), (int & any)}","((int & int) | {int})"); }
		@Test public void test_14693() { testInvalid("{(any | int), (int & any)}","({any} | !any)"); }
		@Test public void test_14694() { testInvalid("{(any | int), (int & any)}","({int} | !any)"); }
		@Test public void test_14695() { testInvalid("{(any | int), (int & any)}","({any, any} | !any)"); }
		@Test public void test_14696() { testValid("{(any | int), (int & any)}","({int, int} | !any)"); }
		@Test public void test_14697() { testInvalid("{(any | int), (int & any)}","((any | any) | !any)"); }
		@Test public void test_14698() { testInvalid("{(any | int), (int & any)}","((int | any) | !any)"); }
		@Test public void test_14699() { testInvalid("{(any | int), (int & any)}","((int | int) | !any)"); }
		@Test public void test_14700() { testInvalid("{(any | int), (int & any)}","((int & int) | !any)"); }
		@Test public void test_14701() { testInvalid("{(any | int), (int & any)}","(!int | !int)"); }
		@Test public void test_14702() { testInvalid("{(any | int), (int & any)}","({any, any} | !int)"); }
		@Test public void test_14703() { testInvalid("{(any | int), (int & any)}","({int, int} | !int)"); }
		@Test public void test_14704() { testInvalid("{(any | int), (int & any)}","((int | any) | !int)"); }
		@Test public void test_14705() { testInvalid("{(any | int), (int & any)}","((any | int) | !int)"); }
		@Test public void test_14706() { testInvalid("{(any | int), (int & any)}","((any & int) | !int)"); }
		@Test public void test_14707() { testInvalid("{(any | int), (int & any)}","((int & int) | !int)"); }
		@Test public void test_14708() { testInvalid("{(any | int), (int & any)}","({int} | {any, any})"); }
		@Test public void test_14709() { testInvalid("{(any | int), (int & any)}","(!any | {any, any})"); }
		@Test public void test_14710() { testInvalid("{(any | int), (int & any)}","(!int | {any, any})"); }
		@Test public void test_14711() { testInvalid("{(any | int), (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_14712() { testInvalid("{(any | int), (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_14713() { testInvalid("{(any | int), (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_14714() { testInvalid("{(any | int), (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_14715() { testInvalid("{(any | int), (int & any)}","(!int | {int, any})"); }
		@Test public void test_14716() { testInvalid("{(any | int), (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_14717() { testInvalid("{(any | int), (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_14718() { testInvalid("{(any | int), (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_14719() { testInvalid("{(any | int), (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_14720() { testInvalid("{(any | int), (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_14721() { testInvalid("{(any | int), (int & any)}","({any} | {any, int})"); }
		@Test public void test_14722() { testInvalid("{(any | int), (int & any)}","(!int | {any, int})"); }
		@Test public void test_14723() { testValid("{(any | int), (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_14724() { testInvalid("{(any | int), (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_14725() { testInvalid("{(any | int), (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_14726() { testInvalid("{(any | int), (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_14727() { testInvalid("{(any | int), (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_14728() { testValid("{(any | int), (int & any)}","(!any | {int, int})"); }
		@Test public void test_14729() { testInvalid("{(any | int), (int & any)}","(!int | {int, int})"); }
		@Test public void test_14730() { testInvalid("{(any | int), (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_14731() { testValid("{(any | int), (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_14732() { testInvalid("{(any | int), (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_14733() { testInvalid("{(any | int), (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_14734() { testInvalid("{(any | int), (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_14735() { testInvalid("{(any | int), (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_14736() { testInvalid("{(any | int), (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_14737() { testInvalid("{(any | int), (int & any)}","({any} | (any | any))"); }
		@Test public void test_14738() { testInvalid("{(any | int), (int & any)}","(!any | (any | any))"); }
		@Test public void test_14739() { testInvalid("{(any | int), (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_14740() { testInvalid("{(any | int), (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_14741() { testInvalid("{(any | int), (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_14742() { testInvalid("{(any | int), (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_14743() { testInvalid("{(any | int), (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_14744() { testInvalid("{(any | int), (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_14745() { testInvalid("{(any | int), (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_14746() { testInvalid("{(any | int), (int & any)}","({any} | (int | any))"); }
		@Test public void test_14747() { testInvalid("{(any | int), (int & any)}","(!int | (int | any))"); }
		@Test public void test_14748() { testInvalid("{(any | int), (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_14749() { testInvalid("{(any | int), (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_14750() { testInvalid("{(any | int), (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_14751() { testInvalid("{(any | int), (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_14752() { testInvalid("{(any | int), (int & any)}","({any} | (any | int))"); }
		@Test public void test_14753() { testInvalid("{(any | int), (int & any)}","({int} | (any | int))"); }
		@Test public void test_14754() { testInvalid("{(any | int), (int & any)}","(!any | (any | int))"); }
		@Test public void test_14755() { testInvalid("{(any | int), (int & any)}","(!int | (any | int))"); }
		@Test public void test_14756() { testInvalid("{(any | int), (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_14757() { testInvalid("{(any | int), (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_14758() { testInvalid("{(any | int), (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_14759() { testInvalid("{(any | int), (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_14760() { testInvalid("{(any | int), (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_14761() { testInvalid("{(any | int), (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_14762() { testInvalid("{(any | int), (int & any)}","({int} | (int | int))"); }
		@Test public void test_14763() { testInvalid("{(any | int), (int & any)}","(!any | (int | int))"); }
		@Test public void test_14764() { testInvalid("{(any | int), (int & any)}","(!int | (int | int))"); }
		@Test public void test_14765() { testInvalid("{(any | int), (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_14766() { testInvalid("{(any | int), (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_14767() { testInvalid("{(any | int), (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14768() { testInvalid("{(any | int), (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14769() { testInvalid("{(any | int), (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14770() { testInvalid("{(any | int), (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14771() { testInvalid("{(any | int), (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14772() { testInvalid("{(any | int), (int & any)}","(!any | (any & any))"); }
		@Test public void test_14773() { testInvalid("{(any | int), (int & any)}","(!int | (any & any))"); }
		@Test public void test_14774() { testInvalid("{(any | int), (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14775() { testInvalid("{(any | int), (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14776() { testInvalid("{(any | int), (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14777() { testInvalid("{(any | int), (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14778() { testInvalid("{(any | int), (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14779() { testInvalid("{(any | int), (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14780() { testInvalid("{(any | int), (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14781() { testInvalid("{(any | int), (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14782() { testInvalid("{(any | int), (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14783() { testInvalid("{(any | int), (int & any)}","({any} | (int & any))"); }
		@Test public void test_14784() { testInvalid("{(any & any), (int & any)}","{int}"); }
		@Test public void test_14785() { testInvalid("{(any & any), (int & any)}","{any, any}"); }
		@Test public void test_14786() { testValid("{(any & any), (int & any)}","{int, int}"); }
		@Test public void test_14787() { testInvalid("{(any & any), (int & any)}","(any | int)"); }
		@Test public void test_14788() { testInvalid("{(any & any), (int & any)}","(int & any)"); }
		@Test public void test_14789() { testInvalid("{(any & any), (int & any)}","{{any}}"); }
		@Test public void test_14790() { testInvalid("{(any & any), (int & any)}","{{int, any}}"); }
		@Test public void test_14791() { testInvalid("{(any & any), (int & any)}","{{int, int}}"); }
		@Test public void test_14792() { testInvalid("{(any & any), (int & any)}","{(any | int)}"); }
		@Test public void test_14793() { testInvalid("{(any & any), (int & any)}","!{int, any}"); }
		@Test public void test_14794() { testInvalid("{(any & any), (int & any)}","!{int, int}"); }
		@Test public void test_14795() { testValid("{(any & any), (int & any)}","!(any | any)"); }
		@Test public void test_14796() { testValid("{(any & any), (int & any)}","!(any & any)"); }
		@Test public void test_14797() { testInvalid("{(any & any), (int & any)}","!(int & int)"); }
		@Test public void test_14798() { testInvalid("{(any & any), (int & any)}","{{int}, {any}}"); }
		@Test public void test_14799() { testInvalid("{(any & any), (int & any)}","{!int, {any}}"); }
		@Test public void test_14800() { testInvalid("{(any & any), (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14801() { testInvalid("{(any & any), (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14802() { testInvalid("{(any & any), (int & any)}","{!int, {int}}"); }
		@Test public void test_14803() { testInvalid("{(any & any), (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14804() { testInvalid("{(any & any), (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14805() { testInvalid("{(any & any), (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14806() { testInvalid("{(any & any), (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14807() { testInvalid("{(any & any), (int & any)}","{{any, any}, !int}"); }
		@Test public void test_14808() { testInvalid("{(any & any), (int & any)}","{{any, int}, !int}"); }
		@Test public void test_14809() { testInvalid("{(any & any), (int & any)}","{(any | any), !int}"); }
		@Test public void test_14810() { testInvalid("{(any & any), (int & any)}","{(int | any), !int}"); }
		@Test public void test_14811() { testInvalid("{(any & any), (int & any)}","{(any & any), !int}"); }
		@Test public void test_14812() { testInvalid("{(any & any), (int & any)}","{(int & any), !int}"); }
		@Test public void test_14813() { testInvalid("{(any & any), (int & any)}","{(int & int), !int}"); }
		@Test public void test_14814() { testInvalid("{(any & any), (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_14815() { testInvalid("{(any & any), (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_14816() { testInvalid("{(any & any), (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_14817() { testInvalid("{(any & any), (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_14818() { testInvalid("{(any & any), (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_14819() { testInvalid("{(any & any), (int & any)}","{!int, {int, any}}"); }
		@Test public void test_14820() { testInvalid("{(any & any), (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_14821() { testInvalid("{(any & any), (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_14822() { testInvalid("{(any & any), (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_14823() { testInvalid("{(any & any), (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_14824() { testInvalid("{(any & any), (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_14825() { testInvalid("{(any & any), (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_14826() { testInvalid("{(any & any), (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_14827() { testInvalid("{(any & any), (int & any)}","{!int, {int, int}}"); }
		@Test public void test_14828() { testInvalid("{(any & any), (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_14829() { testInvalid("{(any & any), (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_14830() { testInvalid("{(any & any), (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_14831() { testInvalid("{(any & any), (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_14832() { testInvalid("{(any & any), (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_14833() { testInvalid("{(any & any), (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_14834() { testInvalid("{(any & any), (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_14835() { testInvalid("{(any & any), (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_14836() { testInvalid("{(any & any), (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_14837() { testInvalid("{(any & any), (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_14838() { testInvalid("{(any & any), (int & any)}","{!int, (int | any)}"); }
		@Test public void test_14839() { testInvalid("{(any & any), (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_14840() { testInvalid("{(any & any), (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_14841() { testInvalid("{(any & any), (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_14842() { testInvalid("{(any & any), (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_14843() { testInvalid("{(any & any), (int & any)}","{!int, (any | int)}"); }
		@Test public void test_14844() { testInvalid("{(any & any), (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_14845() { testInvalid("{(any & any), (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_14846() { testInvalid("{(any & any), (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_14847() { testValid("{(any & any), (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_14848() { testValid("{(any & any), (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_14849() { testValid("{(any & any), (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_14850() { testInvalid("{(any & any), (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_14851() { testInvalid("{(any & any), (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_14852() { testInvalid("{(any & any), (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_14853() { testInvalid("{(any & any), (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_14854() { testInvalid("{(any & any), (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_14855() { testInvalid("{(any & any), (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_14856() { testValid("{(any & any), (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_14857() { testValid("{(any & any), (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_14858() { testValid("{(any & any), (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_14859() { testValid("{(any & any), (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_14860() { testValid("{(any & any), (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_14861() { testValid("{(any & any), (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_14862() { testValid("{(any & any), (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_14863() { testValid("{(any & any), (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_14864() { testValid("{(any & any), (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_14865() { testValid("{(any & any), (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_14866() { testValid("{(any & any), (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_14867() { testValid("{(any & any), (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_14868() { testValid("{(any & any), (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_14869() { testValid("{(any & any), (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_14870() { testValid("{(any & any), (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_14871() { testInvalid("{(any & any), (int & any)}","(!int | {any})"); }
		@Test public void test_14872() { testInvalid("{(any & any), (int & any)}","({any, any} | {any})"); }
		@Test public void test_14873() { testInvalid("{(any & any), (int & any)}","((any | any) | {any})"); }
		@Test public void test_14874() { testInvalid("{(any & any), (int & any)}","((int | any) | {any})"); }
		@Test public void test_14875() { testInvalid("{(any & any), (int & any)}","((any & any) | {any})"); }
		@Test public void test_14876() { testInvalid("{(any & any), (int & any)}","((int & any) | {any})"); }
		@Test public void test_14877() { testInvalid("{(any & any), (int & any)}","((any & int) | {any})"); }
		@Test public void test_14878() { testInvalid("{(any & any), (int & any)}","({int} | {int})"); }
		@Test public void test_14879() { testInvalid("{(any & any), (int & any)}","(!any | {int})"); }
		@Test public void test_14880() { testInvalid("{(any & any), (int & any)}","(!int | {int})"); }
		@Test public void test_14881() { testInvalid("{(any & any), (int & any)}","({any, int} | {int})"); }
		@Test public void test_14882() { testInvalid("{(any & any), (int & any)}","((int & any) | {int})"); }
		@Test public void test_14883() { testInvalid("{(any & any), (int & any)}","((any & int) | {int})"); }
		@Test public void test_14884() { testInvalid("{(any & any), (int & any)}","((int & int) | {int})"); }
		@Test public void test_14885() { testInvalid("{(any & any), (int & any)}","({any} | !any)"); }
		@Test public void test_14886() { testInvalid("{(any & any), (int & any)}","({int} | !any)"); }
		@Test public void test_14887() { testInvalid("{(any & any), (int & any)}","({any, any} | !any)"); }
		@Test public void test_14888() { testValid("{(any & any), (int & any)}","({int, int} | !any)"); }
		@Test public void test_14889() { testInvalid("{(any & any), (int & any)}","((any | any) | !any)"); }
		@Test public void test_14890() { testInvalid("{(any & any), (int & any)}","((int | any) | !any)"); }
		@Test public void test_14891() { testInvalid("{(any & any), (int & any)}","((int | int) | !any)"); }
		@Test public void test_14892() { testInvalid("{(any & any), (int & any)}","((int & int) | !any)"); }
		@Test public void test_14893() { testInvalid("{(any & any), (int & any)}","(!int | !int)"); }
		@Test public void test_14894() { testInvalid("{(any & any), (int & any)}","({any, any} | !int)"); }
		@Test public void test_14895() { testInvalid("{(any & any), (int & any)}","({int, int} | !int)"); }
		@Test public void test_14896() { testInvalid("{(any & any), (int & any)}","((int | any) | !int)"); }
		@Test public void test_14897() { testInvalid("{(any & any), (int & any)}","((any | int) | !int)"); }
		@Test public void test_14898() { testInvalid("{(any & any), (int & any)}","((any & int) | !int)"); }
		@Test public void test_14899() { testInvalid("{(any & any), (int & any)}","((int & int) | !int)"); }
		@Test public void test_14900() { testInvalid("{(any & any), (int & any)}","({int} | {any, any})"); }
		@Test public void test_14901() { testInvalid("{(any & any), (int & any)}","(!any | {any, any})"); }
		@Test public void test_14902() { testInvalid("{(any & any), (int & any)}","(!int | {any, any})"); }
		@Test public void test_14903() { testInvalid("{(any & any), (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_14904() { testInvalid("{(any & any), (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_14905() { testInvalid("{(any & any), (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_14906() { testInvalid("{(any & any), (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_14907() { testInvalid("{(any & any), (int & any)}","(!int | {int, any})"); }
		@Test public void test_14908() { testInvalid("{(any & any), (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_14909() { testInvalid("{(any & any), (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_14910() { testInvalid("{(any & any), (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_14911() { testInvalid("{(any & any), (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_14912() { testInvalid("{(any & any), (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_14913() { testInvalid("{(any & any), (int & any)}","({any} | {any, int})"); }
		@Test public void test_14914() { testInvalid("{(any & any), (int & any)}","(!int | {any, int})"); }
		@Test public void test_14915() { testValid("{(any & any), (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_14916() { testInvalid("{(any & any), (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_14917() { testInvalid("{(any & any), (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_14918() { testInvalid("{(any & any), (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_14919() { testInvalid("{(any & any), (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_14920() { testValid("{(any & any), (int & any)}","(!any | {int, int})"); }
		@Test public void test_14921() { testInvalid("{(any & any), (int & any)}","(!int | {int, int})"); }
		@Test public void test_14922() { testInvalid("{(any & any), (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_14923() { testValid("{(any & any), (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_14924() { testInvalid("{(any & any), (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_14925() { testInvalid("{(any & any), (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_14926() { testInvalid("{(any & any), (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_14927() { testInvalid("{(any & any), (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_14928() { testInvalid("{(any & any), (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_14929() { testInvalid("{(any & any), (int & any)}","({any} | (any | any))"); }
		@Test public void test_14930() { testInvalid("{(any & any), (int & any)}","(!any | (any | any))"); }
		@Test public void test_14931() { testInvalid("{(any & any), (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_14932() { testInvalid("{(any & any), (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_14933() { testInvalid("{(any & any), (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_14934() { testInvalid("{(any & any), (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_14935() { testInvalid("{(any & any), (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_14936() { testInvalid("{(any & any), (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_14937() { testInvalid("{(any & any), (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_14938() { testInvalid("{(any & any), (int & any)}","({any} | (int | any))"); }
		@Test public void test_14939() { testInvalid("{(any & any), (int & any)}","(!int | (int | any))"); }
		@Test public void test_14940() { testInvalid("{(any & any), (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_14941() { testInvalid("{(any & any), (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_14942() { testInvalid("{(any & any), (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_14943() { testInvalid("{(any & any), (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_14944() { testInvalid("{(any & any), (int & any)}","({any} | (any | int))"); }
		@Test public void test_14945() { testInvalid("{(any & any), (int & any)}","({int} | (any | int))"); }
		@Test public void test_14946() { testInvalid("{(any & any), (int & any)}","(!any | (any | int))"); }
		@Test public void test_14947() { testInvalid("{(any & any), (int & any)}","(!int | (any | int))"); }
		@Test public void test_14948() { testInvalid("{(any & any), (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_14949() { testInvalid("{(any & any), (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_14950() { testInvalid("{(any & any), (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_14951() { testInvalid("{(any & any), (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_14952() { testInvalid("{(any & any), (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_14953() { testInvalid("{(any & any), (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_14954() { testInvalid("{(any & any), (int & any)}","({int} | (int | int))"); }
		@Test public void test_14955() { testInvalid("{(any & any), (int & any)}","(!any | (int | int))"); }
		@Test public void test_14956() { testInvalid("{(any & any), (int & any)}","(!int | (int | int))"); }
		@Test public void test_14957() { testInvalid("{(any & any), (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_14958() { testInvalid("{(any & any), (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_14959() { testInvalid("{(any & any), (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_14960() { testInvalid("{(any & any), (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_14961() { testInvalid("{(any & any), (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_14962() { testInvalid("{(any & any), (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_14963() { testInvalid("{(any & any), (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_14964() { testInvalid("{(any & any), (int & any)}","(!any | (any & any))"); }
		@Test public void test_14965() { testInvalid("{(any & any), (int & any)}","(!int | (any & any))"); }
		@Test public void test_14966() { testInvalid("{(any & any), (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_14967() { testInvalid("{(any & any), (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_14968() { testInvalid("{(any & any), (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_14969() { testInvalid("{(any & any), (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_14970() { testInvalid("{(any & any), (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_14971() { testInvalid("{(any & any), (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_14972() { testInvalid("{(any & any), (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_14973() { testInvalid("{(any & any), (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_14974() { testInvalid("{(any & any), (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_14975() { testInvalid("{(any & any), (int & any)}","({any} | (int & any))"); }
		@Test public void test_14976() { testInvalid("{(int & any), (int & any)}","{int}"); }
		@Test public void test_14977() { testInvalid("{(int & any), (int & any)}","{any, any}"); }
		@Test public void test_14978() { testValid("{(int & any), (int & any)}","{int, int}"); }
		@Test public void test_14979() { testInvalid("{(int & any), (int & any)}","(any | int)"); }
		@Test public void test_14980() { testInvalid("{(int & any), (int & any)}","(int & any)"); }
		@Test public void test_14981() { testInvalid("{(int & any), (int & any)}","{{any}}"); }
		@Test public void test_14982() { testInvalid("{(int & any), (int & any)}","{{int, any}}"); }
		@Test public void test_14983() { testInvalid("{(int & any), (int & any)}","{{int, int}}"); }
		@Test public void test_14984() { testInvalid("{(int & any), (int & any)}","{(any | int)}"); }
		@Test public void test_14985() { testInvalid("{(int & any), (int & any)}","!{int, any}"); }
		@Test public void test_14986() { testInvalid("{(int & any), (int & any)}","!{int, int}"); }
		@Test public void test_14987() { testValid("{(int & any), (int & any)}","!(any | any)"); }
		@Test public void test_14988() { testValid("{(int & any), (int & any)}","!(any & any)"); }
		@Test public void test_14989() { testInvalid("{(int & any), (int & any)}","!(int & int)"); }
		@Test public void test_14990() { testInvalid("{(int & any), (int & any)}","{{int}, {any}}"); }
		@Test public void test_14991() { testInvalid("{(int & any), (int & any)}","{!int, {any}}"); }
		@Test public void test_14992() { testInvalid("{(int & any), (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_14993() { testInvalid("{(int & any), (int & any)}","{(any | int), {any}}"); }
		@Test public void test_14994() { testInvalid("{(int & any), (int & any)}","{!int, {int}}"); }
		@Test public void test_14995() { testInvalid("{(int & any), (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_14996() { testInvalid("{(int & any), (int & any)}","{(any | any), {int}}"); }
		@Test public void test_14997() { testInvalid("{(int & any), (int & any)}","{(any & any), {int}}"); }
		@Test public void test_14998() { testInvalid("{(int & any), (int & any)}","{(any & int), {int}}"); }
		@Test public void test_14999() { testInvalid("{(int & any), (int & any)}","{{any, any}, !int}"); }
		@Test public void test_15000() { testInvalid("{(int & any), (int & any)}","{{any, int}, !int}"); }
		@Test public void test_15001() { testInvalid("{(int & any), (int & any)}","{(any | any), !int}"); }
		@Test public void test_15002() { testInvalid("{(int & any), (int & any)}","{(int | any), !int}"); }
		@Test public void test_15003() { testInvalid("{(int & any), (int & any)}","{(any & any), !int}"); }
		@Test public void test_15004() { testInvalid("{(int & any), (int & any)}","{(int & any), !int}"); }
		@Test public void test_15005() { testInvalid("{(int & any), (int & any)}","{(int & int), !int}"); }
		@Test public void test_15006() { testInvalid("{(int & any), (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_15007() { testInvalid("{(int & any), (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_15008() { testInvalid("{(int & any), (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_15009() { testInvalid("{(int & any), (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_15010() { testInvalid("{(int & any), (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_15011() { testInvalid("{(int & any), (int & any)}","{!int, {int, any}}"); }
		@Test public void test_15012() { testInvalid("{(int & any), (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_15013() { testInvalid("{(int & any), (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_15014() { testInvalid("{(int & any), (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_15015() { testInvalid("{(int & any), (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_15016() { testInvalid("{(int & any), (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_15017() { testInvalid("{(int & any), (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_15018() { testInvalid("{(int & any), (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_15019() { testInvalid("{(int & any), (int & any)}","{!int, {int, int}}"); }
		@Test public void test_15020() { testInvalid("{(int & any), (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_15021() { testInvalid("{(int & any), (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_15022() { testInvalid("{(int & any), (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_15023() { testInvalid("{(int & any), (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_15024() { testInvalid("{(int & any), (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_15025() { testInvalid("{(int & any), (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_15026() { testInvalid("{(int & any), (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_15027() { testInvalid("{(int & any), (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_15028() { testInvalid("{(int & any), (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_15029() { testInvalid("{(int & any), (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_15030() { testInvalid("{(int & any), (int & any)}","{!int, (int | any)}"); }
		@Test public void test_15031() { testInvalid("{(int & any), (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_15032() { testInvalid("{(int & any), (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_15033() { testInvalid("{(int & any), (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_15034() { testInvalid("{(int & any), (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_15035() { testInvalid("{(int & any), (int & any)}","{!int, (any | int)}"); }
		@Test public void test_15036() { testInvalid("{(int & any), (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_15037() { testInvalid("{(int & any), (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_15038() { testInvalid("{(int & any), (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_15039() { testInvalid("{(int & any), (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_15040() { testInvalid("{(int & any), (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_15041() { testInvalid("{(int & any), (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_15042() { testInvalid("{(int & any), (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_15043() { testInvalid("{(int & any), (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_15044() { testInvalid("{(int & any), (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_15045() { testInvalid("{(int & any), (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_15046() { testInvalid("{(int & any), (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_15047() { testInvalid("{(int & any), (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_15048() { testInvalid("{(int & any), (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_15049() { testInvalid("{(int & any), (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_15050() { testInvalid("{(int & any), (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_15051() { testInvalid("{(int & any), (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_15052() { testInvalid("{(int & any), (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_15053() { testInvalid("{(int & any), (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_15054() { testValid("{(int & any), (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_15055() { testValid("{(int & any), (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_15056() { testInvalid("{(int & any), (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_15057() { testInvalid("{(int & any), (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_15058() { testInvalid("{(int & any), (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_15059() { testValid("{(int & any), (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_15060() { testInvalid("{(int & any), (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_15061() { testValid("{(int & any), (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_15062() { testValid("{(int & any), (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_15063() { testInvalid("{(int & any), (int & any)}","(!int | {any})"); }
		@Test public void test_15064() { testInvalid("{(int & any), (int & any)}","({any, any} | {any})"); }
		@Test public void test_15065() { testInvalid("{(int & any), (int & any)}","((any | any) | {any})"); }
		@Test public void test_15066() { testInvalid("{(int & any), (int & any)}","((int | any) | {any})"); }
		@Test public void test_15067() { testInvalid("{(int & any), (int & any)}","((any & any) | {any})"); }
		@Test public void test_15068() { testInvalid("{(int & any), (int & any)}","((int & any) | {any})"); }
		@Test public void test_15069() { testInvalid("{(int & any), (int & any)}","((any & int) | {any})"); }
		@Test public void test_15070() { testInvalid("{(int & any), (int & any)}","({int} | {int})"); }
		@Test public void test_15071() { testInvalid("{(int & any), (int & any)}","(!any | {int})"); }
		@Test public void test_15072() { testInvalid("{(int & any), (int & any)}","(!int | {int})"); }
		@Test public void test_15073() { testInvalid("{(int & any), (int & any)}","({any, int} | {int})"); }
		@Test public void test_15074() { testInvalid("{(int & any), (int & any)}","((int & any) | {int})"); }
		@Test public void test_15075() { testInvalid("{(int & any), (int & any)}","((any & int) | {int})"); }
		@Test public void test_15076() { testInvalid("{(int & any), (int & any)}","((int & int) | {int})"); }
		@Test public void test_15077() { testInvalid("{(int & any), (int & any)}","({any} | !any)"); }
		@Test public void test_15078() { testInvalid("{(int & any), (int & any)}","({int} | !any)"); }
		@Test public void test_15079() { testInvalid("{(int & any), (int & any)}","({any, any} | !any)"); }
		@Test public void test_15080() { testValid("{(int & any), (int & any)}","({int, int} | !any)"); }
		@Test public void test_15081() { testInvalid("{(int & any), (int & any)}","((any | any) | !any)"); }
		@Test public void test_15082() { testInvalid("{(int & any), (int & any)}","((int | any) | !any)"); }
		@Test public void test_15083() { testInvalid("{(int & any), (int & any)}","((int | int) | !any)"); }
		@Test public void test_15084() { testInvalid("{(int & any), (int & any)}","((int & int) | !any)"); }
		@Test public void test_15085() { testInvalid("{(int & any), (int & any)}","(!int | !int)"); }
		@Test public void test_15086() { testInvalid("{(int & any), (int & any)}","({any, any} | !int)"); }
		@Test public void test_15087() { testInvalid("{(int & any), (int & any)}","({int, int} | !int)"); }
		@Test public void test_15088() { testInvalid("{(int & any), (int & any)}","((int | any) | !int)"); }
		@Test public void test_15089() { testInvalid("{(int & any), (int & any)}","((any | int) | !int)"); }
		@Test public void test_15090() { testInvalid("{(int & any), (int & any)}","((any & int) | !int)"); }
		@Test public void test_15091() { testInvalid("{(int & any), (int & any)}","((int & int) | !int)"); }
		@Test public void test_15092() { testInvalid("{(int & any), (int & any)}","({int} | {any, any})"); }
		@Test public void test_15093() { testInvalid("{(int & any), (int & any)}","(!any | {any, any})"); }
		@Test public void test_15094() { testInvalid("{(int & any), (int & any)}","(!int | {any, any})"); }
		@Test public void test_15095() { testInvalid("{(int & any), (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_15096() { testInvalid("{(int & any), (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_15097() { testInvalid("{(int & any), (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_15098() { testInvalid("{(int & any), (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_15099() { testInvalid("{(int & any), (int & any)}","(!int | {int, any})"); }
		@Test public void test_15100() { testInvalid("{(int & any), (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_15101() { testInvalid("{(int & any), (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_15102() { testInvalid("{(int & any), (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_15103() { testInvalid("{(int & any), (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_15104() { testInvalid("{(int & any), (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_15105() { testInvalid("{(int & any), (int & any)}","({any} | {any, int})"); }
		@Test public void test_15106() { testInvalid("{(int & any), (int & any)}","(!int | {any, int})"); }
		@Test public void test_15107() { testInvalid("{(int & any), (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_15108() { testInvalid("{(int & any), (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_15109() { testInvalid("{(int & any), (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_15110() { testInvalid("{(int & any), (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_15111() { testInvalid("{(int & any), (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_15112() { testValid("{(int & any), (int & any)}","(!any | {int, int})"); }
		@Test public void test_15113() { testInvalid("{(int & any), (int & any)}","(!int | {int, int})"); }
		@Test public void test_15114() { testInvalid("{(int & any), (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_15115() { testInvalid("{(int & any), (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_15116() { testInvalid("{(int & any), (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_15117() { testInvalid("{(int & any), (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_15118() { testInvalid("{(int & any), (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_15119() { testInvalid("{(int & any), (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_15120() { testInvalid("{(int & any), (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_15121() { testInvalid("{(int & any), (int & any)}","({any} | (any | any))"); }
		@Test public void test_15122() { testInvalid("{(int & any), (int & any)}","(!any | (any | any))"); }
		@Test public void test_15123() { testInvalid("{(int & any), (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_15124() { testInvalid("{(int & any), (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_15125() { testInvalid("{(int & any), (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_15126() { testInvalid("{(int & any), (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_15127() { testInvalid("{(int & any), (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_15128() { testInvalid("{(int & any), (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_15129() { testInvalid("{(int & any), (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_15130() { testInvalid("{(int & any), (int & any)}","({any} | (int | any))"); }
		@Test public void test_15131() { testInvalid("{(int & any), (int & any)}","(!int | (int | any))"); }
		@Test public void test_15132() { testInvalid("{(int & any), (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_15133() { testInvalid("{(int & any), (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_15134() { testInvalid("{(int & any), (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_15135() { testInvalid("{(int & any), (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_15136() { testInvalid("{(int & any), (int & any)}","({any} | (any | int))"); }
		@Test public void test_15137() { testInvalid("{(int & any), (int & any)}","({int} | (any | int))"); }
		@Test public void test_15138() { testInvalid("{(int & any), (int & any)}","(!any | (any | int))"); }
		@Test public void test_15139() { testInvalid("{(int & any), (int & any)}","(!int | (any | int))"); }
		@Test public void test_15140() { testInvalid("{(int & any), (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_15141() { testInvalid("{(int & any), (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_15142() { testInvalid("{(int & any), (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_15143() { testInvalid("{(int & any), (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_15144() { testInvalid("{(int & any), (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_15145() { testInvalid("{(int & any), (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_15146() { testInvalid("{(int & any), (int & any)}","({int} | (int | int))"); }
		@Test public void test_15147() { testInvalid("{(int & any), (int & any)}","(!any | (int | int))"); }
		@Test public void test_15148() { testInvalid("{(int & any), (int & any)}","(!int | (int | int))"); }
		@Test public void test_15149() { testInvalid("{(int & any), (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_15150() { testInvalid("{(int & any), (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_15151() { testInvalid("{(int & any), (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_15152() { testInvalid("{(int & any), (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_15153() { testInvalid("{(int & any), (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_15154() { testInvalid("{(int & any), (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_15155() { testInvalid("{(int & any), (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_15156() { testInvalid("{(int & any), (int & any)}","(!any | (any & any))"); }
		@Test public void test_15157() { testInvalid("{(int & any), (int & any)}","(!int | (any & any))"); }
		@Test public void test_15158() { testInvalid("{(int & any), (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_15159() { testInvalid("{(int & any), (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_15160() { testInvalid("{(int & any), (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_15161() { testInvalid("{(int & any), (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_15162() { testInvalid("{(int & any), (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_15163() { testInvalid("{(int & any), (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_15164() { testInvalid("{(int & any), (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_15165() { testInvalid("{(int & any), (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_15166() { testInvalid("{(int & any), (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_15167() { testInvalid("{(int & any), (int & any)}","({any} | (int & any))"); }
		@Test public void test_15168() { testInvalid("{(int & int), (int & any)}","{int}"); }
		@Test public void test_15169() { testInvalid("{(int & int), (int & any)}","{any, any}"); }
		@Test public void test_15170() { testValid("{(int & int), (int & any)}","{int, int}"); }
		@Test public void test_15171() { testInvalid("{(int & int), (int & any)}","(any | int)"); }
		@Test public void test_15172() { testInvalid("{(int & int), (int & any)}","(int & any)"); }
		@Test public void test_15173() { testInvalid("{(int & int), (int & any)}","{{any}}"); }
		@Test public void test_15174() { testInvalid("{(int & int), (int & any)}","{{int, any}}"); }
		@Test public void test_15175() { testInvalid("{(int & int), (int & any)}","{{int, int}}"); }
		@Test public void test_15176() { testInvalid("{(int & int), (int & any)}","{(any | int)}"); }
		@Test public void test_15177() { testInvalid("{(int & int), (int & any)}","!{int, any}"); }
		@Test public void test_15178() { testInvalid("{(int & int), (int & any)}","!{int, int}"); }
		@Test public void test_15179() { testValid("{(int & int), (int & any)}","!(any | any)"); }
		@Test public void test_15180() { testValid("{(int & int), (int & any)}","!(any & any)"); }
		@Test public void test_15181() { testInvalid("{(int & int), (int & any)}","!(int & int)"); }
		@Test public void test_15182() { testInvalid("{(int & int), (int & any)}","{{int}, {any}}"); }
		@Test public void test_15183() { testInvalid("{(int & int), (int & any)}","{!int, {any}}"); }
		@Test public void test_15184() { testInvalid("{(int & int), (int & any)}","{{int, int}, {any}}"); }
		@Test public void test_15185() { testInvalid("{(int & int), (int & any)}","{(any | int), {any}}"); }
		@Test public void test_15186() { testInvalid("{(int & int), (int & any)}","{!int, {int}}"); }
		@Test public void test_15187() { testInvalid("{(int & int), (int & any)}","{{any, any}, {int}}"); }
		@Test public void test_15188() { testInvalid("{(int & int), (int & any)}","{(any | any), {int}}"); }
		@Test public void test_15189() { testInvalid("{(int & int), (int & any)}","{(any & any), {int}}"); }
		@Test public void test_15190() { testInvalid("{(int & int), (int & any)}","{(any & int), {int}}"); }
		@Test public void test_15191() { testInvalid("{(int & int), (int & any)}","{{any, any}, !int}"); }
		@Test public void test_15192() { testInvalid("{(int & int), (int & any)}","{{any, int}, !int}"); }
		@Test public void test_15193() { testInvalid("{(int & int), (int & any)}","{(any | any), !int}"); }
		@Test public void test_15194() { testInvalid("{(int & int), (int & any)}","{(int | any), !int}"); }
		@Test public void test_15195() { testInvalid("{(int & int), (int & any)}","{(any & any), !int}"); }
		@Test public void test_15196() { testInvalid("{(int & int), (int & any)}","{(int & any), !int}"); }
		@Test public void test_15197() { testInvalid("{(int & int), (int & any)}","{(int & int), !int}"); }
		@Test public void test_15198() { testInvalid("{(int & int), (int & any)}","{{any}, {any, any}}"); }
		@Test public void test_15199() { testInvalid("{(int & int), (int & any)}","{{int}, {any, any}}"); }
		@Test public void test_15200() { testInvalid("{(int & int), (int & any)}","{{int, int}, {any, any}}"); }
		@Test public void test_15201() { testInvalid("{(int & int), (int & any)}","{(any | any), {any, any}}"); }
		@Test public void test_15202() { testInvalid("{(int & int), (int & any)}","{(any | int), {any, any}}"); }
		@Test public void test_15203() { testInvalid("{(int & int), (int & any)}","{!int, {int, any}}"); }
		@Test public void test_15204() { testInvalid("{(int & int), (int & any)}","{{int, any}, {int, any}}"); }
		@Test public void test_15205() { testInvalid("{(int & int), (int & any)}","{{any, int}, {int, any}}"); }
		@Test public void test_15206() { testInvalid("{(int & int), (int & any)}","{(any & int), {int, any}}"); }
		@Test public void test_15207() { testInvalid("{(int & int), (int & any)}","{{any}, {any, int}}"); }
		@Test public void test_15208() { testInvalid("{(int & int), (int & any)}","{{int, int}, {any, int}}"); }
		@Test public void test_15209() { testInvalid("{(int & int), (int & any)}","{(int | int), {any, int}}"); }
		@Test public void test_15210() { testInvalid("{(int & int), (int & any)}","{(any & int), {any, int}}"); }
		@Test public void test_15211() { testInvalid("{(int & int), (int & any)}","{!int, {int, int}}"); }
		@Test public void test_15212() { testInvalid("{(int & int), (int & any)}","{{int, int}, {int, int}}"); }
		@Test public void test_15213() { testInvalid("{(int & int), (int & any)}","{(any | any), {int, int}}"); }
		@Test public void test_15214() { testInvalid("{(int & int), (int & any)}","{(int | any), {int, int}}"); }
		@Test public void test_15215() { testInvalid("{(int & int), (int & any)}","{(int & any), {int, int}}"); }
		@Test public void test_15216() { testInvalid("{(int & int), (int & any)}","{{int}, (any | any)}"); }
		@Test public void test_15217() { testInvalid("{(int & int), (int & any)}","{{int, any}, (any | any)}"); }
		@Test public void test_15218() { testInvalid("{(int & int), (int & any)}","{{any, int}, (any | any)}"); }
		@Test public void test_15219() { testInvalid("{(int & int), (int & any)}","{(any | any), (any | any)}"); }
		@Test public void test_15220() { testInvalid("{(int & int), (int & any)}","{(int | any), (any | any)}"); }
		@Test public void test_15221() { testInvalid("{(int & int), (int & any)}","{(int & int), (any | any)}"); }
		@Test public void test_15222() { testInvalid("{(int & int), (int & any)}","{!int, (int | any)}"); }
		@Test public void test_15223() { testInvalid("{(int & int), (int & any)}","{{int, int}, (int | any)}"); }
		@Test public void test_15224() { testInvalid("{(int & int), (int & any)}","{(any | any), (int | any)}"); }
		@Test public void test_15225() { testInvalid("{(int & int), (int & any)}","{(int | int), (int | any)}"); }
		@Test public void test_15226() { testInvalid("{(int & int), (int & any)}","{{any}, (any | int)}"); }
		@Test public void test_15227() { testInvalid("{(int & int), (int & any)}","{!int, (any | int)}"); }
		@Test public void test_15228() { testInvalid("{(int & int), (int & any)}","{(any | any), (any | int)}"); }
		@Test public void test_15229() { testInvalid("{(int & int), (int & any)}","{(any | int), (any | int)}"); }
		@Test public void test_15230() { testInvalid("{(int & int), (int & any)}","{(any & int), (any | int)}"); }
		@Test public void test_15231() { testInvalid("{(int & int), (int & any)}","{{int}, (int | int)}"); }
		@Test public void test_15232() { testInvalid("{(int & int), (int & any)}","{{any, any}, (int | int)}"); }
		@Test public void test_15233() { testInvalid("{(int & int), (int & any)}","{{int, int}, (int | int)}"); }
		@Test public void test_15234() { testInvalid("{(int & int), (int & any)}","{{int}, (any & any)}"); }
		@Test public void test_15235() { testInvalid("{(int & int), (int & any)}","{{int, any}, (any & any)}"); }
		@Test public void test_15236() { testInvalid("{(int & int), (int & any)}","{{any, int}, (any & any)}"); }
		@Test public void test_15237() { testInvalid("{(int & int), (int & any)}","{(int | any), (any & any)}"); }
		@Test public void test_15238() { testInvalid("{(int & int), (int & any)}","{(any & any), (any & any)}"); }
		@Test public void test_15239() { testInvalid("{(int & int), (int & any)}","{(int & any), (any & any)}"); }
		@Test public void test_15240() { testInvalid("{(int & int), (int & any)}","{{any}, (int & any)}"); }
		@Test public void test_15241() { testInvalid("{(int & int), (int & any)}","{{int}, (int & any)}"); }
		@Test public void test_15242() { testInvalid("{(int & int), (int & any)}","{{any, any}, (int & any)}"); }
		@Test public void test_15243() { testInvalid("{(int & int), (int & any)}","{{int, any}, (int & any)}"); }
		@Test public void test_15244() { testInvalid("{(int & int), (int & any)}","{(any | int), (int & any)}"); }
		@Test public void test_15245() { testInvalid("{(int & int), (int & any)}","{(any & any), (int & any)}"); }
		@Test public void test_15246() { testValid("{(int & int), (int & any)}","{(int & any), (int & any)}"); }
		@Test public void test_15247() { testValid("{(int & int), (int & any)}","{(int & int), (int & any)}"); }
		@Test public void test_15248() { testInvalid("{(int & int), (int & any)}","{{int, any}, (any & int)}"); }
		@Test public void test_15249() { testInvalid("{(int & int), (int & any)}","{(any & any), (any & int)}"); }
		@Test public void test_15250() { testInvalid("{(int & int), (int & any)}","{{any, int}, (int & int)}"); }
		@Test public void test_15251() { testValid("{(int & int), (int & any)}","{(int | int), (int & int)}"); }
		@Test public void test_15252() { testInvalid("{(int & int), (int & any)}","{(any & any), (int & int)}"); }
		@Test public void test_15253() { testValid("{(int & int), (int & any)}","{(any & int), (int & int)}"); }
		@Test public void test_15254() { testValid("{(int & int), (int & any)}","{(int & int), (int & int)}"); }
		@Test public void test_15255() { testInvalid("{(int & int), (int & any)}","(!int | {any})"); }
		@Test public void test_15256() { testInvalid("{(int & int), (int & any)}","({any, any} | {any})"); }
		@Test public void test_15257() { testInvalid("{(int & int), (int & any)}","((any | any) | {any})"); }
		@Test public void test_15258() { testInvalid("{(int & int), (int & any)}","((int | any) | {any})"); }
		@Test public void test_15259() { testInvalid("{(int & int), (int & any)}","((any & any) | {any})"); }
		@Test public void test_15260() { testInvalid("{(int & int), (int & any)}","((int & any) | {any})"); }
		@Test public void test_15261() { testInvalid("{(int & int), (int & any)}","((any & int) | {any})"); }
		@Test public void test_15262() { testInvalid("{(int & int), (int & any)}","({int} | {int})"); }
		@Test public void test_15263() { testInvalid("{(int & int), (int & any)}","(!any | {int})"); }
		@Test public void test_15264() { testInvalid("{(int & int), (int & any)}","(!int | {int})"); }
		@Test public void test_15265() { testInvalid("{(int & int), (int & any)}","({any, int} | {int})"); }
		@Test public void test_15266() { testInvalid("{(int & int), (int & any)}","((int & any) | {int})"); }
		@Test public void test_15267() { testInvalid("{(int & int), (int & any)}","((any & int) | {int})"); }
		@Test public void test_15268() { testInvalid("{(int & int), (int & any)}","((int & int) | {int})"); }
		@Test public void test_15269() { testInvalid("{(int & int), (int & any)}","({any} | !any)"); }
		@Test public void test_15270() { testInvalid("{(int & int), (int & any)}","({int} | !any)"); }
		@Test public void test_15271() { testInvalid("{(int & int), (int & any)}","({any, any} | !any)"); }
		@Test public void test_15272() { testValid("{(int & int), (int & any)}","({int, int} | !any)"); }
		@Test public void test_15273() { testInvalid("{(int & int), (int & any)}","((any | any) | !any)"); }
		@Test public void test_15274() { testInvalid("{(int & int), (int & any)}","((int | any) | !any)"); }
		@Test public void test_15275() { testInvalid("{(int & int), (int & any)}","((int | int) | !any)"); }
		@Test public void test_15276() { testInvalid("{(int & int), (int & any)}","((int & int) | !any)"); }
		@Test public void test_15277() { testInvalid("{(int & int), (int & any)}","(!int | !int)"); }
		@Test public void test_15278() { testInvalid("{(int & int), (int & any)}","({any, any} | !int)"); }
		@Test public void test_15279() { testInvalid("{(int & int), (int & any)}","({int, int} | !int)"); }
		@Test public void test_15280() { testInvalid("{(int & int), (int & any)}","((int | any) | !int)"); }
		@Test public void test_15281() { testInvalid("{(int & int), (int & any)}","((any | int) | !int)"); }
		@Test public void test_15282() { testInvalid("{(int & int), (int & any)}","((any & int) | !int)"); }
		@Test public void test_15283() { testInvalid("{(int & int), (int & any)}","((int & int) | !int)"); }
		@Test public void test_15284() { testInvalid("{(int & int), (int & any)}","({int} | {any, any})"); }
		@Test public void test_15285() { testInvalid("{(int & int), (int & any)}","(!any | {any, any})"); }
		@Test public void test_15286() { testInvalid("{(int & int), (int & any)}","(!int | {any, any})"); }
		@Test public void test_15287() { testInvalid("{(int & int), (int & any)}","({any, int} | {any, any})"); }
		@Test public void test_15288() { testInvalid("{(int & int), (int & any)}","((int | any) | {any, any})"); }
		@Test public void test_15289() { testInvalid("{(int & int), (int & any)}","((any & any) | {any, any})"); }
		@Test public void test_15290() { testInvalid("{(int & int), (int & any)}","((any & int) | {any, any})"); }
		@Test public void test_15291() { testInvalid("{(int & int), (int & any)}","(!int | {int, any})"); }
		@Test public void test_15292() { testInvalid("{(int & int), (int & any)}","({any, int} | {int, any})"); }
		@Test public void test_15293() { testInvalid("{(int & int), (int & any)}","((any | any) | {int, any})"); }
		@Test public void test_15294() { testInvalid("{(int & int), (int & any)}","((int | any) | {int, any})"); }
		@Test public void test_15295() { testInvalid("{(int & int), (int & any)}","((any | int) | {int, any})"); }
		@Test public void test_15296() { testInvalid("{(int & int), (int & any)}","((int & any) | {int, any})"); }
		@Test public void test_15297() { testInvalid("{(int & int), (int & any)}","({any} | {any, int})"); }
		@Test public void test_15298() { testInvalid("{(int & int), (int & any)}","(!int | {any, int})"); }
		@Test public void test_15299() { testInvalid("{(int & int), (int & any)}","({any, int} | {any, int})"); }
		@Test public void test_15300() { testInvalid("{(int & int), (int & any)}","((any | any) | {any, int})"); }
		@Test public void test_15301() { testInvalid("{(int & int), (int & any)}","((any | int) | {any, int})"); }
		@Test public void test_15302() { testInvalid("{(int & int), (int & any)}","((int | int) | {any, int})"); }
		@Test public void test_15303() { testInvalid("{(int & int), (int & any)}","((int & any) | {any, int})"); }
		@Test public void test_15304() { testValid("{(int & int), (int & any)}","(!any | {int, int})"); }
		@Test public void test_15305() { testInvalid("{(int & int), (int & any)}","(!int | {int, int})"); }
		@Test public void test_15306() { testInvalid("{(int & int), (int & any)}","({any, any} | {int, int})"); }
		@Test public void test_15307() { testInvalid("{(int & int), (int & any)}","({any, int} | {int, int})"); }
		@Test public void test_15308() { testInvalid("{(int & int), (int & any)}","((any | any) | {int, int})"); }
		@Test public void test_15309() { testInvalid("{(int & int), (int & any)}","((int | int) | {int, int})"); }
		@Test public void test_15310() { testInvalid("{(int & int), (int & any)}","((int & any) | {int, int})"); }
		@Test public void test_15311() { testInvalid("{(int & int), (int & any)}","((any & int) | {int, int})"); }
		@Test public void test_15312() { testInvalid("{(int & int), (int & any)}","((int & int) | {int, int})"); }
		@Test public void test_15313() { testInvalid("{(int & int), (int & any)}","({any} | (any | any))"); }
		@Test public void test_15314() { testInvalid("{(int & int), (int & any)}","(!any | (any | any))"); }
		@Test public void test_15315() { testInvalid("{(int & int), (int & any)}","({any, any} | (any | any))"); }
		@Test public void test_15316() { testInvalid("{(int & int), (int & any)}","({any, int} | (any | any))"); }
		@Test public void test_15317() { testInvalid("{(int & int), (int & any)}","({int, int} | (any | any))"); }
		@Test public void test_15318() { testInvalid("{(int & int), (int & any)}","((int | any) | (any | any))"); }
		@Test public void test_15319() { testInvalid("{(int & int), (int & any)}","((any | int) | (any | any))"); }
		@Test public void test_15320() { testInvalid("{(int & int), (int & any)}","((any & int) | (any | any))"); }
		@Test public void test_15321() { testInvalid("{(int & int), (int & any)}","((int & int) | (any | any))"); }
		@Test public void test_15322() { testInvalid("{(int & int), (int & any)}","({any} | (int | any))"); }
		@Test public void test_15323() { testInvalid("{(int & int), (int & any)}","(!int | (int | any))"); }
		@Test public void test_15324() { testInvalid("{(int & int), (int & any)}","({int, any} | (int | any))"); }
		@Test public void test_15325() { testInvalid("{(int & int), (int & any)}","({any, int} | (int | any))"); }
		@Test public void test_15326() { testInvalid("{(int & int), (int & any)}","((int & any) | (int | any))"); }
		@Test public void test_15327() { testInvalid("{(int & int), (int & any)}","((any & int) | (int | any))"); }
		@Test public void test_15328() { testInvalid("{(int & int), (int & any)}","({any} | (any | int))"); }
		@Test public void test_15329() { testInvalid("{(int & int), (int & any)}","({int} | (any | int))"); }
		@Test public void test_15330() { testInvalid("{(int & int), (int & any)}","(!any | (any | int))"); }
		@Test public void test_15331() { testInvalid("{(int & int), (int & any)}","(!int | (any | int))"); }
		@Test public void test_15332() { testInvalid("{(int & int), (int & any)}","({any, int} | (any | int))"); }
		@Test public void test_15333() { testInvalid("{(int & int), (int & any)}","({int, int} | (any | int))"); }
		@Test public void test_15334() { testInvalid("{(int & int), (int & any)}","((int | any) | (any | int))"); }
		@Test public void test_15335() { testInvalid("{(int & int), (int & any)}","((any | int) | (any | int))"); }
		@Test public void test_15336() { testInvalid("{(int & int), (int & any)}","((int | int) | (any | int))"); }
		@Test public void test_15337() { testInvalid("{(int & int), (int & any)}","((any & any) | (any | int))"); }
		@Test public void test_15338() { testInvalid("{(int & int), (int & any)}","({int} | (int | int))"); }
		@Test public void test_15339() { testInvalid("{(int & int), (int & any)}","(!any | (int | int))"); }
		@Test public void test_15340() { testInvalid("{(int & int), (int & any)}","(!int | (int | int))"); }
		@Test public void test_15341() { testInvalid("{(int & int), (int & any)}","({int, any} | (int | int))"); }
		@Test public void test_15342() { testInvalid("{(int & int), (int & any)}","({any, int} | (int | int))"); }
		@Test public void test_15343() { testInvalid("{(int & int), (int & any)}","((any | int) | (int | int))"); }
		@Test public void test_15344() { testInvalid("{(int & int), (int & any)}","((int | int) | (int | int))"); }
		@Test public void test_15345() { testInvalid("{(int & int), (int & any)}","((any & any) | (int | int))"); }
		@Test public void test_15346() { testInvalid("{(int & int), (int & any)}","((int & any) | (int | int))"); }
		@Test public void test_15347() { testInvalid("{(int & int), (int & any)}","((int & int) | (int | int))"); }
		@Test public void test_15348() { testInvalid("{(int & int), (int & any)}","(!any | (any & any))"); }
		@Test public void test_15349() { testInvalid("{(int & int), (int & any)}","(!int | (any & any))"); }
		@Test public void test_15350() { testInvalid("{(int & int), (int & any)}","({any, any} | (any & any))"); }
		@Test public void test_15351() { testInvalid("{(int & int), (int & any)}","({int, any} | (any & any))"); }
		@Test public void test_15352() { testInvalid("{(int & int), (int & any)}","({any, int} | (any & any))"); }
		@Test public void test_15353() { testInvalid("{(int & int), (int & any)}","({int, int} | (any & any))"); }
		@Test public void test_15354() { testInvalid("{(int & int), (int & any)}","((int | any) | (any & any))"); }
		@Test public void test_15355() { testInvalid("{(int & int), (int & any)}","((int | int) | (any & any))"); }
		@Test public void test_15356() { testInvalid("{(int & int), (int & any)}","((int & any) | (any & any))"); }
		@Test public void test_15357() { testInvalid("{(int & int), (int & any)}","((any & int) | (any & any))"); }
		@Test public void test_15358() { testInvalid("{(int & int), (int & any)}","((int & int) | (any & any))"); }
		@Test public void test_15359() { testInvalid("{(int & int), (int & any)}","({any} | (int & any))"); }
		@Test public void test_15360() { testInvalid("{{int, any}, (any & int)}","{int}"); }
		@Test public void test_15361() { testInvalid("{{int, any}, (any & int)}","{any, any}"); }
		@Test public void test_15362() { testInvalid("{{int, any}, (any & int)}","{int, int}"); }
		@Test public void test_15363() { testInvalid("{{int, any}, (any & int)}","(any | int)"); }
		@Test public void test_15364() { testInvalid("{{int, any}, (any & int)}","(int & any)"); }
		@Test public void test_15365() { testInvalid("{{int, any}, (any & int)}","{{any}}"); }
		@Test public void test_15366() { testInvalid("{{int, any}, (any & int)}","{{int, any}}"); }
		@Test public void test_15367() { testInvalid("{{int, any}, (any & int)}","{{int, int}}"); }
		@Test public void test_15368() { testInvalid("{{int, any}, (any & int)}","{(any | int)}"); }
		@Test public void test_15369() { testInvalid("{{int, any}, (any & int)}","!{int, any}"); }
		@Test public void test_15370() { testInvalid("{{int, any}, (any & int)}","!{int, int}"); }
		@Test public void test_15371() { testValid("{{int, any}, (any & int)}","!(any | any)"); }
		@Test public void test_15372() { testValid("{{int, any}, (any & int)}","!(any & any)"); }
		@Test public void test_15373() { testInvalid("{{int, any}, (any & int)}","!(int & int)"); }
		@Test public void test_15374() { testInvalid("{{int, any}, (any & int)}","{{int}, {any}}"); }
		@Test public void test_15375() { testInvalid("{{int, any}, (any & int)}","{!int, {any}}"); }
		@Test public void test_15376() { testInvalid("{{int, any}, (any & int)}","{{int, int}, {any}}"); }
		@Test public void test_15377() { testInvalid("{{int, any}, (any & int)}","{(any | int), {any}}"); }
		@Test public void test_15378() { testInvalid("{{int, any}, (any & int)}","{!int, {int}}"); }
		@Test public void test_15379() { testInvalid("{{int, any}, (any & int)}","{{any, any}, {int}}"); }
		@Test public void test_15380() { testInvalid("{{int, any}, (any & int)}","{(any | any), {int}}"); }
		@Test public void test_15381() { testInvalid("{{int, any}, (any & int)}","{(any & any), {int}}"); }
		@Test public void test_15382() { testInvalid("{{int, any}, (any & int)}","{(any & int), {int}}"); }
		@Test public void test_15383() { testInvalid("{{int, any}, (any & int)}","{{any, any}, !int}"); }
		@Test public void test_15384() { testInvalid("{{int, any}, (any & int)}","{{any, int}, !int}"); }
		@Test public void test_15385() { testInvalid("{{int, any}, (any & int)}","{(any | any), !int}"); }
		@Test public void test_15386() { testInvalid("{{int, any}, (any & int)}","{(int | any), !int}"); }
		@Test public void test_15387() { testInvalid("{{int, any}, (any & int)}","{(any & any), !int}"); }
		@Test public void test_15388() { testInvalid("{{int, any}, (any & int)}","{(int & any), !int}"); }
		@Test public void test_15389() { testInvalid("{{int, any}, (any & int)}","{(int & int), !int}"); }
		@Test public void test_15390() { testInvalid("{{int, any}, (any & int)}","{{any}, {any, any}}"); }
		@Test public void test_15391() { testInvalid("{{int, any}, (any & int)}","{{int}, {any, any}}"); }
		@Test public void test_15392() { testInvalid("{{int, any}, (any & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_15393() { testInvalid("{{int, any}, (any & int)}","{(any | any), {any, any}}"); }
		@Test public void test_15394() { testInvalid("{{int, any}, (any & int)}","{(any | int), {any, any}}"); }
		@Test public void test_15395() { testInvalid("{{int, any}, (any & int)}","{!int, {int, any}}"); }
		@Test public void test_15396() { testInvalid("{{int, any}, (any & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_15397() { testInvalid("{{int, any}, (any & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_15398() { testInvalid("{{int, any}, (any & int)}","{(any & int), {int, any}}"); }
		@Test public void test_15399() { testInvalid("{{int, any}, (any & int)}","{{any}, {any, int}}"); }
		@Test public void test_15400() { testInvalid("{{int, any}, (any & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_15401() { testInvalid("{{int, any}, (any & int)}","{(int | int), {any, int}}"); }
		@Test public void test_15402() { testInvalid("{{int, any}, (any & int)}","{(any & int), {any, int}}"); }
		@Test public void test_15403() { testInvalid("{{int, any}, (any & int)}","{!int, {int, int}}"); }
		@Test public void test_15404() { testInvalid("{{int, any}, (any & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_15405() { testInvalid("{{int, any}, (any & int)}","{(any | any), {int, int}}"); }
		@Test public void test_15406() { testInvalid("{{int, any}, (any & int)}","{(int | any), {int, int}}"); }
		@Test public void test_15407() { testInvalid("{{int, any}, (any & int)}","{(int & any), {int, int}}"); }
		@Test public void test_15408() { testInvalid("{{int, any}, (any & int)}","{{int}, (any | any)}"); }
		@Test public void test_15409() { testInvalid("{{int, any}, (any & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_15410() { testInvalid("{{int, any}, (any & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_15411() { testInvalid("{{int, any}, (any & int)}","{(any | any), (any | any)}"); }
		@Test public void test_15412() { testInvalid("{{int, any}, (any & int)}","{(int | any), (any | any)}"); }
		@Test public void test_15413() { testInvalid("{{int, any}, (any & int)}","{(int & int), (any | any)}"); }
		@Test public void test_15414() { testInvalid("{{int, any}, (any & int)}","{!int, (int | any)}"); }
		@Test public void test_15415() { testInvalid("{{int, any}, (any & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_15416() { testInvalid("{{int, any}, (any & int)}","{(any | any), (int | any)}"); }
		@Test public void test_15417() { testInvalid("{{int, any}, (any & int)}","{(int | int), (int | any)}"); }
		@Test public void test_15418() { testInvalid("{{int, any}, (any & int)}","{{any}, (any | int)}"); }
		@Test public void test_15419() { testInvalid("{{int, any}, (any & int)}","{!int, (any | int)}"); }
		@Test public void test_15420() { testInvalid("{{int, any}, (any & int)}","{(any | any), (any | int)}"); }
		@Test public void test_15421() { testInvalid("{{int, any}, (any & int)}","{(any | int), (any | int)}"); }
		@Test public void test_15422() { testInvalid("{{int, any}, (any & int)}","{(any & int), (any | int)}"); }
		@Test public void test_15423() { testInvalid("{{int, any}, (any & int)}","{{int}, (int | int)}"); }
		@Test public void test_15424() { testInvalid("{{int, any}, (any & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_15425() { testValid("{{int, any}, (any & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_15426() { testInvalid("{{int, any}, (any & int)}","{{int}, (any & any)}"); }
		@Test public void test_15427() { testInvalid("{{int, any}, (any & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_15428() { testInvalid("{{int, any}, (any & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_15429() { testInvalid("{{int, any}, (any & int)}","{(int | any), (any & any)}"); }
		@Test public void test_15430() { testInvalid("{{int, any}, (any & int)}","{(any & any), (any & any)}"); }
		@Test public void test_15431() { testInvalid("{{int, any}, (any & int)}","{(int & any), (any & any)}"); }
		@Test public void test_15432() { testInvalid("{{int, any}, (any & int)}","{{any}, (int & any)}"); }
		@Test public void test_15433() { testInvalid("{{int, any}, (any & int)}","{{int}, (int & any)}"); }
		@Test public void test_15434() { testInvalid("{{int, any}, (any & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_15435() { testValid("{{int, any}, (any & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_15436() { testInvalid("{{int, any}, (any & int)}","{(any | int), (int & any)}"); }
		@Test public void test_15437() { testInvalid("{{int, any}, (any & int)}","{(any & any), (int & any)}"); }
		@Test public void test_15438() { testInvalid("{{int, any}, (any & int)}","{(int & any), (int & any)}"); }
		@Test public void test_15439() { testInvalid("{{int, any}, (any & int)}","{(int & int), (int & any)}"); }
		@Test public void test_15440() { testValid("{{int, any}, (any & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_15441() { testInvalid("{{int, any}, (any & int)}","{(any & any), (any & int)}"); }
		@Test public void test_15442() { testInvalid("{{int, any}, (any & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_15443() { testInvalid("{{int, any}, (any & int)}","{(int | int), (int & int)}"); }
		@Test public void test_15444() { testInvalid("{{int, any}, (any & int)}","{(any & any), (int & int)}"); }
		@Test public void test_15445() { testInvalid("{{int, any}, (any & int)}","{(any & int), (int & int)}"); }
		@Test public void test_15446() { testInvalid("{{int, any}, (any & int)}","{(int & int), (int & int)}"); }
		@Test public void test_15447() { testInvalid("{{int, any}, (any & int)}","(!int | {any})"); }
		@Test public void test_15448() { testInvalid("{{int, any}, (any & int)}","({any, any} | {any})"); }
		@Test public void test_15449() { testInvalid("{{int, any}, (any & int)}","((any | any) | {any})"); }
		@Test public void test_15450() { testInvalid("{{int, any}, (any & int)}","((int | any) | {any})"); }
		@Test public void test_15451() { testInvalid("{{int, any}, (any & int)}","((any & any) | {any})"); }
		@Test public void test_15452() { testInvalid("{{int, any}, (any & int)}","((int & any) | {any})"); }
		@Test public void test_15453() { testInvalid("{{int, any}, (any & int)}","((any & int) | {any})"); }
		@Test public void test_15454() { testInvalid("{{int, any}, (any & int)}","({int} | {int})"); }
		@Test public void test_15455() { testInvalid("{{int, any}, (any & int)}","(!any | {int})"); }
		@Test public void test_15456() { testInvalid("{{int, any}, (any & int)}","(!int | {int})"); }
		@Test public void test_15457() { testInvalid("{{int, any}, (any & int)}","({any, int} | {int})"); }
		@Test public void test_15458() { testInvalid("{{int, any}, (any & int)}","((int & any) | {int})"); }
		@Test public void test_15459() { testInvalid("{{int, any}, (any & int)}","((any & int) | {int})"); }
		@Test public void test_15460() { testInvalid("{{int, any}, (any & int)}","((int & int) | {int})"); }
		@Test public void test_15461() { testInvalid("{{int, any}, (any & int)}","({any} | !any)"); }
		@Test public void test_15462() { testInvalid("{{int, any}, (any & int)}","({int} | !any)"); }
		@Test public void test_15463() { testInvalid("{{int, any}, (any & int)}","({any, any} | !any)"); }
		@Test public void test_15464() { testInvalid("{{int, any}, (any & int)}","({int, int} | !any)"); }
		@Test public void test_15465() { testInvalid("{{int, any}, (any & int)}","((any | any) | !any)"); }
		@Test public void test_15466() { testInvalid("{{int, any}, (any & int)}","((int | any) | !any)"); }
		@Test public void test_15467() { testInvalid("{{int, any}, (any & int)}","((int | int) | !any)"); }
		@Test public void test_15468() { testInvalid("{{int, any}, (any & int)}","((int & int) | !any)"); }
		@Test public void test_15469() { testInvalid("{{int, any}, (any & int)}","(!int | !int)"); }
		@Test public void test_15470() { testInvalid("{{int, any}, (any & int)}","({any, any} | !int)"); }
		@Test public void test_15471() { testInvalid("{{int, any}, (any & int)}","({int, int} | !int)"); }
		@Test public void test_15472() { testInvalid("{{int, any}, (any & int)}","((int | any) | !int)"); }
		@Test public void test_15473() { testInvalid("{{int, any}, (any & int)}","((any | int) | !int)"); }
		@Test public void test_15474() { testInvalid("{{int, any}, (any & int)}","((any & int) | !int)"); }
		@Test public void test_15475() { testInvalid("{{int, any}, (any & int)}","((int & int) | !int)"); }
		@Test public void test_15476() { testInvalid("{{int, any}, (any & int)}","({int} | {any, any})"); }
		@Test public void test_15477() { testInvalid("{{int, any}, (any & int)}","(!any | {any, any})"); }
		@Test public void test_15478() { testInvalid("{{int, any}, (any & int)}","(!int | {any, any})"); }
		@Test public void test_15479() { testInvalid("{{int, any}, (any & int)}","({any, int} | {any, any})"); }
		@Test public void test_15480() { testInvalid("{{int, any}, (any & int)}","((int | any) | {any, any})"); }
		@Test public void test_15481() { testInvalid("{{int, any}, (any & int)}","((any & any) | {any, any})"); }
		@Test public void test_15482() { testInvalid("{{int, any}, (any & int)}","((any & int) | {any, any})"); }
		@Test public void test_15483() { testInvalid("{{int, any}, (any & int)}","(!int | {int, any})"); }
		@Test public void test_15484() { testInvalid("{{int, any}, (any & int)}","({any, int} | {int, any})"); }
		@Test public void test_15485() { testInvalid("{{int, any}, (any & int)}","((any | any) | {int, any})"); }
		@Test public void test_15486() { testInvalid("{{int, any}, (any & int)}","((int | any) | {int, any})"); }
		@Test public void test_15487() { testInvalid("{{int, any}, (any & int)}","((any | int) | {int, any})"); }
		@Test public void test_15488() { testInvalid("{{int, any}, (any & int)}","((int & any) | {int, any})"); }
		@Test public void test_15489() { testInvalid("{{int, any}, (any & int)}","({any} | {any, int})"); }
		@Test public void test_15490() { testInvalid("{{int, any}, (any & int)}","(!int | {any, int})"); }
		@Test public void test_15491() { testInvalid("{{int, any}, (any & int)}","({any, int} | {any, int})"); }
		@Test public void test_15492() { testInvalid("{{int, any}, (any & int)}","((any | any) | {any, int})"); }
		@Test public void test_15493() { testInvalid("{{int, any}, (any & int)}","((any | int) | {any, int})"); }
		@Test public void test_15494() { testInvalid("{{int, any}, (any & int)}","((int | int) | {any, int})"); }
		@Test public void test_15495() { testInvalid("{{int, any}, (any & int)}","((int & any) | {any, int})"); }
		@Test public void test_15496() { testInvalid("{{int, any}, (any & int)}","(!any | {int, int})"); }
		@Test public void test_15497() { testInvalid("{{int, any}, (any & int)}","(!int | {int, int})"); }
		@Test public void test_15498() { testInvalid("{{int, any}, (any & int)}","({any, any} | {int, int})"); }
		@Test public void test_15499() { testInvalid("{{int, any}, (any & int)}","({any, int} | {int, int})"); }
		@Test public void test_15500() { testInvalid("{{int, any}, (any & int)}","((any | any) | {int, int})"); }
		@Test public void test_15501() { testInvalid("{{int, any}, (any & int)}","((int | int) | {int, int})"); }
		@Test public void test_15502() { testInvalid("{{int, any}, (any & int)}","((int & any) | {int, int})"); }
		@Test public void test_15503() { testInvalid("{{int, any}, (any & int)}","((any & int) | {int, int})"); }
		@Test public void test_15504() { testInvalid("{{int, any}, (any & int)}","((int & int) | {int, int})"); }
		@Test public void test_15505() { testInvalid("{{int, any}, (any & int)}","({any} | (any | any))"); }
		@Test public void test_15506() { testInvalid("{{int, any}, (any & int)}","(!any | (any | any))"); }
		@Test public void test_15507() { testInvalid("{{int, any}, (any & int)}","({any, any} | (any | any))"); }
		@Test public void test_15508() { testInvalid("{{int, any}, (any & int)}","({any, int} | (any | any))"); }
		@Test public void test_15509() { testInvalid("{{int, any}, (any & int)}","({int, int} | (any | any))"); }
		@Test public void test_15510() { testInvalid("{{int, any}, (any & int)}","((int | any) | (any | any))"); }
		@Test public void test_15511() { testInvalid("{{int, any}, (any & int)}","((any | int) | (any | any))"); }
		@Test public void test_15512() { testInvalid("{{int, any}, (any & int)}","((any & int) | (any | any))"); }
		@Test public void test_15513() { testInvalid("{{int, any}, (any & int)}","((int & int) | (any | any))"); }
		@Test public void test_15514() { testInvalid("{{int, any}, (any & int)}","({any} | (int | any))"); }
		@Test public void test_15515() { testInvalid("{{int, any}, (any & int)}","(!int | (int | any))"); }
		@Test public void test_15516() { testInvalid("{{int, any}, (any & int)}","({int, any} | (int | any))"); }
		@Test public void test_15517() { testInvalid("{{int, any}, (any & int)}","({any, int} | (int | any))"); }
		@Test public void test_15518() { testInvalid("{{int, any}, (any & int)}","((int & any) | (int | any))"); }
		@Test public void test_15519() { testInvalid("{{int, any}, (any & int)}","((any & int) | (int | any))"); }
		@Test public void test_15520() { testInvalid("{{int, any}, (any & int)}","({any} | (any | int))"); }
		@Test public void test_15521() { testInvalid("{{int, any}, (any & int)}","({int} | (any | int))"); }
		@Test public void test_15522() { testInvalid("{{int, any}, (any & int)}","(!any | (any | int))"); }
		@Test public void test_15523() { testInvalid("{{int, any}, (any & int)}","(!int | (any | int))"); }
		@Test public void test_15524() { testInvalid("{{int, any}, (any & int)}","({any, int} | (any | int))"); }
		@Test public void test_15525() { testInvalid("{{int, any}, (any & int)}","({int, int} | (any | int))"); }
		@Test public void test_15526() { testInvalid("{{int, any}, (any & int)}","((int | any) | (any | int))"); }
		@Test public void test_15527() { testInvalid("{{int, any}, (any & int)}","((any | int) | (any | int))"); }
		@Test public void test_15528() { testInvalid("{{int, any}, (any & int)}","((int | int) | (any | int))"); }
		@Test public void test_15529() { testInvalid("{{int, any}, (any & int)}","((any & any) | (any | int))"); }
		@Test public void test_15530() { testInvalid("{{int, any}, (any & int)}","({int} | (int | int))"); }
		@Test public void test_15531() { testInvalid("{{int, any}, (any & int)}","(!any | (int | int))"); }
		@Test public void test_15532() { testInvalid("{{int, any}, (any & int)}","(!int | (int | int))"); }
		@Test public void test_15533() { testInvalid("{{int, any}, (any & int)}","({int, any} | (int | int))"); }
		@Test public void test_15534() { testInvalid("{{int, any}, (any & int)}","({any, int} | (int | int))"); }
		@Test public void test_15535() { testInvalid("{{int, any}, (any & int)}","((any | int) | (int | int))"); }
		@Test public void test_15536() { testInvalid("{{int, any}, (any & int)}","((int | int) | (int | int))"); }
		@Test public void test_15537() { testInvalid("{{int, any}, (any & int)}","((any & any) | (int | int))"); }
		@Test public void test_15538() { testInvalid("{{int, any}, (any & int)}","((int & any) | (int | int))"); }
		@Test public void test_15539() { testInvalid("{{int, any}, (any & int)}","((int & int) | (int | int))"); }
		@Test public void test_15540() { testInvalid("{{int, any}, (any & int)}","(!any | (any & any))"); }
		@Test public void test_15541() { testInvalid("{{int, any}, (any & int)}","(!int | (any & any))"); }
		@Test public void test_15542() { testInvalid("{{int, any}, (any & int)}","({any, any} | (any & any))"); }
		@Test public void test_15543() { testInvalid("{{int, any}, (any & int)}","({int, any} | (any & any))"); }
		@Test public void test_15544() { testInvalid("{{int, any}, (any & int)}","({any, int} | (any & any))"); }
		@Test public void test_15545() { testInvalid("{{int, any}, (any & int)}","({int, int} | (any & any))"); }
		@Test public void test_15546() { testInvalid("{{int, any}, (any & int)}","((int | any) | (any & any))"); }
		@Test public void test_15547() { testInvalid("{{int, any}, (any & int)}","((int | int) | (any & any))"); }
		@Test public void test_15548() { testInvalid("{{int, any}, (any & int)}","((int & any) | (any & any))"); }
		@Test public void test_15549() { testInvalid("{{int, any}, (any & int)}","((any & int) | (any & any))"); }
		@Test public void test_15550() { testInvalid("{{int, any}, (any & int)}","((int & int) | (any & any))"); }
		@Test public void test_15551() { testInvalid("{{int, any}, (any & int)}","({any} | (int & any))"); }
		@Test public void test_15552() { testInvalid("{(any & any), (any & int)}","{int}"); }
		@Test public void test_15553() { testInvalid("{(any & any), (any & int)}","{any, any}"); }
		@Test public void test_15554() { testValid("{(any & any), (any & int)}","{int, int}"); }
		@Test public void test_15555() { testInvalid("{(any & any), (any & int)}","(any | int)"); }
		@Test public void test_15556() { testInvalid("{(any & any), (any & int)}","(int & any)"); }
		@Test public void test_15557() { testInvalid("{(any & any), (any & int)}","{{any}}"); }
		@Test public void test_15558() { testInvalid("{(any & any), (any & int)}","{{int, any}}"); }
		@Test public void test_15559() { testInvalid("{(any & any), (any & int)}","{{int, int}}"); }
		@Test public void test_15560() { testInvalid("{(any & any), (any & int)}","{(any | int)}"); }
		@Test public void test_15561() { testInvalid("{(any & any), (any & int)}","!{int, any}"); }
		@Test public void test_15562() { testInvalid("{(any & any), (any & int)}","!{int, int}"); }
		@Test public void test_15563() { testValid("{(any & any), (any & int)}","!(any | any)"); }
		@Test public void test_15564() { testValid("{(any & any), (any & int)}","!(any & any)"); }
		@Test public void test_15565() { testInvalid("{(any & any), (any & int)}","!(int & int)"); }
		@Test public void test_15566() { testInvalid("{(any & any), (any & int)}","{{int}, {any}}"); }
		@Test public void test_15567() { testInvalid("{(any & any), (any & int)}","{!int, {any}}"); }
		@Test public void test_15568() { testInvalid("{(any & any), (any & int)}","{{int, int}, {any}}"); }
		@Test public void test_15569() { testInvalid("{(any & any), (any & int)}","{(any | int), {any}}"); }
		@Test public void test_15570() { testInvalid("{(any & any), (any & int)}","{!int, {int}}"); }
		@Test public void test_15571() { testInvalid("{(any & any), (any & int)}","{{any, any}, {int}}"); }
		@Test public void test_15572() { testInvalid("{(any & any), (any & int)}","{(any | any), {int}}"); }
		@Test public void test_15573() { testInvalid("{(any & any), (any & int)}","{(any & any), {int}}"); }
		@Test public void test_15574() { testInvalid("{(any & any), (any & int)}","{(any & int), {int}}"); }
		@Test public void test_15575() { testInvalid("{(any & any), (any & int)}","{{any, any}, !int}"); }
		@Test public void test_15576() { testInvalid("{(any & any), (any & int)}","{{any, int}, !int}"); }
		@Test public void test_15577() { testInvalid("{(any & any), (any & int)}","{(any | any), !int}"); }
		@Test public void test_15578() { testInvalid("{(any & any), (any & int)}","{(int | any), !int}"); }
		@Test public void test_15579() { testInvalid("{(any & any), (any & int)}","{(any & any), !int}"); }
		@Test public void test_15580() { testInvalid("{(any & any), (any & int)}","{(int & any), !int}"); }
		@Test public void test_15581() { testInvalid("{(any & any), (any & int)}","{(int & int), !int}"); }
		@Test public void test_15582() { testInvalid("{(any & any), (any & int)}","{{any}, {any, any}}"); }
		@Test public void test_15583() { testInvalid("{(any & any), (any & int)}","{{int}, {any, any}}"); }
		@Test public void test_15584() { testInvalid("{(any & any), (any & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_15585() { testInvalid("{(any & any), (any & int)}","{(any | any), {any, any}}"); }
		@Test public void test_15586() { testInvalid("{(any & any), (any & int)}","{(any | int), {any, any}}"); }
		@Test public void test_15587() { testInvalid("{(any & any), (any & int)}","{!int, {int, any}}"); }
		@Test public void test_15588() { testInvalid("{(any & any), (any & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_15589() { testInvalid("{(any & any), (any & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_15590() { testInvalid("{(any & any), (any & int)}","{(any & int), {int, any}}"); }
		@Test public void test_15591() { testInvalid("{(any & any), (any & int)}","{{any}, {any, int}}"); }
		@Test public void test_15592() { testInvalid("{(any & any), (any & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_15593() { testInvalid("{(any & any), (any & int)}","{(int | int), {any, int}}"); }
		@Test public void test_15594() { testInvalid("{(any & any), (any & int)}","{(any & int), {any, int}}"); }
		@Test public void test_15595() { testInvalid("{(any & any), (any & int)}","{!int, {int, int}}"); }
		@Test public void test_15596() { testInvalid("{(any & any), (any & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_15597() { testInvalid("{(any & any), (any & int)}","{(any | any), {int, int}}"); }
		@Test public void test_15598() { testInvalid("{(any & any), (any & int)}","{(int | any), {int, int}}"); }
		@Test public void test_15599() { testInvalid("{(any & any), (any & int)}","{(int & any), {int, int}}"); }
		@Test public void test_15600() { testInvalid("{(any & any), (any & int)}","{{int}, (any | any)}"); }
		@Test public void test_15601() { testInvalid("{(any & any), (any & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_15602() { testInvalid("{(any & any), (any & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_15603() { testInvalid("{(any & any), (any & int)}","{(any | any), (any | any)}"); }
		@Test public void test_15604() { testInvalid("{(any & any), (any & int)}","{(int | any), (any | any)}"); }
		@Test public void test_15605() { testInvalid("{(any & any), (any & int)}","{(int & int), (any | any)}"); }
		@Test public void test_15606() { testInvalid("{(any & any), (any & int)}","{!int, (int | any)}"); }
		@Test public void test_15607() { testInvalid("{(any & any), (any & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_15608() { testInvalid("{(any & any), (any & int)}","{(any | any), (int | any)}"); }
		@Test public void test_15609() { testInvalid("{(any & any), (any & int)}","{(int | int), (int | any)}"); }
		@Test public void test_15610() { testInvalid("{(any & any), (any & int)}","{{any}, (any | int)}"); }
		@Test public void test_15611() { testInvalid("{(any & any), (any & int)}","{!int, (any | int)}"); }
		@Test public void test_15612() { testInvalid("{(any & any), (any & int)}","{(any | any), (any | int)}"); }
		@Test public void test_15613() { testInvalid("{(any & any), (any & int)}","{(any | int), (any | int)}"); }
		@Test public void test_15614() { testInvalid("{(any & any), (any & int)}","{(any & int), (any | int)}"); }
		@Test public void test_15615() { testValid("{(any & any), (any & int)}","{{int}, (int | int)}"); }
		@Test public void test_15616() { testValid("{(any & any), (any & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_15617() { testValid("{(any & any), (any & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_15618() { testInvalid("{(any & any), (any & int)}","{{int}, (any & any)}"); }
		@Test public void test_15619() { testInvalid("{(any & any), (any & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_15620() { testInvalid("{(any & any), (any & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_15621() { testInvalid("{(any & any), (any & int)}","{(int | any), (any & any)}"); }
		@Test public void test_15622() { testInvalid("{(any & any), (any & int)}","{(any & any), (any & any)}"); }
		@Test public void test_15623() { testInvalid("{(any & any), (any & int)}","{(int & any), (any & any)}"); }
		@Test public void test_15624() { testValid("{(any & any), (any & int)}","{{any}, (int & any)}"); }
		@Test public void test_15625() { testValid("{(any & any), (any & int)}","{{int}, (int & any)}"); }
		@Test public void test_15626() { testValid("{(any & any), (any & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_15627() { testValid("{(any & any), (any & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_15628() { testValid("{(any & any), (any & int)}","{(any | int), (int & any)}"); }
		@Test public void test_15629() { testValid("{(any & any), (any & int)}","{(any & any), (int & any)}"); }
		@Test public void test_15630() { testValid("{(any & any), (any & int)}","{(int & any), (int & any)}"); }
		@Test public void test_15631() { testValid("{(any & any), (any & int)}","{(int & int), (int & any)}"); }
		@Test public void test_15632() { testValid("{(any & any), (any & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_15633() { testValid("{(any & any), (any & int)}","{(any & any), (any & int)}"); }
		@Test public void test_15634() { testValid("{(any & any), (any & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_15635() { testValid("{(any & any), (any & int)}","{(int | int), (int & int)}"); }
		@Test public void test_15636() { testValid("{(any & any), (any & int)}","{(any & any), (int & int)}"); }
		@Test public void test_15637() { testValid("{(any & any), (any & int)}","{(any & int), (int & int)}"); }
		@Test public void test_15638() { testValid("{(any & any), (any & int)}","{(int & int), (int & int)}"); }
		@Test public void test_15639() { testInvalid("{(any & any), (any & int)}","(!int | {any})"); }
		@Test public void test_15640() { testInvalid("{(any & any), (any & int)}","({any, any} | {any})"); }
		@Test public void test_15641() { testInvalid("{(any & any), (any & int)}","((any | any) | {any})"); }
		@Test public void test_15642() { testInvalid("{(any & any), (any & int)}","((int | any) | {any})"); }
		@Test public void test_15643() { testInvalid("{(any & any), (any & int)}","((any & any) | {any})"); }
		@Test public void test_15644() { testInvalid("{(any & any), (any & int)}","((int & any) | {any})"); }
		@Test public void test_15645() { testInvalid("{(any & any), (any & int)}","((any & int) | {any})"); }
		@Test public void test_15646() { testInvalid("{(any & any), (any & int)}","({int} | {int})"); }
		@Test public void test_15647() { testInvalid("{(any & any), (any & int)}","(!any | {int})"); }
		@Test public void test_15648() { testInvalid("{(any & any), (any & int)}","(!int | {int})"); }
		@Test public void test_15649() { testInvalid("{(any & any), (any & int)}","({any, int} | {int})"); }
		@Test public void test_15650() { testInvalid("{(any & any), (any & int)}","((int & any) | {int})"); }
		@Test public void test_15651() { testInvalid("{(any & any), (any & int)}","((any & int) | {int})"); }
		@Test public void test_15652() { testInvalid("{(any & any), (any & int)}","((int & int) | {int})"); }
		@Test public void test_15653() { testInvalid("{(any & any), (any & int)}","({any} | !any)"); }
		@Test public void test_15654() { testInvalid("{(any & any), (any & int)}","({int} | !any)"); }
		@Test public void test_15655() { testInvalid("{(any & any), (any & int)}","({any, any} | !any)"); }
		@Test public void test_15656() { testValid("{(any & any), (any & int)}","({int, int} | !any)"); }
		@Test public void test_15657() { testInvalid("{(any & any), (any & int)}","((any | any) | !any)"); }
		@Test public void test_15658() { testInvalid("{(any & any), (any & int)}","((int | any) | !any)"); }
		@Test public void test_15659() { testInvalid("{(any & any), (any & int)}","((int | int) | !any)"); }
		@Test public void test_15660() { testInvalid("{(any & any), (any & int)}","((int & int) | !any)"); }
		@Test public void test_15661() { testInvalid("{(any & any), (any & int)}","(!int | !int)"); }
		@Test public void test_15662() { testInvalid("{(any & any), (any & int)}","({any, any} | !int)"); }
		@Test public void test_15663() { testInvalid("{(any & any), (any & int)}","({int, int} | !int)"); }
		@Test public void test_15664() { testInvalid("{(any & any), (any & int)}","((int | any) | !int)"); }
		@Test public void test_15665() { testInvalid("{(any & any), (any & int)}","((any | int) | !int)"); }
		@Test public void test_15666() { testInvalid("{(any & any), (any & int)}","((any & int) | !int)"); }
		@Test public void test_15667() { testInvalid("{(any & any), (any & int)}","((int & int) | !int)"); }
		@Test public void test_15668() { testInvalid("{(any & any), (any & int)}","({int} | {any, any})"); }
		@Test public void test_15669() { testInvalid("{(any & any), (any & int)}","(!any | {any, any})"); }
		@Test public void test_15670() { testInvalid("{(any & any), (any & int)}","(!int | {any, any})"); }
		@Test public void test_15671() { testInvalid("{(any & any), (any & int)}","({any, int} | {any, any})"); }
		@Test public void test_15672() { testInvalid("{(any & any), (any & int)}","((int | any) | {any, any})"); }
		@Test public void test_15673() { testInvalid("{(any & any), (any & int)}","((any & any) | {any, any})"); }
		@Test public void test_15674() { testInvalid("{(any & any), (any & int)}","((any & int) | {any, any})"); }
		@Test public void test_15675() { testInvalid("{(any & any), (any & int)}","(!int | {int, any})"); }
		@Test public void test_15676() { testInvalid("{(any & any), (any & int)}","({any, int} | {int, any})"); }
		@Test public void test_15677() { testInvalid("{(any & any), (any & int)}","((any | any) | {int, any})"); }
		@Test public void test_15678() { testInvalid("{(any & any), (any & int)}","((int | any) | {int, any})"); }
		@Test public void test_15679() { testInvalid("{(any & any), (any & int)}","((any | int) | {int, any})"); }
		@Test public void test_15680() { testInvalid("{(any & any), (any & int)}","((int & any) | {int, any})"); }
		@Test public void test_15681() { testInvalid("{(any & any), (any & int)}","({any} | {any, int})"); }
		@Test public void test_15682() { testInvalid("{(any & any), (any & int)}","(!int | {any, int})"); }
		@Test public void test_15683() { testValid("{(any & any), (any & int)}","({any, int} | {any, int})"); }
		@Test public void test_15684() { testInvalid("{(any & any), (any & int)}","((any | any) | {any, int})"); }
		@Test public void test_15685() { testInvalid("{(any & any), (any & int)}","((any | int) | {any, int})"); }
		@Test public void test_15686() { testInvalid("{(any & any), (any & int)}","((int | int) | {any, int})"); }
		@Test public void test_15687() { testInvalid("{(any & any), (any & int)}","((int & any) | {any, int})"); }
		@Test public void test_15688() { testValid("{(any & any), (any & int)}","(!any | {int, int})"); }
		@Test public void test_15689() { testInvalid("{(any & any), (any & int)}","(!int | {int, int})"); }
		@Test public void test_15690() { testInvalid("{(any & any), (any & int)}","({any, any} | {int, int})"); }
		@Test public void test_15691() { testValid("{(any & any), (any & int)}","({any, int} | {int, int})"); }
		@Test public void test_15692() { testInvalid("{(any & any), (any & int)}","((any | any) | {int, int})"); }
		@Test public void test_15693() { testInvalid("{(any & any), (any & int)}","((int | int) | {int, int})"); }
		@Test public void test_15694() { testInvalid("{(any & any), (any & int)}","((int & any) | {int, int})"); }
		@Test public void test_15695() { testInvalid("{(any & any), (any & int)}","((any & int) | {int, int})"); }
		@Test public void test_15696() { testInvalid("{(any & any), (any & int)}","((int & int) | {int, int})"); }
		@Test public void test_15697() { testInvalid("{(any & any), (any & int)}","({any} | (any | any))"); }
		@Test public void test_15698() { testInvalid("{(any & any), (any & int)}","(!any | (any | any))"); }
		@Test public void test_15699() { testInvalid("{(any & any), (any & int)}","({any, any} | (any | any))"); }
		@Test public void test_15700() { testInvalid("{(any & any), (any & int)}","({any, int} | (any | any))"); }
		@Test public void test_15701() { testInvalid("{(any & any), (any & int)}","({int, int} | (any | any))"); }
		@Test public void test_15702() { testInvalid("{(any & any), (any & int)}","((int | any) | (any | any))"); }
		@Test public void test_15703() { testInvalid("{(any & any), (any & int)}","((any | int) | (any | any))"); }
		@Test public void test_15704() { testInvalid("{(any & any), (any & int)}","((any & int) | (any | any))"); }
		@Test public void test_15705() { testInvalid("{(any & any), (any & int)}","((int & int) | (any | any))"); }
		@Test public void test_15706() { testInvalid("{(any & any), (any & int)}","({any} | (int | any))"); }
		@Test public void test_15707() { testInvalid("{(any & any), (any & int)}","(!int | (int | any))"); }
		@Test public void test_15708() { testInvalid("{(any & any), (any & int)}","({int, any} | (int | any))"); }
		@Test public void test_15709() { testInvalid("{(any & any), (any & int)}","({any, int} | (int | any))"); }
		@Test public void test_15710() { testInvalid("{(any & any), (any & int)}","((int & any) | (int | any))"); }
		@Test public void test_15711() { testInvalid("{(any & any), (any & int)}","((any & int) | (int | any))"); }
		@Test public void test_15712() { testInvalid("{(any & any), (any & int)}","({any} | (any | int))"); }
		@Test public void test_15713() { testInvalid("{(any & any), (any & int)}","({int} | (any | int))"); }
		@Test public void test_15714() { testInvalid("{(any & any), (any & int)}","(!any | (any | int))"); }
		@Test public void test_15715() { testInvalid("{(any & any), (any & int)}","(!int | (any | int))"); }
		@Test public void test_15716() { testInvalid("{(any & any), (any & int)}","({any, int} | (any | int))"); }
		@Test public void test_15717() { testInvalid("{(any & any), (any & int)}","({int, int} | (any | int))"); }
		@Test public void test_15718() { testInvalid("{(any & any), (any & int)}","((int | any) | (any | int))"); }
		@Test public void test_15719() { testInvalid("{(any & any), (any & int)}","((any | int) | (any | int))"); }
		@Test public void test_15720() { testInvalid("{(any & any), (any & int)}","((int | int) | (any | int))"); }
		@Test public void test_15721() { testInvalid("{(any & any), (any & int)}","((any & any) | (any | int))"); }
		@Test public void test_15722() { testInvalid("{(any & any), (any & int)}","({int} | (int | int))"); }
		@Test public void test_15723() { testInvalid("{(any & any), (any & int)}","(!any | (int | int))"); }
		@Test public void test_15724() { testInvalid("{(any & any), (any & int)}","(!int | (int | int))"); }
		@Test public void test_15725() { testInvalid("{(any & any), (any & int)}","({int, any} | (int | int))"); }
		@Test public void test_15726() { testInvalid("{(any & any), (any & int)}","({any, int} | (int | int))"); }
		@Test public void test_15727() { testInvalid("{(any & any), (any & int)}","((any | int) | (int | int))"); }
		@Test public void test_15728() { testInvalid("{(any & any), (any & int)}","((int | int) | (int | int))"); }
		@Test public void test_15729() { testInvalid("{(any & any), (any & int)}","((any & any) | (int | int))"); }
		@Test public void test_15730() { testInvalid("{(any & any), (any & int)}","((int & any) | (int | int))"); }
		@Test public void test_15731() { testInvalid("{(any & any), (any & int)}","((int & int) | (int | int))"); }
		@Test public void test_15732() { testInvalid("{(any & any), (any & int)}","(!any | (any & any))"); }
		@Test public void test_15733() { testInvalid("{(any & any), (any & int)}","(!int | (any & any))"); }
		@Test public void test_15734() { testInvalid("{(any & any), (any & int)}","({any, any} | (any & any))"); }
		@Test public void test_15735() { testInvalid("{(any & any), (any & int)}","({int, any} | (any & any))"); }
		@Test public void test_15736() { testInvalid("{(any & any), (any & int)}","({any, int} | (any & any))"); }
		@Test public void test_15737() { testInvalid("{(any & any), (any & int)}","({int, int} | (any & any))"); }
		@Test public void test_15738() { testInvalid("{(any & any), (any & int)}","((int | any) | (any & any))"); }
		@Test public void test_15739() { testInvalid("{(any & any), (any & int)}","((int | int) | (any & any))"); }
		@Test public void test_15740() { testInvalid("{(any & any), (any & int)}","((int & any) | (any & any))"); }
		@Test public void test_15741() { testInvalid("{(any & any), (any & int)}","((any & int) | (any & any))"); }
		@Test public void test_15742() { testInvalid("{(any & any), (any & int)}","((int & int) | (any & any))"); }
		@Test public void test_15743() { testInvalid("{(any & any), (any & int)}","({any} | (int & any))"); }
		@Test public void test_15744() { testInvalid("{{any, int}, (int & int)}","{int}"); }
		@Test public void test_15745() { testInvalid("{{any, int}, (int & int)}","{any, any}"); }
		@Test public void test_15746() { testInvalid("{{any, int}, (int & int)}","{int, int}"); }
		@Test public void test_15747() { testInvalid("{{any, int}, (int & int)}","(any | int)"); }
		@Test public void test_15748() { testInvalid("{{any, int}, (int & int)}","(int & any)"); }
		@Test public void test_15749() { testInvalid("{{any, int}, (int & int)}","{{any}}"); }
		@Test public void test_15750() { testInvalid("{{any, int}, (int & int)}","{{int, any}}"); }
		@Test public void test_15751() { testInvalid("{{any, int}, (int & int)}","{{int, int}}"); }
		@Test public void test_15752() { testInvalid("{{any, int}, (int & int)}","{(any | int)}"); }
		@Test public void test_15753() { testInvalid("{{any, int}, (int & int)}","!{int, any}"); }
		@Test public void test_15754() { testInvalid("{{any, int}, (int & int)}","!{int, int}"); }
		@Test public void test_15755() { testValid("{{any, int}, (int & int)}","!(any | any)"); }
		@Test public void test_15756() { testValid("{{any, int}, (int & int)}","!(any & any)"); }
		@Test public void test_15757() { testInvalid("{{any, int}, (int & int)}","!(int & int)"); }
		@Test public void test_15758() { testInvalid("{{any, int}, (int & int)}","{{int}, {any}}"); }
		@Test public void test_15759() { testInvalid("{{any, int}, (int & int)}","{!int, {any}}"); }
		@Test public void test_15760() { testInvalid("{{any, int}, (int & int)}","{{int, int}, {any}}"); }
		@Test public void test_15761() { testInvalid("{{any, int}, (int & int)}","{(any | int), {any}}"); }
		@Test public void test_15762() { testInvalid("{{any, int}, (int & int)}","{!int, {int}}"); }
		@Test public void test_15763() { testInvalid("{{any, int}, (int & int)}","{{any, any}, {int}}"); }
		@Test public void test_15764() { testInvalid("{{any, int}, (int & int)}","{(any | any), {int}}"); }
		@Test public void test_15765() { testInvalid("{{any, int}, (int & int)}","{(any & any), {int}}"); }
		@Test public void test_15766() { testInvalid("{{any, int}, (int & int)}","{(any & int), {int}}"); }
		@Test public void test_15767() { testInvalid("{{any, int}, (int & int)}","{{any, any}, !int}"); }
		@Test public void test_15768() { testInvalid("{{any, int}, (int & int)}","{{any, int}, !int}"); }
		@Test public void test_15769() { testInvalid("{{any, int}, (int & int)}","{(any | any), !int}"); }
		@Test public void test_15770() { testInvalid("{{any, int}, (int & int)}","{(int | any), !int}"); }
		@Test public void test_15771() { testInvalid("{{any, int}, (int & int)}","{(any & any), !int}"); }
		@Test public void test_15772() { testInvalid("{{any, int}, (int & int)}","{(int & any), !int}"); }
		@Test public void test_15773() { testInvalid("{{any, int}, (int & int)}","{(int & int), !int}"); }
		@Test public void test_15774() { testInvalid("{{any, int}, (int & int)}","{{any}, {any, any}}"); }
		@Test public void test_15775() { testInvalid("{{any, int}, (int & int)}","{{int}, {any, any}}"); }
		@Test public void test_15776() { testInvalid("{{any, int}, (int & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_15777() { testInvalid("{{any, int}, (int & int)}","{(any | any), {any, any}}"); }
		@Test public void test_15778() { testInvalid("{{any, int}, (int & int)}","{(any | int), {any, any}}"); }
		@Test public void test_15779() { testInvalid("{{any, int}, (int & int)}","{!int, {int, any}}"); }
		@Test public void test_15780() { testInvalid("{{any, int}, (int & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_15781() { testInvalid("{{any, int}, (int & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_15782() { testInvalid("{{any, int}, (int & int)}","{(any & int), {int, any}}"); }
		@Test public void test_15783() { testInvalid("{{any, int}, (int & int)}","{{any}, {any, int}}"); }
		@Test public void test_15784() { testInvalid("{{any, int}, (int & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_15785() { testInvalid("{{any, int}, (int & int)}","{(int | int), {any, int}}"); }
		@Test public void test_15786() { testInvalid("{{any, int}, (int & int)}","{(any & int), {any, int}}"); }
		@Test public void test_15787() { testInvalid("{{any, int}, (int & int)}","{!int, {int, int}}"); }
		@Test public void test_15788() { testInvalid("{{any, int}, (int & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_15789() { testInvalid("{{any, int}, (int & int)}","{(any | any), {int, int}}"); }
		@Test public void test_15790() { testInvalid("{{any, int}, (int & int)}","{(int | any), {int, int}}"); }
		@Test public void test_15791() { testInvalid("{{any, int}, (int & int)}","{(int & any), {int, int}}"); }
		@Test public void test_15792() { testInvalid("{{any, int}, (int & int)}","{{int}, (any | any)}"); }
		@Test public void test_15793() { testInvalid("{{any, int}, (int & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_15794() { testInvalid("{{any, int}, (int & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_15795() { testInvalid("{{any, int}, (int & int)}","{(any | any), (any | any)}"); }
		@Test public void test_15796() { testInvalid("{{any, int}, (int & int)}","{(int | any), (any | any)}"); }
		@Test public void test_15797() { testInvalid("{{any, int}, (int & int)}","{(int & int), (any | any)}"); }
		@Test public void test_15798() { testInvalid("{{any, int}, (int & int)}","{!int, (int | any)}"); }
		@Test public void test_15799() { testInvalid("{{any, int}, (int & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_15800() { testInvalid("{{any, int}, (int & int)}","{(any | any), (int | any)}"); }
		@Test public void test_15801() { testInvalid("{{any, int}, (int & int)}","{(int | int), (int | any)}"); }
		@Test public void test_15802() { testInvalid("{{any, int}, (int & int)}","{{any}, (any | int)}"); }
		@Test public void test_15803() { testInvalid("{{any, int}, (int & int)}","{!int, (any | int)}"); }
		@Test public void test_15804() { testInvalid("{{any, int}, (int & int)}","{(any | any), (any | int)}"); }
		@Test public void test_15805() { testInvalid("{{any, int}, (int & int)}","{(any | int), (any | int)}"); }
		@Test public void test_15806() { testInvalid("{{any, int}, (int & int)}","{(any & int), (any | int)}"); }
		@Test public void test_15807() { testInvalid("{{any, int}, (int & int)}","{{int}, (int | int)}"); }
		@Test public void test_15808() { testInvalid("{{any, int}, (int & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_15809() { testValid("{{any, int}, (int & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_15810() { testInvalid("{{any, int}, (int & int)}","{{int}, (any & any)}"); }
		@Test public void test_15811() { testInvalid("{{any, int}, (int & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_15812() { testInvalid("{{any, int}, (int & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_15813() { testInvalid("{{any, int}, (int & int)}","{(int | any), (any & any)}"); }
		@Test public void test_15814() { testInvalid("{{any, int}, (int & int)}","{(any & any), (any & any)}"); }
		@Test public void test_15815() { testInvalid("{{any, int}, (int & int)}","{(int & any), (any & any)}"); }
		@Test public void test_15816() { testInvalid("{{any, int}, (int & int)}","{{any}, (int & any)}"); }
		@Test public void test_15817() { testInvalid("{{any, int}, (int & int)}","{{int}, (int & any)}"); }
		@Test public void test_15818() { testInvalid("{{any, int}, (int & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_15819() { testInvalid("{{any, int}, (int & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_15820() { testInvalid("{{any, int}, (int & int)}","{(any | int), (int & any)}"); }
		@Test public void test_15821() { testInvalid("{{any, int}, (int & int)}","{(any & any), (int & any)}"); }
		@Test public void test_15822() { testInvalid("{{any, int}, (int & int)}","{(int & any), (int & any)}"); }
		@Test public void test_15823() { testInvalid("{{any, int}, (int & int)}","{(int & int), (int & any)}"); }
		@Test public void test_15824() { testInvalid("{{any, int}, (int & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_15825() { testInvalid("{{any, int}, (int & int)}","{(any & any), (any & int)}"); }
		@Test public void test_15826() { testValid("{{any, int}, (int & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_15827() { testInvalid("{{any, int}, (int & int)}","{(int | int), (int & int)}"); }
		@Test public void test_15828() { testInvalid("{{any, int}, (int & int)}","{(any & any), (int & int)}"); }
		@Test public void test_15829() { testInvalid("{{any, int}, (int & int)}","{(any & int), (int & int)}"); }
		@Test public void test_15830() { testInvalid("{{any, int}, (int & int)}","{(int & int), (int & int)}"); }
		@Test public void test_15831() { testInvalid("{{any, int}, (int & int)}","(!int | {any})"); }
		@Test public void test_15832() { testInvalid("{{any, int}, (int & int)}","({any, any} | {any})"); }
		@Test public void test_15833() { testInvalid("{{any, int}, (int & int)}","((any | any) | {any})"); }
		@Test public void test_15834() { testInvalid("{{any, int}, (int & int)}","((int | any) | {any})"); }
		@Test public void test_15835() { testInvalid("{{any, int}, (int & int)}","((any & any) | {any})"); }
		@Test public void test_15836() { testInvalid("{{any, int}, (int & int)}","((int & any) | {any})"); }
		@Test public void test_15837() { testInvalid("{{any, int}, (int & int)}","((any & int) | {any})"); }
		@Test public void test_15838() { testInvalid("{{any, int}, (int & int)}","({int} | {int})"); }
		@Test public void test_15839() { testInvalid("{{any, int}, (int & int)}","(!any | {int})"); }
		@Test public void test_15840() { testInvalid("{{any, int}, (int & int)}","(!int | {int})"); }
		@Test public void test_15841() { testInvalid("{{any, int}, (int & int)}","({any, int} | {int})"); }
		@Test public void test_15842() { testInvalid("{{any, int}, (int & int)}","((int & any) | {int})"); }
		@Test public void test_15843() { testInvalid("{{any, int}, (int & int)}","((any & int) | {int})"); }
		@Test public void test_15844() { testInvalid("{{any, int}, (int & int)}","((int & int) | {int})"); }
		@Test public void test_15845() { testInvalid("{{any, int}, (int & int)}","({any} | !any)"); }
		@Test public void test_15846() { testInvalid("{{any, int}, (int & int)}","({int} | !any)"); }
		@Test public void test_15847() { testInvalid("{{any, int}, (int & int)}","({any, any} | !any)"); }
		@Test public void test_15848() { testInvalid("{{any, int}, (int & int)}","({int, int} | !any)"); }
		@Test public void test_15849() { testInvalid("{{any, int}, (int & int)}","((any | any) | !any)"); }
		@Test public void test_15850() { testInvalid("{{any, int}, (int & int)}","((int | any) | !any)"); }
		@Test public void test_15851() { testInvalid("{{any, int}, (int & int)}","((int | int) | !any)"); }
		@Test public void test_15852() { testInvalid("{{any, int}, (int & int)}","((int & int) | !any)"); }
		@Test public void test_15853() { testInvalid("{{any, int}, (int & int)}","(!int | !int)"); }
		@Test public void test_15854() { testInvalid("{{any, int}, (int & int)}","({any, any} | !int)"); }
		@Test public void test_15855() { testInvalid("{{any, int}, (int & int)}","({int, int} | !int)"); }
		@Test public void test_15856() { testInvalid("{{any, int}, (int & int)}","((int | any) | !int)"); }
		@Test public void test_15857() { testInvalid("{{any, int}, (int & int)}","((any | int) | !int)"); }
		@Test public void test_15858() { testInvalid("{{any, int}, (int & int)}","((any & int) | !int)"); }
		@Test public void test_15859() { testInvalid("{{any, int}, (int & int)}","((int & int) | !int)"); }
		@Test public void test_15860() { testInvalid("{{any, int}, (int & int)}","({int} | {any, any})"); }
		@Test public void test_15861() { testInvalid("{{any, int}, (int & int)}","(!any | {any, any})"); }
		@Test public void test_15862() { testInvalid("{{any, int}, (int & int)}","(!int | {any, any})"); }
		@Test public void test_15863() { testInvalid("{{any, int}, (int & int)}","({any, int} | {any, any})"); }
		@Test public void test_15864() { testInvalid("{{any, int}, (int & int)}","((int | any) | {any, any})"); }
		@Test public void test_15865() { testInvalid("{{any, int}, (int & int)}","((any & any) | {any, any})"); }
		@Test public void test_15866() { testInvalid("{{any, int}, (int & int)}","((any & int) | {any, any})"); }
		@Test public void test_15867() { testInvalid("{{any, int}, (int & int)}","(!int | {int, any})"); }
		@Test public void test_15868() { testInvalid("{{any, int}, (int & int)}","({any, int} | {int, any})"); }
		@Test public void test_15869() { testInvalid("{{any, int}, (int & int)}","((any | any) | {int, any})"); }
		@Test public void test_15870() { testInvalid("{{any, int}, (int & int)}","((int | any) | {int, any})"); }
		@Test public void test_15871() { testInvalid("{{any, int}, (int & int)}","((any | int) | {int, any})"); }
		@Test public void test_15872() { testInvalid("{{any, int}, (int & int)}","((int & any) | {int, any})"); }
		@Test public void test_15873() { testInvalid("{{any, int}, (int & int)}","({any} | {any, int})"); }
		@Test public void test_15874() { testInvalid("{{any, int}, (int & int)}","(!int | {any, int})"); }
		@Test public void test_15875() { testInvalid("{{any, int}, (int & int)}","({any, int} | {any, int})"); }
		@Test public void test_15876() { testInvalid("{{any, int}, (int & int)}","((any | any) | {any, int})"); }
		@Test public void test_15877() { testInvalid("{{any, int}, (int & int)}","((any | int) | {any, int})"); }
		@Test public void test_15878() { testInvalid("{{any, int}, (int & int)}","((int | int) | {any, int})"); }
		@Test public void test_15879() { testInvalid("{{any, int}, (int & int)}","((int & any) | {any, int})"); }
		@Test public void test_15880() { testInvalid("{{any, int}, (int & int)}","(!any | {int, int})"); }
		@Test public void test_15881() { testInvalid("{{any, int}, (int & int)}","(!int | {int, int})"); }
		@Test public void test_15882() { testInvalid("{{any, int}, (int & int)}","({any, any} | {int, int})"); }
		@Test public void test_15883() { testInvalid("{{any, int}, (int & int)}","({any, int} | {int, int})"); }
		@Test public void test_15884() { testInvalid("{{any, int}, (int & int)}","((any | any) | {int, int})"); }
		@Test public void test_15885() { testInvalid("{{any, int}, (int & int)}","((int | int) | {int, int})"); }
		@Test public void test_15886() { testInvalid("{{any, int}, (int & int)}","((int & any) | {int, int})"); }
		@Test public void test_15887() { testInvalid("{{any, int}, (int & int)}","((any & int) | {int, int})"); }
		@Test public void test_15888() { testInvalid("{{any, int}, (int & int)}","((int & int) | {int, int})"); }
		@Test public void test_15889() { testInvalid("{{any, int}, (int & int)}","({any} | (any | any))"); }
		@Test public void test_15890() { testInvalid("{{any, int}, (int & int)}","(!any | (any | any))"); }
		@Test public void test_15891() { testInvalid("{{any, int}, (int & int)}","({any, any} | (any | any))"); }
		@Test public void test_15892() { testInvalid("{{any, int}, (int & int)}","({any, int} | (any | any))"); }
		@Test public void test_15893() { testInvalid("{{any, int}, (int & int)}","({int, int} | (any | any))"); }
		@Test public void test_15894() { testInvalid("{{any, int}, (int & int)}","((int | any) | (any | any))"); }
		@Test public void test_15895() { testInvalid("{{any, int}, (int & int)}","((any | int) | (any | any))"); }
		@Test public void test_15896() { testInvalid("{{any, int}, (int & int)}","((any & int) | (any | any))"); }
		@Test public void test_15897() { testInvalid("{{any, int}, (int & int)}","((int & int) | (any | any))"); }
		@Test public void test_15898() { testInvalid("{{any, int}, (int & int)}","({any} | (int | any))"); }
		@Test public void test_15899() { testInvalid("{{any, int}, (int & int)}","(!int | (int | any))"); }
		@Test public void test_15900() { testInvalid("{{any, int}, (int & int)}","({int, any} | (int | any))"); }
		@Test public void test_15901() { testInvalid("{{any, int}, (int & int)}","({any, int} | (int | any))"); }
		@Test public void test_15902() { testInvalid("{{any, int}, (int & int)}","((int & any) | (int | any))"); }
		@Test public void test_15903() { testInvalid("{{any, int}, (int & int)}","((any & int) | (int | any))"); }
		@Test public void test_15904() { testInvalid("{{any, int}, (int & int)}","({any} | (any | int))"); }
		@Test public void test_15905() { testInvalid("{{any, int}, (int & int)}","({int} | (any | int))"); }
		@Test public void test_15906() { testInvalid("{{any, int}, (int & int)}","(!any | (any | int))"); }
		@Test public void test_15907() { testInvalid("{{any, int}, (int & int)}","(!int | (any | int))"); }
		@Test public void test_15908() { testInvalid("{{any, int}, (int & int)}","({any, int} | (any | int))"); }
		@Test public void test_15909() { testInvalid("{{any, int}, (int & int)}","({int, int} | (any | int))"); }
		@Test public void test_15910() { testInvalid("{{any, int}, (int & int)}","((int | any) | (any | int))"); }
		@Test public void test_15911() { testInvalid("{{any, int}, (int & int)}","((any | int) | (any | int))"); }
		@Test public void test_15912() { testInvalid("{{any, int}, (int & int)}","((int | int) | (any | int))"); }
		@Test public void test_15913() { testInvalid("{{any, int}, (int & int)}","((any & any) | (any | int))"); }
		@Test public void test_15914() { testInvalid("{{any, int}, (int & int)}","({int} | (int | int))"); }
		@Test public void test_15915() { testInvalid("{{any, int}, (int & int)}","(!any | (int | int))"); }
		@Test public void test_15916() { testInvalid("{{any, int}, (int & int)}","(!int | (int | int))"); }
		@Test public void test_15917() { testInvalid("{{any, int}, (int & int)}","({int, any} | (int | int))"); }
		@Test public void test_15918() { testInvalid("{{any, int}, (int & int)}","({any, int} | (int | int))"); }
		@Test public void test_15919() { testInvalid("{{any, int}, (int & int)}","((any | int) | (int | int))"); }
		@Test public void test_15920() { testInvalid("{{any, int}, (int & int)}","((int | int) | (int | int))"); }
		@Test public void test_15921() { testInvalid("{{any, int}, (int & int)}","((any & any) | (int | int))"); }
		@Test public void test_15922() { testInvalid("{{any, int}, (int & int)}","((int & any) | (int | int))"); }
		@Test public void test_15923() { testInvalid("{{any, int}, (int & int)}","((int & int) | (int | int))"); }
		@Test public void test_15924() { testInvalid("{{any, int}, (int & int)}","(!any | (any & any))"); }
		@Test public void test_15925() { testInvalid("{{any, int}, (int & int)}","(!int | (any & any))"); }
		@Test public void test_15926() { testInvalid("{{any, int}, (int & int)}","({any, any} | (any & any))"); }
		@Test public void test_15927() { testInvalid("{{any, int}, (int & int)}","({int, any} | (any & any))"); }
		@Test public void test_15928() { testInvalid("{{any, int}, (int & int)}","({any, int} | (any & any))"); }
		@Test public void test_15929() { testInvalid("{{any, int}, (int & int)}","({int, int} | (any & any))"); }
		@Test public void test_15930() { testInvalid("{{any, int}, (int & int)}","((int | any) | (any & any))"); }
		@Test public void test_15931() { testInvalid("{{any, int}, (int & int)}","((int | int) | (any & any))"); }
		@Test public void test_15932() { testInvalid("{{any, int}, (int & int)}","((int & any) | (any & any))"); }
		@Test public void test_15933() { testInvalid("{{any, int}, (int & int)}","((any & int) | (any & any))"); }
		@Test public void test_15934() { testInvalid("{{any, int}, (int & int)}","((int & int) | (any & any))"); }
		@Test public void test_15935() { testInvalid("{{any, int}, (int & int)}","({any} | (int & any))"); }
		@Test public void test_15936() { testInvalid("{(int | int), (int & int)}","{int}"); }
		@Test public void test_15937() { testInvalid("{(int | int), (int & int)}","{any, any}"); }
		@Test public void test_15938() { testValid("{(int | int), (int & int)}","{int, int}"); }
		@Test public void test_15939() { testInvalid("{(int | int), (int & int)}","(any | int)"); }
		@Test public void test_15940() { testInvalid("{(int | int), (int & int)}","(int & any)"); }
		@Test public void test_15941() { testInvalid("{(int | int), (int & int)}","{{any}}"); }
		@Test public void test_15942() { testInvalid("{(int | int), (int & int)}","{{int, any}}"); }
		@Test public void test_15943() { testInvalid("{(int | int), (int & int)}","{{int, int}}"); }
		@Test public void test_15944() { testInvalid("{(int | int), (int & int)}","{(any | int)}"); }
		@Test public void test_15945() { testInvalid("{(int | int), (int & int)}","!{int, any}"); }
		@Test public void test_15946() { testInvalid("{(int | int), (int & int)}","!{int, int}"); }
		@Test public void test_15947() { testValid("{(int | int), (int & int)}","!(any | any)"); }
		@Test public void test_15948() { testValid("{(int | int), (int & int)}","!(any & any)"); }
		@Test public void test_15949() { testInvalid("{(int | int), (int & int)}","!(int & int)"); }
		@Test public void test_15950() { testInvalid("{(int | int), (int & int)}","{{int}, {any}}"); }
		@Test public void test_15951() { testInvalid("{(int | int), (int & int)}","{!int, {any}}"); }
		@Test public void test_15952() { testInvalid("{(int | int), (int & int)}","{{int, int}, {any}}"); }
		@Test public void test_15953() { testInvalid("{(int | int), (int & int)}","{(any | int), {any}}"); }
		@Test public void test_15954() { testInvalid("{(int | int), (int & int)}","{!int, {int}}"); }
		@Test public void test_15955() { testInvalid("{(int | int), (int & int)}","{{any, any}, {int}}"); }
		@Test public void test_15956() { testInvalid("{(int | int), (int & int)}","{(any | any), {int}}"); }
		@Test public void test_15957() { testInvalid("{(int | int), (int & int)}","{(any & any), {int}}"); }
		@Test public void test_15958() { testInvalid("{(int | int), (int & int)}","{(any & int), {int}}"); }
		@Test public void test_15959() { testInvalid("{(int | int), (int & int)}","{{any, any}, !int}"); }
		@Test public void test_15960() { testInvalid("{(int | int), (int & int)}","{{any, int}, !int}"); }
		@Test public void test_15961() { testInvalid("{(int | int), (int & int)}","{(any | any), !int}"); }
		@Test public void test_15962() { testInvalid("{(int | int), (int & int)}","{(int | any), !int}"); }
		@Test public void test_15963() { testInvalid("{(int | int), (int & int)}","{(any & any), !int}"); }
		@Test public void test_15964() { testInvalid("{(int | int), (int & int)}","{(int & any), !int}"); }
		@Test public void test_15965() { testInvalid("{(int | int), (int & int)}","{(int & int), !int}"); }
		@Test public void test_15966() { testInvalid("{(int | int), (int & int)}","{{any}, {any, any}}"); }
		@Test public void test_15967() { testInvalid("{(int | int), (int & int)}","{{int}, {any, any}}"); }
		@Test public void test_15968() { testInvalid("{(int | int), (int & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_15969() { testInvalid("{(int | int), (int & int)}","{(any | any), {any, any}}"); }
		@Test public void test_15970() { testInvalid("{(int | int), (int & int)}","{(any | int), {any, any}}"); }
		@Test public void test_15971() { testInvalid("{(int | int), (int & int)}","{!int, {int, any}}"); }
		@Test public void test_15972() { testInvalid("{(int | int), (int & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_15973() { testInvalid("{(int | int), (int & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_15974() { testInvalid("{(int | int), (int & int)}","{(any & int), {int, any}}"); }
		@Test public void test_15975() { testInvalid("{(int | int), (int & int)}","{{any}, {any, int}}"); }
		@Test public void test_15976() { testInvalid("{(int | int), (int & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_15977() { testInvalid("{(int | int), (int & int)}","{(int | int), {any, int}}"); }
		@Test public void test_15978() { testInvalid("{(int | int), (int & int)}","{(any & int), {any, int}}"); }
		@Test public void test_15979() { testInvalid("{(int | int), (int & int)}","{!int, {int, int}}"); }
		@Test public void test_15980() { testInvalid("{(int | int), (int & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_15981() { testInvalid("{(int | int), (int & int)}","{(any | any), {int, int}}"); }
		@Test public void test_15982() { testInvalid("{(int | int), (int & int)}","{(int | any), {int, int}}"); }
		@Test public void test_15983() { testInvalid("{(int | int), (int & int)}","{(int & any), {int, int}}"); }
		@Test public void test_15984() { testInvalid("{(int | int), (int & int)}","{{int}, (any | any)}"); }
		@Test public void test_15985() { testInvalid("{(int | int), (int & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_15986() { testInvalid("{(int | int), (int & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_15987() { testInvalid("{(int | int), (int & int)}","{(any | any), (any | any)}"); }
		@Test public void test_15988() { testInvalid("{(int | int), (int & int)}","{(int | any), (any | any)}"); }
		@Test public void test_15989() { testInvalid("{(int | int), (int & int)}","{(int & int), (any | any)}"); }
		@Test public void test_15990() { testInvalid("{(int | int), (int & int)}","{!int, (int | any)}"); }
		@Test public void test_15991() { testInvalid("{(int | int), (int & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_15992() { testInvalid("{(int | int), (int & int)}","{(any | any), (int | any)}"); }
		@Test public void test_15993() { testInvalid("{(int | int), (int & int)}","{(int | int), (int | any)}"); }
		@Test public void test_15994() { testInvalid("{(int | int), (int & int)}","{{any}, (any | int)}"); }
		@Test public void test_15995() { testInvalid("{(int | int), (int & int)}","{!int, (any | int)}"); }
		@Test public void test_15996() { testInvalid("{(int | int), (int & int)}","{(any | any), (any | int)}"); }
		@Test public void test_15997() { testInvalid("{(int | int), (int & int)}","{(any | int), (any | int)}"); }
		@Test public void test_15998() { testInvalid("{(int | int), (int & int)}","{(any & int), (any | int)}"); }
		@Test public void test_15999() { testInvalid("{(int | int), (int & int)}","{{int}, (int | int)}"); }
		@Test public void test_16000() { testInvalid("{(int | int), (int & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_16001() { testInvalid("{(int | int), (int & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_16002() { testInvalid("{(int | int), (int & int)}","{{int}, (any & any)}"); }
		@Test public void test_16003() { testInvalid("{(int | int), (int & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_16004() { testInvalid("{(int | int), (int & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_16005() { testInvalid("{(int | int), (int & int)}","{(int | any), (any & any)}"); }
		@Test public void test_16006() { testInvalid("{(int | int), (int & int)}","{(any & any), (any & any)}"); }
		@Test public void test_16007() { testInvalid("{(int | int), (int & int)}","{(int & any), (any & any)}"); }
		@Test public void test_16008() { testInvalid("{(int | int), (int & int)}","{{any}, (int & any)}"); }
		@Test public void test_16009() { testInvalid("{(int | int), (int & int)}","{{int}, (int & any)}"); }
		@Test public void test_16010() { testInvalid("{(int | int), (int & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_16011() { testInvalid("{(int | int), (int & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_16012() { testInvalid("{(int | int), (int & int)}","{(any | int), (int & any)}"); }
		@Test public void test_16013() { testInvalid("{(int | int), (int & int)}","{(any & any), (int & any)}"); }
		@Test public void test_16014() { testValid("{(int | int), (int & int)}","{(int & any), (int & any)}"); }
		@Test public void test_16015() { testValid("{(int | int), (int & int)}","{(int & int), (int & any)}"); }
		@Test public void test_16016() { testInvalid("{(int | int), (int & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_16017() { testInvalid("{(int | int), (int & int)}","{(any & any), (any & int)}"); }
		@Test public void test_16018() { testInvalid("{(int | int), (int & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_16019() { testValid("{(int | int), (int & int)}","{(int | int), (int & int)}"); }
		@Test public void test_16020() { testInvalid("{(int | int), (int & int)}","{(any & any), (int & int)}"); }
		@Test public void test_16021() { testValid("{(int | int), (int & int)}","{(any & int), (int & int)}"); }
		@Test public void test_16022() { testValid("{(int | int), (int & int)}","{(int & int), (int & int)}"); }
		@Test public void test_16023() { testInvalid("{(int | int), (int & int)}","(!int | {any})"); }
		@Test public void test_16024() { testInvalid("{(int | int), (int & int)}","({any, any} | {any})"); }
		@Test public void test_16025() { testInvalid("{(int | int), (int & int)}","((any | any) | {any})"); }
		@Test public void test_16026() { testInvalid("{(int | int), (int & int)}","((int | any) | {any})"); }
		@Test public void test_16027() { testInvalid("{(int | int), (int & int)}","((any & any) | {any})"); }
		@Test public void test_16028() { testInvalid("{(int | int), (int & int)}","((int & any) | {any})"); }
		@Test public void test_16029() { testInvalid("{(int | int), (int & int)}","((any & int) | {any})"); }
		@Test public void test_16030() { testInvalid("{(int | int), (int & int)}","({int} | {int})"); }
		@Test public void test_16031() { testInvalid("{(int | int), (int & int)}","(!any | {int})"); }
		@Test public void test_16032() { testInvalid("{(int | int), (int & int)}","(!int | {int})"); }
		@Test public void test_16033() { testInvalid("{(int | int), (int & int)}","({any, int} | {int})"); }
		@Test public void test_16034() { testInvalid("{(int | int), (int & int)}","((int & any) | {int})"); }
		@Test public void test_16035() { testInvalid("{(int | int), (int & int)}","((any & int) | {int})"); }
		@Test public void test_16036() { testInvalid("{(int | int), (int & int)}","((int & int) | {int})"); }
		@Test public void test_16037() { testInvalid("{(int | int), (int & int)}","({any} | !any)"); }
		@Test public void test_16038() { testInvalid("{(int | int), (int & int)}","({int} | !any)"); }
		@Test public void test_16039() { testInvalid("{(int | int), (int & int)}","({any, any} | !any)"); }
		@Test public void test_16040() { testValid("{(int | int), (int & int)}","({int, int} | !any)"); }
		@Test public void test_16041() { testInvalid("{(int | int), (int & int)}","((any | any) | !any)"); }
		@Test public void test_16042() { testInvalid("{(int | int), (int & int)}","((int | any) | !any)"); }
		@Test public void test_16043() { testInvalid("{(int | int), (int & int)}","((int | int) | !any)"); }
		@Test public void test_16044() { testInvalid("{(int | int), (int & int)}","((int & int) | !any)"); }
		@Test public void test_16045() { testInvalid("{(int | int), (int & int)}","(!int | !int)"); }
		@Test public void test_16046() { testInvalid("{(int | int), (int & int)}","({any, any} | !int)"); }
		@Test public void test_16047() { testInvalid("{(int | int), (int & int)}","({int, int} | !int)"); }
		@Test public void test_16048() { testInvalid("{(int | int), (int & int)}","((int | any) | !int)"); }
		@Test public void test_16049() { testInvalid("{(int | int), (int & int)}","((any | int) | !int)"); }
		@Test public void test_16050() { testInvalid("{(int | int), (int & int)}","((any & int) | !int)"); }
		@Test public void test_16051() { testInvalid("{(int | int), (int & int)}","((int & int) | !int)"); }
		@Test public void test_16052() { testInvalid("{(int | int), (int & int)}","({int} | {any, any})"); }
		@Test public void test_16053() { testInvalid("{(int | int), (int & int)}","(!any | {any, any})"); }
		@Test public void test_16054() { testInvalid("{(int | int), (int & int)}","(!int | {any, any})"); }
		@Test public void test_16055() { testInvalid("{(int | int), (int & int)}","({any, int} | {any, any})"); }
		@Test public void test_16056() { testInvalid("{(int | int), (int & int)}","((int | any) | {any, any})"); }
		@Test public void test_16057() { testInvalid("{(int | int), (int & int)}","((any & any) | {any, any})"); }
		@Test public void test_16058() { testInvalid("{(int | int), (int & int)}","((any & int) | {any, any})"); }
		@Test public void test_16059() { testInvalid("{(int | int), (int & int)}","(!int | {int, any})"); }
		@Test public void test_16060() { testInvalid("{(int | int), (int & int)}","({any, int} | {int, any})"); }
		@Test public void test_16061() { testInvalid("{(int | int), (int & int)}","((any | any) | {int, any})"); }
		@Test public void test_16062() { testInvalid("{(int | int), (int & int)}","((int | any) | {int, any})"); }
		@Test public void test_16063() { testInvalid("{(int | int), (int & int)}","((any | int) | {int, any})"); }
		@Test public void test_16064() { testInvalid("{(int | int), (int & int)}","((int & any) | {int, any})"); }
		@Test public void test_16065() { testInvalid("{(int | int), (int & int)}","({any} | {any, int})"); }
		@Test public void test_16066() { testInvalid("{(int | int), (int & int)}","(!int | {any, int})"); }
		@Test public void test_16067() { testInvalid("{(int | int), (int & int)}","({any, int} | {any, int})"); }
		@Test public void test_16068() { testInvalid("{(int | int), (int & int)}","((any | any) | {any, int})"); }
		@Test public void test_16069() { testInvalid("{(int | int), (int & int)}","((any | int) | {any, int})"); }
		@Test public void test_16070() { testInvalid("{(int | int), (int & int)}","((int | int) | {any, int})"); }
		@Test public void test_16071() { testInvalid("{(int | int), (int & int)}","((int & any) | {any, int})"); }
		@Test public void test_16072() { testValid("{(int | int), (int & int)}","(!any | {int, int})"); }
		@Test public void test_16073() { testInvalid("{(int | int), (int & int)}","(!int | {int, int})"); }
		@Test public void test_16074() { testInvalid("{(int | int), (int & int)}","({any, any} | {int, int})"); }
		@Test public void test_16075() { testInvalid("{(int | int), (int & int)}","({any, int} | {int, int})"); }
		@Test public void test_16076() { testInvalid("{(int | int), (int & int)}","((any | any) | {int, int})"); }
		@Test public void test_16077() { testInvalid("{(int | int), (int & int)}","((int | int) | {int, int})"); }
		@Test public void test_16078() { testInvalid("{(int | int), (int & int)}","((int & any) | {int, int})"); }
		@Test public void test_16079() { testInvalid("{(int | int), (int & int)}","((any & int) | {int, int})"); }
		@Test public void test_16080() { testInvalid("{(int | int), (int & int)}","((int & int) | {int, int})"); }
		@Test public void test_16081() { testInvalid("{(int | int), (int & int)}","({any} | (any | any))"); }
		@Test public void test_16082() { testInvalid("{(int | int), (int & int)}","(!any | (any | any))"); }
		@Test public void test_16083() { testInvalid("{(int | int), (int & int)}","({any, any} | (any | any))"); }
		@Test public void test_16084() { testInvalid("{(int | int), (int & int)}","({any, int} | (any | any))"); }
		@Test public void test_16085() { testInvalid("{(int | int), (int & int)}","({int, int} | (any | any))"); }
		@Test public void test_16086() { testInvalid("{(int | int), (int & int)}","((int | any) | (any | any))"); }
		@Test public void test_16087() { testInvalid("{(int | int), (int & int)}","((any | int) | (any | any))"); }
		@Test public void test_16088() { testInvalid("{(int | int), (int & int)}","((any & int) | (any | any))"); }
		@Test public void test_16089() { testInvalid("{(int | int), (int & int)}","((int & int) | (any | any))"); }
		@Test public void test_16090() { testInvalid("{(int | int), (int & int)}","({any} | (int | any))"); }
		@Test public void test_16091() { testInvalid("{(int | int), (int & int)}","(!int | (int | any))"); }
		@Test public void test_16092() { testInvalid("{(int | int), (int & int)}","({int, any} | (int | any))"); }
		@Test public void test_16093() { testInvalid("{(int | int), (int & int)}","({any, int} | (int | any))"); }
		@Test public void test_16094() { testInvalid("{(int | int), (int & int)}","((int & any) | (int | any))"); }
		@Test public void test_16095() { testInvalid("{(int | int), (int & int)}","((any & int) | (int | any))"); }
		@Test public void test_16096() { testInvalid("{(int | int), (int & int)}","({any} | (any | int))"); }
		@Test public void test_16097() { testInvalid("{(int | int), (int & int)}","({int} | (any | int))"); }
		@Test public void test_16098() { testInvalid("{(int | int), (int & int)}","(!any | (any | int))"); }
		@Test public void test_16099() { testInvalid("{(int | int), (int & int)}","(!int | (any | int))"); }
		@Test public void test_16100() { testInvalid("{(int | int), (int & int)}","({any, int} | (any | int))"); }
		@Test public void test_16101() { testInvalid("{(int | int), (int & int)}","({int, int} | (any | int))"); }
		@Test public void test_16102() { testInvalid("{(int | int), (int & int)}","((int | any) | (any | int))"); }
		@Test public void test_16103() { testInvalid("{(int | int), (int & int)}","((any | int) | (any | int))"); }
		@Test public void test_16104() { testInvalid("{(int | int), (int & int)}","((int | int) | (any | int))"); }
		@Test public void test_16105() { testInvalid("{(int | int), (int & int)}","((any & any) | (any | int))"); }
		@Test public void test_16106() { testInvalid("{(int | int), (int & int)}","({int} | (int | int))"); }
		@Test public void test_16107() { testInvalid("{(int | int), (int & int)}","(!any | (int | int))"); }
		@Test public void test_16108() { testInvalid("{(int | int), (int & int)}","(!int | (int | int))"); }
		@Test public void test_16109() { testInvalid("{(int | int), (int & int)}","({int, any} | (int | int))"); }
		@Test public void test_16110() { testInvalid("{(int | int), (int & int)}","({any, int} | (int | int))"); }
		@Test public void test_16111() { testInvalid("{(int | int), (int & int)}","((any | int) | (int | int))"); }
		@Test public void test_16112() { testInvalid("{(int | int), (int & int)}","((int | int) | (int | int))"); }
		@Test public void test_16113() { testInvalid("{(int | int), (int & int)}","((any & any) | (int | int))"); }
		@Test public void test_16114() { testInvalid("{(int | int), (int & int)}","((int & any) | (int | int))"); }
		@Test public void test_16115() { testInvalid("{(int | int), (int & int)}","((int & int) | (int | int))"); }
		@Test public void test_16116() { testInvalid("{(int | int), (int & int)}","(!any | (any & any))"); }
		@Test public void test_16117() { testInvalid("{(int | int), (int & int)}","(!int | (any & any))"); }
		@Test public void test_16118() { testInvalid("{(int | int), (int & int)}","({any, any} | (any & any))"); }
		@Test public void test_16119() { testInvalid("{(int | int), (int & int)}","({int, any} | (any & any))"); }
		@Test public void test_16120() { testInvalid("{(int | int), (int & int)}","({any, int} | (any & any))"); }
		@Test public void test_16121() { testInvalid("{(int | int), (int & int)}","({int, int} | (any & any))"); }
		@Test public void test_16122() { testInvalid("{(int | int), (int & int)}","((int | any) | (any & any))"); }
		@Test public void test_16123() { testInvalid("{(int | int), (int & int)}","((int | int) | (any & any))"); }
		@Test public void test_16124() { testInvalid("{(int | int), (int & int)}","((int & any) | (any & any))"); }
		@Test public void test_16125() { testInvalid("{(int | int), (int & int)}","((any & int) | (any & any))"); }
		@Test public void test_16126() { testInvalid("{(int | int), (int & int)}","((int & int) | (any & any))"); }
		@Test public void test_16127() { testInvalid("{(int | int), (int & int)}","({any} | (int & any))"); }
		@Test public void test_16128() { testInvalid("{(any & any), (int & int)}","{int}"); }
		@Test public void test_16129() { testInvalid("{(any & any), (int & int)}","{any, any}"); }
		@Test public void test_16130() { testValid("{(any & any), (int & int)}","{int, int}"); }
		@Test public void test_16131() { testInvalid("{(any & any), (int & int)}","(any | int)"); }
		@Test public void test_16132() { testInvalid("{(any & any), (int & int)}","(int & any)"); }
		@Test public void test_16133() { testInvalid("{(any & any), (int & int)}","{{any}}"); }
		@Test public void test_16134() { testInvalid("{(any & any), (int & int)}","{{int, any}}"); }
		@Test public void test_16135() { testInvalid("{(any & any), (int & int)}","{{int, int}}"); }
		@Test public void test_16136() { testInvalid("{(any & any), (int & int)}","{(any | int)}"); }
		@Test public void test_16137() { testInvalid("{(any & any), (int & int)}","!{int, any}"); }
		@Test public void test_16138() { testInvalid("{(any & any), (int & int)}","!{int, int}"); }
		@Test public void test_16139() { testValid("{(any & any), (int & int)}","!(any | any)"); }
		@Test public void test_16140() { testValid("{(any & any), (int & int)}","!(any & any)"); }
		@Test public void test_16141() { testInvalid("{(any & any), (int & int)}","!(int & int)"); }
		@Test public void test_16142() { testInvalid("{(any & any), (int & int)}","{{int}, {any}}"); }
		@Test public void test_16143() { testInvalid("{(any & any), (int & int)}","{!int, {any}}"); }
		@Test public void test_16144() { testInvalid("{(any & any), (int & int)}","{{int, int}, {any}}"); }
		@Test public void test_16145() { testInvalid("{(any & any), (int & int)}","{(any | int), {any}}"); }
		@Test public void test_16146() { testInvalid("{(any & any), (int & int)}","{!int, {int}}"); }
		@Test public void test_16147() { testInvalid("{(any & any), (int & int)}","{{any, any}, {int}}"); }
		@Test public void test_16148() { testInvalid("{(any & any), (int & int)}","{(any | any), {int}}"); }
		@Test public void test_16149() { testInvalid("{(any & any), (int & int)}","{(any & any), {int}}"); }
		@Test public void test_16150() { testInvalid("{(any & any), (int & int)}","{(any & int), {int}}"); }
		@Test public void test_16151() { testInvalid("{(any & any), (int & int)}","{{any, any}, !int}"); }
		@Test public void test_16152() { testInvalid("{(any & any), (int & int)}","{{any, int}, !int}"); }
		@Test public void test_16153() { testInvalid("{(any & any), (int & int)}","{(any | any), !int}"); }
		@Test public void test_16154() { testInvalid("{(any & any), (int & int)}","{(int | any), !int}"); }
		@Test public void test_16155() { testInvalid("{(any & any), (int & int)}","{(any & any), !int}"); }
		@Test public void test_16156() { testInvalid("{(any & any), (int & int)}","{(int & any), !int}"); }
		@Test public void test_16157() { testInvalid("{(any & any), (int & int)}","{(int & int), !int}"); }
		@Test public void test_16158() { testInvalid("{(any & any), (int & int)}","{{any}, {any, any}}"); }
		@Test public void test_16159() { testInvalid("{(any & any), (int & int)}","{{int}, {any, any}}"); }
		@Test public void test_16160() { testInvalid("{(any & any), (int & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_16161() { testInvalid("{(any & any), (int & int)}","{(any | any), {any, any}}"); }
		@Test public void test_16162() { testInvalid("{(any & any), (int & int)}","{(any | int), {any, any}}"); }
		@Test public void test_16163() { testInvalid("{(any & any), (int & int)}","{!int, {int, any}}"); }
		@Test public void test_16164() { testInvalid("{(any & any), (int & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_16165() { testInvalid("{(any & any), (int & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_16166() { testInvalid("{(any & any), (int & int)}","{(any & int), {int, any}}"); }
		@Test public void test_16167() { testInvalid("{(any & any), (int & int)}","{{any}, {any, int}}"); }
		@Test public void test_16168() { testInvalid("{(any & any), (int & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_16169() { testInvalid("{(any & any), (int & int)}","{(int | int), {any, int}}"); }
		@Test public void test_16170() { testInvalid("{(any & any), (int & int)}","{(any & int), {any, int}}"); }
		@Test public void test_16171() { testInvalid("{(any & any), (int & int)}","{!int, {int, int}}"); }
		@Test public void test_16172() { testInvalid("{(any & any), (int & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_16173() { testInvalid("{(any & any), (int & int)}","{(any | any), {int, int}}"); }
		@Test public void test_16174() { testInvalid("{(any & any), (int & int)}","{(int | any), {int, int}}"); }
		@Test public void test_16175() { testInvalid("{(any & any), (int & int)}","{(int & any), {int, int}}"); }
		@Test public void test_16176() { testInvalid("{(any & any), (int & int)}","{{int}, (any | any)}"); }
		@Test public void test_16177() { testInvalid("{(any & any), (int & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_16178() { testInvalid("{(any & any), (int & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_16179() { testInvalid("{(any & any), (int & int)}","{(any | any), (any | any)}"); }
		@Test public void test_16180() { testInvalid("{(any & any), (int & int)}","{(int | any), (any | any)}"); }
		@Test public void test_16181() { testInvalid("{(any & any), (int & int)}","{(int & int), (any | any)}"); }
		@Test public void test_16182() { testInvalid("{(any & any), (int & int)}","{!int, (int | any)}"); }
		@Test public void test_16183() { testInvalid("{(any & any), (int & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_16184() { testInvalid("{(any & any), (int & int)}","{(any | any), (int | any)}"); }
		@Test public void test_16185() { testInvalid("{(any & any), (int & int)}","{(int | int), (int | any)}"); }
		@Test public void test_16186() { testInvalid("{(any & any), (int & int)}","{{any}, (any | int)}"); }
		@Test public void test_16187() { testInvalid("{(any & any), (int & int)}","{!int, (any | int)}"); }
		@Test public void test_16188() { testInvalid("{(any & any), (int & int)}","{(any | any), (any | int)}"); }
		@Test public void test_16189() { testInvalid("{(any & any), (int & int)}","{(any | int), (any | int)}"); }
		@Test public void test_16190() { testInvalid("{(any & any), (int & int)}","{(any & int), (any | int)}"); }
		@Test public void test_16191() { testValid("{(any & any), (int & int)}","{{int}, (int | int)}"); }
		@Test public void test_16192() { testValid("{(any & any), (int & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_16193() { testValid("{(any & any), (int & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_16194() { testInvalid("{(any & any), (int & int)}","{{int}, (any & any)}"); }
		@Test public void test_16195() { testInvalid("{(any & any), (int & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_16196() { testInvalid("{(any & any), (int & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_16197() { testInvalid("{(any & any), (int & int)}","{(int | any), (any & any)}"); }
		@Test public void test_16198() { testInvalid("{(any & any), (int & int)}","{(any & any), (any & any)}"); }
		@Test public void test_16199() { testInvalid("{(any & any), (int & int)}","{(int & any), (any & any)}"); }
		@Test public void test_16200() { testValid("{(any & any), (int & int)}","{{any}, (int & any)}"); }
		@Test public void test_16201() { testValid("{(any & any), (int & int)}","{{int}, (int & any)}"); }
		@Test public void test_16202() { testValid("{(any & any), (int & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_16203() { testValid("{(any & any), (int & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_16204() { testValid("{(any & any), (int & int)}","{(any | int), (int & any)}"); }
		@Test public void test_16205() { testValid("{(any & any), (int & int)}","{(any & any), (int & any)}"); }
		@Test public void test_16206() { testValid("{(any & any), (int & int)}","{(int & any), (int & any)}"); }
		@Test public void test_16207() { testValid("{(any & any), (int & int)}","{(int & int), (int & any)}"); }
		@Test public void test_16208() { testValid("{(any & any), (int & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_16209() { testValid("{(any & any), (int & int)}","{(any & any), (any & int)}"); }
		@Test public void test_16210() { testValid("{(any & any), (int & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_16211() { testValid("{(any & any), (int & int)}","{(int | int), (int & int)}"); }
		@Test public void test_16212() { testValid("{(any & any), (int & int)}","{(any & any), (int & int)}"); }
		@Test public void test_16213() { testValid("{(any & any), (int & int)}","{(any & int), (int & int)}"); }
		@Test public void test_16214() { testValid("{(any & any), (int & int)}","{(int & int), (int & int)}"); }
		@Test public void test_16215() { testInvalid("{(any & any), (int & int)}","(!int | {any})"); }
		@Test public void test_16216() { testInvalid("{(any & any), (int & int)}","({any, any} | {any})"); }
		@Test public void test_16217() { testInvalid("{(any & any), (int & int)}","((any | any) | {any})"); }
		@Test public void test_16218() { testInvalid("{(any & any), (int & int)}","((int | any) | {any})"); }
		@Test public void test_16219() { testInvalid("{(any & any), (int & int)}","((any & any) | {any})"); }
		@Test public void test_16220() { testInvalid("{(any & any), (int & int)}","((int & any) | {any})"); }
		@Test public void test_16221() { testInvalid("{(any & any), (int & int)}","((any & int) | {any})"); }
		@Test public void test_16222() { testInvalid("{(any & any), (int & int)}","({int} | {int})"); }
		@Test public void test_16223() { testInvalid("{(any & any), (int & int)}","(!any | {int})"); }
		@Test public void test_16224() { testInvalid("{(any & any), (int & int)}","(!int | {int})"); }
		@Test public void test_16225() { testInvalid("{(any & any), (int & int)}","({any, int} | {int})"); }
		@Test public void test_16226() { testInvalid("{(any & any), (int & int)}","((int & any) | {int})"); }
		@Test public void test_16227() { testInvalid("{(any & any), (int & int)}","((any & int) | {int})"); }
		@Test public void test_16228() { testInvalid("{(any & any), (int & int)}","((int & int) | {int})"); }
		@Test public void test_16229() { testInvalid("{(any & any), (int & int)}","({any} | !any)"); }
		@Test public void test_16230() { testInvalid("{(any & any), (int & int)}","({int} | !any)"); }
		@Test public void test_16231() { testInvalid("{(any & any), (int & int)}","({any, any} | !any)"); }
		@Test public void test_16232() { testValid("{(any & any), (int & int)}","({int, int} | !any)"); }
		@Test public void test_16233() { testInvalid("{(any & any), (int & int)}","((any | any) | !any)"); }
		@Test public void test_16234() { testInvalid("{(any & any), (int & int)}","((int | any) | !any)"); }
		@Test public void test_16235() { testInvalid("{(any & any), (int & int)}","((int | int) | !any)"); }
		@Test public void test_16236() { testInvalid("{(any & any), (int & int)}","((int & int) | !any)"); }
		@Test public void test_16237() { testInvalid("{(any & any), (int & int)}","(!int | !int)"); }
		@Test public void test_16238() { testInvalid("{(any & any), (int & int)}","({any, any} | !int)"); }
		@Test public void test_16239() { testInvalid("{(any & any), (int & int)}","({int, int} | !int)"); }
		@Test public void test_16240() { testInvalid("{(any & any), (int & int)}","((int | any) | !int)"); }
		@Test public void test_16241() { testInvalid("{(any & any), (int & int)}","((any | int) | !int)"); }
		@Test public void test_16242() { testInvalid("{(any & any), (int & int)}","((any & int) | !int)"); }
		@Test public void test_16243() { testInvalid("{(any & any), (int & int)}","((int & int) | !int)"); }
		@Test public void test_16244() { testInvalid("{(any & any), (int & int)}","({int} | {any, any})"); }
		@Test public void test_16245() { testInvalid("{(any & any), (int & int)}","(!any | {any, any})"); }
		@Test public void test_16246() { testInvalid("{(any & any), (int & int)}","(!int | {any, any})"); }
		@Test public void test_16247() { testInvalid("{(any & any), (int & int)}","({any, int} | {any, any})"); }
		@Test public void test_16248() { testInvalid("{(any & any), (int & int)}","((int | any) | {any, any})"); }
		@Test public void test_16249() { testInvalid("{(any & any), (int & int)}","((any & any) | {any, any})"); }
		@Test public void test_16250() { testInvalid("{(any & any), (int & int)}","((any & int) | {any, any})"); }
		@Test public void test_16251() { testInvalid("{(any & any), (int & int)}","(!int | {int, any})"); }
		@Test public void test_16252() { testInvalid("{(any & any), (int & int)}","({any, int} | {int, any})"); }
		@Test public void test_16253() { testInvalid("{(any & any), (int & int)}","((any | any) | {int, any})"); }
		@Test public void test_16254() { testInvalid("{(any & any), (int & int)}","((int | any) | {int, any})"); }
		@Test public void test_16255() { testInvalid("{(any & any), (int & int)}","((any | int) | {int, any})"); }
		@Test public void test_16256() { testInvalid("{(any & any), (int & int)}","((int & any) | {int, any})"); }
		@Test public void test_16257() { testInvalid("{(any & any), (int & int)}","({any} | {any, int})"); }
		@Test public void test_16258() { testInvalid("{(any & any), (int & int)}","(!int | {any, int})"); }
		@Test public void test_16259() { testValid("{(any & any), (int & int)}","({any, int} | {any, int})"); }
		@Test public void test_16260() { testInvalid("{(any & any), (int & int)}","((any | any) | {any, int})"); }
		@Test public void test_16261() { testInvalid("{(any & any), (int & int)}","((any | int) | {any, int})"); }
		@Test public void test_16262() { testInvalid("{(any & any), (int & int)}","((int | int) | {any, int})"); }
		@Test public void test_16263() { testInvalid("{(any & any), (int & int)}","((int & any) | {any, int})"); }
		@Test public void test_16264() { testValid("{(any & any), (int & int)}","(!any | {int, int})"); }
		@Test public void test_16265() { testInvalid("{(any & any), (int & int)}","(!int | {int, int})"); }
		@Test public void test_16266() { testInvalid("{(any & any), (int & int)}","({any, any} | {int, int})"); }
		@Test public void test_16267() { testValid("{(any & any), (int & int)}","({any, int} | {int, int})"); }
		@Test public void test_16268() { testInvalid("{(any & any), (int & int)}","((any | any) | {int, int})"); }
		@Test public void test_16269() { testInvalid("{(any & any), (int & int)}","((int | int) | {int, int})"); }
		@Test public void test_16270() { testInvalid("{(any & any), (int & int)}","((int & any) | {int, int})"); }
		@Test public void test_16271() { testInvalid("{(any & any), (int & int)}","((any & int) | {int, int})"); }
		@Test public void test_16272() { testInvalid("{(any & any), (int & int)}","((int & int) | {int, int})"); }
		@Test public void test_16273() { testInvalid("{(any & any), (int & int)}","({any} | (any | any))"); }
		@Test public void test_16274() { testInvalid("{(any & any), (int & int)}","(!any | (any | any))"); }
		@Test public void test_16275() { testInvalid("{(any & any), (int & int)}","({any, any} | (any | any))"); }
		@Test public void test_16276() { testInvalid("{(any & any), (int & int)}","({any, int} | (any | any))"); }
		@Test public void test_16277() { testInvalid("{(any & any), (int & int)}","({int, int} | (any | any))"); }
		@Test public void test_16278() { testInvalid("{(any & any), (int & int)}","((int | any) | (any | any))"); }
		@Test public void test_16279() { testInvalid("{(any & any), (int & int)}","((any | int) | (any | any))"); }
		@Test public void test_16280() { testInvalid("{(any & any), (int & int)}","((any & int) | (any | any))"); }
		@Test public void test_16281() { testInvalid("{(any & any), (int & int)}","((int & int) | (any | any))"); }
		@Test public void test_16282() { testInvalid("{(any & any), (int & int)}","({any} | (int | any))"); }
		@Test public void test_16283() { testInvalid("{(any & any), (int & int)}","(!int | (int | any))"); }
		@Test public void test_16284() { testInvalid("{(any & any), (int & int)}","({int, any} | (int | any))"); }
		@Test public void test_16285() { testInvalid("{(any & any), (int & int)}","({any, int} | (int | any))"); }
		@Test public void test_16286() { testInvalid("{(any & any), (int & int)}","((int & any) | (int | any))"); }
		@Test public void test_16287() { testInvalid("{(any & any), (int & int)}","((any & int) | (int | any))"); }
		@Test public void test_16288() { testInvalid("{(any & any), (int & int)}","({any} | (any | int))"); }
		@Test public void test_16289() { testInvalid("{(any & any), (int & int)}","({int} | (any | int))"); }
		@Test public void test_16290() { testInvalid("{(any & any), (int & int)}","(!any | (any | int))"); }
		@Test public void test_16291() { testInvalid("{(any & any), (int & int)}","(!int | (any | int))"); }
		@Test public void test_16292() { testInvalid("{(any & any), (int & int)}","({any, int} | (any | int))"); }
		@Test public void test_16293() { testInvalid("{(any & any), (int & int)}","({int, int} | (any | int))"); }
		@Test public void test_16294() { testInvalid("{(any & any), (int & int)}","((int | any) | (any | int))"); }
		@Test public void test_16295() { testInvalid("{(any & any), (int & int)}","((any | int) | (any | int))"); }
		@Test public void test_16296() { testInvalid("{(any & any), (int & int)}","((int | int) | (any | int))"); }
		@Test public void test_16297() { testInvalid("{(any & any), (int & int)}","((any & any) | (any | int))"); }
		@Test public void test_16298() { testInvalid("{(any & any), (int & int)}","({int} | (int | int))"); }
		@Test public void test_16299() { testInvalid("{(any & any), (int & int)}","(!any | (int | int))"); }
		@Test public void test_16300() { testInvalid("{(any & any), (int & int)}","(!int | (int | int))"); }
		@Test public void test_16301() { testInvalid("{(any & any), (int & int)}","({int, any} | (int | int))"); }
		@Test public void test_16302() { testInvalid("{(any & any), (int & int)}","({any, int} | (int | int))"); }
		@Test public void test_16303() { testInvalid("{(any & any), (int & int)}","((any | int) | (int | int))"); }
		@Test public void test_16304() { testInvalid("{(any & any), (int & int)}","((int | int) | (int | int))"); }
		@Test public void test_16305() { testInvalid("{(any & any), (int & int)}","((any & any) | (int | int))"); }
		@Test public void test_16306() { testInvalid("{(any & any), (int & int)}","((int & any) | (int | int))"); }
		@Test public void test_16307() { testInvalid("{(any & any), (int & int)}","((int & int) | (int | int))"); }
		@Test public void test_16308() { testInvalid("{(any & any), (int & int)}","(!any | (any & any))"); }
		@Test public void test_16309() { testInvalid("{(any & any), (int & int)}","(!int | (any & any))"); }
		@Test public void test_16310() { testInvalid("{(any & any), (int & int)}","({any, any} | (any & any))"); }
		@Test public void test_16311() { testInvalid("{(any & any), (int & int)}","({int, any} | (any & any))"); }
		@Test public void test_16312() { testInvalid("{(any & any), (int & int)}","({any, int} | (any & any))"); }
		@Test public void test_16313() { testInvalid("{(any & any), (int & int)}","({int, int} | (any & any))"); }
		@Test public void test_16314() { testInvalid("{(any & any), (int & int)}","((int | any) | (any & any))"); }
		@Test public void test_16315() { testInvalid("{(any & any), (int & int)}","((int | int) | (any & any))"); }
		@Test public void test_16316() { testInvalid("{(any & any), (int & int)}","((int & any) | (any & any))"); }
		@Test public void test_16317() { testInvalid("{(any & any), (int & int)}","((any & int) | (any & any))"); }
		@Test public void test_16318() { testInvalid("{(any & any), (int & int)}","((int & int) | (any & any))"); }
		@Test public void test_16319() { testInvalid("{(any & any), (int & int)}","({any} | (int & any))"); }
		@Test public void test_16320() { testInvalid("{(any & int), (int & int)}","{int}"); }
		@Test public void test_16321() { testInvalid("{(any & int), (int & int)}","{any, any}"); }
		@Test public void test_16322() { testValid("{(any & int), (int & int)}","{int, int}"); }
		@Test public void test_16323() { testInvalid("{(any & int), (int & int)}","(any | int)"); }
		@Test public void test_16324() { testInvalid("{(any & int), (int & int)}","(int & any)"); }
		@Test public void test_16325() { testInvalid("{(any & int), (int & int)}","{{any}}"); }
		@Test public void test_16326() { testInvalid("{(any & int), (int & int)}","{{int, any}}"); }
		@Test public void test_16327() { testInvalid("{(any & int), (int & int)}","{{int, int}}"); }
		@Test public void test_16328() { testInvalid("{(any & int), (int & int)}","{(any | int)}"); }
		@Test public void test_16329() { testInvalid("{(any & int), (int & int)}","!{int, any}"); }
		@Test public void test_16330() { testInvalid("{(any & int), (int & int)}","!{int, int}"); }
		@Test public void test_16331() { testValid("{(any & int), (int & int)}","!(any | any)"); }
		@Test public void test_16332() { testValid("{(any & int), (int & int)}","!(any & any)"); }
		@Test public void test_16333() { testInvalid("{(any & int), (int & int)}","!(int & int)"); }
		@Test public void test_16334() { testInvalid("{(any & int), (int & int)}","{{int}, {any}}"); }
		@Test public void test_16335() { testInvalid("{(any & int), (int & int)}","{!int, {any}}"); }
		@Test public void test_16336() { testInvalid("{(any & int), (int & int)}","{{int, int}, {any}}"); }
		@Test public void test_16337() { testInvalid("{(any & int), (int & int)}","{(any | int), {any}}"); }
		@Test public void test_16338() { testInvalid("{(any & int), (int & int)}","{!int, {int}}"); }
		@Test public void test_16339() { testInvalid("{(any & int), (int & int)}","{{any, any}, {int}}"); }
		@Test public void test_16340() { testInvalid("{(any & int), (int & int)}","{(any | any), {int}}"); }
		@Test public void test_16341() { testInvalid("{(any & int), (int & int)}","{(any & any), {int}}"); }
		@Test public void test_16342() { testInvalid("{(any & int), (int & int)}","{(any & int), {int}}"); }
		@Test public void test_16343() { testInvalid("{(any & int), (int & int)}","{{any, any}, !int}"); }
		@Test public void test_16344() { testInvalid("{(any & int), (int & int)}","{{any, int}, !int}"); }
		@Test public void test_16345() { testInvalid("{(any & int), (int & int)}","{(any | any), !int}"); }
		@Test public void test_16346() { testInvalid("{(any & int), (int & int)}","{(int | any), !int}"); }
		@Test public void test_16347() { testInvalid("{(any & int), (int & int)}","{(any & any), !int}"); }
		@Test public void test_16348() { testInvalid("{(any & int), (int & int)}","{(int & any), !int}"); }
		@Test public void test_16349() { testInvalid("{(any & int), (int & int)}","{(int & int), !int}"); }
		@Test public void test_16350() { testInvalid("{(any & int), (int & int)}","{{any}, {any, any}}"); }
		@Test public void test_16351() { testInvalid("{(any & int), (int & int)}","{{int}, {any, any}}"); }
		@Test public void test_16352() { testInvalid("{(any & int), (int & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_16353() { testInvalid("{(any & int), (int & int)}","{(any | any), {any, any}}"); }
		@Test public void test_16354() { testInvalid("{(any & int), (int & int)}","{(any | int), {any, any}}"); }
		@Test public void test_16355() { testInvalid("{(any & int), (int & int)}","{!int, {int, any}}"); }
		@Test public void test_16356() { testInvalid("{(any & int), (int & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_16357() { testInvalid("{(any & int), (int & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_16358() { testInvalid("{(any & int), (int & int)}","{(any & int), {int, any}}"); }
		@Test public void test_16359() { testInvalid("{(any & int), (int & int)}","{{any}, {any, int}}"); }
		@Test public void test_16360() { testInvalid("{(any & int), (int & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_16361() { testInvalid("{(any & int), (int & int)}","{(int | int), {any, int}}"); }
		@Test public void test_16362() { testInvalid("{(any & int), (int & int)}","{(any & int), {any, int}}"); }
		@Test public void test_16363() { testInvalid("{(any & int), (int & int)}","{!int, {int, int}}"); }
		@Test public void test_16364() { testInvalid("{(any & int), (int & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_16365() { testInvalid("{(any & int), (int & int)}","{(any | any), {int, int}}"); }
		@Test public void test_16366() { testInvalid("{(any & int), (int & int)}","{(int | any), {int, int}}"); }
		@Test public void test_16367() { testInvalid("{(any & int), (int & int)}","{(int & any), {int, int}}"); }
		@Test public void test_16368() { testInvalid("{(any & int), (int & int)}","{{int}, (any | any)}"); }
		@Test public void test_16369() { testInvalid("{(any & int), (int & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_16370() { testInvalid("{(any & int), (int & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_16371() { testInvalid("{(any & int), (int & int)}","{(any | any), (any | any)}"); }
		@Test public void test_16372() { testInvalid("{(any & int), (int & int)}","{(int | any), (any | any)}"); }
		@Test public void test_16373() { testInvalid("{(any & int), (int & int)}","{(int & int), (any | any)}"); }
		@Test public void test_16374() { testInvalid("{(any & int), (int & int)}","{!int, (int | any)}"); }
		@Test public void test_16375() { testInvalid("{(any & int), (int & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_16376() { testInvalid("{(any & int), (int & int)}","{(any | any), (int | any)}"); }
		@Test public void test_16377() { testInvalid("{(any & int), (int & int)}","{(int | int), (int | any)}"); }
		@Test public void test_16378() { testInvalid("{(any & int), (int & int)}","{{any}, (any | int)}"); }
		@Test public void test_16379() { testInvalid("{(any & int), (int & int)}","{!int, (any | int)}"); }
		@Test public void test_16380() { testInvalid("{(any & int), (int & int)}","{(any | any), (any | int)}"); }
		@Test public void test_16381() { testInvalid("{(any & int), (int & int)}","{(any | int), (any | int)}"); }
		@Test public void test_16382() { testInvalid("{(any & int), (int & int)}","{(any & int), (any | int)}"); }
		@Test public void test_16383() { testInvalid("{(any & int), (int & int)}","{{int}, (int | int)}"); }
		@Test public void test_16384() { testInvalid("{(any & int), (int & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_16385() { testInvalid("{(any & int), (int & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_16386() { testInvalid("{(any & int), (int & int)}","{{int}, (any & any)}"); }
		@Test public void test_16387() { testInvalid("{(any & int), (int & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_16388() { testInvalid("{(any & int), (int & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_16389() { testInvalid("{(any & int), (int & int)}","{(int | any), (any & any)}"); }
		@Test public void test_16390() { testInvalid("{(any & int), (int & int)}","{(any & any), (any & any)}"); }
		@Test public void test_16391() { testInvalid("{(any & int), (int & int)}","{(int & any), (any & any)}"); }
		@Test public void test_16392() { testInvalid("{(any & int), (int & int)}","{{any}, (int & any)}"); }
		@Test public void test_16393() { testInvalid("{(any & int), (int & int)}","{{int}, (int & any)}"); }
		@Test public void test_16394() { testInvalid("{(any & int), (int & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_16395() { testInvalid("{(any & int), (int & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_16396() { testInvalid("{(any & int), (int & int)}","{(any | int), (int & any)}"); }
		@Test public void test_16397() { testInvalid("{(any & int), (int & int)}","{(any & any), (int & any)}"); }
		@Test public void test_16398() { testValid("{(any & int), (int & int)}","{(int & any), (int & any)}"); }
		@Test public void test_16399() { testValid("{(any & int), (int & int)}","{(int & int), (int & any)}"); }
		@Test public void test_16400() { testInvalid("{(any & int), (int & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_16401() { testInvalid("{(any & int), (int & int)}","{(any & any), (any & int)}"); }
		@Test public void test_16402() { testInvalid("{(any & int), (int & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_16403() { testValid("{(any & int), (int & int)}","{(int | int), (int & int)}"); }
		@Test public void test_16404() { testInvalid("{(any & int), (int & int)}","{(any & any), (int & int)}"); }
		@Test public void test_16405() { testValid("{(any & int), (int & int)}","{(any & int), (int & int)}"); }
		@Test public void test_16406() { testValid("{(any & int), (int & int)}","{(int & int), (int & int)}"); }
		@Test public void test_16407() { testInvalid("{(any & int), (int & int)}","(!int | {any})"); }
		@Test public void test_16408() { testInvalid("{(any & int), (int & int)}","({any, any} | {any})"); }
		@Test public void test_16409() { testInvalid("{(any & int), (int & int)}","((any | any) | {any})"); }
		@Test public void test_16410() { testInvalid("{(any & int), (int & int)}","((int | any) | {any})"); }
		@Test public void test_16411() { testInvalid("{(any & int), (int & int)}","((any & any) | {any})"); }
		@Test public void test_16412() { testInvalid("{(any & int), (int & int)}","((int & any) | {any})"); }
		@Test public void test_16413() { testInvalid("{(any & int), (int & int)}","((any & int) | {any})"); }
		@Test public void test_16414() { testInvalid("{(any & int), (int & int)}","({int} | {int})"); }
		@Test public void test_16415() { testInvalid("{(any & int), (int & int)}","(!any | {int})"); }
		@Test public void test_16416() { testInvalid("{(any & int), (int & int)}","(!int | {int})"); }
		@Test public void test_16417() { testInvalid("{(any & int), (int & int)}","({any, int} | {int})"); }
		@Test public void test_16418() { testInvalid("{(any & int), (int & int)}","((int & any) | {int})"); }
		@Test public void test_16419() { testInvalid("{(any & int), (int & int)}","((any & int) | {int})"); }
		@Test public void test_16420() { testInvalid("{(any & int), (int & int)}","((int & int) | {int})"); }
		@Test public void test_16421() { testInvalid("{(any & int), (int & int)}","({any} | !any)"); }
		@Test public void test_16422() { testInvalid("{(any & int), (int & int)}","({int} | !any)"); }
		@Test public void test_16423() { testInvalid("{(any & int), (int & int)}","({any, any} | !any)"); }
		@Test public void test_16424() { testValid("{(any & int), (int & int)}","({int, int} | !any)"); }
		@Test public void test_16425() { testInvalid("{(any & int), (int & int)}","((any | any) | !any)"); }
		@Test public void test_16426() { testInvalid("{(any & int), (int & int)}","((int | any) | !any)"); }
		@Test public void test_16427() { testInvalid("{(any & int), (int & int)}","((int | int) | !any)"); }
		@Test public void test_16428() { testInvalid("{(any & int), (int & int)}","((int & int) | !any)"); }
		@Test public void test_16429() { testInvalid("{(any & int), (int & int)}","(!int | !int)"); }
		@Test public void test_16430() { testInvalid("{(any & int), (int & int)}","({any, any} | !int)"); }
		@Test public void test_16431() { testInvalid("{(any & int), (int & int)}","({int, int} | !int)"); }
		@Test public void test_16432() { testInvalid("{(any & int), (int & int)}","((int | any) | !int)"); }
		@Test public void test_16433() { testInvalid("{(any & int), (int & int)}","((any | int) | !int)"); }
		@Test public void test_16434() { testInvalid("{(any & int), (int & int)}","((any & int) | !int)"); }
		@Test public void test_16435() { testInvalid("{(any & int), (int & int)}","((int & int) | !int)"); }
		@Test public void test_16436() { testInvalid("{(any & int), (int & int)}","({int} | {any, any})"); }
		@Test public void test_16437() { testInvalid("{(any & int), (int & int)}","(!any | {any, any})"); }
		@Test public void test_16438() { testInvalid("{(any & int), (int & int)}","(!int | {any, any})"); }
		@Test public void test_16439() { testInvalid("{(any & int), (int & int)}","({any, int} | {any, any})"); }
		@Test public void test_16440() { testInvalid("{(any & int), (int & int)}","((int | any) | {any, any})"); }
		@Test public void test_16441() { testInvalid("{(any & int), (int & int)}","((any & any) | {any, any})"); }
		@Test public void test_16442() { testInvalid("{(any & int), (int & int)}","((any & int) | {any, any})"); }
		@Test public void test_16443() { testInvalid("{(any & int), (int & int)}","(!int | {int, any})"); }
		@Test public void test_16444() { testInvalid("{(any & int), (int & int)}","({any, int} | {int, any})"); }
		@Test public void test_16445() { testInvalid("{(any & int), (int & int)}","((any | any) | {int, any})"); }
		@Test public void test_16446() { testInvalid("{(any & int), (int & int)}","((int | any) | {int, any})"); }
		@Test public void test_16447() { testInvalid("{(any & int), (int & int)}","((any | int) | {int, any})"); }
		@Test public void test_16448() { testInvalid("{(any & int), (int & int)}","((int & any) | {int, any})"); }
		@Test public void test_16449() { testInvalid("{(any & int), (int & int)}","({any} | {any, int})"); }
		@Test public void test_16450() { testInvalid("{(any & int), (int & int)}","(!int | {any, int})"); }
		@Test public void test_16451() { testInvalid("{(any & int), (int & int)}","({any, int} | {any, int})"); }
		@Test public void test_16452() { testInvalid("{(any & int), (int & int)}","((any | any) | {any, int})"); }
		@Test public void test_16453() { testInvalid("{(any & int), (int & int)}","((any | int) | {any, int})"); }
		@Test public void test_16454() { testInvalid("{(any & int), (int & int)}","((int | int) | {any, int})"); }
		@Test public void test_16455() { testInvalid("{(any & int), (int & int)}","((int & any) | {any, int})"); }
		@Test public void test_16456() { testValid("{(any & int), (int & int)}","(!any | {int, int})"); }
		@Test public void test_16457() { testInvalid("{(any & int), (int & int)}","(!int | {int, int})"); }
		@Test public void test_16458() { testInvalid("{(any & int), (int & int)}","({any, any} | {int, int})"); }
		@Test public void test_16459() { testInvalid("{(any & int), (int & int)}","({any, int} | {int, int})"); }
		@Test public void test_16460() { testInvalid("{(any & int), (int & int)}","((any | any) | {int, int})"); }
		@Test public void test_16461() { testInvalid("{(any & int), (int & int)}","((int | int) | {int, int})"); }
		@Test public void test_16462() { testInvalid("{(any & int), (int & int)}","((int & any) | {int, int})"); }
		@Test public void test_16463() { testInvalid("{(any & int), (int & int)}","((any & int) | {int, int})"); }
		@Test public void test_16464() { testInvalid("{(any & int), (int & int)}","((int & int) | {int, int})"); }
		@Test public void test_16465() { testInvalid("{(any & int), (int & int)}","({any} | (any | any))"); }
		@Test public void test_16466() { testInvalid("{(any & int), (int & int)}","(!any | (any | any))"); }
		@Test public void test_16467() { testInvalid("{(any & int), (int & int)}","({any, any} | (any | any))"); }
		@Test public void test_16468() { testInvalid("{(any & int), (int & int)}","({any, int} | (any | any))"); }
		@Test public void test_16469() { testInvalid("{(any & int), (int & int)}","({int, int} | (any | any))"); }
		@Test public void test_16470() { testInvalid("{(any & int), (int & int)}","((int | any) | (any | any))"); }
		@Test public void test_16471() { testInvalid("{(any & int), (int & int)}","((any | int) | (any | any))"); }
		@Test public void test_16472() { testInvalid("{(any & int), (int & int)}","((any & int) | (any | any))"); }
		@Test public void test_16473() { testInvalid("{(any & int), (int & int)}","((int & int) | (any | any))"); }
		@Test public void test_16474() { testInvalid("{(any & int), (int & int)}","({any} | (int | any))"); }
		@Test public void test_16475() { testInvalid("{(any & int), (int & int)}","(!int | (int | any))"); }
		@Test public void test_16476() { testInvalid("{(any & int), (int & int)}","({int, any} | (int | any))"); }
		@Test public void test_16477() { testInvalid("{(any & int), (int & int)}","({any, int} | (int | any))"); }
		@Test public void test_16478() { testInvalid("{(any & int), (int & int)}","((int & any) | (int | any))"); }
		@Test public void test_16479() { testInvalid("{(any & int), (int & int)}","((any & int) | (int | any))"); }
		@Test public void test_16480() { testInvalid("{(any & int), (int & int)}","({any} | (any | int))"); }
		@Test public void test_16481() { testInvalid("{(any & int), (int & int)}","({int} | (any | int))"); }
		@Test public void test_16482() { testInvalid("{(any & int), (int & int)}","(!any | (any | int))"); }
		@Test public void test_16483() { testInvalid("{(any & int), (int & int)}","(!int | (any | int))"); }
		@Test public void test_16484() { testInvalid("{(any & int), (int & int)}","({any, int} | (any | int))"); }
		@Test public void test_16485() { testInvalid("{(any & int), (int & int)}","({int, int} | (any | int))"); }
		@Test public void test_16486() { testInvalid("{(any & int), (int & int)}","((int | any) | (any | int))"); }
		@Test public void test_16487() { testInvalid("{(any & int), (int & int)}","((any | int) | (any | int))"); }
		@Test public void test_16488() { testInvalid("{(any & int), (int & int)}","((int | int) | (any | int))"); }
		@Test public void test_16489() { testInvalid("{(any & int), (int & int)}","((any & any) | (any | int))"); }
		@Test public void test_16490() { testInvalid("{(any & int), (int & int)}","({int} | (int | int))"); }
		@Test public void test_16491() { testInvalid("{(any & int), (int & int)}","(!any | (int | int))"); }
		@Test public void test_16492() { testInvalid("{(any & int), (int & int)}","(!int | (int | int))"); }
		@Test public void test_16493() { testInvalid("{(any & int), (int & int)}","({int, any} | (int | int))"); }
		@Test public void test_16494() { testInvalid("{(any & int), (int & int)}","({any, int} | (int | int))"); }
		@Test public void test_16495() { testInvalid("{(any & int), (int & int)}","((any | int) | (int | int))"); }
		@Test public void test_16496() { testInvalid("{(any & int), (int & int)}","((int | int) | (int | int))"); }
		@Test public void test_16497() { testInvalid("{(any & int), (int & int)}","((any & any) | (int | int))"); }
		@Test public void test_16498() { testInvalid("{(any & int), (int & int)}","((int & any) | (int | int))"); }
		@Test public void test_16499() { testInvalid("{(any & int), (int & int)}","((int & int) | (int | int))"); }
		@Test public void test_16500() { testInvalid("{(any & int), (int & int)}","(!any | (any & any))"); }
		@Test public void test_16501() { testInvalid("{(any & int), (int & int)}","(!int | (any & any))"); }
		@Test public void test_16502() { testInvalid("{(any & int), (int & int)}","({any, any} | (any & any))"); }
		@Test public void test_16503() { testInvalid("{(any & int), (int & int)}","({int, any} | (any & any))"); }
		@Test public void test_16504() { testInvalid("{(any & int), (int & int)}","({any, int} | (any & any))"); }
		@Test public void test_16505() { testInvalid("{(any & int), (int & int)}","({int, int} | (any & any))"); }
		@Test public void test_16506() { testInvalid("{(any & int), (int & int)}","((int | any) | (any & any))"); }
		@Test public void test_16507() { testInvalid("{(any & int), (int & int)}","((int | int) | (any & any))"); }
		@Test public void test_16508() { testInvalid("{(any & int), (int & int)}","((int & any) | (any & any))"); }
		@Test public void test_16509() { testInvalid("{(any & int), (int & int)}","((any & int) | (any & any))"); }
		@Test public void test_16510() { testInvalid("{(any & int), (int & int)}","((int & int) | (any & any))"); }
		@Test public void test_16511() { testInvalid("{(any & int), (int & int)}","({any} | (int & any))"); }
		@Test public void test_16512() { testInvalid("{(int & int), (int & int)}","{int}"); }
		@Test public void test_16513() { testInvalid("{(int & int), (int & int)}","{any, any}"); }
		@Test public void test_16514() { testValid("{(int & int), (int & int)}","{int, int}"); }
		@Test public void test_16515() { testInvalid("{(int & int), (int & int)}","(any | int)"); }
		@Test public void test_16516() { testInvalid("{(int & int), (int & int)}","(int & any)"); }
		@Test public void test_16517() { testInvalid("{(int & int), (int & int)}","{{any}}"); }
		@Test public void test_16518() { testInvalid("{(int & int), (int & int)}","{{int, any}}"); }
		@Test public void test_16519() { testInvalid("{(int & int), (int & int)}","{{int, int}}"); }
		@Test public void test_16520() { testInvalid("{(int & int), (int & int)}","{(any | int)}"); }
		@Test public void test_16521() { testInvalid("{(int & int), (int & int)}","!{int, any}"); }
		@Test public void test_16522() { testInvalid("{(int & int), (int & int)}","!{int, int}"); }
		@Test public void test_16523() { testValid("{(int & int), (int & int)}","!(any | any)"); }
		@Test public void test_16524() { testValid("{(int & int), (int & int)}","!(any & any)"); }
		@Test public void test_16525() { testInvalid("{(int & int), (int & int)}","!(int & int)"); }
		@Test public void test_16526() { testInvalid("{(int & int), (int & int)}","{{int}, {any}}"); }
		@Test public void test_16527() { testInvalid("{(int & int), (int & int)}","{!int, {any}}"); }
		@Test public void test_16528() { testInvalid("{(int & int), (int & int)}","{{int, int}, {any}}"); }
		@Test public void test_16529() { testInvalid("{(int & int), (int & int)}","{(any | int), {any}}"); }
		@Test public void test_16530() { testInvalid("{(int & int), (int & int)}","{!int, {int}}"); }
		@Test public void test_16531() { testInvalid("{(int & int), (int & int)}","{{any, any}, {int}}"); }
		@Test public void test_16532() { testInvalid("{(int & int), (int & int)}","{(any | any), {int}}"); }
		@Test public void test_16533() { testInvalid("{(int & int), (int & int)}","{(any & any), {int}}"); }
		@Test public void test_16534() { testInvalid("{(int & int), (int & int)}","{(any & int), {int}}"); }
		@Test public void test_16535() { testInvalid("{(int & int), (int & int)}","{{any, any}, !int}"); }
		@Test public void test_16536() { testInvalid("{(int & int), (int & int)}","{{any, int}, !int}"); }
		@Test public void test_16537() { testInvalid("{(int & int), (int & int)}","{(any | any), !int}"); }
		@Test public void test_16538() { testInvalid("{(int & int), (int & int)}","{(int | any), !int}"); }
		@Test public void test_16539() { testInvalid("{(int & int), (int & int)}","{(any & any), !int}"); }
		@Test public void test_16540() { testInvalid("{(int & int), (int & int)}","{(int & any), !int}"); }
		@Test public void test_16541() { testInvalid("{(int & int), (int & int)}","{(int & int), !int}"); }
		@Test public void test_16542() { testInvalid("{(int & int), (int & int)}","{{any}, {any, any}}"); }
		@Test public void test_16543() { testInvalid("{(int & int), (int & int)}","{{int}, {any, any}}"); }
		@Test public void test_16544() { testInvalid("{(int & int), (int & int)}","{{int, int}, {any, any}}"); }
		@Test public void test_16545() { testInvalid("{(int & int), (int & int)}","{(any | any), {any, any}}"); }
		@Test public void test_16546() { testInvalid("{(int & int), (int & int)}","{(any | int), {any, any}}"); }
		@Test public void test_16547() { testInvalid("{(int & int), (int & int)}","{!int, {int, any}}"); }
		@Test public void test_16548() { testInvalid("{(int & int), (int & int)}","{{int, any}, {int, any}}"); }
		@Test public void test_16549() { testInvalid("{(int & int), (int & int)}","{{any, int}, {int, any}}"); }
		@Test public void test_16550() { testInvalid("{(int & int), (int & int)}","{(any & int), {int, any}}"); }
		@Test public void test_16551() { testInvalid("{(int & int), (int & int)}","{{any}, {any, int}}"); }
		@Test public void test_16552() { testInvalid("{(int & int), (int & int)}","{{int, int}, {any, int}}"); }
		@Test public void test_16553() { testInvalid("{(int & int), (int & int)}","{(int | int), {any, int}}"); }
		@Test public void test_16554() { testInvalid("{(int & int), (int & int)}","{(any & int), {any, int}}"); }
		@Test public void test_16555() { testInvalid("{(int & int), (int & int)}","{!int, {int, int}}"); }
		@Test public void test_16556() { testInvalid("{(int & int), (int & int)}","{{int, int}, {int, int}}"); }
		@Test public void test_16557() { testInvalid("{(int & int), (int & int)}","{(any | any), {int, int}}"); }
		@Test public void test_16558() { testInvalid("{(int & int), (int & int)}","{(int | any), {int, int}}"); }
		@Test public void test_16559() { testInvalid("{(int & int), (int & int)}","{(int & any), {int, int}}"); }
		@Test public void test_16560() { testInvalid("{(int & int), (int & int)}","{{int}, (any | any)}"); }
		@Test public void test_16561() { testInvalid("{(int & int), (int & int)}","{{int, any}, (any | any)}"); }
		@Test public void test_16562() { testInvalid("{(int & int), (int & int)}","{{any, int}, (any | any)}"); }
		@Test public void test_16563() { testInvalid("{(int & int), (int & int)}","{(any | any), (any | any)}"); }
		@Test public void test_16564() { testInvalid("{(int & int), (int & int)}","{(int | any), (any | any)}"); }
		@Test public void test_16565() { testInvalid("{(int & int), (int & int)}","{(int & int), (any | any)}"); }
		@Test public void test_16566() { testInvalid("{(int & int), (int & int)}","{!int, (int | any)}"); }
		@Test public void test_16567() { testInvalid("{(int & int), (int & int)}","{{int, int}, (int | any)}"); }
		@Test public void test_16568() { testInvalid("{(int & int), (int & int)}","{(any | any), (int | any)}"); }
		@Test public void test_16569() { testInvalid("{(int & int), (int & int)}","{(int | int), (int | any)}"); }
		@Test public void test_16570() { testInvalid("{(int & int), (int & int)}","{{any}, (any | int)}"); }
		@Test public void test_16571() { testInvalid("{(int & int), (int & int)}","{!int, (any | int)}"); }
		@Test public void test_16572() { testInvalid("{(int & int), (int & int)}","{(any | any), (any | int)}"); }
		@Test public void test_16573() { testInvalid("{(int & int), (int & int)}","{(any | int), (any | int)}"); }
		@Test public void test_16574() { testInvalid("{(int & int), (int & int)}","{(any & int), (any | int)}"); }
		@Test public void test_16575() { testInvalid("{(int & int), (int & int)}","{{int}, (int | int)}"); }
		@Test public void test_16576() { testInvalid("{(int & int), (int & int)}","{{any, any}, (int | int)}"); }
		@Test public void test_16577() { testInvalid("{(int & int), (int & int)}","{{int, int}, (int | int)}"); }
		@Test public void test_16578() { testInvalid("{(int & int), (int & int)}","{{int}, (any & any)}"); }
		@Test public void test_16579() { testInvalid("{(int & int), (int & int)}","{{int, any}, (any & any)}"); }
		@Test public void test_16580() { testInvalid("{(int & int), (int & int)}","{{any, int}, (any & any)}"); }
		@Test public void test_16581() { testInvalid("{(int & int), (int & int)}","{(int | any), (any & any)}"); }
		@Test public void test_16582() { testInvalid("{(int & int), (int & int)}","{(any & any), (any & any)}"); }
		@Test public void test_16583() { testInvalid("{(int & int), (int & int)}","{(int & any), (any & any)}"); }
		@Test public void test_16584() { testInvalid("{(int & int), (int & int)}","{{any}, (int & any)}"); }
		@Test public void test_16585() { testInvalid("{(int & int), (int & int)}","{{int}, (int & any)}"); }
		@Test public void test_16586() { testInvalid("{(int & int), (int & int)}","{{any, any}, (int & any)}"); }
		@Test public void test_16587() { testInvalid("{(int & int), (int & int)}","{{int, any}, (int & any)}"); }
		@Test public void test_16588() { testInvalid("{(int & int), (int & int)}","{(any | int), (int & any)}"); }
		@Test public void test_16589() { testInvalid("{(int & int), (int & int)}","{(any & any), (int & any)}"); }
		@Test public void test_16590() { testValid("{(int & int), (int & int)}","{(int & any), (int & any)}"); }
		@Test public void test_16591() { testValid("{(int & int), (int & int)}","{(int & int), (int & any)}"); }
		@Test public void test_16592() { testInvalid("{(int & int), (int & int)}","{{int, any}, (any & int)}"); }
		@Test public void test_16593() { testInvalid("{(int & int), (int & int)}","{(any & any), (any & int)}"); }
		@Test public void test_16594() { testInvalid("{(int & int), (int & int)}","{{any, int}, (int & int)}"); }
		@Test public void test_16595() { testValid("{(int & int), (int & int)}","{(int | int), (int & int)}"); }
		@Test public void test_16596() { testInvalid("{(int & int), (int & int)}","{(any & any), (int & int)}"); }
		@Test public void test_16597() { testValid("{(int & int), (int & int)}","{(any & int), (int & int)}"); }
		@Test public void test_16598() { testValid("{(int & int), (int & int)}","{(int & int), (int & int)}"); }
		@Test public void test_16599() { testInvalid("{(int & int), (int & int)}","(!int | {any})"); }
		@Test public void test_16600() { testInvalid("{(int & int), (int & int)}","({any, any} | {any})"); }
		@Test public void test_16601() { testInvalid("{(int & int), (int & int)}","((any | any) | {any})"); }
		@Test public void test_16602() { testInvalid("{(int & int), (int & int)}","((int | any) | {any})"); }
		@Test public void test_16603() { testInvalid("{(int & int), (int & int)}","((any & any) | {any})"); }
		@Test public void test_16604() { testInvalid("{(int & int), (int & int)}","((int & any) | {any})"); }
		@Test public void test_16605() { testInvalid("{(int & int), (int & int)}","((any & int) | {any})"); }
		@Test public void test_16606() { testInvalid("{(int & int), (int & int)}","({int} | {int})"); }
		@Test public void test_16607() { testInvalid("{(int & int), (int & int)}","(!any | {int})"); }
		@Test public void test_16608() { testInvalid("{(int & int), (int & int)}","(!int | {int})"); }
		@Test public void test_16609() { testInvalid("{(int & int), (int & int)}","({any, int} | {int})"); }
		@Test public void test_16610() { testInvalid("{(int & int), (int & int)}","((int & any) | {int})"); }
		@Test public void test_16611() { testInvalid("{(int & int), (int & int)}","((any & int) | {int})"); }
		@Test public void test_16612() { testInvalid("{(int & int), (int & int)}","((int & int) | {int})"); }
		@Test public void test_16613() { testInvalid("{(int & int), (int & int)}","({any} | !any)"); }
		@Test public void test_16614() { testInvalid("{(int & int), (int & int)}","({int} | !any)"); }
		@Test public void test_16615() { testInvalid("{(int & int), (int & int)}","({any, any} | !any)"); }
		@Test public void test_16616() { testValid("{(int & int), (int & int)}","({int, int} | !any)"); }
		@Test public void test_16617() { testInvalid("{(int & int), (int & int)}","((any | any) | !any)"); }
		@Test public void test_16618() { testInvalid("{(int & int), (int & int)}","((int | any) | !any)"); }
		@Test public void test_16619() { testInvalid("{(int & int), (int & int)}","((int | int) | !any)"); }
		@Test public void test_16620() { testInvalid("{(int & int), (int & int)}","((int & int) | !any)"); }
		@Test public void test_16621() { testInvalid("{(int & int), (int & int)}","(!int | !int)"); }
		@Test public void test_16622() { testInvalid("{(int & int), (int & int)}","({any, any} | !int)"); }
		@Test public void test_16623() { testInvalid("{(int & int), (int & int)}","({int, int} | !int)"); }
		@Test public void test_16624() { testInvalid("{(int & int), (int & int)}","((int | any) | !int)"); }
		@Test public void test_16625() { testInvalid("{(int & int), (int & int)}","((any | int) | !int)"); }
		@Test public void test_16626() { testInvalid("{(int & int), (int & int)}","((any & int) | !int)"); }
		@Test public void test_16627() { testInvalid("{(int & int), (int & int)}","((int & int) | !int)"); }
		@Test public void test_16628() { testInvalid("{(int & int), (int & int)}","({int} | {any, any})"); }
		@Test public void test_16629() { testInvalid("{(int & int), (int & int)}","(!any | {any, any})"); }
		@Test public void test_16630() { testInvalid("{(int & int), (int & int)}","(!int | {any, any})"); }
		@Test public void test_16631() { testInvalid("{(int & int), (int & int)}","({any, int} | {any, any})"); }
		@Test public void test_16632() { testInvalid("{(int & int), (int & int)}","((int | any) | {any, any})"); }
		@Test public void test_16633() { testInvalid("{(int & int), (int & int)}","((any & any) | {any, any})"); }
		@Test public void test_16634() { testInvalid("{(int & int), (int & int)}","((any & int) | {any, any})"); }
		@Test public void test_16635() { testInvalid("{(int & int), (int & int)}","(!int | {int, any})"); }
		@Test public void test_16636() { testInvalid("{(int & int), (int & int)}","({any, int} | {int, any})"); }
		@Test public void test_16637() { testInvalid("{(int & int), (int & int)}","((any | any) | {int, any})"); }
		@Test public void test_16638() { testInvalid("{(int & int), (int & int)}","((int | any) | {int, any})"); }
		@Test public void test_16639() { testInvalid("{(int & int), (int & int)}","((any | int) | {int, any})"); }
		@Test public void test_16640() { testInvalid("{(int & int), (int & int)}","((int & any) | {int, any})"); }
		@Test public void test_16641() { testInvalid("{(int & int), (int & int)}","({any} | {any, int})"); }
		@Test public void test_16642() { testInvalid("{(int & int), (int & int)}","(!int | {any, int})"); }
		@Test public void test_16643() { testInvalid("{(int & int), (int & int)}","({any, int} | {any, int})"); }
		@Test public void test_16644() { testInvalid("{(int & int), (int & int)}","((any | any) | {any, int})"); }
		@Test public void test_16645() { testInvalid("{(int & int), (int & int)}","((any | int) | {any, int})"); }
		@Test public void test_16646() { testInvalid("{(int & int), (int & int)}","((int | int) | {any, int})"); }
		@Test public void test_16647() { testInvalid("{(int & int), (int & int)}","((int & any) | {any, int})"); }
		@Test public void test_16648() { testValid("{(int & int), (int & int)}","(!any | {int, int})"); }
		@Test public void test_16649() { testInvalid("{(int & int), (int & int)}","(!int | {int, int})"); }
		@Test public void test_16650() { testInvalid("{(int & int), (int & int)}","({any, any} | {int, int})"); }
		@Test public void test_16651() { testInvalid("{(int & int), (int & int)}","({any, int} | {int, int})"); }
		@Test public void test_16652() { testInvalid("{(int & int), (int & int)}","((any | any) | {int, int})"); }
		@Test public void test_16653() { testInvalid("{(int & int), (int & int)}","((int | int) | {int, int})"); }
		@Test public void test_16654() { testInvalid("{(int & int), (int & int)}","((int & any) | {int, int})"); }
		@Test public void test_16655() { testInvalid("{(int & int), (int & int)}","((any & int) | {int, int})"); }
		@Test public void test_16656() { testInvalid("{(int & int), (int & int)}","((int & int) | {int, int})"); }
		@Test public void test_16657() { testInvalid("{(int & int), (int & int)}","({any} | (any | any))"); }
		@Test public void test_16658() { testInvalid("{(int & int), (int & int)}","(!any | (any | any))"); }
		@Test public void test_16659() { testInvalid("{(int & int), (int & int)}","({any, any} | (any | any))"); }
		@Test public void test_16660() { testInvalid("{(int & int), (int & int)}","({any, int} | (any | any))"); }
		@Test public void test_16661() { testInvalid("{(int & int), (int & int)}","({int, int} | (any | any))"); }
		@Test public void test_16662() { testInvalid("{(int & int), (int & int)}","((int | any) | (any | any))"); }
		@Test public void test_16663() { testInvalid("{(int & int), (int & int)}","((any | int) | (any | any))"); }
		@Test public void test_16664() { testInvalid("{(int & int), (int & int)}","((any & int) | (any | any))"); }
		@Test public void test_16665() { testInvalid("{(int & int), (int & int)}","((int & int) | (any | any))"); }
		@Test public void test_16666() { testInvalid("{(int & int), (int & int)}","({any} | (int | any))"); }
		@Test public void test_16667() { testInvalid("{(int & int), (int & int)}","(!int | (int | any))"); }
		@Test public void test_16668() { testInvalid("{(int & int), (int & int)}","({int, any} | (int | any))"); }
		@Test public void test_16669() { testInvalid("{(int & int), (int & int)}","({any, int} | (int | any))"); }
		@Test public void test_16670() { testInvalid("{(int & int), (int & int)}","((int & any) | (int | any))"); }
		@Test public void test_16671() { testInvalid("{(int & int), (int & int)}","((any & int) | (int | any))"); }
		@Test public void test_16672() { testInvalid("{(int & int), (int & int)}","({any} | (any | int))"); }
		@Test public void test_16673() { testInvalid("{(int & int), (int & int)}","({int} | (any | int))"); }
		@Test public void test_16674() { testInvalid("{(int & int), (int & int)}","(!any | (any | int))"); }
		@Test public void test_16675() { testInvalid("{(int & int), (int & int)}","(!int | (any | int))"); }
		@Test public void test_16676() { testInvalid("{(int & int), (int & int)}","({any, int} | (any | int))"); }
		@Test public void test_16677() { testInvalid("{(int & int), (int & int)}","({int, int} | (any | int))"); }
		@Test public void test_16678() { testInvalid("{(int & int), (int & int)}","((int | any) | (any | int))"); }
		@Test public void test_16679() { testInvalid("{(int & int), (int & int)}","((any | int) | (any | int))"); }
		@Test public void test_16680() { testInvalid("{(int & int), (int & int)}","((int | int) | (any | int))"); }
		@Test public void test_16681() { testInvalid("{(int & int), (int & int)}","((any & any) | (any | int))"); }
		@Test public void test_16682() { testInvalid("{(int & int), (int & int)}","({int} | (int | int))"); }
		@Test public void test_16683() { testInvalid("{(int & int), (int & int)}","(!any | (int | int))"); }
		@Test public void test_16684() { testInvalid("{(int & int), (int & int)}","(!int | (int | int))"); }
		@Test public void test_16685() { testInvalid("{(int & int), (int & int)}","({int, any} | (int | int))"); }
		@Test public void test_16686() { testInvalid("{(int & int), (int & int)}","({any, int} | (int | int))"); }
		@Test public void test_16687() { testInvalid("{(int & int), (int & int)}","((any | int) | (int | int))"); }
		@Test public void test_16688() { testInvalid("{(int & int), (int & int)}","((int | int) | (int | int))"); }
		@Test public void test_16689() { testInvalid("{(int & int), (int & int)}","((any & any) | (int | int))"); }
		@Test public void test_16690() { testInvalid("{(int & int), (int & int)}","((int & any) | (int | int))"); }
		@Test public void test_16691() { testInvalid("{(int & int), (int & int)}","((int & int) | (int | int))"); }
		@Test public void test_16692() { testInvalid("{(int & int), (int & int)}","(!any | (any & any))"); }
		@Test public void test_16693() { testInvalid("{(int & int), (int & int)}","(!int | (any & any))"); }
		@Test public void test_16694() { testInvalid("{(int & int), (int & int)}","({any, any} | (any & any))"); }
		@Test public void test_16695() { testInvalid("{(int & int), (int & int)}","({int, any} | (any & any))"); }
		@Test public void test_16696() { testInvalid("{(int & int), (int & int)}","({any, int} | (any & any))"); }
		@Test public void test_16697() { testInvalid("{(int & int), (int & int)}","({int, int} | (any & any))"); }
		@Test public void test_16698() { testInvalid("{(int & int), (int & int)}","((int | any) | (any & any))"); }
		@Test public void test_16699() { testInvalid("{(int & int), (int & int)}","((int | int) | (any & any))"); }
		@Test public void test_16700() { testInvalid("{(int & int), (int & int)}","((int & any) | (any & any))"); }
		@Test public void test_16701() { testInvalid("{(int & int), (int & int)}","((any & int) | (any & any))"); }
		@Test public void test_16702() { testInvalid("{(int & int), (int & int)}","((int & int) | (any & any))"); }
		@Test public void test_16703() { testInvalid("{(int & int), (int & int)}","({any} | (int & any))"); }
		@Test public void test_16704() { testValid("(!int | {any})","{int}"); }
		@Test public void test_16705() { testValid("(!int | {any})","{any, any}"); }
		@Test public void test_16706() { testValid("(!int | {any})","{int, int}"); }
		@Test public void test_16707() { testInvalid("(!int | {any})","(any | int)"); }
		@Test public void test_16708() { testInvalid("(!int | {any})","(int & any)"); }
		@Test public void test_16709() { testValid("(!int | {any})","{{any}}"); }
		@Test public void test_16710() { testValid("(!int | {any})","{{int, any}}"); }
		@Test public void test_16711() { testValid("(!int | {any})","{{int, int}}"); }
		@Test public void test_16712() { testValid("(!int | {any})","{(any | int)}"); }
		@Test public void test_16713() { testInvalid("(!int | {any})","!{int, any}"); }
		@Test public void test_16714() { testInvalid("(!int | {any})","!{int, int}"); }
		@Test public void test_16715() { testValid("(!int | {any})","!(any | any)"); }
		@Test public void test_16716() { testValid("(!int | {any})","!(any & any)"); }
		@Test public void test_16717() { testValid("(!int | {any})","!(int & int)"); }
		@Test public void test_16718() { testValid("(!int | {any})","{{int}, {any}}"); }
		@Test public void test_16719() { testValid("(!int | {any})","{!int, {any}}"); }
		@Test public void test_16720() { testValid("(!int | {any})","{{int, int}, {any}}"); }
		@Test public void test_16721() { testValid("(!int | {any})","{(any | int), {any}}"); }
		@Test public void test_16722() { testValid("(!int | {any})","{!int, {int}}"); }
		@Test public void test_16723() { testValid("(!int | {any})","{{any, any}, {int}}"); }
		@Test public void test_16724() { testValid("(!int | {any})","{(any | any), {int}}"); }
		@Test public void test_16725() { testValid("(!int | {any})","{(any & any), {int}}"); }
		@Test public void test_16726() { testValid("(!int | {any})","{(any & int), {int}}"); }
		@Test public void test_16727() { testValid("(!int | {any})","{{any, any}, !int}"); }
		@Test public void test_16728() { testValid("(!int | {any})","{{any, int}, !int}"); }
		@Test public void test_16729() { testValid("(!int | {any})","{(any | any), !int}"); }
		@Test public void test_16730() { testValid("(!int | {any})","{(int | any), !int}"); }
		@Test public void test_16731() { testValid("(!int | {any})","{(any & any), !int}"); }
		@Test public void test_16732() { testValid("(!int | {any})","{(int & any), !int}"); }
		@Test public void test_16733() { testValid("(!int | {any})","{(int & int), !int}"); }
		@Test public void test_16734() { testValid("(!int | {any})","{{any}, {any, any}}"); }
		@Test public void test_16735() { testValid("(!int | {any})","{{int}, {any, any}}"); }
		@Test public void test_16736() { testValid("(!int | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_16737() { testValid("(!int | {any})","{(any | any), {any, any}}"); }
		@Test public void test_16738() { testValid("(!int | {any})","{(any | int), {any, any}}"); }
		@Test public void test_16739() { testValid("(!int | {any})","{!int, {int, any}}"); }
		@Test public void test_16740() { testValid("(!int | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_16741() { testValid("(!int | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_16742() { testValid("(!int | {any})","{(any & int), {int, any}}"); }
		@Test public void test_16743() { testValid("(!int | {any})","{{any}, {any, int}}"); }
		@Test public void test_16744() { testValid("(!int | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_16745() { testValid("(!int | {any})","{(int | int), {any, int}}"); }
		@Test public void test_16746() { testValid("(!int | {any})","{(any & int), {any, int}}"); }
		@Test public void test_16747() { testValid("(!int | {any})","{!int, {int, int}}"); }
		@Test public void test_16748() { testValid("(!int | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_16749() { testValid("(!int | {any})","{(any | any), {int, int}}"); }
		@Test public void test_16750() { testValid("(!int | {any})","{(int | any), {int, int}}"); }
		@Test public void test_16751() { testValid("(!int | {any})","{(int & any), {int, int}}"); }
		@Test public void test_16752() { testValid("(!int | {any})","{{int}, (any | any)}"); }
		@Test public void test_16753() { testValid("(!int | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_16754() { testValid("(!int | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_16755() { testValid("(!int | {any})","{(any | any), (any | any)}"); }
		@Test public void test_16756() { testValid("(!int | {any})","{(int | any), (any | any)}"); }
		@Test public void test_16757() { testValid("(!int | {any})","{(int & int), (any | any)}"); }
		@Test public void test_16758() { testValid("(!int | {any})","{!int, (int | any)}"); }
		@Test public void test_16759() { testValid("(!int | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_16760() { testValid("(!int | {any})","{(any | any), (int | any)}"); }
		@Test public void test_16761() { testValid("(!int | {any})","{(int | int), (int | any)}"); }
		@Test public void test_16762() { testValid("(!int | {any})","{{any}, (any | int)}"); }
		@Test public void test_16763() { testValid("(!int | {any})","{!int, (any | int)}"); }
		@Test public void test_16764() { testValid("(!int | {any})","{(any | any), (any | int)}"); }
		@Test public void test_16765() { testValid("(!int | {any})","{(any | int), (any | int)}"); }
		@Test public void test_16766() { testValid("(!int | {any})","{(any & int), (any | int)}"); }
		@Test public void test_16767() { testValid("(!int | {any})","{{int}, (int | int)}"); }
		@Test public void test_16768() { testValid("(!int | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_16769() { testValid("(!int | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_16770() { testValid("(!int | {any})","{{int}, (any & any)}"); }
		@Test public void test_16771() { testValid("(!int | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_16772() { testValid("(!int | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_16773() { testValid("(!int | {any})","{(int | any), (any & any)}"); }
		@Test public void test_16774() { testValid("(!int | {any})","{(any & any), (any & any)}"); }
		@Test public void test_16775() { testValid("(!int | {any})","{(int & any), (any & any)}"); }
		@Test public void test_16776() { testValid("(!int | {any})","{{any}, (int & any)}"); }
		@Test public void test_16777() { testValid("(!int | {any})","{{int}, (int & any)}"); }
		@Test public void test_16778() { testValid("(!int | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_16779() { testValid("(!int | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_16780() { testValid("(!int | {any})","{(any | int), (int & any)}"); }
		@Test public void test_16781() { testValid("(!int | {any})","{(any & any), (int & any)}"); }
		@Test public void test_16782() { testValid("(!int | {any})","{(int & any), (int & any)}"); }
		@Test public void test_16783() { testValid("(!int | {any})","{(int & int), (int & any)}"); }
		@Test public void test_16784() { testValid("(!int | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_16785() { testValid("(!int | {any})","{(any & any), (any & int)}"); }
		@Test public void test_16786() { testValid("(!int | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_16787() { testValid("(!int | {any})","{(int | int), (int & int)}"); }
		@Test public void test_16788() { testValid("(!int | {any})","{(any & any), (int & int)}"); }
		@Test public void test_16789() { testValid("(!int | {any})","{(any & int), (int & int)}"); }
		@Test public void test_16790() { testValid("(!int | {any})","{(int & int), (int & int)}"); }
		@Test public void test_16791() { testValid("(!int | {any})","(!int | {any})"); }
		@Test public void test_16792() { testValid("(!int | {any})","({any, any} | {any})"); }
		@Test public void test_16793() { testInvalid("(!int | {any})","((any | any) | {any})"); }
		@Test public void test_16794() { testInvalid("(!int | {any})","((int | any) | {any})"); }
		@Test public void test_16795() { testInvalid("(!int | {any})","((any & any) | {any})"); }
		@Test public void test_16796() { testInvalid("(!int | {any})","((int & any) | {any})"); }
		@Test public void test_16797() { testInvalid("(!int | {any})","((any & int) | {any})"); }
		@Test public void test_16798() { testValid("(!int | {any})","({int} | {int})"); }
		@Test public void test_16799() { testValid("(!int | {any})","(!any | {int})"); }
		@Test public void test_16800() { testValid("(!int | {any})","(!int | {int})"); }
		@Test public void test_16801() { testValid("(!int | {any})","({any, int} | {int})"); }
		@Test public void test_16802() { testInvalid("(!int | {any})","((int & any) | {int})"); }
		@Test public void test_16803() { testInvalid("(!int | {any})","((any & int) | {int})"); }
		@Test public void test_16804() { testInvalid("(!int | {any})","((int & int) | {int})"); }
		@Test public void test_16805() { testValid("(!int | {any})","({any} | !any)"); }
		@Test public void test_16806() { testValid("(!int | {any})","({int} | !any)"); }
		@Test public void test_16807() { testValid("(!int | {any})","({any, any} | !any)"); }
		@Test public void test_16808() { testValid("(!int | {any})","({int, int} | !any)"); }
		@Test public void test_16809() { testInvalid("(!int | {any})","((any | any) | !any)"); }
		@Test public void test_16810() { testInvalid("(!int | {any})","((int | any) | !any)"); }
		@Test public void test_16811() { testInvalid("(!int | {any})","((int | int) | !any)"); }
		@Test public void test_16812() { testInvalid("(!int | {any})","((int & int) | !any)"); }
		@Test public void test_16813() { testValid("(!int | {any})","(!int | !int)"); }
		@Test public void test_16814() { testValid("(!int | {any})","({any, any} | !int)"); }
		@Test public void test_16815() { testValid("(!int | {any})","({int, int} | !int)"); }
		@Test public void test_16816() { testInvalid("(!int | {any})","((int | any) | !int)"); }
		@Test public void test_16817() { testInvalid("(!int | {any})","((any | int) | !int)"); }
		@Test public void test_16818() { testInvalid("(!int | {any})","((any & int) | !int)"); }
		@Test public void test_16819() { testInvalid("(!int | {any})","((int & int) | !int)"); }
		@Test public void test_16820() { testValid("(!int | {any})","({int} | {any, any})"); }
		@Test public void test_16821() { testValid("(!int | {any})","(!any | {any, any})"); }
		@Test public void test_16822() { testValid("(!int | {any})","(!int | {any, any})"); }
		@Test public void test_16823() { testValid("(!int | {any})","({any, int} | {any, any})"); }
		@Test public void test_16824() { testInvalid("(!int | {any})","((int | any) | {any, any})"); }
		@Test public void test_16825() { testInvalid("(!int | {any})","((any & any) | {any, any})"); }
		@Test public void test_16826() { testInvalid("(!int | {any})","((any & int) | {any, any})"); }
		@Test public void test_16827() { testValid("(!int | {any})","(!int | {int, any})"); }
		@Test public void test_16828() { testValid("(!int | {any})","({any, int} | {int, any})"); }
		@Test public void test_16829() { testInvalid("(!int | {any})","((any | any) | {int, any})"); }
		@Test public void test_16830() { testInvalid("(!int | {any})","((int | any) | {int, any})"); }
		@Test public void test_16831() { testInvalid("(!int | {any})","((any | int) | {int, any})"); }
		@Test public void test_16832() { testInvalid("(!int | {any})","((int & any) | {int, any})"); }
		@Test public void test_16833() { testValid("(!int | {any})","({any} | {any, int})"); }
		@Test public void test_16834() { testValid("(!int | {any})","(!int | {any, int})"); }
		@Test public void test_16835() { testValid("(!int | {any})","({any, int} | {any, int})"); }
		@Test public void test_16836() { testInvalid("(!int | {any})","((any | any) | {any, int})"); }
		@Test public void test_16837() { testInvalid("(!int | {any})","((any | int) | {any, int})"); }
		@Test public void test_16838() { testInvalid("(!int | {any})","((int | int) | {any, int})"); }
		@Test public void test_16839() { testInvalid("(!int | {any})","((int & any) | {any, int})"); }
		@Test public void test_16840() { testValid("(!int | {any})","(!any | {int, int})"); }
		@Test public void test_16841() { testValid("(!int | {any})","(!int | {int, int})"); }
		@Test public void test_16842() { testValid("(!int | {any})","({any, any} | {int, int})"); }
		@Test public void test_16843() { testValid("(!int | {any})","({any, int} | {int, int})"); }
		@Test public void test_16844() { testInvalid("(!int | {any})","((any | any) | {int, int})"); }
		@Test public void test_16845() { testInvalid("(!int | {any})","((int | int) | {int, int})"); }
		@Test public void test_16846() { testInvalid("(!int | {any})","((int & any) | {int, int})"); }
		@Test public void test_16847() { testInvalid("(!int | {any})","((any & int) | {int, int})"); }
		@Test public void test_16848() { testInvalid("(!int | {any})","((int & int) | {int, int})"); }
		@Test public void test_16849() { testInvalid("(!int | {any})","({any} | (any | any))"); }
		@Test public void test_16850() { testInvalid("(!int | {any})","(!any | (any | any))"); }
		@Test public void test_16851() { testInvalid("(!int | {any})","({any, any} | (any | any))"); }
		@Test public void test_16852() { testInvalid("(!int | {any})","({any, int} | (any | any))"); }
		@Test public void test_16853() { testInvalid("(!int | {any})","({int, int} | (any | any))"); }
		@Test public void test_16854() { testInvalid("(!int | {any})","((int | any) | (any | any))"); }
		@Test public void test_16855() { testInvalid("(!int | {any})","((any | int) | (any | any))"); }
		@Test public void test_16856() { testInvalid("(!int | {any})","((any & int) | (any | any))"); }
		@Test public void test_16857() { testInvalid("(!int | {any})","((int & int) | (any | any))"); }
		@Test public void test_16858() { testInvalid("(!int | {any})","({any} | (int | any))"); }
		@Test public void test_16859() { testInvalid("(!int | {any})","(!int | (int | any))"); }
		@Test public void test_16860() { testInvalid("(!int | {any})","({int, any} | (int | any))"); }
		@Test public void test_16861() { testInvalid("(!int | {any})","({any, int} | (int | any))"); }
		@Test public void test_16862() { testInvalid("(!int | {any})","((int & any) | (int | any))"); }
		@Test public void test_16863() { testInvalid("(!int | {any})","((any & int) | (int | any))"); }
		@Test public void test_16864() { testInvalid("(!int | {any})","({any} | (any | int))"); }
		@Test public void test_16865() { testInvalid("(!int | {any})","({int} | (any | int))"); }
		@Test public void test_16866() { testInvalid("(!int | {any})","(!any | (any | int))"); }
		@Test public void test_16867() { testInvalid("(!int | {any})","(!int | (any | int))"); }
		@Test public void test_16868() { testInvalid("(!int | {any})","({any, int} | (any | int))"); }
		@Test public void test_16869() { testInvalid("(!int | {any})","({int, int} | (any | int))"); }
		@Test public void test_16870() { testInvalid("(!int | {any})","((int | any) | (any | int))"); }
		@Test public void test_16871() { testInvalid("(!int | {any})","((any | int) | (any | int))"); }
		@Test public void test_16872() { testInvalid("(!int | {any})","((int | int) | (any | int))"); }
		@Test public void test_16873() { testInvalid("(!int | {any})","((any & any) | (any | int))"); }
		@Test public void test_16874() { testInvalid("(!int | {any})","({int} | (int | int))"); }
		@Test public void test_16875() { testInvalid("(!int | {any})","(!any | (int | int))"); }
		@Test public void test_16876() { testInvalid("(!int | {any})","(!int | (int | int))"); }
		@Test public void test_16877() { testInvalid("(!int | {any})","({int, any} | (int | int))"); }
		@Test public void test_16878() { testInvalid("(!int | {any})","({any, int} | (int | int))"); }
		@Test public void test_16879() { testInvalid("(!int | {any})","((any | int) | (int | int))"); }
		@Test public void test_16880() { testInvalid("(!int | {any})","((int | int) | (int | int))"); }
		@Test public void test_16881() { testInvalid("(!int | {any})","((any & any) | (int | int))"); }
		@Test public void test_16882() { testInvalid("(!int | {any})","((int & any) | (int | int))"); }
		@Test public void test_16883() { testInvalid("(!int | {any})","((int & int) | (int | int))"); }
		@Test public void test_16884() { testInvalid("(!int | {any})","(!any | (any & any))"); }
		@Test public void test_16885() { testInvalid("(!int | {any})","(!int | (any & any))"); }
		@Test public void test_16886() { testInvalid("(!int | {any})","({any, any} | (any & any))"); }
		@Test public void test_16887() { testInvalid("(!int | {any})","({int, any} | (any & any))"); }
		@Test public void test_16888() { testInvalid("(!int | {any})","({any, int} | (any & any))"); }
		@Test public void test_16889() { testInvalid("(!int | {any})","({int, int} | (any & any))"); }
		@Test public void test_16890() { testInvalid("(!int | {any})","((int | any) | (any & any))"); }
		@Test public void test_16891() { testInvalid("(!int | {any})","((int | int) | (any & any))"); }
		@Test public void test_16892() { testInvalid("(!int | {any})","((int & any) | (any & any))"); }
		@Test public void test_16893() { testInvalid("(!int | {any})","((any & int) | (any & any))"); }
		@Test public void test_16894() { testInvalid("(!int | {any})","((int & int) | (any & any))"); }
		@Test public void test_16895() { testInvalid("(!int | {any})","({any} | (int & any))"); }
		@Test public void test_16896() { testValid("({any, any} | {any})","{int}"); }
		@Test public void test_16897() { testValid("({any, any} | {any})","{any, any}"); }
		@Test public void test_16898() { testValid("({any, any} | {any})","{int, int}"); }
		@Test public void test_16899() { testInvalid("({any, any} | {any})","(any | int)"); }
		@Test public void test_16900() { testInvalid("({any, any} | {any})","(int & any)"); }
		@Test public void test_16901() { testValid("({any, any} | {any})","{{any}}"); }
		@Test public void test_16902() { testValid("({any, any} | {any})","{{int, any}}"); }
		@Test public void test_16903() { testValid("({any, any} | {any})","{{int, int}}"); }
		@Test public void test_16904() { testValid("({any, any} | {any})","{(any | int)}"); }
		@Test public void test_16905() { testInvalid("({any, any} | {any})","!{int, any}"); }
		@Test public void test_16906() { testInvalid("({any, any} | {any})","!{int, int}"); }
		@Test public void test_16907() { testValid("({any, any} | {any})","!(any | any)"); }
		@Test public void test_16908() { testValid("({any, any} | {any})","!(any & any)"); }
		@Test public void test_16909() { testInvalid("({any, any} | {any})","!(int & int)"); }
		@Test public void test_16910() { testValid("({any, any} | {any})","{{int}, {any}}"); }
		@Test public void test_16911() { testValid("({any, any} | {any})","{!int, {any}}"); }
		@Test public void test_16912() { testValid("({any, any} | {any})","{{int, int}, {any}}"); }
		@Test public void test_16913() { testValid("({any, any} | {any})","{(any | int), {any}}"); }
		@Test public void test_16914() { testValid("({any, any} | {any})","{!int, {int}}"); }
		@Test public void test_16915() { testValid("({any, any} | {any})","{{any, any}, {int}}"); }
		@Test public void test_16916() { testValid("({any, any} | {any})","{(any | any), {int}}"); }
		@Test public void test_16917() { testValid("({any, any} | {any})","{(any & any), {int}}"); }
		@Test public void test_16918() { testValid("({any, any} | {any})","{(any & int), {int}}"); }
		@Test public void test_16919() { testValid("({any, any} | {any})","{{any, any}, !int}"); }
		@Test public void test_16920() { testValid("({any, any} | {any})","{{any, int}, !int}"); }
		@Test public void test_16921() { testValid("({any, any} | {any})","{(any | any), !int}"); }
		@Test public void test_16922() { testValid("({any, any} | {any})","{(int | any), !int}"); }
		@Test public void test_16923() { testValid("({any, any} | {any})","{(any & any), !int}"); }
		@Test public void test_16924() { testValid("({any, any} | {any})","{(int & any), !int}"); }
		@Test public void test_16925() { testValid("({any, any} | {any})","{(int & int), !int}"); }
		@Test public void test_16926() { testValid("({any, any} | {any})","{{any}, {any, any}}"); }
		@Test public void test_16927() { testValid("({any, any} | {any})","{{int}, {any, any}}"); }
		@Test public void test_16928() { testValid("({any, any} | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_16929() { testValid("({any, any} | {any})","{(any | any), {any, any}}"); }
		@Test public void test_16930() { testValid("({any, any} | {any})","{(any | int), {any, any}}"); }
		@Test public void test_16931() { testValid("({any, any} | {any})","{!int, {int, any}}"); }
		@Test public void test_16932() { testValid("({any, any} | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_16933() { testValid("({any, any} | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_16934() { testValid("({any, any} | {any})","{(any & int), {int, any}}"); }
		@Test public void test_16935() { testValid("({any, any} | {any})","{{any}, {any, int}}"); }
		@Test public void test_16936() { testValid("({any, any} | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_16937() { testValid("({any, any} | {any})","{(int | int), {any, int}}"); }
		@Test public void test_16938() { testValid("({any, any} | {any})","{(any & int), {any, int}}"); }
		@Test public void test_16939() { testValid("({any, any} | {any})","{!int, {int, int}}"); }
		@Test public void test_16940() { testValid("({any, any} | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_16941() { testValid("({any, any} | {any})","{(any | any), {int, int}}"); }
		@Test public void test_16942() { testValid("({any, any} | {any})","{(int | any), {int, int}}"); }
		@Test public void test_16943() { testValid("({any, any} | {any})","{(int & any), {int, int}}"); }
		@Test public void test_16944() { testValid("({any, any} | {any})","{{int}, (any | any)}"); }
		@Test public void test_16945() { testValid("({any, any} | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_16946() { testValid("({any, any} | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_16947() { testValid("({any, any} | {any})","{(any | any), (any | any)}"); }
		@Test public void test_16948() { testValid("({any, any} | {any})","{(int | any), (any | any)}"); }
		@Test public void test_16949() { testValid("({any, any} | {any})","{(int & int), (any | any)}"); }
		@Test public void test_16950() { testValid("({any, any} | {any})","{!int, (int | any)}"); }
		@Test public void test_16951() { testValid("({any, any} | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_16952() { testValid("({any, any} | {any})","{(any | any), (int | any)}"); }
		@Test public void test_16953() { testValid("({any, any} | {any})","{(int | int), (int | any)}"); }
		@Test public void test_16954() { testValid("({any, any} | {any})","{{any}, (any | int)}"); }
		@Test public void test_16955() { testValid("({any, any} | {any})","{!int, (any | int)}"); }
		@Test public void test_16956() { testValid("({any, any} | {any})","{(any | any), (any | int)}"); }
		@Test public void test_16957() { testValid("({any, any} | {any})","{(any | int), (any | int)}"); }
		@Test public void test_16958() { testValid("({any, any} | {any})","{(any & int), (any | int)}"); }
		@Test public void test_16959() { testValid("({any, any} | {any})","{{int}, (int | int)}"); }
		@Test public void test_16960() { testValid("({any, any} | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_16961() { testValid("({any, any} | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_16962() { testValid("({any, any} | {any})","{{int}, (any & any)}"); }
		@Test public void test_16963() { testValid("({any, any} | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_16964() { testValid("({any, any} | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_16965() { testValid("({any, any} | {any})","{(int | any), (any & any)}"); }
		@Test public void test_16966() { testValid("({any, any} | {any})","{(any & any), (any & any)}"); }
		@Test public void test_16967() { testValid("({any, any} | {any})","{(int & any), (any & any)}"); }
		@Test public void test_16968() { testValid("({any, any} | {any})","{{any}, (int & any)}"); }
		@Test public void test_16969() { testValid("({any, any} | {any})","{{int}, (int & any)}"); }
		@Test public void test_16970() { testValid("({any, any} | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_16971() { testValid("({any, any} | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_16972() { testValid("({any, any} | {any})","{(any | int), (int & any)}"); }
		@Test public void test_16973() { testValid("({any, any} | {any})","{(any & any), (int & any)}"); }
		@Test public void test_16974() { testValid("({any, any} | {any})","{(int & any), (int & any)}"); }
		@Test public void test_16975() { testValid("({any, any} | {any})","{(int & int), (int & any)}"); }
		@Test public void test_16976() { testValid("({any, any} | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_16977() { testValid("({any, any} | {any})","{(any & any), (any & int)}"); }
		@Test public void test_16978() { testValid("({any, any} | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_16979() { testValid("({any, any} | {any})","{(int | int), (int & int)}"); }
		@Test public void test_16980() { testValid("({any, any} | {any})","{(any & any), (int & int)}"); }
		@Test public void test_16981() { testValid("({any, any} | {any})","{(any & int), (int & int)}"); }
		@Test public void test_16982() { testValid("({any, any} | {any})","{(int & int), (int & int)}"); }
		@Test public void test_16983() { testInvalid("({any, any} | {any})","(!int | {any})"); }
		@Test public void test_16984() { testValid("({any, any} | {any})","({any, any} | {any})"); }
		@Test public void test_16985() { testInvalid("({any, any} | {any})","((any | any) | {any})"); }
		@Test public void test_16986() { testInvalid("({any, any} | {any})","((int | any) | {any})"); }
		@Test public void test_16987() { testInvalid("({any, any} | {any})","((any & any) | {any})"); }
		@Test public void test_16988() { testInvalid("({any, any} | {any})","((int & any) | {any})"); }
		@Test public void test_16989() { testInvalid("({any, any} | {any})","((any & int) | {any})"); }
		@Test public void test_16990() { testValid("({any, any} | {any})","({int} | {int})"); }
		@Test public void test_16991() { testValid("({any, any} | {any})","(!any | {int})"); }
		@Test public void test_16992() { testInvalid("({any, any} | {any})","(!int | {int})"); }
		@Test public void test_16993() { testValid("({any, any} | {any})","({any, int} | {int})"); }
		@Test public void test_16994() { testInvalid("({any, any} | {any})","((int & any) | {int})"); }
		@Test public void test_16995() { testInvalid("({any, any} | {any})","((any & int) | {int})"); }
		@Test public void test_16996() { testInvalid("({any, any} | {any})","((int & int) | {int})"); }
		@Test public void test_16997() { testValid("({any, any} | {any})","({any} | !any)"); }
		@Test public void test_16998() { testValid("({any, any} | {any})","({int} | !any)"); }
		@Test public void test_16999() { testValid("({any, any} | {any})","({any, any} | !any)"); }
		@Test public void test_17000() { testValid("({any, any} | {any})","({int, int} | !any)"); }
		@Test public void test_17001() { testInvalid("({any, any} | {any})","((any | any) | !any)"); }
		@Test public void test_17002() { testInvalid("({any, any} | {any})","((int | any) | !any)"); }
		@Test public void test_17003() { testInvalid("({any, any} | {any})","((int | int) | !any)"); }
		@Test public void test_17004() { testInvalid("({any, any} | {any})","((int & int) | !any)"); }
		@Test public void test_17005() { testInvalid("({any, any} | {any})","(!int | !int)"); }
		@Test public void test_17006() { testInvalid("({any, any} | {any})","({any, any} | !int)"); }
		@Test public void test_17007() { testInvalid("({any, any} | {any})","({int, int} | !int)"); }
		@Test public void test_17008() { testInvalid("({any, any} | {any})","((int | any) | !int)"); }
		@Test public void test_17009() { testInvalid("({any, any} | {any})","((any | int) | !int)"); }
		@Test public void test_17010() { testInvalid("({any, any} | {any})","((any & int) | !int)"); }
		@Test public void test_17011() { testInvalid("({any, any} | {any})","((int & int) | !int)"); }
		@Test public void test_17012() { testValid("({any, any} | {any})","({int} | {any, any})"); }
		@Test public void test_17013() { testValid("({any, any} | {any})","(!any | {any, any})"); }
		@Test public void test_17014() { testInvalid("({any, any} | {any})","(!int | {any, any})"); }
		@Test public void test_17015() { testValid("({any, any} | {any})","({any, int} | {any, any})"); }
		@Test public void test_17016() { testInvalid("({any, any} | {any})","((int | any) | {any, any})"); }
		@Test public void test_17017() { testInvalid("({any, any} | {any})","((any & any) | {any, any})"); }
		@Test public void test_17018() { testInvalid("({any, any} | {any})","((any & int) | {any, any})"); }
		@Test public void test_17019() { testInvalid("({any, any} | {any})","(!int | {int, any})"); }
		@Test public void test_17020() { testValid("({any, any} | {any})","({any, int} | {int, any})"); }
		@Test public void test_17021() { testInvalid("({any, any} | {any})","((any | any) | {int, any})"); }
		@Test public void test_17022() { testInvalid("({any, any} | {any})","((int | any) | {int, any})"); }
		@Test public void test_17023() { testInvalid("({any, any} | {any})","((any | int) | {int, any})"); }
		@Test public void test_17024() { testInvalid("({any, any} | {any})","((int & any) | {int, any})"); }
		@Test public void test_17025() { testValid("({any, any} | {any})","({any} | {any, int})"); }
		@Test public void test_17026() { testInvalid("({any, any} | {any})","(!int | {any, int})"); }
		@Test public void test_17027() { testValid("({any, any} | {any})","({any, int} | {any, int})"); }
		@Test public void test_17028() { testInvalid("({any, any} | {any})","((any | any) | {any, int})"); }
		@Test public void test_17029() { testInvalid("({any, any} | {any})","((any | int) | {any, int})"); }
		@Test public void test_17030() { testInvalid("({any, any} | {any})","((int | int) | {any, int})"); }
		@Test public void test_17031() { testInvalid("({any, any} | {any})","((int & any) | {any, int})"); }
		@Test public void test_17032() { testValid("({any, any} | {any})","(!any | {int, int})"); }
		@Test public void test_17033() { testInvalid("({any, any} | {any})","(!int | {int, int})"); }
		@Test public void test_17034() { testValid("({any, any} | {any})","({any, any} | {int, int})"); }
		@Test public void test_17035() { testValid("({any, any} | {any})","({any, int} | {int, int})"); }
		@Test public void test_17036() { testInvalid("({any, any} | {any})","((any | any) | {int, int})"); }
		@Test public void test_17037() { testInvalid("({any, any} | {any})","((int | int) | {int, int})"); }
		@Test public void test_17038() { testInvalid("({any, any} | {any})","((int & any) | {int, int})"); }
		@Test public void test_17039() { testInvalid("({any, any} | {any})","((any & int) | {int, int})"); }
		@Test public void test_17040() { testInvalid("({any, any} | {any})","((int & int) | {int, int})"); }
		@Test public void test_17041() { testInvalid("({any, any} | {any})","({any} | (any | any))"); }
		@Test public void test_17042() { testInvalid("({any, any} | {any})","(!any | (any | any))"); }
		@Test public void test_17043() { testInvalid("({any, any} | {any})","({any, any} | (any | any))"); }
		@Test public void test_17044() { testInvalid("({any, any} | {any})","({any, int} | (any | any))"); }
		@Test public void test_17045() { testInvalid("({any, any} | {any})","({int, int} | (any | any))"); }
		@Test public void test_17046() { testInvalid("({any, any} | {any})","((int | any) | (any | any))"); }
		@Test public void test_17047() { testInvalid("({any, any} | {any})","((any | int) | (any | any))"); }
		@Test public void test_17048() { testInvalid("({any, any} | {any})","((any & int) | (any | any))"); }
		@Test public void test_17049() { testInvalid("({any, any} | {any})","((int & int) | (any | any))"); }
		@Test public void test_17050() { testInvalid("({any, any} | {any})","({any} | (int | any))"); }
		@Test public void test_17051() { testInvalid("({any, any} | {any})","(!int | (int | any))"); }
		@Test public void test_17052() { testInvalid("({any, any} | {any})","({int, any} | (int | any))"); }
		@Test public void test_17053() { testInvalid("({any, any} | {any})","({any, int} | (int | any))"); }
		@Test public void test_17054() { testInvalid("({any, any} | {any})","((int & any) | (int | any))"); }
		@Test public void test_17055() { testInvalid("({any, any} | {any})","((any & int) | (int | any))"); }
		@Test public void test_17056() { testInvalid("({any, any} | {any})","({any} | (any | int))"); }
		@Test public void test_17057() { testInvalid("({any, any} | {any})","({int} | (any | int))"); }
		@Test public void test_17058() { testInvalid("({any, any} | {any})","(!any | (any | int))"); }
		@Test public void test_17059() { testInvalid("({any, any} | {any})","(!int | (any | int))"); }
		@Test public void test_17060() { testInvalid("({any, any} | {any})","({any, int} | (any | int))"); }
		@Test public void test_17061() { testInvalid("({any, any} | {any})","({int, int} | (any | int))"); }
		@Test public void test_17062() { testInvalid("({any, any} | {any})","((int | any) | (any | int))"); }
		@Test public void test_17063() { testInvalid("({any, any} | {any})","((any | int) | (any | int))"); }
		@Test public void test_17064() { testInvalid("({any, any} | {any})","((int | int) | (any | int))"); }
		@Test public void test_17065() { testInvalid("({any, any} | {any})","((any & any) | (any | int))"); }
		@Test public void test_17066() { testInvalid("({any, any} | {any})","({int} | (int | int))"); }
		@Test public void test_17067() { testInvalid("({any, any} | {any})","(!any | (int | int))"); }
		@Test public void test_17068() { testInvalid("({any, any} | {any})","(!int | (int | int))"); }
		@Test public void test_17069() { testInvalid("({any, any} | {any})","({int, any} | (int | int))"); }
		@Test public void test_17070() { testInvalid("({any, any} | {any})","({any, int} | (int | int))"); }
		@Test public void test_17071() { testInvalid("({any, any} | {any})","((any | int) | (int | int))"); }
		@Test public void test_17072() { testInvalid("({any, any} | {any})","((int | int) | (int | int))"); }
		@Test public void test_17073() { testInvalid("({any, any} | {any})","((any & any) | (int | int))"); }
		@Test public void test_17074() { testInvalid("({any, any} | {any})","((int & any) | (int | int))"); }
		@Test public void test_17075() { testInvalid("({any, any} | {any})","((int & int) | (int | int))"); }
		@Test public void test_17076() { testInvalid("({any, any} | {any})","(!any | (any & any))"); }
		@Test public void test_17077() { testInvalid("({any, any} | {any})","(!int | (any & any))"); }
		@Test public void test_17078() { testInvalid("({any, any} | {any})","({any, any} | (any & any))"); }
		@Test public void test_17079() { testInvalid("({any, any} | {any})","({int, any} | (any & any))"); }
		@Test public void test_17080() { testInvalid("({any, any} | {any})","({any, int} | (any & any))"); }
		@Test public void test_17081() { testInvalid("({any, any} | {any})","({int, int} | (any & any))"); }
		@Test public void test_17082() { testInvalid("({any, any} | {any})","((int | any) | (any & any))"); }
		@Test public void test_17083() { testInvalid("({any, any} | {any})","((int | int) | (any & any))"); }
		@Test public void test_17084() { testInvalid("({any, any} | {any})","((int & any) | (any & any))"); }
		@Test public void test_17085() { testInvalid("({any, any} | {any})","((any & int) | (any & any))"); }
		@Test public void test_17086() { testInvalid("({any, any} | {any})","((int & int) | (any & any))"); }
		@Test public void test_17087() { testInvalid("({any, any} | {any})","({any} | (int & any))"); }
		@Test public void test_17088() { testValid("((any | any) | {any})","{int}"); }
		@Test public void test_17089() { testValid("((any | any) | {any})","{any, any}"); }
		@Test public void test_17090() { testValid("((any | any) | {any})","{int, int}"); }
		@Test public void test_17091() { testValid("((any | any) | {any})","(any | int)"); }
		@Test public void test_17092() { testValid("((any | any) | {any})","(int & any)"); }
		@Test public void test_17093() { testValid("((any | any) | {any})","{{any}}"); }
		@Test public void test_17094() { testValid("((any | any) | {any})","{{int, any}}"); }
		@Test public void test_17095() { testValid("((any | any) | {any})","{{int, int}}"); }
		@Test public void test_17096() { testValid("((any | any) | {any})","{(any | int)}"); }
		@Test public void test_17097() { testValid("((any | any) | {any})","!{int, any}"); }
		@Test public void test_17098() { testValid("((any | any) | {any})","!{int, int}"); }
		@Test public void test_17099() { testValid("((any | any) | {any})","!(any | any)"); }
		@Test public void test_17100() { testValid("((any | any) | {any})","!(any & any)"); }
		@Test public void test_17101() { testValid("((any | any) | {any})","!(int & int)"); }
		@Test public void test_17102() { testValid("((any | any) | {any})","{{int}, {any}}"); }
		@Test public void test_17103() { testValid("((any | any) | {any})","{!int, {any}}"); }
		@Test public void test_17104() { testValid("((any | any) | {any})","{{int, int}, {any}}"); }
		@Test public void test_17105() { testValid("((any | any) | {any})","{(any | int), {any}}"); }
		@Test public void test_17106() { testValid("((any | any) | {any})","{!int, {int}}"); }
		@Test public void test_17107() { testValid("((any | any) | {any})","{{any, any}, {int}}"); }
		@Test public void test_17108() { testValid("((any | any) | {any})","{(any | any), {int}}"); }
		@Test public void test_17109() { testValid("((any | any) | {any})","{(any & any), {int}}"); }
		@Test public void test_17110() { testValid("((any | any) | {any})","{(any & int), {int}}"); }
		@Test public void test_17111() { testValid("((any | any) | {any})","{{any, any}, !int}"); }
		@Test public void test_17112() { testValid("((any | any) | {any})","{{any, int}, !int}"); }
		@Test public void test_17113() { testValid("((any | any) | {any})","{(any | any), !int}"); }
		@Test public void test_17114() { testValid("((any | any) | {any})","{(int | any), !int}"); }
		@Test public void test_17115() { testValid("((any | any) | {any})","{(any & any), !int}"); }
		@Test public void test_17116() { testValid("((any | any) | {any})","{(int & any), !int}"); }
		@Test public void test_17117() { testValid("((any | any) | {any})","{(int & int), !int}"); }
		@Test public void test_17118() { testValid("((any | any) | {any})","{{any}, {any, any}}"); }
		@Test public void test_17119() { testValid("((any | any) | {any})","{{int}, {any, any}}"); }
		@Test public void test_17120() { testValid("((any | any) | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_17121() { testValid("((any | any) | {any})","{(any | any), {any, any}}"); }
		@Test public void test_17122() { testValid("((any | any) | {any})","{(any | int), {any, any}}"); }
		@Test public void test_17123() { testValid("((any | any) | {any})","{!int, {int, any}}"); }
		@Test public void test_17124() { testValid("((any | any) | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_17125() { testValid("((any | any) | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_17126() { testValid("((any | any) | {any})","{(any & int), {int, any}}"); }
		@Test public void test_17127() { testValid("((any | any) | {any})","{{any}, {any, int}}"); }
		@Test public void test_17128() { testValid("((any | any) | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_17129() { testValid("((any | any) | {any})","{(int | int), {any, int}}"); }
		@Test public void test_17130() { testValid("((any | any) | {any})","{(any & int), {any, int}}"); }
		@Test public void test_17131() { testValid("((any | any) | {any})","{!int, {int, int}}"); }
		@Test public void test_17132() { testValid("((any | any) | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_17133() { testValid("((any | any) | {any})","{(any | any), {int, int}}"); }
		@Test public void test_17134() { testValid("((any | any) | {any})","{(int | any), {int, int}}"); }
		@Test public void test_17135() { testValid("((any | any) | {any})","{(int & any), {int, int}}"); }
		@Test public void test_17136() { testValid("((any | any) | {any})","{{int}, (any | any)}"); }
		@Test public void test_17137() { testValid("((any | any) | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_17138() { testValid("((any | any) | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_17139() { testValid("((any | any) | {any})","{(any | any), (any | any)}"); }
		@Test public void test_17140() { testValid("((any | any) | {any})","{(int | any), (any | any)}"); }
		@Test public void test_17141() { testValid("((any | any) | {any})","{(int & int), (any | any)}"); }
		@Test public void test_17142() { testValid("((any | any) | {any})","{!int, (int | any)}"); }
		@Test public void test_17143() { testValid("((any | any) | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_17144() { testValid("((any | any) | {any})","{(any | any), (int | any)}"); }
		@Test public void test_17145() { testValid("((any | any) | {any})","{(int | int), (int | any)}"); }
		@Test public void test_17146() { testValid("((any | any) | {any})","{{any}, (any | int)}"); }
		@Test public void test_17147() { testValid("((any | any) | {any})","{!int, (any | int)}"); }
		@Test public void test_17148() { testValid("((any | any) | {any})","{(any | any), (any | int)}"); }
		@Test public void test_17149() { testValid("((any | any) | {any})","{(any | int), (any | int)}"); }
		@Test public void test_17150() { testValid("((any | any) | {any})","{(any & int), (any | int)}"); }
		@Test public void test_17151() { testValid("((any | any) | {any})","{{int}, (int | int)}"); }
		@Test public void test_17152() { testValid("((any | any) | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_17153() { testValid("((any | any) | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_17154() { testValid("((any | any) | {any})","{{int}, (any & any)}"); }
		@Test public void test_17155() { testValid("((any | any) | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_17156() { testValid("((any | any) | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_17157() { testValid("((any | any) | {any})","{(int | any), (any & any)}"); }
		@Test public void test_17158() { testValid("((any | any) | {any})","{(any & any), (any & any)}"); }
		@Test public void test_17159() { testValid("((any | any) | {any})","{(int & any), (any & any)}"); }
		@Test public void test_17160() { testValid("((any | any) | {any})","{{any}, (int & any)}"); }
		@Test public void test_17161() { testValid("((any | any) | {any})","{{int}, (int & any)}"); }
		@Test public void test_17162() { testValid("((any | any) | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_17163() { testValid("((any | any) | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_17164() { testValid("((any | any) | {any})","{(any | int), (int & any)}"); }
		@Test public void test_17165() { testValid("((any | any) | {any})","{(any & any), (int & any)}"); }
		@Test public void test_17166() { testValid("((any | any) | {any})","{(int & any), (int & any)}"); }
		@Test public void test_17167() { testValid("((any | any) | {any})","{(int & int), (int & any)}"); }
		@Test public void test_17168() { testValid("((any | any) | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_17169() { testValid("((any | any) | {any})","{(any & any), (any & int)}"); }
		@Test public void test_17170() { testValid("((any | any) | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_17171() { testValid("((any | any) | {any})","{(int | int), (int & int)}"); }
		@Test public void test_17172() { testValid("((any | any) | {any})","{(any & any), (int & int)}"); }
		@Test public void test_17173() { testValid("((any | any) | {any})","{(any & int), (int & int)}"); }
		@Test public void test_17174() { testValid("((any | any) | {any})","{(int & int), (int & int)}"); }
		@Test public void test_17175() { testValid("((any | any) | {any})","(!int | {any})"); }
		@Test public void test_17176() { testValid("((any | any) | {any})","({any, any} | {any})"); }
		@Test public void test_17177() { testValid("((any | any) | {any})","((any | any) | {any})"); }
		@Test public void test_17178() { testValid("((any | any) | {any})","((int | any) | {any})"); }
		@Test public void test_17179() { testValid("((any | any) | {any})","((any & any) | {any})"); }
		@Test public void test_17180() { testValid("((any | any) | {any})","((int & any) | {any})"); }
		@Test public void test_17181() { testValid("((any | any) | {any})","((any & int) | {any})"); }
		@Test public void test_17182() { testValid("((any | any) | {any})","({int} | {int})"); }
		@Test public void test_17183() { testValid("((any | any) | {any})","(!any | {int})"); }
		@Test public void test_17184() { testValid("((any | any) | {any})","(!int | {int})"); }
		@Test public void test_17185() { testValid("((any | any) | {any})","({any, int} | {int})"); }
		@Test public void test_17186() { testValid("((any | any) | {any})","((int & any) | {int})"); }
		@Test public void test_17187() { testValid("((any | any) | {any})","((any & int) | {int})"); }
		@Test public void test_17188() { testValid("((any | any) | {any})","((int & int) | {int})"); }
		@Test public void test_17189() { testValid("((any | any) | {any})","({any} | !any)"); }
		@Test public void test_17190() { testValid("((any | any) | {any})","({int} | !any)"); }
		@Test public void test_17191() { testValid("((any | any) | {any})","({any, any} | !any)"); }
		@Test public void test_17192() { testValid("((any | any) | {any})","({int, int} | !any)"); }
		@Test public void test_17193() { testValid("((any | any) | {any})","((any | any) | !any)"); }
		@Test public void test_17194() { testValid("((any | any) | {any})","((int | any) | !any)"); }
		@Test public void test_17195() { testValid("((any | any) | {any})","((int | int) | !any)"); }
		@Test public void test_17196() { testValid("((any | any) | {any})","((int & int) | !any)"); }
		@Test public void test_17197() { testValid("((any | any) | {any})","(!int | !int)"); }
		@Test public void test_17198() { testValid("((any | any) | {any})","({any, any} | !int)"); }
		@Test public void test_17199() { testValid("((any | any) | {any})","({int, int} | !int)"); }
		@Test public void test_17200() { testValid("((any | any) | {any})","((int | any) | !int)"); }
		@Test public void test_17201() { testValid("((any | any) | {any})","((any | int) | !int)"); }
		@Test public void test_17202() { testValid("((any | any) | {any})","((any & int) | !int)"); }
		@Test public void test_17203() { testValid("((any | any) | {any})","((int & int) | !int)"); }
		@Test public void test_17204() { testValid("((any | any) | {any})","({int} | {any, any})"); }
		@Test public void test_17205() { testValid("((any | any) | {any})","(!any | {any, any})"); }
		@Test public void test_17206() { testValid("((any | any) | {any})","(!int | {any, any})"); }
		@Test public void test_17207() { testValid("((any | any) | {any})","({any, int} | {any, any})"); }
		@Test public void test_17208() { testValid("((any | any) | {any})","((int | any) | {any, any})"); }
		@Test public void test_17209() { testValid("((any | any) | {any})","((any & any) | {any, any})"); }
		@Test public void test_17210() { testValid("((any | any) | {any})","((any & int) | {any, any})"); }
		@Test public void test_17211() { testValid("((any | any) | {any})","(!int | {int, any})"); }
		@Test public void test_17212() { testValid("((any | any) | {any})","({any, int} | {int, any})"); }
		@Test public void test_17213() { testValid("((any | any) | {any})","((any | any) | {int, any})"); }
		@Test public void test_17214() { testValid("((any | any) | {any})","((int | any) | {int, any})"); }
		@Test public void test_17215() { testValid("((any | any) | {any})","((any | int) | {int, any})"); }
		@Test public void test_17216() { testValid("((any | any) | {any})","((int & any) | {int, any})"); }
		@Test public void test_17217() { testValid("((any | any) | {any})","({any} | {any, int})"); }
		@Test public void test_17218() { testValid("((any | any) | {any})","(!int | {any, int})"); }
		@Test public void test_17219() { testValid("((any | any) | {any})","({any, int} | {any, int})"); }
		@Test public void test_17220() { testValid("((any | any) | {any})","((any | any) | {any, int})"); }
		@Test public void test_17221() { testValid("((any | any) | {any})","((any | int) | {any, int})"); }
		@Test public void test_17222() { testValid("((any | any) | {any})","((int | int) | {any, int})"); }
		@Test public void test_17223() { testValid("((any | any) | {any})","((int & any) | {any, int})"); }
		@Test public void test_17224() { testValid("((any | any) | {any})","(!any | {int, int})"); }
		@Test public void test_17225() { testValid("((any | any) | {any})","(!int | {int, int})"); }
		@Test public void test_17226() { testValid("((any | any) | {any})","({any, any} | {int, int})"); }
		@Test public void test_17227() { testValid("((any | any) | {any})","({any, int} | {int, int})"); }
		@Test public void test_17228() { testValid("((any | any) | {any})","((any | any) | {int, int})"); }
		@Test public void test_17229() { testValid("((any | any) | {any})","((int | int) | {int, int})"); }
		@Test public void test_17230() { testValid("((any | any) | {any})","((int & any) | {int, int})"); }
		@Test public void test_17231() { testValid("((any | any) | {any})","((any & int) | {int, int})"); }
		@Test public void test_17232() { testValid("((any | any) | {any})","((int & int) | {int, int})"); }
		@Test public void test_17233() { testValid("((any | any) | {any})","({any} | (any | any))"); }
		@Test public void test_17234() { testValid("((any | any) | {any})","(!any | (any | any))"); }
		@Test public void test_17235() { testValid("((any | any) | {any})","({any, any} | (any | any))"); }
		@Test public void test_17236() { testValid("((any | any) | {any})","({any, int} | (any | any))"); }
		@Test public void test_17237() { testValid("((any | any) | {any})","({int, int} | (any | any))"); }
		@Test public void test_17238() { testValid("((any | any) | {any})","((int | any) | (any | any))"); }
		@Test public void test_17239() { testValid("((any | any) | {any})","((any | int) | (any | any))"); }
		@Test public void test_17240() { testValid("((any | any) | {any})","((any & int) | (any | any))"); }
		@Test public void test_17241() { testValid("((any | any) | {any})","((int & int) | (any | any))"); }
		@Test public void test_17242() { testValid("((any | any) | {any})","({any} | (int | any))"); }
		@Test public void test_17243() { testValid("((any | any) | {any})","(!int | (int | any))"); }
		@Test public void test_17244() { testValid("((any | any) | {any})","({int, any} | (int | any))"); }
		@Test public void test_17245() { testValid("((any | any) | {any})","({any, int} | (int | any))"); }
		@Test public void test_17246() { testValid("((any | any) | {any})","((int & any) | (int | any))"); }
		@Test public void test_17247() { testValid("((any | any) | {any})","((any & int) | (int | any))"); }
		@Test public void test_17248() { testValid("((any | any) | {any})","({any} | (any | int))"); }
		@Test public void test_17249() { testValid("((any | any) | {any})","({int} | (any | int))"); }
		@Test public void test_17250() { testValid("((any | any) | {any})","(!any | (any | int))"); }
		@Test public void test_17251() { testValid("((any | any) | {any})","(!int | (any | int))"); }
		@Test public void test_17252() { testValid("((any | any) | {any})","({any, int} | (any | int))"); }
		@Test public void test_17253() { testValid("((any | any) | {any})","({int, int} | (any | int))"); }
		@Test public void test_17254() { testValid("((any | any) | {any})","((int | any) | (any | int))"); }
		@Test public void test_17255() { testValid("((any | any) | {any})","((any | int) | (any | int))"); }
		@Test public void test_17256() { testValid("((any | any) | {any})","((int | int) | (any | int))"); }
		@Test public void test_17257() { testValid("((any | any) | {any})","((any & any) | (any | int))"); }
		@Test public void test_17258() { testValid("((any | any) | {any})","({int} | (int | int))"); }
		@Test public void test_17259() { testValid("((any | any) | {any})","(!any | (int | int))"); }
		@Test public void test_17260() { testValid("((any | any) | {any})","(!int | (int | int))"); }
		@Test public void test_17261() { testValid("((any | any) | {any})","({int, any} | (int | int))"); }
		@Test public void test_17262() { testValid("((any | any) | {any})","({any, int} | (int | int))"); }
		@Test public void test_17263() { testValid("((any | any) | {any})","((any | int) | (int | int))"); }
		@Test public void test_17264() { testValid("((any | any) | {any})","((int | int) | (int | int))"); }
		@Test public void test_17265() { testValid("((any | any) | {any})","((any & any) | (int | int))"); }
		@Test public void test_17266() { testValid("((any | any) | {any})","((int & any) | (int | int))"); }
		@Test public void test_17267() { testValid("((any | any) | {any})","((int & int) | (int | int))"); }
		@Test public void test_17268() { testValid("((any | any) | {any})","(!any | (any & any))"); }
		@Test public void test_17269() { testValid("((any | any) | {any})","(!int | (any & any))"); }
		@Test public void test_17270() { testValid("((any | any) | {any})","({any, any} | (any & any))"); }
		@Test public void test_17271() { testValid("((any | any) | {any})","({int, any} | (any & any))"); }
		@Test public void test_17272() { testValid("((any | any) | {any})","({any, int} | (any & any))"); }
		@Test public void test_17273() { testValid("((any | any) | {any})","({int, int} | (any & any))"); }
		@Test public void test_17274() { testValid("((any | any) | {any})","((int | any) | (any & any))"); }
		@Test public void test_17275() { testValid("((any | any) | {any})","((int | int) | (any & any))"); }
		@Test public void test_17276() { testValid("((any | any) | {any})","((int & any) | (any & any))"); }
		@Test public void test_17277() { testValid("((any | any) | {any})","((any & int) | (any & any))"); }
		@Test public void test_17278() { testValid("((any | any) | {any})","((int & int) | (any & any))"); }
		@Test public void test_17279() { testValid("((any | any) | {any})","({any} | (int & any))"); }
		@Test public void test_17280() { testValid("((int | any) | {any})","{int}"); }
		@Test public void test_17281() { testValid("((int | any) | {any})","{any, any}"); }
		@Test public void test_17282() { testValid("((int | any) | {any})","{int, int}"); }
		@Test public void test_17283() { testValid("((int | any) | {any})","(any | int)"); }
		@Test public void test_17284() { testValid("((int | any) | {any})","(int & any)"); }
		@Test public void test_17285() { testValid("((int | any) | {any})","{{any}}"); }
		@Test public void test_17286() { testValid("((int | any) | {any})","{{int, any}}"); }
		@Test public void test_17287() { testValid("((int | any) | {any})","{{int, int}}"); }
		@Test public void test_17288() { testValid("((int | any) | {any})","{(any | int)}"); }
		@Test public void test_17289() { testValid("((int | any) | {any})","!{int, any}"); }
		@Test public void test_17290() { testValid("((int | any) | {any})","!{int, int}"); }
		@Test public void test_17291() { testValid("((int | any) | {any})","!(any | any)"); }
		@Test public void test_17292() { testValid("((int | any) | {any})","!(any & any)"); }
		@Test public void test_17293() { testValid("((int | any) | {any})","!(int & int)"); }
		@Test public void test_17294() { testValid("((int | any) | {any})","{{int}, {any}}"); }
		@Test public void test_17295() { testValid("((int | any) | {any})","{!int, {any}}"); }
		@Test public void test_17296() { testValid("((int | any) | {any})","{{int, int}, {any}}"); }
		@Test public void test_17297() { testValid("((int | any) | {any})","{(any | int), {any}}"); }
		@Test public void test_17298() { testValid("((int | any) | {any})","{!int, {int}}"); }
		@Test public void test_17299() { testValid("((int | any) | {any})","{{any, any}, {int}}"); }
		@Test public void test_17300() { testValid("((int | any) | {any})","{(any | any), {int}}"); }
		@Test public void test_17301() { testValid("((int | any) | {any})","{(any & any), {int}}"); }
		@Test public void test_17302() { testValid("((int | any) | {any})","{(any & int), {int}}"); }
		@Test public void test_17303() { testValid("((int | any) | {any})","{{any, any}, !int}"); }
		@Test public void test_17304() { testValid("((int | any) | {any})","{{any, int}, !int}"); }
		@Test public void test_17305() { testValid("((int | any) | {any})","{(any | any), !int}"); }
		@Test public void test_17306() { testValid("((int | any) | {any})","{(int | any), !int}"); }
		@Test public void test_17307() { testValid("((int | any) | {any})","{(any & any), !int}"); }
		@Test public void test_17308() { testValid("((int | any) | {any})","{(int & any), !int}"); }
		@Test public void test_17309() { testValid("((int | any) | {any})","{(int & int), !int}"); }
		@Test public void test_17310() { testValid("((int | any) | {any})","{{any}, {any, any}}"); }
		@Test public void test_17311() { testValid("((int | any) | {any})","{{int}, {any, any}}"); }
		@Test public void test_17312() { testValid("((int | any) | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_17313() { testValid("((int | any) | {any})","{(any | any), {any, any}}"); }
		@Test public void test_17314() { testValid("((int | any) | {any})","{(any | int), {any, any}}"); }
		@Test public void test_17315() { testValid("((int | any) | {any})","{!int, {int, any}}"); }
		@Test public void test_17316() { testValid("((int | any) | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_17317() { testValid("((int | any) | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_17318() { testValid("((int | any) | {any})","{(any & int), {int, any}}"); }
		@Test public void test_17319() { testValid("((int | any) | {any})","{{any}, {any, int}}"); }
		@Test public void test_17320() { testValid("((int | any) | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_17321() { testValid("((int | any) | {any})","{(int | int), {any, int}}"); }
		@Test public void test_17322() { testValid("((int | any) | {any})","{(any & int), {any, int}}"); }
		@Test public void test_17323() { testValid("((int | any) | {any})","{!int, {int, int}}"); }
		@Test public void test_17324() { testValid("((int | any) | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_17325() { testValid("((int | any) | {any})","{(any | any), {int, int}}"); }
		@Test public void test_17326() { testValid("((int | any) | {any})","{(int | any), {int, int}}"); }
		@Test public void test_17327() { testValid("((int | any) | {any})","{(int & any), {int, int}}"); }
		@Test public void test_17328() { testValid("((int | any) | {any})","{{int}, (any | any)}"); }
		@Test public void test_17329() { testValid("((int | any) | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_17330() { testValid("((int | any) | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_17331() { testValid("((int | any) | {any})","{(any | any), (any | any)}"); }
		@Test public void test_17332() { testValid("((int | any) | {any})","{(int | any), (any | any)}"); }
		@Test public void test_17333() { testValid("((int | any) | {any})","{(int & int), (any | any)}"); }
		@Test public void test_17334() { testValid("((int | any) | {any})","{!int, (int | any)}"); }
		@Test public void test_17335() { testValid("((int | any) | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_17336() { testValid("((int | any) | {any})","{(any | any), (int | any)}"); }
		@Test public void test_17337() { testValid("((int | any) | {any})","{(int | int), (int | any)}"); }
		@Test public void test_17338() { testValid("((int | any) | {any})","{{any}, (any | int)}"); }
		@Test public void test_17339() { testValid("((int | any) | {any})","{!int, (any | int)}"); }
		@Test public void test_17340() { testValid("((int | any) | {any})","{(any | any), (any | int)}"); }
		@Test public void test_17341() { testValid("((int | any) | {any})","{(any | int), (any | int)}"); }
		@Test public void test_17342() { testValid("((int | any) | {any})","{(any & int), (any | int)}"); }
		@Test public void test_17343() { testValid("((int | any) | {any})","{{int}, (int | int)}"); }
		@Test public void test_17344() { testValid("((int | any) | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_17345() { testValid("((int | any) | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_17346() { testValid("((int | any) | {any})","{{int}, (any & any)}"); }
		@Test public void test_17347() { testValid("((int | any) | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_17348() { testValid("((int | any) | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_17349() { testValid("((int | any) | {any})","{(int | any), (any & any)}"); }
		@Test public void test_17350() { testValid("((int | any) | {any})","{(any & any), (any & any)}"); }
		@Test public void test_17351() { testValid("((int | any) | {any})","{(int & any), (any & any)}"); }
		@Test public void test_17352() { testValid("((int | any) | {any})","{{any}, (int & any)}"); }
		@Test public void test_17353() { testValid("((int | any) | {any})","{{int}, (int & any)}"); }
		@Test public void test_17354() { testValid("((int | any) | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_17355() { testValid("((int | any) | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_17356() { testValid("((int | any) | {any})","{(any | int), (int & any)}"); }
		@Test public void test_17357() { testValid("((int | any) | {any})","{(any & any), (int & any)}"); }
		@Test public void test_17358() { testValid("((int | any) | {any})","{(int & any), (int & any)}"); }
		@Test public void test_17359() { testValid("((int | any) | {any})","{(int & int), (int & any)}"); }
		@Test public void test_17360() { testValid("((int | any) | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_17361() { testValid("((int | any) | {any})","{(any & any), (any & int)}"); }
		@Test public void test_17362() { testValid("((int | any) | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_17363() { testValid("((int | any) | {any})","{(int | int), (int & int)}"); }
		@Test public void test_17364() { testValid("((int | any) | {any})","{(any & any), (int & int)}"); }
		@Test public void test_17365() { testValid("((int | any) | {any})","{(any & int), (int & int)}"); }
		@Test public void test_17366() { testValid("((int | any) | {any})","{(int & int), (int & int)}"); }
		@Test public void test_17367() { testValid("((int | any) | {any})","(!int | {any})"); }
		@Test public void test_17368() { testValid("((int | any) | {any})","({any, any} | {any})"); }
		@Test public void test_17369() { testValid("((int | any) | {any})","((any | any) | {any})"); }
		@Test public void test_17370() { testValid("((int | any) | {any})","((int | any) | {any})"); }
		@Test public void test_17371() { testValid("((int | any) | {any})","((any & any) | {any})"); }
		@Test public void test_17372() { testValid("((int | any) | {any})","((int & any) | {any})"); }
		@Test public void test_17373() { testValid("((int | any) | {any})","((any & int) | {any})"); }
		@Test public void test_17374() { testValid("((int | any) | {any})","({int} | {int})"); }
		@Test public void test_17375() { testValid("((int | any) | {any})","(!any | {int})"); }
		@Test public void test_17376() { testValid("((int | any) | {any})","(!int | {int})"); }
		@Test public void test_17377() { testValid("((int | any) | {any})","({any, int} | {int})"); }
		@Test public void test_17378() { testValid("((int | any) | {any})","((int & any) | {int})"); }
		@Test public void test_17379() { testValid("((int | any) | {any})","((any & int) | {int})"); }
		@Test public void test_17380() { testValid("((int | any) | {any})","((int & int) | {int})"); }
		@Test public void test_17381() { testValid("((int | any) | {any})","({any} | !any)"); }
		@Test public void test_17382() { testValid("((int | any) | {any})","({int} | !any)"); }
		@Test public void test_17383() { testValid("((int | any) | {any})","({any, any} | !any)"); }
		@Test public void test_17384() { testValid("((int | any) | {any})","({int, int} | !any)"); }
		@Test public void test_17385() { testValid("((int | any) | {any})","((any | any) | !any)"); }
		@Test public void test_17386() { testValid("((int | any) | {any})","((int | any) | !any)"); }
		@Test public void test_17387() { testValid("((int | any) | {any})","((int | int) | !any)"); }
		@Test public void test_17388() { testValid("((int | any) | {any})","((int & int) | !any)"); }
		@Test public void test_17389() { testValid("((int | any) | {any})","(!int | !int)"); }
		@Test public void test_17390() { testValid("((int | any) | {any})","({any, any} | !int)"); }
		@Test public void test_17391() { testValid("((int | any) | {any})","({int, int} | !int)"); }
		@Test public void test_17392() { testValid("((int | any) | {any})","((int | any) | !int)"); }
		@Test public void test_17393() { testValid("((int | any) | {any})","((any | int) | !int)"); }
		@Test public void test_17394() { testValid("((int | any) | {any})","((any & int) | !int)"); }
		@Test public void test_17395() { testValid("((int | any) | {any})","((int & int) | !int)"); }
		@Test public void test_17396() { testValid("((int | any) | {any})","({int} | {any, any})"); }
		@Test public void test_17397() { testValid("((int | any) | {any})","(!any | {any, any})"); }
		@Test public void test_17398() { testValid("((int | any) | {any})","(!int | {any, any})"); }
		@Test public void test_17399() { testValid("((int | any) | {any})","({any, int} | {any, any})"); }
		@Test public void test_17400() { testValid("((int | any) | {any})","((int | any) | {any, any})"); }
		@Test public void test_17401() { testValid("((int | any) | {any})","((any & any) | {any, any})"); }
		@Test public void test_17402() { testValid("((int | any) | {any})","((any & int) | {any, any})"); }
		@Test public void test_17403() { testValid("((int | any) | {any})","(!int | {int, any})"); }
		@Test public void test_17404() { testValid("((int | any) | {any})","({any, int} | {int, any})"); }
		@Test public void test_17405() { testValid("((int | any) | {any})","((any | any) | {int, any})"); }
		@Test public void test_17406() { testValid("((int | any) | {any})","((int | any) | {int, any})"); }
		@Test public void test_17407() { testValid("((int | any) | {any})","((any | int) | {int, any})"); }
		@Test public void test_17408() { testValid("((int | any) | {any})","((int & any) | {int, any})"); }
		@Test public void test_17409() { testValid("((int | any) | {any})","({any} | {any, int})"); }
		@Test public void test_17410() { testValid("((int | any) | {any})","(!int | {any, int})"); }
		@Test public void test_17411() { testValid("((int | any) | {any})","({any, int} | {any, int})"); }
		@Test public void test_17412() { testValid("((int | any) | {any})","((any | any) | {any, int})"); }
		@Test public void test_17413() { testValid("((int | any) | {any})","((any | int) | {any, int})"); }
		@Test public void test_17414() { testValid("((int | any) | {any})","((int | int) | {any, int})"); }
		@Test public void test_17415() { testValid("((int | any) | {any})","((int & any) | {any, int})"); }
		@Test public void test_17416() { testValid("((int | any) | {any})","(!any | {int, int})"); }
		@Test public void test_17417() { testValid("((int | any) | {any})","(!int | {int, int})"); }
		@Test public void test_17418() { testValid("((int | any) | {any})","({any, any} | {int, int})"); }
		@Test public void test_17419() { testValid("((int | any) | {any})","({any, int} | {int, int})"); }
		@Test public void test_17420() { testValid("((int | any) | {any})","((any | any) | {int, int})"); }
		@Test public void test_17421() { testValid("((int | any) | {any})","((int | int) | {int, int})"); }
		@Test public void test_17422() { testValid("((int | any) | {any})","((int & any) | {int, int})"); }
		@Test public void test_17423() { testValid("((int | any) | {any})","((any & int) | {int, int})"); }
		@Test public void test_17424() { testValid("((int | any) | {any})","((int & int) | {int, int})"); }
		@Test public void test_17425() { testValid("((int | any) | {any})","({any} | (any | any))"); }
		@Test public void test_17426() { testValid("((int | any) | {any})","(!any | (any | any))"); }
		@Test public void test_17427() { testValid("((int | any) | {any})","({any, any} | (any | any))"); }
		@Test public void test_17428() { testValid("((int | any) | {any})","({any, int} | (any | any))"); }
		@Test public void test_17429() { testValid("((int | any) | {any})","({int, int} | (any | any))"); }
		@Test public void test_17430() { testValid("((int | any) | {any})","((int | any) | (any | any))"); }
		@Test public void test_17431() { testValid("((int | any) | {any})","((any | int) | (any | any))"); }
		@Test public void test_17432() { testValid("((int | any) | {any})","((any & int) | (any | any))"); }
		@Test public void test_17433() { testValid("((int | any) | {any})","((int & int) | (any | any))"); }
		@Test public void test_17434() { testValid("((int | any) | {any})","({any} | (int | any))"); }
		@Test public void test_17435() { testValid("((int | any) | {any})","(!int | (int | any))"); }
		@Test public void test_17436() { testValid("((int | any) | {any})","({int, any} | (int | any))"); }
		@Test public void test_17437() { testValid("((int | any) | {any})","({any, int} | (int | any))"); }
		@Test public void test_17438() { testValid("((int | any) | {any})","((int & any) | (int | any))"); }
		@Test public void test_17439() { testValid("((int | any) | {any})","((any & int) | (int | any))"); }
		@Test public void test_17440() { testValid("((int | any) | {any})","({any} | (any | int))"); }
		@Test public void test_17441() { testValid("((int | any) | {any})","({int} | (any | int))"); }
		@Test public void test_17442() { testValid("((int | any) | {any})","(!any | (any | int))"); }
		@Test public void test_17443() { testValid("((int | any) | {any})","(!int | (any | int))"); }
		@Test public void test_17444() { testValid("((int | any) | {any})","({any, int} | (any | int))"); }
		@Test public void test_17445() { testValid("((int | any) | {any})","({int, int} | (any | int))"); }
		@Test public void test_17446() { testValid("((int | any) | {any})","((int | any) | (any | int))"); }
		@Test public void test_17447() { testValid("((int | any) | {any})","((any | int) | (any | int))"); }
		@Test public void test_17448() { testValid("((int | any) | {any})","((int | int) | (any | int))"); }
		@Test public void test_17449() { testValid("((int | any) | {any})","((any & any) | (any | int))"); }
		@Test public void test_17450() { testValid("((int | any) | {any})","({int} | (int | int))"); }
		@Test public void test_17451() { testValid("((int | any) | {any})","(!any | (int | int))"); }
		@Test public void test_17452() { testValid("((int | any) | {any})","(!int | (int | int))"); }
		@Test public void test_17453() { testValid("((int | any) | {any})","({int, any} | (int | int))"); }
		@Test public void test_17454() { testValid("((int | any) | {any})","({any, int} | (int | int))"); }
		@Test public void test_17455() { testValid("((int | any) | {any})","((any | int) | (int | int))"); }
		@Test public void test_17456() { testValid("((int | any) | {any})","((int | int) | (int | int))"); }
		@Test public void test_17457() { testValid("((int | any) | {any})","((any & any) | (int | int))"); }
		@Test public void test_17458() { testValid("((int | any) | {any})","((int & any) | (int | int))"); }
		@Test public void test_17459() { testValid("((int | any) | {any})","((int & int) | (int | int))"); }
		@Test public void test_17460() { testValid("((int | any) | {any})","(!any | (any & any))"); }
		@Test public void test_17461() { testValid("((int | any) | {any})","(!int | (any & any))"); }
		@Test public void test_17462() { testValid("((int | any) | {any})","({any, any} | (any & any))"); }
		@Test public void test_17463() { testValid("((int | any) | {any})","({int, any} | (any & any))"); }
		@Test public void test_17464() { testValid("((int | any) | {any})","({any, int} | (any & any))"); }
		@Test public void test_17465() { testValid("((int | any) | {any})","({int, int} | (any & any))"); }
		@Test public void test_17466() { testValid("((int | any) | {any})","((int | any) | (any & any))"); }
		@Test public void test_17467() { testValid("((int | any) | {any})","((int | int) | (any & any))"); }
		@Test public void test_17468() { testValid("((int | any) | {any})","((int & any) | (any & any))"); }
		@Test public void test_17469() { testValid("((int | any) | {any})","((any & int) | (any & any))"); }
		@Test public void test_17470() { testValid("((int | any) | {any})","((int & int) | (any & any))"); }
		@Test public void test_17471() { testValid("((int | any) | {any})","({any} | (int & any))"); }
		@Test public void test_17472() { testValid("((any & any) | {any})","{int}"); }
		@Test public void test_17473() { testValid("((any & any) | {any})","{any, any}"); }
		@Test public void test_17474() { testValid("((any & any) | {any})","{int, int}"); }
		@Test public void test_17475() { testValid("((any & any) | {any})","(any | int)"); }
		@Test public void test_17476() { testValid("((any & any) | {any})","(int & any)"); }
		@Test public void test_17477() { testValid("((any & any) | {any})","{{any}}"); }
		@Test public void test_17478() { testValid("((any & any) | {any})","{{int, any}}"); }
		@Test public void test_17479() { testValid("((any & any) | {any})","{{int, int}}"); }
		@Test public void test_17480() { testValid("((any & any) | {any})","{(any | int)}"); }
		@Test public void test_17481() { testValid("((any & any) | {any})","!{int, any}"); }
		@Test public void test_17482() { testValid("((any & any) | {any})","!{int, int}"); }
		@Test public void test_17483() { testValid("((any & any) | {any})","!(any | any)"); }
		@Test public void test_17484() { testValid("((any & any) | {any})","!(any & any)"); }
		@Test public void test_17485() { testValid("((any & any) | {any})","!(int & int)"); }
		@Test public void test_17486() { testValid("((any & any) | {any})","{{int}, {any}}"); }
		@Test public void test_17487() { testValid("((any & any) | {any})","{!int, {any}}"); }
		@Test public void test_17488() { testValid("((any & any) | {any})","{{int, int}, {any}}"); }
		@Test public void test_17489() { testValid("((any & any) | {any})","{(any | int), {any}}"); }
		@Test public void test_17490() { testValid("((any & any) | {any})","{!int, {int}}"); }
		@Test public void test_17491() { testValid("((any & any) | {any})","{{any, any}, {int}}"); }
		@Test public void test_17492() { testValid("((any & any) | {any})","{(any | any), {int}}"); }
		@Test public void test_17493() { testValid("((any & any) | {any})","{(any & any), {int}}"); }
		@Test public void test_17494() { testValid("((any & any) | {any})","{(any & int), {int}}"); }
		@Test public void test_17495() { testValid("((any & any) | {any})","{{any, any}, !int}"); }
		@Test public void test_17496() { testValid("((any & any) | {any})","{{any, int}, !int}"); }
		@Test public void test_17497() { testValid("((any & any) | {any})","{(any | any), !int}"); }
		@Test public void test_17498() { testValid("((any & any) | {any})","{(int | any), !int}"); }
		@Test public void test_17499() { testValid("((any & any) | {any})","{(any & any), !int}"); }
		@Test public void test_17500() { testValid("((any & any) | {any})","{(int & any), !int}"); }
		@Test public void test_17501() { testValid("((any & any) | {any})","{(int & int), !int}"); }
		@Test public void test_17502() { testValid("((any & any) | {any})","{{any}, {any, any}}"); }
		@Test public void test_17503() { testValid("((any & any) | {any})","{{int}, {any, any}}"); }
		@Test public void test_17504() { testValid("((any & any) | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_17505() { testValid("((any & any) | {any})","{(any | any), {any, any}}"); }
		@Test public void test_17506() { testValid("((any & any) | {any})","{(any | int), {any, any}}"); }
		@Test public void test_17507() { testValid("((any & any) | {any})","{!int, {int, any}}"); }
		@Test public void test_17508() { testValid("((any & any) | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_17509() { testValid("((any & any) | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_17510() { testValid("((any & any) | {any})","{(any & int), {int, any}}"); }
		@Test public void test_17511() { testValid("((any & any) | {any})","{{any}, {any, int}}"); }
		@Test public void test_17512() { testValid("((any & any) | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_17513() { testValid("((any & any) | {any})","{(int | int), {any, int}}"); }
		@Test public void test_17514() { testValid("((any & any) | {any})","{(any & int), {any, int}}"); }
		@Test public void test_17515() { testValid("((any & any) | {any})","{!int, {int, int}}"); }
		@Test public void test_17516() { testValid("((any & any) | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_17517() { testValid("((any & any) | {any})","{(any | any), {int, int}}"); }
		@Test public void test_17518() { testValid("((any & any) | {any})","{(int | any), {int, int}}"); }
		@Test public void test_17519() { testValid("((any & any) | {any})","{(int & any), {int, int}}"); }
		@Test public void test_17520() { testValid("((any & any) | {any})","{{int}, (any | any)}"); }
		@Test public void test_17521() { testValid("((any & any) | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_17522() { testValid("((any & any) | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_17523() { testValid("((any & any) | {any})","{(any | any), (any | any)}"); }
		@Test public void test_17524() { testValid("((any & any) | {any})","{(int | any), (any | any)}"); }
		@Test public void test_17525() { testValid("((any & any) | {any})","{(int & int), (any | any)}"); }
		@Test public void test_17526() { testValid("((any & any) | {any})","{!int, (int | any)}"); }
		@Test public void test_17527() { testValid("((any & any) | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_17528() { testValid("((any & any) | {any})","{(any | any), (int | any)}"); }
		@Test public void test_17529() { testValid("((any & any) | {any})","{(int | int), (int | any)}"); }
		@Test public void test_17530() { testValid("((any & any) | {any})","{{any}, (any | int)}"); }
		@Test public void test_17531() { testValid("((any & any) | {any})","{!int, (any | int)}"); }
		@Test public void test_17532() { testValid("((any & any) | {any})","{(any | any), (any | int)}"); }
		@Test public void test_17533() { testValid("((any & any) | {any})","{(any | int), (any | int)}"); }
		@Test public void test_17534() { testValid("((any & any) | {any})","{(any & int), (any | int)}"); }
		@Test public void test_17535() { testValid("((any & any) | {any})","{{int}, (int | int)}"); }
		@Test public void test_17536() { testValid("((any & any) | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_17537() { testValid("((any & any) | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_17538() { testValid("((any & any) | {any})","{{int}, (any & any)}"); }
		@Test public void test_17539() { testValid("((any & any) | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_17540() { testValid("((any & any) | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_17541() { testValid("((any & any) | {any})","{(int | any), (any & any)}"); }
		@Test public void test_17542() { testValid("((any & any) | {any})","{(any & any), (any & any)}"); }
		@Test public void test_17543() { testValid("((any & any) | {any})","{(int & any), (any & any)}"); }
		@Test public void test_17544() { testValid("((any & any) | {any})","{{any}, (int & any)}"); }
		@Test public void test_17545() { testValid("((any & any) | {any})","{{int}, (int & any)}"); }
		@Test public void test_17546() { testValid("((any & any) | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_17547() { testValid("((any & any) | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_17548() { testValid("((any & any) | {any})","{(any | int), (int & any)}"); }
		@Test public void test_17549() { testValid("((any & any) | {any})","{(any & any), (int & any)}"); }
		@Test public void test_17550() { testValid("((any & any) | {any})","{(int & any), (int & any)}"); }
		@Test public void test_17551() { testValid("((any & any) | {any})","{(int & int), (int & any)}"); }
		@Test public void test_17552() { testValid("((any & any) | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_17553() { testValid("((any & any) | {any})","{(any & any), (any & int)}"); }
		@Test public void test_17554() { testValid("((any & any) | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_17555() { testValid("((any & any) | {any})","{(int | int), (int & int)}"); }
		@Test public void test_17556() { testValid("((any & any) | {any})","{(any & any), (int & int)}"); }
		@Test public void test_17557() { testValid("((any & any) | {any})","{(any & int), (int & int)}"); }
		@Test public void test_17558() { testValid("((any & any) | {any})","{(int & int), (int & int)}"); }
		@Test public void test_17559() { testValid("((any & any) | {any})","(!int | {any})"); }
		@Test public void test_17560() { testValid("((any & any) | {any})","({any, any} | {any})"); }
		@Test public void test_17561() { testValid("((any & any) | {any})","((any | any) | {any})"); }
		@Test public void test_17562() { testValid("((any & any) | {any})","((int | any) | {any})"); }
		@Test public void test_17563() { testValid("((any & any) | {any})","((any & any) | {any})"); }
		@Test public void test_17564() { testValid("((any & any) | {any})","((int & any) | {any})"); }
		@Test public void test_17565() { testValid("((any & any) | {any})","((any & int) | {any})"); }
		@Test public void test_17566() { testValid("((any & any) | {any})","({int} | {int})"); }
		@Test public void test_17567() { testValid("((any & any) | {any})","(!any | {int})"); }
		@Test public void test_17568() { testValid("((any & any) | {any})","(!int | {int})"); }
		@Test public void test_17569() { testValid("((any & any) | {any})","({any, int} | {int})"); }
		@Test public void test_17570() { testValid("((any & any) | {any})","((int & any) | {int})"); }
		@Test public void test_17571() { testValid("((any & any) | {any})","((any & int) | {int})"); }
		@Test public void test_17572() { testValid("((any & any) | {any})","((int & int) | {int})"); }
		@Test public void test_17573() { testValid("((any & any) | {any})","({any} | !any)"); }
		@Test public void test_17574() { testValid("((any & any) | {any})","({int} | !any)"); }
		@Test public void test_17575() { testValid("((any & any) | {any})","({any, any} | !any)"); }
		@Test public void test_17576() { testValid("((any & any) | {any})","({int, int} | !any)"); }
		@Test public void test_17577() { testValid("((any & any) | {any})","((any | any) | !any)"); }
		@Test public void test_17578() { testValid("((any & any) | {any})","((int | any) | !any)"); }
		@Test public void test_17579() { testValid("((any & any) | {any})","((int | int) | !any)"); }
		@Test public void test_17580() { testValid("((any & any) | {any})","((int & int) | !any)"); }
		@Test public void test_17581() { testValid("((any & any) | {any})","(!int | !int)"); }
		@Test public void test_17582() { testValid("((any & any) | {any})","({any, any} | !int)"); }
		@Test public void test_17583() { testValid("((any & any) | {any})","({int, int} | !int)"); }
		@Test public void test_17584() { testValid("((any & any) | {any})","((int | any) | !int)"); }
		@Test public void test_17585() { testValid("((any & any) | {any})","((any | int) | !int)"); }
		@Test public void test_17586() { testValid("((any & any) | {any})","((any & int) | !int)"); }
		@Test public void test_17587() { testValid("((any & any) | {any})","((int & int) | !int)"); }
		@Test public void test_17588() { testValid("((any & any) | {any})","({int} | {any, any})"); }
		@Test public void test_17589() { testValid("((any & any) | {any})","(!any | {any, any})"); }
		@Test public void test_17590() { testValid("((any & any) | {any})","(!int | {any, any})"); }
		@Test public void test_17591() { testValid("((any & any) | {any})","({any, int} | {any, any})"); }
		@Test public void test_17592() { testValid("((any & any) | {any})","((int | any) | {any, any})"); }
		@Test public void test_17593() { testValid("((any & any) | {any})","((any & any) | {any, any})"); }
		@Test public void test_17594() { testValid("((any & any) | {any})","((any & int) | {any, any})"); }
		@Test public void test_17595() { testValid("((any & any) | {any})","(!int | {int, any})"); }
		@Test public void test_17596() { testValid("((any & any) | {any})","({any, int} | {int, any})"); }
		@Test public void test_17597() { testValid("((any & any) | {any})","((any | any) | {int, any})"); }
		@Test public void test_17598() { testValid("((any & any) | {any})","((int | any) | {int, any})"); }
		@Test public void test_17599() { testValid("((any & any) | {any})","((any | int) | {int, any})"); }
		@Test public void test_17600() { testValid("((any & any) | {any})","((int & any) | {int, any})"); }
		@Test public void test_17601() { testValid("((any & any) | {any})","({any} | {any, int})"); }
		@Test public void test_17602() { testValid("((any & any) | {any})","(!int | {any, int})"); }
		@Test public void test_17603() { testValid("((any & any) | {any})","({any, int} | {any, int})"); }
		@Test public void test_17604() { testValid("((any & any) | {any})","((any | any) | {any, int})"); }
		@Test public void test_17605() { testValid("((any & any) | {any})","((any | int) | {any, int})"); }
		@Test public void test_17606() { testValid("((any & any) | {any})","((int | int) | {any, int})"); }
		@Test public void test_17607() { testValid("((any & any) | {any})","((int & any) | {any, int})"); }
		@Test public void test_17608() { testValid("((any & any) | {any})","(!any | {int, int})"); }
		@Test public void test_17609() { testValid("((any & any) | {any})","(!int | {int, int})"); }
		@Test public void test_17610() { testValid("((any & any) | {any})","({any, any} | {int, int})"); }
		@Test public void test_17611() { testValid("((any & any) | {any})","({any, int} | {int, int})"); }
		@Test public void test_17612() { testValid("((any & any) | {any})","((any | any) | {int, int})"); }
		@Test public void test_17613() { testValid("((any & any) | {any})","((int | int) | {int, int})"); }
		@Test public void test_17614() { testValid("((any & any) | {any})","((int & any) | {int, int})"); }
		@Test public void test_17615() { testValid("((any & any) | {any})","((any & int) | {int, int})"); }
		@Test public void test_17616() { testValid("((any & any) | {any})","((int & int) | {int, int})"); }
		@Test public void test_17617() { testValid("((any & any) | {any})","({any} | (any | any))"); }
		@Test public void test_17618() { testValid("((any & any) | {any})","(!any | (any | any))"); }
		@Test public void test_17619() { testValid("((any & any) | {any})","({any, any} | (any | any))"); }
		@Test public void test_17620() { testValid("((any & any) | {any})","({any, int} | (any | any))"); }
		@Test public void test_17621() { testValid("((any & any) | {any})","({int, int} | (any | any))"); }
		@Test public void test_17622() { testValid("((any & any) | {any})","((int | any) | (any | any))"); }
		@Test public void test_17623() { testValid("((any & any) | {any})","((any | int) | (any | any))"); }
		@Test public void test_17624() { testValid("((any & any) | {any})","((any & int) | (any | any))"); }
		@Test public void test_17625() { testValid("((any & any) | {any})","((int & int) | (any | any))"); }
		@Test public void test_17626() { testValid("((any & any) | {any})","({any} | (int | any))"); }
		@Test public void test_17627() { testValid("((any & any) | {any})","(!int | (int | any))"); }
		@Test public void test_17628() { testValid("((any & any) | {any})","({int, any} | (int | any))"); }
		@Test public void test_17629() { testValid("((any & any) | {any})","({any, int} | (int | any))"); }
		@Test public void test_17630() { testValid("((any & any) | {any})","((int & any) | (int | any))"); }
		@Test public void test_17631() { testValid("((any & any) | {any})","((any & int) | (int | any))"); }
		@Test public void test_17632() { testValid("((any & any) | {any})","({any} | (any | int))"); }
		@Test public void test_17633() { testValid("((any & any) | {any})","({int} | (any | int))"); }
		@Test public void test_17634() { testValid("((any & any) | {any})","(!any | (any | int))"); }
		@Test public void test_17635() { testValid("((any & any) | {any})","(!int | (any | int))"); }
		@Test public void test_17636() { testValid("((any & any) | {any})","({any, int} | (any | int))"); }
		@Test public void test_17637() { testValid("((any & any) | {any})","({int, int} | (any | int))"); }
		@Test public void test_17638() { testValid("((any & any) | {any})","((int | any) | (any | int))"); }
		@Test public void test_17639() { testValid("((any & any) | {any})","((any | int) | (any | int))"); }
		@Test public void test_17640() { testValid("((any & any) | {any})","((int | int) | (any | int))"); }
		@Test public void test_17641() { testValid("((any & any) | {any})","((any & any) | (any | int))"); }
		@Test public void test_17642() { testValid("((any & any) | {any})","({int} | (int | int))"); }
		@Test public void test_17643() { testValid("((any & any) | {any})","(!any | (int | int))"); }
		@Test public void test_17644() { testValid("((any & any) | {any})","(!int | (int | int))"); }
		@Test public void test_17645() { testValid("((any & any) | {any})","({int, any} | (int | int))"); }
		@Test public void test_17646() { testValid("((any & any) | {any})","({any, int} | (int | int))"); }
		@Test public void test_17647() { testValid("((any & any) | {any})","((any | int) | (int | int))"); }
		@Test public void test_17648() { testValid("((any & any) | {any})","((int | int) | (int | int))"); }
		@Test public void test_17649() { testValid("((any & any) | {any})","((any & any) | (int | int))"); }
		@Test public void test_17650() { testValid("((any & any) | {any})","((int & any) | (int | int))"); }
		@Test public void test_17651() { testValid("((any & any) | {any})","((int & int) | (int | int))"); }
		@Test public void test_17652() { testValid("((any & any) | {any})","(!any | (any & any))"); }
		@Test public void test_17653() { testValid("((any & any) | {any})","(!int | (any & any))"); }
		@Test public void test_17654() { testValid("((any & any) | {any})","({any, any} | (any & any))"); }
		@Test public void test_17655() { testValid("((any & any) | {any})","({int, any} | (any & any))"); }
		@Test public void test_17656() { testValid("((any & any) | {any})","({any, int} | (any & any))"); }
		@Test public void test_17657() { testValid("((any & any) | {any})","({int, int} | (any & any))"); }
		@Test public void test_17658() { testValid("((any & any) | {any})","((int | any) | (any & any))"); }
		@Test public void test_17659() { testValid("((any & any) | {any})","((int | int) | (any & any))"); }
		@Test public void test_17660() { testValid("((any & any) | {any})","((int & any) | (any & any))"); }
		@Test public void test_17661() { testValid("((any & any) | {any})","((any & int) | (any & any))"); }
		@Test public void test_17662() { testValid("((any & any) | {any})","((int & int) | (any & any))"); }
		@Test public void test_17663() { testValid("((any & any) | {any})","({any} | (int & any))"); }
		@Test public void test_17664() { testValid("((int & any) | {any})","{int}"); }
		@Test public void test_17665() { testInvalid("((int & any) | {any})","{any, any}"); }
		@Test public void test_17666() { testInvalid("((int & any) | {any})","{int, int}"); }
		@Test public void test_17667() { testInvalid("((int & any) | {any})","(any | int)"); }
		@Test public void test_17668() { testValid("((int & any) | {any})","(int & any)"); }
		@Test public void test_17669() { testValid("((int & any) | {any})","{{any}}"); }
		@Test public void test_17670() { testValid("((int & any) | {any})","{{int, any}}"); }
		@Test public void test_17671() { testValid("((int & any) | {any})","{{int, int}}"); }
		@Test public void test_17672() { testValid("((int & any) | {any})","{(any | int)}"); }
		@Test public void test_17673() { testInvalid("((int & any) | {any})","!{int, any}"); }
		@Test public void test_17674() { testInvalid("((int & any) | {any})","!{int, int}"); }
		@Test public void test_17675() { testValid("((int & any) | {any})","!(any | any)"); }
		@Test public void test_17676() { testValid("((int & any) | {any})","!(any & any)"); }
		@Test public void test_17677() { testInvalid("((int & any) | {any})","!(int & int)"); }
		@Test public void test_17678() { testInvalid("((int & any) | {any})","{{int}, {any}}"); }
		@Test public void test_17679() { testInvalid("((int & any) | {any})","{!int, {any}}"); }
		@Test public void test_17680() { testInvalid("((int & any) | {any})","{{int, int}, {any}}"); }
		@Test public void test_17681() { testInvalid("((int & any) | {any})","{(any | int), {any}}"); }
		@Test public void test_17682() { testInvalid("((int & any) | {any})","{!int, {int}}"); }
		@Test public void test_17683() { testInvalid("((int & any) | {any})","{{any, any}, {int}}"); }
		@Test public void test_17684() { testInvalid("((int & any) | {any})","{(any | any), {int}}"); }
		@Test public void test_17685() { testInvalid("((int & any) | {any})","{(any & any), {int}}"); }
		@Test public void test_17686() { testInvalid("((int & any) | {any})","{(any & int), {int}}"); }
		@Test public void test_17687() { testInvalid("((int & any) | {any})","{{any, any}, !int}"); }
		@Test public void test_17688() { testInvalid("((int & any) | {any})","{{any, int}, !int}"); }
		@Test public void test_17689() { testInvalid("((int & any) | {any})","{(any | any), !int}"); }
		@Test public void test_17690() { testInvalid("((int & any) | {any})","{(int | any), !int}"); }
		@Test public void test_17691() { testInvalid("((int & any) | {any})","{(any & any), !int}"); }
		@Test public void test_17692() { testInvalid("((int & any) | {any})","{(int & any), !int}"); }
		@Test public void test_17693() { testInvalid("((int & any) | {any})","{(int & int), !int}"); }
		@Test public void test_17694() { testInvalid("((int & any) | {any})","{{any}, {any, any}}"); }
		@Test public void test_17695() { testInvalid("((int & any) | {any})","{{int}, {any, any}}"); }
		@Test public void test_17696() { testInvalid("((int & any) | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_17697() { testInvalid("((int & any) | {any})","{(any | any), {any, any}}"); }
		@Test public void test_17698() { testInvalid("((int & any) | {any})","{(any | int), {any, any}}"); }
		@Test public void test_17699() { testInvalid("((int & any) | {any})","{!int, {int, any}}"); }
		@Test public void test_17700() { testInvalid("((int & any) | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_17701() { testInvalid("((int & any) | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_17702() { testInvalid("((int & any) | {any})","{(any & int), {int, any}}"); }
		@Test public void test_17703() { testInvalid("((int & any) | {any})","{{any}, {any, int}}"); }
		@Test public void test_17704() { testInvalid("((int & any) | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_17705() { testInvalid("((int & any) | {any})","{(int | int), {any, int}}"); }
		@Test public void test_17706() { testInvalid("((int & any) | {any})","{(any & int), {any, int}}"); }
		@Test public void test_17707() { testInvalid("((int & any) | {any})","{!int, {int, int}}"); }
		@Test public void test_17708() { testInvalid("((int & any) | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_17709() { testInvalid("((int & any) | {any})","{(any | any), {int, int}}"); }
		@Test public void test_17710() { testInvalid("((int & any) | {any})","{(int | any), {int, int}}"); }
		@Test public void test_17711() { testInvalid("((int & any) | {any})","{(int & any), {int, int}}"); }
		@Test public void test_17712() { testInvalid("((int & any) | {any})","{{int}, (any | any)}"); }
		@Test public void test_17713() { testInvalid("((int & any) | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_17714() { testInvalid("((int & any) | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_17715() { testInvalid("((int & any) | {any})","{(any | any), (any | any)}"); }
		@Test public void test_17716() { testInvalid("((int & any) | {any})","{(int | any), (any | any)}"); }
		@Test public void test_17717() { testInvalid("((int & any) | {any})","{(int & int), (any | any)}"); }
		@Test public void test_17718() { testInvalid("((int & any) | {any})","{!int, (int | any)}"); }
		@Test public void test_17719() { testInvalid("((int & any) | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_17720() { testInvalid("((int & any) | {any})","{(any | any), (int | any)}"); }
		@Test public void test_17721() { testInvalid("((int & any) | {any})","{(int | int), (int | any)}"); }
		@Test public void test_17722() { testInvalid("((int & any) | {any})","{{any}, (any | int)}"); }
		@Test public void test_17723() { testInvalid("((int & any) | {any})","{!int, (any | int)}"); }
		@Test public void test_17724() { testInvalid("((int & any) | {any})","{(any | any), (any | int)}"); }
		@Test public void test_17725() { testInvalid("((int & any) | {any})","{(any | int), (any | int)}"); }
		@Test public void test_17726() { testInvalid("((int & any) | {any})","{(any & int), (any | int)}"); }
		@Test public void test_17727() { testInvalid("((int & any) | {any})","{{int}, (int | int)}"); }
		@Test public void test_17728() { testInvalid("((int & any) | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_17729() { testInvalid("((int & any) | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_17730() { testInvalid("((int & any) | {any})","{{int}, (any & any)}"); }
		@Test public void test_17731() { testInvalid("((int & any) | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_17732() { testInvalid("((int & any) | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_17733() { testInvalid("((int & any) | {any})","{(int | any), (any & any)}"); }
		@Test public void test_17734() { testInvalid("((int & any) | {any})","{(any & any), (any & any)}"); }
		@Test public void test_17735() { testInvalid("((int & any) | {any})","{(int & any), (any & any)}"); }
		@Test public void test_17736() { testInvalid("((int & any) | {any})","{{any}, (int & any)}"); }
		@Test public void test_17737() { testInvalid("((int & any) | {any})","{{int}, (int & any)}"); }
		@Test public void test_17738() { testInvalid("((int & any) | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_17739() { testInvalid("((int & any) | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_17740() { testInvalid("((int & any) | {any})","{(any | int), (int & any)}"); }
		@Test public void test_17741() { testInvalid("((int & any) | {any})","{(any & any), (int & any)}"); }
		@Test public void test_17742() { testInvalid("((int & any) | {any})","{(int & any), (int & any)}"); }
		@Test public void test_17743() { testInvalid("((int & any) | {any})","{(int & int), (int & any)}"); }
		@Test public void test_17744() { testInvalid("((int & any) | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_17745() { testInvalid("((int & any) | {any})","{(any & any), (any & int)}"); }
		@Test public void test_17746() { testInvalid("((int & any) | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_17747() { testInvalid("((int & any) | {any})","{(int | int), (int & int)}"); }
		@Test public void test_17748() { testInvalid("((int & any) | {any})","{(any & any), (int & int)}"); }
		@Test public void test_17749() { testInvalid("((int & any) | {any})","{(any & int), (int & int)}"); }
		@Test public void test_17750() { testInvalid("((int & any) | {any})","{(int & int), (int & int)}"); }
		@Test public void test_17751() { testInvalid("((int & any) | {any})","(!int | {any})"); }
		@Test public void test_17752() { testInvalid("((int & any) | {any})","({any, any} | {any})"); }
		@Test public void test_17753() { testInvalid("((int & any) | {any})","((any | any) | {any})"); }
		@Test public void test_17754() { testInvalid("((int & any) | {any})","((int | any) | {any})"); }
		@Test public void test_17755() { testInvalid("((int & any) | {any})","((any & any) | {any})"); }
		@Test public void test_17756() { testValid("((int & any) | {any})","((int & any) | {any})"); }
		@Test public void test_17757() { testValid("((int & any) | {any})","((any & int) | {any})"); }
		@Test public void test_17758() { testValid("((int & any) | {any})","({int} | {int})"); }
		@Test public void test_17759() { testValid("((int & any) | {any})","(!any | {int})"); }
		@Test public void test_17760() { testInvalid("((int & any) | {any})","(!int | {int})"); }
		@Test public void test_17761() { testInvalid("((int & any) | {any})","({any, int} | {int})"); }
		@Test public void test_17762() { testValid("((int & any) | {any})","((int & any) | {int})"); }
		@Test public void test_17763() { testValid("((int & any) | {any})","((any & int) | {int})"); }
		@Test public void test_17764() { testValid("((int & any) | {any})","((int & int) | {int})"); }
		@Test public void test_17765() { testValid("((int & any) | {any})","({any} | !any)"); }
		@Test public void test_17766() { testValid("((int & any) | {any})","({int} | !any)"); }
		@Test public void test_17767() { testInvalid("((int & any) | {any})","({any, any} | !any)"); }
		@Test public void test_17768() { testInvalid("((int & any) | {any})","({int, int} | !any)"); }
		@Test public void test_17769() { testInvalid("((int & any) | {any})","((any | any) | !any)"); }
		@Test public void test_17770() { testInvalid("((int & any) | {any})","((int | any) | !any)"); }
		@Test public void test_17771() { testValid("((int & any) | {any})","((int | int) | !any)"); }
		@Test public void test_17772() { testValid("((int & any) | {any})","((int & int) | !any)"); }
		@Test public void test_17773() { testInvalid("((int & any) | {any})","(!int | !int)"); }
		@Test public void test_17774() { testInvalid("((int & any) | {any})","({any, any} | !int)"); }
		@Test public void test_17775() { testInvalid("((int & any) | {any})","({int, int} | !int)"); }
		@Test public void test_17776() { testInvalid("((int & any) | {any})","((int | any) | !int)"); }
		@Test public void test_17777() { testInvalid("((int & any) | {any})","((any | int) | !int)"); }
		@Test public void test_17778() { testInvalid("((int & any) | {any})","((any & int) | !int)"); }
		@Test public void test_17779() { testInvalid("((int & any) | {any})","((int & int) | !int)"); }
		@Test public void test_17780() { testInvalid("((int & any) | {any})","({int} | {any, any})"); }
		@Test public void test_17781() { testInvalid("((int & any) | {any})","(!any | {any, any})"); }
		@Test public void test_17782() { testInvalid("((int & any) | {any})","(!int | {any, any})"); }
		@Test public void test_17783() { testInvalid("((int & any) | {any})","({any, int} | {any, any})"); }
		@Test public void test_17784() { testInvalid("((int & any) | {any})","((int | any) | {any, any})"); }
		@Test public void test_17785() { testInvalid("((int & any) | {any})","((any & any) | {any, any})"); }
		@Test public void test_17786() { testInvalid("((int & any) | {any})","((any & int) | {any, any})"); }
		@Test public void test_17787() { testInvalid("((int & any) | {any})","(!int | {int, any})"); }
		@Test public void test_17788() { testInvalid("((int & any) | {any})","({any, int} | {int, any})"); }
		@Test public void test_17789() { testInvalid("((int & any) | {any})","((any | any) | {int, any})"); }
		@Test public void test_17790() { testInvalid("((int & any) | {any})","((int | any) | {int, any})"); }
		@Test public void test_17791() { testInvalid("((int & any) | {any})","((any | int) | {int, any})"); }
		@Test public void test_17792() { testInvalid("((int & any) | {any})","((int & any) | {int, any})"); }
		@Test public void test_17793() { testInvalid("((int & any) | {any})","({any} | {any, int})"); }
		@Test public void test_17794() { testInvalid("((int & any) | {any})","(!int | {any, int})"); }
		@Test public void test_17795() { testInvalid("((int & any) | {any})","({any, int} | {any, int})"); }
		@Test public void test_17796() { testInvalid("((int & any) | {any})","((any | any) | {any, int})"); }
		@Test public void test_17797() { testInvalid("((int & any) | {any})","((any | int) | {any, int})"); }
		@Test public void test_17798() { testInvalid("((int & any) | {any})","((int | int) | {any, int})"); }
		@Test public void test_17799() { testInvalid("((int & any) | {any})","((int & any) | {any, int})"); }
		@Test public void test_17800() { testInvalid("((int & any) | {any})","(!any | {int, int})"); }
		@Test public void test_17801() { testInvalid("((int & any) | {any})","(!int | {int, int})"); }
		@Test public void test_17802() { testInvalid("((int & any) | {any})","({any, any} | {int, int})"); }
		@Test public void test_17803() { testInvalid("((int & any) | {any})","({any, int} | {int, int})"); }
		@Test public void test_17804() { testInvalid("((int & any) | {any})","((any | any) | {int, int})"); }
		@Test public void test_17805() { testInvalid("((int & any) | {any})","((int | int) | {int, int})"); }
		@Test public void test_17806() { testInvalid("((int & any) | {any})","((int & any) | {int, int})"); }
		@Test public void test_17807() { testInvalid("((int & any) | {any})","((any & int) | {int, int})"); }
		@Test public void test_17808() { testInvalid("((int & any) | {any})","((int & int) | {int, int})"); }
		@Test public void test_17809() { testInvalid("((int & any) | {any})","({any} | (any | any))"); }
		@Test public void test_17810() { testInvalid("((int & any) | {any})","(!any | (any | any))"); }
		@Test public void test_17811() { testInvalid("((int & any) | {any})","({any, any} | (any | any))"); }
		@Test public void test_17812() { testInvalid("((int & any) | {any})","({any, int} | (any | any))"); }
		@Test public void test_17813() { testInvalid("((int & any) | {any})","({int, int} | (any | any))"); }
		@Test public void test_17814() { testInvalid("((int & any) | {any})","((int | any) | (any | any))"); }
		@Test public void test_17815() { testInvalid("((int & any) | {any})","((any | int) | (any | any))"); }
		@Test public void test_17816() { testInvalid("((int & any) | {any})","((any & int) | (any | any))"); }
		@Test public void test_17817() { testInvalid("((int & any) | {any})","((int & int) | (any | any))"); }
		@Test public void test_17818() { testInvalid("((int & any) | {any})","({any} | (int | any))"); }
		@Test public void test_17819() { testInvalid("((int & any) | {any})","(!int | (int | any))"); }
		@Test public void test_17820() { testInvalid("((int & any) | {any})","({int, any} | (int | any))"); }
		@Test public void test_17821() { testInvalid("((int & any) | {any})","({any, int} | (int | any))"); }
		@Test public void test_17822() { testInvalid("((int & any) | {any})","((int & any) | (int | any))"); }
		@Test public void test_17823() { testInvalid("((int & any) | {any})","((any & int) | (int | any))"); }
		@Test public void test_17824() { testInvalid("((int & any) | {any})","({any} | (any | int))"); }
		@Test public void test_17825() { testInvalid("((int & any) | {any})","({int} | (any | int))"); }
		@Test public void test_17826() { testInvalid("((int & any) | {any})","(!any | (any | int))"); }
		@Test public void test_17827() { testInvalid("((int & any) | {any})","(!int | (any | int))"); }
		@Test public void test_17828() { testInvalid("((int & any) | {any})","({any, int} | (any | int))"); }
		@Test public void test_17829() { testInvalid("((int & any) | {any})","({int, int} | (any | int))"); }
		@Test public void test_17830() { testInvalid("((int & any) | {any})","((int | any) | (any | int))"); }
		@Test public void test_17831() { testInvalid("((int & any) | {any})","((any | int) | (any | int))"); }
		@Test public void test_17832() { testInvalid("((int & any) | {any})","((int | int) | (any | int))"); }
		@Test public void test_17833() { testInvalid("((int & any) | {any})","((any & any) | (any | int))"); }
		@Test public void test_17834() { testValid("((int & any) | {any})","({int} | (int | int))"); }
		@Test public void test_17835() { testValid("((int & any) | {any})","(!any | (int | int))"); }
		@Test public void test_17836() { testInvalid("((int & any) | {any})","(!int | (int | int))"); }
		@Test public void test_17837() { testInvalid("((int & any) | {any})","({int, any} | (int | int))"); }
		@Test public void test_17838() { testInvalid("((int & any) | {any})","({any, int} | (int | int))"); }
		@Test public void test_17839() { testInvalid("((int & any) | {any})","((any | int) | (int | int))"); }
		@Test public void test_17840() { testValid("((int & any) | {any})","((int | int) | (int | int))"); }
		@Test public void test_17841() { testInvalid("((int & any) | {any})","((any & any) | (int | int))"); }
		@Test public void test_17842() { testValid("((int & any) | {any})","((int & any) | (int | int))"); }
		@Test public void test_17843() { testValid("((int & any) | {any})","((int & int) | (int | int))"); }
		@Test public void test_17844() { testInvalid("((int & any) | {any})","(!any | (any & any))"); }
		@Test public void test_17845() { testInvalid("((int & any) | {any})","(!int | (any & any))"); }
		@Test public void test_17846() { testInvalid("((int & any) | {any})","({any, any} | (any & any))"); }
		@Test public void test_17847() { testInvalid("((int & any) | {any})","({int, any} | (any & any))"); }
		@Test public void test_17848() { testInvalid("((int & any) | {any})","({any, int} | (any & any))"); }
		@Test public void test_17849() { testInvalid("((int & any) | {any})","({int, int} | (any & any))"); }
		@Test public void test_17850() { testInvalid("((int & any) | {any})","((int | any) | (any & any))"); }
		@Test public void test_17851() { testInvalid("((int & any) | {any})","((int | int) | (any & any))"); }
		@Test public void test_17852() { testInvalid("((int & any) | {any})","((int & any) | (any & any))"); }
		@Test public void test_17853() { testInvalid("((int & any) | {any})","((any & int) | (any & any))"); }
		@Test public void test_17854() { testInvalid("((int & any) | {any})","((int & int) | (any & any))"); }
		@Test public void test_17855() { testValid("((int & any) | {any})","({any} | (int & any))"); }
		@Test public void test_17856() { testValid("((any & int) | {any})","{int}"); }
		@Test public void test_17857() { testInvalid("((any & int) | {any})","{any, any}"); }
		@Test public void test_17858() { testInvalid("((any & int) | {any})","{int, int}"); }
		@Test public void test_17859() { testInvalid("((any & int) | {any})","(any | int)"); }
		@Test public void test_17860() { testValid("((any & int) | {any})","(int & any)"); }
		@Test public void test_17861() { testValid("((any & int) | {any})","{{any}}"); }
		@Test public void test_17862() { testValid("((any & int) | {any})","{{int, any}}"); }
		@Test public void test_17863() { testValid("((any & int) | {any})","{{int, int}}"); }
		@Test public void test_17864() { testValid("((any & int) | {any})","{(any | int)}"); }
		@Test public void test_17865() { testInvalid("((any & int) | {any})","!{int, any}"); }
		@Test public void test_17866() { testInvalid("((any & int) | {any})","!{int, int}"); }
		@Test public void test_17867() { testValid("((any & int) | {any})","!(any | any)"); }
		@Test public void test_17868() { testValid("((any & int) | {any})","!(any & any)"); }
		@Test public void test_17869() { testInvalid("((any & int) | {any})","!(int & int)"); }
		@Test public void test_17870() { testInvalid("((any & int) | {any})","{{int}, {any}}"); }
		@Test public void test_17871() { testInvalid("((any & int) | {any})","{!int, {any}}"); }
		@Test public void test_17872() { testInvalid("((any & int) | {any})","{{int, int}, {any}}"); }
		@Test public void test_17873() { testInvalid("((any & int) | {any})","{(any | int), {any}}"); }
		@Test public void test_17874() { testInvalid("((any & int) | {any})","{!int, {int}}"); }
		@Test public void test_17875() { testInvalid("((any & int) | {any})","{{any, any}, {int}}"); }
		@Test public void test_17876() { testInvalid("((any & int) | {any})","{(any | any), {int}}"); }
		@Test public void test_17877() { testInvalid("((any & int) | {any})","{(any & any), {int}}"); }
		@Test public void test_17878() { testInvalid("((any & int) | {any})","{(any & int), {int}}"); }
		@Test public void test_17879() { testInvalid("((any & int) | {any})","{{any, any}, !int}"); }
		@Test public void test_17880() { testInvalid("((any & int) | {any})","{{any, int}, !int}"); }
		@Test public void test_17881() { testInvalid("((any & int) | {any})","{(any | any), !int}"); }
		@Test public void test_17882() { testInvalid("((any & int) | {any})","{(int | any), !int}"); }
		@Test public void test_17883() { testInvalid("((any & int) | {any})","{(any & any), !int}"); }
		@Test public void test_17884() { testInvalid("((any & int) | {any})","{(int & any), !int}"); }
		@Test public void test_17885() { testInvalid("((any & int) | {any})","{(int & int), !int}"); }
		@Test public void test_17886() { testInvalid("((any & int) | {any})","{{any}, {any, any}}"); }
		@Test public void test_17887() { testInvalid("((any & int) | {any})","{{int}, {any, any}}"); }
		@Test public void test_17888() { testInvalid("((any & int) | {any})","{{int, int}, {any, any}}"); }
		@Test public void test_17889() { testInvalid("((any & int) | {any})","{(any | any), {any, any}}"); }
		@Test public void test_17890() { testInvalid("((any & int) | {any})","{(any | int), {any, any}}"); }
		@Test public void test_17891() { testInvalid("((any & int) | {any})","{!int, {int, any}}"); }
		@Test public void test_17892() { testInvalid("((any & int) | {any})","{{int, any}, {int, any}}"); }
		@Test public void test_17893() { testInvalid("((any & int) | {any})","{{any, int}, {int, any}}"); }
		@Test public void test_17894() { testInvalid("((any & int) | {any})","{(any & int), {int, any}}"); }
		@Test public void test_17895() { testInvalid("((any & int) | {any})","{{any}, {any, int}}"); }
		@Test public void test_17896() { testInvalid("((any & int) | {any})","{{int, int}, {any, int}}"); }
		@Test public void test_17897() { testInvalid("((any & int) | {any})","{(int | int), {any, int}}"); }
		@Test public void test_17898() { testInvalid("((any & int) | {any})","{(any & int), {any, int}}"); }
		@Test public void test_17899() { testInvalid("((any & int) | {any})","{!int, {int, int}}"); }
		@Test public void test_17900() { testInvalid("((any & int) | {any})","{{int, int}, {int, int}}"); }
		@Test public void test_17901() { testInvalid("((any & int) | {any})","{(any | any), {int, int}}"); }
		@Test public void test_17902() { testInvalid("((any & int) | {any})","{(int | any), {int, int}}"); }
		@Test public void test_17903() { testInvalid("((any & int) | {any})","{(int & any), {int, int}}"); }
		@Test public void test_17904() { testInvalid("((any & int) | {any})","{{int}, (any | any)}"); }
		@Test public void test_17905() { testInvalid("((any & int) | {any})","{{int, any}, (any | any)}"); }
		@Test public void test_17906() { testInvalid("((any & int) | {any})","{{any, int}, (any | any)}"); }
		@Test public void test_17907() { testInvalid("((any & int) | {any})","{(any | any), (any | any)}"); }
		@Test public void test_17908() { testInvalid("((any & int) | {any})","{(int | any), (any | any)}"); }
		@Test public void test_17909() { testInvalid("((any & int) | {any})","{(int & int), (any | any)}"); }
		@Test public void test_17910() { testInvalid("((any & int) | {any})","{!int, (int | any)}"); }
		@Test public void test_17911() { testInvalid("((any & int) | {any})","{{int, int}, (int | any)}"); }
		@Test public void test_17912() { testInvalid("((any & int) | {any})","{(any | any), (int | any)}"); }
		@Test public void test_17913() { testInvalid("((any & int) | {any})","{(int | int), (int | any)}"); }
		@Test public void test_17914() { testInvalid("((any & int) | {any})","{{any}, (any | int)}"); }
		@Test public void test_17915() { testInvalid("((any & int) | {any})","{!int, (any | int)}"); }
		@Test public void test_17916() { testInvalid("((any & int) | {any})","{(any | any), (any | int)}"); }
		@Test public void test_17917() { testInvalid("((any & int) | {any})","{(any | int), (any | int)}"); }
		@Test public void test_17918() { testInvalid("((any & int) | {any})","{(any & int), (any | int)}"); }
		@Test public void test_17919() { testInvalid("((any & int) | {any})","{{int}, (int | int)}"); }
		@Test public void test_17920() { testInvalid("((any & int) | {any})","{{any, any}, (int | int)}"); }
		@Test public void test_17921() { testInvalid("((any & int) | {any})","{{int, int}, (int | int)}"); }
		@Test public void test_17922() { testInvalid("((any & int) | {any})","{{int}, (any & any)}"); }
		@Test public void test_17923() { testInvalid("((any & int) | {any})","{{int, any}, (any & any)}"); }
		@Test public void test_17924() { testInvalid("((any & int) | {any})","{{any, int}, (any & any)}"); }
		@Test public void test_17925() { testInvalid("((any & int) | {any})","{(int | any), (any & any)}"); }
		@Test public void test_17926() { testInvalid("((any & int) | {any})","{(any & any), (any & any)}"); }
		@Test public void test_17927() { testInvalid("((any & int) | {any})","{(int & any), (any & any)}"); }
		@Test public void test_17928() { testInvalid("((any & int) | {any})","{{any}, (int & any)}"); }
		@Test public void test_17929() { testInvalid("((any & int) | {any})","{{int}, (int & any)}"); }
		@Test public void test_17930() { testInvalid("((any & int) | {any})","{{any, any}, (int & any)}"); }
		@Test public void test_17931() { testInvalid("((any & int) | {any})","{{int, any}, (int & any)}"); }
		@Test public void test_17932() { testInvalid("((any & int) | {any})","{(any | int), (int & any)}"); }
		@Test public void test_17933() { testInvalid("((any & int) | {any})","{(any & any), (int & any)}"); }
		@Test public void test_17934() { testInvalid("((any & int) | {any})","{(int & any), (int & any)}"); }
		@Test public void test_17935() { testInvalid("((any & int) | {any})","{(int & int), (int & any)}"); }
		@Test public void test_17936() { testInvalid("((any & int) | {any})","{{int, any}, (any & int)}"); }
		@Test public void test_17937() { testInvalid("((any & int) | {any})","{(any & any), (any & int)}"); }
		@Test public void test_17938() { testInvalid("((any & int) | {any})","{{any, int}, (int & int)}"); }
		@Test public void test_17939() { testInvalid("((any & int) | {any})","{(int | int), (int & int)}"); }
		@Test public void test_17940() { testInvalid("((any & int) | {any})","{(any & any), (int & int)}"); }
		@Test public void test_17941() { testInvalid("((any & int) | {any})","{(any & int), (int & int)}"); }
		@Test public void test_17942() { testInvalid("((any & int) | {any})","{(int & int), (int & int)}"); }
		@Test public void test_17943() { testInvalid("((any & int) | {any})","(!int | {any})"); }
		@Test public void test_17944() { testInvalid("((any & int) | {any})","({any, any} | {any})"); }
		@Test public void test_17945() { testInvalid("((any & int) | {any})","((any | any) | {any})"); }
		@Test public void test_17946() { testInvalid("((any & int) | {any})","((int | any) | {any})"); }
		@Test public void test_17947() { testInvalid("((any & int) | {any})","((any & any) | {any})"); }
		@Test public void test_17948() { testValid("((any & int) | {any})","((int & any) | {any})"); }
		@Test public void test_17949() { testValid("((any & int) | {any})","((any & int) | {any})"); }
		@Test public void test_17950() { testValid("((any & int) | {any})","({int} | {int})"); }
		@Test public void test_17951() { testValid("((any & int) | {any})","(!any | {int})"); }
		@Test public void test_17952() { testInvalid("((any & int) | {any})","(!int | {int})"); }
		@Test public void test_17953() { testInvalid("((any & int) | {any})","({any, int} | {int})"); }
		@Test public void test_17954() { testValid("((any & int) | {any})","((int & any) | {int})"); }
		@Test public void test_17955() { testValid("((any & int) | {any})","((any & int) | {int})"); }
		@Test public void test_17956() { testValid("((any & int) | {any})","((int & int) | {int})"); }
		@Test public void test_17957() { testValid("((any & int) | {any})","({any} | !any)"); }
		@Test public void test_17958() { testValid("((any & int) | {any})","({int} | !any)"); }
		@Test public void test_17959() { testInvalid("((any & int) | {any})","({any, any} | !any)"); }
		@Test public void test_17960() { testInvalid("((any & int) | {any})","({int, int} | !any)"); }
		@Test public void test_17961() { testInvalid("((any & int) | {any})","((any | any) | !any)"); }
		@Test public void test_17962() { testInvalid("((any & int) | {any})","((int | any) | !any)"); }
		@Test public void test_17963() { testValid("((any & int) | {any})","((int | int) | !any)"); }
		@Test public void test_17964() { testValid("((any & int) | {any})","((int & int) | !any)"); }
		@Test public void test_17965() { testInvalid("((any & int) | {any})","(!int | !int)"); }
		@Test public void test_17966() { testInvalid("((any & int) | {any})","({any, any} | !int)"); }
		@Test public void test_17967() { testInvalid("((any & int) | {any})","({int, int} | !int)"); }
		@Test public void test_17968() { testInvalid("((any & int) | {any})","((int | any) | !int)"); }
		@Test public void test_17969() { testInvalid("((any & int) | {any})","((any | int) | !int)"); }
		@Test public void test_17970() { testInvalid("((any & int) | {any})","((any & int) | !int)"); }
		@Test public void test_17971() { testInvalid("((any & int) | {any})","((int & int) | !int)"); }
		@Test public void test_17972() { testInvalid("((any & int) | {any})","({int} | {any, any})"); }
		@Test public void test_17973() { testInvalid("((any & int) | {any})","(!any | {any, any})"); }
		@Test public void test_17974() { testInvalid("((any & int) | {any})","(!int | {any, any})"); }
		@Test public void test_17975() { testInvalid("((any & int) | {any})","({any, int} | {any, any})"); }
		@Test public void test_17976() { testInvalid("((any & int) | {any})","((int | any) | {any, any})"); }
		@Test public void test_17977() { testInvalid("((any & int) | {any})","((any & any) | {any, any})"); }
		@Test public void test_17978() { testInvalid("((any & int) | {any})","((any & int) | {any, any})"); }
		@Test public void test_17979() { testInvalid("((any & int) | {any})","(!int | {int, any})"); }
		@Test public void test_17980() { testInvalid("((any & int) | {any})","({any, int} | {int, any})"); }
		@Test public void test_17981() { testInvalid("((any & int) | {any})","((any | any) | {int, any})"); }
		@Test public void test_17982() { testInvalid("((any & int) | {any})","((int | any) | {int, any})"); }
		@Test public void test_17983() { testInvalid("((any & int) | {any})","((any | int) | {int, any})"); }
		@Test public void test_17984() { testInvalid("((any & int) | {any})","((int & any) | {int, any})"); }
		@Test public void test_17985() { testInvalid("((any & int) | {any})","({any} | {any, int})"); }
		@Test public void test_17986() { testInvalid("((any & int) | {any})","(!int | {any, int})"); }
		@Test public void test_17987() { testInvalid("((any & int) | {any})","({any, int} | {any, int})"); }
		@Test public void test_17988() { testInvalid("((any & int) | {any})","((any | any) | {any, int})"); }
		@Test public void test_17989() { testInvalid("((any & int) | {any})","((any | int) | {any, int})"); }
		@Test public void test_17990() { testInvalid("((any & int) | {any})","((int | int) | {any, int})"); }
		@Test public void test_17991() { testInvalid("((any & int) | {any})","((int & any) | {any, int})"); }
		@Test public void test_17992() { testInvalid("((any & int) | {any})","(!any | {int, int})"); }
		@Test public void test_17993() { testInvalid("((any & int) | {any})","(!int | {int, int})"); }
		@Test public void test_17994() { testInvalid("((any & int) | {any})","({any, any} | {int, int})"); }
		@Test public void test_17995() { testInvalid("((any & int) | {any})","({any, int} | {int, int})"); }
		@Test public void test_17996() { testInvalid("((any & int) | {any})","((any | any) | {int, int})"); }
		@Test public void test_17997() { testInvalid("((any & int) | {any})","((int | int) | {int, int})"); }
		@Test public void test_17998() { testInvalid("((any & int) | {any})","((int & any) | {int, int})"); }
		@Test public void test_17999() { testInvalid("((any & int) | {any})","((any & int) | {int, int})"); }
		@Test public void test_18000() { testInvalid("((any & int) | {any})","((int & int) | {int, int})"); }
		@Test public void test_18001() { testInvalid("((any & int) | {any})","({any} | (any | any))"); }
		@Test public void test_18002() { testInvalid("((any & int) | {any})","(!any | (any | any))"); }
		@Test public void test_18003() { testInvalid("((any & int) | {any})","({any, any} | (any | any))"); }
		@Test public void test_18004() { testInvalid("((any & int) | {any})","({any, int} | (any | any))"); }
		@Test public void test_18005() { testInvalid("((any & int) | {any})","({int, int} | (any | any))"); }
		@Test public void test_18006() { testInvalid("((any & int) | {any})","((int | any) | (any | any))"); }
		@Test public void test_18007() { testInvalid("((any & int) | {any})","((any | int) | (any | any))"); }
		@Test public void test_18008() { testInvalid("((any & int) | {any})","((any & int) | (any | any))"); }
		@Test public void test_18009() { testInvalid("((any & int) | {any})","((int & int) | (any | any))"); }
		@Test public void test_18010() { testInvalid("((any & int) | {any})","({any} | (int | any))"); }
		@Test public void test_18011() { testInvalid("((any & int) | {any})","(!int | (int | any))"); }
		@Test public void test_18012() { testInvalid("((any & int) | {any})","({int, any} | (int | any))"); }
		@Test public void test_18013() { testInvalid("((any & int) | {any})","({any, int} | (int | any))"); }
		@Test public void test_18014() { testInvalid("((any & int) | {any})","((int & any) | (int | any))"); }
		@Test public void test_18015() { testInvalid("((any & int) | {any})","((any & int) | (int | any))"); }
		@Test public void test_18016() { testInvalid("((any & int) | {any})","({any} | (any | int))"); }
		@Test public void test_18017() { testInvalid("((any & int) | {any})","({int} | (any | int))"); }
		@Test public void test_18018() { testInvalid("((any & int) | {any})","(!any | (any | int))"); }
		@Test public void test_18019() { testInvalid("((any & int) | {any})","(!int | (any | int))"); }
		@Test public void test_18020() { testInvalid("((any & int) | {any})","({any, int} | (any | int))"); }
		@Test public void test_18021() { testInvalid("((any & int) | {any})","({int, int} | (any | int))"); }
		@Test public void test_18022() { testInvalid("((any & int) | {any})","((int | any) | (any | int))"); }
		@Test public void test_18023() { testInvalid("((any & int) | {any})","((any | int) | (any | int))"); }
		@Test public void test_18024() { testInvalid("((any & int) | {any})","((int | int) | (any | int))"); }
		@Test public void test_18025() { testInvalid("((any & int) | {any})","((any & any) | (any | int))"); }
		@Test public void test_18026() { testValid("((any & int) | {any})","({int} | (int | int))"); }
		@Test public void test_18027() { testValid("((any & int) | {any})","(!any | (int | int))"); }
		@Test public void test_18028() { testInvalid("((any & int) | {any})","(!int | (int | int))"); }
		@Test public void test_18029() { testInvalid("((any & int) | {any})","({int, any} | (int | int))"); }
		@Test public void test_18030() { testInvalid("((any & int) | {any})","({any, int} | (int | int))"); }
		@Test public void test_18031() { testInvalid("((any & int) | {any})","((any | int) | (int | int))"); }
		@Test public void test_18032() { testValid("((any & int) | {any})","((int | int) | (int | int))"); }
		@Test public void test_18033() { testInvalid("((any & int) | {any})","((any & any) | (int | int))"); }
		@Test public void test_18034() { testValid("((any & int) | {any})","((int & any) | (int | int))"); }
		@Test public void test_18035() { testValid("((any & int) | {any})","((int & int) | (int | int))"); }
		@Test public void test_18036() { testInvalid("((any & int) | {any})","(!any | (any & any))"); }
		@Test public void test_18037() { testInvalid("((any & int) | {any})","(!int | (any & any))"); }
		@Test public void test_18038() { testInvalid("((any & int) | {any})","({any, any} | (any & any))"); }
		@Test public void test_18039() { testInvalid("((any & int) | {any})","({int, any} | (any & any))"); }
		@Test public void test_18040() { testInvalid("((any & int) | {any})","({any, int} | (any & any))"); }
		@Test public void test_18041() { testInvalid("((any & int) | {any})","({int, int} | (any & any))"); }
		@Test public void test_18042() { testInvalid("((any & int) | {any})","((int | any) | (any & any))"); }
		@Test public void test_18043() { testInvalid("((any & int) | {any})","((int | int) | (any & any))"); }
		@Test public void test_18044() { testInvalid("((any & int) | {any})","((int & any) | (any & any))"); }
		@Test public void test_18045() { testInvalid("((any & int) | {any})","((any & int) | (any & any))"); }
		@Test public void test_18046() { testInvalid("((any & int) | {any})","((int & int) | (any & any))"); }
		@Test public void test_18047() { testValid("((any & int) | {any})","({any} | (int & any))"); }
		@Test public void test_18048() { testValid("({int} | {int})","{int}"); }
		@Test public void test_18049() { testInvalid("({int} | {int})","{any, any}"); }
		@Test public void test_18050() { testInvalid("({int} | {int})","{int, int}"); }
		@Test public void test_18051() { testInvalid("({int} | {int})","(any | int)"); }
		@Test public void test_18052() { testInvalid("({int} | {int})","(int & any)"); }
		@Test public void test_18053() { testInvalid("({int} | {int})","{{any}}"); }
		@Test public void test_18054() { testInvalid("({int} | {int})","{{int, any}}"); }
		@Test public void test_18055() { testInvalid("({int} | {int})","{{int, int}}"); }
		@Test public void test_18056() { testInvalid("({int} | {int})","{(any | int)}"); }
		@Test public void test_18057() { testInvalid("({int} | {int})","!{int, any}"); }
		@Test public void test_18058() { testInvalid("({int} | {int})","!{int, int}"); }
		@Test public void test_18059() { testValid("({int} | {int})","!(any | any)"); }
		@Test public void test_18060() { testValid("({int} | {int})","!(any & any)"); }
		@Test public void test_18061() { testInvalid("({int} | {int})","!(int & int)"); }
		@Test public void test_18062() { testInvalid("({int} | {int})","{{int}, {any}}"); }
		@Test public void test_18063() { testInvalid("({int} | {int})","{!int, {any}}"); }
		@Test public void test_18064() { testInvalid("({int} | {int})","{{int, int}, {any}}"); }
		@Test public void test_18065() { testInvalid("({int} | {int})","{(any | int), {any}}"); }
		@Test public void test_18066() { testInvalid("({int} | {int})","{!int, {int}}"); }
		@Test public void test_18067() { testInvalid("({int} | {int})","{{any, any}, {int}}"); }
		@Test public void test_18068() { testInvalid("({int} | {int})","{(any | any), {int}}"); }
		@Test public void test_18069() { testInvalid("({int} | {int})","{(any & any), {int}}"); }
		@Test public void test_18070() { testInvalid("({int} | {int})","{(any & int), {int}}"); }
		@Test public void test_18071() { testInvalid("({int} | {int})","{{any, any}, !int}"); }
		@Test public void test_18072() { testInvalid("({int} | {int})","{{any, int}, !int}"); }
		@Test public void test_18073() { testInvalid("({int} | {int})","{(any | any), !int}"); }
		@Test public void test_18074() { testInvalid("({int} | {int})","{(int | any), !int}"); }
		@Test public void test_18075() { testInvalid("({int} | {int})","{(any & any), !int}"); }
		@Test public void test_18076() { testInvalid("({int} | {int})","{(int & any), !int}"); }
		@Test public void test_18077() { testInvalid("({int} | {int})","{(int & int), !int}"); }
		@Test public void test_18078() { testInvalid("({int} | {int})","{{any}, {any, any}}"); }
		@Test public void test_18079() { testInvalid("({int} | {int})","{{int}, {any, any}}"); }
		@Test public void test_18080() { testInvalid("({int} | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_18081() { testInvalid("({int} | {int})","{(any | any), {any, any}}"); }
		@Test public void test_18082() { testInvalid("({int} | {int})","{(any | int), {any, any}}"); }
		@Test public void test_18083() { testInvalid("({int} | {int})","{!int, {int, any}}"); }
		@Test public void test_18084() { testInvalid("({int} | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_18085() { testInvalid("({int} | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_18086() { testInvalid("({int} | {int})","{(any & int), {int, any}}"); }
		@Test public void test_18087() { testInvalid("({int} | {int})","{{any}, {any, int}}"); }
		@Test public void test_18088() { testInvalid("({int} | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_18089() { testInvalid("({int} | {int})","{(int | int), {any, int}}"); }
		@Test public void test_18090() { testInvalid("({int} | {int})","{(any & int), {any, int}}"); }
		@Test public void test_18091() { testInvalid("({int} | {int})","{!int, {int, int}}"); }
		@Test public void test_18092() { testInvalid("({int} | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_18093() { testInvalid("({int} | {int})","{(any | any), {int, int}}"); }
		@Test public void test_18094() { testInvalid("({int} | {int})","{(int | any), {int, int}}"); }
		@Test public void test_18095() { testInvalid("({int} | {int})","{(int & any), {int, int}}"); }
		@Test public void test_18096() { testInvalid("({int} | {int})","{{int}, (any | any)}"); }
		@Test public void test_18097() { testInvalid("({int} | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_18098() { testInvalid("({int} | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_18099() { testInvalid("({int} | {int})","{(any | any), (any | any)}"); }
		@Test public void test_18100() { testInvalid("({int} | {int})","{(int | any), (any | any)}"); }
		@Test public void test_18101() { testInvalid("({int} | {int})","{(int & int), (any | any)}"); }
		@Test public void test_18102() { testInvalid("({int} | {int})","{!int, (int | any)}"); }
		@Test public void test_18103() { testInvalid("({int} | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_18104() { testInvalid("({int} | {int})","{(any | any), (int | any)}"); }
		@Test public void test_18105() { testInvalid("({int} | {int})","{(int | int), (int | any)}"); }
		@Test public void test_18106() { testInvalid("({int} | {int})","{{any}, (any | int)}"); }
		@Test public void test_18107() { testInvalid("({int} | {int})","{!int, (any | int)}"); }
		@Test public void test_18108() { testInvalid("({int} | {int})","{(any | any), (any | int)}"); }
		@Test public void test_18109() { testInvalid("({int} | {int})","{(any | int), (any | int)}"); }
		@Test public void test_18110() { testInvalid("({int} | {int})","{(any & int), (any | int)}"); }
		@Test public void test_18111() { testInvalid("({int} | {int})","{{int}, (int | int)}"); }
		@Test public void test_18112() { testInvalid("({int} | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_18113() { testInvalid("({int} | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_18114() { testInvalid("({int} | {int})","{{int}, (any & any)}"); }
		@Test public void test_18115() { testInvalid("({int} | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_18116() { testInvalid("({int} | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_18117() { testInvalid("({int} | {int})","{(int | any), (any & any)}"); }
		@Test public void test_18118() { testInvalid("({int} | {int})","{(any & any), (any & any)}"); }
		@Test public void test_18119() { testInvalid("({int} | {int})","{(int & any), (any & any)}"); }
		@Test public void test_18120() { testInvalid("({int} | {int})","{{any}, (int & any)}"); }
		@Test public void test_18121() { testInvalid("({int} | {int})","{{int}, (int & any)}"); }
		@Test public void test_18122() { testInvalid("({int} | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_18123() { testInvalid("({int} | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_18124() { testInvalid("({int} | {int})","{(any | int), (int & any)}"); }
		@Test public void test_18125() { testInvalid("({int} | {int})","{(any & any), (int & any)}"); }
		@Test public void test_18126() { testInvalid("({int} | {int})","{(int & any), (int & any)}"); }
		@Test public void test_18127() { testInvalid("({int} | {int})","{(int & int), (int & any)}"); }
		@Test public void test_18128() { testInvalid("({int} | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_18129() { testInvalid("({int} | {int})","{(any & any), (any & int)}"); }
		@Test public void test_18130() { testInvalid("({int} | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_18131() { testInvalid("({int} | {int})","{(int | int), (int & int)}"); }
		@Test public void test_18132() { testInvalid("({int} | {int})","{(any & any), (int & int)}"); }
		@Test public void test_18133() { testInvalid("({int} | {int})","{(any & int), (int & int)}"); }
		@Test public void test_18134() { testInvalid("({int} | {int})","{(int & int), (int & int)}"); }
		@Test public void test_18135() { testInvalid("({int} | {int})","(!int | {any})"); }
		@Test public void test_18136() { testInvalid("({int} | {int})","({any, any} | {any})"); }
		@Test public void test_18137() { testInvalid("({int} | {int})","((any | any) | {any})"); }
		@Test public void test_18138() { testInvalid("({int} | {int})","((int | any) | {any})"); }
		@Test public void test_18139() { testInvalid("({int} | {int})","((any & any) | {any})"); }
		@Test public void test_18140() { testInvalid("({int} | {int})","((int & any) | {any})"); }
		@Test public void test_18141() { testInvalid("({int} | {int})","((any & int) | {any})"); }
		@Test public void test_18142() { testValid("({int} | {int})","({int} | {int})"); }
		@Test public void test_18143() { testValid("({int} | {int})","(!any | {int})"); }
		@Test public void test_18144() { testInvalid("({int} | {int})","(!int | {int})"); }
		@Test public void test_18145() { testInvalid("({int} | {int})","({any, int} | {int})"); }
		@Test public void test_18146() { testInvalid("({int} | {int})","((int & any) | {int})"); }
		@Test public void test_18147() { testInvalid("({int} | {int})","((any & int) | {int})"); }
		@Test public void test_18148() { testInvalid("({int} | {int})","((int & int) | {int})"); }
		@Test public void test_18149() { testInvalid("({int} | {int})","({any} | !any)"); }
		@Test public void test_18150() { testValid("({int} | {int})","({int} | !any)"); }
		@Test public void test_18151() { testInvalid("({int} | {int})","({any, any} | !any)"); }
		@Test public void test_18152() { testInvalid("({int} | {int})","({int, int} | !any)"); }
		@Test public void test_18153() { testInvalid("({int} | {int})","((any | any) | !any)"); }
		@Test public void test_18154() { testInvalid("({int} | {int})","((int | any) | !any)"); }
		@Test public void test_18155() { testInvalid("({int} | {int})","((int | int) | !any)"); }
		@Test public void test_18156() { testInvalid("({int} | {int})","((int & int) | !any)"); }
		@Test public void test_18157() { testInvalid("({int} | {int})","(!int | !int)"); }
		@Test public void test_18158() { testInvalid("({int} | {int})","({any, any} | !int)"); }
		@Test public void test_18159() { testInvalid("({int} | {int})","({int, int} | !int)"); }
		@Test public void test_18160() { testInvalid("({int} | {int})","((int | any) | !int)"); }
		@Test public void test_18161() { testInvalid("({int} | {int})","((any | int) | !int)"); }
		@Test public void test_18162() { testInvalid("({int} | {int})","((any & int) | !int)"); }
		@Test public void test_18163() { testInvalid("({int} | {int})","((int & int) | !int)"); }
		@Test public void test_18164() { testInvalid("({int} | {int})","({int} | {any, any})"); }
		@Test public void test_18165() { testInvalid("({int} | {int})","(!any | {any, any})"); }
		@Test public void test_18166() { testInvalid("({int} | {int})","(!int | {any, any})"); }
		@Test public void test_18167() { testInvalid("({int} | {int})","({any, int} | {any, any})"); }
		@Test public void test_18168() { testInvalid("({int} | {int})","((int | any) | {any, any})"); }
		@Test public void test_18169() { testInvalid("({int} | {int})","((any & any) | {any, any})"); }
		@Test public void test_18170() { testInvalid("({int} | {int})","((any & int) | {any, any})"); }
		@Test public void test_18171() { testInvalid("({int} | {int})","(!int | {int, any})"); }
		@Test public void test_18172() { testInvalid("({int} | {int})","({any, int} | {int, any})"); }
		@Test public void test_18173() { testInvalid("({int} | {int})","((any | any) | {int, any})"); }
		@Test public void test_18174() { testInvalid("({int} | {int})","((int | any) | {int, any})"); }
		@Test public void test_18175() { testInvalid("({int} | {int})","((any | int) | {int, any})"); }
		@Test public void test_18176() { testInvalid("({int} | {int})","((int & any) | {int, any})"); }
		@Test public void test_18177() { testInvalid("({int} | {int})","({any} | {any, int})"); }
		@Test public void test_18178() { testInvalid("({int} | {int})","(!int | {any, int})"); }
		@Test public void test_18179() { testInvalid("({int} | {int})","({any, int} | {any, int})"); }
		@Test public void test_18180() { testInvalid("({int} | {int})","((any | any) | {any, int})"); }
		@Test public void test_18181() { testInvalid("({int} | {int})","((any | int) | {any, int})"); }
		@Test public void test_18182() { testInvalid("({int} | {int})","((int | int) | {any, int})"); }
		@Test public void test_18183() { testInvalid("({int} | {int})","((int & any) | {any, int})"); }
		@Test public void test_18184() { testInvalid("({int} | {int})","(!any | {int, int})"); }
		@Test public void test_18185() { testInvalid("({int} | {int})","(!int | {int, int})"); }
		@Test public void test_18186() { testInvalid("({int} | {int})","({any, any} | {int, int})"); }
		@Test public void test_18187() { testInvalid("({int} | {int})","({any, int} | {int, int})"); }
		@Test public void test_18188() { testInvalid("({int} | {int})","((any | any) | {int, int})"); }
		@Test public void test_18189() { testInvalid("({int} | {int})","((int | int) | {int, int})"); }
		@Test public void test_18190() { testInvalid("({int} | {int})","((int & any) | {int, int})"); }
		@Test public void test_18191() { testInvalid("({int} | {int})","((any & int) | {int, int})"); }
		@Test public void test_18192() { testInvalid("({int} | {int})","((int & int) | {int, int})"); }
		@Test public void test_18193() { testInvalid("({int} | {int})","({any} | (any | any))"); }
		@Test public void test_18194() { testInvalid("({int} | {int})","(!any | (any | any))"); }
		@Test public void test_18195() { testInvalid("({int} | {int})","({any, any} | (any | any))"); }
		@Test public void test_18196() { testInvalid("({int} | {int})","({any, int} | (any | any))"); }
		@Test public void test_18197() { testInvalid("({int} | {int})","({int, int} | (any | any))"); }
		@Test public void test_18198() { testInvalid("({int} | {int})","((int | any) | (any | any))"); }
		@Test public void test_18199() { testInvalid("({int} | {int})","((any | int) | (any | any))"); }
		@Test public void test_18200() { testInvalid("({int} | {int})","((any & int) | (any | any))"); }
		@Test public void test_18201() { testInvalid("({int} | {int})","((int & int) | (any | any))"); }
		@Test public void test_18202() { testInvalid("({int} | {int})","({any} | (int | any))"); }
		@Test public void test_18203() { testInvalid("({int} | {int})","(!int | (int | any))"); }
		@Test public void test_18204() { testInvalid("({int} | {int})","({int, any} | (int | any))"); }
		@Test public void test_18205() { testInvalid("({int} | {int})","({any, int} | (int | any))"); }
		@Test public void test_18206() { testInvalid("({int} | {int})","((int & any) | (int | any))"); }
		@Test public void test_18207() { testInvalid("({int} | {int})","((any & int) | (int | any))"); }
		@Test public void test_18208() { testInvalid("({int} | {int})","({any} | (any | int))"); }
		@Test public void test_18209() { testInvalid("({int} | {int})","({int} | (any | int))"); }
		@Test public void test_18210() { testInvalid("({int} | {int})","(!any | (any | int))"); }
		@Test public void test_18211() { testInvalid("({int} | {int})","(!int | (any | int))"); }
		@Test public void test_18212() { testInvalid("({int} | {int})","({any, int} | (any | int))"); }
		@Test public void test_18213() { testInvalid("({int} | {int})","({int, int} | (any | int))"); }
		@Test public void test_18214() { testInvalid("({int} | {int})","((int | any) | (any | int))"); }
		@Test public void test_18215() { testInvalid("({int} | {int})","((any | int) | (any | int))"); }
		@Test public void test_18216() { testInvalid("({int} | {int})","((int | int) | (any | int))"); }
		@Test public void test_18217() { testInvalid("({int} | {int})","((any & any) | (any | int))"); }
		@Test public void test_18218() { testInvalid("({int} | {int})","({int} | (int | int))"); }
		@Test public void test_18219() { testInvalid("({int} | {int})","(!any | (int | int))"); }
		@Test public void test_18220() { testInvalid("({int} | {int})","(!int | (int | int))"); }
		@Test public void test_18221() { testInvalid("({int} | {int})","({int, any} | (int | int))"); }
		@Test public void test_18222() { testInvalid("({int} | {int})","({any, int} | (int | int))"); }
		@Test public void test_18223() { testInvalid("({int} | {int})","((any | int) | (int | int))"); }
		@Test public void test_18224() { testInvalid("({int} | {int})","((int | int) | (int | int))"); }
		@Test public void test_18225() { testInvalid("({int} | {int})","((any & any) | (int | int))"); }
		@Test public void test_18226() { testInvalid("({int} | {int})","((int & any) | (int | int))"); }
		@Test public void test_18227() { testInvalid("({int} | {int})","((int & int) | (int | int))"); }
		@Test public void test_18228() { testInvalid("({int} | {int})","(!any | (any & any))"); }
		@Test public void test_18229() { testInvalid("({int} | {int})","(!int | (any & any))"); }
		@Test public void test_18230() { testInvalid("({int} | {int})","({any, any} | (any & any))"); }
		@Test public void test_18231() { testInvalid("({int} | {int})","({int, any} | (any & any))"); }
		@Test public void test_18232() { testInvalid("({int} | {int})","({any, int} | (any & any))"); }
		@Test public void test_18233() { testInvalid("({int} | {int})","({int, int} | (any & any))"); }
		@Test public void test_18234() { testInvalid("({int} | {int})","((int | any) | (any & any))"); }
		@Test public void test_18235() { testInvalid("({int} | {int})","((int | int) | (any & any))"); }
		@Test public void test_18236() { testInvalid("({int} | {int})","((int & any) | (any & any))"); }
		@Test public void test_18237() { testInvalid("({int} | {int})","((any & int) | (any & any))"); }
		@Test public void test_18238() { testInvalid("({int} | {int})","((int & int) | (any & any))"); }
		@Test public void test_18239() { testInvalid("({int} | {int})","({any} | (int & any))"); }
		@Test public void test_18240() { testValid("(!any | {int})","{int}"); }
		@Test public void test_18241() { testInvalid("(!any | {int})","{any, any}"); }
		@Test public void test_18242() { testInvalid("(!any | {int})","{int, int}"); }
		@Test public void test_18243() { testInvalid("(!any | {int})","(any | int)"); }
		@Test public void test_18244() { testInvalid("(!any | {int})","(int & any)"); }
		@Test public void test_18245() { testInvalid("(!any | {int})","{{any}}"); }
		@Test public void test_18246() { testInvalid("(!any | {int})","{{int, any}}"); }
		@Test public void test_18247() { testInvalid("(!any | {int})","{{int, int}}"); }
		@Test public void test_18248() { testInvalid("(!any | {int})","{(any | int)}"); }
		@Test public void test_18249() { testInvalid("(!any | {int})","!{int, any}"); }
		@Test public void test_18250() { testInvalid("(!any | {int})","!{int, int}"); }
		@Test public void test_18251() { testValid("(!any | {int})","!(any | any)"); }
		@Test public void test_18252() { testValid("(!any | {int})","!(any & any)"); }
		@Test public void test_18253() { testInvalid("(!any | {int})","!(int & int)"); }
		@Test public void test_18254() { testInvalid("(!any | {int})","{{int}, {any}}"); }
		@Test public void test_18255() { testInvalid("(!any | {int})","{!int, {any}}"); }
		@Test public void test_18256() { testInvalid("(!any | {int})","{{int, int}, {any}}"); }
		@Test public void test_18257() { testInvalid("(!any | {int})","{(any | int), {any}}"); }
		@Test public void test_18258() { testInvalid("(!any | {int})","{!int, {int}}"); }
		@Test public void test_18259() { testInvalid("(!any | {int})","{{any, any}, {int}}"); }
		@Test public void test_18260() { testInvalid("(!any | {int})","{(any | any), {int}}"); }
		@Test public void test_18261() { testInvalid("(!any | {int})","{(any & any), {int}}"); }
		@Test public void test_18262() { testInvalid("(!any | {int})","{(any & int), {int}}"); }
		@Test public void test_18263() { testInvalid("(!any | {int})","{{any, any}, !int}"); }
		@Test public void test_18264() { testInvalid("(!any | {int})","{{any, int}, !int}"); }
		@Test public void test_18265() { testInvalid("(!any | {int})","{(any | any), !int}"); }
		@Test public void test_18266() { testInvalid("(!any | {int})","{(int | any), !int}"); }
		@Test public void test_18267() { testInvalid("(!any | {int})","{(any & any), !int}"); }
		@Test public void test_18268() { testInvalid("(!any | {int})","{(int & any), !int}"); }
		@Test public void test_18269() { testInvalid("(!any | {int})","{(int & int), !int}"); }
		@Test public void test_18270() { testInvalid("(!any | {int})","{{any}, {any, any}}"); }
		@Test public void test_18271() { testInvalid("(!any | {int})","{{int}, {any, any}}"); }
		@Test public void test_18272() { testInvalid("(!any | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_18273() { testInvalid("(!any | {int})","{(any | any), {any, any}}"); }
		@Test public void test_18274() { testInvalid("(!any | {int})","{(any | int), {any, any}}"); }
		@Test public void test_18275() { testInvalid("(!any | {int})","{!int, {int, any}}"); }
		@Test public void test_18276() { testInvalid("(!any | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_18277() { testInvalid("(!any | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_18278() { testInvalid("(!any | {int})","{(any & int), {int, any}}"); }
		@Test public void test_18279() { testInvalid("(!any | {int})","{{any}, {any, int}}"); }
		@Test public void test_18280() { testInvalid("(!any | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_18281() { testInvalid("(!any | {int})","{(int | int), {any, int}}"); }
		@Test public void test_18282() { testInvalid("(!any | {int})","{(any & int), {any, int}}"); }
		@Test public void test_18283() { testInvalid("(!any | {int})","{!int, {int, int}}"); }
		@Test public void test_18284() { testInvalid("(!any | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_18285() { testInvalid("(!any | {int})","{(any | any), {int, int}}"); }
		@Test public void test_18286() { testInvalid("(!any | {int})","{(int | any), {int, int}}"); }
		@Test public void test_18287() { testInvalid("(!any | {int})","{(int & any), {int, int}}"); }
		@Test public void test_18288() { testInvalid("(!any | {int})","{{int}, (any | any)}"); }
		@Test public void test_18289() { testInvalid("(!any | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_18290() { testInvalid("(!any | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_18291() { testInvalid("(!any | {int})","{(any | any), (any | any)}"); }
		@Test public void test_18292() { testInvalid("(!any | {int})","{(int | any), (any | any)}"); }
		@Test public void test_18293() { testInvalid("(!any | {int})","{(int & int), (any | any)}"); }
		@Test public void test_18294() { testInvalid("(!any | {int})","{!int, (int | any)}"); }
		@Test public void test_18295() { testInvalid("(!any | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_18296() { testInvalid("(!any | {int})","{(any | any), (int | any)}"); }
		@Test public void test_18297() { testInvalid("(!any | {int})","{(int | int), (int | any)}"); }
		@Test public void test_18298() { testInvalid("(!any | {int})","{{any}, (any | int)}"); }
		@Test public void test_18299() { testInvalid("(!any | {int})","{!int, (any | int)}"); }
		@Test public void test_18300() { testInvalid("(!any | {int})","{(any | any), (any | int)}"); }
		@Test public void test_18301() { testInvalid("(!any | {int})","{(any | int), (any | int)}"); }
		@Test public void test_18302() { testInvalid("(!any | {int})","{(any & int), (any | int)}"); }
		@Test public void test_18303() { testInvalid("(!any | {int})","{{int}, (int | int)}"); }
		@Test public void test_18304() { testInvalid("(!any | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_18305() { testInvalid("(!any | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_18306() { testInvalid("(!any | {int})","{{int}, (any & any)}"); }
		@Test public void test_18307() { testInvalid("(!any | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_18308() { testInvalid("(!any | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_18309() { testInvalid("(!any | {int})","{(int | any), (any & any)}"); }
		@Test public void test_18310() { testInvalid("(!any | {int})","{(any & any), (any & any)}"); }
		@Test public void test_18311() { testInvalid("(!any | {int})","{(int & any), (any & any)}"); }
		@Test public void test_18312() { testInvalid("(!any | {int})","{{any}, (int & any)}"); }
		@Test public void test_18313() { testInvalid("(!any | {int})","{{int}, (int & any)}"); }
		@Test public void test_18314() { testInvalid("(!any | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_18315() { testInvalid("(!any | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_18316() { testInvalid("(!any | {int})","{(any | int), (int & any)}"); }
		@Test public void test_18317() { testInvalid("(!any | {int})","{(any & any), (int & any)}"); }
		@Test public void test_18318() { testInvalid("(!any | {int})","{(int & any), (int & any)}"); }
		@Test public void test_18319() { testInvalid("(!any | {int})","{(int & int), (int & any)}"); }
		@Test public void test_18320() { testInvalid("(!any | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_18321() { testInvalid("(!any | {int})","{(any & any), (any & int)}"); }
		@Test public void test_18322() { testInvalid("(!any | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_18323() { testInvalid("(!any | {int})","{(int | int), (int & int)}"); }
		@Test public void test_18324() { testInvalid("(!any | {int})","{(any & any), (int & int)}"); }
		@Test public void test_18325() { testInvalid("(!any | {int})","{(any & int), (int & int)}"); }
		@Test public void test_18326() { testInvalid("(!any | {int})","{(int & int), (int & int)}"); }
		@Test public void test_18327() { testInvalid("(!any | {int})","(!int | {any})"); }
		@Test public void test_18328() { testInvalid("(!any | {int})","({any, any} | {any})"); }
		@Test public void test_18329() { testInvalid("(!any | {int})","((any | any) | {any})"); }
		@Test public void test_18330() { testInvalid("(!any | {int})","((int | any) | {any})"); }
		@Test public void test_18331() { testInvalid("(!any | {int})","((any & any) | {any})"); }
		@Test public void test_18332() { testInvalid("(!any | {int})","((int & any) | {any})"); }
		@Test public void test_18333() { testInvalid("(!any | {int})","((any & int) | {any})"); }
		@Test public void test_18334() { testValid("(!any | {int})","({int} | {int})"); }
		@Test public void test_18335() { testValid("(!any | {int})","(!any | {int})"); }
		@Test public void test_18336() { testInvalid("(!any | {int})","(!int | {int})"); }
		@Test public void test_18337() { testInvalid("(!any | {int})","({any, int} | {int})"); }
		@Test public void test_18338() { testInvalid("(!any | {int})","((int & any) | {int})"); }
		@Test public void test_18339() { testInvalid("(!any | {int})","((any & int) | {int})"); }
		@Test public void test_18340() { testInvalid("(!any | {int})","((int & int) | {int})"); }
		@Test public void test_18341() { testInvalid("(!any | {int})","({any} | !any)"); }
		@Test public void test_18342() { testValid("(!any | {int})","({int} | !any)"); }
		@Test public void test_18343() { testInvalid("(!any | {int})","({any, any} | !any)"); }
		@Test public void test_18344() { testInvalid("(!any | {int})","({int, int} | !any)"); }
		@Test public void test_18345() { testInvalid("(!any | {int})","((any | any) | !any)"); }
		@Test public void test_18346() { testInvalid("(!any | {int})","((int | any) | !any)"); }
		@Test public void test_18347() { testInvalid("(!any | {int})","((int | int) | !any)"); }
		@Test public void test_18348() { testInvalid("(!any | {int})","((int & int) | !any)"); }
		@Test public void test_18349() { testInvalid("(!any | {int})","(!int | !int)"); }
		@Test public void test_18350() { testInvalid("(!any | {int})","({any, any} | !int)"); }
		@Test public void test_18351() { testInvalid("(!any | {int})","({int, int} | !int)"); }
		@Test public void test_18352() { testInvalid("(!any | {int})","((int | any) | !int)"); }
		@Test public void test_18353() { testInvalid("(!any | {int})","((any | int) | !int)"); }
		@Test public void test_18354() { testInvalid("(!any | {int})","((any & int) | !int)"); }
		@Test public void test_18355() { testInvalid("(!any | {int})","((int & int) | !int)"); }
		@Test public void test_18356() { testInvalid("(!any | {int})","({int} | {any, any})"); }
		@Test public void test_18357() { testInvalid("(!any | {int})","(!any | {any, any})"); }
		@Test public void test_18358() { testInvalid("(!any | {int})","(!int | {any, any})"); }
		@Test public void test_18359() { testInvalid("(!any | {int})","({any, int} | {any, any})"); }
		@Test public void test_18360() { testInvalid("(!any | {int})","((int | any) | {any, any})"); }
		@Test public void test_18361() { testInvalid("(!any | {int})","((any & any) | {any, any})"); }
		@Test public void test_18362() { testInvalid("(!any | {int})","((any & int) | {any, any})"); }
		@Test public void test_18363() { testInvalid("(!any | {int})","(!int | {int, any})"); }
		@Test public void test_18364() { testInvalid("(!any | {int})","({any, int} | {int, any})"); }
		@Test public void test_18365() { testInvalid("(!any | {int})","((any | any) | {int, any})"); }
		@Test public void test_18366() { testInvalid("(!any | {int})","((int | any) | {int, any})"); }
		@Test public void test_18367() { testInvalid("(!any | {int})","((any | int) | {int, any})"); }
		@Test public void test_18368() { testInvalid("(!any | {int})","((int & any) | {int, any})"); }
		@Test public void test_18369() { testInvalid("(!any | {int})","({any} | {any, int})"); }
		@Test public void test_18370() { testInvalid("(!any | {int})","(!int | {any, int})"); }
		@Test public void test_18371() { testInvalid("(!any | {int})","({any, int} | {any, int})"); }
		@Test public void test_18372() { testInvalid("(!any | {int})","((any | any) | {any, int})"); }
		@Test public void test_18373() { testInvalid("(!any | {int})","((any | int) | {any, int})"); }
		@Test public void test_18374() { testInvalid("(!any | {int})","((int | int) | {any, int})"); }
		@Test public void test_18375() { testInvalid("(!any | {int})","((int & any) | {any, int})"); }
		@Test public void test_18376() { testInvalid("(!any | {int})","(!any | {int, int})"); }
		@Test public void test_18377() { testInvalid("(!any | {int})","(!int | {int, int})"); }
		@Test public void test_18378() { testInvalid("(!any | {int})","({any, any} | {int, int})"); }
		@Test public void test_18379() { testInvalid("(!any | {int})","({any, int} | {int, int})"); }
		@Test public void test_18380() { testInvalid("(!any | {int})","((any | any) | {int, int})"); }
		@Test public void test_18381() { testInvalid("(!any | {int})","((int | int) | {int, int})"); }
		@Test public void test_18382() { testInvalid("(!any | {int})","((int & any) | {int, int})"); }
		@Test public void test_18383() { testInvalid("(!any | {int})","((any & int) | {int, int})"); }
		@Test public void test_18384() { testInvalid("(!any | {int})","((int & int) | {int, int})"); }
		@Test public void test_18385() { testInvalid("(!any | {int})","({any} | (any | any))"); }
		@Test public void test_18386() { testInvalid("(!any | {int})","(!any | (any | any))"); }
		@Test public void test_18387() { testInvalid("(!any | {int})","({any, any} | (any | any))"); }
		@Test public void test_18388() { testInvalid("(!any | {int})","({any, int} | (any | any))"); }
		@Test public void test_18389() { testInvalid("(!any | {int})","({int, int} | (any | any))"); }
		@Test public void test_18390() { testInvalid("(!any | {int})","((int | any) | (any | any))"); }
		@Test public void test_18391() { testInvalid("(!any | {int})","((any | int) | (any | any))"); }
		@Test public void test_18392() { testInvalid("(!any | {int})","((any & int) | (any | any))"); }
		@Test public void test_18393() { testInvalid("(!any | {int})","((int & int) | (any | any))"); }
		@Test public void test_18394() { testInvalid("(!any | {int})","({any} | (int | any))"); }
		@Test public void test_18395() { testInvalid("(!any | {int})","(!int | (int | any))"); }
		@Test public void test_18396() { testInvalid("(!any | {int})","({int, any} | (int | any))"); }
		@Test public void test_18397() { testInvalid("(!any | {int})","({any, int} | (int | any))"); }
		@Test public void test_18398() { testInvalid("(!any | {int})","((int & any) | (int | any))"); }
		@Test public void test_18399() { testInvalid("(!any | {int})","((any & int) | (int | any))"); }
		@Test public void test_18400() { testInvalid("(!any | {int})","({any} | (any | int))"); }
		@Test public void test_18401() { testInvalid("(!any | {int})","({int} | (any | int))"); }
		@Test public void test_18402() { testInvalid("(!any | {int})","(!any | (any | int))"); }
		@Test public void test_18403() { testInvalid("(!any | {int})","(!int | (any | int))"); }
		@Test public void test_18404() { testInvalid("(!any | {int})","({any, int} | (any | int))"); }
		@Test public void test_18405() { testInvalid("(!any | {int})","({int, int} | (any | int))"); }
		@Test public void test_18406() { testInvalid("(!any | {int})","((int | any) | (any | int))"); }
		@Test public void test_18407() { testInvalid("(!any | {int})","((any | int) | (any | int))"); }
		@Test public void test_18408() { testInvalid("(!any | {int})","((int | int) | (any | int))"); }
		@Test public void test_18409() { testInvalid("(!any | {int})","((any & any) | (any | int))"); }
		@Test public void test_18410() { testInvalid("(!any | {int})","({int} | (int | int))"); }
		@Test public void test_18411() { testInvalid("(!any | {int})","(!any | (int | int))"); }
		@Test public void test_18412() { testInvalid("(!any | {int})","(!int | (int | int))"); }
		@Test public void test_18413() { testInvalid("(!any | {int})","({int, any} | (int | int))"); }
		@Test public void test_18414() { testInvalid("(!any | {int})","({any, int} | (int | int))"); }
		@Test public void test_18415() { testInvalid("(!any | {int})","((any | int) | (int | int))"); }
		@Test public void test_18416() { testInvalid("(!any | {int})","((int | int) | (int | int))"); }
		@Test public void test_18417() { testInvalid("(!any | {int})","((any & any) | (int | int))"); }
		@Test public void test_18418() { testInvalid("(!any | {int})","((int & any) | (int | int))"); }
		@Test public void test_18419() { testInvalid("(!any | {int})","((int & int) | (int | int))"); }
		@Test public void test_18420() { testInvalid("(!any | {int})","(!any | (any & any))"); }
		@Test public void test_18421() { testInvalid("(!any | {int})","(!int | (any & any))"); }
		@Test public void test_18422() { testInvalid("(!any | {int})","({any, any} | (any & any))"); }
		@Test public void test_18423() { testInvalid("(!any | {int})","({int, any} | (any & any))"); }
		@Test public void test_18424() { testInvalid("(!any | {int})","({any, int} | (any & any))"); }
		@Test public void test_18425() { testInvalid("(!any | {int})","({int, int} | (any & any))"); }
		@Test public void test_18426() { testInvalid("(!any | {int})","((int | any) | (any & any))"); }
		@Test public void test_18427() { testInvalid("(!any | {int})","((int | int) | (any & any))"); }
		@Test public void test_18428() { testInvalid("(!any | {int})","((int & any) | (any & any))"); }
		@Test public void test_18429() { testInvalid("(!any | {int})","((any & int) | (any & any))"); }
		@Test public void test_18430() { testInvalid("(!any | {int})","((int & int) | (any & any))"); }
		@Test public void test_18431() { testInvalid("(!any | {int})","({any} | (int & any))"); }
		@Test public void test_18432() { testValid("(!int | {int})","{int}"); }
		@Test public void test_18433() { testValid("(!int | {int})","{any, any}"); }
		@Test public void test_18434() { testValid("(!int | {int})","{int, int}"); }
		@Test public void test_18435() { testInvalid("(!int | {int})","(any | int)"); }
		@Test public void test_18436() { testInvalid("(!int | {int})","(int & any)"); }
		@Test public void test_18437() { testValid("(!int | {int})","{{any}}"); }
		@Test public void test_18438() { testValid("(!int | {int})","{{int, any}}"); }
		@Test public void test_18439() { testValid("(!int | {int})","{{int, int}}"); }
		@Test public void test_18440() { testValid("(!int | {int})","{(any | int)}"); }
		@Test public void test_18441() { testInvalid("(!int | {int})","!{int, any}"); }
		@Test public void test_18442() { testInvalid("(!int | {int})","!{int, int}"); }
		@Test public void test_18443() { testValid("(!int | {int})","!(any | any)"); }
		@Test public void test_18444() { testValid("(!int | {int})","!(any & any)"); }
		@Test public void test_18445() { testValid("(!int | {int})","!(int & int)"); }
		@Test public void test_18446() { testValid("(!int | {int})","{{int}, {any}}"); }
		@Test public void test_18447() { testValid("(!int | {int})","{!int, {any}}"); }
		@Test public void test_18448() { testValid("(!int | {int})","{{int, int}, {any}}"); }
		@Test public void test_18449() { testValid("(!int | {int})","{(any | int), {any}}"); }
		@Test public void test_18450() { testValid("(!int | {int})","{!int, {int}}"); }
		@Test public void test_18451() { testValid("(!int | {int})","{{any, any}, {int}}"); }
		@Test public void test_18452() { testValid("(!int | {int})","{(any | any), {int}}"); }
		@Test public void test_18453() { testValid("(!int | {int})","{(any & any), {int}}"); }
		@Test public void test_18454() { testValid("(!int | {int})","{(any & int), {int}}"); }
		@Test public void test_18455() { testValid("(!int | {int})","{{any, any}, !int}"); }
		@Test public void test_18456() { testValid("(!int | {int})","{{any, int}, !int}"); }
		@Test public void test_18457() { testValid("(!int | {int})","{(any | any), !int}"); }
		@Test public void test_18458() { testValid("(!int | {int})","{(int | any), !int}"); }
		@Test public void test_18459() { testValid("(!int | {int})","{(any & any), !int}"); }
		@Test public void test_18460() { testValid("(!int | {int})","{(int & any), !int}"); }
		@Test public void test_18461() { testValid("(!int | {int})","{(int & int), !int}"); }
		@Test public void test_18462() { testValid("(!int | {int})","{{any}, {any, any}}"); }
		@Test public void test_18463() { testValid("(!int | {int})","{{int}, {any, any}}"); }
		@Test public void test_18464() { testValid("(!int | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_18465() { testValid("(!int | {int})","{(any | any), {any, any}}"); }
		@Test public void test_18466() { testValid("(!int | {int})","{(any | int), {any, any}}"); }
		@Test public void test_18467() { testValid("(!int | {int})","{!int, {int, any}}"); }
		@Test public void test_18468() { testValid("(!int | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_18469() { testValid("(!int | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_18470() { testValid("(!int | {int})","{(any & int), {int, any}}"); }
		@Test public void test_18471() { testValid("(!int | {int})","{{any}, {any, int}}"); }
		@Test public void test_18472() { testValid("(!int | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_18473() { testValid("(!int | {int})","{(int | int), {any, int}}"); }
		@Test public void test_18474() { testValid("(!int | {int})","{(any & int), {any, int}}"); }
		@Test public void test_18475() { testValid("(!int | {int})","{!int, {int, int}}"); }
		@Test public void test_18476() { testValid("(!int | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_18477() { testValid("(!int | {int})","{(any | any), {int, int}}"); }
		@Test public void test_18478() { testValid("(!int | {int})","{(int | any), {int, int}}"); }
		@Test public void test_18479() { testValid("(!int | {int})","{(int & any), {int, int}}"); }
		@Test public void test_18480() { testValid("(!int | {int})","{{int}, (any | any)}"); }
		@Test public void test_18481() { testValid("(!int | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_18482() { testValid("(!int | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_18483() { testValid("(!int | {int})","{(any | any), (any | any)}"); }
		@Test public void test_18484() { testValid("(!int | {int})","{(int | any), (any | any)}"); }
		@Test public void test_18485() { testValid("(!int | {int})","{(int & int), (any | any)}"); }
		@Test public void test_18486() { testValid("(!int | {int})","{!int, (int | any)}"); }
		@Test public void test_18487() { testValid("(!int | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_18488() { testValid("(!int | {int})","{(any | any), (int | any)}"); }
		@Test public void test_18489() { testValid("(!int | {int})","{(int | int), (int | any)}"); }
		@Test public void test_18490() { testValid("(!int | {int})","{{any}, (any | int)}"); }
		@Test public void test_18491() { testValid("(!int | {int})","{!int, (any | int)}"); }
		@Test public void test_18492() { testValid("(!int | {int})","{(any | any), (any | int)}"); }
		@Test public void test_18493() { testValid("(!int | {int})","{(any | int), (any | int)}"); }
		@Test public void test_18494() { testValid("(!int | {int})","{(any & int), (any | int)}"); }
		@Test public void test_18495() { testValid("(!int | {int})","{{int}, (int | int)}"); }
		@Test public void test_18496() { testValid("(!int | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_18497() { testValid("(!int | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_18498() { testValid("(!int | {int})","{{int}, (any & any)}"); }
		@Test public void test_18499() { testValid("(!int | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_18500() { testValid("(!int | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_18501() { testValid("(!int | {int})","{(int | any), (any & any)}"); }
		@Test public void test_18502() { testValid("(!int | {int})","{(any & any), (any & any)}"); }
		@Test public void test_18503() { testValid("(!int | {int})","{(int & any), (any & any)}"); }
		@Test public void test_18504() { testValid("(!int | {int})","{{any}, (int & any)}"); }
		@Test public void test_18505() { testValid("(!int | {int})","{{int}, (int & any)}"); }
		@Test public void test_18506() { testValid("(!int | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_18507() { testValid("(!int | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_18508() { testValid("(!int | {int})","{(any | int), (int & any)}"); }
		@Test public void test_18509() { testValid("(!int | {int})","{(any & any), (int & any)}"); }
		@Test public void test_18510() { testValid("(!int | {int})","{(int & any), (int & any)}"); }
		@Test public void test_18511() { testValid("(!int | {int})","{(int & int), (int & any)}"); }
		@Test public void test_18512() { testValid("(!int | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_18513() { testValid("(!int | {int})","{(any & any), (any & int)}"); }
		@Test public void test_18514() { testValid("(!int | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_18515() { testValid("(!int | {int})","{(int | int), (int & int)}"); }
		@Test public void test_18516() { testValid("(!int | {int})","{(any & any), (int & int)}"); }
		@Test public void test_18517() { testValid("(!int | {int})","{(any & int), (int & int)}"); }
		@Test public void test_18518() { testValid("(!int | {int})","{(int & int), (int & int)}"); }
		@Test public void test_18519() { testValid("(!int | {int})","(!int | {any})"); }
		@Test public void test_18520() { testValid("(!int | {int})","({any, any} | {any})"); }
		@Test public void test_18521() { testInvalid("(!int | {int})","((any | any) | {any})"); }
		@Test public void test_18522() { testInvalid("(!int | {int})","((int | any) | {any})"); }
		@Test public void test_18523() { testInvalid("(!int | {int})","((any & any) | {any})"); }
		@Test public void test_18524() { testInvalid("(!int | {int})","((int & any) | {any})"); }
		@Test public void test_18525() { testInvalid("(!int | {int})","((any & int) | {any})"); }
		@Test public void test_18526() { testValid("(!int | {int})","({int} | {int})"); }
		@Test public void test_18527() { testValid("(!int | {int})","(!any | {int})"); }
		@Test public void test_18528() { testValid("(!int | {int})","(!int | {int})"); }
		@Test public void test_18529() { testValid("(!int | {int})","({any, int} | {int})"); }
		@Test public void test_18530() { testInvalid("(!int | {int})","((int & any) | {int})"); }
		@Test public void test_18531() { testInvalid("(!int | {int})","((any & int) | {int})"); }
		@Test public void test_18532() { testInvalid("(!int | {int})","((int & int) | {int})"); }
		@Test public void test_18533() { testValid("(!int | {int})","({any} | !any)"); }
		@Test public void test_18534() { testValid("(!int | {int})","({int} | !any)"); }
		@Test public void test_18535() { testValid("(!int | {int})","({any, any} | !any)"); }
		@Test public void test_18536() { testValid("(!int | {int})","({int, int} | !any)"); }
		@Test public void test_18537() { testInvalid("(!int | {int})","((any | any) | !any)"); }
		@Test public void test_18538() { testInvalid("(!int | {int})","((int | any) | !any)"); }
		@Test public void test_18539() { testInvalid("(!int | {int})","((int | int) | !any)"); }
		@Test public void test_18540() { testInvalid("(!int | {int})","((int & int) | !any)"); }
		@Test public void test_18541() { testValid("(!int | {int})","(!int | !int)"); }
		@Test public void test_18542() { testValid("(!int | {int})","({any, any} | !int)"); }
		@Test public void test_18543() { testValid("(!int | {int})","({int, int} | !int)"); }
		@Test public void test_18544() { testInvalid("(!int | {int})","((int | any) | !int)"); }
		@Test public void test_18545() { testInvalid("(!int | {int})","((any | int) | !int)"); }
		@Test public void test_18546() { testInvalid("(!int | {int})","((any & int) | !int)"); }
		@Test public void test_18547() { testInvalid("(!int | {int})","((int & int) | !int)"); }
		@Test public void test_18548() { testValid("(!int | {int})","({int} | {any, any})"); }
		@Test public void test_18549() { testValid("(!int | {int})","(!any | {any, any})"); }
		@Test public void test_18550() { testValid("(!int | {int})","(!int | {any, any})"); }
		@Test public void test_18551() { testValid("(!int | {int})","({any, int} | {any, any})"); }
		@Test public void test_18552() { testInvalid("(!int | {int})","((int | any) | {any, any})"); }
		@Test public void test_18553() { testInvalid("(!int | {int})","((any & any) | {any, any})"); }
		@Test public void test_18554() { testInvalid("(!int | {int})","((any & int) | {any, any})"); }
		@Test public void test_18555() { testValid("(!int | {int})","(!int | {int, any})"); }
		@Test public void test_18556() { testValid("(!int | {int})","({any, int} | {int, any})"); }
		@Test public void test_18557() { testInvalid("(!int | {int})","((any | any) | {int, any})"); }
		@Test public void test_18558() { testInvalid("(!int | {int})","((int | any) | {int, any})"); }
		@Test public void test_18559() { testInvalid("(!int | {int})","((any | int) | {int, any})"); }
		@Test public void test_18560() { testInvalid("(!int | {int})","((int & any) | {int, any})"); }
		@Test public void test_18561() { testValid("(!int | {int})","({any} | {any, int})"); }
		@Test public void test_18562() { testValid("(!int | {int})","(!int | {any, int})"); }
		@Test public void test_18563() { testValid("(!int | {int})","({any, int} | {any, int})"); }
		@Test public void test_18564() { testInvalid("(!int | {int})","((any | any) | {any, int})"); }
		@Test public void test_18565() { testInvalid("(!int | {int})","((any | int) | {any, int})"); }
		@Test public void test_18566() { testInvalid("(!int | {int})","((int | int) | {any, int})"); }
		@Test public void test_18567() { testInvalid("(!int | {int})","((int & any) | {any, int})"); }
		@Test public void test_18568() { testValid("(!int | {int})","(!any | {int, int})"); }
		@Test public void test_18569() { testValid("(!int | {int})","(!int | {int, int})"); }
		@Test public void test_18570() { testValid("(!int | {int})","({any, any} | {int, int})"); }
		@Test public void test_18571() { testValid("(!int | {int})","({any, int} | {int, int})"); }
		@Test public void test_18572() { testInvalid("(!int | {int})","((any | any) | {int, int})"); }
		@Test public void test_18573() { testInvalid("(!int | {int})","((int | int) | {int, int})"); }
		@Test public void test_18574() { testInvalid("(!int | {int})","((int & any) | {int, int})"); }
		@Test public void test_18575() { testInvalid("(!int | {int})","((any & int) | {int, int})"); }
		@Test public void test_18576() { testInvalid("(!int | {int})","((int & int) | {int, int})"); }
		@Test public void test_18577() { testInvalid("(!int | {int})","({any} | (any | any))"); }
		@Test public void test_18578() { testInvalid("(!int | {int})","(!any | (any | any))"); }
		@Test public void test_18579() { testInvalid("(!int | {int})","({any, any} | (any | any))"); }
		@Test public void test_18580() { testInvalid("(!int | {int})","({any, int} | (any | any))"); }
		@Test public void test_18581() { testInvalid("(!int | {int})","({int, int} | (any | any))"); }
		@Test public void test_18582() { testInvalid("(!int | {int})","((int | any) | (any | any))"); }
		@Test public void test_18583() { testInvalid("(!int | {int})","((any | int) | (any | any))"); }
		@Test public void test_18584() { testInvalid("(!int | {int})","((any & int) | (any | any))"); }
		@Test public void test_18585() { testInvalid("(!int | {int})","((int & int) | (any | any))"); }
		@Test public void test_18586() { testInvalid("(!int | {int})","({any} | (int | any))"); }
		@Test public void test_18587() { testInvalid("(!int | {int})","(!int | (int | any))"); }
		@Test public void test_18588() { testInvalid("(!int | {int})","({int, any} | (int | any))"); }
		@Test public void test_18589() { testInvalid("(!int | {int})","({any, int} | (int | any))"); }
		@Test public void test_18590() { testInvalid("(!int | {int})","((int & any) | (int | any))"); }
		@Test public void test_18591() { testInvalid("(!int | {int})","((any & int) | (int | any))"); }
		@Test public void test_18592() { testInvalid("(!int | {int})","({any} | (any | int))"); }
		@Test public void test_18593() { testInvalid("(!int | {int})","({int} | (any | int))"); }
		@Test public void test_18594() { testInvalid("(!int | {int})","(!any | (any | int))"); }
		@Test public void test_18595() { testInvalid("(!int | {int})","(!int | (any | int))"); }
		@Test public void test_18596() { testInvalid("(!int | {int})","({any, int} | (any | int))"); }
		@Test public void test_18597() { testInvalid("(!int | {int})","({int, int} | (any | int))"); }
		@Test public void test_18598() { testInvalid("(!int | {int})","((int | any) | (any | int))"); }
		@Test public void test_18599() { testInvalid("(!int | {int})","((any | int) | (any | int))"); }
		@Test public void test_18600() { testInvalid("(!int | {int})","((int | int) | (any | int))"); }
		@Test public void test_18601() { testInvalid("(!int | {int})","((any & any) | (any | int))"); }
		@Test public void test_18602() { testInvalid("(!int | {int})","({int} | (int | int))"); }
		@Test public void test_18603() { testInvalid("(!int | {int})","(!any | (int | int))"); }
		@Test public void test_18604() { testInvalid("(!int | {int})","(!int | (int | int))"); }
		@Test public void test_18605() { testInvalid("(!int | {int})","({int, any} | (int | int))"); }
		@Test public void test_18606() { testInvalid("(!int | {int})","({any, int} | (int | int))"); }
		@Test public void test_18607() { testInvalid("(!int | {int})","((any | int) | (int | int))"); }
		@Test public void test_18608() { testInvalid("(!int | {int})","((int | int) | (int | int))"); }
		@Test public void test_18609() { testInvalid("(!int | {int})","((any & any) | (int | int))"); }
		@Test public void test_18610() { testInvalid("(!int | {int})","((int & any) | (int | int))"); }
		@Test public void test_18611() { testInvalid("(!int | {int})","((int & int) | (int | int))"); }
		@Test public void test_18612() { testInvalid("(!int | {int})","(!any | (any & any))"); }
		@Test public void test_18613() { testInvalid("(!int | {int})","(!int | (any & any))"); }
		@Test public void test_18614() { testInvalid("(!int | {int})","({any, any} | (any & any))"); }
		@Test public void test_18615() { testInvalid("(!int | {int})","({int, any} | (any & any))"); }
		@Test public void test_18616() { testInvalid("(!int | {int})","({any, int} | (any & any))"); }
		@Test public void test_18617() { testInvalid("(!int | {int})","({int, int} | (any & any))"); }
		@Test public void test_18618() { testInvalid("(!int | {int})","((int | any) | (any & any))"); }
		@Test public void test_18619() { testInvalid("(!int | {int})","((int | int) | (any & any))"); }
		@Test public void test_18620() { testInvalid("(!int | {int})","((int & any) | (any & any))"); }
		@Test public void test_18621() { testInvalid("(!int | {int})","((any & int) | (any & any))"); }
		@Test public void test_18622() { testInvalid("(!int | {int})","((int & int) | (any & any))"); }
		@Test public void test_18623() { testInvalid("(!int | {int})","({any} | (int & any))"); }
		@Test public void test_18624() { testValid("({any, int} | {int})","{int}"); }
		@Test public void test_18625() { testInvalid("({any, int} | {int})","{any, any}"); }
		@Test public void test_18626() { testValid("({any, int} | {int})","{int, int}"); }
		@Test public void test_18627() { testInvalid("({any, int} | {int})","(any | int)"); }
		@Test public void test_18628() { testInvalid("({any, int} | {int})","(int & any)"); }
		@Test public void test_18629() { testInvalid("({any, int} | {int})","{{any}}"); }
		@Test public void test_18630() { testInvalid("({any, int} | {int})","{{int, any}}"); }
		@Test public void test_18631() { testInvalid("({any, int} | {int})","{{int, int}}"); }
		@Test public void test_18632() { testInvalid("({any, int} | {int})","{(any | int)}"); }
		@Test public void test_18633() { testInvalid("({any, int} | {int})","!{int, any}"); }
		@Test public void test_18634() { testInvalid("({any, int} | {int})","!{int, int}"); }
		@Test public void test_18635() { testValid("({any, int} | {int})","!(any | any)"); }
		@Test public void test_18636() { testValid("({any, int} | {int})","!(any & any)"); }
		@Test public void test_18637() { testInvalid("({any, int} | {int})","!(int & int)"); }
		@Test public void test_18638() { testInvalid("({any, int} | {int})","{{int}, {any}}"); }
		@Test public void test_18639() { testInvalid("({any, int} | {int})","{!int, {any}}"); }
		@Test public void test_18640() { testInvalid("({any, int} | {int})","{{int, int}, {any}}"); }
		@Test public void test_18641() { testInvalid("({any, int} | {int})","{(any | int), {any}}"); }
		@Test public void test_18642() { testInvalid("({any, int} | {int})","{!int, {int}}"); }
		@Test public void test_18643() { testInvalid("({any, int} | {int})","{{any, any}, {int}}"); }
		@Test public void test_18644() { testInvalid("({any, int} | {int})","{(any | any), {int}}"); }
		@Test public void test_18645() { testInvalid("({any, int} | {int})","{(any & any), {int}}"); }
		@Test public void test_18646() { testInvalid("({any, int} | {int})","{(any & int), {int}}"); }
		@Test public void test_18647() { testInvalid("({any, int} | {int})","{{any, any}, !int}"); }
		@Test public void test_18648() { testInvalid("({any, int} | {int})","{{any, int}, !int}"); }
		@Test public void test_18649() { testInvalid("({any, int} | {int})","{(any | any), !int}"); }
		@Test public void test_18650() { testInvalid("({any, int} | {int})","{(int | any), !int}"); }
		@Test public void test_18651() { testInvalid("({any, int} | {int})","{(any & any), !int}"); }
		@Test public void test_18652() { testInvalid("({any, int} | {int})","{(int & any), !int}"); }
		@Test public void test_18653() { testInvalid("({any, int} | {int})","{(int & int), !int}"); }
		@Test public void test_18654() { testInvalid("({any, int} | {int})","{{any}, {any, any}}"); }
		@Test public void test_18655() { testInvalid("({any, int} | {int})","{{int}, {any, any}}"); }
		@Test public void test_18656() { testInvalid("({any, int} | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_18657() { testInvalid("({any, int} | {int})","{(any | any), {any, any}}"); }
		@Test public void test_18658() { testInvalid("({any, int} | {int})","{(any | int), {any, any}}"); }
		@Test public void test_18659() { testInvalid("({any, int} | {int})","{!int, {int, any}}"); }
		@Test public void test_18660() { testInvalid("({any, int} | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_18661() { testInvalid("({any, int} | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_18662() { testInvalid("({any, int} | {int})","{(any & int), {int, any}}"); }
		@Test public void test_18663() { testInvalid("({any, int} | {int})","{{any}, {any, int}}"); }
		@Test public void test_18664() { testInvalid("({any, int} | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_18665() { testInvalid("({any, int} | {int})","{(int | int), {any, int}}"); }
		@Test public void test_18666() { testInvalid("({any, int} | {int})","{(any & int), {any, int}}"); }
		@Test public void test_18667() { testInvalid("({any, int} | {int})","{!int, {int, int}}"); }
		@Test public void test_18668() { testInvalid("({any, int} | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_18669() { testInvalid("({any, int} | {int})","{(any | any), {int, int}}"); }
		@Test public void test_18670() { testInvalid("({any, int} | {int})","{(int | any), {int, int}}"); }
		@Test public void test_18671() { testInvalid("({any, int} | {int})","{(int & any), {int, int}}"); }
		@Test public void test_18672() { testInvalid("({any, int} | {int})","{{int}, (any | any)}"); }
		@Test public void test_18673() { testInvalid("({any, int} | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_18674() { testInvalid("({any, int} | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_18675() { testInvalid("({any, int} | {int})","{(any | any), (any | any)}"); }
		@Test public void test_18676() { testInvalid("({any, int} | {int})","{(int | any), (any | any)}"); }
		@Test public void test_18677() { testInvalid("({any, int} | {int})","{(int & int), (any | any)}"); }
		@Test public void test_18678() { testInvalid("({any, int} | {int})","{!int, (int | any)}"); }
		@Test public void test_18679() { testInvalid("({any, int} | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_18680() { testInvalid("({any, int} | {int})","{(any | any), (int | any)}"); }
		@Test public void test_18681() { testInvalid("({any, int} | {int})","{(int | int), (int | any)}"); }
		@Test public void test_18682() { testInvalid("({any, int} | {int})","{{any}, (any | int)}"); }
		@Test public void test_18683() { testInvalid("({any, int} | {int})","{!int, (any | int)}"); }
		@Test public void test_18684() { testInvalid("({any, int} | {int})","{(any | any), (any | int)}"); }
		@Test public void test_18685() { testInvalid("({any, int} | {int})","{(any | int), (any | int)}"); }
		@Test public void test_18686() { testInvalid("({any, int} | {int})","{(any & int), (any | int)}"); }
		@Test public void test_18687() { testValid("({any, int} | {int})","{{int}, (int | int)}"); }
		@Test public void test_18688() { testValid("({any, int} | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_18689() { testValid("({any, int} | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_18690() { testInvalid("({any, int} | {int})","{{int}, (any & any)}"); }
		@Test public void test_18691() { testInvalid("({any, int} | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_18692() { testInvalid("({any, int} | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_18693() { testInvalid("({any, int} | {int})","{(int | any), (any & any)}"); }
		@Test public void test_18694() { testInvalid("({any, int} | {int})","{(any & any), (any & any)}"); }
		@Test public void test_18695() { testInvalid("({any, int} | {int})","{(int & any), (any & any)}"); }
		@Test public void test_18696() { testValid("({any, int} | {int})","{{any}, (int & any)}"); }
		@Test public void test_18697() { testValid("({any, int} | {int})","{{int}, (int & any)}"); }
		@Test public void test_18698() { testValid("({any, int} | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_18699() { testValid("({any, int} | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_18700() { testValid("({any, int} | {int})","{(any | int), (int & any)}"); }
		@Test public void test_18701() { testValid("({any, int} | {int})","{(any & any), (int & any)}"); }
		@Test public void test_18702() { testValid("({any, int} | {int})","{(int & any), (int & any)}"); }
		@Test public void test_18703() { testValid("({any, int} | {int})","{(int & int), (int & any)}"); }
		@Test public void test_18704() { testValid("({any, int} | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_18705() { testValid("({any, int} | {int})","{(any & any), (any & int)}"); }
		@Test public void test_18706() { testValid("({any, int} | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_18707() { testValid("({any, int} | {int})","{(int | int), (int & int)}"); }
		@Test public void test_18708() { testValid("({any, int} | {int})","{(any & any), (int & int)}"); }
		@Test public void test_18709() { testValid("({any, int} | {int})","{(any & int), (int & int)}"); }
		@Test public void test_18710() { testValid("({any, int} | {int})","{(int & int), (int & int)}"); }
		@Test public void test_18711() { testInvalid("({any, int} | {int})","(!int | {any})"); }
		@Test public void test_18712() { testInvalid("({any, int} | {int})","({any, any} | {any})"); }
		@Test public void test_18713() { testInvalid("({any, int} | {int})","((any | any) | {any})"); }
		@Test public void test_18714() { testInvalid("({any, int} | {int})","((int | any) | {any})"); }
		@Test public void test_18715() { testInvalid("({any, int} | {int})","((any & any) | {any})"); }
		@Test public void test_18716() { testInvalid("({any, int} | {int})","((int & any) | {any})"); }
		@Test public void test_18717() { testInvalid("({any, int} | {int})","((any & int) | {any})"); }
		@Test public void test_18718() { testValid("({any, int} | {int})","({int} | {int})"); }
		@Test public void test_18719() { testValid("({any, int} | {int})","(!any | {int})"); }
		@Test public void test_18720() { testInvalid("({any, int} | {int})","(!int | {int})"); }
		@Test public void test_18721() { testValid("({any, int} | {int})","({any, int} | {int})"); }
		@Test public void test_18722() { testInvalid("({any, int} | {int})","((int & any) | {int})"); }
		@Test public void test_18723() { testInvalid("({any, int} | {int})","((any & int) | {int})"); }
		@Test public void test_18724() { testInvalid("({any, int} | {int})","((int & int) | {int})"); }
		@Test public void test_18725() { testInvalid("({any, int} | {int})","({any} | !any)"); }
		@Test public void test_18726() { testValid("({any, int} | {int})","({int} | !any)"); }
		@Test public void test_18727() { testInvalid("({any, int} | {int})","({any, any} | !any)"); }
		@Test public void test_18728() { testValid("({any, int} | {int})","({int, int} | !any)"); }
		@Test public void test_18729() { testInvalid("({any, int} | {int})","((any | any) | !any)"); }
		@Test public void test_18730() { testInvalid("({any, int} | {int})","((int | any) | !any)"); }
		@Test public void test_18731() { testInvalid("({any, int} | {int})","((int | int) | !any)"); }
		@Test public void test_18732() { testInvalid("({any, int} | {int})","((int & int) | !any)"); }
		@Test public void test_18733() { testInvalid("({any, int} | {int})","(!int | !int)"); }
		@Test public void test_18734() { testInvalid("({any, int} | {int})","({any, any} | !int)"); }
		@Test public void test_18735() { testInvalid("({any, int} | {int})","({int, int} | !int)"); }
		@Test public void test_18736() { testInvalid("({any, int} | {int})","((int | any) | !int)"); }
		@Test public void test_18737() { testInvalid("({any, int} | {int})","((any | int) | !int)"); }
		@Test public void test_18738() { testInvalid("({any, int} | {int})","((any & int) | !int)"); }
		@Test public void test_18739() { testInvalid("({any, int} | {int})","((int & int) | !int)"); }
		@Test public void test_18740() { testInvalid("({any, int} | {int})","({int} | {any, any})"); }
		@Test public void test_18741() { testInvalid("({any, int} | {int})","(!any | {any, any})"); }
		@Test public void test_18742() { testInvalid("({any, int} | {int})","(!int | {any, any})"); }
		@Test public void test_18743() { testInvalid("({any, int} | {int})","({any, int} | {any, any})"); }
		@Test public void test_18744() { testInvalid("({any, int} | {int})","((int | any) | {any, any})"); }
		@Test public void test_18745() { testInvalid("({any, int} | {int})","((any & any) | {any, any})"); }
		@Test public void test_18746() { testInvalid("({any, int} | {int})","((any & int) | {any, any})"); }
		@Test public void test_18747() { testInvalid("({any, int} | {int})","(!int | {int, any})"); }
		@Test public void test_18748() { testInvalid("({any, int} | {int})","({any, int} | {int, any})"); }
		@Test public void test_18749() { testInvalid("({any, int} | {int})","((any | any) | {int, any})"); }
		@Test public void test_18750() { testInvalid("({any, int} | {int})","((int | any) | {int, any})"); }
		@Test public void test_18751() { testInvalid("({any, int} | {int})","((any | int) | {int, any})"); }
		@Test public void test_18752() { testInvalid("({any, int} | {int})","((int & any) | {int, any})"); }
		@Test public void test_18753() { testInvalid("({any, int} | {int})","({any} | {any, int})"); }
		@Test public void test_18754() { testInvalid("({any, int} | {int})","(!int | {any, int})"); }
		@Test public void test_18755() { testValid("({any, int} | {int})","({any, int} | {any, int})"); }
		@Test public void test_18756() { testInvalid("({any, int} | {int})","((any | any) | {any, int})"); }
		@Test public void test_18757() { testInvalid("({any, int} | {int})","((any | int) | {any, int})"); }
		@Test public void test_18758() { testInvalid("({any, int} | {int})","((int | int) | {any, int})"); }
		@Test public void test_18759() { testInvalid("({any, int} | {int})","((int & any) | {any, int})"); }
		@Test public void test_18760() { testValid("({any, int} | {int})","(!any | {int, int})"); }
		@Test public void test_18761() { testInvalid("({any, int} | {int})","(!int | {int, int})"); }
		@Test public void test_18762() { testInvalid("({any, int} | {int})","({any, any} | {int, int})"); }
		@Test public void test_18763() { testValid("({any, int} | {int})","({any, int} | {int, int})"); }
		@Test public void test_18764() { testInvalid("({any, int} | {int})","((any | any) | {int, int})"); }
		@Test public void test_18765() { testInvalid("({any, int} | {int})","((int | int) | {int, int})"); }
		@Test public void test_18766() { testInvalid("({any, int} | {int})","((int & any) | {int, int})"); }
		@Test public void test_18767() { testInvalid("({any, int} | {int})","((any & int) | {int, int})"); }
		@Test public void test_18768() { testInvalid("({any, int} | {int})","((int & int) | {int, int})"); }
		@Test public void test_18769() { testInvalid("({any, int} | {int})","({any} | (any | any))"); }
		@Test public void test_18770() { testInvalid("({any, int} | {int})","(!any | (any | any))"); }
		@Test public void test_18771() { testInvalid("({any, int} | {int})","({any, any} | (any | any))"); }
		@Test public void test_18772() { testInvalid("({any, int} | {int})","({any, int} | (any | any))"); }
		@Test public void test_18773() { testInvalid("({any, int} | {int})","({int, int} | (any | any))"); }
		@Test public void test_18774() { testInvalid("({any, int} | {int})","((int | any) | (any | any))"); }
		@Test public void test_18775() { testInvalid("({any, int} | {int})","((any | int) | (any | any))"); }
		@Test public void test_18776() { testInvalid("({any, int} | {int})","((any & int) | (any | any))"); }
		@Test public void test_18777() { testInvalid("({any, int} | {int})","((int & int) | (any | any))"); }
		@Test public void test_18778() { testInvalid("({any, int} | {int})","({any} | (int | any))"); }
		@Test public void test_18779() { testInvalid("({any, int} | {int})","(!int | (int | any))"); }
		@Test public void test_18780() { testInvalid("({any, int} | {int})","({int, any} | (int | any))"); }
		@Test public void test_18781() { testInvalid("({any, int} | {int})","({any, int} | (int | any))"); }
		@Test public void test_18782() { testInvalid("({any, int} | {int})","((int & any) | (int | any))"); }
		@Test public void test_18783() { testInvalid("({any, int} | {int})","((any & int) | (int | any))"); }
		@Test public void test_18784() { testInvalid("({any, int} | {int})","({any} | (any | int))"); }
		@Test public void test_18785() { testInvalid("({any, int} | {int})","({int} | (any | int))"); }
		@Test public void test_18786() { testInvalid("({any, int} | {int})","(!any | (any | int))"); }
		@Test public void test_18787() { testInvalid("({any, int} | {int})","(!int | (any | int))"); }
		@Test public void test_18788() { testInvalid("({any, int} | {int})","({any, int} | (any | int))"); }
		@Test public void test_18789() { testInvalid("({any, int} | {int})","({int, int} | (any | int))"); }
		@Test public void test_18790() { testInvalid("({any, int} | {int})","((int | any) | (any | int))"); }
		@Test public void test_18791() { testInvalid("({any, int} | {int})","((any | int) | (any | int))"); }
		@Test public void test_18792() { testInvalid("({any, int} | {int})","((int | int) | (any | int))"); }
		@Test public void test_18793() { testInvalid("({any, int} | {int})","((any & any) | (any | int))"); }
		@Test public void test_18794() { testInvalid("({any, int} | {int})","({int} | (int | int))"); }
		@Test public void test_18795() { testInvalid("({any, int} | {int})","(!any | (int | int))"); }
		@Test public void test_18796() { testInvalid("({any, int} | {int})","(!int | (int | int))"); }
		@Test public void test_18797() { testInvalid("({any, int} | {int})","({int, any} | (int | int))"); }
		@Test public void test_18798() { testInvalid("({any, int} | {int})","({any, int} | (int | int))"); }
		@Test public void test_18799() { testInvalid("({any, int} | {int})","((any | int) | (int | int))"); }
		@Test public void test_18800() { testInvalid("({any, int} | {int})","((int | int) | (int | int))"); }
		@Test public void test_18801() { testInvalid("({any, int} | {int})","((any & any) | (int | int))"); }
		@Test public void test_18802() { testInvalid("({any, int} | {int})","((int & any) | (int | int))"); }
		@Test public void test_18803() { testInvalid("({any, int} | {int})","((int & int) | (int | int))"); }
		@Test public void test_18804() { testInvalid("({any, int} | {int})","(!any | (any & any))"); }
		@Test public void test_18805() { testInvalid("({any, int} | {int})","(!int | (any & any))"); }
		@Test public void test_18806() { testInvalid("({any, int} | {int})","({any, any} | (any & any))"); }
		@Test public void test_18807() { testInvalid("({any, int} | {int})","({int, any} | (any & any))"); }
		@Test public void test_18808() { testInvalid("({any, int} | {int})","({any, int} | (any & any))"); }
		@Test public void test_18809() { testInvalid("({any, int} | {int})","({int, int} | (any & any))"); }
		@Test public void test_18810() { testInvalid("({any, int} | {int})","((int | any) | (any & any))"); }
		@Test public void test_18811() { testInvalid("({any, int} | {int})","((int | int) | (any & any))"); }
		@Test public void test_18812() { testInvalid("({any, int} | {int})","((int & any) | (any & any))"); }
		@Test public void test_18813() { testInvalid("({any, int} | {int})","((any & int) | (any & any))"); }
		@Test public void test_18814() { testInvalid("({any, int} | {int})","((int & int) | (any & any))"); }
		@Test public void test_18815() { testInvalid("({any, int} | {int})","({any} | (int & any))"); }
		@Test public void test_18816() { testValid("((int & any) | {int})","{int}"); }
		@Test public void test_18817() { testInvalid("((int & any) | {int})","{any, any}"); }
		@Test public void test_18818() { testInvalid("((int & any) | {int})","{int, int}"); }
		@Test public void test_18819() { testInvalid("((int & any) | {int})","(any | int)"); }
		@Test public void test_18820() { testValid("((int & any) | {int})","(int & any)"); }
		@Test public void test_18821() { testInvalid("((int & any) | {int})","{{any}}"); }
		@Test public void test_18822() { testInvalid("((int & any) | {int})","{{int, any}}"); }
		@Test public void test_18823() { testInvalid("((int & any) | {int})","{{int, int}}"); }
		@Test public void test_18824() { testInvalid("((int & any) | {int})","{(any | int)}"); }
		@Test public void test_18825() { testInvalid("((int & any) | {int})","!{int, any}"); }
		@Test public void test_18826() { testInvalid("((int & any) | {int})","!{int, int}"); }
		@Test public void test_18827() { testValid("((int & any) | {int})","!(any | any)"); }
		@Test public void test_18828() { testValid("((int & any) | {int})","!(any & any)"); }
		@Test public void test_18829() { testInvalid("((int & any) | {int})","!(int & int)"); }
		@Test public void test_18830() { testInvalid("((int & any) | {int})","{{int}, {any}}"); }
		@Test public void test_18831() { testInvalid("((int & any) | {int})","{!int, {any}}"); }
		@Test public void test_18832() { testInvalid("((int & any) | {int})","{{int, int}, {any}}"); }
		@Test public void test_18833() { testInvalid("((int & any) | {int})","{(any | int), {any}}"); }
		@Test public void test_18834() { testInvalid("((int & any) | {int})","{!int, {int}}"); }
		@Test public void test_18835() { testInvalid("((int & any) | {int})","{{any, any}, {int}}"); }
		@Test public void test_18836() { testInvalid("((int & any) | {int})","{(any | any), {int}}"); }
		@Test public void test_18837() { testInvalid("((int & any) | {int})","{(any & any), {int}}"); }
		@Test public void test_18838() { testInvalid("((int & any) | {int})","{(any & int), {int}}"); }
		@Test public void test_18839() { testInvalid("((int & any) | {int})","{{any, any}, !int}"); }
		@Test public void test_18840() { testInvalid("((int & any) | {int})","{{any, int}, !int}"); }
		@Test public void test_18841() { testInvalid("((int & any) | {int})","{(any | any), !int}"); }
		@Test public void test_18842() { testInvalid("((int & any) | {int})","{(int | any), !int}"); }
		@Test public void test_18843() { testInvalid("((int & any) | {int})","{(any & any), !int}"); }
		@Test public void test_18844() { testInvalid("((int & any) | {int})","{(int & any), !int}"); }
		@Test public void test_18845() { testInvalid("((int & any) | {int})","{(int & int), !int}"); }
		@Test public void test_18846() { testInvalid("((int & any) | {int})","{{any}, {any, any}}"); }
		@Test public void test_18847() { testInvalid("((int & any) | {int})","{{int}, {any, any}}"); }
		@Test public void test_18848() { testInvalid("((int & any) | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_18849() { testInvalid("((int & any) | {int})","{(any | any), {any, any}}"); }
		@Test public void test_18850() { testInvalid("((int & any) | {int})","{(any | int), {any, any}}"); }
		@Test public void test_18851() { testInvalid("((int & any) | {int})","{!int, {int, any}}"); }
		@Test public void test_18852() { testInvalid("((int & any) | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_18853() { testInvalid("((int & any) | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_18854() { testInvalid("((int & any) | {int})","{(any & int), {int, any}}"); }
		@Test public void test_18855() { testInvalid("((int & any) | {int})","{{any}, {any, int}}"); }
		@Test public void test_18856() { testInvalid("((int & any) | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_18857() { testInvalid("((int & any) | {int})","{(int | int), {any, int}}"); }
		@Test public void test_18858() { testInvalid("((int & any) | {int})","{(any & int), {any, int}}"); }
		@Test public void test_18859() { testInvalid("((int & any) | {int})","{!int, {int, int}}"); }
		@Test public void test_18860() { testInvalid("((int & any) | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_18861() { testInvalid("((int & any) | {int})","{(any | any), {int, int}}"); }
		@Test public void test_18862() { testInvalid("((int & any) | {int})","{(int | any), {int, int}}"); }
		@Test public void test_18863() { testInvalid("((int & any) | {int})","{(int & any), {int, int}}"); }
		@Test public void test_18864() { testInvalid("((int & any) | {int})","{{int}, (any | any)}"); }
		@Test public void test_18865() { testInvalid("((int & any) | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_18866() { testInvalid("((int & any) | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_18867() { testInvalid("((int & any) | {int})","{(any | any), (any | any)}"); }
		@Test public void test_18868() { testInvalid("((int & any) | {int})","{(int | any), (any | any)}"); }
		@Test public void test_18869() { testInvalid("((int & any) | {int})","{(int & int), (any | any)}"); }
		@Test public void test_18870() { testInvalid("((int & any) | {int})","{!int, (int | any)}"); }
		@Test public void test_18871() { testInvalid("((int & any) | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_18872() { testInvalid("((int & any) | {int})","{(any | any), (int | any)}"); }
		@Test public void test_18873() { testInvalid("((int & any) | {int})","{(int | int), (int | any)}"); }
		@Test public void test_18874() { testInvalid("((int & any) | {int})","{{any}, (any | int)}"); }
		@Test public void test_18875() { testInvalid("((int & any) | {int})","{!int, (any | int)}"); }
		@Test public void test_18876() { testInvalid("((int & any) | {int})","{(any | any), (any | int)}"); }
		@Test public void test_18877() { testInvalid("((int & any) | {int})","{(any | int), (any | int)}"); }
		@Test public void test_18878() { testInvalid("((int & any) | {int})","{(any & int), (any | int)}"); }
		@Test public void test_18879() { testInvalid("((int & any) | {int})","{{int}, (int | int)}"); }
		@Test public void test_18880() { testInvalid("((int & any) | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_18881() { testInvalid("((int & any) | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_18882() { testInvalid("((int & any) | {int})","{{int}, (any & any)}"); }
		@Test public void test_18883() { testInvalid("((int & any) | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_18884() { testInvalid("((int & any) | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_18885() { testInvalid("((int & any) | {int})","{(int | any), (any & any)}"); }
		@Test public void test_18886() { testInvalid("((int & any) | {int})","{(any & any), (any & any)}"); }
		@Test public void test_18887() { testInvalid("((int & any) | {int})","{(int & any), (any & any)}"); }
		@Test public void test_18888() { testInvalid("((int & any) | {int})","{{any}, (int & any)}"); }
		@Test public void test_18889() { testInvalid("((int & any) | {int})","{{int}, (int & any)}"); }
		@Test public void test_18890() { testInvalid("((int & any) | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_18891() { testInvalid("((int & any) | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_18892() { testInvalid("((int & any) | {int})","{(any | int), (int & any)}"); }
		@Test public void test_18893() { testInvalid("((int & any) | {int})","{(any & any), (int & any)}"); }
		@Test public void test_18894() { testInvalid("((int & any) | {int})","{(int & any), (int & any)}"); }
		@Test public void test_18895() { testInvalid("((int & any) | {int})","{(int & int), (int & any)}"); }
		@Test public void test_18896() { testInvalid("((int & any) | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_18897() { testInvalid("((int & any) | {int})","{(any & any), (any & int)}"); }
		@Test public void test_18898() { testInvalid("((int & any) | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_18899() { testInvalid("((int & any) | {int})","{(int | int), (int & int)}"); }
		@Test public void test_18900() { testInvalid("((int & any) | {int})","{(any & any), (int & int)}"); }
		@Test public void test_18901() { testInvalid("((int & any) | {int})","{(any & int), (int & int)}"); }
		@Test public void test_18902() { testInvalid("((int & any) | {int})","{(int & int), (int & int)}"); }
		@Test public void test_18903() { testInvalid("((int & any) | {int})","(!int | {any})"); }
		@Test public void test_18904() { testInvalid("((int & any) | {int})","({any, any} | {any})"); }
		@Test public void test_18905() { testInvalid("((int & any) | {int})","((any | any) | {any})"); }
		@Test public void test_18906() { testInvalid("((int & any) | {int})","((int | any) | {any})"); }
		@Test public void test_18907() { testInvalid("((int & any) | {int})","((any & any) | {any})"); }
		@Test public void test_18908() { testInvalid("((int & any) | {int})","((int & any) | {any})"); }
		@Test public void test_18909() { testInvalid("((int & any) | {int})","((any & int) | {any})"); }
		@Test public void test_18910() { testValid("((int & any) | {int})","({int} | {int})"); }
		@Test public void test_18911() { testValid("((int & any) | {int})","(!any | {int})"); }
		@Test public void test_18912() { testInvalid("((int & any) | {int})","(!int | {int})"); }
		@Test public void test_18913() { testInvalid("((int & any) | {int})","({any, int} | {int})"); }
		@Test public void test_18914() { testValid("((int & any) | {int})","((int & any) | {int})"); }
		@Test public void test_18915() { testValid("((int & any) | {int})","((any & int) | {int})"); }
		@Test public void test_18916() { testValid("((int & any) | {int})","((int & int) | {int})"); }
		@Test public void test_18917() { testInvalid("((int & any) | {int})","({any} | !any)"); }
		@Test public void test_18918() { testValid("((int & any) | {int})","({int} | !any)"); }
		@Test public void test_18919() { testInvalid("((int & any) | {int})","({any, any} | !any)"); }
		@Test public void test_18920() { testInvalid("((int & any) | {int})","({int, int} | !any)"); }
		@Test public void test_18921() { testInvalid("((int & any) | {int})","((any | any) | !any)"); }
		@Test public void test_18922() { testInvalid("((int & any) | {int})","((int | any) | !any)"); }
		@Test public void test_18923() { testValid("((int & any) | {int})","((int | int) | !any)"); }
		@Test public void test_18924() { testValid("((int & any) | {int})","((int & int) | !any)"); }
		@Test public void test_18925() { testInvalid("((int & any) | {int})","(!int | !int)"); }
		@Test public void test_18926() { testInvalid("((int & any) | {int})","({any, any} | !int)"); }
		@Test public void test_18927() { testInvalid("((int & any) | {int})","({int, int} | !int)"); }
		@Test public void test_18928() { testInvalid("((int & any) | {int})","((int | any) | !int)"); }
		@Test public void test_18929() { testInvalid("((int & any) | {int})","((any | int) | !int)"); }
		@Test public void test_18930() { testInvalid("((int & any) | {int})","((any & int) | !int)"); }
		@Test public void test_18931() { testInvalid("((int & any) | {int})","((int & int) | !int)"); }
		@Test public void test_18932() { testInvalid("((int & any) | {int})","({int} | {any, any})"); }
		@Test public void test_18933() { testInvalid("((int & any) | {int})","(!any | {any, any})"); }
		@Test public void test_18934() { testInvalid("((int & any) | {int})","(!int | {any, any})"); }
		@Test public void test_18935() { testInvalid("((int & any) | {int})","({any, int} | {any, any})"); }
		@Test public void test_18936() { testInvalid("((int & any) | {int})","((int | any) | {any, any})"); }
		@Test public void test_18937() { testInvalid("((int & any) | {int})","((any & any) | {any, any})"); }
		@Test public void test_18938() { testInvalid("((int & any) | {int})","((any & int) | {any, any})"); }
		@Test public void test_18939() { testInvalid("((int & any) | {int})","(!int | {int, any})"); }
		@Test public void test_18940() { testInvalid("((int & any) | {int})","({any, int} | {int, any})"); }
		@Test public void test_18941() { testInvalid("((int & any) | {int})","((any | any) | {int, any})"); }
		@Test public void test_18942() { testInvalid("((int & any) | {int})","((int | any) | {int, any})"); }
		@Test public void test_18943() { testInvalid("((int & any) | {int})","((any | int) | {int, any})"); }
		@Test public void test_18944() { testInvalid("((int & any) | {int})","((int & any) | {int, any})"); }
		@Test public void test_18945() { testInvalid("((int & any) | {int})","({any} | {any, int})"); }
		@Test public void test_18946() { testInvalid("((int & any) | {int})","(!int | {any, int})"); }
		@Test public void test_18947() { testInvalid("((int & any) | {int})","({any, int} | {any, int})"); }
		@Test public void test_18948() { testInvalid("((int & any) | {int})","((any | any) | {any, int})"); }
		@Test public void test_18949() { testInvalid("((int & any) | {int})","((any | int) | {any, int})"); }
		@Test public void test_18950() { testInvalid("((int & any) | {int})","((int | int) | {any, int})"); }
		@Test public void test_18951() { testInvalid("((int & any) | {int})","((int & any) | {any, int})"); }
		@Test public void test_18952() { testInvalid("((int & any) | {int})","(!any | {int, int})"); }
		@Test public void test_18953() { testInvalid("((int & any) | {int})","(!int | {int, int})"); }
		@Test public void test_18954() { testInvalid("((int & any) | {int})","({any, any} | {int, int})"); }
		@Test public void test_18955() { testInvalid("((int & any) | {int})","({any, int} | {int, int})"); }
		@Test public void test_18956() { testInvalid("((int & any) | {int})","((any | any) | {int, int})"); }
		@Test public void test_18957() { testInvalid("((int & any) | {int})","((int | int) | {int, int})"); }
		@Test public void test_18958() { testInvalid("((int & any) | {int})","((int & any) | {int, int})"); }
		@Test public void test_18959() { testInvalid("((int & any) | {int})","((any & int) | {int, int})"); }
		@Test public void test_18960() { testInvalid("((int & any) | {int})","((int & int) | {int, int})"); }
		@Test public void test_18961() { testInvalid("((int & any) | {int})","({any} | (any | any))"); }
		@Test public void test_18962() { testInvalid("((int & any) | {int})","(!any | (any | any))"); }
		@Test public void test_18963() { testInvalid("((int & any) | {int})","({any, any} | (any | any))"); }
		@Test public void test_18964() { testInvalid("((int & any) | {int})","({any, int} | (any | any))"); }
		@Test public void test_18965() { testInvalid("((int & any) | {int})","({int, int} | (any | any))"); }
		@Test public void test_18966() { testInvalid("((int & any) | {int})","((int | any) | (any | any))"); }
		@Test public void test_18967() { testInvalid("((int & any) | {int})","((any | int) | (any | any))"); }
		@Test public void test_18968() { testInvalid("((int & any) | {int})","((any & int) | (any | any))"); }
		@Test public void test_18969() { testInvalid("((int & any) | {int})","((int & int) | (any | any))"); }
		@Test public void test_18970() { testInvalid("((int & any) | {int})","({any} | (int | any))"); }
		@Test public void test_18971() { testInvalid("((int & any) | {int})","(!int | (int | any))"); }
		@Test public void test_18972() { testInvalid("((int & any) | {int})","({int, any} | (int | any))"); }
		@Test public void test_18973() { testInvalid("((int & any) | {int})","({any, int} | (int | any))"); }
		@Test public void test_18974() { testInvalid("((int & any) | {int})","((int & any) | (int | any))"); }
		@Test public void test_18975() { testInvalid("((int & any) | {int})","((any & int) | (int | any))"); }
		@Test public void test_18976() { testInvalid("((int & any) | {int})","({any} | (any | int))"); }
		@Test public void test_18977() { testInvalid("((int & any) | {int})","({int} | (any | int))"); }
		@Test public void test_18978() { testInvalid("((int & any) | {int})","(!any | (any | int))"); }
		@Test public void test_18979() { testInvalid("((int & any) | {int})","(!int | (any | int))"); }
		@Test public void test_18980() { testInvalid("((int & any) | {int})","({any, int} | (any | int))"); }
		@Test public void test_18981() { testInvalid("((int & any) | {int})","({int, int} | (any | int))"); }
		@Test public void test_18982() { testInvalid("((int & any) | {int})","((int | any) | (any | int))"); }
		@Test public void test_18983() { testInvalid("((int & any) | {int})","((any | int) | (any | int))"); }
		@Test public void test_18984() { testInvalid("((int & any) | {int})","((int | int) | (any | int))"); }
		@Test public void test_18985() { testInvalid("((int & any) | {int})","((any & any) | (any | int))"); }
		@Test public void test_18986() { testValid("((int & any) | {int})","({int} | (int | int))"); }
		@Test public void test_18987() { testValid("((int & any) | {int})","(!any | (int | int))"); }
		@Test public void test_18988() { testInvalid("((int & any) | {int})","(!int | (int | int))"); }
		@Test public void test_18989() { testInvalid("((int & any) | {int})","({int, any} | (int | int))"); }
		@Test public void test_18990() { testInvalid("((int & any) | {int})","({any, int} | (int | int))"); }
		@Test public void test_18991() { testInvalid("((int & any) | {int})","((any | int) | (int | int))"); }
		@Test public void test_18992() { testValid("((int & any) | {int})","((int | int) | (int | int))"); }
		@Test public void test_18993() { testInvalid("((int & any) | {int})","((any & any) | (int | int))"); }
		@Test public void test_18994() { testValid("((int & any) | {int})","((int & any) | (int | int))"); }
		@Test public void test_18995() { testValid("((int & any) | {int})","((int & int) | (int | int))"); }
		@Test public void test_18996() { testInvalid("((int & any) | {int})","(!any | (any & any))"); }
		@Test public void test_18997() { testInvalid("((int & any) | {int})","(!int | (any & any))"); }
		@Test public void test_18998() { testInvalid("((int & any) | {int})","({any, any} | (any & any))"); }
		@Test public void test_18999() { testInvalid("((int & any) | {int})","({int, any} | (any & any))"); }
		@Test public void test_19000() { testInvalid("((int & any) | {int})","({any, int} | (any & any))"); }
		@Test public void test_19001() { testInvalid("((int & any) | {int})","({int, int} | (any & any))"); }
		@Test public void test_19002() { testInvalid("((int & any) | {int})","((int | any) | (any & any))"); }
		@Test public void test_19003() { testInvalid("((int & any) | {int})","((int | int) | (any & any))"); }
		@Test public void test_19004() { testInvalid("((int & any) | {int})","((int & any) | (any & any))"); }
		@Test public void test_19005() { testInvalid("((int & any) | {int})","((any & int) | (any & any))"); }
		@Test public void test_19006() { testInvalid("((int & any) | {int})","((int & int) | (any & any))"); }
		@Test public void test_19007() { testInvalid("((int & any) | {int})","({any} | (int & any))"); }
		@Test public void test_19008() { testValid("((any & int) | {int})","{int}"); }
		@Test public void test_19009() { testInvalid("((any & int) | {int})","{any, any}"); }
		@Test public void test_19010() { testInvalid("((any & int) | {int})","{int, int}"); }
		@Test public void test_19011() { testInvalid("((any & int) | {int})","(any | int)"); }
		@Test public void test_19012() { testValid("((any & int) | {int})","(int & any)"); }
		@Test public void test_19013() { testInvalid("((any & int) | {int})","{{any}}"); }
		@Test public void test_19014() { testInvalid("((any & int) | {int})","{{int, any}}"); }
		@Test public void test_19015() { testInvalid("((any & int) | {int})","{{int, int}}"); }
		@Test public void test_19016() { testInvalid("((any & int) | {int})","{(any | int)}"); }
		@Test public void test_19017() { testInvalid("((any & int) | {int})","!{int, any}"); }
		@Test public void test_19018() { testInvalid("((any & int) | {int})","!{int, int}"); }
		@Test public void test_19019() { testValid("((any & int) | {int})","!(any | any)"); }
		@Test public void test_19020() { testValid("((any & int) | {int})","!(any & any)"); }
		@Test public void test_19021() { testInvalid("((any & int) | {int})","!(int & int)"); }
		@Test public void test_19022() { testInvalid("((any & int) | {int})","{{int}, {any}}"); }
		@Test public void test_19023() { testInvalid("((any & int) | {int})","{!int, {any}}"); }
		@Test public void test_19024() { testInvalid("((any & int) | {int})","{{int, int}, {any}}"); }
		@Test public void test_19025() { testInvalid("((any & int) | {int})","{(any | int), {any}}"); }
		@Test public void test_19026() { testInvalid("((any & int) | {int})","{!int, {int}}"); }
		@Test public void test_19027() { testInvalid("((any & int) | {int})","{{any, any}, {int}}"); }
		@Test public void test_19028() { testInvalid("((any & int) | {int})","{(any | any), {int}}"); }
		@Test public void test_19029() { testInvalid("((any & int) | {int})","{(any & any), {int}}"); }
		@Test public void test_19030() { testInvalid("((any & int) | {int})","{(any & int), {int}}"); }
		@Test public void test_19031() { testInvalid("((any & int) | {int})","{{any, any}, !int}"); }
		@Test public void test_19032() { testInvalid("((any & int) | {int})","{{any, int}, !int}"); }
		@Test public void test_19033() { testInvalid("((any & int) | {int})","{(any | any), !int}"); }
		@Test public void test_19034() { testInvalid("((any & int) | {int})","{(int | any), !int}"); }
		@Test public void test_19035() { testInvalid("((any & int) | {int})","{(any & any), !int}"); }
		@Test public void test_19036() { testInvalid("((any & int) | {int})","{(int & any), !int}"); }
		@Test public void test_19037() { testInvalid("((any & int) | {int})","{(int & int), !int}"); }
		@Test public void test_19038() { testInvalid("((any & int) | {int})","{{any}, {any, any}}"); }
		@Test public void test_19039() { testInvalid("((any & int) | {int})","{{int}, {any, any}}"); }
		@Test public void test_19040() { testInvalid("((any & int) | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_19041() { testInvalid("((any & int) | {int})","{(any | any), {any, any}}"); }
		@Test public void test_19042() { testInvalid("((any & int) | {int})","{(any | int), {any, any}}"); }
		@Test public void test_19043() { testInvalid("((any & int) | {int})","{!int, {int, any}}"); }
		@Test public void test_19044() { testInvalid("((any & int) | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_19045() { testInvalid("((any & int) | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_19046() { testInvalid("((any & int) | {int})","{(any & int), {int, any}}"); }
		@Test public void test_19047() { testInvalid("((any & int) | {int})","{{any}, {any, int}}"); }
		@Test public void test_19048() { testInvalid("((any & int) | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_19049() { testInvalid("((any & int) | {int})","{(int | int), {any, int}}"); }
		@Test public void test_19050() { testInvalid("((any & int) | {int})","{(any & int), {any, int}}"); }
		@Test public void test_19051() { testInvalid("((any & int) | {int})","{!int, {int, int}}"); }
		@Test public void test_19052() { testInvalid("((any & int) | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_19053() { testInvalid("((any & int) | {int})","{(any | any), {int, int}}"); }
		@Test public void test_19054() { testInvalid("((any & int) | {int})","{(int | any), {int, int}}"); }
		@Test public void test_19055() { testInvalid("((any & int) | {int})","{(int & any), {int, int}}"); }
		@Test public void test_19056() { testInvalid("((any & int) | {int})","{{int}, (any | any)}"); }
		@Test public void test_19057() { testInvalid("((any & int) | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_19058() { testInvalid("((any & int) | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_19059() { testInvalid("((any & int) | {int})","{(any | any), (any | any)}"); }
		@Test public void test_19060() { testInvalid("((any & int) | {int})","{(int | any), (any | any)}"); }
		@Test public void test_19061() { testInvalid("((any & int) | {int})","{(int & int), (any | any)}"); }
		@Test public void test_19062() { testInvalid("((any & int) | {int})","{!int, (int | any)}"); }
		@Test public void test_19063() { testInvalid("((any & int) | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_19064() { testInvalid("((any & int) | {int})","{(any | any), (int | any)}"); }
		@Test public void test_19065() { testInvalid("((any & int) | {int})","{(int | int), (int | any)}"); }
		@Test public void test_19066() { testInvalid("((any & int) | {int})","{{any}, (any | int)}"); }
		@Test public void test_19067() { testInvalid("((any & int) | {int})","{!int, (any | int)}"); }
		@Test public void test_19068() { testInvalid("((any & int) | {int})","{(any | any), (any | int)}"); }
		@Test public void test_19069() { testInvalid("((any & int) | {int})","{(any | int), (any | int)}"); }
		@Test public void test_19070() { testInvalid("((any & int) | {int})","{(any & int), (any | int)}"); }
		@Test public void test_19071() { testInvalid("((any & int) | {int})","{{int}, (int | int)}"); }
		@Test public void test_19072() { testInvalid("((any & int) | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_19073() { testInvalid("((any & int) | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_19074() { testInvalid("((any & int) | {int})","{{int}, (any & any)}"); }
		@Test public void test_19075() { testInvalid("((any & int) | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_19076() { testInvalid("((any & int) | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_19077() { testInvalid("((any & int) | {int})","{(int | any), (any & any)}"); }
		@Test public void test_19078() { testInvalid("((any & int) | {int})","{(any & any), (any & any)}"); }
		@Test public void test_19079() { testInvalid("((any & int) | {int})","{(int & any), (any & any)}"); }
		@Test public void test_19080() { testInvalid("((any & int) | {int})","{{any}, (int & any)}"); }
		@Test public void test_19081() { testInvalid("((any & int) | {int})","{{int}, (int & any)}"); }
		@Test public void test_19082() { testInvalid("((any & int) | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_19083() { testInvalid("((any & int) | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_19084() { testInvalid("((any & int) | {int})","{(any | int), (int & any)}"); }
		@Test public void test_19085() { testInvalid("((any & int) | {int})","{(any & any), (int & any)}"); }
		@Test public void test_19086() { testInvalid("((any & int) | {int})","{(int & any), (int & any)}"); }
		@Test public void test_19087() { testInvalid("((any & int) | {int})","{(int & int), (int & any)}"); }
		@Test public void test_19088() { testInvalid("((any & int) | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_19089() { testInvalid("((any & int) | {int})","{(any & any), (any & int)}"); }
		@Test public void test_19090() { testInvalid("((any & int) | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_19091() { testInvalid("((any & int) | {int})","{(int | int), (int & int)}"); }
		@Test public void test_19092() { testInvalid("((any & int) | {int})","{(any & any), (int & int)}"); }
		@Test public void test_19093() { testInvalid("((any & int) | {int})","{(any & int), (int & int)}"); }
		@Test public void test_19094() { testInvalid("((any & int) | {int})","{(int & int), (int & int)}"); }
		@Test public void test_19095() { testInvalid("((any & int) | {int})","(!int | {any})"); }
		@Test public void test_19096() { testInvalid("((any & int) | {int})","({any, any} | {any})"); }
		@Test public void test_19097() { testInvalid("((any & int) | {int})","((any | any) | {any})"); }
		@Test public void test_19098() { testInvalid("((any & int) | {int})","((int | any) | {any})"); }
		@Test public void test_19099() { testInvalid("((any & int) | {int})","((any & any) | {any})"); }
		@Test public void test_19100() { testInvalid("((any & int) | {int})","((int & any) | {any})"); }
		@Test public void test_19101() { testInvalid("((any & int) | {int})","((any & int) | {any})"); }
		@Test public void test_19102() { testValid("((any & int) | {int})","({int} | {int})"); }
		@Test public void test_19103() { testValid("((any & int) | {int})","(!any | {int})"); }
		@Test public void test_19104() { testInvalid("((any & int) | {int})","(!int | {int})"); }
		@Test public void test_19105() { testInvalid("((any & int) | {int})","({any, int} | {int})"); }
		@Test public void test_19106() { testValid("((any & int) | {int})","((int & any) | {int})"); }
		@Test public void test_19107() { testValid("((any & int) | {int})","((any & int) | {int})"); }
		@Test public void test_19108() { testValid("((any & int) | {int})","((int & int) | {int})"); }
		@Test public void test_19109() { testInvalid("((any & int) | {int})","({any} | !any)"); }
		@Test public void test_19110() { testValid("((any & int) | {int})","({int} | !any)"); }
		@Test public void test_19111() { testInvalid("((any & int) | {int})","({any, any} | !any)"); }
		@Test public void test_19112() { testInvalid("((any & int) | {int})","({int, int} | !any)"); }
		@Test public void test_19113() { testInvalid("((any & int) | {int})","((any | any) | !any)"); }
		@Test public void test_19114() { testInvalid("((any & int) | {int})","((int | any) | !any)"); }
		@Test public void test_19115() { testValid("((any & int) | {int})","((int | int) | !any)"); }
		@Test public void test_19116() { testValid("((any & int) | {int})","((int & int) | !any)"); }
		@Test public void test_19117() { testInvalid("((any & int) | {int})","(!int | !int)"); }
		@Test public void test_19118() { testInvalid("((any & int) | {int})","({any, any} | !int)"); }
		@Test public void test_19119() { testInvalid("((any & int) | {int})","({int, int} | !int)"); }
		@Test public void test_19120() { testInvalid("((any & int) | {int})","((int | any) | !int)"); }
		@Test public void test_19121() { testInvalid("((any & int) | {int})","((any | int) | !int)"); }
		@Test public void test_19122() { testInvalid("((any & int) | {int})","((any & int) | !int)"); }
		@Test public void test_19123() { testInvalid("((any & int) | {int})","((int & int) | !int)"); }
		@Test public void test_19124() { testInvalid("((any & int) | {int})","({int} | {any, any})"); }
		@Test public void test_19125() { testInvalid("((any & int) | {int})","(!any | {any, any})"); }
		@Test public void test_19126() { testInvalid("((any & int) | {int})","(!int | {any, any})"); }
		@Test public void test_19127() { testInvalid("((any & int) | {int})","({any, int} | {any, any})"); }
		@Test public void test_19128() { testInvalid("((any & int) | {int})","((int | any) | {any, any})"); }
		@Test public void test_19129() { testInvalid("((any & int) | {int})","((any & any) | {any, any})"); }
		@Test public void test_19130() { testInvalid("((any & int) | {int})","((any & int) | {any, any})"); }
		@Test public void test_19131() { testInvalid("((any & int) | {int})","(!int | {int, any})"); }
		@Test public void test_19132() { testInvalid("((any & int) | {int})","({any, int} | {int, any})"); }
		@Test public void test_19133() { testInvalid("((any & int) | {int})","((any | any) | {int, any})"); }
		@Test public void test_19134() { testInvalid("((any & int) | {int})","((int | any) | {int, any})"); }
		@Test public void test_19135() { testInvalid("((any & int) | {int})","((any | int) | {int, any})"); }
		@Test public void test_19136() { testInvalid("((any & int) | {int})","((int & any) | {int, any})"); }
		@Test public void test_19137() { testInvalid("((any & int) | {int})","({any} | {any, int})"); }
		@Test public void test_19138() { testInvalid("((any & int) | {int})","(!int | {any, int})"); }
		@Test public void test_19139() { testInvalid("((any & int) | {int})","({any, int} | {any, int})"); }
		@Test public void test_19140() { testInvalid("((any & int) | {int})","((any | any) | {any, int})"); }
		@Test public void test_19141() { testInvalid("((any & int) | {int})","((any | int) | {any, int})"); }
		@Test public void test_19142() { testInvalid("((any & int) | {int})","((int | int) | {any, int})"); }
		@Test public void test_19143() { testInvalid("((any & int) | {int})","((int & any) | {any, int})"); }
		@Test public void test_19144() { testInvalid("((any & int) | {int})","(!any | {int, int})"); }
		@Test public void test_19145() { testInvalid("((any & int) | {int})","(!int | {int, int})"); }
		@Test public void test_19146() { testInvalid("((any & int) | {int})","({any, any} | {int, int})"); }
		@Test public void test_19147() { testInvalid("((any & int) | {int})","({any, int} | {int, int})"); }
		@Test public void test_19148() { testInvalid("((any & int) | {int})","((any | any) | {int, int})"); }
		@Test public void test_19149() { testInvalid("((any & int) | {int})","((int | int) | {int, int})"); }
		@Test public void test_19150() { testInvalid("((any & int) | {int})","((int & any) | {int, int})"); }
		@Test public void test_19151() { testInvalid("((any & int) | {int})","((any & int) | {int, int})"); }
		@Test public void test_19152() { testInvalid("((any & int) | {int})","((int & int) | {int, int})"); }
		@Test public void test_19153() { testInvalid("((any & int) | {int})","({any} | (any | any))"); }
		@Test public void test_19154() { testInvalid("((any & int) | {int})","(!any | (any | any))"); }
		@Test public void test_19155() { testInvalid("((any & int) | {int})","({any, any} | (any | any))"); }
		@Test public void test_19156() { testInvalid("((any & int) | {int})","({any, int} | (any | any))"); }
		@Test public void test_19157() { testInvalid("((any & int) | {int})","({int, int} | (any | any))"); }
		@Test public void test_19158() { testInvalid("((any & int) | {int})","((int | any) | (any | any))"); }
		@Test public void test_19159() { testInvalid("((any & int) | {int})","((any | int) | (any | any))"); }
		@Test public void test_19160() { testInvalid("((any & int) | {int})","((any & int) | (any | any))"); }
		@Test public void test_19161() { testInvalid("((any & int) | {int})","((int & int) | (any | any))"); }
		@Test public void test_19162() { testInvalid("((any & int) | {int})","({any} | (int | any))"); }
		@Test public void test_19163() { testInvalid("((any & int) | {int})","(!int | (int | any))"); }
		@Test public void test_19164() { testInvalid("((any & int) | {int})","({int, any} | (int | any))"); }
		@Test public void test_19165() { testInvalid("((any & int) | {int})","({any, int} | (int | any))"); }
		@Test public void test_19166() { testInvalid("((any & int) | {int})","((int & any) | (int | any))"); }
		@Test public void test_19167() { testInvalid("((any & int) | {int})","((any & int) | (int | any))"); }
		@Test public void test_19168() { testInvalid("((any & int) | {int})","({any} | (any | int))"); }
		@Test public void test_19169() { testInvalid("((any & int) | {int})","({int} | (any | int))"); }
		@Test public void test_19170() { testInvalid("((any & int) | {int})","(!any | (any | int))"); }
		@Test public void test_19171() { testInvalid("((any & int) | {int})","(!int | (any | int))"); }
		@Test public void test_19172() { testInvalid("((any & int) | {int})","({any, int} | (any | int))"); }
		@Test public void test_19173() { testInvalid("((any & int) | {int})","({int, int} | (any | int))"); }
		@Test public void test_19174() { testInvalid("((any & int) | {int})","((int | any) | (any | int))"); }
		@Test public void test_19175() { testInvalid("((any & int) | {int})","((any | int) | (any | int))"); }
		@Test public void test_19176() { testInvalid("((any & int) | {int})","((int | int) | (any | int))"); }
		@Test public void test_19177() { testInvalid("((any & int) | {int})","((any & any) | (any | int))"); }
		@Test public void test_19178() { testValid("((any & int) | {int})","({int} | (int | int))"); }
		@Test public void test_19179() { testValid("((any & int) | {int})","(!any | (int | int))"); }
		@Test public void test_19180() { testInvalid("((any & int) | {int})","(!int | (int | int))"); }
		@Test public void test_19181() { testInvalid("((any & int) | {int})","({int, any} | (int | int))"); }
		@Test public void test_19182() { testInvalid("((any & int) | {int})","({any, int} | (int | int))"); }
		@Test public void test_19183() { testInvalid("((any & int) | {int})","((any | int) | (int | int))"); }
		@Test public void test_19184() { testValid("((any & int) | {int})","((int | int) | (int | int))"); }
		@Test public void test_19185() { testInvalid("((any & int) | {int})","((any & any) | (int | int))"); }
		@Test public void test_19186() { testValid("((any & int) | {int})","((int & any) | (int | int))"); }
		@Test public void test_19187() { testValid("((any & int) | {int})","((int & int) | (int | int))"); }
		@Test public void test_19188() { testInvalid("((any & int) | {int})","(!any | (any & any))"); }
		@Test public void test_19189() { testInvalid("((any & int) | {int})","(!int | (any & any))"); }
		@Test public void test_19190() { testInvalid("((any & int) | {int})","({any, any} | (any & any))"); }
		@Test public void test_19191() { testInvalid("((any & int) | {int})","({int, any} | (any & any))"); }
		@Test public void test_19192() { testInvalid("((any & int) | {int})","({any, int} | (any & any))"); }
		@Test public void test_19193() { testInvalid("((any & int) | {int})","({int, int} | (any & any))"); }
		@Test public void test_19194() { testInvalid("((any & int) | {int})","((int | any) | (any & any))"); }
		@Test public void test_19195() { testInvalid("((any & int) | {int})","((int | int) | (any & any))"); }
		@Test public void test_19196() { testInvalid("((any & int) | {int})","((int & any) | (any & any))"); }
		@Test public void test_19197() { testInvalid("((any & int) | {int})","((any & int) | (any & any))"); }
		@Test public void test_19198() { testInvalid("((any & int) | {int})","((int & int) | (any & any))"); }
		@Test public void test_19199() { testInvalid("((any & int) | {int})","({any} | (int & any))"); }
		@Test public void test_19200() { testValid("((int & int) | {int})","{int}"); }
		@Test public void test_19201() { testInvalid("((int & int) | {int})","{any, any}"); }
		@Test public void test_19202() { testInvalid("((int & int) | {int})","{int, int}"); }
		@Test public void test_19203() { testInvalid("((int & int) | {int})","(any | int)"); }
		@Test public void test_19204() { testValid("((int & int) | {int})","(int & any)"); }
		@Test public void test_19205() { testInvalid("((int & int) | {int})","{{any}}"); }
		@Test public void test_19206() { testInvalid("((int & int) | {int})","{{int, any}}"); }
		@Test public void test_19207() { testInvalid("((int & int) | {int})","{{int, int}}"); }
		@Test public void test_19208() { testInvalid("((int & int) | {int})","{(any | int)}"); }
		@Test public void test_19209() { testInvalid("((int & int) | {int})","!{int, any}"); }
		@Test public void test_19210() { testInvalid("((int & int) | {int})","!{int, int}"); }
		@Test public void test_19211() { testValid("((int & int) | {int})","!(any | any)"); }
		@Test public void test_19212() { testValid("((int & int) | {int})","!(any & any)"); }
		@Test public void test_19213() { testInvalid("((int & int) | {int})","!(int & int)"); }
		@Test public void test_19214() { testInvalid("((int & int) | {int})","{{int}, {any}}"); }
		@Test public void test_19215() { testInvalid("((int & int) | {int})","{!int, {any}}"); }
		@Test public void test_19216() { testInvalid("((int & int) | {int})","{{int, int}, {any}}"); }
		@Test public void test_19217() { testInvalid("((int & int) | {int})","{(any | int), {any}}"); }
		@Test public void test_19218() { testInvalid("((int & int) | {int})","{!int, {int}}"); }
		@Test public void test_19219() { testInvalid("((int & int) | {int})","{{any, any}, {int}}"); }
		@Test public void test_19220() { testInvalid("((int & int) | {int})","{(any | any), {int}}"); }
		@Test public void test_19221() { testInvalid("((int & int) | {int})","{(any & any), {int}}"); }
		@Test public void test_19222() { testInvalid("((int & int) | {int})","{(any & int), {int}}"); }
		@Test public void test_19223() { testInvalid("((int & int) | {int})","{{any, any}, !int}"); }
		@Test public void test_19224() { testInvalid("((int & int) | {int})","{{any, int}, !int}"); }
		@Test public void test_19225() { testInvalid("((int & int) | {int})","{(any | any), !int}"); }
		@Test public void test_19226() { testInvalid("((int & int) | {int})","{(int | any), !int}"); }
		@Test public void test_19227() { testInvalid("((int & int) | {int})","{(any & any), !int}"); }
		@Test public void test_19228() { testInvalid("((int & int) | {int})","{(int & any), !int}"); }
		@Test public void test_19229() { testInvalid("((int & int) | {int})","{(int & int), !int}"); }
		@Test public void test_19230() { testInvalid("((int & int) | {int})","{{any}, {any, any}}"); }
		@Test public void test_19231() { testInvalid("((int & int) | {int})","{{int}, {any, any}}"); }
		@Test public void test_19232() { testInvalid("((int & int) | {int})","{{int, int}, {any, any}}"); }
		@Test public void test_19233() { testInvalid("((int & int) | {int})","{(any | any), {any, any}}"); }
		@Test public void test_19234() { testInvalid("((int & int) | {int})","{(any | int), {any, any}}"); }
		@Test public void test_19235() { testInvalid("((int & int) | {int})","{!int, {int, any}}"); }
		@Test public void test_19236() { testInvalid("((int & int) | {int})","{{int, any}, {int, any}}"); }
		@Test public void test_19237() { testInvalid("((int & int) | {int})","{{any, int}, {int, any}}"); }
		@Test public void test_19238() { testInvalid("((int & int) | {int})","{(any & int), {int, any}}"); }
		@Test public void test_19239() { testInvalid("((int & int) | {int})","{{any}, {any, int}}"); }
		@Test public void test_19240() { testInvalid("((int & int) | {int})","{{int, int}, {any, int}}"); }
		@Test public void test_19241() { testInvalid("((int & int) | {int})","{(int | int), {any, int}}"); }
		@Test public void test_19242() { testInvalid("((int & int) | {int})","{(any & int), {any, int}}"); }
		@Test public void test_19243() { testInvalid("((int & int) | {int})","{!int, {int, int}}"); }
		@Test public void test_19244() { testInvalid("((int & int) | {int})","{{int, int}, {int, int}}"); }
		@Test public void test_19245() { testInvalid("((int & int) | {int})","{(any | any), {int, int}}"); }
		@Test public void test_19246() { testInvalid("((int & int) | {int})","{(int | any), {int, int}}"); }
		@Test public void test_19247() { testInvalid("((int & int) | {int})","{(int & any), {int, int}}"); }
		@Test public void test_19248() { testInvalid("((int & int) | {int})","{{int}, (any | any)}"); }
		@Test public void test_19249() { testInvalid("((int & int) | {int})","{{int, any}, (any | any)}"); }
		@Test public void test_19250() { testInvalid("((int & int) | {int})","{{any, int}, (any | any)}"); }
		@Test public void test_19251() { testInvalid("((int & int) | {int})","{(any | any), (any | any)}"); }
		@Test public void test_19252() { testInvalid("((int & int) | {int})","{(int | any), (any | any)}"); }
		@Test public void test_19253() { testInvalid("((int & int) | {int})","{(int & int), (any | any)}"); }
		@Test public void test_19254() { testInvalid("((int & int) | {int})","{!int, (int | any)}"); }
		@Test public void test_19255() { testInvalid("((int & int) | {int})","{{int, int}, (int | any)}"); }
		@Test public void test_19256() { testInvalid("((int & int) | {int})","{(any | any), (int | any)}"); }
		@Test public void test_19257() { testInvalid("((int & int) | {int})","{(int | int), (int | any)}"); }
		@Test public void test_19258() { testInvalid("((int & int) | {int})","{{any}, (any | int)}"); }
		@Test public void test_19259() { testInvalid("((int & int) | {int})","{!int, (any | int)}"); }
		@Test public void test_19260() { testInvalid("((int & int) | {int})","{(any | any), (any | int)}"); }
		@Test public void test_19261() { testInvalid("((int & int) | {int})","{(any | int), (any | int)}"); }
		@Test public void test_19262() { testInvalid("((int & int) | {int})","{(any & int), (any | int)}"); }
		@Test public void test_19263() { testInvalid("((int & int) | {int})","{{int}, (int | int)}"); }
		@Test public void test_19264() { testInvalid("((int & int) | {int})","{{any, any}, (int | int)}"); }
		@Test public void test_19265() { testInvalid("((int & int) | {int})","{{int, int}, (int | int)}"); }
		@Test public void test_19266() { testInvalid("((int & int) | {int})","{{int}, (any & any)}"); }
		@Test public void test_19267() { testInvalid("((int & int) | {int})","{{int, any}, (any & any)}"); }
		@Test public void test_19268() { testInvalid("((int & int) | {int})","{{any, int}, (any & any)}"); }
		@Test public void test_19269() { testInvalid("((int & int) | {int})","{(int | any), (any & any)}"); }
		@Test public void test_19270() { testInvalid("((int & int) | {int})","{(any & any), (any & any)}"); }
		@Test public void test_19271() { testInvalid("((int & int) | {int})","{(int & any), (any & any)}"); }
		@Test public void test_19272() { testInvalid("((int & int) | {int})","{{any}, (int & any)}"); }
		@Test public void test_19273() { testInvalid("((int & int) | {int})","{{int}, (int & any)}"); }
		@Test public void test_19274() { testInvalid("((int & int) | {int})","{{any, any}, (int & any)}"); }
		@Test public void test_19275() { testInvalid("((int & int) | {int})","{{int, any}, (int & any)}"); }
		@Test public void test_19276() { testInvalid("((int & int) | {int})","{(any | int), (int & any)}"); }
		@Test public void test_19277() { testInvalid("((int & int) | {int})","{(any & any), (int & any)}"); }
		@Test public void test_19278() { testInvalid("((int & int) | {int})","{(int & any), (int & any)}"); }
		@Test public void test_19279() { testInvalid("((int & int) | {int})","{(int & int), (int & any)}"); }
		@Test public void test_19280() { testInvalid("((int & int) | {int})","{{int, any}, (any & int)}"); }
		@Test public void test_19281() { testInvalid("((int & int) | {int})","{(any & any), (any & int)}"); }
		@Test public void test_19282() { testInvalid("((int & int) | {int})","{{any, int}, (int & int)}"); }
		@Test public void test_19283() { testInvalid("((int & int) | {int})","{(int | int), (int & int)}"); }
		@Test public void test_19284() { testInvalid("((int & int) | {int})","{(any & any), (int & int)}"); }
		@Test public void test_19285() { testInvalid("((int & int) | {int})","{(any & int), (int & int)}"); }
		@Test public void test_19286() { testInvalid("((int & int) | {int})","{(int & int), (int & int)}"); }
		@Test public void test_19287() { testInvalid("((int & int) | {int})","(!int | {any})"); }
		@Test public void test_19288() { testInvalid("((int & int) | {int})","({any, any} | {any})"); }
		@Test public void test_19289() { testInvalid("((int & int) | {int})","((any | any) | {any})"); }
		@Test public void test_19290() { testInvalid("((int & int) | {int})","((int | any) | {any})"); }
		@Test public void test_19291() { testInvalid("((int & int) | {int})","((any & any) | {any})"); }
		@Test public void test_19292() { testInvalid("((int & int) | {int})","((int & any) | {any})"); }
		@Test public void test_19293() { testInvalid("((int & int) | {int})","((any & int) | {any})"); }
		@Test public void test_19294() { testValid("((int & int) | {int})","({int} | {int})"); }
		@Test public void test_19295() { testValid("((int & int) | {int})","(!any | {int})"); }
		@Test public void test_19296() { testInvalid("((int & int) | {int})","(!int | {int})"); }
		@Test public void test_19297() { testInvalid("((int & int) | {int})","({any, int} | {int})"); }
		@Test public void test_19298() { testValid("((int & int) | {int})","((int & any) | {int})"); }
		@Test public void test_19299() { testValid("((int & int) | {int})","((any & int) | {int})"); }
		@Test public void test_19300() { testValid("((int & int) | {int})","((int & int) | {int})"); }
		@Test public void test_19301() { testInvalid("((int & int) | {int})","({any} | !any)"); }
		@Test public void test_19302() { testValid("((int & int) | {int})","({int} | !any)"); }
		@Test public void test_19303() { testInvalid("((int & int) | {int})","({any, any} | !any)"); }
		@Test public void test_19304() { testInvalid("((int & int) | {int})","({int, int} | !any)"); }
		@Test public void test_19305() { testInvalid("((int & int) | {int})","((any | any) | !any)"); }
		@Test public void test_19306() { testInvalid("((int & int) | {int})","((int | any) | !any)"); }
		@Test public void test_19307() { testValid("((int & int) | {int})","((int | int) | !any)"); }
		@Test public void test_19308() { testValid("((int & int) | {int})","((int & int) | !any)"); }
		@Test public void test_19309() { testInvalid("((int & int) | {int})","(!int | !int)"); }
		@Test public void test_19310() { testInvalid("((int & int) | {int})","({any, any} | !int)"); }
		@Test public void test_19311() { testInvalid("((int & int) | {int})","({int, int} | !int)"); }
		@Test public void test_19312() { testInvalid("((int & int) | {int})","((int | any) | !int)"); }
		@Test public void test_19313() { testInvalid("((int & int) | {int})","((any | int) | !int)"); }
		@Test public void test_19314() { testInvalid("((int & int) | {int})","((any & int) | !int)"); }
		@Test public void test_19315() { testInvalid("((int & int) | {int})","((int & int) | !int)"); }
		@Test public void test_19316() { testInvalid("((int & int) | {int})","({int} | {any, any})"); }
		@Test public void test_19317() { testInvalid("((int & int) | {int})","(!any | {any, any})"); }
		@Test public void test_19318() { testInvalid("((int & int) | {int})","(!int | {any, any})"); }
		@Test public void test_19319() { testInvalid("((int & int) | {int})","({any, int} | {any, any})"); }
		@Test public void test_19320() { testInvalid("((int & int) | {int})","((int | any) | {any, any})"); }
		@Test public void test_19321() { testInvalid("((int & int) | {int})","((any & any) | {any, any})"); }
		@Test public void test_19322() { testInvalid("((int & int) | {int})","((any & int) | {any, any})"); }
		@Test public void test_19323() { testInvalid("((int & int) | {int})","(!int | {int, any})"); }
		@Test public void test_19324() { testInvalid("((int & int) | {int})","({any, int} | {int, any})"); }
		@Test public void test_19325() { testInvalid("((int & int) | {int})","((any | any) | {int, any})"); }
		@Test public void test_19326() { testInvalid("((int & int) | {int})","((int | any) | {int, any})"); }
		@Test public void test_19327() { testInvalid("((int & int) | {int})","((any | int) | {int, any})"); }
		@Test public void test_19328() { testInvalid("((int & int) | {int})","((int & any) | {int, any})"); }
		@Test public void test_19329() { testInvalid("((int & int) | {int})","({any} | {any, int})"); }
		@Test public void test_19330() { testInvalid("((int & int) | {int})","(!int | {any, int})"); }
		@Test public void test_19331() { testInvalid("((int & int) | {int})","({any, int} | {any, int})"); }
		@Test public void test_19332() { testInvalid("((int & int) | {int})","((any | any) | {any, int})"); }
		@Test public void test_19333() { testInvalid("((int & int) | {int})","((any | int) | {any, int})"); }
		@Test public void test_19334() { testInvalid("((int & int) | {int})","((int | int) | {any, int})"); }
		@Test public void test_19335() { testInvalid("((int & int) | {int})","((int & any) | {any, int})"); }
		@Test public void test_19336() { testInvalid("((int & int) | {int})","(!any | {int, int})"); }
		@Test public void test_19337() { testInvalid("((int & int) | {int})","(!int | {int, int})"); }
		@Test public void test_19338() { testInvalid("((int & int) | {int})","({any, any} | {int, int})"); }
		@Test public void test_19339() { testInvalid("((int & int) | {int})","({any, int} | {int, int})"); }
		@Test public void test_19340() { testInvalid("((int & int) | {int})","((any | any) | {int, int})"); }
		@Test public void test_19341() { testInvalid("((int & int) | {int})","((int | int) | {int, int})"); }
		@Test public void test_19342() { testInvalid("((int & int) | {int})","((int & any) | {int, int})"); }
		@Test public void test_19343() { testInvalid("((int & int) | {int})","((any & int) | {int, int})"); }
		@Test public void test_19344() { testInvalid("((int & int) | {int})","((int & int) | {int, int})"); }
		@Test public void test_19345() { testInvalid("((int & int) | {int})","({any} | (any | any))"); }
		@Test public void test_19346() { testInvalid("((int & int) | {int})","(!any | (any | any))"); }
		@Test public void test_19347() { testInvalid("((int & int) | {int})","({any, any} | (any | any))"); }
		@Test public void test_19348() { testInvalid("((int & int) | {int})","({any, int} | (any | any))"); }
		@Test public void test_19349() { testInvalid("((int & int) | {int})","({int, int} | (any | any))"); }
		@Test public void test_19350() { testInvalid("((int & int) | {int})","((int | any) | (any | any))"); }
		@Test public void test_19351() { testInvalid("((int & int) | {int})","((any | int) | (any | any))"); }
		@Test public void test_19352() { testInvalid("((int & int) | {int})","((any & int) | (any | any))"); }
		@Test public void test_19353() { testInvalid("((int & int) | {int})","((int & int) | (any | any))"); }
		@Test public void test_19354() { testInvalid("((int & int) | {int})","({any} | (int | any))"); }
		@Test public void test_19355() { testInvalid("((int & int) | {int})","(!int | (int | any))"); }
		@Test public void test_19356() { testInvalid("((int & int) | {int})","({int, any} | (int | any))"); }
		@Test public void test_19357() { testInvalid("((int & int) | {int})","({any, int} | (int | any))"); }
		@Test public void test_19358() { testInvalid("((int & int) | {int})","((int & any) | (int | any))"); }
		@Test public void test_19359() { testInvalid("((int & int) | {int})","((any & int) | (int | any))"); }
		@Test public void test_19360() { testInvalid("((int & int) | {int})","({any} | (any | int))"); }
		@Test public void test_19361() { testInvalid("((int & int) | {int})","({int} | (any | int))"); }
		@Test public void test_19362() { testInvalid("((int & int) | {int})","(!any | (any | int))"); }
		@Test public void test_19363() { testInvalid("((int & int) | {int})","(!int | (any | int))"); }
		@Test public void test_19364() { testInvalid("((int & int) | {int})","({any, int} | (any | int))"); }
		@Test public void test_19365() { testInvalid("((int & int) | {int})","({int, int} | (any | int))"); }
		@Test public void test_19366() { testInvalid("((int & int) | {int})","((int | any) | (any | int))"); }
		@Test public void test_19367() { testInvalid("((int & int) | {int})","((any | int) | (any | int))"); }
		@Test public void test_19368() { testInvalid("((int & int) | {int})","((int | int) | (any | int))"); }
		@Test public void test_19369() { testInvalid("((int & int) | {int})","((any & any) | (any | int))"); }
		@Test public void test_19370() { testValid("((int & int) | {int})","({int} | (int | int))"); }
		@Test public void test_19371() { testValid("((int & int) | {int})","(!any | (int | int))"); }
		@Test public void test_19372() { testInvalid("((int & int) | {int})","(!int | (int | int))"); }
		@Test public void test_19373() { testInvalid("((int & int) | {int})","({int, any} | (int | int))"); }
		@Test public void test_19374() { testInvalid("((int & int) | {int})","({any, int} | (int | int))"); }
		@Test public void test_19375() { testInvalid("((int & int) | {int})","((any | int) | (int | int))"); }
		@Test public void test_19376() { testValid("((int & int) | {int})","((int | int) | (int | int))"); }
		@Test public void test_19377() { testInvalid("((int & int) | {int})","((any & any) | (int | int))"); }
		@Test public void test_19378() { testValid("((int & int) | {int})","((int & any) | (int | int))"); }
		@Test public void test_19379() { testValid("((int & int) | {int})","((int & int) | (int | int))"); }
		@Test public void test_19380() { testInvalid("((int & int) | {int})","(!any | (any & any))"); }
		@Test public void test_19381() { testInvalid("((int & int) | {int})","(!int | (any & any))"); }
		@Test public void test_19382() { testInvalid("((int & int) | {int})","({any, any} | (any & any))"); }
		@Test public void test_19383() { testInvalid("((int & int) | {int})","({int, any} | (any & any))"); }
		@Test public void test_19384() { testInvalid("((int & int) | {int})","({any, int} | (any & any))"); }
		@Test public void test_19385() { testInvalid("((int & int) | {int})","({int, int} | (any & any))"); }
		@Test public void test_19386() { testInvalid("((int & int) | {int})","((int | any) | (any & any))"); }
		@Test public void test_19387() { testInvalid("((int & int) | {int})","((int | int) | (any & any))"); }
		@Test public void test_19388() { testInvalid("((int & int) | {int})","((int & any) | (any & any))"); }
		@Test public void test_19389() { testInvalid("((int & int) | {int})","((any & int) | (any & any))"); }
		@Test public void test_19390() { testInvalid("((int & int) | {int})","((int & int) | (any & any))"); }
		@Test public void test_19391() { testInvalid("((int & int) | {int})","({any} | (int & any))"); }
		@Test public void test_19392() { testValid("({any} | !any)","{int}"); }
		@Test public void test_19393() { testInvalid("({any} | !any)","{any, any}"); }
		@Test public void test_19394() { testInvalid("({any} | !any)","{int, int}"); }
		@Test public void test_19395() { testInvalid("({any} | !any)","(any | int)"); }
		@Test public void test_19396() { testInvalid("({any} | !any)","(int & any)"); }
		@Test public void test_19397() { testValid("({any} | !any)","{{any}}"); }
		@Test public void test_19398() { testValid("({any} | !any)","{{int, any}}"); }
		@Test public void test_19399() { testValid("({any} | !any)","{{int, int}}"); }
		@Test public void test_19400() { testValid("({any} | !any)","{(any | int)}"); }
		@Test public void test_19401() { testInvalid("({any} | !any)","!{int, any}"); }
		@Test public void test_19402() { testInvalid("({any} | !any)","!{int, int}"); }
		@Test public void test_19403() { testValid("({any} | !any)","!(any | any)"); }
		@Test public void test_19404() { testValid("({any} | !any)","!(any & any)"); }
		@Test public void test_19405() { testInvalid("({any} | !any)","!(int & int)"); }
		@Test public void test_19406() { testInvalid("({any} | !any)","{{int}, {any}}"); }
		@Test public void test_19407() { testInvalid("({any} | !any)","{!int, {any}}"); }
		@Test public void test_19408() { testInvalid("({any} | !any)","{{int, int}, {any}}"); }
		@Test public void test_19409() { testInvalid("({any} | !any)","{(any | int), {any}}"); }
		@Test public void test_19410() { testInvalid("({any} | !any)","{!int, {int}}"); }
		@Test public void test_19411() { testInvalid("({any} | !any)","{{any, any}, {int}}"); }
		@Test public void test_19412() { testInvalid("({any} | !any)","{(any | any), {int}}"); }
		@Test public void test_19413() { testInvalid("({any} | !any)","{(any & any), {int}}"); }
		@Test public void test_19414() { testInvalid("({any} | !any)","{(any & int), {int}}"); }
		@Test public void test_19415() { testInvalid("({any} | !any)","{{any, any}, !int}"); }
		@Test public void test_19416() { testInvalid("({any} | !any)","{{any, int}, !int}"); }
		@Test public void test_19417() { testInvalid("({any} | !any)","{(any | any), !int}"); }
		@Test public void test_19418() { testInvalid("({any} | !any)","{(int | any), !int}"); }
		@Test public void test_19419() { testInvalid("({any} | !any)","{(any & any), !int}"); }
		@Test public void test_19420() { testInvalid("({any} | !any)","{(int & any), !int}"); }
		@Test public void test_19421() { testInvalid("({any} | !any)","{(int & int), !int}"); }
		@Test public void test_19422() { testInvalid("({any} | !any)","{{any}, {any, any}}"); }
		@Test public void test_19423() { testInvalid("({any} | !any)","{{int}, {any, any}}"); }
		@Test public void test_19424() { testInvalid("({any} | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_19425() { testInvalid("({any} | !any)","{(any | any), {any, any}}"); }
		@Test public void test_19426() { testInvalid("({any} | !any)","{(any | int), {any, any}}"); }
		@Test public void test_19427() { testInvalid("({any} | !any)","{!int, {int, any}}"); }
		@Test public void test_19428() { testInvalid("({any} | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_19429() { testInvalid("({any} | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_19430() { testInvalid("({any} | !any)","{(any & int), {int, any}}"); }
		@Test public void test_19431() { testInvalid("({any} | !any)","{{any}, {any, int}}"); }
		@Test public void test_19432() { testInvalid("({any} | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_19433() { testInvalid("({any} | !any)","{(int | int), {any, int}}"); }
		@Test public void test_19434() { testInvalid("({any} | !any)","{(any & int), {any, int}}"); }
		@Test public void test_19435() { testInvalid("({any} | !any)","{!int, {int, int}}"); }
		@Test public void test_19436() { testInvalid("({any} | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_19437() { testInvalid("({any} | !any)","{(any | any), {int, int}}"); }
		@Test public void test_19438() { testInvalid("({any} | !any)","{(int | any), {int, int}}"); }
		@Test public void test_19439() { testInvalid("({any} | !any)","{(int & any), {int, int}}"); }
		@Test public void test_19440() { testInvalid("({any} | !any)","{{int}, (any | any)}"); }
		@Test public void test_19441() { testInvalid("({any} | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_19442() { testInvalid("({any} | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_19443() { testInvalid("({any} | !any)","{(any | any), (any | any)}"); }
		@Test public void test_19444() { testInvalid("({any} | !any)","{(int | any), (any | any)}"); }
		@Test public void test_19445() { testInvalid("({any} | !any)","{(int & int), (any | any)}"); }
		@Test public void test_19446() { testInvalid("({any} | !any)","{!int, (int | any)}"); }
		@Test public void test_19447() { testInvalid("({any} | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_19448() { testInvalid("({any} | !any)","{(any | any), (int | any)}"); }
		@Test public void test_19449() { testInvalid("({any} | !any)","{(int | int), (int | any)}"); }
		@Test public void test_19450() { testInvalid("({any} | !any)","{{any}, (any | int)}"); }
		@Test public void test_19451() { testInvalid("({any} | !any)","{!int, (any | int)}"); }
		@Test public void test_19452() { testInvalid("({any} | !any)","{(any | any), (any | int)}"); }
		@Test public void test_19453() { testInvalid("({any} | !any)","{(any | int), (any | int)}"); }
		@Test public void test_19454() { testInvalid("({any} | !any)","{(any & int), (any | int)}"); }
		@Test public void test_19455() { testInvalid("({any} | !any)","{{int}, (int | int)}"); }
		@Test public void test_19456() { testInvalid("({any} | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_19457() { testInvalid("({any} | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_19458() { testInvalid("({any} | !any)","{{int}, (any & any)}"); }
		@Test public void test_19459() { testInvalid("({any} | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_19460() { testInvalid("({any} | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_19461() { testInvalid("({any} | !any)","{(int | any), (any & any)}"); }
		@Test public void test_19462() { testInvalid("({any} | !any)","{(any & any), (any & any)}"); }
		@Test public void test_19463() { testInvalid("({any} | !any)","{(int & any), (any & any)}"); }
		@Test public void test_19464() { testInvalid("({any} | !any)","{{any}, (int & any)}"); }
		@Test public void test_19465() { testInvalid("({any} | !any)","{{int}, (int & any)}"); }
		@Test public void test_19466() { testInvalid("({any} | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_19467() { testInvalid("({any} | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_19468() { testInvalid("({any} | !any)","{(any | int), (int & any)}"); }
		@Test public void test_19469() { testInvalid("({any} | !any)","{(any & any), (int & any)}"); }
		@Test public void test_19470() { testInvalid("({any} | !any)","{(int & any), (int & any)}"); }
		@Test public void test_19471() { testInvalid("({any} | !any)","{(int & int), (int & any)}"); }
		@Test public void test_19472() { testInvalid("({any} | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_19473() { testInvalid("({any} | !any)","{(any & any), (any & int)}"); }
		@Test public void test_19474() { testInvalid("({any} | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_19475() { testInvalid("({any} | !any)","{(int | int), (int & int)}"); }
		@Test public void test_19476() { testInvalid("({any} | !any)","{(any & any), (int & int)}"); }
		@Test public void test_19477() { testInvalid("({any} | !any)","{(any & int), (int & int)}"); }
		@Test public void test_19478() { testInvalid("({any} | !any)","{(int & int), (int & int)}"); }
		@Test public void test_19479() { testInvalid("({any} | !any)","(!int | {any})"); }
		@Test public void test_19480() { testInvalid("({any} | !any)","({any, any} | {any})"); }
		@Test public void test_19481() { testInvalid("({any} | !any)","((any | any) | {any})"); }
		@Test public void test_19482() { testInvalid("({any} | !any)","((int | any) | {any})"); }
		@Test public void test_19483() { testInvalid("({any} | !any)","((any & any) | {any})"); }
		@Test public void test_19484() { testInvalid("({any} | !any)","((int & any) | {any})"); }
		@Test public void test_19485() { testInvalid("({any} | !any)","((any & int) | {any})"); }
		@Test public void test_19486() { testValid("({any} | !any)","({int} | {int})"); }
		@Test public void test_19487() { testValid("({any} | !any)","(!any | {int})"); }
		@Test public void test_19488() { testInvalid("({any} | !any)","(!int | {int})"); }
		@Test public void test_19489() { testInvalid("({any} | !any)","({any, int} | {int})"); }
		@Test public void test_19490() { testInvalid("({any} | !any)","((int & any) | {int})"); }
		@Test public void test_19491() { testInvalid("({any} | !any)","((any & int) | {int})"); }
		@Test public void test_19492() { testInvalid("({any} | !any)","((int & int) | {int})"); }
		@Test public void test_19493() { testValid("({any} | !any)","({any} | !any)"); }
		@Test public void test_19494() { testValid("({any} | !any)","({int} | !any)"); }
		@Test public void test_19495() { testInvalid("({any} | !any)","({any, any} | !any)"); }
		@Test public void test_19496() { testInvalid("({any} | !any)","({int, int} | !any)"); }
		@Test public void test_19497() { testInvalid("({any} | !any)","((any | any) | !any)"); }
		@Test public void test_19498() { testInvalid("({any} | !any)","((int | any) | !any)"); }
		@Test public void test_19499() { testInvalid("({any} | !any)","((int | int) | !any)"); }
		@Test public void test_19500() { testInvalid("({any} | !any)","((int & int) | !any)"); }
		@Test public void test_19501() { testInvalid("({any} | !any)","(!int | !int)"); }
		@Test public void test_19502() { testInvalid("({any} | !any)","({any, any} | !int)"); }
		@Test public void test_19503() { testInvalid("({any} | !any)","({int, int} | !int)"); }
		@Test public void test_19504() { testInvalid("({any} | !any)","((int | any) | !int)"); }
		@Test public void test_19505() { testInvalid("({any} | !any)","((any | int) | !int)"); }
		@Test public void test_19506() { testInvalid("({any} | !any)","((any & int) | !int)"); }
		@Test public void test_19507() { testInvalid("({any} | !any)","((int & int) | !int)"); }
		@Test public void test_19508() { testInvalid("({any} | !any)","({int} | {any, any})"); }
		@Test public void test_19509() { testInvalid("({any} | !any)","(!any | {any, any})"); }
		@Test public void test_19510() { testInvalid("({any} | !any)","(!int | {any, any})"); }
		@Test public void test_19511() { testInvalid("({any} | !any)","({any, int} | {any, any})"); }
		@Test public void test_19512() { testInvalid("({any} | !any)","((int | any) | {any, any})"); }
		@Test public void test_19513() { testInvalid("({any} | !any)","((any & any) | {any, any})"); }
		@Test public void test_19514() { testInvalid("({any} | !any)","((any & int) | {any, any})"); }
		@Test public void test_19515() { testInvalid("({any} | !any)","(!int | {int, any})"); }
		@Test public void test_19516() { testInvalid("({any} | !any)","({any, int} | {int, any})"); }
		@Test public void test_19517() { testInvalid("({any} | !any)","((any | any) | {int, any})"); }
		@Test public void test_19518() { testInvalid("({any} | !any)","((int | any) | {int, any})"); }
		@Test public void test_19519() { testInvalid("({any} | !any)","((any | int) | {int, any})"); }
		@Test public void test_19520() { testInvalid("({any} | !any)","((int & any) | {int, any})"); }
		@Test public void test_19521() { testInvalid("({any} | !any)","({any} | {any, int})"); }
		@Test public void test_19522() { testInvalid("({any} | !any)","(!int | {any, int})"); }
		@Test public void test_19523() { testInvalid("({any} | !any)","({any, int} | {any, int})"); }
		@Test public void test_19524() { testInvalid("({any} | !any)","((any | any) | {any, int})"); }
		@Test public void test_19525() { testInvalid("({any} | !any)","((any | int) | {any, int})"); }
		@Test public void test_19526() { testInvalid("({any} | !any)","((int | int) | {any, int})"); }
		@Test public void test_19527() { testInvalid("({any} | !any)","((int & any) | {any, int})"); }
		@Test public void test_19528() { testInvalid("({any} | !any)","(!any | {int, int})"); }
		@Test public void test_19529() { testInvalid("({any} | !any)","(!int | {int, int})"); }
		@Test public void test_19530() { testInvalid("({any} | !any)","({any, any} | {int, int})"); }
		@Test public void test_19531() { testInvalid("({any} | !any)","({any, int} | {int, int})"); }
		@Test public void test_19532() { testInvalid("({any} | !any)","((any | any) | {int, int})"); }
		@Test public void test_19533() { testInvalid("({any} | !any)","((int | int) | {int, int})"); }
		@Test public void test_19534() { testInvalid("({any} | !any)","((int & any) | {int, int})"); }
		@Test public void test_19535() { testInvalid("({any} | !any)","((any & int) | {int, int})"); }
		@Test public void test_19536() { testInvalid("({any} | !any)","((int & int) | {int, int})"); }
		@Test public void test_19537() { testInvalid("({any} | !any)","({any} | (any | any))"); }
		@Test public void test_19538() { testInvalid("({any} | !any)","(!any | (any | any))"); }
		@Test public void test_19539() { testInvalid("({any} | !any)","({any, any} | (any | any))"); }
		@Test public void test_19540() { testInvalid("({any} | !any)","({any, int} | (any | any))"); }
		@Test public void test_19541() { testInvalid("({any} | !any)","({int, int} | (any | any))"); }
		@Test public void test_19542() { testInvalid("({any} | !any)","((int | any) | (any | any))"); }
		@Test public void test_19543() { testInvalid("({any} | !any)","((any | int) | (any | any))"); }
		@Test public void test_19544() { testInvalid("({any} | !any)","((any & int) | (any | any))"); }
		@Test public void test_19545() { testInvalid("({any} | !any)","((int & int) | (any | any))"); }
		@Test public void test_19546() { testInvalid("({any} | !any)","({any} | (int | any))"); }
		@Test public void test_19547() { testInvalid("({any} | !any)","(!int | (int | any))"); }
		@Test public void test_19548() { testInvalid("({any} | !any)","({int, any} | (int | any))"); }
		@Test public void test_19549() { testInvalid("({any} | !any)","({any, int} | (int | any))"); }
		@Test public void test_19550() { testInvalid("({any} | !any)","((int & any) | (int | any))"); }
		@Test public void test_19551() { testInvalid("({any} | !any)","((any & int) | (int | any))"); }
		@Test public void test_19552() { testInvalid("({any} | !any)","({any} | (any | int))"); }
		@Test public void test_19553() { testInvalid("({any} | !any)","({int} | (any | int))"); }
		@Test public void test_19554() { testInvalid("({any} | !any)","(!any | (any | int))"); }
		@Test public void test_19555() { testInvalid("({any} | !any)","(!int | (any | int))"); }
		@Test public void test_19556() { testInvalid("({any} | !any)","({any, int} | (any | int))"); }
		@Test public void test_19557() { testInvalid("({any} | !any)","({int, int} | (any | int))"); }
		@Test public void test_19558() { testInvalid("({any} | !any)","((int | any) | (any | int))"); }
		@Test public void test_19559() { testInvalid("({any} | !any)","((any | int) | (any | int))"); }
		@Test public void test_19560() { testInvalid("({any} | !any)","((int | int) | (any | int))"); }
		@Test public void test_19561() { testInvalid("({any} | !any)","((any & any) | (any | int))"); }
		@Test public void test_19562() { testInvalid("({any} | !any)","({int} | (int | int))"); }
		@Test public void test_19563() { testInvalid("({any} | !any)","(!any | (int | int))"); }
		@Test public void test_19564() { testInvalid("({any} | !any)","(!int | (int | int))"); }
		@Test public void test_19565() { testInvalid("({any} | !any)","({int, any} | (int | int))"); }
		@Test public void test_19566() { testInvalid("({any} | !any)","({any, int} | (int | int))"); }
		@Test public void test_19567() { testInvalid("({any} | !any)","((any | int) | (int | int))"); }
		@Test public void test_19568() { testInvalid("({any} | !any)","((int | int) | (int | int))"); }
		@Test public void test_19569() { testInvalid("({any} | !any)","((any & any) | (int | int))"); }
		@Test public void test_19570() { testInvalid("({any} | !any)","((int & any) | (int | int))"); }
		@Test public void test_19571() { testInvalid("({any} | !any)","((int & int) | (int | int))"); }
		@Test public void test_19572() { testInvalid("({any} | !any)","(!any | (any & any))"); }
		@Test public void test_19573() { testInvalid("({any} | !any)","(!int | (any & any))"); }
		@Test public void test_19574() { testInvalid("({any} | !any)","({any, any} | (any & any))"); }
		@Test public void test_19575() { testInvalid("({any} | !any)","({int, any} | (any & any))"); }
		@Test public void test_19576() { testInvalid("({any} | !any)","({any, int} | (any & any))"); }
		@Test public void test_19577() { testInvalid("({any} | !any)","({int, int} | (any & any))"); }
		@Test public void test_19578() { testInvalid("({any} | !any)","((int | any) | (any & any))"); }
		@Test public void test_19579() { testInvalid("({any} | !any)","((int | int) | (any & any))"); }
		@Test public void test_19580() { testInvalid("({any} | !any)","((int & any) | (any & any))"); }
		@Test public void test_19581() { testInvalid("({any} | !any)","((any & int) | (any & any))"); }
		@Test public void test_19582() { testInvalid("({any} | !any)","((int & int) | (any & any))"); }
		@Test public void test_19583() { testInvalid("({any} | !any)","({any} | (int & any))"); }
		@Test public void test_19584() { testValid("({int} | !any)","{int}"); }
		@Test public void test_19585() { testInvalid("({int} | !any)","{any, any}"); }
		@Test public void test_19586() { testInvalid("({int} | !any)","{int, int}"); }
		@Test public void test_19587() { testInvalid("({int} | !any)","(any | int)"); }
		@Test public void test_19588() { testInvalid("({int} | !any)","(int & any)"); }
		@Test public void test_19589() { testInvalid("({int} | !any)","{{any}}"); }
		@Test public void test_19590() { testInvalid("({int} | !any)","{{int, any}}"); }
		@Test public void test_19591() { testInvalid("({int} | !any)","{{int, int}}"); }
		@Test public void test_19592() { testInvalid("({int} | !any)","{(any | int)}"); }
		@Test public void test_19593() { testInvalid("({int} | !any)","!{int, any}"); }
		@Test public void test_19594() { testInvalid("({int} | !any)","!{int, int}"); }
		@Test public void test_19595() { testValid("({int} | !any)","!(any | any)"); }
		@Test public void test_19596() { testValid("({int} | !any)","!(any & any)"); }
		@Test public void test_19597() { testInvalid("({int} | !any)","!(int & int)"); }
		@Test public void test_19598() { testInvalid("({int} | !any)","{{int}, {any}}"); }
		@Test public void test_19599() { testInvalid("({int} | !any)","{!int, {any}}"); }
		@Test public void test_19600() { testInvalid("({int} | !any)","{{int, int}, {any}}"); }
		@Test public void test_19601() { testInvalid("({int} | !any)","{(any | int), {any}}"); }
		@Test public void test_19602() { testInvalid("({int} | !any)","{!int, {int}}"); }
		@Test public void test_19603() { testInvalid("({int} | !any)","{{any, any}, {int}}"); }
		@Test public void test_19604() { testInvalid("({int} | !any)","{(any | any), {int}}"); }
		@Test public void test_19605() { testInvalid("({int} | !any)","{(any & any), {int}}"); }
		@Test public void test_19606() { testInvalid("({int} | !any)","{(any & int), {int}}"); }
		@Test public void test_19607() { testInvalid("({int} | !any)","{{any, any}, !int}"); }
		@Test public void test_19608() { testInvalid("({int} | !any)","{{any, int}, !int}"); }
		@Test public void test_19609() { testInvalid("({int} | !any)","{(any | any), !int}"); }
		@Test public void test_19610() { testInvalid("({int} | !any)","{(int | any), !int}"); }
		@Test public void test_19611() { testInvalid("({int} | !any)","{(any & any), !int}"); }
		@Test public void test_19612() { testInvalid("({int} | !any)","{(int & any), !int}"); }
		@Test public void test_19613() { testInvalid("({int} | !any)","{(int & int), !int}"); }
		@Test public void test_19614() { testInvalid("({int} | !any)","{{any}, {any, any}}"); }
		@Test public void test_19615() { testInvalid("({int} | !any)","{{int}, {any, any}}"); }
		@Test public void test_19616() { testInvalid("({int} | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_19617() { testInvalid("({int} | !any)","{(any | any), {any, any}}"); }
		@Test public void test_19618() { testInvalid("({int} | !any)","{(any | int), {any, any}}"); }
		@Test public void test_19619() { testInvalid("({int} | !any)","{!int, {int, any}}"); }
		@Test public void test_19620() { testInvalid("({int} | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_19621() { testInvalid("({int} | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_19622() { testInvalid("({int} | !any)","{(any & int), {int, any}}"); }
		@Test public void test_19623() { testInvalid("({int} | !any)","{{any}, {any, int}}"); }
		@Test public void test_19624() { testInvalid("({int} | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_19625() { testInvalid("({int} | !any)","{(int | int), {any, int}}"); }
		@Test public void test_19626() { testInvalid("({int} | !any)","{(any & int), {any, int}}"); }
		@Test public void test_19627() { testInvalid("({int} | !any)","{!int, {int, int}}"); }
		@Test public void test_19628() { testInvalid("({int} | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_19629() { testInvalid("({int} | !any)","{(any | any), {int, int}}"); }
		@Test public void test_19630() { testInvalid("({int} | !any)","{(int | any), {int, int}}"); }
		@Test public void test_19631() { testInvalid("({int} | !any)","{(int & any), {int, int}}"); }
		@Test public void test_19632() { testInvalid("({int} | !any)","{{int}, (any | any)}"); }
		@Test public void test_19633() { testInvalid("({int} | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_19634() { testInvalid("({int} | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_19635() { testInvalid("({int} | !any)","{(any | any), (any | any)}"); }
		@Test public void test_19636() { testInvalid("({int} | !any)","{(int | any), (any | any)}"); }
		@Test public void test_19637() { testInvalid("({int} | !any)","{(int & int), (any | any)}"); }
		@Test public void test_19638() { testInvalid("({int} | !any)","{!int, (int | any)}"); }
		@Test public void test_19639() { testInvalid("({int} | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_19640() { testInvalid("({int} | !any)","{(any | any), (int | any)}"); }
		@Test public void test_19641() { testInvalid("({int} | !any)","{(int | int), (int | any)}"); }
		@Test public void test_19642() { testInvalid("({int} | !any)","{{any}, (any | int)}"); }
		@Test public void test_19643() { testInvalid("({int} | !any)","{!int, (any | int)}"); }
		@Test public void test_19644() { testInvalid("({int} | !any)","{(any | any), (any | int)}"); }
		@Test public void test_19645() { testInvalid("({int} | !any)","{(any | int), (any | int)}"); }
		@Test public void test_19646() { testInvalid("({int} | !any)","{(any & int), (any | int)}"); }
		@Test public void test_19647() { testInvalid("({int} | !any)","{{int}, (int | int)}"); }
		@Test public void test_19648() { testInvalid("({int} | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_19649() { testInvalid("({int} | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_19650() { testInvalid("({int} | !any)","{{int}, (any & any)}"); }
		@Test public void test_19651() { testInvalid("({int} | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_19652() { testInvalid("({int} | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_19653() { testInvalid("({int} | !any)","{(int | any), (any & any)}"); }
		@Test public void test_19654() { testInvalid("({int} | !any)","{(any & any), (any & any)}"); }
		@Test public void test_19655() { testInvalid("({int} | !any)","{(int & any), (any & any)}"); }
		@Test public void test_19656() { testInvalid("({int} | !any)","{{any}, (int & any)}"); }
		@Test public void test_19657() { testInvalid("({int} | !any)","{{int}, (int & any)}"); }
		@Test public void test_19658() { testInvalid("({int} | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_19659() { testInvalid("({int} | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_19660() { testInvalid("({int} | !any)","{(any | int), (int & any)}"); }
		@Test public void test_19661() { testInvalid("({int} | !any)","{(any & any), (int & any)}"); }
		@Test public void test_19662() { testInvalid("({int} | !any)","{(int & any), (int & any)}"); }
		@Test public void test_19663() { testInvalid("({int} | !any)","{(int & int), (int & any)}"); }
		@Test public void test_19664() { testInvalid("({int} | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_19665() { testInvalid("({int} | !any)","{(any & any), (any & int)}"); }
		@Test public void test_19666() { testInvalid("({int} | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_19667() { testInvalid("({int} | !any)","{(int | int), (int & int)}"); }
		@Test public void test_19668() { testInvalid("({int} | !any)","{(any & any), (int & int)}"); }
		@Test public void test_19669() { testInvalid("({int} | !any)","{(any & int), (int & int)}"); }
		@Test public void test_19670() { testInvalid("({int} | !any)","{(int & int), (int & int)}"); }
		@Test public void test_19671() { testInvalid("({int} | !any)","(!int | {any})"); }
		@Test public void test_19672() { testInvalid("({int} | !any)","({any, any} | {any})"); }
		@Test public void test_19673() { testInvalid("({int} | !any)","((any | any) | {any})"); }
		@Test public void test_19674() { testInvalid("({int} | !any)","((int | any) | {any})"); }
		@Test public void test_19675() { testInvalid("({int} | !any)","((any & any) | {any})"); }
		@Test public void test_19676() { testInvalid("({int} | !any)","((int & any) | {any})"); }
		@Test public void test_19677() { testInvalid("({int} | !any)","((any & int) | {any})"); }
		@Test public void test_19678() { testValid("({int} | !any)","({int} | {int})"); }
		@Test public void test_19679() { testValid("({int} | !any)","(!any | {int})"); }
		@Test public void test_19680() { testInvalid("({int} | !any)","(!int | {int})"); }
		@Test public void test_19681() { testInvalid("({int} | !any)","({any, int} | {int})"); }
		@Test public void test_19682() { testInvalid("({int} | !any)","((int & any) | {int})"); }
		@Test public void test_19683() { testInvalid("({int} | !any)","((any & int) | {int})"); }
		@Test public void test_19684() { testInvalid("({int} | !any)","((int & int) | {int})"); }
		@Test public void test_19685() { testInvalid("({int} | !any)","({any} | !any)"); }
		@Test public void test_19686() { testValid("({int} | !any)","({int} | !any)"); }
		@Test public void test_19687() { testInvalid("({int} | !any)","({any, any} | !any)"); }
		@Test public void test_19688() { testInvalid("({int} | !any)","({int, int} | !any)"); }
		@Test public void test_19689() { testInvalid("({int} | !any)","((any | any) | !any)"); }
		@Test public void test_19690() { testInvalid("({int} | !any)","((int | any) | !any)"); }
		@Test public void test_19691() { testInvalid("({int} | !any)","((int | int) | !any)"); }
		@Test public void test_19692() { testInvalid("({int} | !any)","((int & int) | !any)"); }
		@Test public void test_19693() { testInvalid("({int} | !any)","(!int | !int)"); }
		@Test public void test_19694() { testInvalid("({int} | !any)","({any, any} | !int)"); }
		@Test public void test_19695() { testInvalid("({int} | !any)","({int, int} | !int)"); }
		@Test public void test_19696() { testInvalid("({int} | !any)","((int | any) | !int)"); }
		@Test public void test_19697() { testInvalid("({int} | !any)","((any | int) | !int)"); }
		@Test public void test_19698() { testInvalid("({int} | !any)","((any & int) | !int)"); }
		@Test public void test_19699() { testInvalid("({int} | !any)","((int & int) | !int)"); }
		@Test public void test_19700() { testInvalid("({int} | !any)","({int} | {any, any})"); }
		@Test public void test_19701() { testInvalid("({int} | !any)","(!any | {any, any})"); }
		@Test public void test_19702() { testInvalid("({int} | !any)","(!int | {any, any})"); }
		@Test public void test_19703() { testInvalid("({int} | !any)","({any, int} | {any, any})"); }
		@Test public void test_19704() { testInvalid("({int} | !any)","((int | any) | {any, any})"); }
		@Test public void test_19705() { testInvalid("({int} | !any)","((any & any) | {any, any})"); }
		@Test public void test_19706() { testInvalid("({int} | !any)","((any & int) | {any, any})"); }
		@Test public void test_19707() { testInvalid("({int} | !any)","(!int | {int, any})"); }
		@Test public void test_19708() { testInvalid("({int} | !any)","({any, int} | {int, any})"); }
		@Test public void test_19709() { testInvalid("({int} | !any)","((any | any) | {int, any})"); }
		@Test public void test_19710() { testInvalid("({int} | !any)","((int | any) | {int, any})"); }
		@Test public void test_19711() { testInvalid("({int} | !any)","((any | int) | {int, any})"); }
		@Test public void test_19712() { testInvalid("({int} | !any)","((int & any) | {int, any})"); }
		@Test public void test_19713() { testInvalid("({int} | !any)","({any} | {any, int})"); }
		@Test public void test_19714() { testInvalid("({int} | !any)","(!int | {any, int})"); }
		@Test public void test_19715() { testInvalid("({int} | !any)","({any, int} | {any, int})"); }
		@Test public void test_19716() { testInvalid("({int} | !any)","((any | any) | {any, int})"); }
		@Test public void test_19717() { testInvalid("({int} | !any)","((any | int) | {any, int})"); }
		@Test public void test_19718() { testInvalid("({int} | !any)","((int | int) | {any, int})"); }
		@Test public void test_19719() { testInvalid("({int} | !any)","((int & any) | {any, int})"); }
		@Test public void test_19720() { testInvalid("({int} | !any)","(!any | {int, int})"); }
		@Test public void test_19721() { testInvalid("({int} | !any)","(!int | {int, int})"); }
		@Test public void test_19722() { testInvalid("({int} | !any)","({any, any} | {int, int})"); }
		@Test public void test_19723() { testInvalid("({int} | !any)","({any, int} | {int, int})"); }
		@Test public void test_19724() { testInvalid("({int} | !any)","((any | any) | {int, int})"); }
		@Test public void test_19725() { testInvalid("({int} | !any)","((int | int) | {int, int})"); }
		@Test public void test_19726() { testInvalid("({int} | !any)","((int & any) | {int, int})"); }
		@Test public void test_19727() { testInvalid("({int} | !any)","((any & int) | {int, int})"); }
		@Test public void test_19728() { testInvalid("({int} | !any)","((int & int) | {int, int})"); }
		@Test public void test_19729() { testInvalid("({int} | !any)","({any} | (any | any))"); }
		@Test public void test_19730() { testInvalid("({int} | !any)","(!any | (any | any))"); }
		@Test public void test_19731() { testInvalid("({int} | !any)","({any, any} | (any | any))"); }
		@Test public void test_19732() { testInvalid("({int} | !any)","({any, int} | (any | any))"); }
		@Test public void test_19733() { testInvalid("({int} | !any)","({int, int} | (any | any))"); }
		@Test public void test_19734() { testInvalid("({int} | !any)","((int | any) | (any | any))"); }
		@Test public void test_19735() { testInvalid("({int} | !any)","((any | int) | (any | any))"); }
		@Test public void test_19736() { testInvalid("({int} | !any)","((any & int) | (any | any))"); }
		@Test public void test_19737() { testInvalid("({int} | !any)","((int & int) | (any | any))"); }
		@Test public void test_19738() { testInvalid("({int} | !any)","({any} | (int | any))"); }
		@Test public void test_19739() { testInvalid("({int} | !any)","(!int | (int | any))"); }
		@Test public void test_19740() { testInvalid("({int} | !any)","({int, any} | (int | any))"); }
		@Test public void test_19741() { testInvalid("({int} | !any)","({any, int} | (int | any))"); }
		@Test public void test_19742() { testInvalid("({int} | !any)","((int & any) | (int | any))"); }
		@Test public void test_19743() { testInvalid("({int} | !any)","((any & int) | (int | any))"); }
		@Test public void test_19744() { testInvalid("({int} | !any)","({any} | (any | int))"); }
		@Test public void test_19745() { testInvalid("({int} | !any)","({int} | (any | int))"); }
		@Test public void test_19746() { testInvalid("({int} | !any)","(!any | (any | int))"); }
		@Test public void test_19747() { testInvalid("({int} | !any)","(!int | (any | int))"); }
		@Test public void test_19748() { testInvalid("({int} | !any)","({any, int} | (any | int))"); }
		@Test public void test_19749() { testInvalid("({int} | !any)","({int, int} | (any | int))"); }
		@Test public void test_19750() { testInvalid("({int} | !any)","((int | any) | (any | int))"); }
		@Test public void test_19751() { testInvalid("({int} | !any)","((any | int) | (any | int))"); }
		@Test public void test_19752() { testInvalid("({int} | !any)","((int | int) | (any | int))"); }
		@Test public void test_19753() { testInvalid("({int} | !any)","((any & any) | (any | int))"); }
		@Test public void test_19754() { testInvalid("({int} | !any)","({int} | (int | int))"); }
		@Test public void test_19755() { testInvalid("({int} | !any)","(!any | (int | int))"); }
		@Test public void test_19756() { testInvalid("({int} | !any)","(!int | (int | int))"); }
		@Test public void test_19757() { testInvalid("({int} | !any)","({int, any} | (int | int))"); }
		@Test public void test_19758() { testInvalid("({int} | !any)","({any, int} | (int | int))"); }
		@Test public void test_19759() { testInvalid("({int} | !any)","((any | int) | (int | int))"); }
		@Test public void test_19760() { testInvalid("({int} | !any)","((int | int) | (int | int))"); }
		@Test public void test_19761() { testInvalid("({int} | !any)","((any & any) | (int | int))"); }
		@Test public void test_19762() { testInvalid("({int} | !any)","((int & any) | (int | int))"); }
		@Test public void test_19763() { testInvalid("({int} | !any)","((int & int) | (int | int))"); }
		@Test public void test_19764() { testInvalid("({int} | !any)","(!any | (any & any))"); }
		@Test public void test_19765() { testInvalid("({int} | !any)","(!int | (any & any))"); }
		@Test public void test_19766() { testInvalid("({int} | !any)","({any, any} | (any & any))"); }
		@Test public void test_19767() { testInvalid("({int} | !any)","({int, any} | (any & any))"); }
		@Test public void test_19768() { testInvalid("({int} | !any)","({any, int} | (any & any))"); }
		@Test public void test_19769() { testInvalid("({int} | !any)","({int, int} | (any & any))"); }
		@Test public void test_19770() { testInvalid("({int} | !any)","((int | any) | (any & any))"); }
		@Test public void test_19771() { testInvalid("({int} | !any)","((int | int) | (any & any))"); }
		@Test public void test_19772() { testInvalid("({int} | !any)","((int & any) | (any & any))"); }
		@Test public void test_19773() { testInvalid("({int} | !any)","((any & int) | (any & any))"); }
		@Test public void test_19774() { testInvalid("({int} | !any)","((int & int) | (any & any))"); }
		@Test public void test_19775() { testInvalid("({int} | !any)","({any} | (int & any))"); }
		@Test public void test_19776() { testInvalid("({any, any} | !any)","{int}"); }
		@Test public void test_19777() { testValid("({any, any} | !any)","{any, any}"); }
		@Test public void test_19778() { testValid("({any, any} | !any)","{int, int}"); }
		@Test public void test_19779() { testInvalid("({any, any} | !any)","(any | int)"); }
		@Test public void test_19780() { testInvalid("({any, any} | !any)","(int & any)"); }
		@Test public void test_19781() { testInvalid("({any, any} | !any)","{{any}}"); }
		@Test public void test_19782() { testInvalid("({any, any} | !any)","{{int, any}}"); }
		@Test public void test_19783() { testInvalid("({any, any} | !any)","{{int, int}}"); }
		@Test public void test_19784() { testInvalid("({any, any} | !any)","{(any | int)}"); }
		@Test public void test_19785() { testInvalid("({any, any} | !any)","!{int, any}"); }
		@Test public void test_19786() { testInvalid("({any, any} | !any)","!{int, int}"); }
		@Test public void test_19787() { testValid("({any, any} | !any)","!(any | any)"); }
		@Test public void test_19788() { testValid("({any, any} | !any)","!(any & any)"); }
		@Test public void test_19789() { testInvalid("({any, any} | !any)","!(int & int)"); }
		@Test public void test_19790() { testValid("({any, any} | !any)","{{int}, {any}}"); }
		@Test public void test_19791() { testValid("({any, any} | !any)","{!int, {any}}"); }
		@Test public void test_19792() { testValid("({any, any} | !any)","{{int, int}, {any}}"); }
		@Test public void test_19793() { testValid("({any, any} | !any)","{(any | int), {any}}"); }
		@Test public void test_19794() { testValid("({any, any} | !any)","{!int, {int}}"); }
		@Test public void test_19795() { testValid("({any, any} | !any)","{{any, any}, {int}}"); }
		@Test public void test_19796() { testValid("({any, any} | !any)","{(any | any), {int}}"); }
		@Test public void test_19797() { testValid("({any, any} | !any)","{(any & any), {int}}"); }
		@Test public void test_19798() { testValid("({any, any} | !any)","{(any & int), {int}}"); }
		@Test public void test_19799() { testValid("({any, any} | !any)","{{any, any}, !int}"); }
		@Test public void test_19800() { testValid("({any, any} | !any)","{{any, int}, !int}"); }
		@Test public void test_19801() { testValid("({any, any} | !any)","{(any | any), !int}"); }
		@Test public void test_19802() { testValid("({any, any} | !any)","{(int | any), !int}"); }
		@Test public void test_19803() { testValid("({any, any} | !any)","{(any & any), !int}"); }
		@Test public void test_19804() { testValid("({any, any} | !any)","{(int & any), !int}"); }
		@Test public void test_19805() { testValid("({any, any} | !any)","{(int & int), !int}"); }
		@Test public void test_19806() { testValid("({any, any} | !any)","{{any}, {any, any}}"); }
		@Test public void test_19807() { testValid("({any, any} | !any)","{{int}, {any, any}}"); }
		@Test public void test_19808() { testValid("({any, any} | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_19809() { testValid("({any, any} | !any)","{(any | any), {any, any}}"); }
		@Test public void test_19810() { testValid("({any, any} | !any)","{(any | int), {any, any}}"); }
		@Test public void test_19811() { testValid("({any, any} | !any)","{!int, {int, any}}"); }
		@Test public void test_19812() { testValid("({any, any} | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_19813() { testValid("({any, any} | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_19814() { testValid("({any, any} | !any)","{(any & int), {int, any}}"); }
		@Test public void test_19815() { testValid("({any, any} | !any)","{{any}, {any, int}}"); }
		@Test public void test_19816() { testValid("({any, any} | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_19817() { testValid("({any, any} | !any)","{(int | int), {any, int}}"); }
		@Test public void test_19818() { testValid("({any, any} | !any)","{(any & int), {any, int}}"); }
		@Test public void test_19819() { testValid("({any, any} | !any)","{!int, {int, int}}"); }
		@Test public void test_19820() { testValid("({any, any} | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_19821() { testValid("({any, any} | !any)","{(any | any), {int, int}}"); }
		@Test public void test_19822() { testValid("({any, any} | !any)","{(int | any), {int, int}}"); }
		@Test public void test_19823() { testValid("({any, any} | !any)","{(int & any), {int, int}}"); }
		@Test public void test_19824() { testValid("({any, any} | !any)","{{int}, (any | any)}"); }
		@Test public void test_19825() { testValid("({any, any} | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_19826() { testValid("({any, any} | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_19827() { testValid("({any, any} | !any)","{(any | any), (any | any)}"); }
		@Test public void test_19828() { testValid("({any, any} | !any)","{(int | any), (any | any)}"); }
		@Test public void test_19829() { testValid("({any, any} | !any)","{(int & int), (any | any)}"); }
		@Test public void test_19830() { testValid("({any, any} | !any)","{!int, (int | any)}"); }
		@Test public void test_19831() { testValid("({any, any} | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_19832() { testValid("({any, any} | !any)","{(any | any), (int | any)}"); }
		@Test public void test_19833() { testValid("({any, any} | !any)","{(int | int), (int | any)}"); }
		@Test public void test_19834() { testValid("({any, any} | !any)","{{any}, (any | int)}"); }
		@Test public void test_19835() { testValid("({any, any} | !any)","{!int, (any | int)}"); }
		@Test public void test_19836() { testValid("({any, any} | !any)","{(any | any), (any | int)}"); }
		@Test public void test_19837() { testValid("({any, any} | !any)","{(any | int), (any | int)}"); }
		@Test public void test_19838() { testValid("({any, any} | !any)","{(any & int), (any | int)}"); }
		@Test public void test_19839() { testValid("({any, any} | !any)","{{int}, (int | int)}"); }
		@Test public void test_19840() { testValid("({any, any} | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_19841() { testValid("({any, any} | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_19842() { testValid("({any, any} | !any)","{{int}, (any & any)}"); }
		@Test public void test_19843() { testValid("({any, any} | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_19844() { testValid("({any, any} | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_19845() { testValid("({any, any} | !any)","{(int | any), (any & any)}"); }
		@Test public void test_19846() { testValid("({any, any} | !any)","{(any & any), (any & any)}"); }
		@Test public void test_19847() { testValid("({any, any} | !any)","{(int & any), (any & any)}"); }
		@Test public void test_19848() { testValid("({any, any} | !any)","{{any}, (int & any)}"); }
		@Test public void test_19849() { testValid("({any, any} | !any)","{{int}, (int & any)}"); }
		@Test public void test_19850() { testValid("({any, any} | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_19851() { testValid("({any, any} | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_19852() { testValid("({any, any} | !any)","{(any | int), (int & any)}"); }
		@Test public void test_19853() { testValid("({any, any} | !any)","{(any & any), (int & any)}"); }
		@Test public void test_19854() { testValid("({any, any} | !any)","{(int & any), (int & any)}"); }
		@Test public void test_19855() { testValid("({any, any} | !any)","{(int & int), (int & any)}"); }
		@Test public void test_19856() { testValid("({any, any} | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_19857() { testValid("({any, any} | !any)","{(any & any), (any & int)}"); }
		@Test public void test_19858() { testValid("({any, any} | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_19859() { testValid("({any, any} | !any)","{(int | int), (int & int)}"); }
		@Test public void test_19860() { testValid("({any, any} | !any)","{(any & any), (int & int)}"); }
		@Test public void test_19861() { testValid("({any, any} | !any)","{(any & int), (int & int)}"); }
		@Test public void test_19862() { testValid("({any, any} | !any)","{(int & int), (int & int)}"); }
		@Test public void test_19863() { testInvalid("({any, any} | !any)","(!int | {any})"); }
		@Test public void test_19864() { testInvalid("({any, any} | !any)","({any, any} | {any})"); }
		@Test public void test_19865() { testInvalid("({any, any} | !any)","((any | any) | {any})"); }
		@Test public void test_19866() { testInvalid("({any, any} | !any)","((int | any) | {any})"); }
		@Test public void test_19867() { testInvalid("({any, any} | !any)","((any & any) | {any})"); }
		@Test public void test_19868() { testInvalid("({any, any} | !any)","((int & any) | {any})"); }
		@Test public void test_19869() { testInvalid("({any, any} | !any)","((any & int) | {any})"); }
		@Test public void test_19870() { testInvalid("({any, any} | !any)","({int} | {int})"); }
		@Test public void test_19871() { testInvalid("({any, any} | !any)","(!any | {int})"); }
		@Test public void test_19872() { testInvalid("({any, any} | !any)","(!int | {int})"); }
		@Test public void test_19873() { testInvalid("({any, any} | !any)","({any, int} | {int})"); }
		@Test public void test_19874() { testInvalid("({any, any} | !any)","((int & any) | {int})"); }
		@Test public void test_19875() { testInvalid("({any, any} | !any)","((any & int) | {int})"); }
		@Test public void test_19876() { testInvalid("({any, any} | !any)","((int & int) | {int})"); }
		@Test public void test_19877() { testInvalid("({any, any} | !any)","({any} | !any)"); }
		@Test public void test_19878() { testInvalid("({any, any} | !any)","({int} | !any)"); }
		@Test public void test_19879() { testValid("({any, any} | !any)","({any, any} | !any)"); }
		@Test public void test_19880() { testValid("({any, any} | !any)","({int, int} | !any)"); }
		@Test public void test_19881() { testInvalid("({any, any} | !any)","((any | any) | !any)"); }
		@Test public void test_19882() { testInvalid("({any, any} | !any)","((int | any) | !any)"); }
		@Test public void test_19883() { testInvalid("({any, any} | !any)","((int | int) | !any)"); }
		@Test public void test_19884() { testInvalid("({any, any} | !any)","((int & int) | !any)"); }
		@Test public void test_19885() { testInvalid("({any, any} | !any)","(!int | !int)"); }
		@Test public void test_19886() { testInvalid("({any, any} | !any)","({any, any} | !int)"); }
		@Test public void test_19887() { testInvalid("({any, any} | !any)","({int, int} | !int)"); }
		@Test public void test_19888() { testInvalid("({any, any} | !any)","((int | any) | !int)"); }
		@Test public void test_19889() { testInvalid("({any, any} | !any)","((any | int) | !int)"); }
		@Test public void test_19890() { testInvalid("({any, any} | !any)","((any & int) | !int)"); }
		@Test public void test_19891() { testInvalid("({any, any} | !any)","((int & int) | !int)"); }
		@Test public void test_19892() { testInvalid("({any, any} | !any)","({int} | {any, any})"); }
		@Test public void test_19893() { testValid("({any, any} | !any)","(!any | {any, any})"); }
		@Test public void test_19894() { testInvalid("({any, any} | !any)","(!int | {any, any})"); }
		@Test public void test_19895() { testValid("({any, any} | !any)","({any, int} | {any, any})"); }
		@Test public void test_19896() { testInvalid("({any, any} | !any)","((int | any) | {any, any})"); }
		@Test public void test_19897() { testInvalid("({any, any} | !any)","((any & any) | {any, any})"); }
		@Test public void test_19898() { testInvalid("({any, any} | !any)","((any & int) | {any, any})"); }
		@Test public void test_19899() { testInvalid("({any, any} | !any)","(!int | {int, any})"); }
		@Test public void test_19900() { testValid("({any, any} | !any)","({any, int} | {int, any})"); }
		@Test public void test_19901() { testInvalid("({any, any} | !any)","((any | any) | {int, any})"); }
		@Test public void test_19902() { testInvalid("({any, any} | !any)","((int | any) | {int, any})"); }
		@Test public void test_19903() { testInvalid("({any, any} | !any)","((any | int) | {int, any})"); }
		@Test public void test_19904() { testInvalid("({any, any} | !any)","((int & any) | {int, any})"); }
		@Test public void test_19905() { testInvalid("({any, any} | !any)","({any} | {any, int})"); }
		@Test public void test_19906() { testInvalid("({any, any} | !any)","(!int | {any, int})"); }
		@Test public void test_19907() { testValid("({any, any} | !any)","({any, int} | {any, int})"); }
		@Test public void test_19908() { testInvalid("({any, any} | !any)","((any | any) | {any, int})"); }
		@Test public void test_19909() { testInvalid("({any, any} | !any)","((any | int) | {any, int})"); }
		@Test public void test_19910() { testInvalid("({any, any} | !any)","((int | int) | {any, int})"); }
		@Test public void test_19911() { testInvalid("({any, any} | !any)","((int & any) | {any, int})"); }
		@Test public void test_19912() { testValid("({any, any} | !any)","(!any | {int, int})"); }
		@Test public void test_19913() { testInvalid("({any, any} | !any)","(!int | {int, int})"); }
		@Test public void test_19914() { testValid("({any, any} | !any)","({any, any} | {int, int})"); }
		@Test public void test_19915() { testValid("({any, any} | !any)","({any, int} | {int, int})"); }
		@Test public void test_19916() { testInvalid("({any, any} | !any)","((any | any) | {int, int})"); }
		@Test public void test_19917() { testInvalid("({any, any} | !any)","((int | int) | {int, int})"); }
		@Test public void test_19918() { testInvalid("({any, any} | !any)","((int & any) | {int, int})"); }
		@Test public void test_19919() { testInvalid("({any, any} | !any)","((any & int) | {int, int})"); }
		@Test public void test_19920() { testInvalid("({any, any} | !any)","((int & int) | {int, int})"); }
		@Test public void test_19921() { testInvalid("({any, any} | !any)","({any} | (any | any))"); }
		@Test public void test_19922() { testInvalid("({any, any} | !any)","(!any | (any | any))"); }
		@Test public void test_19923() { testInvalid("({any, any} | !any)","({any, any} | (any | any))"); }
		@Test public void test_19924() { testInvalid("({any, any} | !any)","({any, int} | (any | any))"); }
		@Test public void test_19925() { testInvalid("({any, any} | !any)","({int, int} | (any | any))"); }
		@Test public void test_19926() { testInvalid("({any, any} | !any)","((int | any) | (any | any))"); }
		@Test public void test_19927() { testInvalid("({any, any} | !any)","((any | int) | (any | any))"); }
		@Test public void test_19928() { testInvalid("({any, any} | !any)","((any & int) | (any | any))"); }
		@Test public void test_19929() { testInvalid("({any, any} | !any)","((int & int) | (any | any))"); }
		@Test public void test_19930() { testInvalid("({any, any} | !any)","({any} | (int | any))"); }
		@Test public void test_19931() { testInvalid("({any, any} | !any)","(!int | (int | any))"); }
		@Test public void test_19932() { testInvalid("({any, any} | !any)","({int, any} | (int | any))"); }
		@Test public void test_19933() { testInvalid("({any, any} | !any)","({any, int} | (int | any))"); }
		@Test public void test_19934() { testInvalid("({any, any} | !any)","((int & any) | (int | any))"); }
		@Test public void test_19935() { testInvalid("({any, any} | !any)","((any & int) | (int | any))"); }
		@Test public void test_19936() { testInvalid("({any, any} | !any)","({any} | (any | int))"); }
		@Test public void test_19937() { testInvalid("({any, any} | !any)","({int} | (any | int))"); }
		@Test public void test_19938() { testInvalid("({any, any} | !any)","(!any | (any | int))"); }
		@Test public void test_19939() { testInvalid("({any, any} | !any)","(!int | (any | int))"); }
		@Test public void test_19940() { testInvalid("({any, any} | !any)","({any, int} | (any | int))"); }
		@Test public void test_19941() { testInvalid("({any, any} | !any)","({int, int} | (any | int))"); }
		@Test public void test_19942() { testInvalid("({any, any} | !any)","((int | any) | (any | int))"); }
		@Test public void test_19943() { testInvalid("({any, any} | !any)","((any | int) | (any | int))"); }
		@Test public void test_19944() { testInvalid("({any, any} | !any)","((int | int) | (any | int))"); }
		@Test public void test_19945() { testInvalid("({any, any} | !any)","((any & any) | (any | int))"); }
		@Test public void test_19946() { testInvalid("({any, any} | !any)","({int} | (int | int))"); }
		@Test public void test_19947() { testInvalid("({any, any} | !any)","(!any | (int | int))"); }
		@Test public void test_19948() { testInvalid("({any, any} | !any)","(!int | (int | int))"); }
		@Test public void test_19949() { testInvalid("({any, any} | !any)","({int, any} | (int | int))"); }
		@Test public void test_19950() { testInvalid("({any, any} | !any)","({any, int} | (int | int))"); }
		@Test public void test_19951() { testInvalid("({any, any} | !any)","((any | int) | (int | int))"); }
		@Test public void test_19952() { testInvalid("({any, any} | !any)","((int | int) | (int | int))"); }
		@Test public void test_19953() { testInvalid("({any, any} | !any)","((any & any) | (int | int))"); }
		@Test public void test_19954() { testInvalid("({any, any} | !any)","((int & any) | (int | int))"); }
		@Test public void test_19955() { testInvalid("({any, any} | !any)","((int & int) | (int | int))"); }
		@Test public void test_19956() { testInvalid("({any, any} | !any)","(!any | (any & any))"); }
		@Test public void test_19957() { testInvalid("({any, any} | !any)","(!int | (any & any))"); }
		@Test public void test_19958() { testInvalid("({any, any} | !any)","({any, any} | (any & any))"); }
		@Test public void test_19959() { testInvalid("({any, any} | !any)","({int, any} | (any & any))"); }
		@Test public void test_19960() { testInvalid("({any, any} | !any)","({any, int} | (any & any))"); }
		@Test public void test_19961() { testInvalid("({any, any} | !any)","({int, int} | (any & any))"); }
		@Test public void test_19962() { testInvalid("({any, any} | !any)","((int | any) | (any & any))"); }
		@Test public void test_19963() { testInvalid("({any, any} | !any)","((int | int) | (any & any))"); }
		@Test public void test_19964() { testInvalid("({any, any} | !any)","((int & any) | (any & any))"); }
		@Test public void test_19965() { testInvalid("({any, any} | !any)","((any & int) | (any & any))"); }
		@Test public void test_19966() { testInvalid("({any, any} | !any)","((int & int) | (any & any))"); }
		@Test public void test_19967() { testInvalid("({any, any} | !any)","({any} | (int & any))"); }
		@Test public void test_19968() { testInvalid("({int, int} | !any)","{int}"); }
		@Test public void test_19969() { testInvalid("({int, int} | !any)","{any, any}"); }
		@Test public void test_19970() { testValid("({int, int} | !any)","{int, int}"); }
		@Test public void test_19971() { testInvalid("({int, int} | !any)","(any | int)"); }
		@Test public void test_19972() { testInvalid("({int, int} | !any)","(int & any)"); }
		@Test public void test_19973() { testInvalid("({int, int} | !any)","{{any}}"); }
		@Test public void test_19974() { testInvalid("({int, int} | !any)","{{int, any}}"); }
		@Test public void test_19975() { testInvalid("({int, int} | !any)","{{int, int}}"); }
		@Test public void test_19976() { testInvalid("({int, int} | !any)","{(any | int)}"); }
		@Test public void test_19977() { testInvalid("({int, int} | !any)","!{int, any}"); }
		@Test public void test_19978() { testInvalid("({int, int} | !any)","!{int, int}"); }
		@Test public void test_19979() { testValid("({int, int} | !any)","!(any | any)"); }
		@Test public void test_19980() { testValid("({int, int} | !any)","!(any & any)"); }
		@Test public void test_19981() { testInvalid("({int, int} | !any)","!(int & int)"); }
		@Test public void test_19982() { testInvalid("({int, int} | !any)","{{int}, {any}}"); }
		@Test public void test_19983() { testInvalid("({int, int} | !any)","{!int, {any}}"); }
		@Test public void test_19984() { testInvalid("({int, int} | !any)","{{int, int}, {any}}"); }
		@Test public void test_19985() { testInvalid("({int, int} | !any)","{(any | int), {any}}"); }
		@Test public void test_19986() { testInvalid("({int, int} | !any)","{!int, {int}}"); }
		@Test public void test_19987() { testInvalid("({int, int} | !any)","{{any, any}, {int}}"); }
		@Test public void test_19988() { testInvalid("({int, int} | !any)","{(any | any), {int}}"); }
		@Test public void test_19989() { testInvalid("({int, int} | !any)","{(any & any), {int}}"); }
		@Test public void test_19990() { testInvalid("({int, int} | !any)","{(any & int), {int}}"); }
		@Test public void test_19991() { testInvalid("({int, int} | !any)","{{any, any}, !int}"); }
		@Test public void test_19992() { testInvalid("({int, int} | !any)","{{any, int}, !int}"); }
		@Test public void test_19993() { testInvalid("({int, int} | !any)","{(any | any), !int}"); }
		@Test public void test_19994() { testInvalid("({int, int} | !any)","{(int | any), !int}"); }
		@Test public void test_19995() { testInvalid("({int, int} | !any)","{(any & any), !int}"); }
		@Test public void test_19996() { testInvalid("({int, int} | !any)","{(int & any), !int}"); }
		@Test public void test_19997() { testInvalid("({int, int} | !any)","{(int & int), !int}"); }
		@Test public void test_19998() { testInvalid("({int, int} | !any)","{{any}, {any, any}}"); }
		@Test public void test_19999() { testInvalid("({int, int} | !any)","{{int}, {any, any}}"); }
	}
	public static class Part_2 {
		@Test public void test_20000() { testInvalid("({int, int} | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_20001() { testInvalid("({int, int} | !any)","{(any | any), {any, any}}"); }
		@Test public void test_20002() { testInvalid("({int, int} | !any)","{(any | int), {any, any}}"); }
		@Test public void test_20003() { testInvalid("({int, int} | !any)","{!int, {int, any}}"); }
		@Test public void test_20004() { testInvalid("({int, int} | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_20005() { testInvalid("({int, int} | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_20006() { testInvalid("({int, int} | !any)","{(any & int), {int, any}}"); }
		@Test public void test_20007() { testInvalid("({int, int} | !any)","{{any}, {any, int}}"); }
		@Test public void test_20008() { testInvalid("({int, int} | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_20009() { testInvalid("({int, int} | !any)","{(int | int), {any, int}}"); }
		@Test public void test_20010() { testInvalid("({int, int} | !any)","{(any & int), {any, int}}"); }
		@Test public void test_20011() { testInvalid("({int, int} | !any)","{!int, {int, int}}"); }
		@Test public void test_20012() { testInvalid("({int, int} | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_20013() { testInvalid("({int, int} | !any)","{(any | any), {int, int}}"); }
		@Test public void test_20014() { testInvalid("({int, int} | !any)","{(int | any), {int, int}}"); }
		@Test public void test_20015() { testInvalid("({int, int} | !any)","{(int & any), {int, int}}"); }
		@Test public void test_20016() { testInvalid("({int, int} | !any)","{{int}, (any | any)}"); }
		@Test public void test_20017() { testInvalid("({int, int} | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_20018() { testInvalid("({int, int} | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_20019() { testInvalid("({int, int} | !any)","{(any | any), (any | any)}"); }
		@Test public void test_20020() { testInvalid("({int, int} | !any)","{(int | any), (any | any)}"); }
		@Test public void test_20021() { testInvalid("({int, int} | !any)","{(int & int), (any | any)}"); }
		@Test public void test_20022() { testInvalid("({int, int} | !any)","{!int, (int | any)}"); }
		@Test public void test_20023() { testInvalid("({int, int} | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_20024() { testInvalid("({int, int} | !any)","{(any | any), (int | any)}"); }
		@Test public void test_20025() { testInvalid("({int, int} | !any)","{(int | int), (int | any)}"); }
		@Test public void test_20026() { testInvalid("({int, int} | !any)","{{any}, (any | int)}"); }
		@Test public void test_20027() { testInvalid("({int, int} | !any)","{!int, (any | int)}"); }
		@Test public void test_20028() { testInvalid("({int, int} | !any)","{(any | any), (any | int)}"); }
		@Test public void test_20029() { testInvalid("({int, int} | !any)","{(any | int), (any | int)}"); }
		@Test public void test_20030() { testInvalid("({int, int} | !any)","{(any & int), (any | int)}"); }
		@Test public void test_20031() { testInvalid("({int, int} | !any)","{{int}, (int | int)}"); }
		@Test public void test_20032() { testInvalid("({int, int} | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_20033() { testInvalid("({int, int} | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_20034() { testInvalid("({int, int} | !any)","{{int}, (any & any)}"); }
		@Test public void test_20035() { testInvalid("({int, int} | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_20036() { testInvalid("({int, int} | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_20037() { testInvalid("({int, int} | !any)","{(int | any), (any & any)}"); }
		@Test public void test_20038() { testInvalid("({int, int} | !any)","{(any & any), (any & any)}"); }
		@Test public void test_20039() { testInvalid("({int, int} | !any)","{(int & any), (any & any)}"); }
		@Test public void test_20040() { testInvalid("({int, int} | !any)","{{any}, (int & any)}"); }
		@Test public void test_20041() { testInvalid("({int, int} | !any)","{{int}, (int & any)}"); }
		@Test public void test_20042() { testInvalid("({int, int} | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_20043() { testInvalid("({int, int} | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_20044() { testInvalid("({int, int} | !any)","{(any | int), (int & any)}"); }
		@Test public void test_20045() { testInvalid("({int, int} | !any)","{(any & any), (int & any)}"); }
		@Test public void test_20046() { testValid("({int, int} | !any)","{(int & any), (int & any)}"); }
		@Test public void test_20047() { testValid("({int, int} | !any)","{(int & int), (int & any)}"); }
		@Test public void test_20048() { testInvalid("({int, int} | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_20049() { testInvalid("({int, int} | !any)","{(any & any), (any & int)}"); }
		@Test public void test_20050() { testInvalid("({int, int} | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_20051() { testValid("({int, int} | !any)","{(int | int), (int & int)}"); }
		@Test public void test_20052() { testInvalid("({int, int} | !any)","{(any & any), (int & int)}"); }
		@Test public void test_20053() { testValid("({int, int} | !any)","{(any & int), (int & int)}"); }
		@Test public void test_20054() { testValid("({int, int} | !any)","{(int & int), (int & int)}"); }
		@Test public void test_20055() { testInvalid("({int, int} | !any)","(!int | {any})"); }
		@Test public void test_20056() { testInvalid("({int, int} | !any)","({any, any} | {any})"); }
		@Test public void test_20057() { testInvalid("({int, int} | !any)","((any | any) | {any})"); }
		@Test public void test_20058() { testInvalid("({int, int} | !any)","((int | any) | {any})"); }
		@Test public void test_20059() { testInvalid("({int, int} | !any)","((any & any) | {any})"); }
		@Test public void test_20060() { testInvalid("({int, int} | !any)","((int & any) | {any})"); }
		@Test public void test_20061() { testInvalid("({int, int} | !any)","((any & int) | {any})"); }
		@Test public void test_20062() { testInvalid("({int, int} | !any)","({int} | {int})"); }
		@Test public void test_20063() { testInvalid("({int, int} | !any)","(!any | {int})"); }
		@Test public void test_20064() { testInvalid("({int, int} | !any)","(!int | {int})"); }
		@Test public void test_20065() { testInvalid("({int, int} | !any)","({any, int} | {int})"); }
		@Test public void test_20066() { testInvalid("({int, int} | !any)","((int & any) | {int})"); }
		@Test public void test_20067() { testInvalid("({int, int} | !any)","((any & int) | {int})"); }
		@Test public void test_20068() { testInvalid("({int, int} | !any)","((int & int) | {int})"); }
		@Test public void test_20069() { testInvalid("({int, int} | !any)","({any} | !any)"); }
		@Test public void test_20070() { testInvalid("({int, int} | !any)","({int} | !any)"); }
		@Test public void test_20071() { testInvalid("({int, int} | !any)","({any, any} | !any)"); }
		@Test public void test_20072() { testValid("({int, int} | !any)","({int, int} | !any)"); }
		@Test public void test_20073() { testInvalid("({int, int} | !any)","((any | any) | !any)"); }
		@Test public void test_20074() { testInvalid("({int, int} | !any)","((int | any) | !any)"); }
		@Test public void test_20075() { testInvalid("({int, int} | !any)","((int | int) | !any)"); }
		@Test public void test_20076() { testInvalid("({int, int} | !any)","((int & int) | !any)"); }
		@Test public void test_20077() { testInvalid("({int, int} | !any)","(!int | !int)"); }
		@Test public void test_20078() { testInvalid("({int, int} | !any)","({any, any} | !int)"); }
		@Test public void test_20079() { testInvalid("({int, int} | !any)","({int, int} | !int)"); }
		@Test public void test_20080() { testInvalid("({int, int} | !any)","((int | any) | !int)"); }
		@Test public void test_20081() { testInvalid("({int, int} | !any)","((any | int) | !int)"); }
		@Test public void test_20082() { testInvalid("({int, int} | !any)","((any & int) | !int)"); }
		@Test public void test_20083() { testInvalid("({int, int} | !any)","((int & int) | !int)"); }
		@Test public void test_20084() { testInvalid("({int, int} | !any)","({int} | {any, any})"); }
		@Test public void test_20085() { testInvalid("({int, int} | !any)","(!any | {any, any})"); }
		@Test public void test_20086() { testInvalid("({int, int} | !any)","(!int | {any, any})"); }
		@Test public void test_20087() { testInvalid("({int, int} | !any)","({any, int} | {any, any})"); }
		@Test public void test_20088() { testInvalid("({int, int} | !any)","((int | any) | {any, any})"); }
		@Test public void test_20089() { testInvalid("({int, int} | !any)","((any & any) | {any, any})"); }
		@Test public void test_20090() { testInvalid("({int, int} | !any)","((any & int) | {any, any})"); }
		@Test public void test_20091() { testInvalid("({int, int} | !any)","(!int | {int, any})"); }
		@Test public void test_20092() { testInvalid("({int, int} | !any)","({any, int} | {int, any})"); }
		@Test public void test_20093() { testInvalid("({int, int} | !any)","((any | any) | {int, any})"); }
		@Test public void test_20094() { testInvalid("({int, int} | !any)","((int | any) | {int, any})"); }
		@Test public void test_20095() { testInvalid("({int, int} | !any)","((any | int) | {int, any})"); }
		@Test public void test_20096() { testInvalid("({int, int} | !any)","((int & any) | {int, any})"); }
		@Test public void test_20097() { testInvalid("({int, int} | !any)","({any} | {any, int})"); }
		@Test public void test_20098() { testInvalid("({int, int} | !any)","(!int | {any, int})"); }
		@Test public void test_20099() { testInvalid("({int, int} | !any)","({any, int} | {any, int})"); }
		@Test public void test_20100() { testInvalid("({int, int} | !any)","((any | any) | {any, int})"); }
		@Test public void test_20101() { testInvalid("({int, int} | !any)","((any | int) | {any, int})"); }
		@Test public void test_20102() { testInvalid("({int, int} | !any)","((int | int) | {any, int})"); }
		@Test public void test_20103() { testInvalid("({int, int} | !any)","((int & any) | {any, int})"); }
		@Test public void test_20104() { testValid("({int, int} | !any)","(!any | {int, int})"); }
		@Test public void test_20105() { testInvalid("({int, int} | !any)","(!int | {int, int})"); }
		@Test public void test_20106() { testInvalid("({int, int} | !any)","({any, any} | {int, int})"); }
		@Test public void test_20107() { testInvalid("({int, int} | !any)","({any, int} | {int, int})"); }
		@Test public void test_20108() { testInvalid("({int, int} | !any)","((any | any) | {int, int})"); }
		@Test public void test_20109() { testInvalid("({int, int} | !any)","((int | int) | {int, int})"); }
		@Test public void test_20110() { testInvalid("({int, int} | !any)","((int & any) | {int, int})"); }
		@Test public void test_20111() { testInvalid("({int, int} | !any)","((any & int) | {int, int})"); }
		@Test public void test_20112() { testInvalid("({int, int} | !any)","((int & int) | {int, int})"); }
		@Test public void test_20113() { testInvalid("({int, int} | !any)","({any} | (any | any))"); }
		@Test public void test_20114() { testInvalid("({int, int} | !any)","(!any | (any | any))"); }
		@Test public void test_20115() { testInvalid("({int, int} | !any)","({any, any} | (any | any))"); }
		@Test public void test_20116() { testInvalid("({int, int} | !any)","({any, int} | (any | any))"); }
		@Test public void test_20117() { testInvalid("({int, int} | !any)","({int, int} | (any | any))"); }
		@Test public void test_20118() { testInvalid("({int, int} | !any)","((int | any) | (any | any))"); }
		@Test public void test_20119() { testInvalid("({int, int} | !any)","((any | int) | (any | any))"); }
		@Test public void test_20120() { testInvalid("({int, int} | !any)","((any & int) | (any | any))"); }
		@Test public void test_20121() { testInvalid("({int, int} | !any)","((int & int) | (any | any))"); }
		@Test public void test_20122() { testInvalid("({int, int} | !any)","({any} | (int | any))"); }
		@Test public void test_20123() { testInvalid("({int, int} | !any)","(!int | (int | any))"); }
		@Test public void test_20124() { testInvalid("({int, int} | !any)","({int, any} | (int | any))"); }
		@Test public void test_20125() { testInvalid("({int, int} | !any)","({any, int} | (int | any))"); }
		@Test public void test_20126() { testInvalid("({int, int} | !any)","((int & any) | (int | any))"); }
		@Test public void test_20127() { testInvalid("({int, int} | !any)","((any & int) | (int | any))"); }
		@Test public void test_20128() { testInvalid("({int, int} | !any)","({any} | (any | int))"); }
		@Test public void test_20129() { testInvalid("({int, int} | !any)","({int} | (any | int))"); }
		@Test public void test_20130() { testInvalid("({int, int} | !any)","(!any | (any | int))"); }
		@Test public void test_20131() { testInvalid("({int, int} | !any)","(!int | (any | int))"); }
		@Test public void test_20132() { testInvalid("({int, int} | !any)","({any, int} | (any | int))"); }
		@Test public void test_20133() { testInvalid("({int, int} | !any)","({int, int} | (any | int))"); }
		@Test public void test_20134() { testInvalid("({int, int} | !any)","((int | any) | (any | int))"); }
		@Test public void test_20135() { testInvalid("({int, int} | !any)","((any | int) | (any | int))"); }
		@Test public void test_20136() { testInvalid("({int, int} | !any)","((int | int) | (any | int))"); }
		@Test public void test_20137() { testInvalid("({int, int} | !any)","((any & any) | (any | int))"); }
		@Test public void test_20138() { testInvalid("({int, int} | !any)","({int} | (int | int))"); }
		@Test public void test_20139() { testInvalid("({int, int} | !any)","(!any | (int | int))"); }
		@Test public void test_20140() { testInvalid("({int, int} | !any)","(!int | (int | int))"); }
		@Test public void test_20141() { testInvalid("({int, int} | !any)","({int, any} | (int | int))"); }
		@Test public void test_20142() { testInvalid("({int, int} | !any)","({any, int} | (int | int))"); }
		@Test public void test_20143() { testInvalid("({int, int} | !any)","((any | int) | (int | int))"); }
		@Test public void test_20144() { testInvalid("({int, int} | !any)","((int | int) | (int | int))"); }
		@Test public void test_20145() { testInvalid("({int, int} | !any)","((any & any) | (int | int))"); }
		@Test public void test_20146() { testInvalid("({int, int} | !any)","((int & any) | (int | int))"); }
		@Test public void test_20147() { testInvalid("({int, int} | !any)","((int & int) | (int | int))"); }
		@Test public void test_20148() { testInvalid("({int, int} | !any)","(!any | (any & any))"); }
		@Test public void test_20149() { testInvalid("({int, int} | !any)","(!int | (any & any))"); }
		@Test public void test_20150() { testInvalid("({int, int} | !any)","({any, any} | (any & any))"); }
		@Test public void test_20151() { testInvalid("({int, int} | !any)","({int, any} | (any & any))"); }
		@Test public void test_20152() { testInvalid("({int, int} | !any)","({any, int} | (any & any))"); }
		@Test public void test_20153() { testInvalid("({int, int} | !any)","({int, int} | (any & any))"); }
		@Test public void test_20154() { testInvalid("({int, int} | !any)","((int | any) | (any & any))"); }
		@Test public void test_20155() { testInvalid("({int, int} | !any)","((int | int) | (any & any))"); }
		@Test public void test_20156() { testInvalid("({int, int} | !any)","((int & any) | (any & any))"); }
		@Test public void test_20157() { testInvalid("({int, int} | !any)","((any & int) | (any & any))"); }
		@Test public void test_20158() { testInvalid("({int, int} | !any)","((int & int) | (any & any))"); }
		@Test public void test_20159() { testInvalid("({int, int} | !any)","({any} | (int & any))"); }
		@Test public void test_20160() { testValid("((any | any) | !any)","{int}"); }
		@Test public void test_20161() { testValid("((any | any) | !any)","{any, any}"); }
		@Test public void test_20162() { testValid("((any | any) | !any)","{int, int}"); }
		@Test public void test_20163() { testValid("((any | any) | !any)","(any | int)"); }
		@Test public void test_20164() { testValid("((any | any) | !any)","(int & any)"); }
		@Test public void test_20165() { testValid("((any | any) | !any)","{{any}}"); }
		@Test public void test_20166() { testValid("((any | any) | !any)","{{int, any}}"); }
		@Test public void test_20167() { testValid("((any | any) | !any)","{{int, int}}"); }
		@Test public void test_20168() { testValid("((any | any) | !any)","{(any | int)}"); }
		@Test public void test_20169() { testValid("((any | any) | !any)","!{int, any}"); }
		@Test public void test_20170() { testValid("((any | any) | !any)","!{int, int}"); }
		@Test public void test_20171() { testValid("((any | any) | !any)","!(any | any)"); }
		@Test public void test_20172() { testValid("((any | any) | !any)","!(any & any)"); }
		@Test public void test_20173() { testValid("((any | any) | !any)","!(int & int)"); }
		@Test public void test_20174() { testValid("((any | any) | !any)","{{int}, {any}}"); }
		@Test public void test_20175() { testValid("((any | any) | !any)","{!int, {any}}"); }
		@Test public void test_20176() { testValid("((any | any) | !any)","{{int, int}, {any}}"); }
		@Test public void test_20177() { testValid("((any | any) | !any)","{(any | int), {any}}"); }
		@Test public void test_20178() { testValid("((any | any) | !any)","{!int, {int}}"); }
		@Test public void test_20179() { testValid("((any | any) | !any)","{{any, any}, {int}}"); }
		@Test public void test_20180() { testValid("((any | any) | !any)","{(any | any), {int}}"); }
		@Test public void test_20181() { testValid("((any | any) | !any)","{(any & any), {int}}"); }
		@Test public void test_20182() { testValid("((any | any) | !any)","{(any & int), {int}}"); }
		@Test public void test_20183() { testValid("((any | any) | !any)","{{any, any}, !int}"); }
		@Test public void test_20184() { testValid("((any | any) | !any)","{{any, int}, !int}"); }
		@Test public void test_20185() { testValid("((any | any) | !any)","{(any | any), !int}"); }
		@Test public void test_20186() { testValid("((any | any) | !any)","{(int | any), !int}"); }
		@Test public void test_20187() { testValid("((any | any) | !any)","{(any & any), !int}"); }
		@Test public void test_20188() { testValid("((any | any) | !any)","{(int & any), !int}"); }
		@Test public void test_20189() { testValid("((any | any) | !any)","{(int & int), !int}"); }
		@Test public void test_20190() { testValid("((any | any) | !any)","{{any}, {any, any}}"); }
		@Test public void test_20191() { testValid("((any | any) | !any)","{{int}, {any, any}}"); }
		@Test public void test_20192() { testValid("((any | any) | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_20193() { testValid("((any | any) | !any)","{(any | any), {any, any}}"); }
		@Test public void test_20194() { testValid("((any | any) | !any)","{(any | int), {any, any}}"); }
		@Test public void test_20195() { testValid("((any | any) | !any)","{!int, {int, any}}"); }
		@Test public void test_20196() { testValid("((any | any) | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_20197() { testValid("((any | any) | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_20198() { testValid("((any | any) | !any)","{(any & int), {int, any}}"); }
		@Test public void test_20199() { testValid("((any | any) | !any)","{{any}, {any, int}}"); }
		@Test public void test_20200() { testValid("((any | any) | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_20201() { testValid("((any | any) | !any)","{(int | int), {any, int}}"); }
		@Test public void test_20202() { testValid("((any | any) | !any)","{(any & int), {any, int}}"); }
		@Test public void test_20203() { testValid("((any | any) | !any)","{!int, {int, int}}"); }
		@Test public void test_20204() { testValid("((any | any) | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_20205() { testValid("((any | any) | !any)","{(any | any), {int, int}}"); }
		@Test public void test_20206() { testValid("((any | any) | !any)","{(int | any), {int, int}}"); }
		@Test public void test_20207() { testValid("((any | any) | !any)","{(int & any), {int, int}}"); }
		@Test public void test_20208() { testValid("((any | any) | !any)","{{int}, (any | any)}"); }
		@Test public void test_20209() { testValid("((any | any) | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_20210() { testValid("((any | any) | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_20211() { testValid("((any | any) | !any)","{(any | any), (any | any)}"); }
		@Test public void test_20212() { testValid("((any | any) | !any)","{(int | any), (any | any)}"); }
		@Test public void test_20213() { testValid("((any | any) | !any)","{(int & int), (any | any)}"); }
		@Test public void test_20214() { testValid("((any | any) | !any)","{!int, (int | any)}"); }
		@Test public void test_20215() { testValid("((any | any) | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_20216() { testValid("((any | any) | !any)","{(any | any), (int | any)}"); }
		@Test public void test_20217() { testValid("((any | any) | !any)","{(int | int), (int | any)}"); }
		@Test public void test_20218() { testValid("((any | any) | !any)","{{any}, (any | int)}"); }
		@Test public void test_20219() { testValid("((any | any) | !any)","{!int, (any | int)}"); }
		@Test public void test_20220() { testValid("((any | any) | !any)","{(any | any), (any | int)}"); }
		@Test public void test_20221() { testValid("((any | any) | !any)","{(any | int), (any | int)}"); }
		@Test public void test_20222() { testValid("((any | any) | !any)","{(any & int), (any | int)}"); }
		@Test public void test_20223() { testValid("((any | any) | !any)","{{int}, (int | int)}"); }
		@Test public void test_20224() { testValid("((any | any) | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_20225() { testValid("((any | any) | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_20226() { testValid("((any | any) | !any)","{{int}, (any & any)}"); }
		@Test public void test_20227() { testValid("((any | any) | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_20228() { testValid("((any | any) | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_20229() { testValid("((any | any) | !any)","{(int | any), (any & any)}"); }
		@Test public void test_20230() { testValid("((any | any) | !any)","{(any & any), (any & any)}"); }
		@Test public void test_20231() { testValid("((any | any) | !any)","{(int & any), (any & any)}"); }
		@Test public void test_20232() { testValid("((any | any) | !any)","{{any}, (int & any)}"); }
		@Test public void test_20233() { testValid("((any | any) | !any)","{{int}, (int & any)}"); }
		@Test public void test_20234() { testValid("((any | any) | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_20235() { testValid("((any | any) | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_20236() { testValid("((any | any) | !any)","{(any | int), (int & any)}"); }
		@Test public void test_20237() { testValid("((any | any) | !any)","{(any & any), (int & any)}"); }
		@Test public void test_20238() { testValid("((any | any) | !any)","{(int & any), (int & any)}"); }
		@Test public void test_20239() { testValid("((any | any) | !any)","{(int & int), (int & any)}"); }
		@Test public void test_20240() { testValid("((any | any) | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_20241() { testValid("((any | any) | !any)","{(any & any), (any & int)}"); }
		@Test public void test_20242() { testValid("((any | any) | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_20243() { testValid("((any | any) | !any)","{(int | int), (int & int)}"); }
		@Test public void test_20244() { testValid("((any | any) | !any)","{(any & any), (int & int)}"); }
		@Test public void test_20245() { testValid("((any | any) | !any)","{(any & int), (int & int)}"); }
		@Test public void test_20246() { testValid("((any | any) | !any)","{(int & int), (int & int)}"); }
		@Test public void test_20247() { testValid("((any | any) | !any)","(!int | {any})"); }
		@Test public void test_20248() { testValid("((any | any) | !any)","({any, any} | {any})"); }
		@Test public void test_20249() { testValid("((any | any) | !any)","((any | any) | {any})"); }
		@Test public void test_20250() { testValid("((any | any) | !any)","((int | any) | {any})"); }
		@Test public void test_20251() { testValid("((any | any) | !any)","((any & any) | {any})"); }
		@Test public void test_20252() { testValid("((any | any) | !any)","((int & any) | {any})"); }
		@Test public void test_20253() { testValid("((any | any) | !any)","((any & int) | {any})"); }
		@Test public void test_20254() { testValid("((any | any) | !any)","({int} | {int})"); }
		@Test public void test_20255() { testValid("((any | any) | !any)","(!any | {int})"); }
		@Test public void test_20256() { testValid("((any | any) | !any)","(!int | {int})"); }
		@Test public void test_20257() { testValid("((any | any) | !any)","({any, int} | {int})"); }
		@Test public void test_20258() { testValid("((any | any) | !any)","((int & any) | {int})"); }
		@Test public void test_20259() { testValid("((any | any) | !any)","((any & int) | {int})"); }
		@Test public void test_20260() { testValid("((any | any) | !any)","((int & int) | {int})"); }
		@Test public void test_20261() { testValid("((any | any) | !any)","({any} | !any)"); }
		@Test public void test_20262() { testValid("((any | any) | !any)","({int} | !any)"); }
		@Test public void test_20263() { testValid("((any | any) | !any)","({any, any} | !any)"); }
		@Test public void test_20264() { testValid("((any | any) | !any)","({int, int} | !any)"); }
		@Test public void test_20265() { testValid("((any | any) | !any)","((any | any) | !any)"); }
		@Test public void test_20266() { testValid("((any | any) | !any)","((int | any) | !any)"); }
		@Test public void test_20267() { testValid("((any | any) | !any)","((int | int) | !any)"); }
		@Test public void test_20268() { testValid("((any | any) | !any)","((int & int) | !any)"); }
		@Test public void test_20269() { testValid("((any | any) | !any)","(!int | !int)"); }
		@Test public void test_20270() { testValid("((any | any) | !any)","({any, any} | !int)"); }
		@Test public void test_20271() { testValid("((any | any) | !any)","({int, int} | !int)"); }
		@Test public void test_20272() { testValid("((any | any) | !any)","((int | any) | !int)"); }
		@Test public void test_20273() { testValid("((any | any) | !any)","((any | int) | !int)"); }
		@Test public void test_20274() { testValid("((any | any) | !any)","((any & int) | !int)"); }
		@Test public void test_20275() { testValid("((any | any) | !any)","((int & int) | !int)"); }
		@Test public void test_20276() { testValid("((any | any) | !any)","({int} | {any, any})"); }
		@Test public void test_20277() { testValid("((any | any) | !any)","(!any | {any, any})"); }
		@Test public void test_20278() { testValid("((any | any) | !any)","(!int | {any, any})"); }
		@Test public void test_20279() { testValid("((any | any) | !any)","({any, int} | {any, any})"); }
		@Test public void test_20280() { testValid("((any | any) | !any)","((int | any) | {any, any})"); }
		@Test public void test_20281() { testValid("((any | any) | !any)","((any & any) | {any, any})"); }
		@Test public void test_20282() { testValid("((any | any) | !any)","((any & int) | {any, any})"); }
		@Test public void test_20283() { testValid("((any | any) | !any)","(!int | {int, any})"); }
		@Test public void test_20284() { testValid("((any | any) | !any)","({any, int} | {int, any})"); }
		@Test public void test_20285() { testValid("((any | any) | !any)","((any | any) | {int, any})"); }
		@Test public void test_20286() { testValid("((any | any) | !any)","((int | any) | {int, any})"); }
		@Test public void test_20287() { testValid("((any | any) | !any)","((any | int) | {int, any})"); }
		@Test public void test_20288() { testValid("((any | any) | !any)","((int & any) | {int, any})"); }
		@Test public void test_20289() { testValid("((any | any) | !any)","({any} | {any, int})"); }
		@Test public void test_20290() { testValid("((any | any) | !any)","(!int | {any, int})"); }
		@Test public void test_20291() { testValid("((any | any) | !any)","({any, int} | {any, int})"); }
		@Test public void test_20292() { testValid("((any | any) | !any)","((any | any) | {any, int})"); }
		@Test public void test_20293() { testValid("((any | any) | !any)","((any | int) | {any, int})"); }
		@Test public void test_20294() { testValid("((any | any) | !any)","((int | int) | {any, int})"); }
		@Test public void test_20295() { testValid("((any | any) | !any)","((int & any) | {any, int})"); }
		@Test public void test_20296() { testValid("((any | any) | !any)","(!any | {int, int})"); }
		@Test public void test_20297() { testValid("((any | any) | !any)","(!int | {int, int})"); }
		@Test public void test_20298() { testValid("((any | any) | !any)","({any, any} | {int, int})"); }
		@Test public void test_20299() { testValid("((any | any) | !any)","({any, int} | {int, int})"); }
		@Test public void test_20300() { testValid("((any | any) | !any)","((any | any) | {int, int})"); }
		@Test public void test_20301() { testValid("((any | any) | !any)","((int | int) | {int, int})"); }
		@Test public void test_20302() { testValid("((any | any) | !any)","((int & any) | {int, int})"); }
		@Test public void test_20303() { testValid("((any | any) | !any)","((any & int) | {int, int})"); }
		@Test public void test_20304() { testValid("((any | any) | !any)","((int & int) | {int, int})"); }
		@Test public void test_20305() { testValid("((any | any) | !any)","({any} | (any | any))"); }
		@Test public void test_20306() { testValid("((any | any) | !any)","(!any | (any | any))"); }
		@Test public void test_20307() { testValid("((any | any) | !any)","({any, any} | (any | any))"); }
		@Test public void test_20308() { testValid("((any | any) | !any)","({any, int} | (any | any))"); }
		@Test public void test_20309() { testValid("((any | any) | !any)","({int, int} | (any | any))"); }
		@Test public void test_20310() { testValid("((any | any) | !any)","((int | any) | (any | any))"); }
		@Test public void test_20311() { testValid("((any | any) | !any)","((any | int) | (any | any))"); }
		@Test public void test_20312() { testValid("((any | any) | !any)","((any & int) | (any | any))"); }
		@Test public void test_20313() { testValid("((any | any) | !any)","((int & int) | (any | any))"); }
		@Test public void test_20314() { testValid("((any | any) | !any)","({any} | (int | any))"); }
		@Test public void test_20315() { testValid("((any | any) | !any)","(!int | (int | any))"); }
		@Test public void test_20316() { testValid("((any | any) | !any)","({int, any} | (int | any))"); }
		@Test public void test_20317() { testValid("((any | any) | !any)","({any, int} | (int | any))"); }
		@Test public void test_20318() { testValid("((any | any) | !any)","((int & any) | (int | any))"); }
		@Test public void test_20319() { testValid("((any | any) | !any)","((any & int) | (int | any))"); }
		@Test public void test_20320() { testValid("((any | any) | !any)","({any} | (any | int))"); }
		@Test public void test_20321() { testValid("((any | any) | !any)","({int} | (any | int))"); }
		@Test public void test_20322() { testValid("((any | any) | !any)","(!any | (any | int))"); }
		@Test public void test_20323() { testValid("((any | any) | !any)","(!int | (any | int))"); }
		@Test public void test_20324() { testValid("((any | any) | !any)","({any, int} | (any | int))"); }
		@Test public void test_20325() { testValid("((any | any) | !any)","({int, int} | (any | int))"); }
		@Test public void test_20326() { testValid("((any | any) | !any)","((int | any) | (any | int))"); }
		@Test public void test_20327() { testValid("((any | any) | !any)","((any | int) | (any | int))"); }
		@Test public void test_20328() { testValid("((any | any) | !any)","((int | int) | (any | int))"); }
		@Test public void test_20329() { testValid("((any | any) | !any)","((any & any) | (any | int))"); }
		@Test public void test_20330() { testValid("((any | any) | !any)","({int} | (int | int))"); }
		@Test public void test_20331() { testValid("((any | any) | !any)","(!any | (int | int))"); }
		@Test public void test_20332() { testValid("((any | any) | !any)","(!int | (int | int))"); }
		@Test public void test_20333() { testValid("((any | any) | !any)","({int, any} | (int | int))"); }
		@Test public void test_20334() { testValid("((any | any) | !any)","({any, int} | (int | int))"); }
		@Test public void test_20335() { testValid("((any | any) | !any)","((any | int) | (int | int))"); }
		@Test public void test_20336() { testValid("((any | any) | !any)","((int | int) | (int | int))"); }
		@Test public void test_20337() { testValid("((any | any) | !any)","((any & any) | (int | int))"); }
		@Test public void test_20338() { testValid("((any | any) | !any)","((int & any) | (int | int))"); }
		@Test public void test_20339() { testValid("((any | any) | !any)","((int & int) | (int | int))"); }
		@Test public void test_20340() { testValid("((any | any) | !any)","(!any | (any & any))"); }
		@Test public void test_20341() { testValid("((any | any) | !any)","(!int | (any & any))"); }
		@Test public void test_20342() { testValid("((any | any) | !any)","({any, any} | (any & any))"); }
		@Test public void test_20343() { testValid("((any | any) | !any)","({int, any} | (any & any))"); }
		@Test public void test_20344() { testValid("((any | any) | !any)","({any, int} | (any & any))"); }
		@Test public void test_20345() { testValid("((any | any) | !any)","({int, int} | (any & any))"); }
		@Test public void test_20346() { testValid("((any | any) | !any)","((int | any) | (any & any))"); }
		@Test public void test_20347() { testValid("((any | any) | !any)","((int | int) | (any & any))"); }
		@Test public void test_20348() { testValid("((any | any) | !any)","((int & any) | (any & any))"); }
		@Test public void test_20349() { testValid("((any | any) | !any)","((any & int) | (any & any))"); }
		@Test public void test_20350() { testValid("((any | any) | !any)","((int & int) | (any & any))"); }
		@Test public void test_20351() { testValid("((any | any) | !any)","({any} | (int & any))"); }
		@Test public void test_20352() { testValid("((int | any) | !any)","{int}"); }
		@Test public void test_20353() { testValid("((int | any) | !any)","{any, any}"); }
		@Test public void test_20354() { testValid("((int | any) | !any)","{int, int}"); }
		@Test public void test_20355() { testValid("((int | any) | !any)","(any | int)"); }
		@Test public void test_20356() { testValid("((int | any) | !any)","(int & any)"); }
		@Test public void test_20357() { testValid("((int | any) | !any)","{{any}}"); }
		@Test public void test_20358() { testValid("((int | any) | !any)","{{int, any}}"); }
		@Test public void test_20359() { testValid("((int | any) | !any)","{{int, int}}"); }
		@Test public void test_20360() { testValid("((int | any) | !any)","{(any | int)}"); }
		@Test public void test_20361() { testValid("((int | any) | !any)","!{int, any}"); }
		@Test public void test_20362() { testValid("((int | any) | !any)","!{int, int}"); }
		@Test public void test_20363() { testValid("((int | any) | !any)","!(any | any)"); }
		@Test public void test_20364() { testValid("((int | any) | !any)","!(any & any)"); }
		@Test public void test_20365() { testValid("((int | any) | !any)","!(int & int)"); }
		@Test public void test_20366() { testValid("((int | any) | !any)","{{int}, {any}}"); }
		@Test public void test_20367() { testValid("((int | any) | !any)","{!int, {any}}"); }
		@Test public void test_20368() { testValid("((int | any) | !any)","{{int, int}, {any}}"); }
		@Test public void test_20369() { testValid("((int | any) | !any)","{(any | int), {any}}"); }
		@Test public void test_20370() { testValid("((int | any) | !any)","{!int, {int}}"); }
		@Test public void test_20371() { testValid("((int | any) | !any)","{{any, any}, {int}}"); }
		@Test public void test_20372() { testValid("((int | any) | !any)","{(any | any), {int}}"); }
		@Test public void test_20373() { testValid("((int | any) | !any)","{(any & any), {int}}"); }
		@Test public void test_20374() { testValid("((int | any) | !any)","{(any & int), {int}}"); }
		@Test public void test_20375() { testValid("((int | any) | !any)","{{any, any}, !int}"); }
		@Test public void test_20376() { testValid("((int | any) | !any)","{{any, int}, !int}"); }
		@Test public void test_20377() { testValid("((int | any) | !any)","{(any | any), !int}"); }
		@Test public void test_20378() { testValid("((int | any) | !any)","{(int | any), !int}"); }
		@Test public void test_20379() { testValid("((int | any) | !any)","{(any & any), !int}"); }
		@Test public void test_20380() { testValid("((int | any) | !any)","{(int & any), !int}"); }
		@Test public void test_20381() { testValid("((int | any) | !any)","{(int & int), !int}"); }
		@Test public void test_20382() { testValid("((int | any) | !any)","{{any}, {any, any}}"); }
		@Test public void test_20383() { testValid("((int | any) | !any)","{{int}, {any, any}}"); }
		@Test public void test_20384() { testValid("((int | any) | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_20385() { testValid("((int | any) | !any)","{(any | any), {any, any}}"); }
		@Test public void test_20386() { testValid("((int | any) | !any)","{(any | int), {any, any}}"); }
		@Test public void test_20387() { testValid("((int | any) | !any)","{!int, {int, any}}"); }
		@Test public void test_20388() { testValid("((int | any) | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_20389() { testValid("((int | any) | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_20390() { testValid("((int | any) | !any)","{(any & int), {int, any}}"); }
		@Test public void test_20391() { testValid("((int | any) | !any)","{{any}, {any, int}}"); }
		@Test public void test_20392() { testValid("((int | any) | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_20393() { testValid("((int | any) | !any)","{(int | int), {any, int}}"); }
		@Test public void test_20394() { testValid("((int | any) | !any)","{(any & int), {any, int}}"); }
		@Test public void test_20395() { testValid("((int | any) | !any)","{!int, {int, int}}"); }
		@Test public void test_20396() { testValid("((int | any) | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_20397() { testValid("((int | any) | !any)","{(any | any), {int, int}}"); }
		@Test public void test_20398() { testValid("((int | any) | !any)","{(int | any), {int, int}}"); }
		@Test public void test_20399() { testValid("((int | any) | !any)","{(int & any), {int, int}}"); }
		@Test public void test_20400() { testValid("((int | any) | !any)","{{int}, (any | any)}"); }
		@Test public void test_20401() { testValid("((int | any) | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_20402() { testValid("((int | any) | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_20403() { testValid("((int | any) | !any)","{(any | any), (any | any)}"); }
		@Test public void test_20404() { testValid("((int | any) | !any)","{(int | any), (any | any)}"); }
		@Test public void test_20405() { testValid("((int | any) | !any)","{(int & int), (any | any)}"); }
		@Test public void test_20406() { testValid("((int | any) | !any)","{!int, (int | any)}"); }
		@Test public void test_20407() { testValid("((int | any) | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_20408() { testValid("((int | any) | !any)","{(any | any), (int | any)}"); }
		@Test public void test_20409() { testValid("((int | any) | !any)","{(int | int), (int | any)}"); }
		@Test public void test_20410() { testValid("((int | any) | !any)","{{any}, (any | int)}"); }
		@Test public void test_20411() { testValid("((int | any) | !any)","{!int, (any | int)}"); }
		@Test public void test_20412() { testValid("((int | any) | !any)","{(any | any), (any | int)}"); }
		@Test public void test_20413() { testValid("((int | any) | !any)","{(any | int), (any | int)}"); }
		@Test public void test_20414() { testValid("((int | any) | !any)","{(any & int), (any | int)}"); }
		@Test public void test_20415() { testValid("((int | any) | !any)","{{int}, (int | int)}"); }
		@Test public void test_20416() { testValid("((int | any) | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_20417() { testValid("((int | any) | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_20418() { testValid("((int | any) | !any)","{{int}, (any & any)}"); }
		@Test public void test_20419() { testValid("((int | any) | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_20420() { testValid("((int | any) | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_20421() { testValid("((int | any) | !any)","{(int | any), (any & any)}"); }
		@Test public void test_20422() { testValid("((int | any) | !any)","{(any & any), (any & any)}"); }
		@Test public void test_20423() { testValid("((int | any) | !any)","{(int & any), (any & any)}"); }
		@Test public void test_20424() { testValid("((int | any) | !any)","{{any}, (int & any)}"); }
		@Test public void test_20425() { testValid("((int | any) | !any)","{{int}, (int & any)}"); }
		@Test public void test_20426() { testValid("((int | any) | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_20427() { testValid("((int | any) | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_20428() { testValid("((int | any) | !any)","{(any | int), (int & any)}"); }
		@Test public void test_20429() { testValid("((int | any) | !any)","{(any & any), (int & any)}"); }
		@Test public void test_20430() { testValid("((int | any) | !any)","{(int & any), (int & any)}"); }
		@Test public void test_20431() { testValid("((int | any) | !any)","{(int & int), (int & any)}"); }
		@Test public void test_20432() { testValid("((int | any) | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_20433() { testValid("((int | any) | !any)","{(any & any), (any & int)}"); }
		@Test public void test_20434() { testValid("((int | any) | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_20435() { testValid("((int | any) | !any)","{(int | int), (int & int)}"); }
		@Test public void test_20436() { testValid("((int | any) | !any)","{(any & any), (int & int)}"); }
		@Test public void test_20437() { testValid("((int | any) | !any)","{(any & int), (int & int)}"); }
		@Test public void test_20438() { testValid("((int | any) | !any)","{(int & int), (int & int)}"); }
		@Test public void test_20439() { testValid("((int | any) | !any)","(!int | {any})"); }
		@Test public void test_20440() { testValid("((int | any) | !any)","({any, any} | {any})"); }
		@Test public void test_20441() { testValid("((int | any) | !any)","((any | any) | {any})"); }
		@Test public void test_20442() { testValid("((int | any) | !any)","((int | any) | {any})"); }
		@Test public void test_20443() { testValid("((int | any) | !any)","((any & any) | {any})"); }
		@Test public void test_20444() { testValid("((int | any) | !any)","((int & any) | {any})"); }
		@Test public void test_20445() { testValid("((int | any) | !any)","((any & int) | {any})"); }
		@Test public void test_20446() { testValid("((int | any) | !any)","({int} | {int})"); }
		@Test public void test_20447() { testValid("((int | any) | !any)","(!any | {int})"); }
		@Test public void test_20448() { testValid("((int | any) | !any)","(!int | {int})"); }
		@Test public void test_20449() { testValid("((int | any) | !any)","({any, int} | {int})"); }
		@Test public void test_20450() { testValid("((int | any) | !any)","((int & any) | {int})"); }
		@Test public void test_20451() { testValid("((int | any) | !any)","((any & int) | {int})"); }
		@Test public void test_20452() { testValid("((int | any) | !any)","((int & int) | {int})"); }
		@Test public void test_20453() { testValid("((int | any) | !any)","({any} | !any)"); }
		@Test public void test_20454() { testValid("((int | any) | !any)","({int} | !any)"); }
		@Test public void test_20455() { testValid("((int | any) | !any)","({any, any} | !any)"); }
		@Test public void test_20456() { testValid("((int | any) | !any)","({int, int} | !any)"); }
		@Test public void test_20457() { testValid("((int | any) | !any)","((any | any) | !any)"); }
		@Test public void test_20458() { testValid("((int | any) | !any)","((int | any) | !any)"); }
		@Test public void test_20459() { testValid("((int | any) | !any)","((int | int) | !any)"); }
		@Test public void test_20460() { testValid("((int | any) | !any)","((int & int) | !any)"); }
		@Test public void test_20461() { testValid("((int | any) | !any)","(!int | !int)"); }
		@Test public void test_20462() { testValid("((int | any) | !any)","({any, any} | !int)"); }
		@Test public void test_20463() { testValid("((int | any) | !any)","({int, int} | !int)"); }
		@Test public void test_20464() { testValid("((int | any) | !any)","((int | any) | !int)"); }
		@Test public void test_20465() { testValid("((int | any) | !any)","((any | int) | !int)"); }
		@Test public void test_20466() { testValid("((int | any) | !any)","((any & int) | !int)"); }
		@Test public void test_20467() { testValid("((int | any) | !any)","((int & int) | !int)"); }
		@Test public void test_20468() { testValid("((int | any) | !any)","({int} | {any, any})"); }
		@Test public void test_20469() { testValid("((int | any) | !any)","(!any | {any, any})"); }
		@Test public void test_20470() { testValid("((int | any) | !any)","(!int | {any, any})"); }
		@Test public void test_20471() { testValid("((int | any) | !any)","({any, int} | {any, any})"); }
		@Test public void test_20472() { testValid("((int | any) | !any)","((int | any) | {any, any})"); }
		@Test public void test_20473() { testValid("((int | any) | !any)","((any & any) | {any, any})"); }
		@Test public void test_20474() { testValid("((int | any) | !any)","((any & int) | {any, any})"); }
		@Test public void test_20475() { testValid("((int | any) | !any)","(!int | {int, any})"); }
		@Test public void test_20476() { testValid("((int | any) | !any)","({any, int} | {int, any})"); }
		@Test public void test_20477() { testValid("((int | any) | !any)","((any | any) | {int, any})"); }
		@Test public void test_20478() { testValid("((int | any) | !any)","((int | any) | {int, any})"); }
		@Test public void test_20479() { testValid("((int | any) | !any)","((any | int) | {int, any})"); }
		@Test public void test_20480() { testValid("((int | any) | !any)","((int & any) | {int, any})"); }
		@Test public void test_20481() { testValid("((int | any) | !any)","({any} | {any, int})"); }
		@Test public void test_20482() { testValid("((int | any) | !any)","(!int | {any, int})"); }
		@Test public void test_20483() { testValid("((int | any) | !any)","({any, int} | {any, int})"); }
		@Test public void test_20484() { testValid("((int | any) | !any)","((any | any) | {any, int})"); }
		@Test public void test_20485() { testValid("((int | any) | !any)","((any | int) | {any, int})"); }
		@Test public void test_20486() { testValid("((int | any) | !any)","((int | int) | {any, int})"); }
		@Test public void test_20487() { testValid("((int | any) | !any)","((int & any) | {any, int})"); }
		@Test public void test_20488() { testValid("((int | any) | !any)","(!any | {int, int})"); }
		@Test public void test_20489() { testValid("((int | any) | !any)","(!int | {int, int})"); }
		@Test public void test_20490() { testValid("((int | any) | !any)","({any, any} | {int, int})"); }
		@Test public void test_20491() { testValid("((int | any) | !any)","({any, int} | {int, int})"); }
		@Test public void test_20492() { testValid("((int | any) | !any)","((any | any) | {int, int})"); }
		@Test public void test_20493() { testValid("((int | any) | !any)","((int | int) | {int, int})"); }
		@Test public void test_20494() { testValid("((int | any) | !any)","((int & any) | {int, int})"); }
		@Test public void test_20495() { testValid("((int | any) | !any)","((any & int) | {int, int})"); }
		@Test public void test_20496() { testValid("((int | any) | !any)","((int & int) | {int, int})"); }
		@Test public void test_20497() { testValid("((int | any) | !any)","({any} | (any | any))"); }
		@Test public void test_20498() { testValid("((int | any) | !any)","(!any | (any | any))"); }
		@Test public void test_20499() { testValid("((int | any) | !any)","({any, any} | (any | any))"); }
		@Test public void test_20500() { testValid("((int | any) | !any)","({any, int} | (any | any))"); }
		@Test public void test_20501() { testValid("((int | any) | !any)","({int, int} | (any | any))"); }
		@Test public void test_20502() { testValid("((int | any) | !any)","((int | any) | (any | any))"); }
		@Test public void test_20503() { testValid("((int | any) | !any)","((any | int) | (any | any))"); }
		@Test public void test_20504() { testValid("((int | any) | !any)","((any & int) | (any | any))"); }
		@Test public void test_20505() { testValid("((int | any) | !any)","((int & int) | (any | any))"); }
		@Test public void test_20506() { testValid("((int | any) | !any)","({any} | (int | any))"); }
		@Test public void test_20507() { testValid("((int | any) | !any)","(!int | (int | any))"); }
		@Test public void test_20508() { testValid("((int | any) | !any)","({int, any} | (int | any))"); }
		@Test public void test_20509() { testValid("((int | any) | !any)","({any, int} | (int | any))"); }
		@Test public void test_20510() { testValid("((int | any) | !any)","((int & any) | (int | any))"); }
		@Test public void test_20511() { testValid("((int | any) | !any)","((any & int) | (int | any))"); }
		@Test public void test_20512() { testValid("((int | any) | !any)","({any} | (any | int))"); }
		@Test public void test_20513() { testValid("((int | any) | !any)","({int} | (any | int))"); }
		@Test public void test_20514() { testValid("((int | any) | !any)","(!any | (any | int))"); }
		@Test public void test_20515() { testValid("((int | any) | !any)","(!int | (any | int))"); }
		@Test public void test_20516() { testValid("((int | any) | !any)","({any, int} | (any | int))"); }
		@Test public void test_20517() { testValid("((int | any) | !any)","({int, int} | (any | int))"); }
		@Test public void test_20518() { testValid("((int | any) | !any)","((int | any) | (any | int))"); }
		@Test public void test_20519() { testValid("((int | any) | !any)","((any | int) | (any | int))"); }
		@Test public void test_20520() { testValid("((int | any) | !any)","((int | int) | (any | int))"); }
		@Test public void test_20521() { testValid("((int | any) | !any)","((any & any) | (any | int))"); }
		@Test public void test_20522() { testValid("((int | any) | !any)","({int} | (int | int))"); }
		@Test public void test_20523() { testValid("((int | any) | !any)","(!any | (int | int))"); }
		@Test public void test_20524() { testValid("((int | any) | !any)","(!int | (int | int))"); }
		@Test public void test_20525() { testValid("((int | any) | !any)","({int, any} | (int | int))"); }
		@Test public void test_20526() { testValid("((int | any) | !any)","({any, int} | (int | int))"); }
		@Test public void test_20527() { testValid("((int | any) | !any)","((any | int) | (int | int))"); }
		@Test public void test_20528() { testValid("((int | any) | !any)","((int | int) | (int | int))"); }
		@Test public void test_20529() { testValid("((int | any) | !any)","((any & any) | (int | int))"); }
		@Test public void test_20530() { testValid("((int | any) | !any)","((int & any) | (int | int))"); }
		@Test public void test_20531() { testValid("((int | any) | !any)","((int & int) | (int | int))"); }
		@Test public void test_20532() { testValid("((int | any) | !any)","(!any | (any & any))"); }
		@Test public void test_20533() { testValid("((int | any) | !any)","(!int | (any & any))"); }
		@Test public void test_20534() { testValid("((int | any) | !any)","({any, any} | (any & any))"); }
		@Test public void test_20535() { testValid("((int | any) | !any)","({int, any} | (any & any))"); }
		@Test public void test_20536() { testValid("((int | any) | !any)","({any, int} | (any & any))"); }
		@Test public void test_20537() { testValid("((int | any) | !any)","({int, int} | (any & any))"); }
		@Test public void test_20538() { testValid("((int | any) | !any)","((int | any) | (any & any))"); }
		@Test public void test_20539() { testValid("((int | any) | !any)","((int | int) | (any & any))"); }
		@Test public void test_20540() { testValid("((int | any) | !any)","((int & any) | (any & any))"); }
		@Test public void test_20541() { testValid("((int | any) | !any)","((any & int) | (any & any))"); }
		@Test public void test_20542() { testValid("((int | any) | !any)","((int & int) | (any & any))"); }
		@Test public void test_20543() { testValid("((int | any) | !any)","({any} | (int & any))"); }
		@Test public void test_20544() { testInvalid("((int | int) | !any)","{int}"); }
		@Test public void test_20545() { testInvalid("((int | int) | !any)","{any, any}"); }
		@Test public void test_20546() { testInvalid("((int | int) | !any)","{int, int}"); }
		@Test public void test_20547() { testInvalid("((int | int) | !any)","(any | int)"); }
		@Test public void test_20548() { testValid("((int | int) | !any)","(int & any)"); }
		@Test public void test_20549() { testInvalid("((int | int) | !any)","{{any}}"); }
		@Test public void test_20550() { testInvalid("((int | int) | !any)","{{int, any}}"); }
		@Test public void test_20551() { testInvalid("((int | int) | !any)","{{int, int}}"); }
		@Test public void test_20552() { testInvalid("((int | int) | !any)","{(any | int)}"); }
		@Test public void test_20553() { testInvalid("((int | int) | !any)","!{int, any}"); }
		@Test public void test_20554() { testInvalid("((int | int) | !any)","!{int, int}"); }
		@Test public void test_20555() { testValid("((int | int) | !any)","!(any | any)"); }
		@Test public void test_20556() { testValid("((int | int) | !any)","!(any & any)"); }
		@Test public void test_20557() { testInvalid("((int | int) | !any)","!(int & int)"); }
		@Test public void test_20558() { testInvalid("((int | int) | !any)","{{int}, {any}}"); }
		@Test public void test_20559() { testInvalid("((int | int) | !any)","{!int, {any}}"); }
		@Test public void test_20560() { testInvalid("((int | int) | !any)","{{int, int}, {any}}"); }
		@Test public void test_20561() { testInvalid("((int | int) | !any)","{(any | int), {any}}"); }
		@Test public void test_20562() { testInvalid("((int | int) | !any)","{!int, {int}}"); }
		@Test public void test_20563() { testInvalid("((int | int) | !any)","{{any, any}, {int}}"); }
		@Test public void test_20564() { testInvalid("((int | int) | !any)","{(any | any), {int}}"); }
		@Test public void test_20565() { testInvalid("((int | int) | !any)","{(any & any), {int}}"); }
		@Test public void test_20566() { testInvalid("((int | int) | !any)","{(any & int), {int}}"); }
		@Test public void test_20567() { testInvalid("((int | int) | !any)","{{any, any}, !int}"); }
		@Test public void test_20568() { testInvalid("((int | int) | !any)","{{any, int}, !int}"); }
		@Test public void test_20569() { testInvalid("((int | int) | !any)","{(any | any), !int}"); }
		@Test public void test_20570() { testInvalid("((int | int) | !any)","{(int | any), !int}"); }
		@Test public void test_20571() { testInvalid("((int | int) | !any)","{(any & any), !int}"); }
		@Test public void test_20572() { testInvalid("((int | int) | !any)","{(int & any), !int}"); }
		@Test public void test_20573() { testInvalid("((int | int) | !any)","{(int & int), !int}"); }
		@Test public void test_20574() { testInvalid("((int | int) | !any)","{{any}, {any, any}}"); }
		@Test public void test_20575() { testInvalid("((int | int) | !any)","{{int}, {any, any}}"); }
		@Test public void test_20576() { testInvalid("((int | int) | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_20577() { testInvalid("((int | int) | !any)","{(any | any), {any, any}}"); }
		@Test public void test_20578() { testInvalid("((int | int) | !any)","{(any | int), {any, any}}"); }
		@Test public void test_20579() { testInvalid("((int | int) | !any)","{!int, {int, any}}"); }
		@Test public void test_20580() { testInvalid("((int | int) | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_20581() { testInvalid("((int | int) | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_20582() { testInvalid("((int | int) | !any)","{(any & int), {int, any}}"); }
		@Test public void test_20583() { testInvalid("((int | int) | !any)","{{any}, {any, int}}"); }
		@Test public void test_20584() { testInvalid("((int | int) | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_20585() { testInvalid("((int | int) | !any)","{(int | int), {any, int}}"); }
		@Test public void test_20586() { testInvalid("((int | int) | !any)","{(any & int), {any, int}}"); }
		@Test public void test_20587() { testInvalid("((int | int) | !any)","{!int, {int, int}}"); }
		@Test public void test_20588() { testInvalid("((int | int) | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_20589() { testInvalid("((int | int) | !any)","{(any | any), {int, int}}"); }
		@Test public void test_20590() { testInvalid("((int | int) | !any)","{(int | any), {int, int}}"); }
		@Test public void test_20591() { testInvalid("((int | int) | !any)","{(int & any), {int, int}}"); }
		@Test public void test_20592() { testInvalid("((int | int) | !any)","{{int}, (any | any)}"); }
		@Test public void test_20593() { testInvalid("((int | int) | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_20594() { testInvalid("((int | int) | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_20595() { testInvalid("((int | int) | !any)","{(any | any), (any | any)}"); }
		@Test public void test_20596() { testInvalid("((int | int) | !any)","{(int | any), (any | any)}"); }
		@Test public void test_20597() { testInvalid("((int | int) | !any)","{(int & int), (any | any)}"); }
		@Test public void test_20598() { testInvalid("((int | int) | !any)","{!int, (int | any)}"); }
		@Test public void test_20599() { testInvalid("((int | int) | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_20600() { testInvalid("((int | int) | !any)","{(any | any), (int | any)}"); }
		@Test public void test_20601() { testInvalid("((int | int) | !any)","{(int | int), (int | any)}"); }
		@Test public void test_20602() { testInvalid("((int | int) | !any)","{{any}, (any | int)}"); }
		@Test public void test_20603() { testInvalid("((int | int) | !any)","{!int, (any | int)}"); }
		@Test public void test_20604() { testInvalid("((int | int) | !any)","{(any | any), (any | int)}"); }
		@Test public void test_20605() { testInvalid("((int | int) | !any)","{(any | int), (any | int)}"); }
		@Test public void test_20606() { testInvalid("((int | int) | !any)","{(any & int), (any | int)}"); }
		@Test public void test_20607() { testInvalid("((int | int) | !any)","{{int}, (int | int)}"); }
		@Test public void test_20608() { testInvalid("((int | int) | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_20609() { testInvalid("((int | int) | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_20610() { testInvalid("((int | int) | !any)","{{int}, (any & any)}"); }
		@Test public void test_20611() { testInvalid("((int | int) | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_20612() { testInvalid("((int | int) | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_20613() { testInvalid("((int | int) | !any)","{(int | any), (any & any)}"); }
		@Test public void test_20614() { testInvalid("((int | int) | !any)","{(any & any), (any & any)}"); }
		@Test public void test_20615() { testInvalid("((int | int) | !any)","{(int & any), (any & any)}"); }
		@Test public void test_20616() { testInvalid("((int | int) | !any)","{{any}, (int & any)}"); }
		@Test public void test_20617() { testInvalid("((int | int) | !any)","{{int}, (int & any)}"); }
		@Test public void test_20618() { testInvalid("((int | int) | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_20619() { testInvalid("((int | int) | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_20620() { testInvalid("((int | int) | !any)","{(any | int), (int & any)}"); }
		@Test public void test_20621() { testInvalid("((int | int) | !any)","{(any & any), (int & any)}"); }
		@Test public void test_20622() { testInvalid("((int | int) | !any)","{(int & any), (int & any)}"); }
		@Test public void test_20623() { testInvalid("((int | int) | !any)","{(int & int), (int & any)}"); }
		@Test public void test_20624() { testInvalid("((int | int) | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_20625() { testInvalid("((int | int) | !any)","{(any & any), (any & int)}"); }
		@Test public void test_20626() { testInvalid("((int | int) | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_20627() { testInvalid("((int | int) | !any)","{(int | int), (int & int)}"); }
		@Test public void test_20628() { testInvalid("((int | int) | !any)","{(any & any), (int & int)}"); }
		@Test public void test_20629() { testInvalid("((int | int) | !any)","{(any & int), (int & int)}"); }
		@Test public void test_20630() { testInvalid("((int | int) | !any)","{(int & int), (int & int)}"); }
		@Test public void test_20631() { testInvalid("((int | int) | !any)","(!int | {any})"); }
		@Test public void test_20632() { testInvalid("((int | int) | !any)","({any, any} | {any})"); }
		@Test public void test_20633() { testInvalid("((int | int) | !any)","((any | any) | {any})"); }
		@Test public void test_20634() { testInvalid("((int | int) | !any)","((int | any) | {any})"); }
		@Test public void test_20635() { testInvalid("((int | int) | !any)","((any & any) | {any})"); }
		@Test public void test_20636() { testInvalid("((int | int) | !any)","((int & any) | {any})"); }
		@Test public void test_20637() { testInvalid("((int | int) | !any)","((any & int) | {any})"); }
		@Test public void test_20638() { testInvalid("((int | int) | !any)","({int} | {int})"); }
		@Test public void test_20639() { testInvalid("((int | int) | !any)","(!any | {int})"); }
		@Test public void test_20640() { testInvalid("((int | int) | !any)","(!int | {int})"); }
		@Test public void test_20641() { testInvalid("((int | int) | !any)","({any, int} | {int})"); }
		@Test public void test_20642() { testInvalid("((int | int) | !any)","((int & any) | {int})"); }
		@Test public void test_20643() { testInvalid("((int | int) | !any)","((any & int) | {int})"); }
		@Test public void test_20644() { testInvalid("((int | int) | !any)","((int & int) | {int})"); }
		@Test public void test_20645() { testInvalid("((int | int) | !any)","({any} | !any)"); }
		@Test public void test_20646() { testInvalid("((int | int) | !any)","({int} | !any)"); }
		@Test public void test_20647() { testInvalid("((int | int) | !any)","({any, any} | !any)"); }
		@Test public void test_20648() { testInvalid("((int | int) | !any)","({int, int} | !any)"); }
		@Test public void test_20649() { testInvalid("((int | int) | !any)","((any | any) | !any)"); }
		@Test public void test_20650() { testInvalid("((int | int) | !any)","((int | any) | !any)"); }
		@Test public void test_20651() { testValid("((int | int) | !any)","((int | int) | !any)"); }
		@Test public void test_20652() { testValid("((int | int) | !any)","((int & int) | !any)"); }
		@Test public void test_20653() { testInvalid("((int | int) | !any)","(!int | !int)"); }
		@Test public void test_20654() { testInvalid("((int | int) | !any)","({any, any} | !int)"); }
		@Test public void test_20655() { testInvalid("((int | int) | !any)","({int, int} | !int)"); }
		@Test public void test_20656() { testInvalid("((int | int) | !any)","((int | any) | !int)"); }
		@Test public void test_20657() { testInvalid("((int | int) | !any)","((any | int) | !int)"); }
		@Test public void test_20658() { testInvalid("((int | int) | !any)","((any & int) | !int)"); }
		@Test public void test_20659() { testInvalid("((int | int) | !any)","((int & int) | !int)"); }
		@Test public void test_20660() { testInvalid("((int | int) | !any)","({int} | {any, any})"); }
		@Test public void test_20661() { testInvalid("((int | int) | !any)","(!any | {any, any})"); }
		@Test public void test_20662() { testInvalid("((int | int) | !any)","(!int | {any, any})"); }
		@Test public void test_20663() { testInvalid("((int | int) | !any)","({any, int} | {any, any})"); }
		@Test public void test_20664() { testInvalid("((int | int) | !any)","((int | any) | {any, any})"); }
		@Test public void test_20665() { testInvalid("((int | int) | !any)","((any & any) | {any, any})"); }
		@Test public void test_20666() { testInvalid("((int | int) | !any)","((any & int) | {any, any})"); }
		@Test public void test_20667() { testInvalid("((int | int) | !any)","(!int | {int, any})"); }
		@Test public void test_20668() { testInvalid("((int | int) | !any)","({any, int} | {int, any})"); }
		@Test public void test_20669() { testInvalid("((int | int) | !any)","((any | any) | {int, any})"); }
		@Test public void test_20670() { testInvalid("((int | int) | !any)","((int | any) | {int, any})"); }
		@Test public void test_20671() { testInvalid("((int | int) | !any)","((any | int) | {int, any})"); }
		@Test public void test_20672() { testInvalid("((int | int) | !any)","((int & any) | {int, any})"); }
		@Test public void test_20673() { testInvalid("((int | int) | !any)","({any} | {any, int})"); }
		@Test public void test_20674() { testInvalid("((int | int) | !any)","(!int | {any, int})"); }
		@Test public void test_20675() { testInvalid("((int | int) | !any)","({any, int} | {any, int})"); }
		@Test public void test_20676() { testInvalid("((int | int) | !any)","((any | any) | {any, int})"); }
		@Test public void test_20677() { testInvalid("((int | int) | !any)","((any | int) | {any, int})"); }
		@Test public void test_20678() { testInvalid("((int | int) | !any)","((int | int) | {any, int})"); }
		@Test public void test_20679() { testInvalid("((int | int) | !any)","((int & any) | {any, int})"); }
		@Test public void test_20680() { testInvalid("((int | int) | !any)","(!any | {int, int})"); }
		@Test public void test_20681() { testInvalid("((int | int) | !any)","(!int | {int, int})"); }
		@Test public void test_20682() { testInvalid("((int | int) | !any)","({any, any} | {int, int})"); }
		@Test public void test_20683() { testInvalid("((int | int) | !any)","({any, int} | {int, int})"); }
		@Test public void test_20684() { testInvalid("((int | int) | !any)","((any | any) | {int, int})"); }
		@Test public void test_20685() { testInvalid("((int | int) | !any)","((int | int) | {int, int})"); }
		@Test public void test_20686() { testInvalid("((int | int) | !any)","((int & any) | {int, int})"); }
		@Test public void test_20687() { testInvalid("((int | int) | !any)","((any & int) | {int, int})"); }
		@Test public void test_20688() { testInvalid("((int | int) | !any)","((int & int) | {int, int})"); }
		@Test public void test_20689() { testInvalid("((int | int) | !any)","({any} | (any | any))"); }
		@Test public void test_20690() { testInvalid("((int | int) | !any)","(!any | (any | any))"); }
		@Test public void test_20691() { testInvalid("((int | int) | !any)","({any, any} | (any | any))"); }
		@Test public void test_20692() { testInvalid("((int | int) | !any)","({any, int} | (any | any))"); }
		@Test public void test_20693() { testInvalid("((int | int) | !any)","({int, int} | (any | any))"); }
		@Test public void test_20694() { testInvalid("((int | int) | !any)","((int | any) | (any | any))"); }
		@Test public void test_20695() { testInvalid("((int | int) | !any)","((any | int) | (any | any))"); }
		@Test public void test_20696() { testInvalid("((int | int) | !any)","((any & int) | (any | any))"); }
		@Test public void test_20697() { testInvalid("((int | int) | !any)","((int & int) | (any | any))"); }
		@Test public void test_20698() { testInvalid("((int | int) | !any)","({any} | (int | any))"); }
		@Test public void test_20699() { testInvalid("((int | int) | !any)","(!int | (int | any))"); }
		@Test public void test_20700() { testInvalid("((int | int) | !any)","({int, any} | (int | any))"); }
		@Test public void test_20701() { testInvalid("((int | int) | !any)","({any, int} | (int | any))"); }
		@Test public void test_20702() { testInvalid("((int | int) | !any)","((int & any) | (int | any))"); }
		@Test public void test_20703() { testInvalid("((int | int) | !any)","((any & int) | (int | any))"); }
		@Test public void test_20704() { testInvalid("((int | int) | !any)","({any} | (any | int))"); }
		@Test public void test_20705() { testInvalid("((int | int) | !any)","({int} | (any | int))"); }
		@Test public void test_20706() { testInvalid("((int | int) | !any)","(!any | (any | int))"); }
		@Test public void test_20707() { testInvalid("((int | int) | !any)","(!int | (any | int))"); }
		@Test public void test_20708() { testInvalid("((int | int) | !any)","({any, int} | (any | int))"); }
		@Test public void test_20709() { testInvalid("((int | int) | !any)","({int, int} | (any | int))"); }
		@Test public void test_20710() { testInvalid("((int | int) | !any)","((int | any) | (any | int))"); }
		@Test public void test_20711() { testInvalid("((int | int) | !any)","((any | int) | (any | int))"); }
		@Test public void test_20712() { testInvalid("((int | int) | !any)","((int | int) | (any | int))"); }
		@Test public void test_20713() { testInvalid("((int | int) | !any)","((any & any) | (any | int))"); }
		@Test public void test_20714() { testInvalid("((int | int) | !any)","({int} | (int | int))"); }
		@Test public void test_20715() { testValid("((int | int) | !any)","(!any | (int | int))"); }
		@Test public void test_20716() { testInvalid("((int | int) | !any)","(!int | (int | int))"); }
		@Test public void test_20717() { testInvalid("((int | int) | !any)","({int, any} | (int | int))"); }
		@Test public void test_20718() { testInvalid("((int | int) | !any)","({any, int} | (int | int))"); }
		@Test public void test_20719() { testInvalid("((int | int) | !any)","((any | int) | (int | int))"); }
		@Test public void test_20720() { testValid("((int | int) | !any)","((int | int) | (int | int))"); }
		@Test public void test_20721() { testInvalid("((int | int) | !any)","((any & any) | (int | int))"); }
		@Test public void test_20722() { testValid("((int | int) | !any)","((int & any) | (int | int))"); }
		@Test public void test_20723() { testValid("((int | int) | !any)","((int & int) | (int | int))"); }
		@Test public void test_20724() { testInvalid("((int | int) | !any)","(!any | (any & any))"); }
		@Test public void test_20725() { testInvalid("((int | int) | !any)","(!int | (any & any))"); }
		@Test public void test_20726() { testInvalid("((int | int) | !any)","({any, any} | (any & any))"); }
		@Test public void test_20727() { testInvalid("((int | int) | !any)","({int, any} | (any & any))"); }
		@Test public void test_20728() { testInvalid("((int | int) | !any)","({any, int} | (any & any))"); }
		@Test public void test_20729() { testInvalid("((int | int) | !any)","({int, int} | (any & any))"); }
		@Test public void test_20730() { testInvalid("((int | int) | !any)","((int | any) | (any & any))"); }
		@Test public void test_20731() { testInvalid("((int | int) | !any)","((int | int) | (any & any))"); }
		@Test public void test_20732() { testInvalid("((int | int) | !any)","((int & any) | (any & any))"); }
		@Test public void test_20733() { testInvalid("((int | int) | !any)","((any & int) | (any & any))"); }
		@Test public void test_20734() { testInvalid("((int | int) | !any)","((int & int) | (any & any))"); }
		@Test public void test_20735() { testInvalid("((int | int) | !any)","({any} | (int & any))"); }
		@Test public void test_20736() { testInvalid("((int & int) | !any)","{int}"); }
		@Test public void test_20737() { testInvalid("((int & int) | !any)","{any, any}"); }
		@Test public void test_20738() { testInvalid("((int & int) | !any)","{int, int}"); }
		@Test public void test_20739() { testInvalid("((int & int) | !any)","(any | int)"); }
		@Test public void test_20740() { testValid("((int & int) | !any)","(int & any)"); }
		@Test public void test_20741() { testInvalid("((int & int) | !any)","{{any}}"); }
		@Test public void test_20742() { testInvalid("((int & int) | !any)","{{int, any}}"); }
		@Test public void test_20743() { testInvalid("((int & int) | !any)","{{int, int}}"); }
		@Test public void test_20744() { testInvalid("((int & int) | !any)","{(any | int)}"); }
		@Test public void test_20745() { testInvalid("((int & int) | !any)","!{int, any}"); }
		@Test public void test_20746() { testInvalid("((int & int) | !any)","!{int, int}"); }
		@Test public void test_20747() { testValid("((int & int) | !any)","!(any | any)"); }
		@Test public void test_20748() { testValid("((int & int) | !any)","!(any & any)"); }
		@Test public void test_20749() { testInvalid("((int & int) | !any)","!(int & int)"); }
		@Test public void test_20750() { testInvalid("((int & int) | !any)","{{int}, {any}}"); }
		@Test public void test_20751() { testInvalid("((int & int) | !any)","{!int, {any}}"); }
		@Test public void test_20752() { testInvalid("((int & int) | !any)","{{int, int}, {any}}"); }
		@Test public void test_20753() { testInvalid("((int & int) | !any)","{(any | int), {any}}"); }
		@Test public void test_20754() { testInvalid("((int & int) | !any)","{!int, {int}}"); }
		@Test public void test_20755() { testInvalid("((int & int) | !any)","{{any, any}, {int}}"); }
		@Test public void test_20756() { testInvalid("((int & int) | !any)","{(any | any), {int}}"); }
		@Test public void test_20757() { testInvalid("((int & int) | !any)","{(any & any), {int}}"); }
		@Test public void test_20758() { testInvalid("((int & int) | !any)","{(any & int), {int}}"); }
		@Test public void test_20759() { testInvalid("((int & int) | !any)","{{any, any}, !int}"); }
		@Test public void test_20760() { testInvalid("((int & int) | !any)","{{any, int}, !int}"); }
		@Test public void test_20761() { testInvalid("((int & int) | !any)","{(any | any), !int}"); }
		@Test public void test_20762() { testInvalid("((int & int) | !any)","{(int | any), !int}"); }
		@Test public void test_20763() { testInvalid("((int & int) | !any)","{(any & any), !int}"); }
		@Test public void test_20764() { testInvalid("((int & int) | !any)","{(int & any), !int}"); }
		@Test public void test_20765() { testInvalid("((int & int) | !any)","{(int & int), !int}"); }
		@Test public void test_20766() { testInvalid("((int & int) | !any)","{{any}, {any, any}}"); }
		@Test public void test_20767() { testInvalid("((int & int) | !any)","{{int}, {any, any}}"); }
		@Test public void test_20768() { testInvalid("((int & int) | !any)","{{int, int}, {any, any}}"); }
		@Test public void test_20769() { testInvalid("((int & int) | !any)","{(any | any), {any, any}}"); }
		@Test public void test_20770() { testInvalid("((int & int) | !any)","{(any | int), {any, any}}"); }
		@Test public void test_20771() { testInvalid("((int & int) | !any)","{!int, {int, any}}"); }
		@Test public void test_20772() { testInvalid("((int & int) | !any)","{{int, any}, {int, any}}"); }
		@Test public void test_20773() { testInvalid("((int & int) | !any)","{{any, int}, {int, any}}"); }
		@Test public void test_20774() { testInvalid("((int & int) | !any)","{(any & int), {int, any}}"); }
		@Test public void test_20775() { testInvalid("((int & int) | !any)","{{any}, {any, int}}"); }
		@Test public void test_20776() { testInvalid("((int & int) | !any)","{{int, int}, {any, int}}"); }
		@Test public void test_20777() { testInvalid("((int & int) | !any)","{(int | int), {any, int}}"); }
		@Test public void test_20778() { testInvalid("((int & int) | !any)","{(any & int), {any, int}}"); }
		@Test public void test_20779() { testInvalid("((int & int) | !any)","{!int, {int, int}}"); }
		@Test public void test_20780() { testInvalid("((int & int) | !any)","{{int, int}, {int, int}}"); }
		@Test public void test_20781() { testInvalid("((int & int) | !any)","{(any | any), {int, int}}"); }
		@Test public void test_20782() { testInvalid("((int & int) | !any)","{(int | any), {int, int}}"); }
		@Test public void test_20783() { testInvalid("((int & int) | !any)","{(int & any), {int, int}}"); }
		@Test public void test_20784() { testInvalid("((int & int) | !any)","{{int}, (any | any)}"); }
		@Test public void test_20785() { testInvalid("((int & int) | !any)","{{int, any}, (any | any)}"); }
		@Test public void test_20786() { testInvalid("((int & int) | !any)","{{any, int}, (any | any)}"); }
		@Test public void test_20787() { testInvalid("((int & int) | !any)","{(any | any), (any | any)}"); }
		@Test public void test_20788() { testInvalid("((int & int) | !any)","{(int | any), (any | any)}"); }
		@Test public void test_20789() { testInvalid("((int & int) | !any)","{(int & int), (any | any)}"); }
		@Test public void test_20790() { testInvalid("((int & int) | !any)","{!int, (int | any)}"); }
		@Test public void test_20791() { testInvalid("((int & int) | !any)","{{int, int}, (int | any)}"); }
		@Test public void test_20792() { testInvalid("((int & int) | !any)","{(any | any), (int | any)}"); }
		@Test public void test_20793() { testInvalid("((int & int) | !any)","{(int | int), (int | any)}"); }
		@Test public void test_20794() { testInvalid("((int & int) | !any)","{{any}, (any | int)}"); }
		@Test public void test_20795() { testInvalid("((int & int) | !any)","{!int, (any | int)}"); }
		@Test public void test_20796() { testInvalid("((int & int) | !any)","{(any | any), (any | int)}"); }
		@Test public void test_20797() { testInvalid("((int & int) | !any)","{(any | int), (any | int)}"); }
		@Test public void test_20798() { testInvalid("((int & int) | !any)","{(any & int), (any | int)}"); }
		@Test public void test_20799() { testInvalid("((int & int) | !any)","{{int}, (int | int)}"); }
		@Test public void test_20800() { testInvalid("((int & int) | !any)","{{any, any}, (int | int)}"); }
		@Test public void test_20801() { testInvalid("((int & int) | !any)","{{int, int}, (int | int)}"); }
		@Test public void test_20802() { testInvalid("((int & int) | !any)","{{int}, (any & any)}"); }
		@Test public void test_20803() { testInvalid("((int & int) | !any)","{{int, any}, (any & any)}"); }
		@Test public void test_20804() { testInvalid("((int & int) | !any)","{{any, int}, (any & any)}"); }
		@Test public void test_20805() { testInvalid("((int & int) | !any)","{(int | any), (any & any)}"); }
		@Test public void test_20806() { testInvalid("((int & int) | !any)","{(any & any), (any & any)}"); }
		@Test public void test_20807() { testInvalid("((int & int) | !any)","{(int & any), (any & any)}"); }
		@Test public void test_20808() { testInvalid("((int & int) | !any)","{{any}, (int & any)}"); }
		@Test public void test_20809() { testInvalid("((int & int) | !any)","{{int}, (int & any)}"); }
		@Test public void test_20810() { testInvalid("((int & int) | !any)","{{any, any}, (int & any)}"); }
		@Test public void test_20811() { testInvalid("((int & int) | !any)","{{int, any}, (int & any)}"); }
		@Test public void test_20812() { testInvalid("((int & int) | !any)","{(any | int), (int & any)}"); }
		@Test public void test_20813() { testInvalid("((int & int) | !any)","{(any & any), (int & any)}"); }
		@Test public void test_20814() { testInvalid("((int & int) | !any)","{(int & any), (int & any)}"); }
		@Test public void test_20815() { testInvalid("((int & int) | !any)","{(int & int), (int & any)}"); }
		@Test public void test_20816() { testInvalid("((int & int) | !any)","{{int, any}, (any & int)}"); }
		@Test public void test_20817() { testInvalid("((int & int) | !any)","{(any & any), (any & int)}"); }
		@Test public void test_20818() { testInvalid("((int & int) | !any)","{{any, int}, (int & int)}"); }
		@Test public void test_20819() { testInvalid("((int & int) | !any)","{(int | int), (int & int)}"); }
		@Test public void test_20820() { testInvalid("((int & int) | !any)","{(any & any), (int & int)}"); }
		@Test public void test_20821() { testInvalid("((int & int) | !any)","{(any & int), (int & int)}"); }
		@Test public void test_20822() { testInvalid("((int & int) | !any)","{(int & int), (int & int)}"); }
		@Test public void test_20823() { testInvalid("((int & int) | !any)","(!int | {any})"); }
		@Test public void test_20824() { testInvalid("((int & int) | !any)","({any, any} | {any})"); }
		@Test public void test_20825() { testInvalid("((int & int) | !any)","((any | any) | {any})"); }
		@Test public void test_20826() { testInvalid("((int & int) | !any)","((int | any) | {any})"); }
		@Test public void test_20827() { testInvalid("((int & int) | !any)","((any & any) | {any})"); }
		@Test public void test_20828() { testInvalid("((int & int) | !any)","((int & any) | {any})"); }
		@Test public void test_20829() { testInvalid("((int & int) | !any)","((any & int) | {any})"); }
		@Test public void test_20830() { testInvalid("((int & int) | !any)","({int} | {int})"); }
		@Test public void test_20831() { testInvalid("((int & int) | !any)","(!any | {int})"); }
		@Test public void test_20832() { testInvalid("((int & int) | !any)","(!int | {int})"); }
		@Test public void test_20833() { testInvalid("((int & int) | !any)","({any, int} | {int})"); }
		@Test public void test_20834() { testInvalid("((int & int) | !any)","((int & any) | {int})"); }
		@Test public void test_20835() { testInvalid("((int & int) | !any)","((any & int) | {int})"); }
		@Test public void test_20836() { testInvalid("((int & int) | !any)","((int & int) | {int})"); }
		@Test public void test_20837() { testInvalid("((int & int) | !any)","({any} | !any)"); }
		@Test public void test_20838() { testInvalid("((int & int) | !any)","({int} | !any)"); }
		@Test public void test_20839() { testInvalid("((int & int) | !any)","({any, any} | !any)"); }
		@Test public void test_20840() { testInvalid("((int & int) | !any)","({int, int} | !any)"); }
		@Test public void test_20841() { testInvalid("((int & int) | !any)","((any | any) | !any)"); }
		@Test public void test_20842() { testInvalid("((int & int) | !any)","((int | any) | !any)"); }
		@Test public void test_20843() { testValid("((int & int) | !any)","((int | int) | !any)"); }
		@Test public void test_20844() { testValid("((int & int) | !any)","((int & int) | !any)"); }
		@Test public void test_20845() { testInvalid("((int & int) | !any)","(!int | !int)"); }
		@Test public void test_20846() { testInvalid("((int & int) | !any)","({any, any} | !int)"); }
		@Test public void test_20847() { testInvalid("((int & int) | !any)","({int, int} | !int)"); }
		@Test public void test_20848() { testInvalid("((int & int) | !any)","((int | any) | !int)"); }
		@Test public void test_20849() { testInvalid("((int & int) | !any)","((any | int) | !int)"); }
		@Test public void test_20850() { testInvalid("((int & int) | !any)","((any & int) | !int)"); }
		@Test public void test_20851() { testInvalid("((int & int) | !any)","((int & int) | !int)"); }
		@Test public void test_20852() { testInvalid("((int & int) | !any)","({int} | {any, any})"); }
		@Test public void test_20853() { testInvalid("((int & int) | !any)","(!any | {any, any})"); }
		@Test public void test_20854() { testInvalid("((int & int) | !any)","(!int | {any, any})"); }
		@Test public void test_20855() { testInvalid("((int & int) | !any)","({any, int} | {any, any})"); }
		@Test public void test_20856() { testInvalid("((int & int) | !any)","((int | any) | {any, any})"); }
		@Test public void test_20857() { testInvalid("((int & int) | !any)","((any & any) | {any, any})"); }
		@Test public void test_20858() { testInvalid("((int & int) | !any)","((any & int) | {any, any})"); }
		@Test public void test_20859() { testInvalid("((int & int) | !any)","(!int | {int, any})"); }
		@Test public void test_20860() { testInvalid("((int & int) | !any)","({any, int} | {int, any})"); }
		@Test public void test_20861() { testInvalid("((int & int) | !any)","((any | any) | {int, any})"); }
		@Test public void test_20862() { testInvalid("((int & int) | !any)","((int | any) | {int, any})"); }
		@Test public void test_20863() { testInvalid("((int & int) | !any)","((any | int) | {int, any})"); }
		@Test public void test_20864() { testInvalid("((int & int) | !any)","((int & any) | {int, any})"); }
		@Test public void test_20865() { testInvalid("((int & int) | !any)","({any} | {any, int})"); }
		@Test public void test_20866() { testInvalid("((int & int) | !any)","(!int | {any, int})"); }
		@Test public void test_20867() { testInvalid("((int & int) | !any)","({any, int} | {any, int})"); }
		@Test public void test_20868() { testInvalid("((int & int) | !any)","((any | any) | {any, int})"); }
		@Test public void test_20869() { testInvalid("((int & int) | !any)","((any | int) | {any, int})"); }
		@Test public void test_20870() { testInvalid("((int & int) | !any)","((int | int) | {any, int})"); }
		@Test public void test_20871() { testInvalid("((int & int) | !any)","((int & any) | {any, int})"); }
		@Test public void test_20872() { testInvalid("((int & int) | !any)","(!any | {int, int})"); }
		@Test public void test_20873() { testInvalid("((int & int) | !any)","(!int | {int, int})"); }
		@Test public void test_20874() { testInvalid("((int & int) | !any)","({any, any} | {int, int})"); }
		@Test public void test_20875() { testInvalid("((int & int) | !any)","({any, int} | {int, int})"); }
		@Test public void test_20876() { testInvalid("((int & int) | !any)","((any | any) | {int, int})"); }
		@Test public void test_20877() { testInvalid("((int & int) | !any)","((int | int) | {int, int})"); }
		@Test public void test_20878() { testInvalid("((int & int) | !any)","((int & any) | {int, int})"); }
		@Test public void test_20879() { testInvalid("((int & int) | !any)","((any & int) | {int, int})"); }
		@Test public void test_20880() { testInvalid("((int & int) | !any)","((int & int) | {int, int})"); }
		@Test public void test_20881() { testInvalid("((int & int) | !any)","({any} | (any | any))"); }
		@Test public void test_20882() { testInvalid("((int & int) | !any)","(!any | (any | any))"); }
		@Test public void test_20883() { testInvalid("((int & int) | !any)","({any, any} | (any | any))"); }
		@Test public void test_20884() { testInvalid("((int & int) | !any)","({any, int} | (any | any))"); }
		@Test public void test_20885() { testInvalid("((int & int) | !any)","({int, int} | (any | any))"); }
		@Test public void test_20886() { testInvalid("((int & int) | !any)","((int | any) | (any | any))"); }
		@Test public void test_20887() { testInvalid("((int & int) | !any)","((any | int) | (any | any))"); }
		@Test public void test_20888() { testInvalid("((int & int) | !any)","((any & int) | (any | any))"); }
		@Test public void test_20889() { testInvalid("((int & int) | !any)","((int & int) | (any | any))"); }
		@Test public void test_20890() { testInvalid("((int & int) | !any)","({any} | (int | any))"); }
		@Test public void test_20891() { testInvalid("((int & int) | !any)","(!int | (int | any))"); }
		@Test public void test_20892() { testInvalid("((int & int) | !any)","({int, any} | (int | any))"); }
		@Test public void test_20893() { testInvalid("((int & int) | !any)","({any, int} | (int | any))"); }
		@Test public void test_20894() { testInvalid("((int & int) | !any)","((int & any) | (int | any))"); }
		@Test public void test_20895() { testInvalid("((int & int) | !any)","((any & int) | (int | any))"); }
		@Test public void test_20896() { testInvalid("((int & int) | !any)","({any} | (any | int))"); }
		@Test public void test_20897() { testInvalid("((int & int) | !any)","({int} | (any | int))"); }
		@Test public void test_20898() { testInvalid("((int & int) | !any)","(!any | (any | int))"); }
		@Test public void test_20899() { testInvalid("((int & int) | !any)","(!int | (any | int))"); }
		@Test public void test_20900() { testInvalid("((int & int) | !any)","({any, int} | (any | int))"); }
		@Test public void test_20901() { testInvalid("((int & int) | !any)","({int, int} | (any | int))"); }
		@Test public void test_20902() { testInvalid("((int & int) | !any)","((int | any) | (any | int))"); }
		@Test public void test_20903() { testInvalid("((int & int) | !any)","((any | int) | (any | int))"); }
		@Test public void test_20904() { testInvalid("((int & int) | !any)","((int | int) | (any | int))"); }
		@Test public void test_20905() { testInvalid("((int & int) | !any)","((any & any) | (any | int))"); }
		@Test public void test_20906() { testInvalid("((int & int) | !any)","({int} | (int | int))"); }
		@Test public void test_20907() { testValid("((int & int) | !any)","(!any | (int | int))"); }
		@Test public void test_20908() { testInvalid("((int & int) | !any)","(!int | (int | int))"); }
		@Test public void test_20909() { testInvalid("((int & int) | !any)","({int, any} | (int | int))"); }
		@Test public void test_20910() { testInvalid("((int & int) | !any)","({any, int} | (int | int))"); }
		@Test public void test_20911() { testInvalid("((int & int) | !any)","((any | int) | (int | int))"); }
		@Test public void test_20912() { testValid("((int & int) | !any)","((int | int) | (int | int))"); }
		@Test public void test_20913() { testInvalid("((int & int) | !any)","((any & any) | (int | int))"); }
		@Test public void test_20914() { testValid("((int & int) | !any)","((int & any) | (int | int))"); }
		@Test public void test_20915() { testValid("((int & int) | !any)","((int & int) | (int | int))"); }
		@Test public void test_20916() { testInvalid("((int & int) | !any)","(!any | (any & any))"); }
		@Test public void test_20917() { testInvalid("((int & int) | !any)","(!int | (any & any))"); }
		@Test public void test_20918() { testInvalid("((int & int) | !any)","({any, any} | (any & any))"); }
		@Test public void test_20919() { testInvalid("((int & int) | !any)","({int, any} | (any & any))"); }
		@Test public void test_20920() { testInvalid("((int & int) | !any)","({any, int} | (any & any))"); }
		@Test public void test_20921() { testInvalid("((int & int) | !any)","({int, int} | (any & any))"); }
		@Test public void test_20922() { testInvalid("((int & int) | !any)","((int | any) | (any & any))"); }
		@Test public void test_20923() { testInvalid("((int & int) | !any)","((int | int) | (any & any))"); }
		@Test public void test_20924() { testInvalid("((int & int) | !any)","((int & any) | (any & any))"); }
		@Test public void test_20925() { testInvalid("((int & int) | !any)","((any & int) | (any & any))"); }
		@Test public void test_20926() { testInvalid("((int & int) | !any)","((int & int) | (any & any))"); }
		@Test public void test_20927() { testInvalid("((int & int) | !any)","({any} | (int & any))"); }
		@Test public void test_20928() { testValid("(!int | !int)","{int}"); }
		@Test public void test_20929() { testValid("(!int | !int)","{any, any}"); }
		@Test public void test_20930() { testValid("(!int | !int)","{int, int}"); }
		@Test public void test_20931() { testInvalid("(!int | !int)","(any | int)"); }
		@Test public void test_20932() { testInvalid("(!int | !int)","(int & any)"); }
		@Test public void test_20933() { testValid("(!int | !int)","{{any}}"); }
		@Test public void test_20934() { testValid("(!int | !int)","{{int, any}}"); }
		@Test public void test_20935() { testValid("(!int | !int)","{{int, int}}"); }
		@Test public void test_20936() { testValid("(!int | !int)","{(any | int)}"); }
		@Test public void test_20937() { testInvalid("(!int | !int)","!{int, any}"); }
		@Test public void test_20938() { testInvalid("(!int | !int)","!{int, int}"); }
		@Test public void test_20939() { testValid("(!int | !int)","!(any | any)"); }
		@Test public void test_20940() { testValid("(!int | !int)","!(any & any)"); }
		@Test public void test_20941() { testValid("(!int | !int)","!(int & int)"); }
		@Test public void test_20942() { testValid("(!int | !int)","{{int}, {any}}"); }
		@Test public void test_20943() { testValid("(!int | !int)","{!int, {any}}"); }
		@Test public void test_20944() { testValid("(!int | !int)","{{int, int}, {any}}"); }
		@Test public void test_20945() { testValid("(!int | !int)","{(any | int), {any}}"); }
		@Test public void test_20946() { testValid("(!int | !int)","{!int, {int}}"); }
		@Test public void test_20947() { testValid("(!int | !int)","{{any, any}, {int}}"); }
		@Test public void test_20948() { testValid("(!int | !int)","{(any | any), {int}}"); }
		@Test public void test_20949() { testValid("(!int | !int)","{(any & any), {int}}"); }
		@Test public void test_20950() { testValid("(!int | !int)","{(any & int), {int}}"); }
		@Test public void test_20951() { testValid("(!int | !int)","{{any, any}, !int}"); }
		@Test public void test_20952() { testValid("(!int | !int)","{{any, int}, !int}"); }
		@Test public void test_20953() { testValid("(!int | !int)","{(any | any), !int}"); }
		@Test public void test_20954() { testValid("(!int | !int)","{(int | any), !int}"); }
		@Test public void test_20955() { testValid("(!int | !int)","{(any & any), !int}"); }
		@Test public void test_20956() { testValid("(!int | !int)","{(int & any), !int}"); }
		@Test public void test_20957() { testValid("(!int | !int)","{(int & int), !int}"); }
		@Test public void test_20958() { testValid("(!int | !int)","{{any}, {any, any}}"); }
		@Test public void test_20959() { testValid("(!int | !int)","{{int}, {any, any}}"); }
		@Test public void test_20960() { testValid("(!int | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_20961() { testValid("(!int | !int)","{(any | any), {any, any}}"); }
		@Test public void test_20962() { testValid("(!int | !int)","{(any | int), {any, any}}"); }
		@Test public void test_20963() { testValid("(!int | !int)","{!int, {int, any}}"); }
		@Test public void test_20964() { testValid("(!int | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_20965() { testValid("(!int | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_20966() { testValid("(!int | !int)","{(any & int), {int, any}}"); }
		@Test public void test_20967() { testValid("(!int | !int)","{{any}, {any, int}}"); }
		@Test public void test_20968() { testValid("(!int | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_20969() { testValid("(!int | !int)","{(int | int), {any, int}}"); }
		@Test public void test_20970() { testValid("(!int | !int)","{(any & int), {any, int}}"); }
		@Test public void test_20971() { testValid("(!int | !int)","{!int, {int, int}}"); }
		@Test public void test_20972() { testValid("(!int | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_20973() { testValid("(!int | !int)","{(any | any), {int, int}}"); }
		@Test public void test_20974() { testValid("(!int | !int)","{(int | any), {int, int}}"); }
		@Test public void test_20975() { testValid("(!int | !int)","{(int & any), {int, int}}"); }
		@Test public void test_20976() { testValid("(!int | !int)","{{int}, (any | any)}"); }
		@Test public void test_20977() { testValid("(!int | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_20978() { testValid("(!int | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_20979() { testValid("(!int | !int)","{(any | any), (any | any)}"); }
		@Test public void test_20980() { testValid("(!int | !int)","{(int | any), (any | any)}"); }
		@Test public void test_20981() { testValid("(!int | !int)","{(int & int), (any | any)}"); }
		@Test public void test_20982() { testValid("(!int | !int)","{!int, (int | any)}"); }
		@Test public void test_20983() { testValid("(!int | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_20984() { testValid("(!int | !int)","{(any | any), (int | any)}"); }
		@Test public void test_20985() { testValid("(!int | !int)","{(int | int), (int | any)}"); }
		@Test public void test_20986() { testValid("(!int | !int)","{{any}, (any | int)}"); }
		@Test public void test_20987() { testValid("(!int | !int)","{!int, (any | int)}"); }
		@Test public void test_20988() { testValid("(!int | !int)","{(any | any), (any | int)}"); }
		@Test public void test_20989() { testValid("(!int | !int)","{(any | int), (any | int)}"); }
		@Test public void test_20990() { testValid("(!int | !int)","{(any & int), (any | int)}"); }
		@Test public void test_20991() { testValid("(!int | !int)","{{int}, (int | int)}"); }
		@Test public void test_20992() { testValid("(!int | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_20993() { testValid("(!int | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_20994() { testValid("(!int | !int)","{{int}, (any & any)}"); }
		@Test public void test_20995() { testValid("(!int | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_20996() { testValid("(!int | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_20997() { testValid("(!int | !int)","{(int | any), (any & any)}"); }
		@Test public void test_20998() { testValid("(!int | !int)","{(any & any), (any & any)}"); }
		@Test public void test_20999() { testValid("(!int | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21000() { testValid("(!int | !int)","{{any}, (int & any)}"); }
		@Test public void test_21001() { testValid("(!int | !int)","{{int}, (int & any)}"); }
		@Test public void test_21002() { testValid("(!int | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21003() { testValid("(!int | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21004() { testValid("(!int | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21005() { testValid("(!int | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21006() { testValid("(!int | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21007() { testValid("(!int | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21008() { testValid("(!int | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21009() { testValid("(!int | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21010() { testValid("(!int | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21011() { testValid("(!int | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21012() { testValid("(!int | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21013() { testValid("(!int | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21014() { testValid("(!int | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21015() { testValid("(!int | !int)","(!int | {any})"); }
		@Test public void test_21016() { testValid("(!int | !int)","({any, any} | {any})"); }
		@Test public void test_21017() { testInvalid("(!int | !int)","((any | any) | {any})"); }
		@Test public void test_21018() { testInvalid("(!int | !int)","((int | any) | {any})"); }
		@Test public void test_21019() { testInvalid("(!int | !int)","((any & any) | {any})"); }
		@Test public void test_21020() { testInvalid("(!int | !int)","((int & any) | {any})"); }
		@Test public void test_21021() { testInvalid("(!int | !int)","((any & int) | {any})"); }
		@Test public void test_21022() { testValid("(!int | !int)","({int} | {int})"); }
		@Test public void test_21023() { testValid("(!int | !int)","(!any | {int})"); }
		@Test public void test_21024() { testValid("(!int | !int)","(!int | {int})"); }
		@Test public void test_21025() { testValid("(!int | !int)","({any, int} | {int})"); }
		@Test public void test_21026() { testInvalid("(!int | !int)","((int & any) | {int})"); }
		@Test public void test_21027() { testInvalid("(!int | !int)","((any & int) | {int})"); }
		@Test public void test_21028() { testInvalid("(!int | !int)","((int & int) | {int})"); }
		@Test public void test_21029() { testValid("(!int | !int)","({any} | !any)"); }
		@Test public void test_21030() { testValid("(!int | !int)","({int} | !any)"); }
		@Test public void test_21031() { testValid("(!int | !int)","({any, any} | !any)"); }
		@Test public void test_21032() { testValid("(!int | !int)","({int, int} | !any)"); }
		@Test public void test_21033() { testInvalid("(!int | !int)","((any | any) | !any)"); }
		@Test public void test_21034() { testInvalid("(!int | !int)","((int | any) | !any)"); }
		@Test public void test_21035() { testInvalid("(!int | !int)","((int | int) | !any)"); }
		@Test public void test_21036() { testInvalid("(!int | !int)","((int & int) | !any)"); }
		@Test public void test_21037() { testValid("(!int | !int)","(!int | !int)"); }
		@Test public void test_21038() { testValid("(!int | !int)","({any, any} | !int)"); }
		@Test public void test_21039() { testValid("(!int | !int)","({int, int} | !int)"); }
		@Test public void test_21040() { testInvalid("(!int | !int)","((int | any) | !int)"); }
		@Test public void test_21041() { testInvalid("(!int | !int)","((any | int) | !int)"); }
		@Test public void test_21042() { testInvalid("(!int | !int)","((any & int) | !int)"); }
		@Test public void test_21043() { testInvalid("(!int | !int)","((int & int) | !int)"); }
		@Test public void test_21044() { testValid("(!int | !int)","({int} | {any, any})"); }
		@Test public void test_21045() { testValid("(!int | !int)","(!any | {any, any})"); }
		@Test public void test_21046() { testValid("(!int | !int)","(!int | {any, any})"); }
		@Test public void test_21047() { testValid("(!int | !int)","({any, int} | {any, any})"); }
		@Test public void test_21048() { testInvalid("(!int | !int)","((int | any) | {any, any})"); }
		@Test public void test_21049() { testInvalid("(!int | !int)","((any & any) | {any, any})"); }
		@Test public void test_21050() { testInvalid("(!int | !int)","((any & int) | {any, any})"); }
		@Test public void test_21051() { testValid("(!int | !int)","(!int | {int, any})"); }
		@Test public void test_21052() { testValid("(!int | !int)","({any, int} | {int, any})"); }
		@Test public void test_21053() { testInvalid("(!int | !int)","((any | any) | {int, any})"); }
		@Test public void test_21054() { testInvalid("(!int | !int)","((int | any) | {int, any})"); }
		@Test public void test_21055() { testInvalid("(!int | !int)","((any | int) | {int, any})"); }
		@Test public void test_21056() { testInvalid("(!int | !int)","((int & any) | {int, any})"); }
		@Test public void test_21057() { testValid("(!int | !int)","({any} | {any, int})"); }
		@Test public void test_21058() { testValid("(!int | !int)","(!int | {any, int})"); }
		@Test public void test_21059() { testValid("(!int | !int)","({any, int} | {any, int})"); }
		@Test public void test_21060() { testInvalid("(!int | !int)","((any | any) | {any, int})"); }
		@Test public void test_21061() { testInvalid("(!int | !int)","((any | int) | {any, int})"); }
		@Test public void test_21062() { testInvalid("(!int | !int)","((int | int) | {any, int})"); }
		@Test public void test_21063() { testInvalid("(!int | !int)","((int & any) | {any, int})"); }
		@Test public void test_21064() { testValid("(!int | !int)","(!any | {int, int})"); }
		@Test public void test_21065() { testValid("(!int | !int)","(!int | {int, int})"); }
		@Test public void test_21066() { testValid("(!int | !int)","({any, any} | {int, int})"); }
		@Test public void test_21067() { testValid("(!int | !int)","({any, int} | {int, int})"); }
		@Test public void test_21068() { testInvalid("(!int | !int)","((any | any) | {int, int})"); }
		@Test public void test_21069() { testInvalid("(!int | !int)","((int | int) | {int, int})"); }
		@Test public void test_21070() { testInvalid("(!int | !int)","((int & any) | {int, int})"); }
		@Test public void test_21071() { testInvalid("(!int | !int)","((any & int) | {int, int})"); }
		@Test public void test_21072() { testInvalid("(!int | !int)","((int & int) | {int, int})"); }
		@Test public void test_21073() { testInvalid("(!int | !int)","({any} | (any | any))"); }
		@Test public void test_21074() { testInvalid("(!int | !int)","(!any | (any | any))"); }
		@Test public void test_21075() { testInvalid("(!int | !int)","({any, any} | (any | any))"); }
		@Test public void test_21076() { testInvalid("(!int | !int)","({any, int} | (any | any))"); }
		@Test public void test_21077() { testInvalid("(!int | !int)","({int, int} | (any | any))"); }
		@Test public void test_21078() { testInvalid("(!int | !int)","((int | any) | (any | any))"); }
		@Test public void test_21079() { testInvalid("(!int | !int)","((any | int) | (any | any))"); }
		@Test public void test_21080() { testInvalid("(!int | !int)","((any & int) | (any | any))"); }
		@Test public void test_21081() { testInvalid("(!int | !int)","((int & int) | (any | any))"); }
		@Test public void test_21082() { testInvalid("(!int | !int)","({any} | (int | any))"); }
		@Test public void test_21083() { testInvalid("(!int | !int)","(!int | (int | any))"); }
		@Test public void test_21084() { testInvalid("(!int | !int)","({int, any} | (int | any))"); }
		@Test public void test_21085() { testInvalid("(!int | !int)","({any, int} | (int | any))"); }
		@Test public void test_21086() { testInvalid("(!int | !int)","((int & any) | (int | any))"); }
		@Test public void test_21087() { testInvalid("(!int | !int)","((any & int) | (int | any))"); }
		@Test public void test_21088() { testInvalid("(!int | !int)","({any} | (any | int))"); }
		@Test public void test_21089() { testInvalid("(!int | !int)","({int} | (any | int))"); }
		@Test public void test_21090() { testInvalid("(!int | !int)","(!any | (any | int))"); }
		@Test public void test_21091() { testInvalid("(!int | !int)","(!int | (any | int))"); }
		@Test public void test_21092() { testInvalid("(!int | !int)","({any, int} | (any | int))"); }
		@Test public void test_21093() { testInvalid("(!int | !int)","({int, int} | (any | int))"); }
		@Test public void test_21094() { testInvalid("(!int | !int)","((int | any) | (any | int))"); }
		@Test public void test_21095() { testInvalid("(!int | !int)","((any | int) | (any | int))"); }
		@Test public void test_21096() { testInvalid("(!int | !int)","((int | int) | (any | int))"); }
		@Test public void test_21097() { testInvalid("(!int | !int)","((any & any) | (any | int))"); }
		@Test public void test_21098() { testInvalid("(!int | !int)","({int} | (int | int))"); }
		@Test public void test_21099() { testInvalid("(!int | !int)","(!any | (int | int))"); }
		@Test public void test_21100() { testInvalid("(!int | !int)","(!int | (int | int))"); }
		@Test public void test_21101() { testInvalid("(!int | !int)","({int, any} | (int | int))"); }
		@Test public void test_21102() { testInvalid("(!int | !int)","({any, int} | (int | int))"); }
		@Test public void test_21103() { testInvalid("(!int | !int)","((any | int) | (int | int))"); }
		@Test public void test_21104() { testInvalid("(!int | !int)","((int | int) | (int | int))"); }
		@Test public void test_21105() { testInvalid("(!int | !int)","((any & any) | (int | int))"); }
		@Test public void test_21106() { testInvalid("(!int | !int)","((int & any) | (int | int))"); }
		@Test public void test_21107() { testInvalid("(!int | !int)","((int & int) | (int | int))"); }
		@Test public void test_21108() { testInvalid("(!int | !int)","(!any | (any & any))"); }
		@Test public void test_21109() { testInvalid("(!int | !int)","(!int | (any & any))"); }
		@Test public void test_21110() { testInvalid("(!int | !int)","({any, any} | (any & any))"); }
		@Test public void test_21111() { testInvalid("(!int | !int)","({int, any} | (any & any))"); }
		@Test public void test_21112() { testInvalid("(!int | !int)","({any, int} | (any & any))"); }
		@Test public void test_21113() { testInvalid("(!int | !int)","({int, int} | (any & any))"); }
		@Test public void test_21114() { testInvalid("(!int | !int)","((int | any) | (any & any))"); }
		@Test public void test_21115() { testInvalid("(!int | !int)","((int | int) | (any & any))"); }
		@Test public void test_21116() { testInvalid("(!int | !int)","((int & any) | (any & any))"); }
		@Test public void test_21117() { testInvalid("(!int | !int)","((any & int) | (any & any))"); }
		@Test public void test_21118() { testInvalid("(!int | !int)","((int & int) | (any & any))"); }
		@Test public void test_21119() { testInvalid("(!int | !int)","({any} | (int & any))"); }
		@Test public void test_21120() { testValid("({any, any} | !int)","{int}"); }
		@Test public void test_21121() { testValid("({any, any} | !int)","{any, any}"); }
		@Test public void test_21122() { testValid("({any, any} | !int)","{int, int}"); }
		@Test public void test_21123() { testInvalid("({any, any} | !int)","(any | int)"); }
		@Test public void test_21124() { testInvalid("({any, any} | !int)","(int & any)"); }
		@Test public void test_21125() { testValid("({any, any} | !int)","{{any}}"); }
		@Test public void test_21126() { testValid("({any, any} | !int)","{{int, any}}"); }
		@Test public void test_21127() { testValid("({any, any} | !int)","{{int, int}}"); }
		@Test public void test_21128() { testValid("({any, any} | !int)","{(any | int)}"); }
		@Test public void test_21129() { testInvalid("({any, any} | !int)","!{int, any}"); }
		@Test public void test_21130() { testInvalid("({any, any} | !int)","!{int, int}"); }
		@Test public void test_21131() { testValid("({any, any} | !int)","!(any | any)"); }
		@Test public void test_21132() { testValid("({any, any} | !int)","!(any & any)"); }
		@Test public void test_21133() { testValid("({any, any} | !int)","!(int & int)"); }
		@Test public void test_21134() { testValid("({any, any} | !int)","{{int}, {any}}"); }
		@Test public void test_21135() { testValid("({any, any} | !int)","{!int, {any}}"); }
		@Test public void test_21136() { testValid("({any, any} | !int)","{{int, int}, {any}}"); }
		@Test public void test_21137() { testValid("({any, any} | !int)","{(any | int), {any}}"); }
		@Test public void test_21138() { testValid("({any, any} | !int)","{!int, {int}}"); }
		@Test public void test_21139() { testValid("({any, any} | !int)","{{any, any}, {int}}"); }
		@Test public void test_21140() { testValid("({any, any} | !int)","{(any | any), {int}}"); }
		@Test public void test_21141() { testValid("({any, any} | !int)","{(any & any), {int}}"); }
		@Test public void test_21142() { testValid("({any, any} | !int)","{(any & int), {int}}"); }
		@Test public void test_21143() { testValid("({any, any} | !int)","{{any, any}, !int}"); }
		@Test public void test_21144() { testValid("({any, any} | !int)","{{any, int}, !int}"); }
		@Test public void test_21145() { testValid("({any, any} | !int)","{(any | any), !int}"); }
		@Test public void test_21146() { testValid("({any, any} | !int)","{(int | any), !int}"); }
		@Test public void test_21147() { testValid("({any, any} | !int)","{(any & any), !int}"); }
		@Test public void test_21148() { testValid("({any, any} | !int)","{(int & any), !int}"); }
		@Test public void test_21149() { testValid("({any, any} | !int)","{(int & int), !int}"); }
		@Test public void test_21150() { testValid("({any, any} | !int)","{{any}, {any, any}}"); }
		@Test public void test_21151() { testValid("({any, any} | !int)","{{int}, {any, any}}"); }
		@Test public void test_21152() { testValid("({any, any} | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_21153() { testValid("({any, any} | !int)","{(any | any), {any, any}}"); }
		@Test public void test_21154() { testValid("({any, any} | !int)","{(any | int), {any, any}}"); }
		@Test public void test_21155() { testValid("({any, any} | !int)","{!int, {int, any}}"); }
		@Test public void test_21156() { testValid("({any, any} | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_21157() { testValid("({any, any} | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_21158() { testValid("({any, any} | !int)","{(any & int), {int, any}}"); }
		@Test public void test_21159() { testValid("({any, any} | !int)","{{any}, {any, int}}"); }
		@Test public void test_21160() { testValid("({any, any} | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_21161() { testValid("({any, any} | !int)","{(int | int), {any, int}}"); }
		@Test public void test_21162() { testValid("({any, any} | !int)","{(any & int), {any, int}}"); }
		@Test public void test_21163() { testValid("({any, any} | !int)","{!int, {int, int}}"); }
		@Test public void test_21164() { testValid("({any, any} | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_21165() { testValid("({any, any} | !int)","{(any | any), {int, int}}"); }
		@Test public void test_21166() { testValid("({any, any} | !int)","{(int | any), {int, int}}"); }
		@Test public void test_21167() { testValid("({any, any} | !int)","{(int & any), {int, int}}"); }
		@Test public void test_21168() { testValid("({any, any} | !int)","{{int}, (any | any)}"); }
		@Test public void test_21169() { testValid("({any, any} | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_21170() { testValid("({any, any} | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_21171() { testValid("({any, any} | !int)","{(any | any), (any | any)}"); }
		@Test public void test_21172() { testValid("({any, any} | !int)","{(int | any), (any | any)}"); }
		@Test public void test_21173() { testValid("({any, any} | !int)","{(int & int), (any | any)}"); }
		@Test public void test_21174() { testValid("({any, any} | !int)","{!int, (int | any)}"); }
		@Test public void test_21175() { testValid("({any, any} | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_21176() { testValid("({any, any} | !int)","{(any | any), (int | any)}"); }
		@Test public void test_21177() { testValid("({any, any} | !int)","{(int | int), (int | any)}"); }
		@Test public void test_21178() { testValid("({any, any} | !int)","{{any}, (any | int)}"); }
		@Test public void test_21179() { testValid("({any, any} | !int)","{!int, (any | int)}"); }
		@Test public void test_21180() { testValid("({any, any} | !int)","{(any | any), (any | int)}"); }
		@Test public void test_21181() { testValid("({any, any} | !int)","{(any | int), (any | int)}"); }
		@Test public void test_21182() { testValid("({any, any} | !int)","{(any & int), (any | int)}"); }
		@Test public void test_21183() { testValid("({any, any} | !int)","{{int}, (int | int)}"); }
		@Test public void test_21184() { testValid("({any, any} | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_21185() { testValid("({any, any} | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_21186() { testValid("({any, any} | !int)","{{int}, (any & any)}"); }
		@Test public void test_21187() { testValid("({any, any} | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_21188() { testValid("({any, any} | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_21189() { testValid("({any, any} | !int)","{(int | any), (any & any)}"); }
		@Test public void test_21190() { testValid("({any, any} | !int)","{(any & any), (any & any)}"); }
		@Test public void test_21191() { testValid("({any, any} | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21192() { testValid("({any, any} | !int)","{{any}, (int & any)}"); }
		@Test public void test_21193() { testValid("({any, any} | !int)","{{int}, (int & any)}"); }
		@Test public void test_21194() { testValid("({any, any} | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21195() { testValid("({any, any} | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21196() { testValid("({any, any} | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21197() { testValid("({any, any} | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21198() { testValid("({any, any} | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21199() { testValid("({any, any} | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21200() { testValid("({any, any} | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21201() { testValid("({any, any} | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21202() { testValid("({any, any} | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21203() { testValid("({any, any} | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21204() { testValid("({any, any} | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21205() { testValid("({any, any} | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21206() { testValid("({any, any} | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21207() { testValid("({any, any} | !int)","(!int | {any})"); }
		@Test public void test_21208() { testValid("({any, any} | !int)","({any, any} | {any})"); }
		@Test public void test_21209() { testInvalid("({any, any} | !int)","((any | any) | {any})"); }
		@Test public void test_21210() { testInvalid("({any, any} | !int)","((int | any) | {any})"); }
		@Test public void test_21211() { testInvalid("({any, any} | !int)","((any & any) | {any})"); }
		@Test public void test_21212() { testInvalid("({any, any} | !int)","((int & any) | {any})"); }
		@Test public void test_21213() { testInvalid("({any, any} | !int)","((any & int) | {any})"); }
		@Test public void test_21214() { testValid("({any, any} | !int)","({int} | {int})"); }
		@Test public void test_21215() { testValid("({any, any} | !int)","(!any | {int})"); }
		@Test public void test_21216() { testValid("({any, any} | !int)","(!int | {int})"); }
		@Test public void test_21217() { testValid("({any, any} | !int)","({any, int} | {int})"); }
		@Test public void test_21218() { testInvalid("({any, any} | !int)","((int & any) | {int})"); }
		@Test public void test_21219() { testInvalid("({any, any} | !int)","((any & int) | {int})"); }
		@Test public void test_21220() { testInvalid("({any, any} | !int)","((int & int) | {int})"); }
		@Test public void test_21221() { testValid("({any, any} | !int)","({any} | !any)"); }
		@Test public void test_21222() { testValid("({any, any} | !int)","({int} | !any)"); }
		@Test public void test_21223() { testValid("({any, any} | !int)","({any, any} | !any)"); }
		@Test public void test_21224() { testValid("({any, any} | !int)","({int, int} | !any)"); }
		@Test public void test_21225() { testInvalid("({any, any} | !int)","((any | any) | !any)"); }
		@Test public void test_21226() { testInvalid("({any, any} | !int)","((int | any) | !any)"); }
		@Test public void test_21227() { testInvalid("({any, any} | !int)","((int | int) | !any)"); }
		@Test public void test_21228() { testInvalid("({any, any} | !int)","((int & int) | !any)"); }
		@Test public void test_21229() { testValid("({any, any} | !int)","(!int | !int)"); }
		@Test public void test_21230() { testValid("({any, any} | !int)","({any, any} | !int)"); }
		@Test public void test_21231() { testValid("({any, any} | !int)","({int, int} | !int)"); }
		@Test public void test_21232() { testInvalid("({any, any} | !int)","((int | any) | !int)"); }
		@Test public void test_21233() { testInvalid("({any, any} | !int)","((any | int) | !int)"); }
		@Test public void test_21234() { testInvalid("({any, any} | !int)","((any & int) | !int)"); }
		@Test public void test_21235() { testInvalid("({any, any} | !int)","((int & int) | !int)"); }
		@Test public void test_21236() { testValid("({any, any} | !int)","({int} | {any, any})"); }
		@Test public void test_21237() { testValid("({any, any} | !int)","(!any | {any, any})"); }
		@Test public void test_21238() { testValid("({any, any} | !int)","(!int | {any, any})"); }
		@Test public void test_21239() { testValid("({any, any} | !int)","({any, int} | {any, any})"); }
		@Test public void test_21240() { testInvalid("({any, any} | !int)","((int | any) | {any, any})"); }
		@Test public void test_21241() { testInvalid("({any, any} | !int)","((any & any) | {any, any})"); }
		@Test public void test_21242() { testInvalid("({any, any} | !int)","((any & int) | {any, any})"); }
		@Test public void test_21243() { testValid("({any, any} | !int)","(!int | {int, any})"); }
		@Test public void test_21244() { testValid("({any, any} | !int)","({any, int} | {int, any})"); }
		@Test public void test_21245() { testInvalid("({any, any} | !int)","((any | any) | {int, any})"); }
		@Test public void test_21246() { testInvalid("({any, any} | !int)","((int | any) | {int, any})"); }
		@Test public void test_21247() { testInvalid("({any, any} | !int)","((any | int) | {int, any})"); }
		@Test public void test_21248() { testInvalid("({any, any} | !int)","((int & any) | {int, any})"); }
		@Test public void test_21249() { testValid("({any, any} | !int)","({any} | {any, int})"); }
		@Test public void test_21250() { testValid("({any, any} | !int)","(!int | {any, int})"); }
		@Test public void test_21251() { testValid("({any, any} | !int)","({any, int} | {any, int})"); }
		@Test public void test_21252() { testInvalid("({any, any} | !int)","((any | any) | {any, int})"); }
		@Test public void test_21253() { testInvalid("({any, any} | !int)","((any | int) | {any, int})"); }
		@Test public void test_21254() { testInvalid("({any, any} | !int)","((int | int) | {any, int})"); }
		@Test public void test_21255() { testInvalid("({any, any} | !int)","((int & any) | {any, int})"); }
		@Test public void test_21256() { testValid("({any, any} | !int)","(!any | {int, int})"); }
		@Test public void test_21257() { testValid("({any, any} | !int)","(!int | {int, int})"); }
		@Test public void test_21258() { testValid("({any, any} | !int)","({any, any} | {int, int})"); }
		@Test public void test_21259() { testValid("({any, any} | !int)","({any, int} | {int, int})"); }
		@Test public void test_21260() { testInvalid("({any, any} | !int)","((any | any) | {int, int})"); }
		@Test public void test_21261() { testInvalid("({any, any} | !int)","((int | int) | {int, int})"); }
		@Test public void test_21262() { testInvalid("({any, any} | !int)","((int & any) | {int, int})"); }
		@Test public void test_21263() { testInvalid("({any, any} | !int)","((any & int) | {int, int})"); }
		@Test public void test_21264() { testInvalid("({any, any} | !int)","((int & int) | {int, int})"); }
		@Test public void test_21265() { testInvalid("({any, any} | !int)","({any} | (any | any))"); }
		@Test public void test_21266() { testInvalid("({any, any} | !int)","(!any | (any | any))"); }
		@Test public void test_21267() { testInvalid("({any, any} | !int)","({any, any} | (any | any))"); }
		@Test public void test_21268() { testInvalid("({any, any} | !int)","({any, int} | (any | any))"); }
		@Test public void test_21269() { testInvalid("({any, any} | !int)","({int, int} | (any | any))"); }
		@Test public void test_21270() { testInvalid("({any, any} | !int)","((int | any) | (any | any))"); }
		@Test public void test_21271() { testInvalid("({any, any} | !int)","((any | int) | (any | any))"); }
		@Test public void test_21272() { testInvalid("({any, any} | !int)","((any & int) | (any | any))"); }
		@Test public void test_21273() { testInvalid("({any, any} | !int)","((int & int) | (any | any))"); }
		@Test public void test_21274() { testInvalid("({any, any} | !int)","({any} | (int | any))"); }
		@Test public void test_21275() { testInvalid("({any, any} | !int)","(!int | (int | any))"); }
		@Test public void test_21276() { testInvalid("({any, any} | !int)","({int, any} | (int | any))"); }
		@Test public void test_21277() { testInvalid("({any, any} | !int)","({any, int} | (int | any))"); }
		@Test public void test_21278() { testInvalid("({any, any} | !int)","((int & any) | (int | any))"); }
		@Test public void test_21279() { testInvalid("({any, any} | !int)","((any & int) | (int | any))"); }
		@Test public void test_21280() { testInvalid("({any, any} | !int)","({any} | (any | int))"); }
		@Test public void test_21281() { testInvalid("({any, any} | !int)","({int} | (any | int))"); }
		@Test public void test_21282() { testInvalid("({any, any} | !int)","(!any | (any | int))"); }
		@Test public void test_21283() { testInvalid("({any, any} | !int)","(!int | (any | int))"); }
		@Test public void test_21284() { testInvalid("({any, any} | !int)","({any, int} | (any | int))"); }
		@Test public void test_21285() { testInvalid("({any, any} | !int)","({int, int} | (any | int))"); }
		@Test public void test_21286() { testInvalid("({any, any} | !int)","((int | any) | (any | int))"); }
		@Test public void test_21287() { testInvalid("({any, any} | !int)","((any | int) | (any | int))"); }
		@Test public void test_21288() { testInvalid("({any, any} | !int)","((int | int) | (any | int))"); }
		@Test public void test_21289() { testInvalid("({any, any} | !int)","((any & any) | (any | int))"); }
		@Test public void test_21290() { testInvalid("({any, any} | !int)","({int} | (int | int))"); }
		@Test public void test_21291() { testInvalid("({any, any} | !int)","(!any | (int | int))"); }
		@Test public void test_21292() { testInvalid("({any, any} | !int)","(!int | (int | int))"); }
		@Test public void test_21293() { testInvalid("({any, any} | !int)","({int, any} | (int | int))"); }
		@Test public void test_21294() { testInvalid("({any, any} | !int)","({any, int} | (int | int))"); }
		@Test public void test_21295() { testInvalid("({any, any} | !int)","((any | int) | (int | int))"); }
		@Test public void test_21296() { testInvalid("({any, any} | !int)","((int | int) | (int | int))"); }
		@Test public void test_21297() { testInvalid("({any, any} | !int)","((any & any) | (int | int))"); }
		@Test public void test_21298() { testInvalid("({any, any} | !int)","((int & any) | (int | int))"); }
		@Test public void test_21299() { testInvalid("({any, any} | !int)","((int & int) | (int | int))"); }
		@Test public void test_21300() { testInvalid("({any, any} | !int)","(!any | (any & any))"); }
		@Test public void test_21301() { testInvalid("({any, any} | !int)","(!int | (any & any))"); }
		@Test public void test_21302() { testInvalid("({any, any} | !int)","({any, any} | (any & any))"); }
		@Test public void test_21303() { testInvalid("({any, any} | !int)","({int, any} | (any & any))"); }
		@Test public void test_21304() { testInvalid("({any, any} | !int)","({any, int} | (any & any))"); }
		@Test public void test_21305() { testInvalid("({any, any} | !int)","({int, int} | (any & any))"); }
		@Test public void test_21306() { testInvalid("({any, any} | !int)","((int | any) | (any & any))"); }
		@Test public void test_21307() { testInvalid("({any, any} | !int)","((int | int) | (any & any))"); }
		@Test public void test_21308() { testInvalid("({any, any} | !int)","((int & any) | (any & any))"); }
		@Test public void test_21309() { testInvalid("({any, any} | !int)","((any & int) | (any & any))"); }
		@Test public void test_21310() { testInvalid("({any, any} | !int)","((int & int) | (any & any))"); }
		@Test public void test_21311() { testInvalid("({any, any} | !int)","({any} | (int & any))"); }
		@Test public void test_21312() { testValid("({int, int} | !int)","{int}"); }
		@Test public void test_21313() { testValid("({int, int} | !int)","{any, any}"); }
		@Test public void test_21314() { testValid("({int, int} | !int)","{int, int}"); }
		@Test public void test_21315() { testInvalid("({int, int} | !int)","(any | int)"); }
		@Test public void test_21316() { testInvalid("({int, int} | !int)","(int & any)"); }
		@Test public void test_21317() { testValid("({int, int} | !int)","{{any}}"); }
		@Test public void test_21318() { testValid("({int, int} | !int)","{{int, any}}"); }
		@Test public void test_21319() { testValid("({int, int} | !int)","{{int, int}}"); }
		@Test public void test_21320() { testValid("({int, int} | !int)","{(any | int)}"); }
		@Test public void test_21321() { testInvalid("({int, int} | !int)","!{int, any}"); }
		@Test public void test_21322() { testInvalid("({int, int} | !int)","!{int, int}"); }
		@Test public void test_21323() { testValid("({int, int} | !int)","!(any | any)"); }
		@Test public void test_21324() { testValid("({int, int} | !int)","!(any & any)"); }
		@Test public void test_21325() { testValid("({int, int} | !int)","!(int & int)"); }
		@Test public void test_21326() { testValid("({int, int} | !int)","{{int}, {any}}"); }
		@Test public void test_21327() { testValid("({int, int} | !int)","{!int, {any}}"); }
		@Test public void test_21328() { testValid("({int, int} | !int)","{{int, int}, {any}}"); }
		@Test public void test_21329() { testValid("({int, int} | !int)","{(any | int), {any}}"); }
		@Test public void test_21330() { testValid("({int, int} | !int)","{!int, {int}}"); }
		@Test public void test_21331() { testValid("({int, int} | !int)","{{any, any}, {int}}"); }
		@Test public void test_21332() { testValid("({int, int} | !int)","{(any | any), {int}}"); }
		@Test public void test_21333() { testValid("({int, int} | !int)","{(any & any), {int}}"); }
		@Test public void test_21334() { testValid("({int, int} | !int)","{(any & int), {int}}"); }
		@Test public void test_21335() { testValid("({int, int} | !int)","{{any, any}, !int}"); }
		@Test public void test_21336() { testValid("({int, int} | !int)","{{any, int}, !int}"); }
		@Test public void test_21337() { testValid("({int, int} | !int)","{(any | any), !int}"); }
		@Test public void test_21338() { testValid("({int, int} | !int)","{(int | any), !int}"); }
		@Test public void test_21339() { testValid("({int, int} | !int)","{(any & any), !int}"); }
		@Test public void test_21340() { testValid("({int, int} | !int)","{(int & any), !int}"); }
		@Test public void test_21341() { testValid("({int, int} | !int)","{(int & int), !int}"); }
		@Test public void test_21342() { testValid("({int, int} | !int)","{{any}, {any, any}}"); }
		@Test public void test_21343() { testValid("({int, int} | !int)","{{int}, {any, any}}"); }
		@Test public void test_21344() { testValid("({int, int} | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_21345() { testValid("({int, int} | !int)","{(any | any), {any, any}}"); }
		@Test public void test_21346() { testValid("({int, int} | !int)","{(any | int), {any, any}}"); }
		@Test public void test_21347() { testValid("({int, int} | !int)","{!int, {int, any}}"); }
		@Test public void test_21348() { testValid("({int, int} | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_21349() { testValid("({int, int} | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_21350() { testValid("({int, int} | !int)","{(any & int), {int, any}}"); }
		@Test public void test_21351() { testValid("({int, int} | !int)","{{any}, {any, int}}"); }
		@Test public void test_21352() { testValid("({int, int} | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_21353() { testValid("({int, int} | !int)","{(int | int), {any, int}}"); }
		@Test public void test_21354() { testValid("({int, int} | !int)","{(any & int), {any, int}}"); }
		@Test public void test_21355() { testValid("({int, int} | !int)","{!int, {int, int}}"); }
		@Test public void test_21356() { testValid("({int, int} | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_21357() { testValid("({int, int} | !int)","{(any | any), {int, int}}"); }
		@Test public void test_21358() { testValid("({int, int} | !int)","{(int | any), {int, int}}"); }
		@Test public void test_21359() { testValid("({int, int} | !int)","{(int & any), {int, int}}"); }
		@Test public void test_21360() { testValid("({int, int} | !int)","{{int}, (any | any)}"); }
		@Test public void test_21361() { testValid("({int, int} | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_21362() { testValid("({int, int} | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_21363() { testValid("({int, int} | !int)","{(any | any), (any | any)}"); }
		@Test public void test_21364() { testValid("({int, int} | !int)","{(int | any), (any | any)}"); }
		@Test public void test_21365() { testValid("({int, int} | !int)","{(int & int), (any | any)}"); }
		@Test public void test_21366() { testValid("({int, int} | !int)","{!int, (int | any)}"); }
		@Test public void test_21367() { testValid("({int, int} | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_21368() { testValid("({int, int} | !int)","{(any | any), (int | any)}"); }
		@Test public void test_21369() { testValid("({int, int} | !int)","{(int | int), (int | any)}"); }
		@Test public void test_21370() { testValid("({int, int} | !int)","{{any}, (any | int)}"); }
		@Test public void test_21371() { testValid("({int, int} | !int)","{!int, (any | int)}"); }
		@Test public void test_21372() { testValid("({int, int} | !int)","{(any | any), (any | int)}"); }
		@Test public void test_21373() { testValid("({int, int} | !int)","{(any | int), (any | int)}"); }
		@Test public void test_21374() { testValid("({int, int} | !int)","{(any & int), (any | int)}"); }
		@Test public void test_21375() { testValid("({int, int} | !int)","{{int}, (int | int)}"); }
		@Test public void test_21376() { testValid("({int, int} | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_21377() { testValid("({int, int} | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_21378() { testValid("({int, int} | !int)","{{int}, (any & any)}"); }
		@Test public void test_21379() { testValid("({int, int} | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_21380() { testValid("({int, int} | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_21381() { testValid("({int, int} | !int)","{(int | any), (any & any)}"); }
		@Test public void test_21382() { testValid("({int, int} | !int)","{(any & any), (any & any)}"); }
		@Test public void test_21383() { testValid("({int, int} | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21384() { testValid("({int, int} | !int)","{{any}, (int & any)}"); }
		@Test public void test_21385() { testValid("({int, int} | !int)","{{int}, (int & any)}"); }
		@Test public void test_21386() { testValid("({int, int} | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21387() { testValid("({int, int} | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21388() { testValid("({int, int} | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21389() { testValid("({int, int} | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21390() { testValid("({int, int} | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21391() { testValid("({int, int} | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21392() { testValid("({int, int} | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21393() { testValid("({int, int} | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21394() { testValid("({int, int} | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21395() { testValid("({int, int} | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21396() { testValid("({int, int} | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21397() { testValid("({int, int} | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21398() { testValid("({int, int} | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21399() { testValid("({int, int} | !int)","(!int | {any})"); }
		@Test public void test_21400() { testValid("({int, int} | !int)","({any, any} | {any})"); }
		@Test public void test_21401() { testInvalid("({int, int} | !int)","((any | any) | {any})"); }
		@Test public void test_21402() { testInvalid("({int, int} | !int)","((int | any) | {any})"); }
		@Test public void test_21403() { testInvalid("({int, int} | !int)","((any & any) | {any})"); }
		@Test public void test_21404() { testInvalid("({int, int} | !int)","((int & any) | {any})"); }
		@Test public void test_21405() { testInvalid("({int, int} | !int)","((any & int) | {any})"); }
		@Test public void test_21406() { testValid("({int, int} | !int)","({int} | {int})"); }
		@Test public void test_21407() { testValid("({int, int} | !int)","(!any | {int})"); }
		@Test public void test_21408() { testValid("({int, int} | !int)","(!int | {int})"); }
		@Test public void test_21409() { testValid("({int, int} | !int)","({any, int} | {int})"); }
		@Test public void test_21410() { testInvalid("({int, int} | !int)","((int & any) | {int})"); }
		@Test public void test_21411() { testInvalid("({int, int} | !int)","((any & int) | {int})"); }
		@Test public void test_21412() { testInvalid("({int, int} | !int)","((int & int) | {int})"); }
		@Test public void test_21413() { testValid("({int, int} | !int)","({any} | !any)"); }
		@Test public void test_21414() { testValid("({int, int} | !int)","({int} | !any)"); }
		@Test public void test_21415() { testValid("({int, int} | !int)","({any, any} | !any)"); }
		@Test public void test_21416() { testValid("({int, int} | !int)","({int, int} | !any)"); }
		@Test public void test_21417() { testInvalid("({int, int} | !int)","((any | any) | !any)"); }
		@Test public void test_21418() { testInvalid("({int, int} | !int)","((int | any) | !any)"); }
		@Test public void test_21419() { testInvalid("({int, int} | !int)","((int | int) | !any)"); }
		@Test public void test_21420() { testInvalid("({int, int} | !int)","((int & int) | !any)"); }
		@Test public void test_21421() { testValid("({int, int} | !int)","(!int | !int)"); }
		@Test public void test_21422() { testValid("({int, int} | !int)","({any, any} | !int)"); }
		@Test public void test_21423() { testValid("({int, int} | !int)","({int, int} | !int)"); }
		@Test public void test_21424() { testInvalid("({int, int} | !int)","((int | any) | !int)"); }
		@Test public void test_21425() { testInvalid("({int, int} | !int)","((any | int) | !int)"); }
		@Test public void test_21426() { testInvalid("({int, int} | !int)","((any & int) | !int)"); }
		@Test public void test_21427() { testInvalid("({int, int} | !int)","((int & int) | !int)"); }
		@Test public void test_21428() { testValid("({int, int} | !int)","({int} | {any, any})"); }
		@Test public void test_21429() { testValid("({int, int} | !int)","(!any | {any, any})"); }
		@Test public void test_21430() { testValid("({int, int} | !int)","(!int | {any, any})"); }
		@Test public void test_21431() { testValid("({int, int} | !int)","({any, int} | {any, any})"); }
		@Test public void test_21432() { testInvalid("({int, int} | !int)","((int | any) | {any, any})"); }
		@Test public void test_21433() { testInvalid("({int, int} | !int)","((any & any) | {any, any})"); }
		@Test public void test_21434() { testInvalid("({int, int} | !int)","((any & int) | {any, any})"); }
		@Test public void test_21435() { testValid("({int, int} | !int)","(!int | {int, any})"); }
		@Test public void test_21436() { testValid("({int, int} | !int)","({any, int} | {int, any})"); }
		@Test public void test_21437() { testInvalid("({int, int} | !int)","((any | any) | {int, any})"); }
		@Test public void test_21438() { testInvalid("({int, int} | !int)","((int | any) | {int, any})"); }
		@Test public void test_21439() { testInvalid("({int, int} | !int)","((any | int) | {int, any})"); }
		@Test public void test_21440() { testInvalid("({int, int} | !int)","((int & any) | {int, any})"); }
		@Test public void test_21441() { testValid("({int, int} | !int)","({any} | {any, int})"); }
		@Test public void test_21442() { testValid("({int, int} | !int)","(!int | {any, int})"); }
		@Test public void test_21443() { testValid("({int, int} | !int)","({any, int} | {any, int})"); }
		@Test public void test_21444() { testInvalid("({int, int} | !int)","((any | any) | {any, int})"); }
		@Test public void test_21445() { testInvalid("({int, int} | !int)","((any | int) | {any, int})"); }
		@Test public void test_21446() { testInvalid("({int, int} | !int)","((int | int) | {any, int})"); }
		@Test public void test_21447() { testInvalid("({int, int} | !int)","((int & any) | {any, int})"); }
		@Test public void test_21448() { testValid("({int, int} | !int)","(!any | {int, int})"); }
		@Test public void test_21449() { testValid("({int, int} | !int)","(!int | {int, int})"); }
		@Test public void test_21450() { testValid("({int, int} | !int)","({any, any} | {int, int})"); }
		@Test public void test_21451() { testValid("({int, int} | !int)","({any, int} | {int, int})"); }
		@Test public void test_21452() { testInvalid("({int, int} | !int)","((any | any) | {int, int})"); }
		@Test public void test_21453() { testInvalid("({int, int} | !int)","((int | int) | {int, int})"); }
		@Test public void test_21454() { testInvalid("({int, int} | !int)","((int & any) | {int, int})"); }
		@Test public void test_21455() { testInvalid("({int, int} | !int)","((any & int) | {int, int})"); }
		@Test public void test_21456() { testInvalid("({int, int} | !int)","((int & int) | {int, int})"); }
		@Test public void test_21457() { testInvalid("({int, int} | !int)","({any} | (any | any))"); }
		@Test public void test_21458() { testInvalid("({int, int} | !int)","(!any | (any | any))"); }
		@Test public void test_21459() { testInvalid("({int, int} | !int)","({any, any} | (any | any))"); }
		@Test public void test_21460() { testInvalid("({int, int} | !int)","({any, int} | (any | any))"); }
		@Test public void test_21461() { testInvalid("({int, int} | !int)","({int, int} | (any | any))"); }
		@Test public void test_21462() { testInvalid("({int, int} | !int)","((int | any) | (any | any))"); }
		@Test public void test_21463() { testInvalid("({int, int} | !int)","((any | int) | (any | any))"); }
		@Test public void test_21464() { testInvalid("({int, int} | !int)","((any & int) | (any | any))"); }
		@Test public void test_21465() { testInvalid("({int, int} | !int)","((int & int) | (any | any))"); }
		@Test public void test_21466() { testInvalid("({int, int} | !int)","({any} | (int | any))"); }
		@Test public void test_21467() { testInvalid("({int, int} | !int)","(!int | (int | any))"); }
		@Test public void test_21468() { testInvalid("({int, int} | !int)","({int, any} | (int | any))"); }
		@Test public void test_21469() { testInvalid("({int, int} | !int)","({any, int} | (int | any))"); }
		@Test public void test_21470() { testInvalid("({int, int} | !int)","((int & any) | (int | any))"); }
		@Test public void test_21471() { testInvalid("({int, int} | !int)","((any & int) | (int | any))"); }
		@Test public void test_21472() { testInvalid("({int, int} | !int)","({any} | (any | int))"); }
		@Test public void test_21473() { testInvalid("({int, int} | !int)","({int} | (any | int))"); }
		@Test public void test_21474() { testInvalid("({int, int} | !int)","(!any | (any | int))"); }
		@Test public void test_21475() { testInvalid("({int, int} | !int)","(!int | (any | int))"); }
		@Test public void test_21476() { testInvalid("({int, int} | !int)","({any, int} | (any | int))"); }
		@Test public void test_21477() { testInvalid("({int, int} | !int)","({int, int} | (any | int))"); }
		@Test public void test_21478() { testInvalid("({int, int} | !int)","((int | any) | (any | int))"); }
		@Test public void test_21479() { testInvalid("({int, int} | !int)","((any | int) | (any | int))"); }
		@Test public void test_21480() { testInvalid("({int, int} | !int)","((int | int) | (any | int))"); }
		@Test public void test_21481() { testInvalid("({int, int} | !int)","((any & any) | (any | int))"); }
		@Test public void test_21482() { testInvalid("({int, int} | !int)","({int} | (int | int))"); }
		@Test public void test_21483() { testInvalid("({int, int} | !int)","(!any | (int | int))"); }
		@Test public void test_21484() { testInvalid("({int, int} | !int)","(!int | (int | int))"); }
		@Test public void test_21485() { testInvalid("({int, int} | !int)","({int, any} | (int | int))"); }
		@Test public void test_21486() { testInvalid("({int, int} | !int)","({any, int} | (int | int))"); }
		@Test public void test_21487() { testInvalid("({int, int} | !int)","((any | int) | (int | int))"); }
		@Test public void test_21488() { testInvalid("({int, int} | !int)","((int | int) | (int | int))"); }
		@Test public void test_21489() { testInvalid("({int, int} | !int)","((any & any) | (int | int))"); }
		@Test public void test_21490() { testInvalid("({int, int} | !int)","((int & any) | (int | int))"); }
		@Test public void test_21491() { testInvalid("({int, int} | !int)","((int & int) | (int | int))"); }
		@Test public void test_21492() { testInvalid("({int, int} | !int)","(!any | (any & any))"); }
		@Test public void test_21493() { testInvalid("({int, int} | !int)","(!int | (any & any))"); }
		@Test public void test_21494() { testInvalid("({int, int} | !int)","({any, any} | (any & any))"); }
		@Test public void test_21495() { testInvalid("({int, int} | !int)","({int, any} | (any & any))"); }
		@Test public void test_21496() { testInvalid("({int, int} | !int)","({any, int} | (any & any))"); }
		@Test public void test_21497() { testInvalid("({int, int} | !int)","({int, int} | (any & any))"); }
		@Test public void test_21498() { testInvalid("({int, int} | !int)","((int | any) | (any & any))"); }
		@Test public void test_21499() { testInvalid("({int, int} | !int)","((int | int) | (any & any))"); }
		@Test public void test_21500() { testInvalid("({int, int} | !int)","((int & any) | (any & any))"); }
		@Test public void test_21501() { testInvalid("({int, int} | !int)","((any & int) | (any & any))"); }
		@Test public void test_21502() { testInvalid("({int, int} | !int)","((int & int) | (any & any))"); }
		@Test public void test_21503() { testInvalid("({int, int} | !int)","({any} | (int & any))"); }
		@Test public void test_21504() { testValid("((int | any) | !int)","{int}"); }
		@Test public void test_21505() { testValid("((int | any) | !int)","{any, any}"); }
		@Test public void test_21506() { testValid("((int | any) | !int)","{int, int}"); }
		@Test public void test_21507() { testValid("((int | any) | !int)","(any | int)"); }
		@Test public void test_21508() { testValid("((int | any) | !int)","(int & any)"); }
		@Test public void test_21509() { testValid("((int | any) | !int)","{{any}}"); }
		@Test public void test_21510() { testValid("((int | any) | !int)","{{int, any}}"); }
		@Test public void test_21511() { testValid("((int | any) | !int)","{{int, int}}"); }
		@Test public void test_21512() { testValid("((int | any) | !int)","{(any | int)}"); }
		@Test public void test_21513() { testValid("((int | any) | !int)","!{int, any}"); }
		@Test public void test_21514() { testValid("((int | any) | !int)","!{int, int}"); }
		@Test public void test_21515() { testValid("((int | any) | !int)","!(any | any)"); }
		@Test public void test_21516() { testValid("((int | any) | !int)","!(any & any)"); }
		@Test public void test_21517() { testValid("((int | any) | !int)","!(int & int)"); }
		@Test public void test_21518() { testValid("((int | any) | !int)","{{int}, {any}}"); }
		@Test public void test_21519() { testValid("((int | any) | !int)","{!int, {any}}"); }
		@Test public void test_21520() { testValid("((int | any) | !int)","{{int, int}, {any}}"); }
		@Test public void test_21521() { testValid("((int | any) | !int)","{(any | int), {any}}"); }
		@Test public void test_21522() { testValid("((int | any) | !int)","{!int, {int}}"); }
		@Test public void test_21523() { testValid("((int | any) | !int)","{{any, any}, {int}}"); }
		@Test public void test_21524() { testValid("((int | any) | !int)","{(any | any), {int}}"); }
		@Test public void test_21525() { testValid("((int | any) | !int)","{(any & any), {int}}"); }
		@Test public void test_21526() { testValid("((int | any) | !int)","{(any & int), {int}}"); }
		@Test public void test_21527() { testValid("((int | any) | !int)","{{any, any}, !int}"); }
		@Test public void test_21528() { testValid("((int | any) | !int)","{{any, int}, !int}"); }
		@Test public void test_21529() { testValid("((int | any) | !int)","{(any | any), !int}"); }
		@Test public void test_21530() { testValid("((int | any) | !int)","{(int | any), !int}"); }
		@Test public void test_21531() { testValid("((int | any) | !int)","{(any & any), !int}"); }
		@Test public void test_21532() { testValid("((int | any) | !int)","{(int & any), !int}"); }
		@Test public void test_21533() { testValid("((int | any) | !int)","{(int & int), !int}"); }
		@Test public void test_21534() { testValid("((int | any) | !int)","{{any}, {any, any}}"); }
		@Test public void test_21535() { testValid("((int | any) | !int)","{{int}, {any, any}}"); }
		@Test public void test_21536() { testValid("((int | any) | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_21537() { testValid("((int | any) | !int)","{(any | any), {any, any}}"); }
		@Test public void test_21538() { testValid("((int | any) | !int)","{(any | int), {any, any}}"); }
		@Test public void test_21539() { testValid("((int | any) | !int)","{!int, {int, any}}"); }
		@Test public void test_21540() { testValid("((int | any) | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_21541() { testValid("((int | any) | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_21542() { testValid("((int | any) | !int)","{(any & int), {int, any}}"); }
		@Test public void test_21543() { testValid("((int | any) | !int)","{{any}, {any, int}}"); }
		@Test public void test_21544() { testValid("((int | any) | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_21545() { testValid("((int | any) | !int)","{(int | int), {any, int}}"); }
		@Test public void test_21546() { testValid("((int | any) | !int)","{(any & int), {any, int}}"); }
		@Test public void test_21547() { testValid("((int | any) | !int)","{!int, {int, int}}"); }
		@Test public void test_21548() { testValid("((int | any) | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_21549() { testValid("((int | any) | !int)","{(any | any), {int, int}}"); }
		@Test public void test_21550() { testValid("((int | any) | !int)","{(int | any), {int, int}}"); }
		@Test public void test_21551() { testValid("((int | any) | !int)","{(int & any), {int, int}}"); }
		@Test public void test_21552() { testValid("((int | any) | !int)","{{int}, (any | any)}"); }
		@Test public void test_21553() { testValid("((int | any) | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_21554() { testValid("((int | any) | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_21555() { testValid("((int | any) | !int)","{(any | any), (any | any)}"); }
		@Test public void test_21556() { testValid("((int | any) | !int)","{(int | any), (any | any)}"); }
		@Test public void test_21557() { testValid("((int | any) | !int)","{(int & int), (any | any)}"); }
		@Test public void test_21558() { testValid("((int | any) | !int)","{!int, (int | any)}"); }
		@Test public void test_21559() { testValid("((int | any) | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_21560() { testValid("((int | any) | !int)","{(any | any), (int | any)}"); }
		@Test public void test_21561() { testValid("((int | any) | !int)","{(int | int), (int | any)}"); }
		@Test public void test_21562() { testValid("((int | any) | !int)","{{any}, (any | int)}"); }
		@Test public void test_21563() { testValid("((int | any) | !int)","{!int, (any | int)}"); }
		@Test public void test_21564() { testValid("((int | any) | !int)","{(any | any), (any | int)}"); }
		@Test public void test_21565() { testValid("((int | any) | !int)","{(any | int), (any | int)}"); }
		@Test public void test_21566() { testValid("((int | any) | !int)","{(any & int), (any | int)}"); }
		@Test public void test_21567() { testValid("((int | any) | !int)","{{int}, (int | int)}"); }
		@Test public void test_21568() { testValid("((int | any) | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_21569() { testValid("((int | any) | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_21570() { testValid("((int | any) | !int)","{{int}, (any & any)}"); }
		@Test public void test_21571() { testValid("((int | any) | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_21572() { testValid("((int | any) | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_21573() { testValid("((int | any) | !int)","{(int | any), (any & any)}"); }
		@Test public void test_21574() { testValid("((int | any) | !int)","{(any & any), (any & any)}"); }
		@Test public void test_21575() { testValid("((int | any) | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21576() { testValid("((int | any) | !int)","{{any}, (int & any)}"); }
		@Test public void test_21577() { testValid("((int | any) | !int)","{{int}, (int & any)}"); }
		@Test public void test_21578() { testValid("((int | any) | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21579() { testValid("((int | any) | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21580() { testValid("((int | any) | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21581() { testValid("((int | any) | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21582() { testValid("((int | any) | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21583() { testValid("((int | any) | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21584() { testValid("((int | any) | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21585() { testValid("((int | any) | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21586() { testValid("((int | any) | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21587() { testValid("((int | any) | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21588() { testValid("((int | any) | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21589() { testValid("((int | any) | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21590() { testValid("((int | any) | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21591() { testValid("((int | any) | !int)","(!int | {any})"); }
		@Test public void test_21592() { testValid("((int | any) | !int)","({any, any} | {any})"); }
		@Test public void test_21593() { testValid("((int | any) | !int)","((any | any) | {any})"); }
		@Test public void test_21594() { testValid("((int | any) | !int)","((int | any) | {any})"); }
		@Test public void test_21595() { testValid("((int | any) | !int)","((any & any) | {any})"); }
		@Test public void test_21596() { testValid("((int | any) | !int)","((int & any) | {any})"); }
		@Test public void test_21597() { testValid("((int | any) | !int)","((any & int) | {any})"); }
		@Test public void test_21598() { testValid("((int | any) | !int)","({int} | {int})"); }
		@Test public void test_21599() { testValid("((int | any) | !int)","(!any | {int})"); }
		@Test public void test_21600() { testValid("((int | any) | !int)","(!int | {int})"); }
		@Test public void test_21601() { testValid("((int | any) | !int)","({any, int} | {int})"); }
		@Test public void test_21602() { testValid("((int | any) | !int)","((int & any) | {int})"); }
		@Test public void test_21603() { testValid("((int | any) | !int)","((any & int) | {int})"); }
		@Test public void test_21604() { testValid("((int | any) | !int)","((int & int) | {int})"); }
		@Test public void test_21605() { testValid("((int | any) | !int)","({any} | !any)"); }
		@Test public void test_21606() { testValid("((int | any) | !int)","({int} | !any)"); }
		@Test public void test_21607() { testValid("((int | any) | !int)","({any, any} | !any)"); }
		@Test public void test_21608() { testValid("((int | any) | !int)","({int, int} | !any)"); }
		@Test public void test_21609() { testValid("((int | any) | !int)","((any | any) | !any)"); }
		@Test public void test_21610() { testValid("((int | any) | !int)","((int | any) | !any)"); }
		@Test public void test_21611() { testValid("((int | any) | !int)","((int | int) | !any)"); }
		@Test public void test_21612() { testValid("((int | any) | !int)","((int & int) | !any)"); }
		@Test public void test_21613() { testValid("((int | any) | !int)","(!int | !int)"); }
		@Test public void test_21614() { testValid("((int | any) | !int)","({any, any} | !int)"); }
		@Test public void test_21615() { testValid("((int | any) | !int)","({int, int} | !int)"); }
		@Test public void test_21616() { testValid("((int | any) | !int)","((int | any) | !int)"); }
		@Test public void test_21617() { testValid("((int | any) | !int)","((any | int) | !int)"); }
		@Test public void test_21618() { testValid("((int | any) | !int)","((any & int) | !int)"); }
		@Test public void test_21619() { testValid("((int | any) | !int)","((int & int) | !int)"); }
		@Test public void test_21620() { testValid("((int | any) | !int)","({int} | {any, any})"); }
		@Test public void test_21621() { testValid("((int | any) | !int)","(!any | {any, any})"); }
		@Test public void test_21622() { testValid("((int | any) | !int)","(!int | {any, any})"); }
		@Test public void test_21623() { testValid("((int | any) | !int)","({any, int} | {any, any})"); }
		@Test public void test_21624() { testValid("((int | any) | !int)","((int | any) | {any, any})"); }
		@Test public void test_21625() { testValid("((int | any) | !int)","((any & any) | {any, any})"); }
		@Test public void test_21626() { testValid("((int | any) | !int)","((any & int) | {any, any})"); }
		@Test public void test_21627() { testValid("((int | any) | !int)","(!int | {int, any})"); }
		@Test public void test_21628() { testValid("((int | any) | !int)","({any, int} | {int, any})"); }
		@Test public void test_21629() { testValid("((int | any) | !int)","((any | any) | {int, any})"); }
		@Test public void test_21630() { testValid("((int | any) | !int)","((int | any) | {int, any})"); }
		@Test public void test_21631() { testValid("((int | any) | !int)","((any | int) | {int, any})"); }
		@Test public void test_21632() { testValid("((int | any) | !int)","((int & any) | {int, any})"); }
		@Test public void test_21633() { testValid("((int | any) | !int)","({any} | {any, int})"); }
		@Test public void test_21634() { testValid("((int | any) | !int)","(!int | {any, int})"); }
		@Test public void test_21635() { testValid("((int | any) | !int)","({any, int} | {any, int})"); }
		@Test public void test_21636() { testValid("((int | any) | !int)","((any | any) | {any, int})"); }
		@Test public void test_21637() { testValid("((int | any) | !int)","((any | int) | {any, int})"); }
		@Test public void test_21638() { testValid("((int | any) | !int)","((int | int) | {any, int})"); }
		@Test public void test_21639() { testValid("((int | any) | !int)","((int & any) | {any, int})"); }
		@Test public void test_21640() { testValid("((int | any) | !int)","(!any | {int, int})"); }
		@Test public void test_21641() { testValid("((int | any) | !int)","(!int | {int, int})"); }
		@Test public void test_21642() { testValid("((int | any) | !int)","({any, any} | {int, int})"); }
		@Test public void test_21643() { testValid("((int | any) | !int)","({any, int} | {int, int})"); }
		@Test public void test_21644() { testValid("((int | any) | !int)","((any | any) | {int, int})"); }
		@Test public void test_21645() { testValid("((int | any) | !int)","((int | int) | {int, int})"); }
		@Test public void test_21646() { testValid("((int | any) | !int)","((int & any) | {int, int})"); }
		@Test public void test_21647() { testValid("((int | any) | !int)","((any & int) | {int, int})"); }
		@Test public void test_21648() { testValid("((int | any) | !int)","((int & int) | {int, int})"); }
		@Test public void test_21649() { testValid("((int | any) | !int)","({any} | (any | any))"); }
		@Test public void test_21650() { testValid("((int | any) | !int)","(!any | (any | any))"); }
		@Test public void test_21651() { testValid("((int | any) | !int)","({any, any} | (any | any))"); }
		@Test public void test_21652() { testValid("((int | any) | !int)","({any, int} | (any | any))"); }
		@Test public void test_21653() { testValid("((int | any) | !int)","({int, int} | (any | any))"); }
		@Test public void test_21654() { testValid("((int | any) | !int)","((int | any) | (any | any))"); }
		@Test public void test_21655() { testValid("((int | any) | !int)","((any | int) | (any | any))"); }
		@Test public void test_21656() { testValid("((int | any) | !int)","((any & int) | (any | any))"); }
		@Test public void test_21657() { testValid("((int | any) | !int)","((int & int) | (any | any))"); }
		@Test public void test_21658() { testValid("((int | any) | !int)","({any} | (int | any))"); }
		@Test public void test_21659() { testValid("((int | any) | !int)","(!int | (int | any))"); }
		@Test public void test_21660() { testValid("((int | any) | !int)","({int, any} | (int | any))"); }
		@Test public void test_21661() { testValid("((int | any) | !int)","({any, int} | (int | any))"); }
		@Test public void test_21662() { testValid("((int | any) | !int)","((int & any) | (int | any))"); }
		@Test public void test_21663() { testValid("((int | any) | !int)","((any & int) | (int | any))"); }
		@Test public void test_21664() { testValid("((int | any) | !int)","({any} | (any | int))"); }
		@Test public void test_21665() { testValid("((int | any) | !int)","({int} | (any | int))"); }
		@Test public void test_21666() { testValid("((int | any) | !int)","(!any | (any | int))"); }
		@Test public void test_21667() { testValid("((int | any) | !int)","(!int | (any | int))"); }
		@Test public void test_21668() { testValid("((int | any) | !int)","({any, int} | (any | int))"); }
		@Test public void test_21669() { testValid("((int | any) | !int)","({int, int} | (any | int))"); }
		@Test public void test_21670() { testValid("((int | any) | !int)","((int | any) | (any | int))"); }
		@Test public void test_21671() { testValid("((int | any) | !int)","((any | int) | (any | int))"); }
		@Test public void test_21672() { testValid("((int | any) | !int)","((int | int) | (any | int))"); }
		@Test public void test_21673() { testValid("((int | any) | !int)","((any & any) | (any | int))"); }
		@Test public void test_21674() { testValid("((int | any) | !int)","({int} | (int | int))"); }
		@Test public void test_21675() { testValid("((int | any) | !int)","(!any | (int | int))"); }
		@Test public void test_21676() { testValid("((int | any) | !int)","(!int | (int | int))"); }
		@Test public void test_21677() { testValid("((int | any) | !int)","({int, any} | (int | int))"); }
		@Test public void test_21678() { testValid("((int | any) | !int)","({any, int} | (int | int))"); }
		@Test public void test_21679() { testValid("((int | any) | !int)","((any | int) | (int | int))"); }
		@Test public void test_21680() { testValid("((int | any) | !int)","((int | int) | (int | int))"); }
		@Test public void test_21681() { testValid("((int | any) | !int)","((any & any) | (int | int))"); }
		@Test public void test_21682() { testValid("((int | any) | !int)","((int & any) | (int | int))"); }
		@Test public void test_21683() { testValid("((int | any) | !int)","((int & int) | (int | int))"); }
		@Test public void test_21684() { testValid("((int | any) | !int)","(!any | (any & any))"); }
		@Test public void test_21685() { testValid("((int | any) | !int)","(!int | (any & any))"); }
		@Test public void test_21686() { testValid("((int | any) | !int)","({any, any} | (any & any))"); }
		@Test public void test_21687() { testValid("((int | any) | !int)","({int, any} | (any & any))"); }
		@Test public void test_21688() { testValid("((int | any) | !int)","({any, int} | (any & any))"); }
		@Test public void test_21689() { testValid("((int | any) | !int)","({int, int} | (any & any))"); }
		@Test public void test_21690() { testValid("((int | any) | !int)","((int | any) | (any & any))"); }
		@Test public void test_21691() { testValid("((int | any) | !int)","((int | int) | (any & any))"); }
		@Test public void test_21692() { testValid("((int | any) | !int)","((int & any) | (any & any))"); }
		@Test public void test_21693() { testValid("((int | any) | !int)","((any & int) | (any & any))"); }
		@Test public void test_21694() { testValid("((int | any) | !int)","((int & int) | (any & any))"); }
		@Test public void test_21695() { testValid("((int | any) | !int)","({any} | (int & any))"); }
		@Test public void test_21696() { testValid("((any | int) | !int)","{int}"); }
		@Test public void test_21697() { testValid("((any | int) | !int)","{any, any}"); }
		@Test public void test_21698() { testValid("((any | int) | !int)","{int, int}"); }
		@Test public void test_21699() { testValid("((any | int) | !int)","(any | int)"); }
		@Test public void test_21700() { testValid("((any | int) | !int)","(int & any)"); }
		@Test public void test_21701() { testValid("((any | int) | !int)","{{any}}"); }
		@Test public void test_21702() { testValid("((any | int) | !int)","{{int, any}}"); }
		@Test public void test_21703() { testValid("((any | int) | !int)","{{int, int}}"); }
		@Test public void test_21704() { testValid("((any | int) | !int)","{(any | int)}"); }
		@Test public void test_21705() { testValid("((any | int) | !int)","!{int, any}"); }
		@Test public void test_21706() { testValid("((any | int) | !int)","!{int, int}"); }
		@Test public void test_21707() { testValid("((any | int) | !int)","!(any | any)"); }
		@Test public void test_21708() { testValid("((any | int) | !int)","!(any & any)"); }
		@Test public void test_21709() { testValid("((any | int) | !int)","!(int & int)"); }
		@Test public void test_21710() { testValid("((any | int) | !int)","{{int}, {any}}"); }
		@Test public void test_21711() { testValid("((any | int) | !int)","{!int, {any}}"); }
		@Test public void test_21712() { testValid("((any | int) | !int)","{{int, int}, {any}}"); }
		@Test public void test_21713() { testValid("((any | int) | !int)","{(any | int), {any}}"); }
		@Test public void test_21714() { testValid("((any | int) | !int)","{!int, {int}}"); }
		@Test public void test_21715() { testValid("((any | int) | !int)","{{any, any}, {int}}"); }
		@Test public void test_21716() { testValid("((any | int) | !int)","{(any | any), {int}}"); }
		@Test public void test_21717() { testValid("((any | int) | !int)","{(any & any), {int}}"); }
		@Test public void test_21718() { testValid("((any | int) | !int)","{(any & int), {int}}"); }
		@Test public void test_21719() { testValid("((any | int) | !int)","{{any, any}, !int}"); }
		@Test public void test_21720() { testValid("((any | int) | !int)","{{any, int}, !int}"); }
		@Test public void test_21721() { testValid("((any | int) | !int)","{(any | any), !int}"); }
		@Test public void test_21722() { testValid("((any | int) | !int)","{(int | any), !int}"); }
		@Test public void test_21723() { testValid("((any | int) | !int)","{(any & any), !int}"); }
		@Test public void test_21724() { testValid("((any | int) | !int)","{(int & any), !int}"); }
		@Test public void test_21725() { testValid("((any | int) | !int)","{(int & int), !int}"); }
		@Test public void test_21726() { testValid("((any | int) | !int)","{{any}, {any, any}}"); }
		@Test public void test_21727() { testValid("((any | int) | !int)","{{int}, {any, any}}"); }
		@Test public void test_21728() { testValid("((any | int) | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_21729() { testValid("((any | int) | !int)","{(any | any), {any, any}}"); }
		@Test public void test_21730() { testValid("((any | int) | !int)","{(any | int), {any, any}}"); }
		@Test public void test_21731() { testValid("((any | int) | !int)","{!int, {int, any}}"); }
		@Test public void test_21732() { testValid("((any | int) | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_21733() { testValid("((any | int) | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_21734() { testValid("((any | int) | !int)","{(any & int), {int, any}}"); }
		@Test public void test_21735() { testValid("((any | int) | !int)","{{any}, {any, int}}"); }
		@Test public void test_21736() { testValid("((any | int) | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_21737() { testValid("((any | int) | !int)","{(int | int), {any, int}}"); }
		@Test public void test_21738() { testValid("((any | int) | !int)","{(any & int), {any, int}}"); }
		@Test public void test_21739() { testValid("((any | int) | !int)","{!int, {int, int}}"); }
		@Test public void test_21740() { testValid("((any | int) | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_21741() { testValid("((any | int) | !int)","{(any | any), {int, int}}"); }
		@Test public void test_21742() { testValid("((any | int) | !int)","{(int | any), {int, int}}"); }
		@Test public void test_21743() { testValid("((any | int) | !int)","{(int & any), {int, int}}"); }
		@Test public void test_21744() { testValid("((any | int) | !int)","{{int}, (any | any)}"); }
		@Test public void test_21745() { testValid("((any | int) | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_21746() { testValid("((any | int) | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_21747() { testValid("((any | int) | !int)","{(any | any), (any | any)}"); }
		@Test public void test_21748() { testValid("((any | int) | !int)","{(int | any), (any | any)}"); }
		@Test public void test_21749() { testValid("((any | int) | !int)","{(int & int), (any | any)}"); }
		@Test public void test_21750() { testValid("((any | int) | !int)","{!int, (int | any)}"); }
		@Test public void test_21751() { testValid("((any | int) | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_21752() { testValid("((any | int) | !int)","{(any | any), (int | any)}"); }
		@Test public void test_21753() { testValid("((any | int) | !int)","{(int | int), (int | any)}"); }
		@Test public void test_21754() { testValid("((any | int) | !int)","{{any}, (any | int)}"); }
		@Test public void test_21755() { testValid("((any | int) | !int)","{!int, (any | int)}"); }
		@Test public void test_21756() { testValid("((any | int) | !int)","{(any | any), (any | int)}"); }
		@Test public void test_21757() { testValid("((any | int) | !int)","{(any | int), (any | int)}"); }
		@Test public void test_21758() { testValid("((any | int) | !int)","{(any & int), (any | int)}"); }
		@Test public void test_21759() { testValid("((any | int) | !int)","{{int}, (int | int)}"); }
		@Test public void test_21760() { testValid("((any | int) | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_21761() { testValid("((any | int) | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_21762() { testValid("((any | int) | !int)","{{int}, (any & any)}"); }
		@Test public void test_21763() { testValid("((any | int) | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_21764() { testValid("((any | int) | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_21765() { testValid("((any | int) | !int)","{(int | any), (any & any)}"); }
		@Test public void test_21766() { testValid("((any | int) | !int)","{(any & any), (any & any)}"); }
		@Test public void test_21767() { testValid("((any | int) | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21768() { testValid("((any | int) | !int)","{{any}, (int & any)}"); }
		@Test public void test_21769() { testValid("((any | int) | !int)","{{int}, (int & any)}"); }
		@Test public void test_21770() { testValid("((any | int) | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21771() { testValid("((any | int) | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21772() { testValid("((any | int) | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21773() { testValid("((any | int) | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21774() { testValid("((any | int) | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21775() { testValid("((any | int) | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21776() { testValid("((any | int) | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21777() { testValid("((any | int) | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21778() { testValid("((any | int) | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21779() { testValid("((any | int) | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21780() { testValid("((any | int) | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21781() { testValid("((any | int) | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21782() { testValid("((any | int) | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21783() { testValid("((any | int) | !int)","(!int | {any})"); }
		@Test public void test_21784() { testValid("((any | int) | !int)","({any, any} | {any})"); }
		@Test public void test_21785() { testValid("((any | int) | !int)","((any | any) | {any})"); }
		@Test public void test_21786() { testValid("((any | int) | !int)","((int | any) | {any})"); }
		@Test public void test_21787() { testValid("((any | int) | !int)","((any & any) | {any})"); }
		@Test public void test_21788() { testValid("((any | int) | !int)","((int & any) | {any})"); }
		@Test public void test_21789() { testValid("((any | int) | !int)","((any & int) | {any})"); }
		@Test public void test_21790() { testValid("((any | int) | !int)","({int} | {int})"); }
		@Test public void test_21791() { testValid("((any | int) | !int)","(!any | {int})"); }
		@Test public void test_21792() { testValid("((any | int) | !int)","(!int | {int})"); }
		@Test public void test_21793() { testValid("((any | int) | !int)","({any, int} | {int})"); }
		@Test public void test_21794() { testValid("((any | int) | !int)","((int & any) | {int})"); }
		@Test public void test_21795() { testValid("((any | int) | !int)","((any & int) | {int})"); }
		@Test public void test_21796() { testValid("((any | int) | !int)","((int & int) | {int})"); }
		@Test public void test_21797() { testValid("((any | int) | !int)","({any} | !any)"); }
		@Test public void test_21798() { testValid("((any | int) | !int)","({int} | !any)"); }
		@Test public void test_21799() { testValid("((any | int) | !int)","({any, any} | !any)"); }
		@Test public void test_21800() { testValid("((any | int) | !int)","({int, int} | !any)"); }
		@Test public void test_21801() { testValid("((any | int) | !int)","((any | any) | !any)"); }
		@Test public void test_21802() { testValid("((any | int) | !int)","((int | any) | !any)"); }
		@Test public void test_21803() { testValid("((any | int) | !int)","((int | int) | !any)"); }
		@Test public void test_21804() { testValid("((any | int) | !int)","((int & int) | !any)"); }
		@Test public void test_21805() { testValid("((any | int) | !int)","(!int | !int)"); }
		@Test public void test_21806() { testValid("((any | int) | !int)","({any, any} | !int)"); }
		@Test public void test_21807() { testValid("((any | int) | !int)","({int, int} | !int)"); }
		@Test public void test_21808() { testValid("((any | int) | !int)","((int | any) | !int)"); }
		@Test public void test_21809() { testValid("((any | int) | !int)","((any | int) | !int)"); }
		@Test public void test_21810() { testValid("((any | int) | !int)","((any & int) | !int)"); }
		@Test public void test_21811() { testValid("((any | int) | !int)","((int & int) | !int)"); }
		@Test public void test_21812() { testValid("((any | int) | !int)","({int} | {any, any})"); }
		@Test public void test_21813() { testValid("((any | int) | !int)","(!any | {any, any})"); }
		@Test public void test_21814() { testValid("((any | int) | !int)","(!int | {any, any})"); }
		@Test public void test_21815() { testValid("((any | int) | !int)","({any, int} | {any, any})"); }
		@Test public void test_21816() { testValid("((any | int) | !int)","((int | any) | {any, any})"); }
		@Test public void test_21817() { testValid("((any | int) | !int)","((any & any) | {any, any})"); }
		@Test public void test_21818() { testValid("((any | int) | !int)","((any & int) | {any, any})"); }
		@Test public void test_21819() { testValid("((any | int) | !int)","(!int | {int, any})"); }
		@Test public void test_21820() { testValid("((any | int) | !int)","({any, int} | {int, any})"); }
		@Test public void test_21821() { testValid("((any | int) | !int)","((any | any) | {int, any})"); }
		@Test public void test_21822() { testValid("((any | int) | !int)","((int | any) | {int, any})"); }
		@Test public void test_21823() { testValid("((any | int) | !int)","((any | int) | {int, any})"); }
		@Test public void test_21824() { testValid("((any | int) | !int)","((int & any) | {int, any})"); }
		@Test public void test_21825() { testValid("((any | int) | !int)","({any} | {any, int})"); }
		@Test public void test_21826() { testValid("((any | int) | !int)","(!int | {any, int})"); }
		@Test public void test_21827() { testValid("((any | int) | !int)","({any, int} | {any, int})"); }
		@Test public void test_21828() { testValid("((any | int) | !int)","((any | any) | {any, int})"); }
		@Test public void test_21829() { testValid("((any | int) | !int)","((any | int) | {any, int})"); }
		@Test public void test_21830() { testValid("((any | int) | !int)","((int | int) | {any, int})"); }
		@Test public void test_21831() { testValid("((any | int) | !int)","((int & any) | {any, int})"); }
		@Test public void test_21832() { testValid("((any | int) | !int)","(!any | {int, int})"); }
		@Test public void test_21833() { testValid("((any | int) | !int)","(!int | {int, int})"); }
		@Test public void test_21834() { testValid("((any | int) | !int)","({any, any} | {int, int})"); }
		@Test public void test_21835() { testValid("((any | int) | !int)","({any, int} | {int, int})"); }
		@Test public void test_21836() { testValid("((any | int) | !int)","((any | any) | {int, int})"); }
		@Test public void test_21837() { testValid("((any | int) | !int)","((int | int) | {int, int})"); }
		@Test public void test_21838() { testValid("((any | int) | !int)","((int & any) | {int, int})"); }
		@Test public void test_21839() { testValid("((any | int) | !int)","((any & int) | {int, int})"); }
		@Test public void test_21840() { testValid("((any | int) | !int)","((int & int) | {int, int})"); }
		@Test public void test_21841() { testValid("((any | int) | !int)","({any} | (any | any))"); }
		@Test public void test_21842() { testValid("((any | int) | !int)","(!any | (any | any))"); }
		@Test public void test_21843() { testValid("((any | int) | !int)","({any, any} | (any | any))"); }
		@Test public void test_21844() { testValid("((any | int) | !int)","({any, int} | (any | any))"); }
		@Test public void test_21845() { testValid("((any | int) | !int)","({int, int} | (any | any))"); }
		@Test public void test_21846() { testValid("((any | int) | !int)","((int | any) | (any | any))"); }
		@Test public void test_21847() { testValid("((any | int) | !int)","((any | int) | (any | any))"); }
		@Test public void test_21848() { testValid("((any | int) | !int)","((any & int) | (any | any))"); }
		@Test public void test_21849() { testValid("((any | int) | !int)","((int & int) | (any | any))"); }
		@Test public void test_21850() { testValid("((any | int) | !int)","({any} | (int | any))"); }
		@Test public void test_21851() { testValid("((any | int) | !int)","(!int | (int | any))"); }
		@Test public void test_21852() { testValid("((any | int) | !int)","({int, any} | (int | any))"); }
		@Test public void test_21853() { testValid("((any | int) | !int)","({any, int} | (int | any))"); }
		@Test public void test_21854() { testValid("((any | int) | !int)","((int & any) | (int | any))"); }
		@Test public void test_21855() { testValid("((any | int) | !int)","((any & int) | (int | any))"); }
		@Test public void test_21856() { testValid("((any | int) | !int)","({any} | (any | int))"); }
		@Test public void test_21857() { testValid("((any | int) | !int)","({int} | (any | int))"); }
		@Test public void test_21858() { testValid("((any | int) | !int)","(!any | (any | int))"); }
		@Test public void test_21859() { testValid("((any | int) | !int)","(!int | (any | int))"); }
		@Test public void test_21860() { testValid("((any | int) | !int)","({any, int} | (any | int))"); }
		@Test public void test_21861() { testValid("((any | int) | !int)","({int, int} | (any | int))"); }
		@Test public void test_21862() { testValid("((any | int) | !int)","((int | any) | (any | int))"); }
		@Test public void test_21863() { testValid("((any | int) | !int)","((any | int) | (any | int))"); }
		@Test public void test_21864() { testValid("((any | int) | !int)","((int | int) | (any | int))"); }
		@Test public void test_21865() { testValid("((any | int) | !int)","((any & any) | (any | int))"); }
		@Test public void test_21866() { testValid("((any | int) | !int)","({int} | (int | int))"); }
		@Test public void test_21867() { testValid("((any | int) | !int)","(!any | (int | int))"); }
		@Test public void test_21868() { testValid("((any | int) | !int)","(!int | (int | int))"); }
		@Test public void test_21869() { testValid("((any | int) | !int)","({int, any} | (int | int))"); }
		@Test public void test_21870() { testValid("((any | int) | !int)","({any, int} | (int | int))"); }
		@Test public void test_21871() { testValid("((any | int) | !int)","((any | int) | (int | int))"); }
		@Test public void test_21872() { testValid("((any | int) | !int)","((int | int) | (int | int))"); }
		@Test public void test_21873() { testValid("((any | int) | !int)","((any & any) | (int | int))"); }
		@Test public void test_21874() { testValid("((any | int) | !int)","((int & any) | (int | int))"); }
		@Test public void test_21875() { testValid("((any | int) | !int)","((int & int) | (int | int))"); }
		@Test public void test_21876() { testValid("((any | int) | !int)","(!any | (any & any))"); }
		@Test public void test_21877() { testValid("((any | int) | !int)","(!int | (any & any))"); }
		@Test public void test_21878() { testValid("((any | int) | !int)","({any, any} | (any & any))"); }
		@Test public void test_21879() { testValid("((any | int) | !int)","({int, any} | (any & any))"); }
		@Test public void test_21880() { testValid("((any | int) | !int)","({any, int} | (any & any))"); }
		@Test public void test_21881() { testValid("((any | int) | !int)","({int, int} | (any & any))"); }
		@Test public void test_21882() { testValid("((any | int) | !int)","((int | any) | (any & any))"); }
		@Test public void test_21883() { testValid("((any | int) | !int)","((int | int) | (any & any))"); }
		@Test public void test_21884() { testValid("((any | int) | !int)","((int & any) | (any & any))"); }
		@Test public void test_21885() { testValid("((any | int) | !int)","((any & int) | (any & any))"); }
		@Test public void test_21886() { testValid("((any | int) | !int)","((int & int) | (any & any))"); }
		@Test public void test_21887() { testValid("((any | int) | !int)","({any} | (int & any))"); }
		@Test public void test_21888() { testValid("((any & int) | !int)","{int}"); }
		@Test public void test_21889() { testValid("((any & int) | !int)","{any, any}"); }
		@Test public void test_21890() { testValid("((any & int) | !int)","{int, int}"); }
		@Test public void test_21891() { testInvalid("((any & int) | !int)","(any | int)"); }
		@Test public void test_21892() { testValid("((any & int) | !int)","(int & any)"); }
		@Test public void test_21893() { testValid("((any & int) | !int)","{{any}}"); }
		@Test public void test_21894() { testValid("((any & int) | !int)","{{int, any}}"); }
		@Test public void test_21895() { testValid("((any & int) | !int)","{{int, int}}"); }
		@Test public void test_21896() { testValid("((any & int) | !int)","{(any | int)}"); }
		@Test public void test_21897() { testInvalid("((any & int) | !int)","!{int, any}"); }
		@Test public void test_21898() { testInvalid("((any & int) | !int)","!{int, int}"); }
		@Test public void test_21899() { testValid("((any & int) | !int)","!(any | any)"); }
		@Test public void test_21900() { testValid("((any & int) | !int)","!(any & any)"); }
		@Test public void test_21901() { testValid("((any & int) | !int)","!(int & int)"); }
		@Test public void test_21902() { testValid("((any & int) | !int)","{{int}, {any}}"); }
		@Test public void test_21903() { testValid("((any & int) | !int)","{!int, {any}}"); }
		@Test public void test_21904() { testValid("((any & int) | !int)","{{int, int}, {any}}"); }
		@Test public void test_21905() { testValid("((any & int) | !int)","{(any | int), {any}}"); }
		@Test public void test_21906() { testValid("((any & int) | !int)","{!int, {int}}"); }
		@Test public void test_21907() { testValid("((any & int) | !int)","{{any, any}, {int}}"); }
		@Test public void test_21908() { testValid("((any & int) | !int)","{(any | any), {int}}"); }
		@Test public void test_21909() { testValid("((any & int) | !int)","{(any & any), {int}}"); }
		@Test public void test_21910() { testValid("((any & int) | !int)","{(any & int), {int}}"); }
		@Test public void test_21911() { testValid("((any & int) | !int)","{{any, any}, !int}"); }
		@Test public void test_21912() { testValid("((any & int) | !int)","{{any, int}, !int}"); }
		@Test public void test_21913() { testValid("((any & int) | !int)","{(any | any), !int}"); }
		@Test public void test_21914() { testValid("((any & int) | !int)","{(int | any), !int}"); }
		@Test public void test_21915() { testValid("((any & int) | !int)","{(any & any), !int}"); }
		@Test public void test_21916() { testValid("((any & int) | !int)","{(int & any), !int}"); }
		@Test public void test_21917() { testValid("((any & int) | !int)","{(int & int), !int}"); }
		@Test public void test_21918() { testValid("((any & int) | !int)","{{any}, {any, any}}"); }
		@Test public void test_21919() { testValid("((any & int) | !int)","{{int}, {any, any}}"); }
		@Test public void test_21920() { testValid("((any & int) | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_21921() { testValid("((any & int) | !int)","{(any | any), {any, any}}"); }
		@Test public void test_21922() { testValid("((any & int) | !int)","{(any | int), {any, any}}"); }
		@Test public void test_21923() { testValid("((any & int) | !int)","{!int, {int, any}}"); }
		@Test public void test_21924() { testValid("((any & int) | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_21925() { testValid("((any & int) | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_21926() { testValid("((any & int) | !int)","{(any & int), {int, any}}"); }
		@Test public void test_21927() { testValid("((any & int) | !int)","{{any}, {any, int}}"); }
		@Test public void test_21928() { testValid("((any & int) | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_21929() { testValid("((any & int) | !int)","{(int | int), {any, int}}"); }
		@Test public void test_21930() { testValid("((any & int) | !int)","{(any & int), {any, int}}"); }
		@Test public void test_21931() { testValid("((any & int) | !int)","{!int, {int, int}}"); }
		@Test public void test_21932() { testValid("((any & int) | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_21933() { testValid("((any & int) | !int)","{(any | any), {int, int}}"); }
		@Test public void test_21934() { testValid("((any & int) | !int)","{(int | any), {int, int}}"); }
		@Test public void test_21935() { testValid("((any & int) | !int)","{(int & any), {int, int}}"); }
		@Test public void test_21936() { testValid("((any & int) | !int)","{{int}, (any | any)}"); }
		@Test public void test_21937() { testValid("((any & int) | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_21938() { testValid("((any & int) | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_21939() { testValid("((any & int) | !int)","{(any | any), (any | any)}"); }
		@Test public void test_21940() { testValid("((any & int) | !int)","{(int | any), (any | any)}"); }
		@Test public void test_21941() { testValid("((any & int) | !int)","{(int & int), (any | any)}"); }
		@Test public void test_21942() { testValid("((any & int) | !int)","{!int, (int | any)}"); }
		@Test public void test_21943() { testValid("((any & int) | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_21944() { testValid("((any & int) | !int)","{(any | any), (int | any)}"); }
		@Test public void test_21945() { testValid("((any & int) | !int)","{(int | int), (int | any)}"); }
		@Test public void test_21946() { testValid("((any & int) | !int)","{{any}, (any | int)}"); }
		@Test public void test_21947() { testValid("((any & int) | !int)","{!int, (any | int)}"); }
		@Test public void test_21948() { testValid("((any & int) | !int)","{(any | any), (any | int)}"); }
		@Test public void test_21949() { testValid("((any & int) | !int)","{(any | int), (any | int)}"); }
		@Test public void test_21950() { testValid("((any & int) | !int)","{(any & int), (any | int)}"); }
		@Test public void test_21951() { testValid("((any & int) | !int)","{{int}, (int | int)}"); }
		@Test public void test_21952() { testValid("((any & int) | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_21953() { testValid("((any & int) | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_21954() { testValid("((any & int) | !int)","{{int}, (any & any)}"); }
		@Test public void test_21955() { testValid("((any & int) | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_21956() { testValid("((any & int) | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_21957() { testValid("((any & int) | !int)","{(int | any), (any & any)}"); }
		@Test public void test_21958() { testValid("((any & int) | !int)","{(any & any), (any & any)}"); }
		@Test public void test_21959() { testValid("((any & int) | !int)","{(int & any), (any & any)}"); }
		@Test public void test_21960() { testValid("((any & int) | !int)","{{any}, (int & any)}"); }
		@Test public void test_21961() { testValid("((any & int) | !int)","{{int}, (int & any)}"); }
		@Test public void test_21962() { testValid("((any & int) | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_21963() { testValid("((any & int) | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_21964() { testValid("((any & int) | !int)","{(any | int), (int & any)}"); }
		@Test public void test_21965() { testValid("((any & int) | !int)","{(any & any), (int & any)}"); }
		@Test public void test_21966() { testValid("((any & int) | !int)","{(int & any), (int & any)}"); }
		@Test public void test_21967() { testValid("((any & int) | !int)","{(int & int), (int & any)}"); }
		@Test public void test_21968() { testValid("((any & int) | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_21969() { testValid("((any & int) | !int)","{(any & any), (any & int)}"); }
		@Test public void test_21970() { testValid("((any & int) | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_21971() { testValid("((any & int) | !int)","{(int | int), (int & int)}"); }
		@Test public void test_21972() { testValid("((any & int) | !int)","{(any & any), (int & int)}"); }
		@Test public void test_21973() { testValid("((any & int) | !int)","{(any & int), (int & int)}"); }
		@Test public void test_21974() { testValid("((any & int) | !int)","{(int & int), (int & int)}"); }
		@Test public void test_21975() { testValid("((any & int) | !int)","(!int | {any})"); }
		@Test public void test_21976() { testValid("((any & int) | !int)","({any, any} | {any})"); }
		@Test public void test_21977() { testInvalid("((any & int) | !int)","((any | any) | {any})"); }
		@Test public void test_21978() { testInvalid("((any & int) | !int)","((int | any) | {any})"); }
		@Test public void test_21979() { testInvalid("((any & int) | !int)","((any & any) | {any})"); }
		@Test public void test_21980() { testValid("((any & int) | !int)","((int & any) | {any})"); }
		@Test public void test_21981() { testValid("((any & int) | !int)","((any & int) | {any})"); }
		@Test public void test_21982() { testValid("((any & int) | !int)","({int} | {int})"); }
		@Test public void test_21983() { testValid("((any & int) | !int)","(!any | {int})"); }
		@Test public void test_21984() { testValid("((any & int) | !int)","(!int | {int})"); }
		@Test public void test_21985() { testValid("((any & int) | !int)","({any, int} | {int})"); }
		@Test public void test_21986() { testValid("((any & int) | !int)","((int & any) | {int})"); }
		@Test public void test_21987() { testValid("((any & int) | !int)","((any & int) | {int})"); }
		@Test public void test_21988() { testValid("((any & int) | !int)","((int & int) | {int})"); }
		@Test public void test_21989() { testValid("((any & int) | !int)","({any} | !any)"); }
		@Test public void test_21990() { testValid("((any & int) | !int)","({int} | !any)"); }
		@Test public void test_21991() { testValid("((any & int) | !int)","({any, any} | !any)"); }
		@Test public void test_21992() { testValid("((any & int) | !int)","({int, int} | !any)"); }
		@Test public void test_21993() { testInvalid("((any & int) | !int)","((any | any) | !any)"); }
		@Test public void test_21994() { testInvalid("((any & int) | !int)","((int | any) | !any)"); }
		@Test public void test_21995() { testValid("((any & int) | !int)","((int | int) | !any)"); }
		@Test public void test_21996() { testValid("((any & int) | !int)","((int & int) | !any)"); }
		@Test public void test_21997() { testValid("((any & int) | !int)","(!int | !int)"); }
		@Test public void test_21998() { testValid("((any & int) | !int)","({any, any} | !int)"); }
		@Test public void test_21999() { testValid("((any & int) | !int)","({int, int} | !int)"); }
		@Test public void test_22000() { testInvalid("((any & int) | !int)","((int | any) | !int)"); }
		@Test public void test_22001() { testInvalid("((any & int) | !int)","((any | int) | !int)"); }
		@Test public void test_22002() { testValid("((any & int) | !int)","((any & int) | !int)"); }
		@Test public void test_22003() { testValid("((any & int) | !int)","((int & int) | !int)"); }
		@Test public void test_22004() { testValid("((any & int) | !int)","({int} | {any, any})"); }
		@Test public void test_22005() { testValid("((any & int) | !int)","(!any | {any, any})"); }
		@Test public void test_22006() { testValid("((any & int) | !int)","(!int | {any, any})"); }
		@Test public void test_22007() { testValid("((any & int) | !int)","({any, int} | {any, any})"); }
		@Test public void test_22008() { testInvalid("((any & int) | !int)","((int | any) | {any, any})"); }
		@Test public void test_22009() { testInvalid("((any & int) | !int)","((any & any) | {any, any})"); }
		@Test public void test_22010() { testValid("((any & int) | !int)","((any & int) | {any, any})"); }
		@Test public void test_22011() { testValid("((any & int) | !int)","(!int | {int, any})"); }
		@Test public void test_22012() { testValid("((any & int) | !int)","({any, int} | {int, any})"); }
		@Test public void test_22013() { testInvalid("((any & int) | !int)","((any | any) | {int, any})"); }
		@Test public void test_22014() { testInvalid("((any & int) | !int)","((int | any) | {int, any})"); }
		@Test public void test_22015() { testInvalid("((any & int) | !int)","((any | int) | {int, any})"); }
		@Test public void test_22016() { testValid("((any & int) | !int)","((int & any) | {int, any})"); }
		@Test public void test_22017() { testValid("((any & int) | !int)","({any} | {any, int})"); }
		@Test public void test_22018() { testValid("((any & int) | !int)","(!int | {any, int})"); }
		@Test public void test_22019() { testValid("((any & int) | !int)","({any, int} | {any, int})"); }
		@Test public void test_22020() { testInvalid("((any & int) | !int)","((any | any) | {any, int})"); }
		@Test public void test_22021() { testInvalid("((any & int) | !int)","((any | int) | {any, int})"); }
		@Test public void test_22022() { testValid("((any & int) | !int)","((int | int) | {any, int})"); }
		@Test public void test_22023() { testValid("((any & int) | !int)","((int & any) | {any, int})"); }
		@Test public void test_22024() { testValid("((any & int) | !int)","(!any | {int, int})"); }
		@Test public void test_22025() { testValid("((any & int) | !int)","(!int | {int, int})"); }
		@Test public void test_22026() { testValid("((any & int) | !int)","({any, any} | {int, int})"); }
		@Test public void test_22027() { testValid("((any & int) | !int)","({any, int} | {int, int})"); }
		@Test public void test_22028() { testInvalid("((any & int) | !int)","((any | any) | {int, int})"); }
		@Test public void test_22029() { testValid("((any & int) | !int)","((int | int) | {int, int})"); }
		@Test public void test_22030() { testValid("((any & int) | !int)","((int & any) | {int, int})"); }
		@Test public void test_22031() { testValid("((any & int) | !int)","((any & int) | {int, int})"); }
		@Test public void test_22032() { testValid("((any & int) | !int)","((int & int) | {int, int})"); }
		@Test public void test_22033() { testInvalid("((any & int) | !int)","({any} | (any | any))"); }
		@Test public void test_22034() { testInvalid("((any & int) | !int)","(!any | (any | any))"); }
		@Test public void test_22035() { testInvalid("((any & int) | !int)","({any, any} | (any | any))"); }
		@Test public void test_22036() { testInvalid("((any & int) | !int)","({any, int} | (any | any))"); }
		@Test public void test_22037() { testInvalid("((any & int) | !int)","({int, int} | (any | any))"); }
		@Test public void test_22038() { testInvalid("((any & int) | !int)","((int | any) | (any | any))"); }
		@Test public void test_22039() { testInvalid("((any & int) | !int)","((any | int) | (any | any))"); }
		@Test public void test_22040() { testInvalid("((any & int) | !int)","((any & int) | (any | any))"); }
		@Test public void test_22041() { testInvalid("((any & int) | !int)","((int & int) | (any | any))"); }
		@Test public void test_22042() { testInvalid("((any & int) | !int)","({any} | (int | any))"); }
		@Test public void test_22043() { testInvalid("((any & int) | !int)","(!int | (int | any))"); }
		@Test public void test_22044() { testInvalid("((any & int) | !int)","({int, any} | (int | any))"); }
		@Test public void test_22045() { testInvalid("((any & int) | !int)","({any, int} | (int | any))"); }
		@Test public void test_22046() { testInvalid("((any & int) | !int)","((int & any) | (int | any))"); }
		@Test public void test_22047() { testInvalid("((any & int) | !int)","((any & int) | (int | any))"); }
		@Test public void test_22048() { testInvalid("((any & int) | !int)","({any} | (any | int))"); }
		@Test public void test_22049() { testInvalid("((any & int) | !int)","({int} | (any | int))"); }
		@Test public void test_22050() { testInvalid("((any & int) | !int)","(!any | (any | int))"); }
		@Test public void test_22051() { testInvalid("((any & int) | !int)","(!int | (any | int))"); }
		@Test public void test_22052() { testInvalid("((any & int) | !int)","({any, int} | (any | int))"); }
		@Test public void test_22053() { testInvalid("((any & int) | !int)","({int, int} | (any | int))"); }
		@Test public void test_22054() { testInvalid("((any & int) | !int)","((int | any) | (any | int))"); }
		@Test public void test_22055() { testInvalid("((any & int) | !int)","((any | int) | (any | int))"); }
		@Test public void test_22056() { testInvalid("((any & int) | !int)","((int | int) | (any | int))"); }
		@Test public void test_22057() { testInvalid("((any & int) | !int)","((any & any) | (any | int))"); }
		@Test public void test_22058() { testValid("((any & int) | !int)","({int} | (int | int))"); }
		@Test public void test_22059() { testValid("((any & int) | !int)","(!any | (int | int))"); }
		@Test public void test_22060() { testValid("((any & int) | !int)","(!int | (int | int))"); }
		@Test public void test_22061() { testValid("((any & int) | !int)","({int, any} | (int | int))"); }
		@Test public void test_22062() { testValid("((any & int) | !int)","({any, int} | (int | int))"); }
		@Test public void test_22063() { testInvalid("((any & int) | !int)","((any | int) | (int | int))"); }
		@Test public void test_22064() { testValid("((any & int) | !int)","((int | int) | (int | int))"); }
		@Test public void test_22065() { testInvalid("((any & int) | !int)","((any & any) | (int | int))"); }
		@Test public void test_22066() { testValid("((any & int) | !int)","((int & any) | (int | int))"); }
		@Test public void test_22067() { testValid("((any & int) | !int)","((int & int) | (int | int))"); }
		@Test public void test_22068() { testInvalid("((any & int) | !int)","(!any | (any & any))"); }
		@Test public void test_22069() { testInvalid("((any & int) | !int)","(!int | (any & any))"); }
		@Test public void test_22070() { testInvalid("((any & int) | !int)","({any, any} | (any & any))"); }
		@Test public void test_22071() { testInvalid("((any & int) | !int)","({int, any} | (any & any))"); }
		@Test public void test_22072() { testInvalid("((any & int) | !int)","({any, int} | (any & any))"); }
		@Test public void test_22073() { testInvalid("((any & int) | !int)","({int, int} | (any & any))"); }
		@Test public void test_22074() { testInvalid("((any & int) | !int)","((int | any) | (any & any))"); }
		@Test public void test_22075() { testInvalid("((any & int) | !int)","((int | int) | (any & any))"); }
		@Test public void test_22076() { testInvalid("((any & int) | !int)","((int & any) | (any & any))"); }
		@Test public void test_22077() { testInvalid("((any & int) | !int)","((any & int) | (any & any))"); }
		@Test public void test_22078() { testInvalid("((any & int) | !int)","((int & int) | (any & any))"); }
		@Test public void test_22079() { testValid("((any & int) | !int)","({any} | (int & any))"); }
		@Test public void test_22080() { testValid("((int & int) | !int)","{int}"); }
		@Test public void test_22081() { testValid("((int & int) | !int)","{any, any}"); }
		@Test public void test_22082() { testValid("((int & int) | !int)","{int, int}"); }
		@Test public void test_22083() { testInvalid("((int & int) | !int)","(any | int)"); }
		@Test public void test_22084() { testValid("((int & int) | !int)","(int & any)"); }
		@Test public void test_22085() { testValid("((int & int) | !int)","{{any}}"); }
		@Test public void test_22086() { testValid("((int & int) | !int)","{{int, any}}"); }
		@Test public void test_22087() { testValid("((int & int) | !int)","{{int, int}}"); }
		@Test public void test_22088() { testValid("((int & int) | !int)","{(any | int)}"); }
		@Test public void test_22089() { testInvalid("((int & int) | !int)","!{int, any}"); }
		@Test public void test_22090() { testInvalid("((int & int) | !int)","!{int, int}"); }
		@Test public void test_22091() { testValid("((int & int) | !int)","!(any | any)"); }
		@Test public void test_22092() { testValid("((int & int) | !int)","!(any & any)"); }
		@Test public void test_22093() { testValid("((int & int) | !int)","!(int & int)"); }
		@Test public void test_22094() { testValid("((int & int) | !int)","{{int}, {any}}"); }
		@Test public void test_22095() { testValid("((int & int) | !int)","{!int, {any}}"); }
		@Test public void test_22096() { testValid("((int & int) | !int)","{{int, int}, {any}}"); }
		@Test public void test_22097() { testValid("((int & int) | !int)","{(any | int), {any}}"); }
		@Test public void test_22098() { testValid("((int & int) | !int)","{!int, {int}}"); }
		@Test public void test_22099() { testValid("((int & int) | !int)","{{any, any}, {int}}"); }
		@Test public void test_22100() { testValid("((int & int) | !int)","{(any | any), {int}}"); }
		@Test public void test_22101() { testValid("((int & int) | !int)","{(any & any), {int}}"); }
		@Test public void test_22102() { testValid("((int & int) | !int)","{(any & int), {int}}"); }
		@Test public void test_22103() { testValid("((int & int) | !int)","{{any, any}, !int}"); }
		@Test public void test_22104() { testValid("((int & int) | !int)","{{any, int}, !int}"); }
		@Test public void test_22105() { testValid("((int & int) | !int)","{(any | any), !int}"); }
		@Test public void test_22106() { testValid("((int & int) | !int)","{(int | any), !int}"); }
		@Test public void test_22107() { testValid("((int & int) | !int)","{(any & any), !int}"); }
		@Test public void test_22108() { testValid("((int & int) | !int)","{(int & any), !int}"); }
		@Test public void test_22109() { testValid("((int & int) | !int)","{(int & int), !int}"); }
		@Test public void test_22110() { testValid("((int & int) | !int)","{{any}, {any, any}}"); }
		@Test public void test_22111() { testValid("((int & int) | !int)","{{int}, {any, any}}"); }
		@Test public void test_22112() { testValid("((int & int) | !int)","{{int, int}, {any, any}}"); }
		@Test public void test_22113() { testValid("((int & int) | !int)","{(any | any), {any, any}}"); }
		@Test public void test_22114() { testValid("((int & int) | !int)","{(any | int), {any, any}}"); }
		@Test public void test_22115() { testValid("((int & int) | !int)","{!int, {int, any}}"); }
		@Test public void test_22116() { testValid("((int & int) | !int)","{{int, any}, {int, any}}"); }
		@Test public void test_22117() { testValid("((int & int) | !int)","{{any, int}, {int, any}}"); }
		@Test public void test_22118() { testValid("((int & int) | !int)","{(any & int), {int, any}}"); }
		@Test public void test_22119() { testValid("((int & int) | !int)","{{any}, {any, int}}"); }
		@Test public void test_22120() { testValid("((int & int) | !int)","{{int, int}, {any, int}}"); }
		@Test public void test_22121() { testValid("((int & int) | !int)","{(int | int), {any, int}}"); }
		@Test public void test_22122() { testValid("((int & int) | !int)","{(any & int), {any, int}}"); }
		@Test public void test_22123() { testValid("((int & int) | !int)","{!int, {int, int}}"); }
		@Test public void test_22124() { testValid("((int & int) | !int)","{{int, int}, {int, int}}"); }
		@Test public void test_22125() { testValid("((int & int) | !int)","{(any | any), {int, int}}"); }
		@Test public void test_22126() { testValid("((int & int) | !int)","{(int | any), {int, int}}"); }
		@Test public void test_22127() { testValid("((int & int) | !int)","{(int & any), {int, int}}"); }
		@Test public void test_22128() { testValid("((int & int) | !int)","{{int}, (any | any)}"); }
		@Test public void test_22129() { testValid("((int & int) | !int)","{{int, any}, (any | any)}"); }
		@Test public void test_22130() { testValid("((int & int) | !int)","{{any, int}, (any | any)}"); }
		@Test public void test_22131() { testValid("((int & int) | !int)","{(any | any), (any | any)}"); }
		@Test public void test_22132() { testValid("((int & int) | !int)","{(int | any), (any | any)}"); }
		@Test public void test_22133() { testValid("((int & int) | !int)","{(int & int), (any | any)}"); }
		@Test public void test_22134() { testValid("((int & int) | !int)","{!int, (int | any)}"); }
		@Test public void test_22135() { testValid("((int & int) | !int)","{{int, int}, (int | any)}"); }
		@Test public void test_22136() { testValid("((int & int) | !int)","{(any | any), (int | any)}"); }
		@Test public void test_22137() { testValid("((int & int) | !int)","{(int | int), (int | any)}"); }
		@Test public void test_22138() { testValid("((int & int) | !int)","{{any}, (any | int)}"); }
		@Test public void test_22139() { testValid("((int & int) | !int)","{!int, (any | int)}"); }
		@Test public void test_22140() { testValid("((int & int) | !int)","{(any | any), (any | int)}"); }
		@Test public void test_22141() { testValid("((int & int) | !int)","{(any | int), (any | int)}"); }
		@Test public void test_22142() { testValid("((int & int) | !int)","{(any & int), (any | int)}"); }
		@Test public void test_22143() { testValid("((int & int) | !int)","{{int}, (int | int)}"); }
		@Test public void test_22144() { testValid("((int & int) | !int)","{{any, any}, (int | int)}"); }
		@Test public void test_22145() { testValid("((int & int) | !int)","{{int, int}, (int | int)}"); }
		@Test public void test_22146() { testValid("((int & int) | !int)","{{int}, (any & any)}"); }
		@Test public void test_22147() { testValid("((int & int) | !int)","{{int, any}, (any & any)}"); }
		@Test public void test_22148() { testValid("((int & int) | !int)","{{any, int}, (any & any)}"); }
		@Test public void test_22149() { testValid("((int & int) | !int)","{(int | any), (any & any)}"); }
		@Test public void test_22150() { testValid("((int & int) | !int)","{(any & any), (any & any)}"); }
		@Test public void test_22151() { testValid("((int & int) | !int)","{(int & any), (any & any)}"); }
		@Test public void test_22152() { testValid("((int & int) | !int)","{{any}, (int & any)}"); }
		@Test public void test_22153() { testValid("((int & int) | !int)","{{int}, (int & any)}"); }
		@Test public void test_22154() { testValid("((int & int) | !int)","{{any, any}, (int & any)}"); }
		@Test public void test_22155() { testValid("((int & int) | !int)","{{int, any}, (int & any)}"); }
		@Test public void test_22156() { testValid("((int & int) | !int)","{(any | int), (int & any)}"); }
		@Test public void test_22157() { testValid("((int & int) | !int)","{(any & any), (int & any)}"); }
		@Test public void test_22158() { testValid("((int & int) | !int)","{(int & any), (int & any)}"); }
		@Test public void test_22159() { testValid("((int & int) | !int)","{(int & int), (int & any)}"); }
		@Test public void test_22160() { testValid("((int & int) | !int)","{{int, any}, (any & int)}"); }
		@Test public void test_22161() { testValid("((int & int) | !int)","{(any & any), (any & int)}"); }
		@Test public void test_22162() { testValid("((int & int) | !int)","{{any, int}, (int & int)}"); }
		@Test public void test_22163() { testValid("((int & int) | !int)","{(int | int), (int & int)}"); }
		@Test public void test_22164() { testValid("((int & int) | !int)","{(any & any), (int & int)}"); }
		@Test public void test_22165() { testValid("((int & int) | !int)","{(any & int), (int & int)}"); }
		@Test public void test_22166() { testValid("((int & int) | !int)","{(int & int), (int & int)}"); }
		@Test public void test_22167() { testValid("((int & int) | !int)","(!int | {any})"); }
		@Test public void test_22168() { testValid("((int & int) | !int)","({any, any} | {any})"); }
		@Test public void test_22169() { testInvalid("((int & int) | !int)","((any | any) | {any})"); }
		@Test public void test_22170() { testInvalid("((int & int) | !int)","((int | any) | {any})"); }
		@Test public void test_22171() { testInvalid("((int & int) | !int)","((any & any) | {any})"); }
		@Test public void test_22172() { testValid("((int & int) | !int)","((int & any) | {any})"); }
		@Test public void test_22173() { testValid("((int & int) | !int)","((any & int) | {any})"); }
		@Test public void test_22174() { testValid("((int & int) | !int)","({int} | {int})"); }
		@Test public void test_22175() { testValid("((int & int) | !int)","(!any | {int})"); }
		@Test public void test_22176() { testValid("((int & int) | !int)","(!int | {int})"); }
		@Test public void test_22177() { testValid("((int & int) | !int)","({any, int} | {int})"); }
		@Test public void test_22178() { testValid("((int & int) | !int)","((int & any) | {int})"); }
		@Test public void test_22179() { testValid("((int & int) | !int)","((any & int) | {int})"); }
		@Test public void test_22180() { testValid("((int & int) | !int)","((int & int) | {int})"); }
		@Test public void test_22181() { testValid("((int & int) | !int)","({any} | !any)"); }
		@Test public void test_22182() { testValid("((int & int) | !int)","({int} | !any)"); }
		@Test public void test_22183() { testValid("((int & int) | !int)","({any, any} | !any)"); }
		@Test public void test_22184() { testValid("((int & int) | !int)","({int, int} | !any)"); }
		@Test public void test_22185() { testInvalid("((int & int) | !int)","((any | any) | !any)"); }
		@Test public void test_22186() { testInvalid("((int & int) | !int)","((int | any) | !any)"); }
		@Test public void test_22187() { testValid("((int & int) | !int)","((int | int) | !any)"); }
		@Test public void test_22188() { testValid("((int & int) | !int)","((int & int) | !any)"); }
		@Test public void test_22189() { testValid("((int & int) | !int)","(!int | !int)"); }
		@Test public void test_22190() { testValid("((int & int) | !int)","({any, any} | !int)"); }
		@Test public void test_22191() { testValid("((int & int) | !int)","({int, int} | !int)"); }
		@Test public void test_22192() { testInvalid("((int & int) | !int)","((int | any) | !int)"); }
		@Test public void test_22193() { testInvalid("((int & int) | !int)","((any | int) | !int)"); }
		@Test public void test_22194() { testValid("((int & int) | !int)","((any & int) | !int)"); }
		@Test public void test_22195() { testValid("((int & int) | !int)","((int & int) | !int)"); }
		@Test public void test_22196() { testValid("((int & int) | !int)","({int} | {any, any})"); }
		@Test public void test_22197() { testValid("((int & int) | !int)","(!any | {any, any})"); }
		@Test public void test_22198() { testValid("((int & int) | !int)","(!int | {any, any})"); }
		@Test public void test_22199() { testValid("((int & int) | !int)","({any, int} | {any, any})"); }
		@Test public void test_22200() { testInvalid("((int & int) | !int)","((int | any) | {any, any})"); }
		@Test public void test_22201() { testInvalid("((int & int) | !int)","((any & any) | {any, any})"); }
		@Test public void test_22202() { testValid("((int & int) | !int)","((any & int) | {any, any})"); }
		@Test public void test_22203() { testValid("((int & int) | !int)","(!int | {int, any})"); }
		@Test public void test_22204() { testValid("((int & int) | !int)","({any, int} | {int, any})"); }
		@Test public void test_22205() { testInvalid("((int & int) | !int)","((any | any) | {int, any})"); }
		@Test public void test_22206() { testInvalid("((int & int) | !int)","((int | any) | {int, any})"); }
		@Test public void test_22207() { testInvalid("((int & int) | !int)","((any | int) | {int, any})"); }
		@Test public void test_22208() { testValid("((int & int) | !int)","((int & any) | {int, any})"); }
		@Test public void test_22209() { testValid("((int & int) | !int)","({any} | {any, int})"); }
		@Test public void test_22210() { testValid("((int & int) | !int)","(!int | {any, int})"); }
		@Test public void test_22211() { testValid("((int & int) | !int)","({any, int} | {any, int})"); }
		@Test public void test_22212() { testInvalid("((int & int) | !int)","((any | any) | {any, int})"); }
		@Test public void test_22213() { testInvalid("((int & int) | !int)","((any | int) | {any, int})"); }
		@Test public void test_22214() { testValid("((int & int) | !int)","((int | int) | {any, int})"); }
		@Test public void test_22215() { testValid("((int & int) | !int)","((int & any) | {any, int})"); }
		@Test public void test_22216() { testValid("((int & int) | !int)","(!any | {int, int})"); }
		@Test public void test_22217() { testValid("((int & int) | !int)","(!int | {int, int})"); }
		@Test public void test_22218() { testValid("((int & int) | !int)","({any, any} | {int, int})"); }
		@Test public void test_22219() { testValid("((int & int) | !int)","({any, int} | {int, int})"); }
		@Test public void test_22220() { testInvalid("((int & int) | !int)","((any | any) | {int, int})"); }
		@Test public void test_22221() { testValid("((int & int) | !int)","((int | int) | {int, int})"); }
		@Test public void test_22222() { testValid("((int & int) | !int)","((int & any) | {int, int})"); }
		@Test public void test_22223() { testValid("((int & int) | !int)","((any & int) | {int, int})"); }
		@Test public void test_22224() { testValid("((int & int) | !int)","((int & int) | {int, int})"); }
		@Test public void test_22225() { testInvalid("((int & int) | !int)","({any} | (any | any))"); }
		@Test public void test_22226() { testInvalid("((int & int) | !int)","(!any | (any | any))"); }
		@Test public void test_22227() { testInvalid("((int & int) | !int)","({any, any} | (any | any))"); }
		@Test public void test_22228() { testInvalid("((int & int) | !int)","({any, int} | (any | any))"); }
		@Test public void test_22229() { testInvalid("((int & int) | !int)","({int, int} | (any | any))"); }
		@Test public void test_22230() { testInvalid("((int & int) | !int)","((int | any) | (any | any))"); }
		@Test public void test_22231() { testInvalid("((int & int) | !int)","((any | int) | (any | any))"); }
		@Test public void test_22232() { testInvalid("((int & int) | !int)","((any & int) | (any | any))"); }
		@Test public void test_22233() { testInvalid("((int & int) | !int)","((int & int) | (any | any))"); }
		@Test public void test_22234() { testInvalid("((int & int) | !int)","({any} | (int | any))"); }
		@Test public void test_22235() { testInvalid("((int & int) | !int)","(!int | (int | any))"); }
		@Test public void test_22236() { testInvalid("((int & int) | !int)","({int, any} | (int | any))"); }
		@Test public void test_22237() { testInvalid("((int & int) | !int)","({any, int} | (int | any))"); }
		@Test public void test_22238() { testInvalid("((int & int) | !int)","((int & any) | (int | any))"); }
		@Test public void test_22239() { testInvalid("((int & int) | !int)","((any & int) | (int | any))"); }
		@Test public void test_22240() { testInvalid("((int & int) | !int)","({any} | (any | int))"); }
		@Test public void test_22241() { testInvalid("((int & int) | !int)","({int} | (any | int))"); }
		@Test public void test_22242() { testInvalid("((int & int) | !int)","(!any | (any | int))"); }
		@Test public void test_22243() { testInvalid("((int & int) | !int)","(!int | (any | int))"); }
		@Test public void test_22244() { testInvalid("((int & int) | !int)","({any, int} | (any | int))"); }
		@Test public void test_22245() { testInvalid("((int & int) | !int)","({int, int} | (any | int))"); }
		@Test public void test_22246() { testInvalid("((int & int) | !int)","((int | any) | (any | int))"); }
		@Test public void test_22247() { testInvalid("((int & int) | !int)","((any | int) | (any | int))"); }
		@Test public void test_22248() { testInvalid("((int & int) | !int)","((int | int) | (any | int))"); }
		@Test public void test_22249() { testInvalid("((int & int) | !int)","((any & any) | (any | int))"); }
		@Test public void test_22250() { testValid("((int & int) | !int)","({int} | (int | int))"); }
		@Test public void test_22251() { testValid("((int & int) | !int)","(!any | (int | int))"); }
		@Test public void test_22252() { testValid("((int & int) | !int)","(!int | (int | int))"); }
		@Test public void test_22253() { testValid("((int & int) | !int)","({int, any} | (int | int))"); }
		@Test public void test_22254() { testValid("((int & int) | !int)","({any, int} | (int | int))"); }
		@Test public void test_22255() { testInvalid("((int & int) | !int)","((any | int) | (int | int))"); }
		@Test public void test_22256() { testValid("((int & int) | !int)","((int | int) | (int | int))"); }
		@Test public void test_22257() { testInvalid("((int & int) | !int)","((any & any) | (int | int))"); }
		@Test public void test_22258() { testValid("((int & int) | !int)","((int & any) | (int | int))"); }
		@Test public void test_22259() { testValid("((int & int) | !int)","((int & int) | (int | int))"); }
		@Test public void test_22260() { testInvalid("((int & int) | !int)","(!any | (any & any))"); }
		@Test public void test_22261() { testInvalid("((int & int) | !int)","(!int | (any & any))"); }
		@Test public void test_22262() { testInvalid("((int & int) | !int)","({any, any} | (any & any))"); }
		@Test public void test_22263() { testInvalid("((int & int) | !int)","({int, any} | (any & any))"); }
		@Test public void test_22264() { testInvalid("((int & int) | !int)","({any, int} | (any & any))"); }
		@Test public void test_22265() { testInvalid("((int & int) | !int)","({int, int} | (any & any))"); }
		@Test public void test_22266() { testInvalid("((int & int) | !int)","((int | any) | (any & any))"); }
		@Test public void test_22267() { testInvalid("((int & int) | !int)","((int | int) | (any & any))"); }
		@Test public void test_22268() { testInvalid("((int & int) | !int)","((int & any) | (any & any))"); }
		@Test public void test_22269() { testInvalid("((int & int) | !int)","((any & int) | (any & any))"); }
		@Test public void test_22270() { testInvalid("((int & int) | !int)","((int & int) | (any & any))"); }
		@Test public void test_22271() { testValid("((int & int) | !int)","({any} | (int & any))"); }
		@Test public void test_22272() { testValid("({int} | {any, any})","{int}"); }
		@Test public void test_22273() { testValid("({int} | {any, any})","{any, any}"); }
		@Test public void test_22274() { testValid("({int} | {any, any})","{int, int}"); }
		@Test public void test_22275() { testInvalid("({int} | {any, any})","(any | int)"); }
		@Test public void test_22276() { testInvalid("({int} | {any, any})","(int & any)"); }
		@Test public void test_22277() { testInvalid("({int} | {any, any})","{{any}}"); }
		@Test public void test_22278() { testInvalid("({int} | {any, any})","{{int, any}}"); }
		@Test public void test_22279() { testInvalid("({int} | {any, any})","{{int, int}}"); }
		@Test public void test_22280() { testInvalid("({int} | {any, any})","{(any | int)}"); }
		@Test public void test_22281() { testInvalid("({int} | {any, any})","!{int, any}"); }
		@Test public void test_22282() { testInvalid("({int} | {any, any})","!{int, int}"); }
		@Test public void test_22283() { testValid("({int} | {any, any})","!(any | any)"); }
		@Test public void test_22284() { testValid("({int} | {any, any})","!(any & any)"); }
		@Test public void test_22285() { testInvalid("({int} | {any, any})","!(int & int)"); }
		@Test public void test_22286() { testValid("({int} | {any, any})","{{int}, {any}}"); }
		@Test public void test_22287() { testValid("({int} | {any, any})","{!int, {any}}"); }
		@Test public void test_22288() { testValid("({int} | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_22289() { testValid("({int} | {any, any})","{(any | int), {any}}"); }
		@Test public void test_22290() { testValid("({int} | {any, any})","{!int, {int}}"); }
		@Test public void test_22291() { testValid("({int} | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_22292() { testValid("({int} | {any, any})","{(any | any), {int}}"); }
		@Test public void test_22293() { testValid("({int} | {any, any})","{(any & any), {int}}"); }
		@Test public void test_22294() { testValid("({int} | {any, any})","{(any & int), {int}}"); }
		@Test public void test_22295() { testValid("({int} | {any, any})","{{any, any}, !int}"); }
		@Test public void test_22296() { testValid("({int} | {any, any})","{{any, int}, !int}"); }
		@Test public void test_22297() { testValid("({int} | {any, any})","{(any | any), !int}"); }
		@Test public void test_22298() { testValid("({int} | {any, any})","{(int | any), !int}"); }
		@Test public void test_22299() { testValid("({int} | {any, any})","{(any & any), !int}"); }
		@Test public void test_22300() { testValid("({int} | {any, any})","{(int & any), !int}"); }
		@Test public void test_22301() { testValid("({int} | {any, any})","{(int & int), !int}"); }
		@Test public void test_22302() { testValid("({int} | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_22303() { testValid("({int} | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_22304() { testValid("({int} | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_22305() { testValid("({int} | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_22306() { testValid("({int} | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_22307() { testValid("({int} | {any, any})","{!int, {int, any}}"); }
		@Test public void test_22308() { testValid("({int} | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_22309() { testValid("({int} | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_22310() { testValid("({int} | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_22311() { testValid("({int} | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_22312() { testValid("({int} | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_22313() { testValid("({int} | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_22314() { testValid("({int} | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_22315() { testValid("({int} | {any, any})","{!int, {int, int}}"); }
		@Test public void test_22316() { testValid("({int} | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_22317() { testValid("({int} | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_22318() { testValid("({int} | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_22319() { testValid("({int} | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_22320() { testValid("({int} | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_22321() { testValid("({int} | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_22322() { testValid("({int} | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_22323() { testValid("({int} | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_22324() { testValid("({int} | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_22325() { testValid("({int} | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_22326() { testValid("({int} | {any, any})","{!int, (int | any)}"); }
		@Test public void test_22327() { testValid("({int} | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_22328() { testValid("({int} | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_22329() { testValid("({int} | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_22330() { testValid("({int} | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_22331() { testValid("({int} | {any, any})","{!int, (any | int)}"); }
		@Test public void test_22332() { testValid("({int} | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_22333() { testValid("({int} | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_22334() { testValid("({int} | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_22335() { testValid("({int} | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_22336() { testValid("({int} | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_22337() { testValid("({int} | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_22338() { testValid("({int} | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_22339() { testValid("({int} | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_22340() { testValid("({int} | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_22341() { testValid("({int} | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_22342() { testValid("({int} | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_22343() { testValid("({int} | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_22344() { testValid("({int} | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_22345() { testValid("({int} | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_22346() { testValid("({int} | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_22347() { testValid("({int} | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_22348() { testValid("({int} | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_22349() { testValid("({int} | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_22350() { testValid("({int} | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_22351() { testValid("({int} | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_22352() { testValid("({int} | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_22353() { testValid("({int} | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_22354() { testValid("({int} | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_22355() { testValid("({int} | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_22356() { testValid("({int} | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_22357() { testValid("({int} | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_22358() { testValid("({int} | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_22359() { testInvalid("({int} | {any, any})","(!int | {any})"); }
		@Test public void test_22360() { testInvalid("({int} | {any, any})","({any, any} | {any})"); }
		@Test public void test_22361() { testInvalid("({int} | {any, any})","((any | any) | {any})"); }
		@Test public void test_22362() { testInvalid("({int} | {any, any})","((int | any) | {any})"); }
		@Test public void test_22363() { testInvalid("({int} | {any, any})","((any & any) | {any})"); }
		@Test public void test_22364() { testInvalid("({int} | {any, any})","((int & any) | {any})"); }
		@Test public void test_22365() { testInvalid("({int} | {any, any})","((any & int) | {any})"); }
		@Test public void test_22366() { testValid("({int} | {any, any})","({int} | {int})"); }
		@Test public void test_22367() { testValid("({int} | {any, any})","(!any | {int})"); }
		@Test public void test_22368() { testInvalid("({int} | {any, any})","(!int | {int})"); }
		@Test public void test_22369() { testValid("({int} | {any, any})","({any, int} | {int})"); }
		@Test public void test_22370() { testInvalid("({int} | {any, any})","((int & any) | {int})"); }
		@Test public void test_22371() { testInvalid("({int} | {any, any})","((any & int) | {int})"); }
		@Test public void test_22372() { testInvalid("({int} | {any, any})","((int & int) | {int})"); }
		@Test public void test_22373() { testInvalid("({int} | {any, any})","({any} | !any)"); }
		@Test public void test_22374() { testValid("({int} | {any, any})","({int} | !any)"); }
		@Test public void test_22375() { testValid("({int} | {any, any})","({any, any} | !any)"); }
		@Test public void test_22376() { testValid("({int} | {any, any})","({int, int} | !any)"); }
		@Test public void test_22377() { testInvalid("({int} | {any, any})","((any | any) | !any)"); }
		@Test public void test_22378() { testInvalid("({int} | {any, any})","((int | any) | !any)"); }
		@Test public void test_22379() { testInvalid("({int} | {any, any})","((int | int) | !any)"); }
		@Test public void test_22380() { testInvalid("({int} | {any, any})","((int & int) | !any)"); }
		@Test public void test_22381() { testInvalid("({int} | {any, any})","(!int | !int)"); }
		@Test public void test_22382() { testInvalid("({int} | {any, any})","({any, any} | !int)"); }
		@Test public void test_22383() { testInvalid("({int} | {any, any})","({int, int} | !int)"); }
		@Test public void test_22384() { testInvalid("({int} | {any, any})","((int | any) | !int)"); }
		@Test public void test_22385() { testInvalid("({int} | {any, any})","((any | int) | !int)"); }
		@Test public void test_22386() { testInvalid("({int} | {any, any})","((any & int) | !int)"); }
		@Test public void test_22387() { testInvalid("({int} | {any, any})","((int & int) | !int)"); }
		@Test public void test_22388() { testValid("({int} | {any, any})","({int} | {any, any})"); }
		@Test public void test_22389() { testValid("({int} | {any, any})","(!any | {any, any})"); }
		@Test public void test_22390() { testInvalid("({int} | {any, any})","(!int | {any, any})"); }
		@Test public void test_22391() { testValid("({int} | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_22392() { testInvalid("({int} | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_22393() { testInvalid("({int} | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_22394() { testInvalid("({int} | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_22395() { testInvalid("({int} | {any, any})","(!int | {int, any})"); }
		@Test public void test_22396() { testValid("({int} | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_22397() { testInvalid("({int} | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_22398() { testInvalid("({int} | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_22399() { testInvalid("({int} | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_22400() { testInvalid("({int} | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_22401() { testInvalid("({int} | {any, any})","({any} | {any, int})"); }
		@Test public void test_22402() { testInvalid("({int} | {any, any})","(!int | {any, int})"); }
		@Test public void test_22403() { testValid("({int} | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_22404() { testInvalid("({int} | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_22405() { testInvalid("({int} | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_22406() { testInvalid("({int} | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_22407() { testInvalid("({int} | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_22408() { testValid("({int} | {any, any})","(!any | {int, int})"); }
		@Test public void test_22409() { testInvalid("({int} | {any, any})","(!int | {int, int})"); }
		@Test public void test_22410() { testValid("({int} | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_22411() { testValid("({int} | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_22412() { testInvalid("({int} | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_22413() { testInvalid("({int} | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_22414() { testInvalid("({int} | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_22415() { testInvalid("({int} | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_22416() { testInvalid("({int} | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_22417() { testInvalid("({int} | {any, any})","({any} | (any | any))"); }
		@Test public void test_22418() { testInvalid("({int} | {any, any})","(!any | (any | any))"); }
		@Test public void test_22419() { testInvalid("({int} | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_22420() { testInvalid("({int} | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_22421() { testInvalid("({int} | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_22422() { testInvalid("({int} | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_22423() { testInvalid("({int} | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_22424() { testInvalid("({int} | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_22425() { testInvalid("({int} | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_22426() { testInvalid("({int} | {any, any})","({any} | (int | any))"); }
		@Test public void test_22427() { testInvalid("({int} | {any, any})","(!int | (int | any))"); }
		@Test public void test_22428() { testInvalid("({int} | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_22429() { testInvalid("({int} | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_22430() { testInvalid("({int} | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_22431() { testInvalid("({int} | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_22432() { testInvalid("({int} | {any, any})","({any} | (any | int))"); }
		@Test public void test_22433() { testInvalid("({int} | {any, any})","({int} | (any | int))"); }
		@Test public void test_22434() { testInvalid("({int} | {any, any})","(!any | (any | int))"); }
		@Test public void test_22435() { testInvalid("({int} | {any, any})","(!int | (any | int))"); }
		@Test public void test_22436() { testInvalid("({int} | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_22437() { testInvalid("({int} | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_22438() { testInvalid("({int} | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_22439() { testInvalid("({int} | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_22440() { testInvalid("({int} | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_22441() { testInvalid("({int} | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_22442() { testInvalid("({int} | {any, any})","({int} | (int | int))"); }
		@Test public void test_22443() { testInvalid("({int} | {any, any})","(!any | (int | int))"); }
		@Test public void test_22444() { testInvalid("({int} | {any, any})","(!int | (int | int))"); }
		@Test public void test_22445() { testInvalid("({int} | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_22446() { testInvalid("({int} | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_22447() { testInvalid("({int} | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_22448() { testInvalid("({int} | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_22449() { testInvalid("({int} | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_22450() { testInvalid("({int} | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_22451() { testInvalid("({int} | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_22452() { testInvalid("({int} | {any, any})","(!any | (any & any))"); }
		@Test public void test_22453() { testInvalid("({int} | {any, any})","(!int | (any & any))"); }
		@Test public void test_22454() { testInvalid("({int} | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_22455() { testInvalid("({int} | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_22456() { testInvalid("({int} | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_22457() { testInvalid("({int} | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_22458() { testInvalid("({int} | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_22459() { testInvalid("({int} | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_22460() { testInvalid("({int} | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_22461() { testInvalid("({int} | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_22462() { testInvalid("({int} | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_22463() { testInvalid("({int} | {any, any})","({any} | (int & any))"); }
		@Test public void test_22464() { testInvalid("(!any | {any, any})","{int}"); }
		@Test public void test_22465() { testValid("(!any | {any, any})","{any, any}"); }
		@Test public void test_22466() { testValid("(!any | {any, any})","{int, int}"); }
		@Test public void test_22467() { testInvalid("(!any | {any, any})","(any | int)"); }
		@Test public void test_22468() { testInvalid("(!any | {any, any})","(int & any)"); }
		@Test public void test_22469() { testInvalid("(!any | {any, any})","{{any}}"); }
		@Test public void test_22470() { testInvalid("(!any | {any, any})","{{int, any}}"); }
		@Test public void test_22471() { testInvalid("(!any | {any, any})","{{int, int}}"); }
		@Test public void test_22472() { testInvalid("(!any | {any, any})","{(any | int)}"); }
		@Test public void test_22473() { testInvalid("(!any | {any, any})","!{int, any}"); }
		@Test public void test_22474() { testInvalid("(!any | {any, any})","!{int, int}"); }
		@Test public void test_22475() { testValid("(!any | {any, any})","!(any | any)"); }
		@Test public void test_22476() { testValid("(!any | {any, any})","!(any & any)"); }
		@Test public void test_22477() { testInvalid("(!any | {any, any})","!(int & int)"); }
		@Test public void test_22478() { testValid("(!any | {any, any})","{{int}, {any}}"); }
		@Test public void test_22479() { testValid("(!any | {any, any})","{!int, {any}}"); }
		@Test public void test_22480() { testValid("(!any | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_22481() { testValid("(!any | {any, any})","{(any | int), {any}}"); }
		@Test public void test_22482() { testValid("(!any | {any, any})","{!int, {int}}"); }
		@Test public void test_22483() { testValid("(!any | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_22484() { testValid("(!any | {any, any})","{(any | any), {int}}"); }
		@Test public void test_22485() { testValid("(!any | {any, any})","{(any & any), {int}}"); }
		@Test public void test_22486() { testValid("(!any | {any, any})","{(any & int), {int}}"); }
		@Test public void test_22487() { testValid("(!any | {any, any})","{{any, any}, !int}"); }
		@Test public void test_22488() { testValid("(!any | {any, any})","{{any, int}, !int}"); }
		@Test public void test_22489() { testValid("(!any | {any, any})","{(any | any), !int}"); }
		@Test public void test_22490() { testValid("(!any | {any, any})","{(int | any), !int}"); }
		@Test public void test_22491() { testValid("(!any | {any, any})","{(any & any), !int}"); }
		@Test public void test_22492() { testValid("(!any | {any, any})","{(int & any), !int}"); }
		@Test public void test_22493() { testValid("(!any | {any, any})","{(int & int), !int}"); }
		@Test public void test_22494() { testValid("(!any | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_22495() { testValid("(!any | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_22496() { testValid("(!any | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_22497() { testValid("(!any | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_22498() { testValid("(!any | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_22499() { testValid("(!any | {any, any})","{!int, {int, any}}"); }
		@Test public void test_22500() { testValid("(!any | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_22501() { testValid("(!any | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_22502() { testValid("(!any | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_22503() { testValid("(!any | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_22504() { testValid("(!any | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_22505() { testValid("(!any | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_22506() { testValid("(!any | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_22507() { testValid("(!any | {any, any})","{!int, {int, int}}"); }
		@Test public void test_22508() { testValid("(!any | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_22509() { testValid("(!any | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_22510() { testValid("(!any | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_22511() { testValid("(!any | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_22512() { testValid("(!any | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_22513() { testValid("(!any | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_22514() { testValid("(!any | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_22515() { testValid("(!any | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_22516() { testValid("(!any | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_22517() { testValid("(!any | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_22518() { testValid("(!any | {any, any})","{!int, (int | any)}"); }
		@Test public void test_22519() { testValid("(!any | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_22520() { testValid("(!any | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_22521() { testValid("(!any | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_22522() { testValid("(!any | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_22523() { testValid("(!any | {any, any})","{!int, (any | int)}"); }
		@Test public void test_22524() { testValid("(!any | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_22525() { testValid("(!any | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_22526() { testValid("(!any | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_22527() { testValid("(!any | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_22528() { testValid("(!any | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_22529() { testValid("(!any | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_22530() { testValid("(!any | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_22531() { testValid("(!any | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_22532() { testValid("(!any | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_22533() { testValid("(!any | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_22534() { testValid("(!any | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_22535() { testValid("(!any | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_22536() { testValid("(!any | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_22537() { testValid("(!any | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_22538() { testValid("(!any | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_22539() { testValid("(!any | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_22540() { testValid("(!any | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_22541() { testValid("(!any | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_22542() { testValid("(!any | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_22543() { testValid("(!any | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_22544() { testValid("(!any | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_22545() { testValid("(!any | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_22546() { testValid("(!any | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_22547() { testValid("(!any | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_22548() { testValid("(!any | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_22549() { testValid("(!any | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_22550() { testValid("(!any | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_22551() { testInvalid("(!any | {any, any})","(!int | {any})"); }
		@Test public void test_22552() { testInvalid("(!any | {any, any})","({any, any} | {any})"); }
		@Test public void test_22553() { testInvalid("(!any | {any, any})","((any | any) | {any})"); }
		@Test public void test_22554() { testInvalid("(!any | {any, any})","((int | any) | {any})"); }
		@Test public void test_22555() { testInvalid("(!any | {any, any})","((any & any) | {any})"); }
		@Test public void test_22556() { testInvalid("(!any | {any, any})","((int & any) | {any})"); }
		@Test public void test_22557() { testInvalid("(!any | {any, any})","((any & int) | {any})"); }
		@Test public void test_22558() { testInvalid("(!any | {any, any})","({int} | {int})"); }
		@Test public void test_22559() { testInvalid("(!any | {any, any})","(!any | {int})"); }
		@Test public void test_22560() { testInvalid("(!any | {any, any})","(!int | {int})"); }
		@Test public void test_22561() { testInvalid("(!any | {any, any})","({any, int} | {int})"); }
		@Test public void test_22562() { testInvalid("(!any | {any, any})","((int & any) | {int})"); }
		@Test public void test_22563() { testInvalid("(!any | {any, any})","((any & int) | {int})"); }
		@Test public void test_22564() { testInvalid("(!any | {any, any})","((int & int) | {int})"); }
		@Test public void test_22565() { testInvalid("(!any | {any, any})","({any} | !any)"); }
		@Test public void test_22566() { testInvalid("(!any | {any, any})","({int} | !any)"); }
		@Test public void test_22567() { testValid("(!any | {any, any})","({any, any} | !any)"); }
		@Test public void test_22568() { testValid("(!any | {any, any})","({int, int} | !any)"); }
		@Test public void test_22569() { testInvalid("(!any | {any, any})","((any | any) | !any)"); }
		@Test public void test_22570() { testInvalid("(!any | {any, any})","((int | any) | !any)"); }
		@Test public void test_22571() { testInvalid("(!any | {any, any})","((int | int) | !any)"); }
		@Test public void test_22572() { testInvalid("(!any | {any, any})","((int & int) | !any)"); }
		@Test public void test_22573() { testInvalid("(!any | {any, any})","(!int | !int)"); }
		@Test public void test_22574() { testInvalid("(!any | {any, any})","({any, any} | !int)"); }
		@Test public void test_22575() { testInvalid("(!any | {any, any})","({int, int} | !int)"); }
		@Test public void test_22576() { testInvalid("(!any | {any, any})","((int | any) | !int)"); }
		@Test public void test_22577() { testInvalid("(!any | {any, any})","((any | int) | !int)"); }
		@Test public void test_22578() { testInvalid("(!any | {any, any})","((any & int) | !int)"); }
		@Test public void test_22579() { testInvalid("(!any | {any, any})","((int & int) | !int)"); }
		@Test public void test_22580() { testInvalid("(!any | {any, any})","({int} | {any, any})"); }
		@Test public void test_22581() { testValid("(!any | {any, any})","(!any | {any, any})"); }
		@Test public void test_22582() { testInvalid("(!any | {any, any})","(!int | {any, any})"); }
		@Test public void test_22583() { testValid("(!any | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_22584() { testInvalid("(!any | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_22585() { testInvalid("(!any | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_22586() { testInvalid("(!any | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_22587() { testInvalid("(!any | {any, any})","(!int | {int, any})"); }
		@Test public void test_22588() { testValid("(!any | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_22589() { testInvalid("(!any | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_22590() { testInvalid("(!any | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_22591() { testInvalid("(!any | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_22592() { testInvalid("(!any | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_22593() { testInvalid("(!any | {any, any})","({any} | {any, int})"); }
		@Test public void test_22594() { testInvalid("(!any | {any, any})","(!int | {any, int})"); }
		@Test public void test_22595() { testValid("(!any | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_22596() { testInvalid("(!any | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_22597() { testInvalid("(!any | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_22598() { testInvalid("(!any | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_22599() { testInvalid("(!any | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_22600() { testValid("(!any | {any, any})","(!any | {int, int})"); }
		@Test public void test_22601() { testInvalid("(!any | {any, any})","(!int | {int, int})"); }
		@Test public void test_22602() { testValid("(!any | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_22603() { testValid("(!any | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_22604() { testInvalid("(!any | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_22605() { testInvalid("(!any | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_22606() { testInvalid("(!any | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_22607() { testInvalid("(!any | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_22608() { testInvalid("(!any | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_22609() { testInvalid("(!any | {any, any})","({any} | (any | any))"); }
		@Test public void test_22610() { testInvalid("(!any | {any, any})","(!any | (any | any))"); }
		@Test public void test_22611() { testInvalid("(!any | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_22612() { testInvalid("(!any | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_22613() { testInvalid("(!any | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_22614() { testInvalid("(!any | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_22615() { testInvalid("(!any | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_22616() { testInvalid("(!any | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_22617() { testInvalid("(!any | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_22618() { testInvalid("(!any | {any, any})","({any} | (int | any))"); }
		@Test public void test_22619() { testInvalid("(!any | {any, any})","(!int | (int | any))"); }
		@Test public void test_22620() { testInvalid("(!any | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_22621() { testInvalid("(!any | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_22622() { testInvalid("(!any | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_22623() { testInvalid("(!any | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_22624() { testInvalid("(!any | {any, any})","({any} | (any | int))"); }
		@Test public void test_22625() { testInvalid("(!any | {any, any})","({int} | (any | int))"); }
		@Test public void test_22626() { testInvalid("(!any | {any, any})","(!any | (any | int))"); }
		@Test public void test_22627() { testInvalid("(!any | {any, any})","(!int | (any | int))"); }
		@Test public void test_22628() { testInvalid("(!any | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_22629() { testInvalid("(!any | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_22630() { testInvalid("(!any | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_22631() { testInvalid("(!any | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_22632() { testInvalid("(!any | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_22633() { testInvalid("(!any | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_22634() { testInvalid("(!any | {any, any})","({int} | (int | int))"); }
		@Test public void test_22635() { testInvalid("(!any | {any, any})","(!any | (int | int))"); }
		@Test public void test_22636() { testInvalid("(!any | {any, any})","(!int | (int | int))"); }
		@Test public void test_22637() { testInvalid("(!any | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_22638() { testInvalid("(!any | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_22639() { testInvalid("(!any | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_22640() { testInvalid("(!any | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_22641() { testInvalid("(!any | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_22642() { testInvalid("(!any | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_22643() { testInvalid("(!any | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_22644() { testInvalid("(!any | {any, any})","(!any | (any & any))"); }
		@Test public void test_22645() { testInvalid("(!any | {any, any})","(!int | (any & any))"); }
		@Test public void test_22646() { testInvalid("(!any | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_22647() { testInvalid("(!any | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_22648() { testInvalid("(!any | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_22649() { testInvalid("(!any | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_22650() { testInvalid("(!any | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_22651() { testInvalid("(!any | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_22652() { testInvalid("(!any | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_22653() { testInvalid("(!any | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_22654() { testInvalid("(!any | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_22655() { testInvalid("(!any | {any, any})","({any} | (int & any))"); }
		@Test public void test_22656() { testValid("(!int | {any, any})","{int}"); }
		@Test public void test_22657() { testValid("(!int | {any, any})","{any, any}"); }
		@Test public void test_22658() { testValid("(!int | {any, any})","{int, int}"); }
		@Test public void test_22659() { testInvalid("(!int | {any, any})","(any | int)"); }
		@Test public void test_22660() { testInvalid("(!int | {any, any})","(int & any)"); }
		@Test public void test_22661() { testValid("(!int | {any, any})","{{any}}"); }
		@Test public void test_22662() { testValid("(!int | {any, any})","{{int, any}}"); }
		@Test public void test_22663() { testValid("(!int | {any, any})","{{int, int}}"); }
		@Test public void test_22664() { testValid("(!int | {any, any})","{(any | int)}"); }
		@Test public void test_22665() { testInvalid("(!int | {any, any})","!{int, any}"); }
		@Test public void test_22666() { testInvalid("(!int | {any, any})","!{int, int}"); }
		@Test public void test_22667() { testValid("(!int | {any, any})","!(any | any)"); }
		@Test public void test_22668() { testValid("(!int | {any, any})","!(any & any)"); }
		@Test public void test_22669() { testValid("(!int | {any, any})","!(int & int)"); }
		@Test public void test_22670() { testValid("(!int | {any, any})","{{int}, {any}}"); }
		@Test public void test_22671() { testValid("(!int | {any, any})","{!int, {any}}"); }
		@Test public void test_22672() { testValid("(!int | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_22673() { testValid("(!int | {any, any})","{(any | int), {any}}"); }
		@Test public void test_22674() { testValid("(!int | {any, any})","{!int, {int}}"); }
		@Test public void test_22675() { testValid("(!int | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_22676() { testValid("(!int | {any, any})","{(any | any), {int}}"); }
		@Test public void test_22677() { testValid("(!int | {any, any})","{(any & any), {int}}"); }
		@Test public void test_22678() { testValid("(!int | {any, any})","{(any & int), {int}}"); }
		@Test public void test_22679() { testValid("(!int | {any, any})","{{any, any}, !int}"); }
		@Test public void test_22680() { testValid("(!int | {any, any})","{{any, int}, !int}"); }
		@Test public void test_22681() { testValid("(!int | {any, any})","{(any | any), !int}"); }
		@Test public void test_22682() { testValid("(!int | {any, any})","{(int | any), !int}"); }
		@Test public void test_22683() { testValid("(!int | {any, any})","{(any & any), !int}"); }
		@Test public void test_22684() { testValid("(!int | {any, any})","{(int & any), !int}"); }
		@Test public void test_22685() { testValid("(!int | {any, any})","{(int & int), !int}"); }
		@Test public void test_22686() { testValid("(!int | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_22687() { testValid("(!int | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_22688() { testValid("(!int | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_22689() { testValid("(!int | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_22690() { testValid("(!int | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_22691() { testValid("(!int | {any, any})","{!int, {int, any}}"); }
		@Test public void test_22692() { testValid("(!int | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_22693() { testValid("(!int | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_22694() { testValid("(!int | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_22695() { testValid("(!int | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_22696() { testValid("(!int | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_22697() { testValid("(!int | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_22698() { testValid("(!int | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_22699() { testValid("(!int | {any, any})","{!int, {int, int}}"); }
		@Test public void test_22700() { testValid("(!int | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_22701() { testValid("(!int | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_22702() { testValid("(!int | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_22703() { testValid("(!int | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_22704() { testValid("(!int | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_22705() { testValid("(!int | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_22706() { testValid("(!int | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_22707() { testValid("(!int | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_22708() { testValid("(!int | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_22709() { testValid("(!int | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_22710() { testValid("(!int | {any, any})","{!int, (int | any)}"); }
		@Test public void test_22711() { testValid("(!int | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_22712() { testValid("(!int | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_22713() { testValid("(!int | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_22714() { testValid("(!int | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_22715() { testValid("(!int | {any, any})","{!int, (any | int)}"); }
		@Test public void test_22716() { testValid("(!int | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_22717() { testValid("(!int | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_22718() { testValid("(!int | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_22719() { testValid("(!int | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_22720() { testValid("(!int | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_22721() { testValid("(!int | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_22722() { testValid("(!int | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_22723() { testValid("(!int | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_22724() { testValid("(!int | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_22725() { testValid("(!int | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_22726() { testValid("(!int | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_22727() { testValid("(!int | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_22728() { testValid("(!int | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_22729() { testValid("(!int | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_22730() { testValid("(!int | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_22731() { testValid("(!int | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_22732() { testValid("(!int | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_22733() { testValid("(!int | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_22734() { testValid("(!int | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_22735() { testValid("(!int | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_22736() { testValid("(!int | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_22737() { testValid("(!int | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_22738() { testValid("(!int | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_22739() { testValid("(!int | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_22740() { testValid("(!int | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_22741() { testValid("(!int | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_22742() { testValid("(!int | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_22743() { testValid("(!int | {any, any})","(!int | {any})"); }
		@Test public void test_22744() { testValid("(!int | {any, any})","({any, any} | {any})"); }
		@Test public void test_22745() { testInvalid("(!int | {any, any})","((any | any) | {any})"); }
		@Test public void test_22746() { testInvalid("(!int | {any, any})","((int | any) | {any})"); }
		@Test public void test_22747() { testInvalid("(!int | {any, any})","((any & any) | {any})"); }
		@Test public void test_22748() { testInvalid("(!int | {any, any})","((int & any) | {any})"); }
		@Test public void test_22749() { testInvalid("(!int | {any, any})","((any & int) | {any})"); }
		@Test public void test_22750() { testValid("(!int | {any, any})","({int} | {int})"); }
		@Test public void test_22751() { testValid("(!int | {any, any})","(!any | {int})"); }
		@Test public void test_22752() { testValid("(!int | {any, any})","(!int | {int})"); }
		@Test public void test_22753() { testValid("(!int | {any, any})","({any, int} | {int})"); }
		@Test public void test_22754() { testInvalid("(!int | {any, any})","((int & any) | {int})"); }
		@Test public void test_22755() { testInvalid("(!int | {any, any})","((any & int) | {int})"); }
		@Test public void test_22756() { testInvalid("(!int | {any, any})","((int & int) | {int})"); }
		@Test public void test_22757() { testValid("(!int | {any, any})","({any} | !any)"); }
		@Test public void test_22758() { testValid("(!int | {any, any})","({int} | !any)"); }
		@Test public void test_22759() { testValid("(!int | {any, any})","({any, any} | !any)"); }
		@Test public void test_22760() { testValid("(!int | {any, any})","({int, int} | !any)"); }
		@Test public void test_22761() { testInvalid("(!int | {any, any})","((any | any) | !any)"); }
		@Test public void test_22762() { testInvalid("(!int | {any, any})","((int | any) | !any)"); }
		@Test public void test_22763() { testInvalid("(!int | {any, any})","((int | int) | !any)"); }
		@Test public void test_22764() { testInvalid("(!int | {any, any})","((int & int) | !any)"); }
		@Test public void test_22765() { testValid("(!int | {any, any})","(!int | !int)"); }
		@Test public void test_22766() { testValid("(!int | {any, any})","({any, any} | !int)"); }
		@Test public void test_22767() { testValid("(!int | {any, any})","({int, int} | !int)"); }
		@Test public void test_22768() { testInvalid("(!int | {any, any})","((int | any) | !int)"); }
		@Test public void test_22769() { testInvalid("(!int | {any, any})","((any | int) | !int)"); }
		@Test public void test_22770() { testInvalid("(!int | {any, any})","((any & int) | !int)"); }
		@Test public void test_22771() { testInvalid("(!int | {any, any})","((int & int) | !int)"); }
		@Test public void test_22772() { testValid("(!int | {any, any})","({int} | {any, any})"); }
		@Test public void test_22773() { testValid("(!int | {any, any})","(!any | {any, any})"); }
		@Test public void test_22774() { testValid("(!int | {any, any})","(!int | {any, any})"); }
		@Test public void test_22775() { testValid("(!int | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_22776() { testInvalid("(!int | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_22777() { testInvalid("(!int | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_22778() { testInvalid("(!int | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_22779() { testValid("(!int | {any, any})","(!int | {int, any})"); }
		@Test public void test_22780() { testValid("(!int | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_22781() { testInvalid("(!int | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_22782() { testInvalid("(!int | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_22783() { testInvalid("(!int | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_22784() { testInvalid("(!int | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_22785() { testValid("(!int | {any, any})","({any} | {any, int})"); }
		@Test public void test_22786() { testValid("(!int | {any, any})","(!int | {any, int})"); }
		@Test public void test_22787() { testValid("(!int | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_22788() { testInvalid("(!int | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_22789() { testInvalid("(!int | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_22790() { testInvalid("(!int | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_22791() { testInvalid("(!int | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_22792() { testValid("(!int | {any, any})","(!any | {int, int})"); }
		@Test public void test_22793() { testValid("(!int | {any, any})","(!int | {int, int})"); }
		@Test public void test_22794() { testValid("(!int | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_22795() { testValid("(!int | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_22796() { testInvalid("(!int | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_22797() { testInvalid("(!int | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_22798() { testInvalid("(!int | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_22799() { testInvalid("(!int | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_22800() { testInvalid("(!int | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_22801() { testInvalid("(!int | {any, any})","({any} | (any | any))"); }
		@Test public void test_22802() { testInvalid("(!int | {any, any})","(!any | (any | any))"); }
		@Test public void test_22803() { testInvalid("(!int | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_22804() { testInvalid("(!int | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_22805() { testInvalid("(!int | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_22806() { testInvalid("(!int | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_22807() { testInvalid("(!int | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_22808() { testInvalid("(!int | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_22809() { testInvalid("(!int | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_22810() { testInvalid("(!int | {any, any})","({any} | (int | any))"); }
		@Test public void test_22811() { testInvalid("(!int | {any, any})","(!int | (int | any))"); }
		@Test public void test_22812() { testInvalid("(!int | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_22813() { testInvalid("(!int | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_22814() { testInvalid("(!int | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_22815() { testInvalid("(!int | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_22816() { testInvalid("(!int | {any, any})","({any} | (any | int))"); }
		@Test public void test_22817() { testInvalid("(!int | {any, any})","({int} | (any | int))"); }
		@Test public void test_22818() { testInvalid("(!int | {any, any})","(!any | (any | int))"); }
		@Test public void test_22819() { testInvalid("(!int | {any, any})","(!int | (any | int))"); }
		@Test public void test_22820() { testInvalid("(!int | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_22821() { testInvalid("(!int | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_22822() { testInvalid("(!int | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_22823() { testInvalid("(!int | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_22824() { testInvalid("(!int | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_22825() { testInvalid("(!int | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_22826() { testInvalid("(!int | {any, any})","({int} | (int | int))"); }
		@Test public void test_22827() { testInvalid("(!int | {any, any})","(!any | (int | int))"); }
		@Test public void test_22828() { testInvalid("(!int | {any, any})","(!int | (int | int))"); }
		@Test public void test_22829() { testInvalid("(!int | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_22830() { testInvalid("(!int | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_22831() { testInvalid("(!int | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_22832() { testInvalid("(!int | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_22833() { testInvalid("(!int | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_22834() { testInvalid("(!int | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_22835() { testInvalid("(!int | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_22836() { testInvalid("(!int | {any, any})","(!any | (any & any))"); }
		@Test public void test_22837() { testInvalid("(!int | {any, any})","(!int | (any & any))"); }
		@Test public void test_22838() { testInvalid("(!int | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_22839() { testInvalid("(!int | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_22840() { testInvalid("(!int | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_22841() { testInvalid("(!int | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_22842() { testInvalid("(!int | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_22843() { testInvalid("(!int | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_22844() { testInvalid("(!int | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_22845() { testInvalid("(!int | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_22846() { testInvalid("(!int | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_22847() { testInvalid("(!int | {any, any})","({any} | (int & any))"); }
		@Test public void test_22848() { testInvalid("({any, int} | {any, any})","{int}"); }
		@Test public void test_22849() { testValid("({any, int} | {any, any})","{any, any}"); }
		@Test public void test_22850() { testValid("({any, int} | {any, any})","{int, int}"); }
		@Test public void test_22851() { testInvalid("({any, int} | {any, any})","(any | int)"); }
		@Test public void test_22852() { testInvalid("({any, int} | {any, any})","(int & any)"); }
		@Test public void test_22853() { testInvalid("({any, int} | {any, any})","{{any}}"); }
		@Test public void test_22854() { testInvalid("({any, int} | {any, any})","{{int, any}}"); }
		@Test public void test_22855() { testInvalid("({any, int} | {any, any})","{{int, int}}"); }
		@Test public void test_22856() { testInvalid("({any, int} | {any, any})","{(any | int)}"); }
		@Test public void test_22857() { testInvalid("({any, int} | {any, any})","!{int, any}"); }
		@Test public void test_22858() { testInvalid("({any, int} | {any, any})","!{int, int}"); }
		@Test public void test_22859() { testValid("({any, int} | {any, any})","!(any | any)"); }
		@Test public void test_22860() { testValid("({any, int} | {any, any})","!(any & any)"); }
		@Test public void test_22861() { testInvalid("({any, int} | {any, any})","!(int & int)"); }
		@Test public void test_22862() { testValid("({any, int} | {any, any})","{{int}, {any}}"); }
		@Test public void test_22863() { testValid("({any, int} | {any, any})","{!int, {any}}"); }
		@Test public void test_22864() { testValid("({any, int} | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_22865() { testValid("({any, int} | {any, any})","{(any | int), {any}}"); }
		@Test public void test_22866() { testValid("({any, int} | {any, any})","{!int, {int}}"); }
		@Test public void test_22867() { testValid("({any, int} | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_22868() { testValid("({any, int} | {any, any})","{(any | any), {int}}"); }
		@Test public void test_22869() { testValid("({any, int} | {any, any})","{(any & any), {int}}"); }
		@Test public void test_22870() { testValid("({any, int} | {any, any})","{(any & int), {int}}"); }
		@Test public void test_22871() { testValid("({any, int} | {any, any})","{{any, any}, !int}"); }
		@Test public void test_22872() { testValid("({any, int} | {any, any})","{{any, int}, !int}"); }
		@Test public void test_22873() { testValid("({any, int} | {any, any})","{(any | any), !int}"); }
		@Test public void test_22874() { testValid("({any, int} | {any, any})","{(int | any), !int}"); }
		@Test public void test_22875() { testValid("({any, int} | {any, any})","{(any & any), !int}"); }
		@Test public void test_22876() { testValid("({any, int} | {any, any})","{(int & any), !int}"); }
		@Test public void test_22877() { testValid("({any, int} | {any, any})","{(int & int), !int}"); }
		@Test public void test_22878() { testValid("({any, int} | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_22879() { testValid("({any, int} | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_22880() { testValid("({any, int} | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_22881() { testValid("({any, int} | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_22882() { testValid("({any, int} | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_22883() { testValid("({any, int} | {any, any})","{!int, {int, any}}"); }
		@Test public void test_22884() { testValid("({any, int} | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_22885() { testValid("({any, int} | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_22886() { testValid("({any, int} | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_22887() { testValid("({any, int} | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_22888() { testValid("({any, int} | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_22889() { testValid("({any, int} | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_22890() { testValid("({any, int} | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_22891() { testValid("({any, int} | {any, any})","{!int, {int, int}}"); }
		@Test public void test_22892() { testValid("({any, int} | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_22893() { testValid("({any, int} | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_22894() { testValid("({any, int} | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_22895() { testValid("({any, int} | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_22896() { testValid("({any, int} | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_22897() { testValid("({any, int} | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_22898() { testValid("({any, int} | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_22899() { testValid("({any, int} | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_22900() { testValid("({any, int} | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_22901() { testValid("({any, int} | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_22902() { testValid("({any, int} | {any, any})","{!int, (int | any)}"); }
		@Test public void test_22903() { testValid("({any, int} | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_22904() { testValid("({any, int} | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_22905() { testValid("({any, int} | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_22906() { testValid("({any, int} | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_22907() { testValid("({any, int} | {any, any})","{!int, (any | int)}"); }
		@Test public void test_22908() { testValid("({any, int} | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_22909() { testValid("({any, int} | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_22910() { testValid("({any, int} | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_22911() { testValid("({any, int} | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_22912() { testValid("({any, int} | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_22913() { testValid("({any, int} | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_22914() { testValid("({any, int} | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_22915() { testValid("({any, int} | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_22916() { testValid("({any, int} | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_22917() { testValid("({any, int} | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_22918() { testValid("({any, int} | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_22919() { testValid("({any, int} | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_22920() { testValid("({any, int} | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_22921() { testValid("({any, int} | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_22922() { testValid("({any, int} | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_22923() { testValid("({any, int} | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_22924() { testValid("({any, int} | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_22925() { testValid("({any, int} | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_22926() { testValid("({any, int} | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_22927() { testValid("({any, int} | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_22928() { testValid("({any, int} | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_22929() { testValid("({any, int} | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_22930() { testValid("({any, int} | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_22931() { testValid("({any, int} | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_22932() { testValid("({any, int} | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_22933() { testValid("({any, int} | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_22934() { testValid("({any, int} | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_22935() { testInvalid("({any, int} | {any, any})","(!int | {any})"); }
		@Test public void test_22936() { testInvalid("({any, int} | {any, any})","({any, any} | {any})"); }
		@Test public void test_22937() { testInvalid("({any, int} | {any, any})","((any | any) | {any})"); }
		@Test public void test_22938() { testInvalid("({any, int} | {any, any})","((int | any) | {any})"); }
		@Test public void test_22939() { testInvalid("({any, int} | {any, any})","((any & any) | {any})"); }
		@Test public void test_22940() { testInvalid("({any, int} | {any, any})","((int & any) | {any})"); }
		@Test public void test_22941() { testInvalid("({any, int} | {any, any})","((any & int) | {any})"); }
		@Test public void test_22942() { testInvalid("({any, int} | {any, any})","({int} | {int})"); }
		@Test public void test_22943() { testInvalid("({any, int} | {any, any})","(!any | {int})"); }
		@Test public void test_22944() { testInvalid("({any, int} | {any, any})","(!int | {int})"); }
		@Test public void test_22945() { testInvalid("({any, int} | {any, any})","({any, int} | {int})"); }
		@Test public void test_22946() { testInvalid("({any, int} | {any, any})","((int & any) | {int})"); }
		@Test public void test_22947() { testInvalid("({any, int} | {any, any})","((any & int) | {int})"); }
		@Test public void test_22948() { testInvalid("({any, int} | {any, any})","((int & int) | {int})"); }
		@Test public void test_22949() { testInvalid("({any, int} | {any, any})","({any} | !any)"); }
		@Test public void test_22950() { testInvalid("({any, int} | {any, any})","({int} | !any)"); }
		@Test public void test_22951() { testValid("({any, int} | {any, any})","({any, any} | !any)"); }
		@Test public void test_22952() { testValid("({any, int} | {any, any})","({int, int} | !any)"); }
		@Test public void test_22953() { testInvalid("({any, int} | {any, any})","((any | any) | !any)"); }
		@Test public void test_22954() { testInvalid("({any, int} | {any, any})","((int | any) | !any)"); }
		@Test public void test_22955() { testInvalid("({any, int} | {any, any})","((int | int) | !any)"); }
		@Test public void test_22956() { testInvalid("({any, int} | {any, any})","((int & int) | !any)"); }
		@Test public void test_22957() { testInvalid("({any, int} | {any, any})","(!int | !int)"); }
		@Test public void test_22958() { testInvalid("({any, int} | {any, any})","({any, any} | !int)"); }
		@Test public void test_22959() { testInvalid("({any, int} | {any, any})","({int, int} | !int)"); }
		@Test public void test_22960() { testInvalid("({any, int} | {any, any})","((int | any) | !int)"); }
		@Test public void test_22961() { testInvalid("({any, int} | {any, any})","((any | int) | !int)"); }
		@Test public void test_22962() { testInvalid("({any, int} | {any, any})","((any & int) | !int)"); }
		@Test public void test_22963() { testInvalid("({any, int} | {any, any})","((int & int) | !int)"); }
		@Test public void test_22964() { testInvalid("({any, int} | {any, any})","({int} | {any, any})"); }
		@Test public void test_22965() { testValid("({any, int} | {any, any})","(!any | {any, any})"); }
		@Test public void test_22966() { testInvalid("({any, int} | {any, any})","(!int | {any, any})"); }
		@Test public void test_22967() { testValid("({any, int} | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_22968() { testInvalid("({any, int} | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_22969() { testInvalid("({any, int} | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_22970() { testInvalid("({any, int} | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_22971() { testInvalid("({any, int} | {any, any})","(!int | {int, any})"); }
		@Test public void test_22972() { testValid("({any, int} | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_22973() { testInvalid("({any, int} | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_22974() { testInvalid("({any, int} | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_22975() { testInvalid("({any, int} | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_22976() { testInvalid("({any, int} | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_22977() { testInvalid("({any, int} | {any, any})","({any} | {any, int})"); }
		@Test public void test_22978() { testInvalid("({any, int} | {any, any})","(!int | {any, int})"); }
		@Test public void test_22979() { testValid("({any, int} | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_22980() { testInvalid("({any, int} | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_22981() { testInvalid("({any, int} | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_22982() { testInvalid("({any, int} | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_22983() { testInvalid("({any, int} | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_22984() { testValid("({any, int} | {any, any})","(!any | {int, int})"); }
		@Test public void test_22985() { testInvalid("({any, int} | {any, any})","(!int | {int, int})"); }
		@Test public void test_22986() { testValid("({any, int} | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_22987() { testValid("({any, int} | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_22988() { testInvalid("({any, int} | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_22989() { testInvalid("({any, int} | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_22990() { testInvalid("({any, int} | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_22991() { testInvalid("({any, int} | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_22992() { testInvalid("({any, int} | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_22993() { testInvalid("({any, int} | {any, any})","({any} | (any | any))"); }
		@Test public void test_22994() { testInvalid("({any, int} | {any, any})","(!any | (any | any))"); }
		@Test public void test_22995() { testInvalid("({any, int} | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_22996() { testInvalid("({any, int} | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_22997() { testInvalid("({any, int} | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_22998() { testInvalid("({any, int} | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_22999() { testInvalid("({any, int} | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_23000() { testInvalid("({any, int} | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_23001() { testInvalid("({any, int} | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_23002() { testInvalid("({any, int} | {any, any})","({any} | (int | any))"); }
		@Test public void test_23003() { testInvalid("({any, int} | {any, any})","(!int | (int | any))"); }
		@Test public void test_23004() { testInvalid("({any, int} | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_23005() { testInvalid("({any, int} | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_23006() { testInvalid("({any, int} | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_23007() { testInvalid("({any, int} | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_23008() { testInvalid("({any, int} | {any, any})","({any} | (any | int))"); }
		@Test public void test_23009() { testInvalid("({any, int} | {any, any})","({int} | (any | int))"); }
		@Test public void test_23010() { testInvalid("({any, int} | {any, any})","(!any | (any | int))"); }
		@Test public void test_23011() { testInvalid("({any, int} | {any, any})","(!int | (any | int))"); }
		@Test public void test_23012() { testInvalid("({any, int} | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_23013() { testInvalid("({any, int} | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_23014() { testInvalid("({any, int} | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_23015() { testInvalid("({any, int} | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_23016() { testInvalid("({any, int} | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_23017() { testInvalid("({any, int} | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_23018() { testInvalid("({any, int} | {any, any})","({int} | (int | int))"); }
		@Test public void test_23019() { testInvalid("({any, int} | {any, any})","(!any | (int | int))"); }
		@Test public void test_23020() { testInvalid("({any, int} | {any, any})","(!int | (int | int))"); }
		@Test public void test_23021() { testInvalid("({any, int} | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_23022() { testInvalid("({any, int} | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_23023() { testInvalid("({any, int} | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_23024() { testInvalid("({any, int} | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_23025() { testInvalid("({any, int} | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_23026() { testInvalid("({any, int} | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_23027() { testInvalid("({any, int} | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_23028() { testInvalid("({any, int} | {any, any})","(!any | (any & any))"); }
		@Test public void test_23029() { testInvalid("({any, int} | {any, any})","(!int | (any & any))"); }
		@Test public void test_23030() { testInvalid("({any, int} | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_23031() { testInvalid("({any, int} | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_23032() { testInvalid("({any, int} | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_23033() { testInvalid("({any, int} | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_23034() { testInvalid("({any, int} | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_23035() { testInvalid("({any, int} | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_23036() { testInvalid("({any, int} | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_23037() { testInvalid("({any, int} | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_23038() { testInvalid("({any, int} | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_23039() { testInvalid("({any, int} | {any, any})","({any} | (int & any))"); }
		@Test public void test_23040() { testValid("((int | any) | {any, any})","{int}"); }
		@Test public void test_23041() { testValid("((int | any) | {any, any})","{any, any}"); }
		@Test public void test_23042() { testValid("((int | any) | {any, any})","{int, int}"); }
		@Test public void test_23043() { testValid("((int | any) | {any, any})","(any | int)"); }
		@Test public void test_23044() { testValid("((int | any) | {any, any})","(int & any)"); }
		@Test public void test_23045() { testValid("((int | any) | {any, any})","{{any}}"); }
		@Test public void test_23046() { testValid("((int | any) | {any, any})","{{int, any}}"); }
		@Test public void test_23047() { testValid("((int | any) | {any, any})","{{int, int}}"); }
		@Test public void test_23048() { testValid("((int | any) | {any, any})","{(any | int)}"); }
		@Test public void test_23049() { testValid("((int | any) | {any, any})","!{int, any}"); }
		@Test public void test_23050() { testValid("((int | any) | {any, any})","!{int, int}"); }
		@Test public void test_23051() { testValid("((int | any) | {any, any})","!(any | any)"); }
		@Test public void test_23052() { testValid("((int | any) | {any, any})","!(any & any)"); }
		@Test public void test_23053() { testValid("((int | any) | {any, any})","!(int & int)"); }
		@Test public void test_23054() { testValid("((int | any) | {any, any})","{{int}, {any}}"); }
		@Test public void test_23055() { testValid("((int | any) | {any, any})","{!int, {any}}"); }
		@Test public void test_23056() { testValid("((int | any) | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_23057() { testValid("((int | any) | {any, any})","{(any | int), {any}}"); }
		@Test public void test_23058() { testValid("((int | any) | {any, any})","{!int, {int}}"); }
		@Test public void test_23059() { testValid("((int | any) | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_23060() { testValid("((int | any) | {any, any})","{(any | any), {int}}"); }
		@Test public void test_23061() { testValid("((int | any) | {any, any})","{(any & any), {int}}"); }
		@Test public void test_23062() { testValid("((int | any) | {any, any})","{(any & int), {int}}"); }
		@Test public void test_23063() { testValid("((int | any) | {any, any})","{{any, any}, !int}"); }
		@Test public void test_23064() { testValid("((int | any) | {any, any})","{{any, int}, !int}"); }
		@Test public void test_23065() { testValid("((int | any) | {any, any})","{(any | any), !int}"); }
		@Test public void test_23066() { testValid("((int | any) | {any, any})","{(int | any), !int}"); }
		@Test public void test_23067() { testValid("((int | any) | {any, any})","{(any & any), !int}"); }
		@Test public void test_23068() { testValid("((int | any) | {any, any})","{(int & any), !int}"); }
		@Test public void test_23069() { testValid("((int | any) | {any, any})","{(int & int), !int}"); }
		@Test public void test_23070() { testValid("((int | any) | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_23071() { testValid("((int | any) | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_23072() { testValid("((int | any) | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_23073() { testValid("((int | any) | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_23074() { testValid("((int | any) | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_23075() { testValid("((int | any) | {any, any})","{!int, {int, any}}"); }
		@Test public void test_23076() { testValid("((int | any) | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_23077() { testValid("((int | any) | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_23078() { testValid("((int | any) | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_23079() { testValid("((int | any) | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_23080() { testValid("((int | any) | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_23081() { testValid("((int | any) | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_23082() { testValid("((int | any) | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_23083() { testValid("((int | any) | {any, any})","{!int, {int, int}}"); }
		@Test public void test_23084() { testValid("((int | any) | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_23085() { testValid("((int | any) | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_23086() { testValid("((int | any) | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_23087() { testValid("((int | any) | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_23088() { testValid("((int | any) | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_23089() { testValid("((int | any) | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_23090() { testValid("((int | any) | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_23091() { testValid("((int | any) | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_23092() { testValid("((int | any) | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_23093() { testValid("((int | any) | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_23094() { testValid("((int | any) | {any, any})","{!int, (int | any)}"); }
		@Test public void test_23095() { testValid("((int | any) | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_23096() { testValid("((int | any) | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_23097() { testValid("((int | any) | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_23098() { testValid("((int | any) | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_23099() { testValid("((int | any) | {any, any})","{!int, (any | int)}"); }
		@Test public void test_23100() { testValid("((int | any) | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_23101() { testValid("((int | any) | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_23102() { testValid("((int | any) | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_23103() { testValid("((int | any) | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_23104() { testValid("((int | any) | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_23105() { testValid("((int | any) | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_23106() { testValid("((int | any) | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_23107() { testValid("((int | any) | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_23108() { testValid("((int | any) | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_23109() { testValid("((int | any) | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_23110() { testValid("((int | any) | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_23111() { testValid("((int | any) | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_23112() { testValid("((int | any) | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_23113() { testValid("((int | any) | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_23114() { testValid("((int | any) | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_23115() { testValid("((int | any) | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_23116() { testValid("((int | any) | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_23117() { testValid("((int | any) | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_23118() { testValid("((int | any) | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_23119() { testValid("((int | any) | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_23120() { testValid("((int | any) | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_23121() { testValid("((int | any) | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_23122() { testValid("((int | any) | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_23123() { testValid("((int | any) | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_23124() { testValid("((int | any) | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_23125() { testValid("((int | any) | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_23126() { testValid("((int | any) | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_23127() { testValid("((int | any) | {any, any})","(!int | {any})"); }
		@Test public void test_23128() { testValid("((int | any) | {any, any})","({any, any} | {any})"); }
		@Test public void test_23129() { testValid("((int | any) | {any, any})","((any | any) | {any})"); }
		@Test public void test_23130() { testValid("((int | any) | {any, any})","((int | any) | {any})"); }
		@Test public void test_23131() { testValid("((int | any) | {any, any})","((any & any) | {any})"); }
		@Test public void test_23132() { testValid("((int | any) | {any, any})","((int & any) | {any})"); }
		@Test public void test_23133() { testValid("((int | any) | {any, any})","((any & int) | {any})"); }
		@Test public void test_23134() { testValid("((int | any) | {any, any})","({int} | {int})"); }
		@Test public void test_23135() { testValid("((int | any) | {any, any})","(!any | {int})"); }
		@Test public void test_23136() { testValid("((int | any) | {any, any})","(!int | {int})"); }
		@Test public void test_23137() { testValid("((int | any) | {any, any})","({any, int} | {int})"); }
		@Test public void test_23138() { testValid("((int | any) | {any, any})","((int & any) | {int})"); }
		@Test public void test_23139() { testValid("((int | any) | {any, any})","((any & int) | {int})"); }
		@Test public void test_23140() { testValid("((int | any) | {any, any})","((int & int) | {int})"); }
		@Test public void test_23141() { testValid("((int | any) | {any, any})","({any} | !any)"); }
		@Test public void test_23142() { testValid("((int | any) | {any, any})","({int} | !any)"); }
		@Test public void test_23143() { testValid("((int | any) | {any, any})","({any, any} | !any)"); }
		@Test public void test_23144() { testValid("((int | any) | {any, any})","({int, int} | !any)"); }
		@Test public void test_23145() { testValid("((int | any) | {any, any})","((any | any) | !any)"); }
		@Test public void test_23146() { testValid("((int | any) | {any, any})","((int | any) | !any)"); }
		@Test public void test_23147() { testValid("((int | any) | {any, any})","((int | int) | !any)"); }
		@Test public void test_23148() { testValid("((int | any) | {any, any})","((int & int) | !any)"); }
		@Test public void test_23149() { testValid("((int | any) | {any, any})","(!int | !int)"); }
		@Test public void test_23150() { testValid("((int | any) | {any, any})","({any, any} | !int)"); }
		@Test public void test_23151() { testValid("((int | any) | {any, any})","({int, int} | !int)"); }
		@Test public void test_23152() { testValid("((int | any) | {any, any})","((int | any) | !int)"); }
		@Test public void test_23153() { testValid("((int | any) | {any, any})","((any | int) | !int)"); }
		@Test public void test_23154() { testValid("((int | any) | {any, any})","((any & int) | !int)"); }
		@Test public void test_23155() { testValid("((int | any) | {any, any})","((int & int) | !int)"); }
		@Test public void test_23156() { testValid("((int | any) | {any, any})","({int} | {any, any})"); }
		@Test public void test_23157() { testValid("((int | any) | {any, any})","(!any | {any, any})"); }
		@Test public void test_23158() { testValid("((int | any) | {any, any})","(!int | {any, any})"); }
		@Test public void test_23159() { testValid("((int | any) | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_23160() { testValid("((int | any) | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_23161() { testValid("((int | any) | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_23162() { testValid("((int | any) | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_23163() { testValid("((int | any) | {any, any})","(!int | {int, any})"); }
		@Test public void test_23164() { testValid("((int | any) | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_23165() { testValid("((int | any) | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_23166() { testValid("((int | any) | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_23167() { testValid("((int | any) | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_23168() { testValid("((int | any) | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_23169() { testValid("((int | any) | {any, any})","({any} | {any, int})"); }
		@Test public void test_23170() { testValid("((int | any) | {any, any})","(!int | {any, int})"); }
		@Test public void test_23171() { testValid("((int | any) | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_23172() { testValid("((int | any) | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_23173() { testValid("((int | any) | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_23174() { testValid("((int | any) | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_23175() { testValid("((int | any) | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_23176() { testValid("((int | any) | {any, any})","(!any | {int, int})"); }
		@Test public void test_23177() { testValid("((int | any) | {any, any})","(!int | {int, int})"); }
		@Test public void test_23178() { testValid("((int | any) | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_23179() { testValid("((int | any) | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_23180() { testValid("((int | any) | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_23181() { testValid("((int | any) | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_23182() { testValid("((int | any) | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_23183() { testValid("((int | any) | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_23184() { testValid("((int | any) | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_23185() { testValid("((int | any) | {any, any})","({any} | (any | any))"); }
		@Test public void test_23186() { testValid("((int | any) | {any, any})","(!any | (any | any))"); }
		@Test public void test_23187() { testValid("((int | any) | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_23188() { testValid("((int | any) | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_23189() { testValid("((int | any) | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_23190() { testValid("((int | any) | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_23191() { testValid("((int | any) | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_23192() { testValid("((int | any) | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_23193() { testValid("((int | any) | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_23194() { testValid("((int | any) | {any, any})","({any} | (int | any))"); }
		@Test public void test_23195() { testValid("((int | any) | {any, any})","(!int | (int | any))"); }
		@Test public void test_23196() { testValid("((int | any) | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_23197() { testValid("((int | any) | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_23198() { testValid("((int | any) | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_23199() { testValid("((int | any) | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_23200() { testValid("((int | any) | {any, any})","({any} | (any | int))"); }
		@Test public void test_23201() { testValid("((int | any) | {any, any})","({int} | (any | int))"); }
		@Test public void test_23202() { testValid("((int | any) | {any, any})","(!any | (any | int))"); }
		@Test public void test_23203() { testValid("((int | any) | {any, any})","(!int | (any | int))"); }
		@Test public void test_23204() { testValid("((int | any) | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_23205() { testValid("((int | any) | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_23206() { testValid("((int | any) | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_23207() { testValid("((int | any) | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_23208() { testValid("((int | any) | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_23209() { testValid("((int | any) | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_23210() { testValid("((int | any) | {any, any})","({int} | (int | int))"); }
		@Test public void test_23211() { testValid("((int | any) | {any, any})","(!any | (int | int))"); }
		@Test public void test_23212() { testValid("((int | any) | {any, any})","(!int | (int | int))"); }
		@Test public void test_23213() { testValid("((int | any) | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_23214() { testValid("((int | any) | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_23215() { testValid("((int | any) | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_23216() { testValid("((int | any) | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_23217() { testValid("((int | any) | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_23218() { testValid("((int | any) | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_23219() { testValid("((int | any) | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_23220() { testValid("((int | any) | {any, any})","(!any | (any & any))"); }
		@Test public void test_23221() { testValid("((int | any) | {any, any})","(!int | (any & any))"); }
		@Test public void test_23222() { testValid("((int | any) | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_23223() { testValid("((int | any) | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_23224() { testValid("((int | any) | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_23225() { testValid("((int | any) | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_23226() { testValid("((int | any) | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_23227() { testValid("((int | any) | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_23228() { testValid("((int | any) | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_23229() { testValid("((int | any) | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_23230() { testValid("((int | any) | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_23231() { testValid("((int | any) | {any, any})","({any} | (int & any))"); }
		@Test public void test_23232() { testValid("((any & any) | {any, any})","{int}"); }
		@Test public void test_23233() { testValid("((any & any) | {any, any})","{any, any}"); }
		@Test public void test_23234() { testValid("((any & any) | {any, any})","{int, int}"); }
		@Test public void test_23235() { testValid("((any & any) | {any, any})","(any | int)"); }
		@Test public void test_23236() { testValid("((any & any) | {any, any})","(int & any)"); }
		@Test public void test_23237() { testValid("((any & any) | {any, any})","{{any}}"); }
		@Test public void test_23238() { testValid("((any & any) | {any, any})","{{int, any}}"); }
		@Test public void test_23239() { testValid("((any & any) | {any, any})","{{int, int}}"); }
		@Test public void test_23240() { testValid("((any & any) | {any, any})","{(any | int)}"); }
		@Test public void test_23241() { testValid("((any & any) | {any, any})","!{int, any}"); }
		@Test public void test_23242() { testValid("((any & any) | {any, any})","!{int, int}"); }
		@Test public void test_23243() { testValid("((any & any) | {any, any})","!(any | any)"); }
		@Test public void test_23244() { testValid("((any & any) | {any, any})","!(any & any)"); }
		@Test public void test_23245() { testValid("((any & any) | {any, any})","!(int & int)"); }
		@Test public void test_23246() { testValid("((any & any) | {any, any})","{{int}, {any}}"); }
		@Test public void test_23247() { testValid("((any & any) | {any, any})","{!int, {any}}"); }
		@Test public void test_23248() { testValid("((any & any) | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_23249() { testValid("((any & any) | {any, any})","{(any | int), {any}}"); }
		@Test public void test_23250() { testValid("((any & any) | {any, any})","{!int, {int}}"); }
		@Test public void test_23251() { testValid("((any & any) | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_23252() { testValid("((any & any) | {any, any})","{(any | any), {int}}"); }
		@Test public void test_23253() { testValid("((any & any) | {any, any})","{(any & any), {int}}"); }
		@Test public void test_23254() { testValid("((any & any) | {any, any})","{(any & int), {int}}"); }
		@Test public void test_23255() { testValid("((any & any) | {any, any})","{{any, any}, !int}"); }
		@Test public void test_23256() { testValid("((any & any) | {any, any})","{{any, int}, !int}"); }
		@Test public void test_23257() { testValid("((any & any) | {any, any})","{(any | any), !int}"); }
		@Test public void test_23258() { testValid("((any & any) | {any, any})","{(int | any), !int}"); }
		@Test public void test_23259() { testValid("((any & any) | {any, any})","{(any & any), !int}"); }
		@Test public void test_23260() { testValid("((any & any) | {any, any})","{(int & any), !int}"); }
		@Test public void test_23261() { testValid("((any & any) | {any, any})","{(int & int), !int}"); }
		@Test public void test_23262() { testValid("((any & any) | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_23263() { testValid("((any & any) | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_23264() { testValid("((any & any) | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_23265() { testValid("((any & any) | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_23266() { testValid("((any & any) | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_23267() { testValid("((any & any) | {any, any})","{!int, {int, any}}"); }
		@Test public void test_23268() { testValid("((any & any) | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_23269() { testValid("((any & any) | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_23270() { testValid("((any & any) | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_23271() { testValid("((any & any) | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_23272() { testValid("((any & any) | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_23273() { testValid("((any & any) | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_23274() { testValid("((any & any) | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_23275() { testValid("((any & any) | {any, any})","{!int, {int, int}}"); }
		@Test public void test_23276() { testValid("((any & any) | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_23277() { testValid("((any & any) | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_23278() { testValid("((any & any) | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_23279() { testValid("((any & any) | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_23280() { testValid("((any & any) | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_23281() { testValid("((any & any) | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_23282() { testValid("((any & any) | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_23283() { testValid("((any & any) | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_23284() { testValid("((any & any) | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_23285() { testValid("((any & any) | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_23286() { testValid("((any & any) | {any, any})","{!int, (int | any)}"); }
		@Test public void test_23287() { testValid("((any & any) | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_23288() { testValid("((any & any) | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_23289() { testValid("((any & any) | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_23290() { testValid("((any & any) | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_23291() { testValid("((any & any) | {any, any})","{!int, (any | int)}"); }
		@Test public void test_23292() { testValid("((any & any) | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_23293() { testValid("((any & any) | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_23294() { testValid("((any & any) | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_23295() { testValid("((any & any) | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_23296() { testValid("((any & any) | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_23297() { testValid("((any & any) | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_23298() { testValid("((any & any) | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_23299() { testValid("((any & any) | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_23300() { testValid("((any & any) | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_23301() { testValid("((any & any) | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_23302() { testValid("((any & any) | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_23303() { testValid("((any & any) | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_23304() { testValid("((any & any) | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_23305() { testValid("((any & any) | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_23306() { testValid("((any & any) | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_23307() { testValid("((any & any) | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_23308() { testValid("((any & any) | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_23309() { testValid("((any & any) | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_23310() { testValid("((any & any) | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_23311() { testValid("((any & any) | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_23312() { testValid("((any & any) | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_23313() { testValid("((any & any) | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_23314() { testValid("((any & any) | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_23315() { testValid("((any & any) | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_23316() { testValid("((any & any) | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_23317() { testValid("((any & any) | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_23318() { testValid("((any & any) | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_23319() { testValid("((any & any) | {any, any})","(!int | {any})"); }
		@Test public void test_23320() { testValid("((any & any) | {any, any})","({any, any} | {any})"); }
		@Test public void test_23321() { testValid("((any & any) | {any, any})","((any | any) | {any})"); }
		@Test public void test_23322() { testValid("((any & any) | {any, any})","((int | any) | {any})"); }
		@Test public void test_23323() { testValid("((any & any) | {any, any})","((any & any) | {any})"); }
		@Test public void test_23324() { testValid("((any & any) | {any, any})","((int & any) | {any})"); }
		@Test public void test_23325() { testValid("((any & any) | {any, any})","((any & int) | {any})"); }
		@Test public void test_23326() { testValid("((any & any) | {any, any})","({int} | {int})"); }
		@Test public void test_23327() { testValid("((any & any) | {any, any})","(!any | {int})"); }
		@Test public void test_23328() { testValid("((any & any) | {any, any})","(!int | {int})"); }
		@Test public void test_23329() { testValid("((any & any) | {any, any})","({any, int} | {int})"); }
		@Test public void test_23330() { testValid("((any & any) | {any, any})","((int & any) | {int})"); }
		@Test public void test_23331() { testValid("((any & any) | {any, any})","((any & int) | {int})"); }
		@Test public void test_23332() { testValid("((any & any) | {any, any})","((int & int) | {int})"); }
		@Test public void test_23333() { testValid("((any & any) | {any, any})","({any} | !any)"); }
		@Test public void test_23334() { testValid("((any & any) | {any, any})","({int} | !any)"); }
		@Test public void test_23335() { testValid("((any & any) | {any, any})","({any, any} | !any)"); }
		@Test public void test_23336() { testValid("((any & any) | {any, any})","({int, int} | !any)"); }
		@Test public void test_23337() { testValid("((any & any) | {any, any})","((any | any) | !any)"); }
		@Test public void test_23338() { testValid("((any & any) | {any, any})","((int | any) | !any)"); }
		@Test public void test_23339() { testValid("((any & any) | {any, any})","((int | int) | !any)"); }
		@Test public void test_23340() { testValid("((any & any) | {any, any})","((int & int) | !any)"); }
		@Test public void test_23341() { testValid("((any & any) | {any, any})","(!int | !int)"); }
		@Test public void test_23342() { testValid("((any & any) | {any, any})","({any, any} | !int)"); }
		@Test public void test_23343() { testValid("((any & any) | {any, any})","({int, int} | !int)"); }
		@Test public void test_23344() { testValid("((any & any) | {any, any})","((int | any) | !int)"); }
		@Test public void test_23345() { testValid("((any & any) | {any, any})","((any | int) | !int)"); }
		@Test public void test_23346() { testValid("((any & any) | {any, any})","((any & int) | !int)"); }
		@Test public void test_23347() { testValid("((any & any) | {any, any})","((int & int) | !int)"); }
		@Test public void test_23348() { testValid("((any & any) | {any, any})","({int} | {any, any})"); }
		@Test public void test_23349() { testValid("((any & any) | {any, any})","(!any | {any, any})"); }
		@Test public void test_23350() { testValid("((any & any) | {any, any})","(!int | {any, any})"); }
		@Test public void test_23351() { testValid("((any & any) | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_23352() { testValid("((any & any) | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_23353() { testValid("((any & any) | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_23354() { testValid("((any & any) | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_23355() { testValid("((any & any) | {any, any})","(!int | {int, any})"); }
		@Test public void test_23356() { testValid("((any & any) | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_23357() { testValid("((any & any) | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_23358() { testValid("((any & any) | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_23359() { testValid("((any & any) | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_23360() { testValid("((any & any) | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_23361() { testValid("((any & any) | {any, any})","({any} | {any, int})"); }
		@Test public void test_23362() { testValid("((any & any) | {any, any})","(!int | {any, int})"); }
		@Test public void test_23363() { testValid("((any & any) | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_23364() { testValid("((any & any) | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_23365() { testValid("((any & any) | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_23366() { testValid("((any & any) | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_23367() { testValid("((any & any) | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_23368() { testValid("((any & any) | {any, any})","(!any | {int, int})"); }
		@Test public void test_23369() { testValid("((any & any) | {any, any})","(!int | {int, int})"); }
		@Test public void test_23370() { testValid("((any & any) | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_23371() { testValid("((any & any) | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_23372() { testValid("((any & any) | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_23373() { testValid("((any & any) | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_23374() { testValid("((any & any) | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_23375() { testValid("((any & any) | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_23376() { testValid("((any & any) | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_23377() { testValid("((any & any) | {any, any})","({any} | (any | any))"); }
		@Test public void test_23378() { testValid("((any & any) | {any, any})","(!any | (any | any))"); }
		@Test public void test_23379() { testValid("((any & any) | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_23380() { testValid("((any & any) | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_23381() { testValid("((any & any) | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_23382() { testValid("((any & any) | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_23383() { testValid("((any & any) | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_23384() { testValid("((any & any) | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_23385() { testValid("((any & any) | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_23386() { testValid("((any & any) | {any, any})","({any} | (int | any))"); }
		@Test public void test_23387() { testValid("((any & any) | {any, any})","(!int | (int | any))"); }
		@Test public void test_23388() { testValid("((any & any) | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_23389() { testValid("((any & any) | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_23390() { testValid("((any & any) | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_23391() { testValid("((any & any) | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_23392() { testValid("((any & any) | {any, any})","({any} | (any | int))"); }
		@Test public void test_23393() { testValid("((any & any) | {any, any})","({int} | (any | int))"); }
		@Test public void test_23394() { testValid("((any & any) | {any, any})","(!any | (any | int))"); }
		@Test public void test_23395() { testValid("((any & any) | {any, any})","(!int | (any | int))"); }
		@Test public void test_23396() { testValid("((any & any) | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_23397() { testValid("((any & any) | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_23398() { testValid("((any & any) | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_23399() { testValid("((any & any) | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_23400() { testValid("((any & any) | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_23401() { testValid("((any & any) | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_23402() { testValid("((any & any) | {any, any})","({int} | (int | int))"); }
		@Test public void test_23403() { testValid("((any & any) | {any, any})","(!any | (int | int))"); }
		@Test public void test_23404() { testValid("((any & any) | {any, any})","(!int | (int | int))"); }
		@Test public void test_23405() { testValid("((any & any) | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_23406() { testValid("((any & any) | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_23407() { testValid("((any & any) | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_23408() { testValid("((any & any) | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_23409() { testValid("((any & any) | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_23410() { testValid("((any & any) | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_23411() { testValid("((any & any) | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_23412() { testValid("((any & any) | {any, any})","(!any | (any & any))"); }
		@Test public void test_23413() { testValid("((any & any) | {any, any})","(!int | (any & any))"); }
		@Test public void test_23414() { testValid("((any & any) | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_23415() { testValid("((any & any) | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_23416() { testValid("((any & any) | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_23417() { testValid("((any & any) | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_23418() { testValid("((any & any) | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_23419() { testValid("((any & any) | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_23420() { testValid("((any & any) | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_23421() { testValid("((any & any) | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_23422() { testValid("((any & any) | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_23423() { testValid("((any & any) | {any, any})","({any} | (int & any))"); }
		@Test public void test_23424() { testInvalid("((any & int) | {any, any})","{int}"); }
		@Test public void test_23425() { testValid("((any & int) | {any, any})","{any, any}"); }
		@Test public void test_23426() { testValid("((any & int) | {any, any})","{int, int}"); }
		@Test public void test_23427() { testInvalid("((any & int) | {any, any})","(any | int)"); }
		@Test public void test_23428() { testValid("((any & int) | {any, any})","(int & any)"); }
		@Test public void test_23429() { testInvalid("((any & int) | {any, any})","{{any}}"); }
		@Test public void test_23430() { testInvalid("((any & int) | {any, any})","{{int, any}}"); }
		@Test public void test_23431() { testInvalid("((any & int) | {any, any})","{{int, int}}"); }
		@Test public void test_23432() { testInvalid("((any & int) | {any, any})","{(any | int)}"); }
		@Test public void test_23433() { testInvalid("((any & int) | {any, any})","!{int, any}"); }
		@Test public void test_23434() { testInvalid("((any & int) | {any, any})","!{int, int}"); }
		@Test public void test_23435() { testValid("((any & int) | {any, any})","!(any | any)"); }
		@Test public void test_23436() { testValid("((any & int) | {any, any})","!(any & any)"); }
		@Test public void test_23437() { testInvalid("((any & int) | {any, any})","!(int & int)"); }
		@Test public void test_23438() { testValid("((any & int) | {any, any})","{{int}, {any}}"); }
		@Test public void test_23439() { testValid("((any & int) | {any, any})","{!int, {any}}"); }
		@Test public void test_23440() { testValid("((any & int) | {any, any})","{{int, int}, {any}}"); }
		@Test public void test_23441() { testValid("((any & int) | {any, any})","{(any | int), {any}}"); }
		@Test public void test_23442() { testValid("((any & int) | {any, any})","{!int, {int}}"); }
		@Test public void test_23443() { testValid("((any & int) | {any, any})","{{any, any}, {int}}"); }
		@Test public void test_23444() { testValid("((any & int) | {any, any})","{(any | any), {int}}"); }
		@Test public void test_23445() { testValid("((any & int) | {any, any})","{(any & any), {int}}"); }
		@Test public void test_23446() { testValid("((any & int) | {any, any})","{(any & int), {int}}"); }
		@Test public void test_23447() { testValid("((any & int) | {any, any})","{{any, any}, !int}"); }
		@Test public void test_23448() { testValid("((any & int) | {any, any})","{{any, int}, !int}"); }
		@Test public void test_23449() { testValid("((any & int) | {any, any})","{(any | any), !int}"); }
		@Test public void test_23450() { testValid("((any & int) | {any, any})","{(int | any), !int}"); }
		@Test public void test_23451() { testValid("((any & int) | {any, any})","{(any & any), !int}"); }
		@Test public void test_23452() { testValid("((any & int) | {any, any})","{(int & any), !int}"); }
		@Test public void test_23453() { testValid("((any & int) | {any, any})","{(int & int), !int}"); }
		@Test public void test_23454() { testValid("((any & int) | {any, any})","{{any}, {any, any}}"); }
		@Test public void test_23455() { testValid("((any & int) | {any, any})","{{int}, {any, any}}"); }
		@Test public void test_23456() { testValid("((any & int) | {any, any})","{{int, int}, {any, any}}"); }
		@Test public void test_23457() { testValid("((any & int) | {any, any})","{(any | any), {any, any}}"); }
		@Test public void test_23458() { testValid("((any & int) | {any, any})","{(any | int), {any, any}}"); }
		@Test public void test_23459() { testValid("((any & int) | {any, any})","{!int, {int, any}}"); }
		@Test public void test_23460() { testValid("((any & int) | {any, any})","{{int, any}, {int, any}}"); }
		@Test public void test_23461() { testValid("((any & int) | {any, any})","{{any, int}, {int, any}}"); }
		@Test public void test_23462() { testValid("((any & int) | {any, any})","{(any & int), {int, any}}"); }
		@Test public void test_23463() { testValid("((any & int) | {any, any})","{{any}, {any, int}}"); }
		@Test public void test_23464() { testValid("((any & int) | {any, any})","{{int, int}, {any, int}}"); }
		@Test public void test_23465() { testValid("((any & int) | {any, any})","{(int | int), {any, int}}"); }
		@Test public void test_23466() { testValid("((any & int) | {any, any})","{(any & int), {any, int}}"); }
		@Test public void test_23467() { testValid("((any & int) | {any, any})","{!int, {int, int}}"); }
		@Test public void test_23468() { testValid("((any & int) | {any, any})","{{int, int}, {int, int}}"); }
		@Test public void test_23469() { testValid("((any & int) | {any, any})","{(any | any), {int, int}}"); }
		@Test public void test_23470() { testValid("((any & int) | {any, any})","{(int | any), {int, int}}"); }
		@Test public void test_23471() { testValid("((any & int) | {any, any})","{(int & any), {int, int}}"); }
		@Test public void test_23472() { testValid("((any & int) | {any, any})","{{int}, (any | any)}"); }
		@Test public void test_23473() { testValid("((any & int) | {any, any})","{{int, any}, (any | any)}"); }
		@Test public void test_23474() { testValid("((any & int) | {any, any})","{{any, int}, (any | any)}"); }
		@Test public void test_23475() { testValid("((any & int) | {any, any})","{(any | any), (any | any)}"); }
		@Test public void test_23476() { testValid("((any & int) | {any, any})","{(int | any), (any | any)}"); }
		@Test public void test_23477() { testValid("((any & int) | {any, any})","{(int & int), (any | any)}"); }
		@Test public void test_23478() { testValid("((any & int) | {any, any})","{!int, (int | any)}"); }
		@Test public void test_23479() { testValid("((any & int) | {any, any})","{{int, int}, (int | any)}"); }
		@Test public void test_23480() { testValid("((any & int) | {any, any})","{(any | any), (int | any)}"); }
		@Test public void test_23481() { testValid("((any & int) | {any, any})","{(int | int), (int | any)}"); }
		@Test public void test_23482() { testValid("((any & int) | {any, any})","{{any}, (any | int)}"); }
		@Test public void test_23483() { testValid("((any & int) | {any, any})","{!int, (any | int)}"); }
		@Test public void test_23484() { testValid("((any & int) | {any, any})","{(any | any), (any | int)}"); }
		@Test public void test_23485() { testValid("((any & int) | {any, any})","{(any | int), (any | int)}"); }
		@Test public void test_23486() { testValid("((any & int) | {any, any})","{(any & int), (any | int)}"); }
		@Test public void test_23487() { testValid("((any & int) | {any, any})","{{int}, (int | int)}"); }
		@Test public void test_23488() { testValid("((any & int) | {any, any})","{{any, any}, (int | int)}"); }
		@Test public void test_23489() { testValid("((any & int) | {any, any})","{{int, int}, (int | int)}"); }
		@Test public void test_23490() { testValid("((any & int) | {any, any})","{{int}, (any & any)}"); }
		@Test public void test_23491() { testValid("((any & int) | {any, any})","{{int, any}, (any & any)}"); }
		@Test public void test_23492() { testValid("((any & int) | {any, any})","{{any, int}, (any & any)}"); }
		@Test public void test_23493() { testValid("((any & int) | {any, any})","{(int | any), (any & any)}"); }
		@Test public void test_23494() { testValid("((any & int) | {any, any})","{(any & any), (any & any)}"); }
		@Test public void test_23495() { testValid("((any & int) | {any, any})","{(int & any), (any & any)}"); }
		@Test public void test_23496() { testValid("((any & int) | {any, any})","{{any}, (int & any)}"); }
		@Test public void test_23497() { testValid("((any & int) | {any, any})","{{int}, (int & any)}"); }
		@Test public void test_23498() { testValid("((any & int) | {any, any})","{{any, any}, (int & any)}"); }
		@Test public void test_23499() { testValid("((any & int) | {any, any})","{{int, any}, (int & any)}"); }
		@Test public void test_23500() { testValid("((any & int) | {any, any})","{(any | int), (int & any)}"); }
		@Test public void test_23501() { testValid("((any & int) | {any, any})","{(any & any), (int & any)}"); }
		@Test public void test_23502() { testValid("((any & int) | {any, any})","{(int & any), (int & any)}"); }
		@Test public void test_23503() { testValid("((any & int) | {any, any})","{(int & int), (int & any)}"); }
		@Test public void test_23504() { testValid("((any & int) | {any, any})","{{int, any}, (any & int)}"); }
		@Test public void test_23505() { testValid("((any & int) | {any, any})","{(any & any), (any & int)}"); }
		@Test public void test_23506() { testValid("((any & int) | {any, any})","{{any, int}, (int & int)}"); }
		@Test public void test_23507() { testValid("((any & int) | {any, any})","{(int | int), (int & int)}"); }
		@Test public void test_23508() { testValid("((any & int) | {any, any})","{(any & any), (int & int)}"); }
		@Test public void test_23509() { testValid("((any & int) | {any, any})","{(any & int), (int & int)}"); }
		@Test public void test_23510() { testValid("((any & int) | {any, any})","{(int & int), (int & int)}"); }
		@Test public void test_23511() { testInvalid("((any & int) | {any, any})","(!int | {any})"); }
		@Test public void test_23512() { testInvalid("((any & int) | {any, any})","({any, any} | {any})"); }
		@Test public void test_23513() { testInvalid("((any & int) | {any, any})","((any | any) | {any})"); }
		@Test public void test_23514() { testInvalid("((any & int) | {any, any})","((int | any) | {any})"); }
		@Test public void test_23515() { testInvalid("((any & int) | {any, any})","((any & any) | {any})"); }
		@Test public void test_23516() { testInvalid("((any & int) | {any, any})","((int & any) | {any})"); }
		@Test public void test_23517() { testInvalid("((any & int) | {any, any})","((any & int) | {any})"); }
		@Test public void test_23518() { testInvalid("((any & int) | {any, any})","({int} | {int})"); }
		@Test public void test_23519() { testInvalid("((any & int) | {any, any})","(!any | {int})"); }
		@Test public void test_23520() { testInvalid("((any & int) | {any, any})","(!int | {int})"); }
		@Test public void test_23521() { testInvalid("((any & int) | {any, any})","({any, int} | {int})"); }
		@Test public void test_23522() { testInvalid("((any & int) | {any, any})","((int & any) | {int})"); }
		@Test public void test_23523() { testInvalid("((any & int) | {any, any})","((any & int) | {int})"); }
		@Test public void test_23524() { testInvalid("((any & int) | {any, any})","((int & int) | {int})"); }
		@Test public void test_23525() { testInvalid("((any & int) | {any, any})","({any} | !any)"); }
		@Test public void test_23526() { testInvalid("((any & int) | {any, any})","({int} | !any)"); }
		@Test public void test_23527() { testValid("((any & int) | {any, any})","({any, any} | !any)"); }
		@Test public void test_23528() { testValid("((any & int) | {any, any})","({int, int} | !any)"); }
		@Test public void test_23529() { testInvalid("((any & int) | {any, any})","((any | any) | !any)"); }
		@Test public void test_23530() { testInvalid("((any & int) | {any, any})","((int | any) | !any)"); }
		@Test public void test_23531() { testValid("((any & int) | {any, any})","((int | int) | !any)"); }
		@Test public void test_23532() { testValid("((any & int) | {any, any})","((int & int) | !any)"); }
		@Test public void test_23533() { testInvalid("((any & int) | {any, any})","(!int | !int)"); }
		@Test public void test_23534() { testInvalid("((any & int) | {any, any})","({any, any} | !int)"); }
		@Test public void test_23535() { testInvalid("((any & int) | {any, any})","({int, int} | !int)"); }
		@Test public void test_23536() { testInvalid("((any & int) | {any, any})","((int | any) | !int)"); }
		@Test public void test_23537() { testInvalid("((any & int) | {any, any})","((any | int) | !int)"); }
		@Test public void test_23538() { testInvalid("((any & int) | {any, any})","((any & int) | !int)"); }
		@Test public void test_23539() { testInvalid("((any & int) | {any, any})","((int & int) | !int)"); }
		@Test public void test_23540() { testInvalid("((any & int) | {any, any})","({int} | {any, any})"); }
		@Test public void test_23541() { testValid("((any & int) | {any, any})","(!any | {any, any})"); }
		@Test public void test_23542() { testInvalid("((any & int) | {any, any})","(!int | {any, any})"); }
		@Test public void test_23543() { testValid("((any & int) | {any, any})","({any, int} | {any, any})"); }
		@Test public void test_23544() { testInvalid("((any & int) | {any, any})","((int | any) | {any, any})"); }
		@Test public void test_23545() { testInvalid("((any & int) | {any, any})","((any & any) | {any, any})"); }
		@Test public void test_23546() { testValid("((any & int) | {any, any})","((any & int) | {any, any})"); }
		@Test public void test_23547() { testInvalid("((any & int) | {any, any})","(!int | {int, any})"); }
		@Test public void test_23548() { testValid("((any & int) | {any, any})","({any, int} | {int, any})"); }
		@Test public void test_23549() { testInvalid("((any & int) | {any, any})","((any | any) | {int, any})"); }
		@Test public void test_23550() { testInvalid("((any & int) | {any, any})","((int | any) | {int, any})"); }
		@Test public void test_23551() { testInvalid("((any & int) | {any, any})","((any | int) | {int, any})"); }
		@Test public void test_23552() { testValid("((any & int) | {any, any})","((int & any) | {int, any})"); }
		@Test public void test_23553() { testInvalid("((any & int) | {any, any})","({any} | {any, int})"); }
		@Test public void test_23554() { testInvalid("((any & int) | {any, any})","(!int | {any, int})"); }
		@Test public void test_23555() { testValid("((any & int) | {any, any})","({any, int} | {any, int})"); }
		@Test public void test_23556() { testInvalid("((any & int) | {any, any})","((any | any) | {any, int})"); }
		@Test public void test_23557() { testInvalid("((any & int) | {any, any})","((any | int) | {any, int})"); }
		@Test public void test_23558() { testValid("((any & int) | {any, any})","((int | int) | {any, int})"); }
		@Test public void test_23559() { testValid("((any & int) | {any, any})","((int & any) | {any, int})"); }
		@Test public void test_23560() { testValid("((any & int) | {any, any})","(!any | {int, int})"); }
		@Test public void test_23561() { testInvalid("((any & int) | {any, any})","(!int | {int, int})"); }
		@Test public void test_23562() { testValid("((any & int) | {any, any})","({any, any} | {int, int})"); }
		@Test public void test_23563() { testValid("((any & int) | {any, any})","({any, int} | {int, int})"); }
		@Test public void test_23564() { testInvalid("((any & int) | {any, any})","((any | any) | {int, int})"); }
		@Test public void test_23565() { testValid("((any & int) | {any, any})","((int | int) | {int, int})"); }
		@Test public void test_23566() { testValid("((any & int) | {any, any})","((int & any) | {int, int})"); }
		@Test public void test_23567() { testValid("((any & int) | {any, any})","((any & int) | {int, int})"); }
		@Test public void test_23568() { testValid("((any & int) | {any, any})","((int & int) | {int, int})"); }
		@Test public void test_23569() { testInvalid("((any & int) | {any, any})","({any} | (any | any))"); }
		@Test public void test_23570() { testInvalid("((any & int) | {any, any})","(!any | (any | any))"); }
		@Test public void test_23571() { testInvalid("((any & int) | {any, any})","({any, any} | (any | any))"); }
		@Test public void test_23572() { testInvalid("((any & int) | {any, any})","({any, int} | (any | any))"); }
		@Test public void test_23573() { testInvalid("((any & int) | {any, any})","({int, int} | (any | any))"); }
		@Test public void test_23574() { testInvalid("((any & int) | {any, any})","((int | any) | (any | any))"); }
		@Test public void test_23575() { testInvalid("((any & int) | {any, any})","((any | int) | (any | any))"); }
		@Test public void test_23576() { testInvalid("((any & int) | {any, any})","((any & int) | (any | any))"); }
		@Test public void test_23577() { testInvalid("((any & int) | {any, any})","((int & int) | (any | any))"); }
		@Test public void test_23578() { testInvalid("((any & int) | {any, any})","({any} | (int | any))"); }
		@Test public void test_23579() { testInvalid("((any & int) | {any, any})","(!int | (int | any))"); }
		@Test public void test_23580() { testInvalid("((any & int) | {any, any})","({int, any} | (int | any))"); }
		@Test public void test_23581() { testInvalid("((any & int) | {any, any})","({any, int} | (int | any))"); }
		@Test public void test_23582() { testInvalid("((any & int) | {any, any})","((int & any) | (int | any))"); }
		@Test public void test_23583() { testInvalid("((any & int) | {any, any})","((any & int) | (int | any))"); }
		@Test public void test_23584() { testInvalid("((any & int) | {any, any})","({any} | (any | int))"); }
		@Test public void test_23585() { testInvalid("((any & int) | {any, any})","({int} | (any | int))"); }
		@Test public void test_23586() { testInvalid("((any & int) | {any, any})","(!any | (any | int))"); }
		@Test public void test_23587() { testInvalid("((any & int) | {any, any})","(!int | (any | int))"); }
		@Test public void test_23588() { testInvalid("((any & int) | {any, any})","({any, int} | (any | int))"); }
		@Test public void test_23589() { testInvalid("((any & int) | {any, any})","({int, int} | (any | int))"); }
		@Test public void test_23590() { testInvalid("((any & int) | {any, any})","((int | any) | (any | int))"); }
		@Test public void test_23591() { testInvalid("((any & int) | {any, any})","((any | int) | (any | int))"); }
		@Test public void test_23592() { testInvalid("((any & int) | {any, any})","((int | int) | (any | int))"); }
		@Test public void test_23593() { testInvalid("((any & int) | {any, any})","((any & any) | (any | int))"); }
		@Test public void test_23594() { testInvalid("((any & int) | {any, any})","({int} | (int | int))"); }
		@Test public void test_23595() { testValid("((any & int) | {any, any})","(!any | (int | int))"); }
		@Test public void test_23596() { testInvalid("((any & int) | {any, any})","(!int | (int | int))"); }
		@Test public void test_23597() { testValid("((any & int) | {any, any})","({int, any} | (int | int))"); }
		@Test public void test_23598() { testValid("((any & int) | {any, any})","({any, int} | (int | int))"); }
		@Test public void test_23599() { testInvalid("((any & int) | {any, any})","((any | int) | (int | int))"); }
		@Test public void test_23600() { testValid("((any & int) | {any, any})","((int | int) | (int | int))"); }
		@Test public void test_23601() { testInvalid("((any & int) | {any, any})","((any & any) | (int | int))"); }
		@Test public void test_23602() { testValid("((any & int) | {any, any})","((int & any) | (int | int))"); }
		@Test public void test_23603() { testValid("((any & int) | {any, any})","((int & int) | (int | int))"); }
		@Test public void test_23604() { testInvalid("((any & int) | {any, any})","(!any | (any & any))"); }
		@Test public void test_23605() { testInvalid("((any & int) | {any, any})","(!int | (any & any))"); }
		@Test public void test_23606() { testInvalid("((any & int) | {any, any})","({any, any} | (any & any))"); }
		@Test public void test_23607() { testInvalid("((any & int) | {any, any})","({int, any} | (any & any))"); }
		@Test public void test_23608() { testInvalid("((any & int) | {any, any})","({any, int} | (any & any))"); }
		@Test public void test_23609() { testInvalid("((any & int) | {any, any})","({int, int} | (any & any))"); }
		@Test public void test_23610() { testInvalid("((any & int) | {any, any})","((int | any) | (any & any))"); }
		@Test public void test_23611() { testInvalid("((any & int) | {any, any})","((int | int) | (any & any))"); }
		@Test public void test_23612() { testInvalid("((any & int) | {any, any})","((int & any) | (any & any))"); }
		@Test public void test_23613() { testInvalid("((any & int) | {any, any})","((any & int) | (any & any))"); }
		@Test public void test_23614() { testInvalid("((any & int) | {any, any})","((int & int) | (any & any))"); }
		@Test public void test_23615() { testInvalid("((any & int) | {any, any})","({any} | (int & any))"); }
		@Test public void test_23616() { testValid("(!int | {int, any})","{int}"); }
		@Test public void test_23617() { testValid("(!int | {int, any})","{any, any}"); }
		@Test public void test_23618() { testValid("(!int | {int, any})","{int, int}"); }
		@Test public void test_23619() { testInvalid("(!int | {int, any})","(any | int)"); }
		@Test public void test_23620() { testInvalid("(!int | {int, any})","(int & any)"); }
		@Test public void test_23621() { testValid("(!int | {int, any})","{{any}}"); }
		@Test public void test_23622() { testValid("(!int | {int, any})","{{int, any}}"); }
		@Test public void test_23623() { testValid("(!int | {int, any})","{{int, int}}"); }
		@Test public void test_23624() { testValid("(!int | {int, any})","{(any | int)}"); }
		@Test public void test_23625() { testInvalid("(!int | {int, any})","!{int, any}"); }
		@Test public void test_23626() { testInvalid("(!int | {int, any})","!{int, int}"); }
		@Test public void test_23627() { testValid("(!int | {int, any})","!(any | any)"); }
		@Test public void test_23628() { testValid("(!int | {int, any})","!(any & any)"); }
		@Test public void test_23629() { testValid("(!int | {int, any})","!(int & int)"); }
		@Test public void test_23630() { testValid("(!int | {int, any})","{{int}, {any}}"); }
		@Test public void test_23631() { testValid("(!int | {int, any})","{!int, {any}}"); }
		@Test public void test_23632() { testValid("(!int | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_23633() { testValid("(!int | {int, any})","{(any | int), {any}}"); }
		@Test public void test_23634() { testValid("(!int | {int, any})","{!int, {int}}"); }
		@Test public void test_23635() { testValid("(!int | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_23636() { testValid("(!int | {int, any})","{(any | any), {int}}"); }
		@Test public void test_23637() { testValid("(!int | {int, any})","{(any & any), {int}}"); }
		@Test public void test_23638() { testValid("(!int | {int, any})","{(any & int), {int}}"); }
		@Test public void test_23639() { testValid("(!int | {int, any})","{{any, any}, !int}"); }
		@Test public void test_23640() { testValid("(!int | {int, any})","{{any, int}, !int}"); }
		@Test public void test_23641() { testValid("(!int | {int, any})","{(any | any), !int}"); }
		@Test public void test_23642() { testValid("(!int | {int, any})","{(int | any), !int}"); }
		@Test public void test_23643() { testValid("(!int | {int, any})","{(any & any), !int}"); }
		@Test public void test_23644() { testValid("(!int | {int, any})","{(int & any), !int}"); }
		@Test public void test_23645() { testValid("(!int | {int, any})","{(int & int), !int}"); }
		@Test public void test_23646() { testValid("(!int | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_23647() { testValid("(!int | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_23648() { testValid("(!int | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_23649() { testValid("(!int | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_23650() { testValid("(!int | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_23651() { testValid("(!int | {int, any})","{!int, {int, any}}"); }
		@Test public void test_23652() { testValid("(!int | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_23653() { testValid("(!int | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_23654() { testValid("(!int | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_23655() { testValid("(!int | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_23656() { testValid("(!int | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_23657() { testValid("(!int | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_23658() { testValid("(!int | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_23659() { testValid("(!int | {int, any})","{!int, {int, int}}"); }
		@Test public void test_23660() { testValid("(!int | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_23661() { testValid("(!int | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_23662() { testValid("(!int | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_23663() { testValid("(!int | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_23664() { testValid("(!int | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_23665() { testValid("(!int | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_23666() { testValid("(!int | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_23667() { testValid("(!int | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_23668() { testValid("(!int | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_23669() { testValid("(!int | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_23670() { testValid("(!int | {int, any})","{!int, (int | any)}"); }
		@Test public void test_23671() { testValid("(!int | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_23672() { testValid("(!int | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_23673() { testValid("(!int | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_23674() { testValid("(!int | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_23675() { testValid("(!int | {int, any})","{!int, (any | int)}"); }
		@Test public void test_23676() { testValid("(!int | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_23677() { testValid("(!int | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_23678() { testValid("(!int | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_23679() { testValid("(!int | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_23680() { testValid("(!int | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_23681() { testValid("(!int | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_23682() { testValid("(!int | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_23683() { testValid("(!int | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_23684() { testValid("(!int | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_23685() { testValid("(!int | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_23686() { testValid("(!int | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_23687() { testValid("(!int | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_23688() { testValid("(!int | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_23689() { testValid("(!int | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_23690() { testValid("(!int | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_23691() { testValid("(!int | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_23692() { testValid("(!int | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_23693() { testValid("(!int | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_23694() { testValid("(!int | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_23695() { testValid("(!int | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_23696() { testValid("(!int | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_23697() { testValid("(!int | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_23698() { testValid("(!int | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_23699() { testValid("(!int | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_23700() { testValid("(!int | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_23701() { testValid("(!int | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_23702() { testValid("(!int | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_23703() { testValid("(!int | {int, any})","(!int | {any})"); }
		@Test public void test_23704() { testValid("(!int | {int, any})","({any, any} | {any})"); }
		@Test public void test_23705() { testInvalid("(!int | {int, any})","((any | any) | {any})"); }
		@Test public void test_23706() { testInvalid("(!int | {int, any})","((int | any) | {any})"); }
		@Test public void test_23707() { testInvalid("(!int | {int, any})","((any & any) | {any})"); }
		@Test public void test_23708() { testInvalid("(!int | {int, any})","((int & any) | {any})"); }
		@Test public void test_23709() { testInvalid("(!int | {int, any})","((any & int) | {any})"); }
		@Test public void test_23710() { testValid("(!int | {int, any})","({int} | {int})"); }
		@Test public void test_23711() { testValid("(!int | {int, any})","(!any | {int})"); }
		@Test public void test_23712() { testValid("(!int | {int, any})","(!int | {int})"); }
		@Test public void test_23713() { testValid("(!int | {int, any})","({any, int} | {int})"); }
		@Test public void test_23714() { testInvalid("(!int | {int, any})","((int & any) | {int})"); }
		@Test public void test_23715() { testInvalid("(!int | {int, any})","((any & int) | {int})"); }
		@Test public void test_23716() { testInvalid("(!int | {int, any})","((int & int) | {int})"); }
		@Test public void test_23717() { testValid("(!int | {int, any})","({any} | !any)"); }
		@Test public void test_23718() { testValid("(!int | {int, any})","({int} | !any)"); }
		@Test public void test_23719() { testValid("(!int | {int, any})","({any, any} | !any)"); }
		@Test public void test_23720() { testValid("(!int | {int, any})","({int, int} | !any)"); }
		@Test public void test_23721() { testInvalid("(!int | {int, any})","((any | any) | !any)"); }
		@Test public void test_23722() { testInvalid("(!int | {int, any})","((int | any) | !any)"); }
		@Test public void test_23723() { testInvalid("(!int | {int, any})","((int | int) | !any)"); }
		@Test public void test_23724() { testInvalid("(!int | {int, any})","((int & int) | !any)"); }
		@Test public void test_23725() { testValid("(!int | {int, any})","(!int | !int)"); }
		@Test public void test_23726() { testValid("(!int | {int, any})","({any, any} | !int)"); }
		@Test public void test_23727() { testValid("(!int | {int, any})","({int, int} | !int)"); }
		@Test public void test_23728() { testInvalid("(!int | {int, any})","((int | any) | !int)"); }
		@Test public void test_23729() { testInvalid("(!int | {int, any})","((any | int) | !int)"); }
		@Test public void test_23730() { testInvalid("(!int | {int, any})","((any & int) | !int)"); }
		@Test public void test_23731() { testInvalid("(!int | {int, any})","((int & int) | !int)"); }
		@Test public void test_23732() { testValid("(!int | {int, any})","({int} | {any, any})"); }
		@Test public void test_23733() { testValid("(!int | {int, any})","(!any | {any, any})"); }
		@Test public void test_23734() { testValid("(!int | {int, any})","(!int | {any, any})"); }
		@Test public void test_23735() { testValid("(!int | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_23736() { testInvalid("(!int | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_23737() { testInvalid("(!int | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_23738() { testInvalid("(!int | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_23739() { testValid("(!int | {int, any})","(!int | {int, any})"); }
		@Test public void test_23740() { testValid("(!int | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_23741() { testInvalid("(!int | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_23742() { testInvalid("(!int | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_23743() { testInvalid("(!int | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_23744() { testInvalid("(!int | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_23745() { testValid("(!int | {int, any})","({any} | {any, int})"); }
		@Test public void test_23746() { testValid("(!int | {int, any})","(!int | {any, int})"); }
		@Test public void test_23747() { testValid("(!int | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_23748() { testInvalid("(!int | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_23749() { testInvalid("(!int | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_23750() { testInvalid("(!int | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_23751() { testInvalid("(!int | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_23752() { testValid("(!int | {int, any})","(!any | {int, int})"); }
		@Test public void test_23753() { testValid("(!int | {int, any})","(!int | {int, int})"); }
		@Test public void test_23754() { testValid("(!int | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_23755() { testValid("(!int | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_23756() { testInvalid("(!int | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_23757() { testInvalid("(!int | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_23758() { testInvalid("(!int | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_23759() { testInvalid("(!int | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_23760() { testInvalid("(!int | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_23761() { testInvalid("(!int | {int, any})","({any} | (any | any))"); }
		@Test public void test_23762() { testInvalid("(!int | {int, any})","(!any | (any | any))"); }
		@Test public void test_23763() { testInvalid("(!int | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_23764() { testInvalid("(!int | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_23765() { testInvalid("(!int | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_23766() { testInvalid("(!int | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_23767() { testInvalid("(!int | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_23768() { testInvalid("(!int | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_23769() { testInvalid("(!int | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_23770() { testInvalid("(!int | {int, any})","({any} | (int | any))"); }
		@Test public void test_23771() { testInvalid("(!int | {int, any})","(!int | (int | any))"); }
		@Test public void test_23772() { testInvalid("(!int | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_23773() { testInvalid("(!int | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_23774() { testInvalid("(!int | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_23775() { testInvalid("(!int | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_23776() { testInvalid("(!int | {int, any})","({any} | (any | int))"); }
		@Test public void test_23777() { testInvalid("(!int | {int, any})","({int} | (any | int))"); }
		@Test public void test_23778() { testInvalid("(!int | {int, any})","(!any | (any | int))"); }
		@Test public void test_23779() { testInvalid("(!int | {int, any})","(!int | (any | int))"); }
		@Test public void test_23780() { testInvalid("(!int | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_23781() { testInvalid("(!int | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_23782() { testInvalid("(!int | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_23783() { testInvalid("(!int | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_23784() { testInvalid("(!int | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_23785() { testInvalid("(!int | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_23786() { testInvalid("(!int | {int, any})","({int} | (int | int))"); }
		@Test public void test_23787() { testInvalid("(!int | {int, any})","(!any | (int | int))"); }
		@Test public void test_23788() { testInvalid("(!int | {int, any})","(!int | (int | int))"); }
		@Test public void test_23789() { testInvalid("(!int | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_23790() { testInvalid("(!int | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_23791() { testInvalid("(!int | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_23792() { testInvalid("(!int | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_23793() { testInvalid("(!int | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_23794() { testInvalid("(!int | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_23795() { testInvalid("(!int | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_23796() { testInvalid("(!int | {int, any})","(!any | (any & any))"); }
		@Test public void test_23797() { testInvalid("(!int | {int, any})","(!int | (any & any))"); }
		@Test public void test_23798() { testInvalid("(!int | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_23799() { testInvalid("(!int | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_23800() { testInvalid("(!int | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_23801() { testInvalid("(!int | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_23802() { testInvalid("(!int | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_23803() { testInvalid("(!int | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_23804() { testInvalid("(!int | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_23805() { testInvalid("(!int | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_23806() { testInvalid("(!int | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_23807() { testInvalid("(!int | {int, any})","({any} | (int & any))"); }
		@Test public void test_23808() { testInvalid("({any, int} | {int, any})","{int}"); }
		@Test public void test_23809() { testInvalid("({any, int} | {int, any})","{any, any}"); }
		@Test public void test_23810() { testValid("({any, int} | {int, any})","{int, int}"); }
		@Test public void test_23811() { testInvalid("({any, int} | {int, any})","(any | int)"); }
		@Test public void test_23812() { testInvalid("({any, int} | {int, any})","(int & any)"); }
		@Test public void test_23813() { testInvalid("({any, int} | {int, any})","{{any}}"); }
		@Test public void test_23814() { testInvalid("({any, int} | {int, any})","{{int, any}}"); }
		@Test public void test_23815() { testInvalid("({any, int} | {int, any})","{{int, int}}"); }
		@Test public void test_23816() { testInvalid("({any, int} | {int, any})","{(any | int)}"); }
		@Test public void test_23817() { testInvalid("({any, int} | {int, any})","!{int, any}"); }
		@Test public void test_23818() { testInvalid("({any, int} | {int, any})","!{int, int}"); }
		@Test public void test_23819() { testValid("({any, int} | {int, any})","!(any | any)"); }
		@Test public void test_23820() { testValid("({any, int} | {int, any})","!(any & any)"); }
		@Test public void test_23821() { testInvalid("({any, int} | {int, any})","!(int & int)"); }
		@Test public void test_23822() { testInvalid("({any, int} | {int, any})","{{int}, {any}}"); }
		@Test public void test_23823() { testInvalid("({any, int} | {int, any})","{!int, {any}}"); }
		@Test public void test_23824() { testInvalid("({any, int} | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_23825() { testInvalid("({any, int} | {int, any})","{(any | int), {any}}"); }
		@Test public void test_23826() { testInvalid("({any, int} | {int, any})","{!int, {int}}"); }
		@Test public void test_23827() { testInvalid("({any, int} | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_23828() { testInvalid("({any, int} | {int, any})","{(any | any), {int}}"); }
		@Test public void test_23829() { testInvalid("({any, int} | {int, any})","{(any & any), {int}}"); }
		@Test public void test_23830() { testValid("({any, int} | {int, any})","{(any & int), {int}}"); }
		@Test public void test_23831() { testInvalid("({any, int} | {int, any})","{{any, any}, !int}"); }
		@Test public void test_23832() { testInvalid("({any, int} | {int, any})","{{any, int}, !int}"); }
		@Test public void test_23833() { testInvalid("({any, int} | {int, any})","{(any | any), !int}"); }
		@Test public void test_23834() { testInvalid("({any, int} | {int, any})","{(int | any), !int}"); }
		@Test public void test_23835() { testInvalid("({any, int} | {int, any})","{(any & any), !int}"); }
		@Test public void test_23836() { testValid("({any, int} | {int, any})","{(int & any), !int}"); }
		@Test public void test_23837() { testValid("({any, int} | {int, any})","{(int & int), !int}"); }
		@Test public void test_23838() { testInvalid("({any, int} | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_23839() { testInvalid("({any, int} | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_23840() { testInvalid("({any, int} | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_23841() { testInvalid("({any, int} | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_23842() { testInvalid("({any, int} | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_23843() { testInvalid("({any, int} | {int, any})","{!int, {int, any}}"); }
		@Test public void test_23844() { testInvalid("({any, int} | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_23845() { testInvalid("({any, int} | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_23846() { testValid("({any, int} | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_23847() { testInvalid("({any, int} | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_23848() { testInvalid("({any, int} | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_23849() { testValid("({any, int} | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_23850() { testValid("({any, int} | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_23851() { testInvalid("({any, int} | {int, any})","{!int, {int, int}}"); }
		@Test public void test_23852() { testInvalid("({any, int} | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_23853() { testInvalid("({any, int} | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_23854() { testInvalid("({any, int} | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_23855() { testValid("({any, int} | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_23856() { testInvalid("({any, int} | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_23857() { testInvalid("({any, int} | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_23858() { testInvalid("({any, int} | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_23859() { testInvalid("({any, int} | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_23860() { testInvalid("({any, int} | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_23861() { testValid("({any, int} | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_23862() { testInvalid("({any, int} | {int, any})","{!int, (int | any)}"); }
		@Test public void test_23863() { testInvalid("({any, int} | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_23864() { testInvalid("({any, int} | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_23865() { testValid("({any, int} | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_23866() { testInvalid("({any, int} | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_23867() { testInvalid("({any, int} | {int, any})","{!int, (any | int)}"); }
		@Test public void test_23868() { testInvalid("({any, int} | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_23869() { testInvalid("({any, int} | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_23870() { testValid("({any, int} | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_23871() { testValid("({any, int} | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_23872() { testValid("({any, int} | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_23873() { testValid("({any, int} | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_23874() { testInvalid("({any, int} | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_23875() { testInvalid("({any, int} | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_23876() { testInvalid("({any, int} | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_23877() { testInvalid("({any, int} | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_23878() { testInvalid("({any, int} | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_23879() { testValid("({any, int} | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_23880() { testValid("({any, int} | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_23881() { testValid("({any, int} | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_23882() { testValid("({any, int} | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_23883() { testValid("({any, int} | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_23884() { testValid("({any, int} | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_23885() { testValid("({any, int} | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_23886() { testValid("({any, int} | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_23887() { testValid("({any, int} | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_23888() { testValid("({any, int} | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_23889() { testValid("({any, int} | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_23890() { testValid("({any, int} | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_23891() { testValid("({any, int} | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_23892() { testValid("({any, int} | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_23893() { testValid("({any, int} | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_23894() { testValid("({any, int} | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_23895() { testInvalid("({any, int} | {int, any})","(!int | {any})"); }
		@Test public void test_23896() { testInvalid("({any, int} | {int, any})","({any, any} | {any})"); }
		@Test public void test_23897() { testInvalid("({any, int} | {int, any})","((any | any) | {any})"); }
		@Test public void test_23898() { testInvalid("({any, int} | {int, any})","((int | any) | {any})"); }
		@Test public void test_23899() { testInvalid("({any, int} | {int, any})","((any & any) | {any})"); }
		@Test public void test_23900() { testInvalid("({any, int} | {int, any})","((int & any) | {any})"); }
		@Test public void test_23901() { testInvalid("({any, int} | {int, any})","((any & int) | {any})"); }
		@Test public void test_23902() { testInvalid("({any, int} | {int, any})","({int} | {int})"); }
		@Test public void test_23903() { testInvalid("({any, int} | {int, any})","(!any | {int})"); }
		@Test public void test_23904() { testInvalid("({any, int} | {int, any})","(!int | {int})"); }
		@Test public void test_23905() { testInvalid("({any, int} | {int, any})","({any, int} | {int})"); }
		@Test public void test_23906() { testInvalid("({any, int} | {int, any})","((int & any) | {int})"); }
		@Test public void test_23907() { testInvalid("({any, int} | {int, any})","((any & int) | {int})"); }
		@Test public void test_23908() { testInvalid("({any, int} | {int, any})","((int & int) | {int})"); }
		@Test public void test_23909() { testInvalid("({any, int} | {int, any})","({any} | !any)"); }
		@Test public void test_23910() { testInvalid("({any, int} | {int, any})","({int} | !any)"); }
		@Test public void test_23911() { testInvalid("({any, int} | {int, any})","({any, any} | !any)"); }
		@Test public void test_23912() { testValid("({any, int} | {int, any})","({int, int} | !any)"); }
		@Test public void test_23913() { testInvalid("({any, int} | {int, any})","((any | any) | !any)"); }
		@Test public void test_23914() { testInvalid("({any, int} | {int, any})","((int | any) | !any)"); }
		@Test public void test_23915() { testInvalid("({any, int} | {int, any})","((int | int) | !any)"); }
		@Test public void test_23916() { testInvalid("({any, int} | {int, any})","((int & int) | !any)"); }
		@Test public void test_23917() { testInvalid("({any, int} | {int, any})","(!int | !int)"); }
		@Test public void test_23918() { testInvalid("({any, int} | {int, any})","({any, any} | !int)"); }
		@Test public void test_23919() { testInvalid("({any, int} | {int, any})","({int, int} | !int)"); }
		@Test public void test_23920() { testInvalid("({any, int} | {int, any})","((int | any) | !int)"); }
		@Test public void test_23921() { testInvalid("({any, int} | {int, any})","((any | int) | !int)"); }
		@Test public void test_23922() { testInvalid("({any, int} | {int, any})","((any & int) | !int)"); }
		@Test public void test_23923() { testInvalid("({any, int} | {int, any})","((int & int) | !int)"); }
		@Test public void test_23924() { testInvalid("({any, int} | {int, any})","({int} | {any, any})"); }
		@Test public void test_23925() { testInvalid("({any, int} | {int, any})","(!any | {any, any})"); }
		@Test public void test_23926() { testInvalid("({any, int} | {int, any})","(!int | {any, any})"); }
		@Test public void test_23927() { testInvalid("({any, int} | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_23928() { testInvalid("({any, int} | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_23929() { testInvalid("({any, int} | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_23930() { testInvalid("({any, int} | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_23931() { testInvalid("({any, int} | {int, any})","(!int | {int, any})"); }
		@Test public void test_23932() { testValid("({any, int} | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_23933() { testInvalid("({any, int} | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_23934() { testInvalid("({any, int} | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_23935() { testInvalid("({any, int} | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_23936() { testInvalid("({any, int} | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_23937() { testInvalid("({any, int} | {int, any})","({any} | {any, int})"); }
		@Test public void test_23938() { testInvalid("({any, int} | {int, any})","(!int | {any, int})"); }
		@Test public void test_23939() { testValid("({any, int} | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_23940() { testInvalid("({any, int} | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_23941() { testInvalid("({any, int} | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_23942() { testInvalid("({any, int} | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_23943() { testInvalid("({any, int} | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_23944() { testValid("({any, int} | {int, any})","(!any | {int, int})"); }
		@Test public void test_23945() { testInvalid("({any, int} | {int, any})","(!int | {int, int})"); }
		@Test public void test_23946() { testInvalid("({any, int} | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_23947() { testValid("({any, int} | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_23948() { testInvalid("({any, int} | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_23949() { testInvalid("({any, int} | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_23950() { testInvalid("({any, int} | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_23951() { testInvalid("({any, int} | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_23952() { testInvalid("({any, int} | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_23953() { testInvalid("({any, int} | {int, any})","({any} | (any | any))"); }
		@Test public void test_23954() { testInvalid("({any, int} | {int, any})","(!any | (any | any))"); }
		@Test public void test_23955() { testInvalid("({any, int} | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_23956() { testInvalid("({any, int} | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_23957() { testInvalid("({any, int} | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_23958() { testInvalid("({any, int} | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_23959() { testInvalid("({any, int} | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_23960() { testInvalid("({any, int} | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_23961() { testInvalid("({any, int} | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_23962() { testInvalid("({any, int} | {int, any})","({any} | (int | any))"); }
		@Test public void test_23963() { testInvalid("({any, int} | {int, any})","(!int | (int | any))"); }
		@Test public void test_23964() { testInvalid("({any, int} | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_23965() { testInvalid("({any, int} | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_23966() { testInvalid("({any, int} | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_23967() { testInvalid("({any, int} | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_23968() { testInvalid("({any, int} | {int, any})","({any} | (any | int))"); }
		@Test public void test_23969() { testInvalid("({any, int} | {int, any})","({int} | (any | int))"); }
		@Test public void test_23970() { testInvalid("({any, int} | {int, any})","(!any | (any | int))"); }
		@Test public void test_23971() { testInvalid("({any, int} | {int, any})","(!int | (any | int))"); }
		@Test public void test_23972() { testInvalid("({any, int} | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_23973() { testInvalid("({any, int} | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_23974() { testInvalid("({any, int} | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_23975() { testInvalid("({any, int} | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_23976() { testInvalid("({any, int} | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_23977() { testInvalid("({any, int} | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_23978() { testInvalid("({any, int} | {int, any})","({int} | (int | int))"); }
		@Test public void test_23979() { testInvalid("({any, int} | {int, any})","(!any | (int | int))"); }
		@Test public void test_23980() { testInvalid("({any, int} | {int, any})","(!int | (int | int))"); }
		@Test public void test_23981() { testInvalid("({any, int} | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_23982() { testInvalid("({any, int} | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_23983() { testInvalid("({any, int} | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_23984() { testInvalid("({any, int} | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_23985() { testInvalid("({any, int} | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_23986() { testInvalid("({any, int} | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_23987() { testInvalid("({any, int} | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_23988() { testInvalid("({any, int} | {int, any})","(!any | (any & any))"); }
		@Test public void test_23989() { testInvalid("({any, int} | {int, any})","(!int | (any & any))"); }
		@Test public void test_23990() { testInvalid("({any, int} | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_23991() { testInvalid("({any, int} | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_23992() { testInvalid("({any, int} | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_23993() { testInvalid("({any, int} | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_23994() { testInvalid("({any, int} | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_23995() { testInvalid("({any, int} | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_23996() { testInvalid("({any, int} | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_23997() { testInvalid("({any, int} | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_23998() { testInvalid("({any, int} | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_23999() { testInvalid("({any, int} | {int, any})","({any} | (int & any))"); }
		@Test public void test_24000() { testValid("((any | any) | {int, any})","{int}"); }
		@Test public void test_24001() { testValid("((any | any) | {int, any})","{any, any}"); }
		@Test public void test_24002() { testValid("((any | any) | {int, any})","{int, int}"); }
		@Test public void test_24003() { testValid("((any | any) | {int, any})","(any | int)"); }
		@Test public void test_24004() { testValid("((any | any) | {int, any})","(int & any)"); }
		@Test public void test_24005() { testValid("((any | any) | {int, any})","{{any}}"); }
		@Test public void test_24006() { testValid("((any | any) | {int, any})","{{int, any}}"); }
		@Test public void test_24007() { testValid("((any | any) | {int, any})","{{int, int}}"); }
		@Test public void test_24008() { testValid("((any | any) | {int, any})","{(any | int)}"); }
		@Test public void test_24009() { testValid("((any | any) | {int, any})","!{int, any}"); }
		@Test public void test_24010() { testValid("((any | any) | {int, any})","!{int, int}"); }
		@Test public void test_24011() { testValid("((any | any) | {int, any})","!(any | any)"); }
		@Test public void test_24012() { testValid("((any | any) | {int, any})","!(any & any)"); }
		@Test public void test_24013() { testValid("((any | any) | {int, any})","!(int & int)"); }
		@Test public void test_24014() { testValid("((any | any) | {int, any})","{{int}, {any}}"); }
		@Test public void test_24015() { testValid("((any | any) | {int, any})","{!int, {any}}"); }
		@Test public void test_24016() { testValid("((any | any) | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_24017() { testValid("((any | any) | {int, any})","{(any | int), {any}}"); }
		@Test public void test_24018() { testValid("((any | any) | {int, any})","{!int, {int}}"); }
		@Test public void test_24019() { testValid("((any | any) | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_24020() { testValid("((any | any) | {int, any})","{(any | any), {int}}"); }
		@Test public void test_24021() { testValid("((any | any) | {int, any})","{(any & any), {int}}"); }
		@Test public void test_24022() { testValid("((any | any) | {int, any})","{(any & int), {int}}"); }
		@Test public void test_24023() { testValid("((any | any) | {int, any})","{{any, any}, !int}"); }
		@Test public void test_24024() { testValid("((any | any) | {int, any})","{{any, int}, !int}"); }
		@Test public void test_24025() { testValid("((any | any) | {int, any})","{(any | any), !int}"); }
		@Test public void test_24026() { testValid("((any | any) | {int, any})","{(int | any), !int}"); }
		@Test public void test_24027() { testValid("((any | any) | {int, any})","{(any & any), !int}"); }
		@Test public void test_24028() { testValid("((any | any) | {int, any})","{(int & any), !int}"); }
		@Test public void test_24029() { testValid("((any | any) | {int, any})","{(int & int), !int}"); }
		@Test public void test_24030() { testValid("((any | any) | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_24031() { testValid("((any | any) | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_24032() { testValid("((any | any) | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_24033() { testValid("((any | any) | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_24034() { testValid("((any | any) | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_24035() { testValid("((any | any) | {int, any})","{!int, {int, any}}"); }
		@Test public void test_24036() { testValid("((any | any) | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_24037() { testValid("((any | any) | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_24038() { testValid("((any | any) | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_24039() { testValid("((any | any) | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_24040() { testValid("((any | any) | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_24041() { testValid("((any | any) | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_24042() { testValid("((any | any) | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_24043() { testValid("((any | any) | {int, any})","{!int, {int, int}}"); }
		@Test public void test_24044() { testValid("((any | any) | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_24045() { testValid("((any | any) | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_24046() { testValid("((any | any) | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_24047() { testValid("((any | any) | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_24048() { testValid("((any | any) | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_24049() { testValid("((any | any) | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_24050() { testValid("((any | any) | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_24051() { testValid("((any | any) | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_24052() { testValid("((any | any) | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_24053() { testValid("((any | any) | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_24054() { testValid("((any | any) | {int, any})","{!int, (int | any)}"); }
		@Test public void test_24055() { testValid("((any | any) | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_24056() { testValid("((any | any) | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_24057() { testValid("((any | any) | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_24058() { testValid("((any | any) | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_24059() { testValid("((any | any) | {int, any})","{!int, (any | int)}"); }
		@Test public void test_24060() { testValid("((any | any) | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_24061() { testValid("((any | any) | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_24062() { testValid("((any | any) | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_24063() { testValid("((any | any) | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_24064() { testValid("((any | any) | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_24065() { testValid("((any | any) | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_24066() { testValid("((any | any) | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_24067() { testValid("((any | any) | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_24068() { testValid("((any | any) | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_24069() { testValid("((any | any) | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_24070() { testValid("((any | any) | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_24071() { testValid("((any | any) | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_24072() { testValid("((any | any) | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_24073() { testValid("((any | any) | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_24074() { testValid("((any | any) | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_24075() { testValid("((any | any) | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_24076() { testValid("((any | any) | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_24077() { testValid("((any | any) | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_24078() { testValid("((any | any) | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_24079() { testValid("((any | any) | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_24080() { testValid("((any | any) | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_24081() { testValid("((any | any) | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_24082() { testValid("((any | any) | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_24083() { testValid("((any | any) | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_24084() { testValid("((any | any) | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_24085() { testValid("((any | any) | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_24086() { testValid("((any | any) | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_24087() { testValid("((any | any) | {int, any})","(!int | {any})"); }
		@Test public void test_24088() { testValid("((any | any) | {int, any})","({any, any} | {any})"); }
		@Test public void test_24089() { testValid("((any | any) | {int, any})","((any | any) | {any})"); }
		@Test public void test_24090() { testValid("((any | any) | {int, any})","((int | any) | {any})"); }
		@Test public void test_24091() { testValid("((any | any) | {int, any})","((any & any) | {any})"); }
		@Test public void test_24092() { testValid("((any | any) | {int, any})","((int & any) | {any})"); }
		@Test public void test_24093() { testValid("((any | any) | {int, any})","((any & int) | {any})"); }
		@Test public void test_24094() { testValid("((any | any) | {int, any})","({int} | {int})"); }
		@Test public void test_24095() { testValid("((any | any) | {int, any})","(!any | {int})"); }
		@Test public void test_24096() { testValid("((any | any) | {int, any})","(!int | {int})"); }
		@Test public void test_24097() { testValid("((any | any) | {int, any})","({any, int} | {int})"); }
		@Test public void test_24098() { testValid("((any | any) | {int, any})","((int & any) | {int})"); }
		@Test public void test_24099() { testValid("((any | any) | {int, any})","((any & int) | {int})"); }
		@Test public void test_24100() { testValid("((any | any) | {int, any})","((int & int) | {int})"); }
		@Test public void test_24101() { testValid("((any | any) | {int, any})","({any} | !any)"); }
		@Test public void test_24102() { testValid("((any | any) | {int, any})","({int} | !any)"); }
		@Test public void test_24103() { testValid("((any | any) | {int, any})","({any, any} | !any)"); }
		@Test public void test_24104() { testValid("((any | any) | {int, any})","({int, int} | !any)"); }
		@Test public void test_24105() { testValid("((any | any) | {int, any})","((any | any) | !any)"); }
		@Test public void test_24106() { testValid("((any | any) | {int, any})","((int | any) | !any)"); }
		@Test public void test_24107() { testValid("((any | any) | {int, any})","((int | int) | !any)"); }
		@Test public void test_24108() { testValid("((any | any) | {int, any})","((int & int) | !any)"); }
		@Test public void test_24109() { testValid("((any | any) | {int, any})","(!int | !int)"); }
		@Test public void test_24110() { testValid("((any | any) | {int, any})","({any, any} | !int)"); }
		@Test public void test_24111() { testValid("((any | any) | {int, any})","({int, int} | !int)"); }
		@Test public void test_24112() { testValid("((any | any) | {int, any})","((int | any) | !int)"); }
		@Test public void test_24113() { testValid("((any | any) | {int, any})","((any | int) | !int)"); }
		@Test public void test_24114() { testValid("((any | any) | {int, any})","((any & int) | !int)"); }
		@Test public void test_24115() { testValid("((any | any) | {int, any})","((int & int) | !int)"); }
		@Test public void test_24116() { testValid("((any | any) | {int, any})","({int} | {any, any})"); }
		@Test public void test_24117() { testValid("((any | any) | {int, any})","(!any | {any, any})"); }
		@Test public void test_24118() { testValid("((any | any) | {int, any})","(!int | {any, any})"); }
		@Test public void test_24119() { testValid("((any | any) | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_24120() { testValid("((any | any) | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_24121() { testValid("((any | any) | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_24122() { testValid("((any | any) | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_24123() { testValid("((any | any) | {int, any})","(!int | {int, any})"); }
		@Test public void test_24124() { testValid("((any | any) | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_24125() { testValid("((any | any) | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_24126() { testValid("((any | any) | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_24127() { testValid("((any | any) | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_24128() { testValid("((any | any) | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_24129() { testValid("((any | any) | {int, any})","({any} | {any, int})"); }
		@Test public void test_24130() { testValid("((any | any) | {int, any})","(!int | {any, int})"); }
		@Test public void test_24131() { testValid("((any | any) | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_24132() { testValid("((any | any) | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_24133() { testValid("((any | any) | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_24134() { testValid("((any | any) | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_24135() { testValid("((any | any) | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_24136() { testValid("((any | any) | {int, any})","(!any | {int, int})"); }
		@Test public void test_24137() { testValid("((any | any) | {int, any})","(!int | {int, int})"); }
		@Test public void test_24138() { testValid("((any | any) | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_24139() { testValid("((any | any) | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_24140() { testValid("((any | any) | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_24141() { testValid("((any | any) | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_24142() { testValid("((any | any) | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_24143() { testValid("((any | any) | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_24144() { testValid("((any | any) | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_24145() { testValid("((any | any) | {int, any})","({any} | (any | any))"); }
		@Test public void test_24146() { testValid("((any | any) | {int, any})","(!any | (any | any))"); }
		@Test public void test_24147() { testValid("((any | any) | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_24148() { testValid("((any | any) | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_24149() { testValid("((any | any) | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_24150() { testValid("((any | any) | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_24151() { testValid("((any | any) | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_24152() { testValid("((any | any) | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_24153() { testValid("((any | any) | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_24154() { testValid("((any | any) | {int, any})","({any} | (int | any))"); }
		@Test public void test_24155() { testValid("((any | any) | {int, any})","(!int | (int | any))"); }
		@Test public void test_24156() { testValid("((any | any) | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_24157() { testValid("((any | any) | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_24158() { testValid("((any | any) | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_24159() { testValid("((any | any) | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_24160() { testValid("((any | any) | {int, any})","({any} | (any | int))"); }
		@Test public void test_24161() { testValid("((any | any) | {int, any})","({int} | (any | int))"); }
		@Test public void test_24162() { testValid("((any | any) | {int, any})","(!any | (any | int))"); }
		@Test public void test_24163() { testValid("((any | any) | {int, any})","(!int | (any | int))"); }
		@Test public void test_24164() { testValid("((any | any) | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_24165() { testValid("((any | any) | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_24166() { testValid("((any | any) | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_24167() { testValid("((any | any) | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_24168() { testValid("((any | any) | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_24169() { testValid("((any | any) | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_24170() { testValid("((any | any) | {int, any})","({int} | (int | int))"); }
		@Test public void test_24171() { testValid("((any | any) | {int, any})","(!any | (int | int))"); }
		@Test public void test_24172() { testValid("((any | any) | {int, any})","(!int | (int | int))"); }
		@Test public void test_24173() { testValid("((any | any) | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_24174() { testValid("((any | any) | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_24175() { testValid("((any | any) | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_24176() { testValid("((any | any) | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_24177() { testValid("((any | any) | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_24178() { testValid("((any | any) | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_24179() { testValid("((any | any) | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_24180() { testValid("((any | any) | {int, any})","(!any | (any & any))"); }
		@Test public void test_24181() { testValid("((any | any) | {int, any})","(!int | (any & any))"); }
		@Test public void test_24182() { testValid("((any | any) | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_24183() { testValid("((any | any) | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_24184() { testValid("((any | any) | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_24185() { testValid("((any | any) | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_24186() { testValid("((any | any) | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_24187() { testValid("((any | any) | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_24188() { testValid("((any | any) | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_24189() { testValid("((any | any) | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_24190() { testValid("((any | any) | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_24191() { testValid("((any | any) | {int, any})","({any} | (int & any))"); }
		@Test public void test_24192() { testValid("((int | any) | {int, any})","{int}"); }
		@Test public void test_24193() { testValid("((int | any) | {int, any})","{any, any}"); }
		@Test public void test_24194() { testValid("((int | any) | {int, any})","{int, int}"); }
		@Test public void test_24195() { testValid("((int | any) | {int, any})","(any | int)"); }
		@Test public void test_24196() { testValid("((int | any) | {int, any})","(int & any)"); }
		@Test public void test_24197() { testValid("((int | any) | {int, any})","{{any}}"); }
		@Test public void test_24198() { testValid("((int | any) | {int, any})","{{int, any}}"); }
		@Test public void test_24199() { testValid("((int | any) | {int, any})","{{int, int}}"); }
		@Test public void test_24200() { testValid("((int | any) | {int, any})","{(any | int)}"); }
		@Test public void test_24201() { testValid("((int | any) | {int, any})","!{int, any}"); }
		@Test public void test_24202() { testValid("((int | any) | {int, any})","!{int, int}"); }
		@Test public void test_24203() { testValid("((int | any) | {int, any})","!(any | any)"); }
		@Test public void test_24204() { testValid("((int | any) | {int, any})","!(any & any)"); }
		@Test public void test_24205() { testValid("((int | any) | {int, any})","!(int & int)"); }
		@Test public void test_24206() { testValid("((int | any) | {int, any})","{{int}, {any}}"); }
		@Test public void test_24207() { testValid("((int | any) | {int, any})","{!int, {any}}"); }
		@Test public void test_24208() { testValid("((int | any) | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_24209() { testValid("((int | any) | {int, any})","{(any | int), {any}}"); }
		@Test public void test_24210() { testValid("((int | any) | {int, any})","{!int, {int}}"); }
		@Test public void test_24211() { testValid("((int | any) | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_24212() { testValid("((int | any) | {int, any})","{(any | any), {int}}"); }
		@Test public void test_24213() { testValid("((int | any) | {int, any})","{(any & any), {int}}"); }
		@Test public void test_24214() { testValid("((int | any) | {int, any})","{(any & int), {int}}"); }
		@Test public void test_24215() { testValid("((int | any) | {int, any})","{{any, any}, !int}"); }
		@Test public void test_24216() { testValid("((int | any) | {int, any})","{{any, int}, !int}"); }
		@Test public void test_24217() { testValid("((int | any) | {int, any})","{(any | any), !int}"); }
		@Test public void test_24218() { testValid("((int | any) | {int, any})","{(int | any), !int}"); }
		@Test public void test_24219() { testValid("((int | any) | {int, any})","{(any & any), !int}"); }
		@Test public void test_24220() { testValid("((int | any) | {int, any})","{(int & any), !int}"); }
		@Test public void test_24221() { testValid("((int | any) | {int, any})","{(int & int), !int}"); }
		@Test public void test_24222() { testValid("((int | any) | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_24223() { testValid("((int | any) | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_24224() { testValid("((int | any) | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_24225() { testValid("((int | any) | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_24226() { testValid("((int | any) | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_24227() { testValid("((int | any) | {int, any})","{!int, {int, any}}"); }
		@Test public void test_24228() { testValid("((int | any) | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_24229() { testValid("((int | any) | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_24230() { testValid("((int | any) | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_24231() { testValid("((int | any) | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_24232() { testValid("((int | any) | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_24233() { testValid("((int | any) | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_24234() { testValid("((int | any) | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_24235() { testValid("((int | any) | {int, any})","{!int, {int, int}}"); }
		@Test public void test_24236() { testValid("((int | any) | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_24237() { testValid("((int | any) | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_24238() { testValid("((int | any) | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_24239() { testValid("((int | any) | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_24240() { testValid("((int | any) | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_24241() { testValid("((int | any) | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_24242() { testValid("((int | any) | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_24243() { testValid("((int | any) | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_24244() { testValid("((int | any) | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_24245() { testValid("((int | any) | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_24246() { testValid("((int | any) | {int, any})","{!int, (int | any)}"); }
		@Test public void test_24247() { testValid("((int | any) | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_24248() { testValid("((int | any) | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_24249() { testValid("((int | any) | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_24250() { testValid("((int | any) | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_24251() { testValid("((int | any) | {int, any})","{!int, (any | int)}"); }
		@Test public void test_24252() { testValid("((int | any) | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_24253() { testValid("((int | any) | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_24254() { testValid("((int | any) | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_24255() { testValid("((int | any) | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_24256() { testValid("((int | any) | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_24257() { testValid("((int | any) | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_24258() { testValid("((int | any) | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_24259() { testValid("((int | any) | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_24260() { testValid("((int | any) | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_24261() { testValid("((int | any) | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_24262() { testValid("((int | any) | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_24263() { testValid("((int | any) | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_24264() { testValid("((int | any) | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_24265() { testValid("((int | any) | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_24266() { testValid("((int | any) | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_24267() { testValid("((int | any) | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_24268() { testValid("((int | any) | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_24269() { testValid("((int | any) | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_24270() { testValid("((int | any) | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_24271() { testValid("((int | any) | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_24272() { testValid("((int | any) | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_24273() { testValid("((int | any) | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_24274() { testValid("((int | any) | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_24275() { testValid("((int | any) | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_24276() { testValid("((int | any) | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_24277() { testValid("((int | any) | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_24278() { testValid("((int | any) | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_24279() { testValid("((int | any) | {int, any})","(!int | {any})"); }
		@Test public void test_24280() { testValid("((int | any) | {int, any})","({any, any} | {any})"); }
		@Test public void test_24281() { testValid("((int | any) | {int, any})","((any | any) | {any})"); }
		@Test public void test_24282() { testValid("((int | any) | {int, any})","((int | any) | {any})"); }
		@Test public void test_24283() { testValid("((int | any) | {int, any})","((any & any) | {any})"); }
		@Test public void test_24284() { testValid("((int | any) | {int, any})","((int & any) | {any})"); }
		@Test public void test_24285() { testValid("((int | any) | {int, any})","((any & int) | {any})"); }
		@Test public void test_24286() { testValid("((int | any) | {int, any})","({int} | {int})"); }
		@Test public void test_24287() { testValid("((int | any) | {int, any})","(!any | {int})"); }
		@Test public void test_24288() { testValid("((int | any) | {int, any})","(!int | {int})"); }
		@Test public void test_24289() { testValid("((int | any) | {int, any})","({any, int} | {int})"); }
		@Test public void test_24290() { testValid("((int | any) | {int, any})","((int & any) | {int})"); }
		@Test public void test_24291() { testValid("((int | any) | {int, any})","((any & int) | {int})"); }
		@Test public void test_24292() { testValid("((int | any) | {int, any})","((int & int) | {int})"); }
		@Test public void test_24293() { testValid("((int | any) | {int, any})","({any} | !any)"); }
		@Test public void test_24294() { testValid("((int | any) | {int, any})","({int} | !any)"); }
		@Test public void test_24295() { testValid("((int | any) | {int, any})","({any, any} | !any)"); }
		@Test public void test_24296() { testValid("((int | any) | {int, any})","({int, int} | !any)"); }
		@Test public void test_24297() { testValid("((int | any) | {int, any})","((any | any) | !any)"); }
		@Test public void test_24298() { testValid("((int | any) | {int, any})","((int | any) | !any)"); }
		@Test public void test_24299() { testValid("((int | any) | {int, any})","((int | int) | !any)"); }
		@Test public void test_24300() { testValid("((int | any) | {int, any})","((int & int) | !any)"); }
		@Test public void test_24301() { testValid("((int | any) | {int, any})","(!int | !int)"); }
		@Test public void test_24302() { testValid("((int | any) | {int, any})","({any, any} | !int)"); }
		@Test public void test_24303() { testValid("((int | any) | {int, any})","({int, int} | !int)"); }
		@Test public void test_24304() { testValid("((int | any) | {int, any})","((int | any) | !int)"); }
		@Test public void test_24305() { testValid("((int | any) | {int, any})","((any | int) | !int)"); }
		@Test public void test_24306() { testValid("((int | any) | {int, any})","((any & int) | !int)"); }
		@Test public void test_24307() { testValid("((int | any) | {int, any})","((int & int) | !int)"); }
		@Test public void test_24308() { testValid("((int | any) | {int, any})","({int} | {any, any})"); }
		@Test public void test_24309() { testValid("((int | any) | {int, any})","(!any | {any, any})"); }
		@Test public void test_24310() { testValid("((int | any) | {int, any})","(!int | {any, any})"); }
		@Test public void test_24311() { testValid("((int | any) | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_24312() { testValid("((int | any) | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_24313() { testValid("((int | any) | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_24314() { testValid("((int | any) | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_24315() { testValid("((int | any) | {int, any})","(!int | {int, any})"); }
		@Test public void test_24316() { testValid("((int | any) | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_24317() { testValid("((int | any) | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_24318() { testValid("((int | any) | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_24319() { testValid("((int | any) | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_24320() { testValid("((int | any) | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_24321() { testValid("((int | any) | {int, any})","({any} | {any, int})"); }
		@Test public void test_24322() { testValid("((int | any) | {int, any})","(!int | {any, int})"); }
		@Test public void test_24323() { testValid("((int | any) | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_24324() { testValid("((int | any) | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_24325() { testValid("((int | any) | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_24326() { testValid("((int | any) | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_24327() { testValid("((int | any) | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_24328() { testValid("((int | any) | {int, any})","(!any | {int, int})"); }
		@Test public void test_24329() { testValid("((int | any) | {int, any})","(!int | {int, int})"); }
		@Test public void test_24330() { testValid("((int | any) | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_24331() { testValid("((int | any) | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_24332() { testValid("((int | any) | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_24333() { testValid("((int | any) | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_24334() { testValid("((int | any) | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_24335() { testValid("((int | any) | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_24336() { testValid("((int | any) | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_24337() { testValid("((int | any) | {int, any})","({any} | (any | any))"); }
		@Test public void test_24338() { testValid("((int | any) | {int, any})","(!any | (any | any))"); }
		@Test public void test_24339() { testValid("((int | any) | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_24340() { testValid("((int | any) | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_24341() { testValid("((int | any) | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_24342() { testValid("((int | any) | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_24343() { testValid("((int | any) | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_24344() { testValid("((int | any) | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_24345() { testValid("((int | any) | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_24346() { testValid("((int | any) | {int, any})","({any} | (int | any))"); }
		@Test public void test_24347() { testValid("((int | any) | {int, any})","(!int | (int | any))"); }
		@Test public void test_24348() { testValid("((int | any) | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_24349() { testValid("((int | any) | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_24350() { testValid("((int | any) | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_24351() { testValid("((int | any) | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_24352() { testValid("((int | any) | {int, any})","({any} | (any | int))"); }
		@Test public void test_24353() { testValid("((int | any) | {int, any})","({int} | (any | int))"); }
		@Test public void test_24354() { testValid("((int | any) | {int, any})","(!any | (any | int))"); }
		@Test public void test_24355() { testValid("((int | any) | {int, any})","(!int | (any | int))"); }
		@Test public void test_24356() { testValid("((int | any) | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_24357() { testValid("((int | any) | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_24358() { testValid("((int | any) | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_24359() { testValid("((int | any) | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_24360() { testValid("((int | any) | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_24361() { testValid("((int | any) | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_24362() { testValid("((int | any) | {int, any})","({int} | (int | int))"); }
		@Test public void test_24363() { testValid("((int | any) | {int, any})","(!any | (int | int))"); }
		@Test public void test_24364() { testValid("((int | any) | {int, any})","(!int | (int | int))"); }
		@Test public void test_24365() { testValid("((int | any) | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_24366() { testValid("((int | any) | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_24367() { testValid("((int | any) | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_24368() { testValid("((int | any) | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_24369() { testValid("((int | any) | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_24370() { testValid("((int | any) | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_24371() { testValid("((int | any) | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_24372() { testValid("((int | any) | {int, any})","(!any | (any & any))"); }
		@Test public void test_24373() { testValid("((int | any) | {int, any})","(!int | (any & any))"); }
		@Test public void test_24374() { testValid("((int | any) | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_24375() { testValid("((int | any) | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_24376() { testValid("((int | any) | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_24377() { testValid("((int | any) | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_24378() { testValid("((int | any) | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_24379() { testValid("((int | any) | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_24380() { testValid("((int | any) | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_24381() { testValid("((int | any) | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_24382() { testValid("((int | any) | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_24383() { testValid("((int | any) | {int, any})","({any} | (int & any))"); }
		@Test public void test_24384() { testValid("((any | int) | {int, any})","{int}"); }
		@Test public void test_24385() { testValid("((any | int) | {int, any})","{any, any}"); }
		@Test public void test_24386() { testValid("((any | int) | {int, any})","{int, int}"); }
		@Test public void test_24387() { testValid("((any | int) | {int, any})","(any | int)"); }
		@Test public void test_24388() { testValid("((any | int) | {int, any})","(int & any)"); }
		@Test public void test_24389() { testValid("((any | int) | {int, any})","{{any}}"); }
		@Test public void test_24390() { testValid("((any | int) | {int, any})","{{int, any}}"); }
		@Test public void test_24391() { testValid("((any | int) | {int, any})","{{int, int}}"); }
		@Test public void test_24392() { testValid("((any | int) | {int, any})","{(any | int)}"); }
		@Test public void test_24393() { testValid("((any | int) | {int, any})","!{int, any}"); }
		@Test public void test_24394() { testValid("((any | int) | {int, any})","!{int, int}"); }
		@Test public void test_24395() { testValid("((any | int) | {int, any})","!(any | any)"); }
		@Test public void test_24396() { testValid("((any | int) | {int, any})","!(any & any)"); }
		@Test public void test_24397() { testValid("((any | int) | {int, any})","!(int & int)"); }
		@Test public void test_24398() { testValid("((any | int) | {int, any})","{{int}, {any}}"); }
		@Test public void test_24399() { testValid("((any | int) | {int, any})","{!int, {any}}"); }
		@Test public void test_24400() { testValid("((any | int) | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_24401() { testValid("((any | int) | {int, any})","{(any | int), {any}}"); }
		@Test public void test_24402() { testValid("((any | int) | {int, any})","{!int, {int}}"); }
		@Test public void test_24403() { testValid("((any | int) | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_24404() { testValid("((any | int) | {int, any})","{(any | any), {int}}"); }
		@Test public void test_24405() { testValid("((any | int) | {int, any})","{(any & any), {int}}"); }
		@Test public void test_24406() { testValid("((any | int) | {int, any})","{(any & int), {int}}"); }
		@Test public void test_24407() { testValid("((any | int) | {int, any})","{{any, any}, !int}"); }
		@Test public void test_24408() { testValid("((any | int) | {int, any})","{{any, int}, !int}"); }
		@Test public void test_24409() { testValid("((any | int) | {int, any})","{(any | any), !int}"); }
		@Test public void test_24410() { testValid("((any | int) | {int, any})","{(int | any), !int}"); }
		@Test public void test_24411() { testValid("((any | int) | {int, any})","{(any & any), !int}"); }
		@Test public void test_24412() { testValid("((any | int) | {int, any})","{(int & any), !int}"); }
		@Test public void test_24413() { testValid("((any | int) | {int, any})","{(int & int), !int}"); }
		@Test public void test_24414() { testValid("((any | int) | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_24415() { testValid("((any | int) | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_24416() { testValid("((any | int) | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_24417() { testValid("((any | int) | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_24418() { testValid("((any | int) | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_24419() { testValid("((any | int) | {int, any})","{!int, {int, any}}"); }
		@Test public void test_24420() { testValid("((any | int) | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_24421() { testValid("((any | int) | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_24422() { testValid("((any | int) | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_24423() { testValid("((any | int) | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_24424() { testValid("((any | int) | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_24425() { testValid("((any | int) | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_24426() { testValid("((any | int) | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_24427() { testValid("((any | int) | {int, any})","{!int, {int, int}}"); }
		@Test public void test_24428() { testValid("((any | int) | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_24429() { testValid("((any | int) | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_24430() { testValid("((any | int) | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_24431() { testValid("((any | int) | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_24432() { testValid("((any | int) | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_24433() { testValid("((any | int) | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_24434() { testValid("((any | int) | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_24435() { testValid("((any | int) | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_24436() { testValid("((any | int) | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_24437() { testValid("((any | int) | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_24438() { testValid("((any | int) | {int, any})","{!int, (int | any)}"); }
		@Test public void test_24439() { testValid("((any | int) | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_24440() { testValid("((any | int) | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_24441() { testValid("((any | int) | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_24442() { testValid("((any | int) | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_24443() { testValid("((any | int) | {int, any})","{!int, (any | int)}"); }
		@Test public void test_24444() { testValid("((any | int) | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_24445() { testValid("((any | int) | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_24446() { testValid("((any | int) | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_24447() { testValid("((any | int) | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_24448() { testValid("((any | int) | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_24449() { testValid("((any | int) | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_24450() { testValid("((any | int) | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_24451() { testValid("((any | int) | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_24452() { testValid("((any | int) | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_24453() { testValid("((any | int) | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_24454() { testValid("((any | int) | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_24455() { testValid("((any | int) | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_24456() { testValid("((any | int) | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_24457() { testValid("((any | int) | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_24458() { testValid("((any | int) | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_24459() { testValid("((any | int) | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_24460() { testValid("((any | int) | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_24461() { testValid("((any | int) | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_24462() { testValid("((any | int) | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_24463() { testValid("((any | int) | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_24464() { testValid("((any | int) | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_24465() { testValid("((any | int) | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_24466() { testValid("((any | int) | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_24467() { testValid("((any | int) | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_24468() { testValid("((any | int) | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_24469() { testValid("((any | int) | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_24470() { testValid("((any | int) | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_24471() { testValid("((any | int) | {int, any})","(!int | {any})"); }
		@Test public void test_24472() { testValid("((any | int) | {int, any})","({any, any} | {any})"); }
		@Test public void test_24473() { testValid("((any | int) | {int, any})","((any | any) | {any})"); }
		@Test public void test_24474() { testValid("((any | int) | {int, any})","((int | any) | {any})"); }
		@Test public void test_24475() { testValid("((any | int) | {int, any})","((any & any) | {any})"); }
		@Test public void test_24476() { testValid("((any | int) | {int, any})","((int & any) | {any})"); }
		@Test public void test_24477() { testValid("((any | int) | {int, any})","((any & int) | {any})"); }
		@Test public void test_24478() { testValid("((any | int) | {int, any})","({int} | {int})"); }
		@Test public void test_24479() { testValid("((any | int) | {int, any})","(!any | {int})"); }
		@Test public void test_24480() { testValid("((any | int) | {int, any})","(!int | {int})"); }
		@Test public void test_24481() { testValid("((any | int) | {int, any})","({any, int} | {int})"); }
		@Test public void test_24482() { testValid("((any | int) | {int, any})","((int & any) | {int})"); }
		@Test public void test_24483() { testValid("((any | int) | {int, any})","((any & int) | {int})"); }
		@Test public void test_24484() { testValid("((any | int) | {int, any})","((int & int) | {int})"); }
		@Test public void test_24485() { testValid("((any | int) | {int, any})","({any} | !any)"); }
		@Test public void test_24486() { testValid("((any | int) | {int, any})","({int} | !any)"); }
		@Test public void test_24487() { testValid("((any | int) | {int, any})","({any, any} | !any)"); }
		@Test public void test_24488() { testValid("((any | int) | {int, any})","({int, int} | !any)"); }
		@Test public void test_24489() { testValid("((any | int) | {int, any})","((any | any) | !any)"); }
		@Test public void test_24490() { testValid("((any | int) | {int, any})","((int | any) | !any)"); }
		@Test public void test_24491() { testValid("((any | int) | {int, any})","((int | int) | !any)"); }
		@Test public void test_24492() { testValid("((any | int) | {int, any})","((int & int) | !any)"); }
		@Test public void test_24493() { testValid("((any | int) | {int, any})","(!int | !int)"); }
		@Test public void test_24494() { testValid("((any | int) | {int, any})","({any, any} | !int)"); }
		@Test public void test_24495() { testValid("((any | int) | {int, any})","({int, int} | !int)"); }
		@Test public void test_24496() { testValid("((any | int) | {int, any})","((int | any) | !int)"); }
		@Test public void test_24497() { testValid("((any | int) | {int, any})","((any | int) | !int)"); }
		@Test public void test_24498() { testValid("((any | int) | {int, any})","((any & int) | !int)"); }
		@Test public void test_24499() { testValid("((any | int) | {int, any})","((int & int) | !int)"); }
		@Test public void test_24500() { testValid("((any | int) | {int, any})","({int} | {any, any})"); }
		@Test public void test_24501() { testValid("((any | int) | {int, any})","(!any | {any, any})"); }
		@Test public void test_24502() { testValid("((any | int) | {int, any})","(!int | {any, any})"); }
		@Test public void test_24503() { testValid("((any | int) | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_24504() { testValid("((any | int) | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_24505() { testValid("((any | int) | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_24506() { testValid("((any | int) | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_24507() { testValid("((any | int) | {int, any})","(!int | {int, any})"); }
		@Test public void test_24508() { testValid("((any | int) | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_24509() { testValid("((any | int) | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_24510() { testValid("((any | int) | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_24511() { testValid("((any | int) | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_24512() { testValid("((any | int) | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_24513() { testValid("((any | int) | {int, any})","({any} | {any, int})"); }
		@Test public void test_24514() { testValid("((any | int) | {int, any})","(!int | {any, int})"); }
		@Test public void test_24515() { testValid("((any | int) | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_24516() { testValid("((any | int) | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_24517() { testValid("((any | int) | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_24518() { testValid("((any | int) | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_24519() { testValid("((any | int) | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_24520() { testValid("((any | int) | {int, any})","(!any | {int, int})"); }
		@Test public void test_24521() { testValid("((any | int) | {int, any})","(!int | {int, int})"); }
		@Test public void test_24522() { testValid("((any | int) | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_24523() { testValid("((any | int) | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_24524() { testValid("((any | int) | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_24525() { testValid("((any | int) | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_24526() { testValid("((any | int) | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_24527() { testValid("((any | int) | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_24528() { testValid("((any | int) | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_24529() { testValid("((any | int) | {int, any})","({any} | (any | any))"); }
		@Test public void test_24530() { testValid("((any | int) | {int, any})","(!any | (any | any))"); }
		@Test public void test_24531() { testValid("((any | int) | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_24532() { testValid("((any | int) | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_24533() { testValid("((any | int) | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_24534() { testValid("((any | int) | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_24535() { testValid("((any | int) | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_24536() { testValid("((any | int) | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_24537() { testValid("((any | int) | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_24538() { testValid("((any | int) | {int, any})","({any} | (int | any))"); }
		@Test public void test_24539() { testValid("((any | int) | {int, any})","(!int | (int | any))"); }
		@Test public void test_24540() { testValid("((any | int) | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_24541() { testValid("((any | int) | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_24542() { testValid("((any | int) | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_24543() { testValid("((any | int) | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_24544() { testValid("((any | int) | {int, any})","({any} | (any | int))"); }
		@Test public void test_24545() { testValid("((any | int) | {int, any})","({int} | (any | int))"); }
		@Test public void test_24546() { testValid("((any | int) | {int, any})","(!any | (any | int))"); }
		@Test public void test_24547() { testValid("((any | int) | {int, any})","(!int | (any | int))"); }
		@Test public void test_24548() { testValid("((any | int) | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_24549() { testValid("((any | int) | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_24550() { testValid("((any | int) | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_24551() { testValid("((any | int) | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_24552() { testValid("((any | int) | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_24553() { testValid("((any | int) | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_24554() { testValid("((any | int) | {int, any})","({int} | (int | int))"); }
		@Test public void test_24555() { testValid("((any | int) | {int, any})","(!any | (int | int))"); }
		@Test public void test_24556() { testValid("((any | int) | {int, any})","(!int | (int | int))"); }
		@Test public void test_24557() { testValid("((any | int) | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_24558() { testValid("((any | int) | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_24559() { testValid("((any | int) | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_24560() { testValid("((any | int) | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_24561() { testValid("((any | int) | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_24562() { testValid("((any | int) | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_24563() { testValid("((any | int) | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_24564() { testValid("((any | int) | {int, any})","(!any | (any & any))"); }
		@Test public void test_24565() { testValid("((any | int) | {int, any})","(!int | (any & any))"); }
		@Test public void test_24566() { testValid("((any | int) | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_24567() { testValid("((any | int) | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_24568() { testValid("((any | int) | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_24569() { testValid("((any | int) | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_24570() { testValid("((any | int) | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_24571() { testValid("((any | int) | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_24572() { testValid("((any | int) | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_24573() { testValid("((any | int) | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_24574() { testValid("((any | int) | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_24575() { testValid("((any | int) | {int, any})","({any} | (int & any))"); }
		@Test public void test_24576() { testInvalid("((int & any) | {int, any})","{int}"); }
		@Test public void test_24577() { testInvalid("((int & any) | {int, any})","{any, any}"); }
		@Test public void test_24578() { testValid("((int & any) | {int, any})","{int, int}"); }
		@Test public void test_24579() { testInvalid("((int & any) | {int, any})","(any | int)"); }
		@Test public void test_24580() { testValid("((int & any) | {int, any})","(int & any)"); }
		@Test public void test_24581() { testInvalid("((int & any) | {int, any})","{{any}}"); }
		@Test public void test_24582() { testInvalid("((int & any) | {int, any})","{{int, any}}"); }
		@Test public void test_24583() { testInvalid("((int & any) | {int, any})","{{int, int}}"); }
		@Test public void test_24584() { testInvalid("((int & any) | {int, any})","{(any | int)}"); }
		@Test public void test_24585() { testInvalid("((int & any) | {int, any})","!{int, any}"); }
		@Test public void test_24586() { testInvalid("((int & any) | {int, any})","!{int, int}"); }
		@Test public void test_24587() { testValid("((int & any) | {int, any})","!(any | any)"); }
		@Test public void test_24588() { testValid("((int & any) | {int, any})","!(any & any)"); }
		@Test public void test_24589() { testInvalid("((int & any) | {int, any})","!(int & int)"); }
		@Test public void test_24590() { testInvalid("((int & any) | {int, any})","{{int}, {any}}"); }
		@Test public void test_24591() { testInvalid("((int & any) | {int, any})","{!int, {any}}"); }
		@Test public void test_24592() { testInvalid("((int & any) | {int, any})","{{int, int}, {any}}"); }
		@Test public void test_24593() { testInvalid("((int & any) | {int, any})","{(any | int), {any}}"); }
		@Test public void test_24594() { testInvalid("((int & any) | {int, any})","{!int, {int}}"); }
		@Test public void test_24595() { testInvalid("((int & any) | {int, any})","{{any, any}, {int}}"); }
		@Test public void test_24596() { testInvalid("((int & any) | {int, any})","{(any | any), {int}}"); }
		@Test public void test_24597() { testInvalid("((int & any) | {int, any})","{(any & any), {int}}"); }
		@Test public void test_24598() { testValid("((int & any) | {int, any})","{(any & int), {int}}"); }
		@Test public void test_24599() { testInvalid("((int & any) | {int, any})","{{any, any}, !int}"); }
		@Test public void test_24600() { testInvalid("((int & any) | {int, any})","{{any, int}, !int}"); }
		@Test public void test_24601() { testInvalid("((int & any) | {int, any})","{(any | any), !int}"); }
		@Test public void test_24602() { testInvalid("((int & any) | {int, any})","{(int | any), !int}"); }
		@Test public void test_24603() { testInvalid("((int & any) | {int, any})","{(any & any), !int}"); }
		@Test public void test_24604() { testValid("((int & any) | {int, any})","{(int & any), !int}"); }
		@Test public void test_24605() { testValid("((int & any) | {int, any})","{(int & int), !int}"); }
		@Test public void test_24606() { testInvalid("((int & any) | {int, any})","{{any}, {any, any}}"); }
		@Test public void test_24607() { testInvalid("((int & any) | {int, any})","{{int}, {any, any}}"); }
		@Test public void test_24608() { testInvalid("((int & any) | {int, any})","{{int, int}, {any, any}}"); }
		@Test public void test_24609() { testInvalid("((int & any) | {int, any})","{(any | any), {any, any}}"); }
		@Test public void test_24610() { testInvalid("((int & any) | {int, any})","{(any | int), {any, any}}"); }
		@Test public void test_24611() { testInvalid("((int & any) | {int, any})","{!int, {int, any}}"); }
		@Test public void test_24612() { testInvalid("((int & any) | {int, any})","{{int, any}, {int, any}}"); }
		@Test public void test_24613() { testInvalid("((int & any) | {int, any})","{{any, int}, {int, any}}"); }
		@Test public void test_24614() { testValid("((int & any) | {int, any})","{(any & int), {int, any}}"); }
		@Test public void test_24615() { testInvalid("((int & any) | {int, any})","{{any}, {any, int}}"); }
		@Test public void test_24616() { testInvalid("((int & any) | {int, any})","{{int, int}, {any, int}}"); }
		@Test public void test_24617() { testValid("((int & any) | {int, any})","{(int | int), {any, int}}"); }
		@Test public void test_24618() { testValid("((int & any) | {int, any})","{(any & int), {any, int}}"); }
		@Test public void test_24619() { testInvalid("((int & any) | {int, any})","{!int, {int, int}}"); }
		@Test public void test_24620() { testInvalid("((int & any) | {int, any})","{{int, int}, {int, int}}"); }
		@Test public void test_24621() { testInvalid("((int & any) | {int, any})","{(any | any), {int, int}}"); }
		@Test public void test_24622() { testInvalid("((int & any) | {int, any})","{(int | any), {int, int}}"); }
		@Test public void test_24623() { testValid("((int & any) | {int, any})","{(int & any), {int, int}}"); }
		@Test public void test_24624() { testInvalid("((int & any) | {int, any})","{{int}, (any | any)}"); }
		@Test public void test_24625() { testInvalid("((int & any) | {int, any})","{{int, any}, (any | any)}"); }
		@Test public void test_24626() { testInvalid("((int & any) | {int, any})","{{any, int}, (any | any)}"); }
		@Test public void test_24627() { testInvalid("((int & any) | {int, any})","{(any | any), (any | any)}"); }
		@Test public void test_24628() { testInvalid("((int & any) | {int, any})","{(int | any), (any | any)}"); }
		@Test public void test_24629() { testValid("((int & any) | {int, any})","{(int & int), (any | any)}"); }
		@Test public void test_24630() { testInvalid("((int & any) | {int, any})","{!int, (int | any)}"); }
		@Test public void test_24631() { testInvalid("((int & any) | {int, any})","{{int, int}, (int | any)}"); }
		@Test public void test_24632() { testInvalid("((int & any) | {int, any})","{(any | any), (int | any)}"); }
		@Test public void test_24633() { testValid("((int & any) | {int, any})","{(int | int), (int | any)}"); }
		@Test public void test_24634() { testInvalid("((int & any) | {int, any})","{{any}, (any | int)}"); }
		@Test public void test_24635() { testInvalid("((int & any) | {int, any})","{!int, (any | int)}"); }
		@Test public void test_24636() { testInvalid("((int & any) | {int, any})","{(any | any), (any | int)}"); }
		@Test public void test_24637() { testInvalid("((int & any) | {int, any})","{(any | int), (any | int)}"); }
		@Test public void test_24638() { testValid("((int & any) | {int, any})","{(any & int), (any | int)}"); }
		@Test public void test_24639() { testInvalid("((int & any) | {int, any})","{{int}, (int | int)}"); }
		@Test public void test_24640() { testInvalid("((int & any) | {int, any})","{{any, any}, (int | int)}"); }
		@Test public void test_24641() { testInvalid("((int & any) | {int, any})","{{int, int}, (int | int)}"); }
		@Test public void test_24642() { testInvalid("((int & any) | {int, any})","{{int}, (any & any)}"); }
		@Test public void test_24643() { testInvalid("((int & any) | {int, any})","{{int, any}, (any & any)}"); }
		@Test public void test_24644() { testInvalid("((int & any) | {int, any})","{{any, int}, (any & any)}"); }
		@Test public void test_24645() { testInvalid("((int & any) | {int, any})","{(int | any), (any & any)}"); }
		@Test public void test_24646() { testInvalid("((int & any) | {int, any})","{(any & any), (any & any)}"); }
		@Test public void test_24647() { testValid("((int & any) | {int, any})","{(int & any), (any & any)}"); }
		@Test public void test_24648() { testInvalid("((int & any) | {int, any})","{{any}, (int & any)}"); }
		@Test public void test_24649() { testInvalid("((int & any) | {int, any})","{{int}, (int & any)}"); }
		@Test public void test_24650() { testInvalid("((int & any) | {int, any})","{{any, any}, (int & any)}"); }
		@Test public void test_24651() { testInvalid("((int & any) | {int, any})","{{int, any}, (int & any)}"); }
		@Test public void test_24652() { testInvalid("((int & any) | {int, any})","{(any | int), (int & any)}"); }
		@Test public void test_24653() { testInvalid("((int & any) | {int, any})","{(any & any), (int & any)}"); }
		@Test public void test_24654() { testValid("((int & any) | {int, any})","{(int & any), (int & any)}"); }
		@Test public void test_24655() { testValid("((int & any) | {int, any})","{(int & int), (int & any)}"); }
		@Test public void test_24656() { testInvalid("((int & any) | {int, any})","{{int, any}, (any & int)}"); }
		@Test public void test_24657() { testInvalid("((int & any) | {int, any})","{(any & any), (any & int)}"); }
		@Test public void test_24658() { testInvalid("((int & any) | {int, any})","{{any, int}, (int & int)}"); }
		@Test public void test_24659() { testValid("((int & any) | {int, any})","{(int | int), (int & int)}"); }
		@Test public void test_24660() { testInvalid("((int & any) | {int, any})","{(any & any), (int & int)}"); }
		@Test public void test_24661() { testValid("((int & any) | {int, any})","{(any & int), (int & int)}"); }
		@Test public void test_24662() { testValid("((int & any) | {int, any})","{(int & int), (int & int)}"); }
		@Test public void test_24663() { testInvalid("((int & any) | {int, any})","(!int | {any})"); }
		@Test public void test_24664() { testInvalid("((int & any) | {int, any})","({any, any} | {any})"); }
		@Test public void test_24665() { testInvalid("((int & any) | {int, any})","((any | any) | {any})"); }
		@Test public void test_24666() { testInvalid("((int & any) | {int, any})","((int | any) | {any})"); }
		@Test public void test_24667() { testInvalid("((int & any) | {int, any})","((any & any) | {any})"); }
		@Test public void test_24668() { testInvalid("((int & any) | {int, any})","((int & any) | {any})"); }
		@Test public void test_24669() { testInvalid("((int & any) | {int, any})","((any & int) | {any})"); }
		@Test public void test_24670() { testInvalid("((int & any) | {int, any})","({int} | {int})"); }
		@Test public void test_24671() { testInvalid("((int & any) | {int, any})","(!any | {int})"); }
		@Test public void test_24672() { testInvalid("((int & any) | {int, any})","(!int | {int})"); }
		@Test public void test_24673() { testInvalid("((int & any) | {int, any})","({any, int} | {int})"); }
		@Test public void test_24674() { testInvalid("((int & any) | {int, any})","((int & any) | {int})"); }
		@Test public void test_24675() { testInvalid("((int & any) | {int, any})","((any & int) | {int})"); }
		@Test public void test_24676() { testInvalid("((int & any) | {int, any})","((int & int) | {int})"); }
		@Test public void test_24677() { testInvalid("((int & any) | {int, any})","({any} | !any)"); }
		@Test public void test_24678() { testInvalid("((int & any) | {int, any})","({int} | !any)"); }
		@Test public void test_24679() { testInvalid("((int & any) | {int, any})","({any, any} | !any)"); }
		@Test public void test_24680() { testValid("((int & any) | {int, any})","({int, int} | !any)"); }
		@Test public void test_24681() { testInvalid("((int & any) | {int, any})","((any | any) | !any)"); }
		@Test public void test_24682() { testInvalid("((int & any) | {int, any})","((int | any) | !any)"); }
		@Test public void test_24683() { testValid("((int & any) | {int, any})","((int | int) | !any)"); }
		@Test public void test_24684() { testValid("((int & any) | {int, any})","((int & int) | !any)"); }
		@Test public void test_24685() { testInvalid("((int & any) | {int, any})","(!int | !int)"); }
		@Test public void test_24686() { testInvalid("((int & any) | {int, any})","({any, any} | !int)"); }
		@Test public void test_24687() { testInvalid("((int & any) | {int, any})","({int, int} | !int)"); }
		@Test public void test_24688() { testInvalid("((int & any) | {int, any})","((int | any) | !int)"); }
		@Test public void test_24689() { testInvalid("((int & any) | {int, any})","((any | int) | !int)"); }
		@Test public void test_24690() { testInvalid("((int & any) | {int, any})","((any & int) | !int)"); }
		@Test public void test_24691() { testInvalid("((int & any) | {int, any})","((int & int) | !int)"); }
		@Test public void test_24692() { testInvalid("((int & any) | {int, any})","({int} | {any, any})"); }
		@Test public void test_24693() { testInvalid("((int & any) | {int, any})","(!any | {any, any})"); }
		@Test public void test_24694() { testInvalid("((int & any) | {int, any})","(!int | {any, any})"); }
		@Test public void test_24695() { testInvalid("((int & any) | {int, any})","({any, int} | {any, any})"); }
		@Test public void test_24696() { testInvalid("((int & any) | {int, any})","((int | any) | {any, any})"); }
		@Test public void test_24697() { testInvalid("((int & any) | {int, any})","((any & any) | {any, any})"); }
		@Test public void test_24698() { testInvalid("((int & any) | {int, any})","((any & int) | {any, any})"); }
		@Test public void test_24699() { testInvalid("((int & any) | {int, any})","(!int | {int, any})"); }
		@Test public void test_24700() { testInvalid("((int & any) | {int, any})","({any, int} | {int, any})"); }
		@Test public void test_24701() { testInvalid("((int & any) | {int, any})","((any | any) | {int, any})"); }
		@Test public void test_24702() { testInvalid("((int & any) | {int, any})","((int | any) | {int, any})"); }
		@Test public void test_24703() { testInvalid("((int & any) | {int, any})","((any | int) | {int, any})"); }
		@Test public void test_24704() { testValid("((int & any) | {int, any})","((int & any) | {int, any})"); }
		@Test public void test_24705() { testInvalid("((int & any) | {int, any})","({any} | {any, int})"); }
		@Test public void test_24706() { testInvalid("((int & any) | {int, any})","(!int | {any, int})"); }
		@Test public void test_24707() { testInvalid("((int & any) | {int, any})","({any, int} | {any, int})"); }
		@Test public void test_24708() { testInvalid("((int & any) | {int, any})","((any | any) | {any, int})"); }
		@Test public void test_24709() { testInvalid("((int & any) | {int, any})","((any | int) | {any, int})"); }
		@Test public void test_24710() { testInvalid("((int & any) | {int, any})","((int | int) | {any, int})"); }
		@Test public void test_24711() { testInvalid("((int & any) | {int, any})","((int & any) | {any, int})"); }
		@Test public void test_24712() { testValid("((int & any) | {int, any})","(!any | {int, int})"); }
		@Test public void test_24713() { testInvalid("((int & any) | {int, any})","(!int | {int, int})"); }
		@Test public void test_24714() { testInvalid("((int & any) | {int, any})","({any, any} | {int, int})"); }
		@Test public void test_24715() { testInvalid("((int & any) | {int, any})","({any, int} | {int, int})"); }
		@Test public void test_24716() { testInvalid("((int & any) | {int, any})","((any | any) | {int, int})"); }
		@Test public void test_24717() { testValid("((int & any) | {int, any})","((int | int) | {int, int})"); }
		@Test public void test_24718() { testValid("((int & any) | {int, any})","((int & any) | {int, int})"); }
		@Test public void test_24719() { testValid("((int & any) | {int, any})","((any & int) | {int, int})"); }
		@Test public void test_24720() { testValid("((int & any) | {int, any})","((int & int) | {int, int})"); }
		@Test public void test_24721() { testInvalid("((int & any) | {int, any})","({any} | (any | any))"); }
		@Test public void test_24722() { testInvalid("((int & any) | {int, any})","(!any | (any | any))"); }
		@Test public void test_24723() { testInvalid("((int & any) | {int, any})","({any, any} | (any | any))"); }
		@Test public void test_24724() { testInvalid("((int & any) | {int, any})","({any, int} | (any | any))"); }
		@Test public void test_24725() { testInvalid("((int & any) | {int, any})","({int, int} | (any | any))"); }
		@Test public void test_24726() { testInvalid("((int & any) | {int, any})","((int | any) | (any | any))"); }
		@Test public void test_24727() { testInvalid("((int & any) | {int, any})","((any | int) | (any | any))"); }
		@Test public void test_24728() { testInvalid("((int & any) | {int, any})","((any & int) | (any | any))"); }
		@Test public void test_24729() { testInvalid("((int & any) | {int, any})","((int & int) | (any | any))"); }
		@Test public void test_24730() { testInvalid("((int & any) | {int, any})","({any} | (int | any))"); }
		@Test public void test_24731() { testInvalid("((int & any) | {int, any})","(!int | (int | any))"); }
		@Test public void test_24732() { testInvalid("((int & any) | {int, any})","({int, any} | (int | any))"); }
		@Test public void test_24733() { testInvalid("((int & any) | {int, any})","({any, int} | (int | any))"); }
		@Test public void test_24734() { testInvalid("((int & any) | {int, any})","((int & any) | (int | any))"); }
		@Test public void test_24735() { testInvalid("((int & any) | {int, any})","((any & int) | (int | any))"); }
		@Test public void test_24736() { testInvalid("((int & any) | {int, any})","({any} | (any | int))"); }
		@Test public void test_24737() { testInvalid("((int & any) | {int, any})","({int} | (any | int))"); }
		@Test public void test_24738() { testInvalid("((int & any) | {int, any})","(!any | (any | int))"); }
		@Test public void test_24739() { testInvalid("((int & any) | {int, any})","(!int | (any | int))"); }
		@Test public void test_24740() { testInvalid("((int & any) | {int, any})","({any, int} | (any | int))"); }
		@Test public void test_24741() { testInvalid("((int & any) | {int, any})","({int, int} | (any | int))"); }
		@Test public void test_24742() { testInvalid("((int & any) | {int, any})","((int | any) | (any | int))"); }
		@Test public void test_24743() { testInvalid("((int & any) | {int, any})","((any | int) | (any | int))"); }
		@Test public void test_24744() { testInvalid("((int & any) | {int, any})","((int | int) | (any | int))"); }
		@Test public void test_24745() { testInvalid("((int & any) | {int, any})","((any & any) | (any | int))"); }
		@Test public void test_24746() { testInvalid("((int & any) | {int, any})","({int} | (int | int))"); }
		@Test public void test_24747() { testValid("((int & any) | {int, any})","(!any | (int | int))"); }
		@Test public void test_24748() { testInvalid("((int & any) | {int, any})","(!int | (int | int))"); }
		@Test public void test_24749() { testValid("((int & any) | {int, any})","({int, any} | (int | int))"); }
		@Test public void test_24750() { testInvalid("((int & any) | {int, any})","({any, int} | (int | int))"); }
		@Test public void test_24751() { testInvalid("((int & any) | {int, any})","((any | int) | (int | int))"); }
		@Test public void test_24752() { testValid("((int & any) | {int, any})","((int | int) | (int | int))"); }
		@Test public void test_24753() { testInvalid("((int & any) | {int, any})","((any & any) | (int | int))"); }
		@Test public void test_24754() { testValid("((int & any) | {int, any})","((int & any) | (int | int))"); }
		@Test public void test_24755() { testValid("((int & any) | {int, any})","((int & int) | (int | int))"); }
		@Test public void test_24756() { testInvalid("((int & any) | {int, any})","(!any | (any & any))"); }
		@Test public void test_24757() { testInvalid("((int & any) | {int, any})","(!int | (any & any))"); }
		@Test public void test_24758() { testInvalid("((int & any) | {int, any})","({any, any} | (any & any))"); }
		@Test public void test_24759() { testInvalid("((int & any) | {int, any})","({int, any} | (any & any))"); }
		@Test public void test_24760() { testInvalid("((int & any) | {int, any})","({any, int} | (any & any))"); }
		@Test public void test_24761() { testInvalid("((int & any) | {int, any})","({int, int} | (any & any))"); }
		@Test public void test_24762() { testInvalid("((int & any) | {int, any})","((int | any) | (any & any))"); }
		@Test public void test_24763() { testInvalid("((int & any) | {int, any})","((int | int) | (any & any))"); }
		@Test public void test_24764() { testInvalid("((int & any) | {int, any})","((int & any) | (any & any))"); }
		@Test public void test_24765() { testInvalid("((int & any) | {int, any})","((any & int) | (any & any))"); }
		@Test public void test_24766() { testInvalid("((int & any) | {int, any})","((int & int) | (any & any))"); }
		@Test public void test_24767() { testInvalid("((int & any) | {int, any})","({any} | (int & any))"); }
		@Test public void test_24768() { testValid("({any} | {any, int})","{int}"); }
		@Test public void test_24769() { testInvalid("({any} | {any, int})","{any, any}"); }
		@Test public void test_24770() { testValid("({any} | {any, int})","{int, int}"); }
		@Test public void test_24771() { testInvalid("({any} | {any, int})","(any | int)"); }
		@Test public void test_24772() { testInvalid("({any} | {any, int})","(int & any)"); }
		@Test public void test_24773() { testValid("({any} | {any, int})","{{any}}"); }
		@Test public void test_24774() { testValid("({any} | {any, int})","{{int, any}}"); }
		@Test public void test_24775() { testValid("({any} | {any, int})","{{int, int}}"); }
		@Test public void test_24776() { testValid("({any} | {any, int})","{(any | int)}"); }
		@Test public void test_24777() { testInvalid("({any} | {any, int})","!{int, any}"); }
		@Test public void test_24778() { testInvalid("({any} | {any, int})","!{int, int}"); }
		@Test public void test_24779() { testValid("({any} | {any, int})","!(any | any)"); }
		@Test public void test_24780() { testValid("({any} | {any, int})","!(any & any)"); }
		@Test public void test_24781() { testInvalid("({any} | {any, int})","!(int & int)"); }
		@Test public void test_24782() { testInvalid("({any} | {any, int})","{{int}, {any}}"); }
		@Test public void test_24783() { testInvalid("({any} | {any, int})","{!int, {any}}"); }
		@Test public void test_24784() { testInvalid("({any} | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_24785() { testInvalid("({any} | {any, int})","{(any | int), {any}}"); }
		@Test public void test_24786() { testInvalid("({any} | {any, int})","{!int, {int}}"); }
		@Test public void test_24787() { testInvalid("({any} | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_24788() { testInvalid("({any} | {any, int})","{(any | any), {int}}"); }
		@Test public void test_24789() { testInvalid("({any} | {any, int})","{(any & any), {int}}"); }
		@Test public void test_24790() { testInvalid("({any} | {any, int})","{(any & int), {int}}"); }
		@Test public void test_24791() { testInvalid("({any} | {any, int})","{{any, any}, !int}"); }
		@Test public void test_24792() { testInvalid("({any} | {any, int})","{{any, int}, !int}"); }
		@Test public void test_24793() { testInvalid("({any} | {any, int})","{(any | any), !int}"); }
		@Test public void test_24794() { testInvalid("({any} | {any, int})","{(int | any), !int}"); }
		@Test public void test_24795() { testInvalid("({any} | {any, int})","{(any & any), !int}"); }
		@Test public void test_24796() { testInvalid("({any} | {any, int})","{(int & any), !int}"); }
		@Test public void test_24797() { testInvalid("({any} | {any, int})","{(int & int), !int}"); }
		@Test public void test_24798() { testInvalid("({any} | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_24799() { testInvalid("({any} | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_24800() { testInvalid("({any} | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_24801() { testInvalid("({any} | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_24802() { testInvalid("({any} | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_24803() { testInvalid("({any} | {any, int})","{!int, {int, any}}"); }
		@Test public void test_24804() { testInvalid("({any} | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_24805() { testInvalid("({any} | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_24806() { testInvalid("({any} | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_24807() { testInvalid("({any} | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_24808() { testInvalid("({any} | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_24809() { testInvalid("({any} | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_24810() { testInvalid("({any} | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_24811() { testInvalid("({any} | {any, int})","{!int, {int, int}}"); }
		@Test public void test_24812() { testInvalid("({any} | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_24813() { testInvalid("({any} | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_24814() { testInvalid("({any} | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_24815() { testInvalid("({any} | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_24816() { testInvalid("({any} | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_24817() { testInvalid("({any} | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_24818() { testInvalid("({any} | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_24819() { testInvalid("({any} | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_24820() { testInvalid("({any} | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_24821() { testInvalid("({any} | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_24822() { testInvalid("({any} | {any, int})","{!int, (int | any)}"); }
		@Test public void test_24823() { testInvalid("({any} | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_24824() { testInvalid("({any} | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_24825() { testInvalid("({any} | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_24826() { testInvalid("({any} | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_24827() { testInvalid("({any} | {any, int})","{!int, (any | int)}"); }
		@Test public void test_24828() { testInvalid("({any} | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_24829() { testInvalid("({any} | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_24830() { testInvalid("({any} | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_24831() { testValid("({any} | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_24832() { testValid("({any} | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_24833() { testValid("({any} | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_24834() { testInvalid("({any} | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_24835() { testInvalid("({any} | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_24836() { testInvalid("({any} | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_24837() { testInvalid("({any} | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_24838() { testInvalid("({any} | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_24839() { testInvalid("({any} | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_24840() { testValid("({any} | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_24841() { testValid("({any} | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_24842() { testValid("({any} | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_24843() { testValid("({any} | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_24844() { testValid("({any} | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_24845() { testValid("({any} | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_24846() { testValid("({any} | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_24847() { testValid("({any} | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_24848() { testValid("({any} | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_24849() { testValid("({any} | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_24850() { testValid("({any} | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_24851() { testValid("({any} | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_24852() { testValid("({any} | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_24853() { testValid("({any} | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_24854() { testValid("({any} | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_24855() { testInvalid("({any} | {any, int})","(!int | {any})"); }
		@Test public void test_24856() { testInvalid("({any} | {any, int})","({any, any} | {any})"); }
		@Test public void test_24857() { testInvalid("({any} | {any, int})","((any | any) | {any})"); }
		@Test public void test_24858() { testInvalid("({any} | {any, int})","((int | any) | {any})"); }
		@Test public void test_24859() { testInvalid("({any} | {any, int})","((any & any) | {any})"); }
		@Test public void test_24860() { testInvalid("({any} | {any, int})","((int & any) | {any})"); }
		@Test public void test_24861() { testInvalid("({any} | {any, int})","((any & int) | {any})"); }
		@Test public void test_24862() { testValid("({any} | {any, int})","({int} | {int})"); }
		@Test public void test_24863() { testValid("({any} | {any, int})","(!any | {int})"); }
		@Test public void test_24864() { testInvalid("({any} | {any, int})","(!int | {int})"); }
		@Test public void test_24865() { testValid("({any} | {any, int})","({any, int} | {int})"); }
		@Test public void test_24866() { testInvalid("({any} | {any, int})","((int & any) | {int})"); }
		@Test public void test_24867() { testInvalid("({any} | {any, int})","((any & int) | {int})"); }
		@Test public void test_24868() { testInvalid("({any} | {any, int})","((int & int) | {int})"); }
		@Test public void test_24869() { testValid("({any} | {any, int})","({any} | !any)"); }
		@Test public void test_24870() { testValid("({any} | {any, int})","({int} | !any)"); }
		@Test public void test_24871() { testInvalid("({any} | {any, int})","({any, any} | !any)"); }
		@Test public void test_24872() { testValid("({any} | {any, int})","({int, int} | !any)"); }
		@Test public void test_24873() { testInvalid("({any} | {any, int})","((any | any) | !any)"); }
		@Test public void test_24874() { testInvalid("({any} | {any, int})","((int | any) | !any)"); }
		@Test public void test_24875() { testInvalid("({any} | {any, int})","((int | int) | !any)"); }
		@Test public void test_24876() { testInvalid("({any} | {any, int})","((int & int) | !any)"); }
		@Test public void test_24877() { testInvalid("({any} | {any, int})","(!int | !int)"); }
		@Test public void test_24878() { testInvalid("({any} | {any, int})","({any, any} | !int)"); }
		@Test public void test_24879() { testInvalid("({any} | {any, int})","({int, int} | !int)"); }
		@Test public void test_24880() { testInvalid("({any} | {any, int})","((int | any) | !int)"); }
		@Test public void test_24881() { testInvalid("({any} | {any, int})","((any | int) | !int)"); }
		@Test public void test_24882() { testInvalid("({any} | {any, int})","((any & int) | !int)"); }
		@Test public void test_24883() { testInvalid("({any} | {any, int})","((int & int) | !int)"); }
		@Test public void test_24884() { testInvalid("({any} | {any, int})","({int} | {any, any})"); }
		@Test public void test_24885() { testInvalid("({any} | {any, int})","(!any | {any, any})"); }
		@Test public void test_24886() { testInvalid("({any} | {any, int})","(!int | {any, any})"); }
		@Test public void test_24887() { testInvalid("({any} | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_24888() { testInvalid("({any} | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_24889() { testInvalid("({any} | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_24890() { testInvalid("({any} | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_24891() { testInvalid("({any} | {any, int})","(!int | {int, any})"); }
		@Test public void test_24892() { testInvalid("({any} | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_24893() { testInvalid("({any} | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_24894() { testInvalid("({any} | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_24895() { testInvalid("({any} | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_24896() { testInvalid("({any} | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_24897() { testValid("({any} | {any, int})","({any} | {any, int})"); }
		@Test public void test_24898() { testInvalid("({any} | {any, int})","(!int | {any, int})"); }
		@Test public void test_24899() { testValid("({any} | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_24900() { testInvalid("({any} | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_24901() { testInvalid("({any} | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_24902() { testInvalid("({any} | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_24903() { testInvalid("({any} | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_24904() { testValid("({any} | {any, int})","(!any | {int, int})"); }
		@Test public void test_24905() { testInvalid("({any} | {any, int})","(!int | {int, int})"); }
		@Test public void test_24906() { testInvalid("({any} | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_24907() { testValid("({any} | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_24908() { testInvalid("({any} | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_24909() { testInvalid("({any} | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_24910() { testInvalid("({any} | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_24911() { testInvalid("({any} | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_24912() { testInvalid("({any} | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_24913() { testInvalid("({any} | {any, int})","({any} | (any | any))"); }
		@Test public void test_24914() { testInvalid("({any} | {any, int})","(!any | (any | any))"); }
		@Test public void test_24915() { testInvalid("({any} | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_24916() { testInvalid("({any} | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_24917() { testInvalid("({any} | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_24918() { testInvalid("({any} | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_24919() { testInvalid("({any} | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_24920() { testInvalid("({any} | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_24921() { testInvalid("({any} | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_24922() { testInvalid("({any} | {any, int})","({any} | (int | any))"); }
		@Test public void test_24923() { testInvalid("({any} | {any, int})","(!int | (int | any))"); }
		@Test public void test_24924() { testInvalid("({any} | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_24925() { testInvalid("({any} | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_24926() { testInvalid("({any} | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_24927() { testInvalid("({any} | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_24928() { testInvalid("({any} | {any, int})","({any} | (any | int))"); }
		@Test public void test_24929() { testInvalid("({any} | {any, int})","({int} | (any | int))"); }
		@Test public void test_24930() { testInvalid("({any} | {any, int})","(!any | (any | int))"); }
		@Test public void test_24931() { testInvalid("({any} | {any, int})","(!int | (any | int))"); }
		@Test public void test_24932() { testInvalid("({any} | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_24933() { testInvalid("({any} | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_24934() { testInvalid("({any} | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_24935() { testInvalid("({any} | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_24936() { testInvalid("({any} | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_24937() { testInvalid("({any} | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_24938() { testInvalid("({any} | {any, int})","({int} | (int | int))"); }
		@Test public void test_24939() { testInvalid("({any} | {any, int})","(!any | (int | int))"); }
		@Test public void test_24940() { testInvalid("({any} | {any, int})","(!int | (int | int))"); }
		@Test public void test_24941() { testInvalid("({any} | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_24942() { testInvalid("({any} | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_24943() { testInvalid("({any} | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_24944() { testInvalid("({any} | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_24945() { testInvalid("({any} | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_24946() { testInvalid("({any} | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_24947() { testInvalid("({any} | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_24948() { testInvalid("({any} | {any, int})","(!any | (any & any))"); }
		@Test public void test_24949() { testInvalid("({any} | {any, int})","(!int | (any & any))"); }
		@Test public void test_24950() { testInvalid("({any} | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_24951() { testInvalid("({any} | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_24952() { testInvalid("({any} | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_24953() { testInvalid("({any} | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_24954() { testInvalid("({any} | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_24955() { testInvalid("({any} | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_24956() { testInvalid("({any} | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_24957() { testInvalid("({any} | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_24958() { testInvalid("({any} | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_24959() { testInvalid("({any} | {any, int})","({any} | (int & any))"); }
		@Test public void test_24960() { testValid("(!int | {any, int})","{int}"); }
		@Test public void test_24961() { testValid("(!int | {any, int})","{any, any}"); }
		@Test public void test_24962() { testValid("(!int | {any, int})","{int, int}"); }
		@Test public void test_24963() { testInvalid("(!int | {any, int})","(any | int)"); }
		@Test public void test_24964() { testInvalid("(!int | {any, int})","(int & any)"); }
		@Test public void test_24965() { testValid("(!int | {any, int})","{{any}}"); }
		@Test public void test_24966() { testValid("(!int | {any, int})","{{int, any}}"); }
		@Test public void test_24967() { testValid("(!int | {any, int})","{{int, int}}"); }
		@Test public void test_24968() { testValid("(!int | {any, int})","{(any | int)}"); }
		@Test public void test_24969() { testInvalid("(!int | {any, int})","!{int, any}"); }
		@Test public void test_24970() { testInvalid("(!int | {any, int})","!{int, int}"); }
		@Test public void test_24971() { testValid("(!int | {any, int})","!(any | any)"); }
		@Test public void test_24972() { testValid("(!int | {any, int})","!(any & any)"); }
		@Test public void test_24973() { testValid("(!int | {any, int})","!(int & int)"); }
		@Test public void test_24974() { testValid("(!int | {any, int})","{{int}, {any}}"); }
		@Test public void test_24975() { testValid("(!int | {any, int})","{!int, {any}}"); }
		@Test public void test_24976() { testValid("(!int | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_24977() { testValid("(!int | {any, int})","{(any | int), {any}}"); }
		@Test public void test_24978() { testValid("(!int | {any, int})","{!int, {int}}"); }
		@Test public void test_24979() { testValid("(!int | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_24980() { testValid("(!int | {any, int})","{(any | any), {int}}"); }
		@Test public void test_24981() { testValid("(!int | {any, int})","{(any & any), {int}}"); }
		@Test public void test_24982() { testValid("(!int | {any, int})","{(any & int), {int}}"); }
		@Test public void test_24983() { testValid("(!int | {any, int})","{{any, any}, !int}"); }
		@Test public void test_24984() { testValid("(!int | {any, int})","{{any, int}, !int}"); }
		@Test public void test_24985() { testValid("(!int | {any, int})","{(any | any), !int}"); }
		@Test public void test_24986() { testValid("(!int | {any, int})","{(int | any), !int}"); }
		@Test public void test_24987() { testValid("(!int | {any, int})","{(any & any), !int}"); }
		@Test public void test_24988() { testValid("(!int | {any, int})","{(int & any), !int}"); }
		@Test public void test_24989() { testValid("(!int | {any, int})","{(int & int), !int}"); }
		@Test public void test_24990() { testValid("(!int | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_24991() { testValid("(!int | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_24992() { testValid("(!int | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_24993() { testValid("(!int | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_24994() { testValid("(!int | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_24995() { testValid("(!int | {any, int})","{!int, {int, any}}"); }
		@Test public void test_24996() { testValid("(!int | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_24997() { testValid("(!int | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_24998() { testValid("(!int | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_24999() { testValid("(!int | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25000() { testValid("(!int | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25001() { testValid("(!int | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25002() { testValid("(!int | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25003() { testValid("(!int | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25004() { testValid("(!int | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25005() { testValid("(!int | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25006() { testValid("(!int | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25007() { testValid("(!int | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25008() { testValid("(!int | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25009() { testValid("(!int | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25010() { testValid("(!int | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25011() { testValid("(!int | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25012() { testValid("(!int | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25013() { testValid("(!int | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25014() { testValid("(!int | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25015() { testValid("(!int | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25016() { testValid("(!int | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25017() { testValid("(!int | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25018() { testValid("(!int | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25019() { testValid("(!int | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25020() { testValid("(!int | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25021() { testValid("(!int | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25022() { testValid("(!int | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25023() { testValid("(!int | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25024() { testValid("(!int | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25025() { testValid("(!int | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25026() { testValid("(!int | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25027() { testValid("(!int | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25028() { testValid("(!int | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25029() { testValid("(!int | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25030() { testValid("(!int | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25031() { testValid("(!int | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25032() { testValid("(!int | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25033() { testValid("(!int | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25034() { testValid("(!int | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25035() { testValid("(!int | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25036() { testValid("(!int | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25037() { testValid("(!int | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25038() { testValid("(!int | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25039() { testValid("(!int | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_25040() { testValid("(!int | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_25041() { testValid("(!int | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_25042() { testValid("(!int | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_25043() { testValid("(!int | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_25044() { testValid("(!int | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_25045() { testValid("(!int | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_25046() { testValid("(!int | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_25047() { testValid("(!int | {any, int})","(!int | {any})"); }
		@Test public void test_25048() { testValid("(!int | {any, int})","({any, any} | {any})"); }
		@Test public void test_25049() { testInvalid("(!int | {any, int})","((any | any) | {any})"); }
		@Test public void test_25050() { testInvalid("(!int | {any, int})","((int | any) | {any})"); }
		@Test public void test_25051() { testInvalid("(!int | {any, int})","((any & any) | {any})"); }
		@Test public void test_25052() { testInvalid("(!int | {any, int})","((int & any) | {any})"); }
		@Test public void test_25053() { testInvalid("(!int | {any, int})","((any & int) | {any})"); }
		@Test public void test_25054() { testValid("(!int | {any, int})","({int} | {int})"); }
		@Test public void test_25055() { testValid("(!int | {any, int})","(!any | {int})"); }
		@Test public void test_25056() { testValid("(!int | {any, int})","(!int | {int})"); }
		@Test public void test_25057() { testValid("(!int | {any, int})","({any, int} | {int})"); }
		@Test public void test_25058() { testInvalid("(!int | {any, int})","((int & any) | {int})"); }
		@Test public void test_25059() { testInvalid("(!int | {any, int})","((any & int) | {int})"); }
		@Test public void test_25060() { testInvalid("(!int | {any, int})","((int & int) | {int})"); }
		@Test public void test_25061() { testValid("(!int | {any, int})","({any} | !any)"); }
		@Test public void test_25062() { testValid("(!int | {any, int})","({int} | !any)"); }
		@Test public void test_25063() { testValid("(!int | {any, int})","({any, any} | !any)"); }
		@Test public void test_25064() { testValid("(!int | {any, int})","({int, int} | !any)"); }
		@Test public void test_25065() { testInvalid("(!int | {any, int})","((any | any) | !any)"); }
		@Test public void test_25066() { testInvalid("(!int | {any, int})","((int | any) | !any)"); }
		@Test public void test_25067() { testInvalid("(!int | {any, int})","((int | int) | !any)"); }
		@Test public void test_25068() { testInvalid("(!int | {any, int})","((int & int) | !any)"); }
		@Test public void test_25069() { testValid("(!int | {any, int})","(!int | !int)"); }
		@Test public void test_25070() { testValid("(!int | {any, int})","({any, any} | !int)"); }
		@Test public void test_25071() { testValid("(!int | {any, int})","({int, int} | !int)"); }
		@Test public void test_25072() { testInvalid("(!int | {any, int})","((int | any) | !int)"); }
		@Test public void test_25073() { testInvalid("(!int | {any, int})","((any | int) | !int)"); }
		@Test public void test_25074() { testInvalid("(!int | {any, int})","((any & int) | !int)"); }
		@Test public void test_25075() { testInvalid("(!int | {any, int})","((int & int) | !int)"); }
		@Test public void test_25076() { testValid("(!int | {any, int})","({int} | {any, any})"); }
		@Test public void test_25077() { testValid("(!int | {any, int})","(!any | {any, any})"); }
		@Test public void test_25078() { testValid("(!int | {any, int})","(!int | {any, any})"); }
		@Test public void test_25079() { testValid("(!int | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_25080() { testInvalid("(!int | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_25081() { testInvalid("(!int | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_25082() { testInvalid("(!int | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_25083() { testValid("(!int | {any, int})","(!int | {int, any})"); }
		@Test public void test_25084() { testValid("(!int | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_25085() { testInvalid("(!int | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_25086() { testInvalid("(!int | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_25087() { testInvalid("(!int | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_25088() { testInvalid("(!int | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_25089() { testValid("(!int | {any, int})","({any} | {any, int})"); }
		@Test public void test_25090() { testValid("(!int | {any, int})","(!int | {any, int})"); }
		@Test public void test_25091() { testValid("(!int | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_25092() { testInvalid("(!int | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_25093() { testInvalid("(!int | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_25094() { testInvalid("(!int | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_25095() { testInvalid("(!int | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_25096() { testValid("(!int | {any, int})","(!any | {int, int})"); }
		@Test public void test_25097() { testValid("(!int | {any, int})","(!int | {int, int})"); }
		@Test public void test_25098() { testValid("(!int | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_25099() { testValid("(!int | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_25100() { testInvalid("(!int | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_25101() { testInvalid("(!int | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_25102() { testInvalid("(!int | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_25103() { testInvalid("(!int | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_25104() { testInvalid("(!int | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_25105() { testInvalid("(!int | {any, int})","({any} | (any | any))"); }
		@Test public void test_25106() { testInvalid("(!int | {any, int})","(!any | (any | any))"); }
		@Test public void test_25107() { testInvalid("(!int | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_25108() { testInvalid("(!int | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_25109() { testInvalid("(!int | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_25110() { testInvalid("(!int | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_25111() { testInvalid("(!int | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_25112() { testInvalid("(!int | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_25113() { testInvalid("(!int | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_25114() { testInvalid("(!int | {any, int})","({any} | (int | any))"); }
		@Test public void test_25115() { testInvalid("(!int | {any, int})","(!int | (int | any))"); }
		@Test public void test_25116() { testInvalid("(!int | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_25117() { testInvalid("(!int | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_25118() { testInvalid("(!int | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_25119() { testInvalid("(!int | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_25120() { testInvalid("(!int | {any, int})","({any} | (any | int))"); }
		@Test public void test_25121() { testInvalid("(!int | {any, int})","({int} | (any | int))"); }
		@Test public void test_25122() { testInvalid("(!int | {any, int})","(!any | (any | int))"); }
		@Test public void test_25123() { testInvalid("(!int | {any, int})","(!int | (any | int))"); }
		@Test public void test_25124() { testInvalid("(!int | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_25125() { testInvalid("(!int | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_25126() { testInvalid("(!int | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_25127() { testInvalid("(!int | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_25128() { testInvalid("(!int | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_25129() { testInvalid("(!int | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_25130() { testInvalid("(!int | {any, int})","({int} | (int | int))"); }
		@Test public void test_25131() { testInvalid("(!int | {any, int})","(!any | (int | int))"); }
		@Test public void test_25132() { testInvalid("(!int | {any, int})","(!int | (int | int))"); }
		@Test public void test_25133() { testInvalid("(!int | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_25134() { testInvalid("(!int | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_25135() { testInvalid("(!int | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_25136() { testInvalid("(!int | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_25137() { testInvalid("(!int | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_25138() { testInvalid("(!int | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_25139() { testInvalid("(!int | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_25140() { testInvalid("(!int | {any, int})","(!any | (any & any))"); }
		@Test public void test_25141() { testInvalid("(!int | {any, int})","(!int | (any & any))"); }
		@Test public void test_25142() { testInvalid("(!int | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_25143() { testInvalid("(!int | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_25144() { testInvalid("(!int | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_25145() { testInvalid("(!int | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_25146() { testInvalid("(!int | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_25147() { testInvalid("(!int | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_25148() { testInvalid("(!int | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_25149() { testInvalid("(!int | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_25150() { testInvalid("(!int | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_25151() { testInvalid("(!int | {any, int})","({any} | (int & any))"); }
		@Test public void test_25152() { testInvalid("({any, int} | {any, int})","{int}"); }
		@Test public void test_25153() { testInvalid("({any, int} | {any, int})","{any, any}"); }
		@Test public void test_25154() { testValid("({any, int} | {any, int})","{int, int}"); }
		@Test public void test_25155() { testInvalid("({any, int} | {any, int})","(any | int)"); }
		@Test public void test_25156() { testInvalid("({any, int} | {any, int})","(int & any)"); }
		@Test public void test_25157() { testInvalid("({any, int} | {any, int})","{{any}}"); }
		@Test public void test_25158() { testInvalid("({any, int} | {any, int})","{{int, any}}"); }
		@Test public void test_25159() { testInvalid("({any, int} | {any, int})","{{int, int}}"); }
		@Test public void test_25160() { testInvalid("({any, int} | {any, int})","{(any | int)}"); }
		@Test public void test_25161() { testInvalid("({any, int} | {any, int})","!{int, any}"); }
		@Test public void test_25162() { testInvalid("({any, int} | {any, int})","!{int, int}"); }
		@Test public void test_25163() { testValid("({any, int} | {any, int})","!(any | any)"); }
		@Test public void test_25164() { testValid("({any, int} | {any, int})","!(any & any)"); }
		@Test public void test_25165() { testInvalid("({any, int} | {any, int})","!(int & int)"); }
		@Test public void test_25166() { testInvalid("({any, int} | {any, int})","{{int}, {any}}"); }
		@Test public void test_25167() { testInvalid("({any, int} | {any, int})","{!int, {any}}"); }
		@Test public void test_25168() { testInvalid("({any, int} | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_25169() { testInvalid("({any, int} | {any, int})","{(any | int), {any}}"); }
		@Test public void test_25170() { testInvalid("({any, int} | {any, int})","{!int, {int}}"); }
		@Test public void test_25171() { testInvalid("({any, int} | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_25172() { testInvalid("({any, int} | {any, int})","{(any | any), {int}}"); }
		@Test public void test_25173() { testInvalid("({any, int} | {any, int})","{(any & any), {int}}"); }
		@Test public void test_25174() { testInvalid("({any, int} | {any, int})","{(any & int), {int}}"); }
		@Test public void test_25175() { testInvalid("({any, int} | {any, int})","{{any, any}, !int}"); }
		@Test public void test_25176() { testInvalid("({any, int} | {any, int})","{{any, int}, !int}"); }
		@Test public void test_25177() { testInvalid("({any, int} | {any, int})","{(any | any), !int}"); }
		@Test public void test_25178() { testInvalid("({any, int} | {any, int})","{(int | any), !int}"); }
		@Test public void test_25179() { testInvalid("({any, int} | {any, int})","{(any & any), !int}"); }
		@Test public void test_25180() { testInvalid("({any, int} | {any, int})","{(int & any), !int}"); }
		@Test public void test_25181() { testInvalid("({any, int} | {any, int})","{(int & int), !int}"); }
		@Test public void test_25182() { testInvalid("({any, int} | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_25183() { testInvalid("({any, int} | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_25184() { testInvalid("({any, int} | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_25185() { testInvalid("({any, int} | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_25186() { testInvalid("({any, int} | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_25187() { testInvalid("({any, int} | {any, int})","{!int, {int, any}}"); }
		@Test public void test_25188() { testInvalid("({any, int} | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_25189() { testInvalid("({any, int} | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_25190() { testInvalid("({any, int} | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_25191() { testInvalid("({any, int} | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25192() { testInvalid("({any, int} | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25193() { testInvalid("({any, int} | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25194() { testInvalid("({any, int} | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25195() { testInvalid("({any, int} | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25196() { testInvalid("({any, int} | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25197() { testInvalid("({any, int} | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25198() { testInvalid("({any, int} | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25199() { testInvalid("({any, int} | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25200() { testInvalid("({any, int} | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25201() { testInvalid("({any, int} | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25202() { testInvalid("({any, int} | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25203() { testInvalid("({any, int} | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25204() { testInvalid("({any, int} | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25205() { testInvalid("({any, int} | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25206() { testInvalid("({any, int} | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25207() { testInvalid("({any, int} | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25208() { testInvalid("({any, int} | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25209() { testInvalid("({any, int} | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25210() { testInvalid("({any, int} | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25211() { testInvalid("({any, int} | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25212() { testInvalid("({any, int} | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25213() { testInvalid("({any, int} | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25214() { testInvalid("({any, int} | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25215() { testValid("({any, int} | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25216() { testValid("({any, int} | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25217() { testValid("({any, int} | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25218() { testInvalid("({any, int} | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25219() { testInvalid("({any, int} | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25220() { testInvalid("({any, int} | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25221() { testInvalid("({any, int} | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25222() { testInvalid("({any, int} | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25223() { testInvalid("({any, int} | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25224() { testValid("({any, int} | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25225() { testValid("({any, int} | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25226() { testValid("({any, int} | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25227() { testValid("({any, int} | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25228() { testValid("({any, int} | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25229() { testValid("({any, int} | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25230() { testValid("({any, int} | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25231() { testValid("({any, int} | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_25232() { testValid("({any, int} | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_25233() { testValid("({any, int} | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_25234() { testValid("({any, int} | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_25235() { testValid("({any, int} | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_25236() { testValid("({any, int} | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_25237() { testValid("({any, int} | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_25238() { testValid("({any, int} | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_25239() { testInvalid("({any, int} | {any, int})","(!int | {any})"); }
		@Test public void test_25240() { testInvalid("({any, int} | {any, int})","({any, any} | {any})"); }
		@Test public void test_25241() { testInvalid("({any, int} | {any, int})","((any | any) | {any})"); }
		@Test public void test_25242() { testInvalid("({any, int} | {any, int})","((int | any) | {any})"); }
		@Test public void test_25243() { testInvalid("({any, int} | {any, int})","((any & any) | {any})"); }
		@Test public void test_25244() { testInvalid("({any, int} | {any, int})","((int & any) | {any})"); }
		@Test public void test_25245() { testInvalid("({any, int} | {any, int})","((any & int) | {any})"); }
		@Test public void test_25246() { testInvalid("({any, int} | {any, int})","({int} | {int})"); }
		@Test public void test_25247() { testInvalid("({any, int} | {any, int})","(!any | {int})"); }
		@Test public void test_25248() { testInvalid("({any, int} | {any, int})","(!int | {int})"); }
		@Test public void test_25249() { testInvalid("({any, int} | {any, int})","({any, int} | {int})"); }
		@Test public void test_25250() { testInvalid("({any, int} | {any, int})","((int & any) | {int})"); }
		@Test public void test_25251() { testInvalid("({any, int} | {any, int})","((any & int) | {int})"); }
		@Test public void test_25252() { testInvalid("({any, int} | {any, int})","((int & int) | {int})"); }
		@Test public void test_25253() { testInvalid("({any, int} | {any, int})","({any} | !any)"); }
		@Test public void test_25254() { testInvalid("({any, int} | {any, int})","({int} | !any)"); }
		@Test public void test_25255() { testInvalid("({any, int} | {any, int})","({any, any} | !any)"); }
		@Test public void test_25256() { testValid("({any, int} | {any, int})","({int, int} | !any)"); }
		@Test public void test_25257() { testInvalid("({any, int} | {any, int})","((any | any) | !any)"); }
		@Test public void test_25258() { testInvalid("({any, int} | {any, int})","((int | any) | !any)"); }
		@Test public void test_25259() { testInvalid("({any, int} | {any, int})","((int | int) | !any)"); }
		@Test public void test_25260() { testInvalid("({any, int} | {any, int})","((int & int) | !any)"); }
		@Test public void test_25261() { testInvalid("({any, int} | {any, int})","(!int | !int)"); }
		@Test public void test_25262() { testInvalid("({any, int} | {any, int})","({any, any} | !int)"); }
		@Test public void test_25263() { testInvalid("({any, int} | {any, int})","({int, int} | !int)"); }
		@Test public void test_25264() { testInvalid("({any, int} | {any, int})","((int | any) | !int)"); }
		@Test public void test_25265() { testInvalid("({any, int} | {any, int})","((any | int) | !int)"); }
		@Test public void test_25266() { testInvalid("({any, int} | {any, int})","((any & int) | !int)"); }
		@Test public void test_25267() { testInvalid("({any, int} | {any, int})","((int & int) | !int)"); }
		@Test public void test_25268() { testInvalid("({any, int} | {any, int})","({int} | {any, any})"); }
		@Test public void test_25269() { testInvalid("({any, int} | {any, int})","(!any | {any, any})"); }
		@Test public void test_25270() { testInvalid("({any, int} | {any, int})","(!int | {any, any})"); }
		@Test public void test_25271() { testInvalid("({any, int} | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_25272() { testInvalid("({any, int} | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_25273() { testInvalid("({any, int} | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_25274() { testInvalid("({any, int} | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_25275() { testInvalid("({any, int} | {any, int})","(!int | {int, any})"); }
		@Test public void test_25276() { testInvalid("({any, int} | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_25277() { testInvalid("({any, int} | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_25278() { testInvalid("({any, int} | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_25279() { testInvalid("({any, int} | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_25280() { testInvalid("({any, int} | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_25281() { testInvalid("({any, int} | {any, int})","({any} | {any, int})"); }
		@Test public void test_25282() { testInvalid("({any, int} | {any, int})","(!int | {any, int})"); }
		@Test public void test_25283() { testValid("({any, int} | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_25284() { testInvalid("({any, int} | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_25285() { testInvalid("({any, int} | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_25286() { testInvalid("({any, int} | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_25287() { testInvalid("({any, int} | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_25288() { testValid("({any, int} | {any, int})","(!any | {int, int})"); }
		@Test public void test_25289() { testInvalid("({any, int} | {any, int})","(!int | {int, int})"); }
		@Test public void test_25290() { testInvalid("({any, int} | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_25291() { testValid("({any, int} | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_25292() { testInvalid("({any, int} | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_25293() { testInvalid("({any, int} | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_25294() { testInvalid("({any, int} | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_25295() { testInvalid("({any, int} | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_25296() { testInvalid("({any, int} | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_25297() { testInvalid("({any, int} | {any, int})","({any} | (any | any))"); }
		@Test public void test_25298() { testInvalid("({any, int} | {any, int})","(!any | (any | any))"); }
		@Test public void test_25299() { testInvalid("({any, int} | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_25300() { testInvalid("({any, int} | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_25301() { testInvalid("({any, int} | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_25302() { testInvalid("({any, int} | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_25303() { testInvalid("({any, int} | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_25304() { testInvalid("({any, int} | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_25305() { testInvalid("({any, int} | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_25306() { testInvalid("({any, int} | {any, int})","({any} | (int | any))"); }
		@Test public void test_25307() { testInvalid("({any, int} | {any, int})","(!int | (int | any))"); }
		@Test public void test_25308() { testInvalid("({any, int} | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_25309() { testInvalid("({any, int} | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_25310() { testInvalid("({any, int} | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_25311() { testInvalid("({any, int} | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_25312() { testInvalid("({any, int} | {any, int})","({any} | (any | int))"); }
		@Test public void test_25313() { testInvalid("({any, int} | {any, int})","({int} | (any | int))"); }
		@Test public void test_25314() { testInvalid("({any, int} | {any, int})","(!any | (any | int))"); }
		@Test public void test_25315() { testInvalid("({any, int} | {any, int})","(!int | (any | int))"); }
		@Test public void test_25316() { testInvalid("({any, int} | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_25317() { testInvalid("({any, int} | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_25318() { testInvalid("({any, int} | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_25319() { testInvalid("({any, int} | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_25320() { testInvalid("({any, int} | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_25321() { testInvalid("({any, int} | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_25322() { testInvalid("({any, int} | {any, int})","({int} | (int | int))"); }
		@Test public void test_25323() { testInvalid("({any, int} | {any, int})","(!any | (int | int))"); }
		@Test public void test_25324() { testInvalid("({any, int} | {any, int})","(!int | (int | int))"); }
		@Test public void test_25325() { testInvalid("({any, int} | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_25326() { testInvalid("({any, int} | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_25327() { testInvalid("({any, int} | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_25328() { testInvalid("({any, int} | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_25329() { testInvalid("({any, int} | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_25330() { testInvalid("({any, int} | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_25331() { testInvalid("({any, int} | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_25332() { testInvalid("({any, int} | {any, int})","(!any | (any & any))"); }
		@Test public void test_25333() { testInvalid("({any, int} | {any, int})","(!int | (any & any))"); }
		@Test public void test_25334() { testInvalid("({any, int} | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_25335() { testInvalid("({any, int} | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_25336() { testInvalid("({any, int} | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_25337() { testInvalid("({any, int} | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_25338() { testInvalid("({any, int} | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_25339() { testInvalid("({any, int} | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_25340() { testInvalid("({any, int} | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_25341() { testInvalid("({any, int} | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_25342() { testInvalid("({any, int} | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_25343() { testInvalid("({any, int} | {any, int})","({any} | (int & any))"); }
		@Test public void test_25344() { testValid("((any | any) | {any, int})","{int}"); }
		@Test public void test_25345() { testValid("((any | any) | {any, int})","{any, any}"); }
		@Test public void test_25346() { testValid("((any | any) | {any, int})","{int, int}"); }
		@Test public void test_25347() { testValid("((any | any) | {any, int})","(any | int)"); }
		@Test public void test_25348() { testValid("((any | any) | {any, int})","(int & any)"); }
		@Test public void test_25349() { testValid("((any | any) | {any, int})","{{any}}"); }
		@Test public void test_25350() { testValid("((any | any) | {any, int})","{{int, any}}"); }
		@Test public void test_25351() { testValid("((any | any) | {any, int})","{{int, int}}"); }
		@Test public void test_25352() { testValid("((any | any) | {any, int})","{(any | int)}"); }
		@Test public void test_25353() { testValid("((any | any) | {any, int})","!{int, any}"); }
		@Test public void test_25354() { testValid("((any | any) | {any, int})","!{int, int}"); }
		@Test public void test_25355() { testValid("((any | any) | {any, int})","!(any | any)"); }
		@Test public void test_25356() { testValid("((any | any) | {any, int})","!(any & any)"); }
		@Test public void test_25357() { testValid("((any | any) | {any, int})","!(int & int)"); }
		@Test public void test_25358() { testValid("((any | any) | {any, int})","{{int}, {any}}"); }
		@Test public void test_25359() { testValid("((any | any) | {any, int})","{!int, {any}}"); }
		@Test public void test_25360() { testValid("((any | any) | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_25361() { testValid("((any | any) | {any, int})","{(any | int), {any}}"); }
		@Test public void test_25362() { testValid("((any | any) | {any, int})","{!int, {int}}"); }
		@Test public void test_25363() { testValid("((any | any) | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_25364() { testValid("((any | any) | {any, int})","{(any | any), {int}}"); }
		@Test public void test_25365() { testValid("((any | any) | {any, int})","{(any & any), {int}}"); }
		@Test public void test_25366() { testValid("((any | any) | {any, int})","{(any & int), {int}}"); }
		@Test public void test_25367() { testValid("((any | any) | {any, int})","{{any, any}, !int}"); }
		@Test public void test_25368() { testValid("((any | any) | {any, int})","{{any, int}, !int}"); }
		@Test public void test_25369() { testValid("((any | any) | {any, int})","{(any | any), !int}"); }
		@Test public void test_25370() { testValid("((any | any) | {any, int})","{(int | any), !int}"); }
		@Test public void test_25371() { testValid("((any | any) | {any, int})","{(any & any), !int}"); }
		@Test public void test_25372() { testValid("((any | any) | {any, int})","{(int & any), !int}"); }
		@Test public void test_25373() { testValid("((any | any) | {any, int})","{(int & int), !int}"); }
		@Test public void test_25374() { testValid("((any | any) | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_25375() { testValid("((any | any) | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_25376() { testValid("((any | any) | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_25377() { testValid("((any | any) | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_25378() { testValid("((any | any) | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_25379() { testValid("((any | any) | {any, int})","{!int, {int, any}}"); }
		@Test public void test_25380() { testValid("((any | any) | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_25381() { testValid("((any | any) | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_25382() { testValid("((any | any) | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_25383() { testValid("((any | any) | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25384() { testValid("((any | any) | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25385() { testValid("((any | any) | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25386() { testValid("((any | any) | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25387() { testValid("((any | any) | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25388() { testValid("((any | any) | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25389() { testValid("((any | any) | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25390() { testValid("((any | any) | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25391() { testValid("((any | any) | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25392() { testValid("((any | any) | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25393() { testValid("((any | any) | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25394() { testValid("((any | any) | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25395() { testValid("((any | any) | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25396() { testValid("((any | any) | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25397() { testValid("((any | any) | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25398() { testValid("((any | any) | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25399() { testValid("((any | any) | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25400() { testValid("((any | any) | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25401() { testValid("((any | any) | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25402() { testValid("((any | any) | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25403() { testValid("((any | any) | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25404() { testValid("((any | any) | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25405() { testValid("((any | any) | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25406() { testValid("((any | any) | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25407() { testValid("((any | any) | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25408() { testValid("((any | any) | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25409() { testValid("((any | any) | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25410() { testValid("((any | any) | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25411() { testValid("((any | any) | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25412() { testValid("((any | any) | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25413() { testValid("((any | any) | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25414() { testValid("((any | any) | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25415() { testValid("((any | any) | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25416() { testValid("((any | any) | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25417() { testValid("((any | any) | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25418() { testValid("((any | any) | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25419() { testValid("((any | any) | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25420() { testValid("((any | any) | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25421() { testValid("((any | any) | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25422() { testValid("((any | any) | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25423() { testValid("((any | any) | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_25424() { testValid("((any | any) | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_25425() { testValid("((any | any) | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_25426() { testValid("((any | any) | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_25427() { testValid("((any | any) | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_25428() { testValid("((any | any) | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_25429() { testValid("((any | any) | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_25430() { testValid("((any | any) | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_25431() { testValid("((any | any) | {any, int})","(!int | {any})"); }
		@Test public void test_25432() { testValid("((any | any) | {any, int})","({any, any} | {any})"); }
		@Test public void test_25433() { testValid("((any | any) | {any, int})","((any | any) | {any})"); }
		@Test public void test_25434() { testValid("((any | any) | {any, int})","((int | any) | {any})"); }
		@Test public void test_25435() { testValid("((any | any) | {any, int})","((any & any) | {any})"); }
		@Test public void test_25436() { testValid("((any | any) | {any, int})","((int & any) | {any})"); }
		@Test public void test_25437() { testValid("((any | any) | {any, int})","((any & int) | {any})"); }
		@Test public void test_25438() { testValid("((any | any) | {any, int})","({int} | {int})"); }
		@Test public void test_25439() { testValid("((any | any) | {any, int})","(!any | {int})"); }
		@Test public void test_25440() { testValid("((any | any) | {any, int})","(!int | {int})"); }
		@Test public void test_25441() { testValid("((any | any) | {any, int})","({any, int} | {int})"); }
		@Test public void test_25442() { testValid("((any | any) | {any, int})","((int & any) | {int})"); }
		@Test public void test_25443() { testValid("((any | any) | {any, int})","((any & int) | {int})"); }
		@Test public void test_25444() { testValid("((any | any) | {any, int})","((int & int) | {int})"); }
		@Test public void test_25445() { testValid("((any | any) | {any, int})","({any} | !any)"); }
		@Test public void test_25446() { testValid("((any | any) | {any, int})","({int} | !any)"); }
		@Test public void test_25447() { testValid("((any | any) | {any, int})","({any, any} | !any)"); }
		@Test public void test_25448() { testValid("((any | any) | {any, int})","({int, int} | !any)"); }
		@Test public void test_25449() { testValid("((any | any) | {any, int})","((any | any) | !any)"); }
		@Test public void test_25450() { testValid("((any | any) | {any, int})","((int | any) | !any)"); }
		@Test public void test_25451() { testValid("((any | any) | {any, int})","((int | int) | !any)"); }
		@Test public void test_25452() { testValid("((any | any) | {any, int})","((int & int) | !any)"); }
		@Test public void test_25453() { testValid("((any | any) | {any, int})","(!int | !int)"); }
		@Test public void test_25454() { testValid("((any | any) | {any, int})","({any, any} | !int)"); }
		@Test public void test_25455() { testValid("((any | any) | {any, int})","({int, int} | !int)"); }
		@Test public void test_25456() { testValid("((any | any) | {any, int})","((int | any) | !int)"); }
		@Test public void test_25457() { testValid("((any | any) | {any, int})","((any | int) | !int)"); }
		@Test public void test_25458() { testValid("((any | any) | {any, int})","((any & int) | !int)"); }
		@Test public void test_25459() { testValid("((any | any) | {any, int})","((int & int) | !int)"); }
		@Test public void test_25460() { testValid("((any | any) | {any, int})","({int} | {any, any})"); }
		@Test public void test_25461() { testValid("((any | any) | {any, int})","(!any | {any, any})"); }
		@Test public void test_25462() { testValid("((any | any) | {any, int})","(!int | {any, any})"); }
		@Test public void test_25463() { testValid("((any | any) | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_25464() { testValid("((any | any) | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_25465() { testValid("((any | any) | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_25466() { testValid("((any | any) | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_25467() { testValid("((any | any) | {any, int})","(!int | {int, any})"); }
		@Test public void test_25468() { testValid("((any | any) | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_25469() { testValid("((any | any) | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_25470() { testValid("((any | any) | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_25471() { testValid("((any | any) | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_25472() { testValid("((any | any) | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_25473() { testValid("((any | any) | {any, int})","({any} | {any, int})"); }
		@Test public void test_25474() { testValid("((any | any) | {any, int})","(!int | {any, int})"); }
		@Test public void test_25475() { testValid("((any | any) | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_25476() { testValid("((any | any) | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_25477() { testValid("((any | any) | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_25478() { testValid("((any | any) | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_25479() { testValid("((any | any) | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_25480() { testValid("((any | any) | {any, int})","(!any | {int, int})"); }
		@Test public void test_25481() { testValid("((any | any) | {any, int})","(!int | {int, int})"); }
		@Test public void test_25482() { testValid("((any | any) | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_25483() { testValid("((any | any) | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_25484() { testValid("((any | any) | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_25485() { testValid("((any | any) | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_25486() { testValid("((any | any) | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_25487() { testValid("((any | any) | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_25488() { testValid("((any | any) | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_25489() { testValid("((any | any) | {any, int})","({any} | (any | any))"); }
		@Test public void test_25490() { testValid("((any | any) | {any, int})","(!any | (any | any))"); }
		@Test public void test_25491() { testValid("((any | any) | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_25492() { testValid("((any | any) | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_25493() { testValid("((any | any) | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_25494() { testValid("((any | any) | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_25495() { testValid("((any | any) | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_25496() { testValid("((any | any) | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_25497() { testValid("((any | any) | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_25498() { testValid("((any | any) | {any, int})","({any} | (int | any))"); }
		@Test public void test_25499() { testValid("((any | any) | {any, int})","(!int | (int | any))"); }
		@Test public void test_25500() { testValid("((any | any) | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_25501() { testValid("((any | any) | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_25502() { testValid("((any | any) | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_25503() { testValid("((any | any) | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_25504() { testValid("((any | any) | {any, int})","({any} | (any | int))"); }
		@Test public void test_25505() { testValid("((any | any) | {any, int})","({int} | (any | int))"); }
		@Test public void test_25506() { testValid("((any | any) | {any, int})","(!any | (any | int))"); }
		@Test public void test_25507() { testValid("((any | any) | {any, int})","(!int | (any | int))"); }
		@Test public void test_25508() { testValid("((any | any) | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_25509() { testValid("((any | any) | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_25510() { testValid("((any | any) | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_25511() { testValid("((any | any) | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_25512() { testValid("((any | any) | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_25513() { testValid("((any | any) | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_25514() { testValid("((any | any) | {any, int})","({int} | (int | int))"); }
		@Test public void test_25515() { testValid("((any | any) | {any, int})","(!any | (int | int))"); }
		@Test public void test_25516() { testValid("((any | any) | {any, int})","(!int | (int | int))"); }
		@Test public void test_25517() { testValid("((any | any) | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_25518() { testValid("((any | any) | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_25519() { testValid("((any | any) | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_25520() { testValid("((any | any) | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_25521() { testValid("((any | any) | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_25522() { testValid("((any | any) | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_25523() { testValid("((any | any) | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_25524() { testValid("((any | any) | {any, int})","(!any | (any & any))"); }
		@Test public void test_25525() { testValid("((any | any) | {any, int})","(!int | (any & any))"); }
		@Test public void test_25526() { testValid("((any | any) | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_25527() { testValid("((any | any) | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_25528() { testValid("((any | any) | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_25529() { testValid("((any | any) | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_25530() { testValid("((any | any) | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_25531() { testValid("((any | any) | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_25532() { testValid("((any | any) | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_25533() { testValid("((any | any) | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_25534() { testValid("((any | any) | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_25535() { testValid("((any | any) | {any, int})","({any} | (int & any))"); }
		@Test public void test_25536() { testValid("((any | int) | {any, int})","{int}"); }
		@Test public void test_25537() { testValid("((any | int) | {any, int})","{any, any}"); }
		@Test public void test_25538() { testValid("((any | int) | {any, int})","{int, int}"); }
		@Test public void test_25539() { testValid("((any | int) | {any, int})","(any | int)"); }
		@Test public void test_25540() { testValid("((any | int) | {any, int})","(int & any)"); }
		@Test public void test_25541() { testValid("((any | int) | {any, int})","{{any}}"); }
		@Test public void test_25542() { testValid("((any | int) | {any, int})","{{int, any}}"); }
		@Test public void test_25543() { testValid("((any | int) | {any, int})","{{int, int}}"); }
		@Test public void test_25544() { testValid("((any | int) | {any, int})","{(any | int)}"); }
		@Test public void test_25545() { testValid("((any | int) | {any, int})","!{int, any}"); }
		@Test public void test_25546() { testValid("((any | int) | {any, int})","!{int, int}"); }
		@Test public void test_25547() { testValid("((any | int) | {any, int})","!(any | any)"); }
		@Test public void test_25548() { testValid("((any | int) | {any, int})","!(any & any)"); }
		@Test public void test_25549() { testValid("((any | int) | {any, int})","!(int & int)"); }
		@Test public void test_25550() { testValid("((any | int) | {any, int})","{{int}, {any}}"); }
		@Test public void test_25551() { testValid("((any | int) | {any, int})","{!int, {any}}"); }
		@Test public void test_25552() { testValid("((any | int) | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_25553() { testValid("((any | int) | {any, int})","{(any | int), {any}}"); }
		@Test public void test_25554() { testValid("((any | int) | {any, int})","{!int, {int}}"); }
		@Test public void test_25555() { testValid("((any | int) | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_25556() { testValid("((any | int) | {any, int})","{(any | any), {int}}"); }
		@Test public void test_25557() { testValid("((any | int) | {any, int})","{(any & any), {int}}"); }
		@Test public void test_25558() { testValid("((any | int) | {any, int})","{(any & int), {int}}"); }
		@Test public void test_25559() { testValid("((any | int) | {any, int})","{{any, any}, !int}"); }
		@Test public void test_25560() { testValid("((any | int) | {any, int})","{{any, int}, !int}"); }
		@Test public void test_25561() { testValid("((any | int) | {any, int})","{(any | any), !int}"); }
		@Test public void test_25562() { testValid("((any | int) | {any, int})","{(int | any), !int}"); }
		@Test public void test_25563() { testValid("((any | int) | {any, int})","{(any & any), !int}"); }
		@Test public void test_25564() { testValid("((any | int) | {any, int})","{(int & any), !int}"); }
		@Test public void test_25565() { testValid("((any | int) | {any, int})","{(int & int), !int}"); }
		@Test public void test_25566() { testValid("((any | int) | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_25567() { testValid("((any | int) | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_25568() { testValid("((any | int) | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_25569() { testValid("((any | int) | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_25570() { testValid("((any | int) | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_25571() { testValid("((any | int) | {any, int})","{!int, {int, any}}"); }
		@Test public void test_25572() { testValid("((any | int) | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_25573() { testValid("((any | int) | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_25574() { testValid("((any | int) | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_25575() { testValid("((any | int) | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25576() { testValid("((any | int) | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25577() { testValid("((any | int) | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25578() { testValid("((any | int) | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25579() { testValid("((any | int) | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25580() { testValid("((any | int) | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25581() { testValid("((any | int) | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25582() { testValid("((any | int) | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25583() { testValid("((any | int) | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25584() { testValid("((any | int) | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25585() { testValid("((any | int) | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25586() { testValid("((any | int) | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25587() { testValid("((any | int) | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25588() { testValid("((any | int) | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25589() { testValid("((any | int) | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25590() { testValid("((any | int) | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25591() { testValid("((any | int) | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25592() { testValid("((any | int) | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25593() { testValid("((any | int) | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25594() { testValid("((any | int) | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25595() { testValid("((any | int) | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25596() { testValid("((any | int) | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25597() { testValid("((any | int) | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25598() { testValid("((any | int) | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25599() { testValid("((any | int) | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25600() { testValid("((any | int) | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25601() { testValid("((any | int) | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25602() { testValid("((any | int) | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25603() { testValid("((any | int) | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25604() { testValid("((any | int) | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25605() { testValid("((any | int) | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25606() { testValid("((any | int) | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25607() { testValid("((any | int) | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25608() { testValid("((any | int) | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25609() { testValid("((any | int) | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25610() { testValid("((any | int) | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25611() { testValid("((any | int) | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25612() { testValid("((any | int) | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25613() { testValid("((any | int) | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25614() { testValid("((any | int) | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25615() { testValid("((any | int) | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_25616() { testValid("((any | int) | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_25617() { testValid("((any | int) | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_25618() { testValid("((any | int) | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_25619() { testValid("((any | int) | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_25620() { testValid("((any | int) | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_25621() { testValid("((any | int) | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_25622() { testValid("((any | int) | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_25623() { testValid("((any | int) | {any, int})","(!int | {any})"); }
		@Test public void test_25624() { testValid("((any | int) | {any, int})","({any, any} | {any})"); }
		@Test public void test_25625() { testValid("((any | int) | {any, int})","((any | any) | {any})"); }
		@Test public void test_25626() { testValid("((any | int) | {any, int})","((int | any) | {any})"); }
		@Test public void test_25627() { testValid("((any | int) | {any, int})","((any & any) | {any})"); }
		@Test public void test_25628() { testValid("((any | int) | {any, int})","((int & any) | {any})"); }
		@Test public void test_25629() { testValid("((any | int) | {any, int})","((any & int) | {any})"); }
		@Test public void test_25630() { testValid("((any | int) | {any, int})","({int} | {int})"); }
		@Test public void test_25631() { testValid("((any | int) | {any, int})","(!any | {int})"); }
		@Test public void test_25632() { testValid("((any | int) | {any, int})","(!int | {int})"); }
		@Test public void test_25633() { testValid("((any | int) | {any, int})","({any, int} | {int})"); }
		@Test public void test_25634() { testValid("((any | int) | {any, int})","((int & any) | {int})"); }
		@Test public void test_25635() { testValid("((any | int) | {any, int})","((any & int) | {int})"); }
		@Test public void test_25636() { testValid("((any | int) | {any, int})","((int & int) | {int})"); }
		@Test public void test_25637() { testValid("((any | int) | {any, int})","({any} | !any)"); }
		@Test public void test_25638() { testValid("((any | int) | {any, int})","({int} | !any)"); }
		@Test public void test_25639() { testValid("((any | int) | {any, int})","({any, any} | !any)"); }
		@Test public void test_25640() { testValid("((any | int) | {any, int})","({int, int} | !any)"); }
		@Test public void test_25641() { testValid("((any | int) | {any, int})","((any | any) | !any)"); }
		@Test public void test_25642() { testValid("((any | int) | {any, int})","((int | any) | !any)"); }
		@Test public void test_25643() { testValid("((any | int) | {any, int})","((int | int) | !any)"); }
		@Test public void test_25644() { testValid("((any | int) | {any, int})","((int & int) | !any)"); }
		@Test public void test_25645() { testValid("((any | int) | {any, int})","(!int | !int)"); }
		@Test public void test_25646() { testValid("((any | int) | {any, int})","({any, any} | !int)"); }
		@Test public void test_25647() { testValid("((any | int) | {any, int})","({int, int} | !int)"); }
		@Test public void test_25648() { testValid("((any | int) | {any, int})","((int | any) | !int)"); }
		@Test public void test_25649() { testValid("((any | int) | {any, int})","((any | int) | !int)"); }
		@Test public void test_25650() { testValid("((any | int) | {any, int})","((any & int) | !int)"); }
		@Test public void test_25651() { testValid("((any | int) | {any, int})","((int & int) | !int)"); }
		@Test public void test_25652() { testValid("((any | int) | {any, int})","({int} | {any, any})"); }
		@Test public void test_25653() { testValid("((any | int) | {any, int})","(!any | {any, any})"); }
		@Test public void test_25654() { testValid("((any | int) | {any, int})","(!int | {any, any})"); }
		@Test public void test_25655() { testValid("((any | int) | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_25656() { testValid("((any | int) | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_25657() { testValid("((any | int) | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_25658() { testValid("((any | int) | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_25659() { testValid("((any | int) | {any, int})","(!int | {int, any})"); }
		@Test public void test_25660() { testValid("((any | int) | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_25661() { testValid("((any | int) | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_25662() { testValid("((any | int) | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_25663() { testValid("((any | int) | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_25664() { testValid("((any | int) | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_25665() { testValid("((any | int) | {any, int})","({any} | {any, int})"); }
		@Test public void test_25666() { testValid("((any | int) | {any, int})","(!int | {any, int})"); }
		@Test public void test_25667() { testValid("((any | int) | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_25668() { testValid("((any | int) | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_25669() { testValid("((any | int) | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_25670() { testValid("((any | int) | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_25671() { testValid("((any | int) | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_25672() { testValid("((any | int) | {any, int})","(!any | {int, int})"); }
		@Test public void test_25673() { testValid("((any | int) | {any, int})","(!int | {int, int})"); }
		@Test public void test_25674() { testValid("((any | int) | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_25675() { testValid("((any | int) | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_25676() { testValid("((any | int) | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_25677() { testValid("((any | int) | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_25678() { testValid("((any | int) | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_25679() { testValid("((any | int) | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_25680() { testValid("((any | int) | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_25681() { testValid("((any | int) | {any, int})","({any} | (any | any))"); }
		@Test public void test_25682() { testValid("((any | int) | {any, int})","(!any | (any | any))"); }
		@Test public void test_25683() { testValid("((any | int) | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_25684() { testValid("((any | int) | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_25685() { testValid("((any | int) | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_25686() { testValid("((any | int) | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_25687() { testValid("((any | int) | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_25688() { testValid("((any | int) | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_25689() { testValid("((any | int) | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_25690() { testValid("((any | int) | {any, int})","({any} | (int | any))"); }
		@Test public void test_25691() { testValid("((any | int) | {any, int})","(!int | (int | any))"); }
		@Test public void test_25692() { testValid("((any | int) | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_25693() { testValid("((any | int) | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_25694() { testValid("((any | int) | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_25695() { testValid("((any | int) | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_25696() { testValid("((any | int) | {any, int})","({any} | (any | int))"); }
		@Test public void test_25697() { testValid("((any | int) | {any, int})","({int} | (any | int))"); }
		@Test public void test_25698() { testValid("((any | int) | {any, int})","(!any | (any | int))"); }
		@Test public void test_25699() { testValid("((any | int) | {any, int})","(!int | (any | int))"); }
		@Test public void test_25700() { testValid("((any | int) | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_25701() { testValid("((any | int) | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_25702() { testValid("((any | int) | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_25703() { testValid("((any | int) | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_25704() { testValid("((any | int) | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_25705() { testValid("((any | int) | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_25706() { testValid("((any | int) | {any, int})","({int} | (int | int))"); }
		@Test public void test_25707() { testValid("((any | int) | {any, int})","(!any | (int | int))"); }
		@Test public void test_25708() { testValid("((any | int) | {any, int})","(!int | (int | int))"); }
		@Test public void test_25709() { testValid("((any | int) | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_25710() { testValid("((any | int) | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_25711() { testValid("((any | int) | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_25712() { testValid("((any | int) | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_25713() { testValid("((any | int) | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_25714() { testValid("((any | int) | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_25715() { testValid("((any | int) | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_25716() { testValid("((any | int) | {any, int})","(!any | (any & any))"); }
		@Test public void test_25717() { testValid("((any | int) | {any, int})","(!int | (any & any))"); }
		@Test public void test_25718() { testValid("((any | int) | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_25719() { testValid("((any | int) | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_25720() { testValid("((any | int) | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_25721() { testValid("((any | int) | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_25722() { testValid("((any | int) | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_25723() { testValid("((any | int) | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_25724() { testValid("((any | int) | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_25725() { testValid("((any | int) | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_25726() { testValid("((any | int) | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_25727() { testValid("((any | int) | {any, int})","({any} | (int & any))"); }
		@Test public void test_25728() { testInvalid("((int | int) | {any, int})","{int}"); }
		@Test public void test_25729() { testInvalid("((int | int) | {any, int})","{any, any}"); }
		@Test public void test_25730() { testValid("((int | int) | {any, int})","{int, int}"); }
		@Test public void test_25731() { testInvalid("((int | int) | {any, int})","(any | int)"); }
		@Test public void test_25732() { testValid("((int | int) | {any, int})","(int & any)"); }
		@Test public void test_25733() { testInvalid("((int | int) | {any, int})","{{any}}"); }
		@Test public void test_25734() { testInvalid("((int | int) | {any, int})","{{int, any}}"); }
		@Test public void test_25735() { testInvalid("((int | int) | {any, int})","{{int, int}}"); }
		@Test public void test_25736() { testInvalid("((int | int) | {any, int})","{(any | int)}"); }
		@Test public void test_25737() { testInvalid("((int | int) | {any, int})","!{int, any}"); }
		@Test public void test_25738() { testInvalid("((int | int) | {any, int})","!{int, int}"); }
		@Test public void test_25739() { testValid("((int | int) | {any, int})","!(any | any)"); }
		@Test public void test_25740() { testValid("((int | int) | {any, int})","!(any & any)"); }
		@Test public void test_25741() { testInvalid("((int | int) | {any, int})","!(int & int)"); }
		@Test public void test_25742() { testInvalid("((int | int) | {any, int})","{{int}, {any}}"); }
		@Test public void test_25743() { testInvalid("((int | int) | {any, int})","{!int, {any}}"); }
		@Test public void test_25744() { testInvalid("((int | int) | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_25745() { testInvalid("((int | int) | {any, int})","{(any | int), {any}}"); }
		@Test public void test_25746() { testInvalid("((int | int) | {any, int})","{!int, {int}}"); }
		@Test public void test_25747() { testInvalid("((int | int) | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_25748() { testInvalid("((int | int) | {any, int})","{(any | any), {int}}"); }
		@Test public void test_25749() { testInvalid("((int | int) | {any, int})","{(any & any), {int}}"); }
		@Test public void test_25750() { testInvalid("((int | int) | {any, int})","{(any & int), {int}}"); }
		@Test public void test_25751() { testInvalid("((int | int) | {any, int})","{{any, any}, !int}"); }
		@Test public void test_25752() { testInvalid("((int | int) | {any, int})","{{any, int}, !int}"); }
		@Test public void test_25753() { testInvalid("((int | int) | {any, int})","{(any | any), !int}"); }
		@Test public void test_25754() { testInvalid("((int | int) | {any, int})","{(int | any), !int}"); }
		@Test public void test_25755() { testInvalid("((int | int) | {any, int})","{(any & any), !int}"); }
		@Test public void test_25756() { testInvalid("((int | int) | {any, int})","{(int & any), !int}"); }
		@Test public void test_25757() { testInvalid("((int | int) | {any, int})","{(int & int), !int}"); }
		@Test public void test_25758() { testInvalid("((int | int) | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_25759() { testInvalid("((int | int) | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_25760() { testInvalid("((int | int) | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_25761() { testInvalid("((int | int) | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_25762() { testInvalid("((int | int) | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_25763() { testInvalid("((int | int) | {any, int})","{!int, {int, any}}"); }
		@Test public void test_25764() { testInvalid("((int | int) | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_25765() { testInvalid("((int | int) | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_25766() { testInvalid("((int | int) | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_25767() { testInvalid("((int | int) | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25768() { testInvalid("((int | int) | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25769() { testInvalid("((int | int) | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25770() { testInvalid("((int | int) | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25771() { testInvalid("((int | int) | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25772() { testInvalid("((int | int) | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25773() { testInvalid("((int | int) | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25774() { testInvalid("((int | int) | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25775() { testInvalid("((int | int) | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25776() { testInvalid("((int | int) | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25777() { testInvalid("((int | int) | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25778() { testInvalid("((int | int) | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25779() { testInvalid("((int | int) | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25780() { testInvalid("((int | int) | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25781() { testInvalid("((int | int) | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25782() { testInvalid("((int | int) | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25783() { testInvalid("((int | int) | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25784() { testInvalid("((int | int) | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25785() { testInvalid("((int | int) | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25786() { testInvalid("((int | int) | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25787() { testInvalid("((int | int) | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25788() { testInvalid("((int | int) | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25789() { testInvalid("((int | int) | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25790() { testInvalid("((int | int) | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25791() { testValid("((int | int) | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25792() { testValid("((int | int) | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25793() { testValid("((int | int) | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25794() { testInvalid("((int | int) | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25795() { testInvalid("((int | int) | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25796() { testInvalid("((int | int) | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25797() { testInvalid("((int | int) | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25798() { testInvalid("((int | int) | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25799() { testInvalid("((int | int) | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25800() { testValid("((int | int) | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25801() { testValid("((int | int) | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25802() { testValid("((int | int) | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25803() { testValid("((int | int) | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25804() { testValid("((int | int) | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25805() { testValid("((int | int) | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25806() { testValid("((int | int) | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25807() { testValid("((int | int) | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_25808() { testValid("((int | int) | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_25809() { testValid("((int | int) | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_25810() { testValid("((int | int) | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_25811() { testValid("((int | int) | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_25812() { testValid("((int | int) | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_25813() { testValid("((int | int) | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_25814() { testValid("((int | int) | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_25815() { testInvalid("((int | int) | {any, int})","(!int | {any})"); }
		@Test public void test_25816() { testInvalid("((int | int) | {any, int})","({any, any} | {any})"); }
		@Test public void test_25817() { testInvalid("((int | int) | {any, int})","((any | any) | {any})"); }
		@Test public void test_25818() { testInvalid("((int | int) | {any, int})","((int | any) | {any})"); }
		@Test public void test_25819() { testInvalid("((int | int) | {any, int})","((any & any) | {any})"); }
		@Test public void test_25820() { testInvalid("((int | int) | {any, int})","((int & any) | {any})"); }
		@Test public void test_25821() { testInvalid("((int | int) | {any, int})","((any & int) | {any})"); }
		@Test public void test_25822() { testInvalid("((int | int) | {any, int})","({int} | {int})"); }
		@Test public void test_25823() { testInvalid("((int | int) | {any, int})","(!any | {int})"); }
		@Test public void test_25824() { testInvalid("((int | int) | {any, int})","(!int | {int})"); }
		@Test public void test_25825() { testInvalid("((int | int) | {any, int})","({any, int} | {int})"); }
		@Test public void test_25826() { testInvalid("((int | int) | {any, int})","((int & any) | {int})"); }
		@Test public void test_25827() { testInvalid("((int | int) | {any, int})","((any & int) | {int})"); }
		@Test public void test_25828() { testInvalid("((int | int) | {any, int})","((int & int) | {int})"); }
		@Test public void test_25829() { testInvalid("((int | int) | {any, int})","({any} | !any)"); }
		@Test public void test_25830() { testInvalid("((int | int) | {any, int})","({int} | !any)"); }
		@Test public void test_25831() { testInvalid("((int | int) | {any, int})","({any, any} | !any)"); }
		@Test public void test_25832() { testValid("((int | int) | {any, int})","({int, int} | !any)"); }
		@Test public void test_25833() { testInvalid("((int | int) | {any, int})","((any | any) | !any)"); }
		@Test public void test_25834() { testInvalid("((int | int) | {any, int})","((int | any) | !any)"); }
		@Test public void test_25835() { testValid("((int | int) | {any, int})","((int | int) | !any)"); }
		@Test public void test_25836() { testValid("((int | int) | {any, int})","((int & int) | !any)"); }
		@Test public void test_25837() { testInvalid("((int | int) | {any, int})","(!int | !int)"); }
		@Test public void test_25838() { testInvalid("((int | int) | {any, int})","({any, any} | !int)"); }
		@Test public void test_25839() { testInvalid("((int | int) | {any, int})","({int, int} | !int)"); }
		@Test public void test_25840() { testInvalid("((int | int) | {any, int})","((int | any) | !int)"); }
		@Test public void test_25841() { testInvalid("((int | int) | {any, int})","((any | int) | !int)"); }
		@Test public void test_25842() { testInvalid("((int | int) | {any, int})","((any & int) | !int)"); }
		@Test public void test_25843() { testInvalid("((int | int) | {any, int})","((int & int) | !int)"); }
		@Test public void test_25844() { testInvalid("((int | int) | {any, int})","({int} | {any, any})"); }
		@Test public void test_25845() { testInvalid("((int | int) | {any, int})","(!any | {any, any})"); }
		@Test public void test_25846() { testInvalid("((int | int) | {any, int})","(!int | {any, any})"); }
		@Test public void test_25847() { testInvalid("((int | int) | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_25848() { testInvalid("((int | int) | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_25849() { testInvalid("((int | int) | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_25850() { testInvalid("((int | int) | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_25851() { testInvalid("((int | int) | {any, int})","(!int | {int, any})"); }
		@Test public void test_25852() { testInvalid("((int | int) | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_25853() { testInvalid("((int | int) | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_25854() { testInvalid("((int | int) | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_25855() { testInvalid("((int | int) | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_25856() { testInvalid("((int | int) | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_25857() { testInvalid("((int | int) | {any, int})","({any} | {any, int})"); }
		@Test public void test_25858() { testInvalid("((int | int) | {any, int})","(!int | {any, int})"); }
		@Test public void test_25859() { testValid("((int | int) | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_25860() { testInvalid("((int | int) | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_25861() { testInvalid("((int | int) | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_25862() { testValid("((int | int) | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_25863() { testValid("((int | int) | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_25864() { testValid("((int | int) | {any, int})","(!any | {int, int})"); }
		@Test public void test_25865() { testInvalid("((int | int) | {any, int})","(!int | {int, int})"); }
		@Test public void test_25866() { testInvalid("((int | int) | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_25867() { testValid("((int | int) | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_25868() { testInvalid("((int | int) | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_25869() { testValid("((int | int) | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_25870() { testValid("((int | int) | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_25871() { testValid("((int | int) | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_25872() { testValid("((int | int) | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_25873() { testInvalid("((int | int) | {any, int})","({any} | (any | any))"); }
		@Test public void test_25874() { testInvalid("((int | int) | {any, int})","(!any | (any | any))"); }
		@Test public void test_25875() { testInvalid("((int | int) | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_25876() { testInvalid("((int | int) | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_25877() { testInvalid("((int | int) | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_25878() { testInvalid("((int | int) | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_25879() { testInvalid("((int | int) | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_25880() { testInvalid("((int | int) | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_25881() { testInvalid("((int | int) | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_25882() { testInvalid("((int | int) | {any, int})","({any} | (int | any))"); }
		@Test public void test_25883() { testInvalid("((int | int) | {any, int})","(!int | (int | any))"); }
		@Test public void test_25884() { testInvalid("((int | int) | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_25885() { testInvalid("((int | int) | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_25886() { testInvalid("((int | int) | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_25887() { testInvalid("((int | int) | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_25888() { testInvalid("((int | int) | {any, int})","({any} | (any | int))"); }
		@Test public void test_25889() { testInvalid("((int | int) | {any, int})","({int} | (any | int))"); }
		@Test public void test_25890() { testInvalid("((int | int) | {any, int})","(!any | (any | int))"); }
		@Test public void test_25891() { testInvalid("((int | int) | {any, int})","(!int | (any | int))"); }
		@Test public void test_25892() { testInvalid("((int | int) | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_25893() { testInvalid("((int | int) | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_25894() { testInvalid("((int | int) | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_25895() { testInvalid("((int | int) | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_25896() { testInvalid("((int | int) | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_25897() { testInvalid("((int | int) | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_25898() { testInvalid("((int | int) | {any, int})","({int} | (int | int))"); }
		@Test public void test_25899() { testValid("((int | int) | {any, int})","(!any | (int | int))"); }
		@Test public void test_25900() { testInvalid("((int | int) | {any, int})","(!int | (int | int))"); }
		@Test public void test_25901() { testInvalid("((int | int) | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_25902() { testValid("((int | int) | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_25903() { testInvalid("((int | int) | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_25904() { testValid("((int | int) | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_25905() { testInvalid("((int | int) | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_25906() { testValid("((int | int) | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_25907() { testValid("((int | int) | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_25908() { testInvalid("((int | int) | {any, int})","(!any | (any & any))"); }
		@Test public void test_25909() { testInvalid("((int | int) | {any, int})","(!int | (any & any))"); }
		@Test public void test_25910() { testInvalid("((int | int) | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_25911() { testInvalid("((int | int) | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_25912() { testInvalid("((int | int) | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_25913() { testInvalid("((int | int) | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_25914() { testInvalid("((int | int) | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_25915() { testInvalid("((int | int) | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_25916() { testInvalid("((int | int) | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_25917() { testInvalid("((int | int) | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_25918() { testInvalid("((int | int) | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_25919() { testInvalid("((int | int) | {any, int})","({any} | (int & any))"); }
		@Test public void test_25920() { testInvalid("((int & any) | {any, int})","{int}"); }
		@Test public void test_25921() { testInvalid("((int & any) | {any, int})","{any, any}"); }
		@Test public void test_25922() { testValid("((int & any) | {any, int})","{int, int}"); }
		@Test public void test_25923() { testInvalid("((int & any) | {any, int})","(any | int)"); }
		@Test public void test_25924() { testValid("((int & any) | {any, int})","(int & any)"); }
		@Test public void test_25925() { testInvalid("((int & any) | {any, int})","{{any}}"); }
		@Test public void test_25926() { testInvalid("((int & any) | {any, int})","{{int, any}}"); }
		@Test public void test_25927() { testInvalid("((int & any) | {any, int})","{{int, int}}"); }
		@Test public void test_25928() { testInvalid("((int & any) | {any, int})","{(any | int)}"); }
		@Test public void test_25929() { testInvalid("((int & any) | {any, int})","!{int, any}"); }
		@Test public void test_25930() { testInvalid("((int & any) | {any, int})","!{int, int}"); }
		@Test public void test_25931() { testValid("((int & any) | {any, int})","!(any | any)"); }
		@Test public void test_25932() { testValid("((int & any) | {any, int})","!(any & any)"); }
		@Test public void test_25933() { testInvalid("((int & any) | {any, int})","!(int & int)"); }
		@Test public void test_25934() { testInvalid("((int & any) | {any, int})","{{int}, {any}}"); }
		@Test public void test_25935() { testInvalid("((int & any) | {any, int})","{!int, {any}}"); }
		@Test public void test_25936() { testInvalid("((int & any) | {any, int})","{{int, int}, {any}}"); }
		@Test public void test_25937() { testInvalid("((int & any) | {any, int})","{(any | int), {any}}"); }
		@Test public void test_25938() { testInvalid("((int & any) | {any, int})","{!int, {int}}"); }
		@Test public void test_25939() { testInvalid("((int & any) | {any, int})","{{any, any}, {int}}"); }
		@Test public void test_25940() { testInvalid("((int & any) | {any, int})","{(any | any), {int}}"); }
		@Test public void test_25941() { testInvalid("((int & any) | {any, int})","{(any & any), {int}}"); }
		@Test public void test_25942() { testInvalid("((int & any) | {any, int})","{(any & int), {int}}"); }
		@Test public void test_25943() { testInvalid("((int & any) | {any, int})","{{any, any}, !int}"); }
		@Test public void test_25944() { testInvalid("((int & any) | {any, int})","{{any, int}, !int}"); }
		@Test public void test_25945() { testInvalid("((int & any) | {any, int})","{(any | any), !int}"); }
		@Test public void test_25946() { testInvalid("((int & any) | {any, int})","{(int | any), !int}"); }
		@Test public void test_25947() { testInvalid("((int & any) | {any, int})","{(any & any), !int}"); }
		@Test public void test_25948() { testInvalid("((int & any) | {any, int})","{(int & any), !int}"); }
		@Test public void test_25949() { testInvalid("((int & any) | {any, int})","{(int & int), !int}"); }
		@Test public void test_25950() { testInvalid("((int & any) | {any, int})","{{any}, {any, any}}"); }
		@Test public void test_25951() { testInvalid("((int & any) | {any, int})","{{int}, {any, any}}"); }
		@Test public void test_25952() { testInvalid("((int & any) | {any, int})","{{int, int}, {any, any}}"); }
		@Test public void test_25953() { testInvalid("((int & any) | {any, int})","{(any | any), {any, any}}"); }
		@Test public void test_25954() { testInvalid("((int & any) | {any, int})","{(any | int), {any, any}}"); }
		@Test public void test_25955() { testInvalid("((int & any) | {any, int})","{!int, {int, any}}"); }
		@Test public void test_25956() { testInvalid("((int & any) | {any, int})","{{int, any}, {int, any}}"); }
		@Test public void test_25957() { testInvalid("((int & any) | {any, int})","{{any, int}, {int, any}}"); }
		@Test public void test_25958() { testInvalid("((int & any) | {any, int})","{(any & int), {int, any}}"); }
		@Test public void test_25959() { testInvalid("((int & any) | {any, int})","{{any}, {any, int}}"); }
		@Test public void test_25960() { testInvalid("((int & any) | {any, int})","{{int, int}, {any, int}}"); }
		@Test public void test_25961() { testInvalid("((int & any) | {any, int})","{(int | int), {any, int}}"); }
		@Test public void test_25962() { testInvalid("((int & any) | {any, int})","{(any & int), {any, int}}"); }
		@Test public void test_25963() { testInvalid("((int & any) | {any, int})","{!int, {int, int}}"); }
		@Test public void test_25964() { testInvalid("((int & any) | {any, int})","{{int, int}, {int, int}}"); }
		@Test public void test_25965() { testInvalid("((int & any) | {any, int})","{(any | any), {int, int}}"); }
		@Test public void test_25966() { testInvalid("((int & any) | {any, int})","{(int | any), {int, int}}"); }
		@Test public void test_25967() { testInvalid("((int & any) | {any, int})","{(int & any), {int, int}}"); }
		@Test public void test_25968() { testInvalid("((int & any) | {any, int})","{{int}, (any | any)}"); }
		@Test public void test_25969() { testInvalid("((int & any) | {any, int})","{{int, any}, (any | any)}"); }
		@Test public void test_25970() { testInvalid("((int & any) | {any, int})","{{any, int}, (any | any)}"); }
		@Test public void test_25971() { testInvalid("((int & any) | {any, int})","{(any | any), (any | any)}"); }
		@Test public void test_25972() { testInvalid("((int & any) | {any, int})","{(int | any), (any | any)}"); }
		@Test public void test_25973() { testInvalid("((int & any) | {any, int})","{(int & int), (any | any)}"); }
		@Test public void test_25974() { testInvalid("((int & any) | {any, int})","{!int, (int | any)}"); }
		@Test public void test_25975() { testInvalid("((int & any) | {any, int})","{{int, int}, (int | any)}"); }
		@Test public void test_25976() { testInvalid("((int & any) | {any, int})","{(any | any), (int | any)}"); }
		@Test public void test_25977() { testInvalid("((int & any) | {any, int})","{(int | int), (int | any)}"); }
		@Test public void test_25978() { testInvalid("((int & any) | {any, int})","{{any}, (any | int)}"); }
		@Test public void test_25979() { testInvalid("((int & any) | {any, int})","{!int, (any | int)}"); }
		@Test public void test_25980() { testInvalid("((int & any) | {any, int})","{(any | any), (any | int)}"); }
		@Test public void test_25981() { testInvalid("((int & any) | {any, int})","{(any | int), (any | int)}"); }
		@Test public void test_25982() { testInvalid("((int & any) | {any, int})","{(any & int), (any | int)}"); }
		@Test public void test_25983() { testValid("((int & any) | {any, int})","{{int}, (int | int)}"); }
		@Test public void test_25984() { testValid("((int & any) | {any, int})","{{any, any}, (int | int)}"); }
		@Test public void test_25985() { testValid("((int & any) | {any, int})","{{int, int}, (int | int)}"); }
		@Test public void test_25986() { testInvalid("((int & any) | {any, int})","{{int}, (any & any)}"); }
		@Test public void test_25987() { testInvalid("((int & any) | {any, int})","{{int, any}, (any & any)}"); }
		@Test public void test_25988() { testInvalid("((int & any) | {any, int})","{{any, int}, (any & any)}"); }
		@Test public void test_25989() { testInvalid("((int & any) | {any, int})","{(int | any), (any & any)}"); }
		@Test public void test_25990() { testInvalid("((int & any) | {any, int})","{(any & any), (any & any)}"); }
		@Test public void test_25991() { testInvalid("((int & any) | {any, int})","{(int & any), (any & any)}"); }
		@Test public void test_25992() { testValid("((int & any) | {any, int})","{{any}, (int & any)}"); }
		@Test public void test_25993() { testValid("((int & any) | {any, int})","{{int}, (int & any)}"); }
		@Test public void test_25994() { testValid("((int & any) | {any, int})","{{any, any}, (int & any)}"); }
		@Test public void test_25995() { testValid("((int & any) | {any, int})","{{int, any}, (int & any)}"); }
		@Test public void test_25996() { testValid("((int & any) | {any, int})","{(any | int), (int & any)}"); }
		@Test public void test_25997() { testValid("((int & any) | {any, int})","{(any & any), (int & any)}"); }
		@Test public void test_25998() { testValid("((int & any) | {any, int})","{(int & any), (int & any)}"); }
		@Test public void test_25999() { testValid("((int & any) | {any, int})","{(int & int), (int & any)}"); }
		@Test public void test_26000() { testValid("((int & any) | {any, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26001() { testValid("((int & any) | {any, int})","{(any & any), (any & int)}"); }
		@Test public void test_26002() { testValid("((int & any) | {any, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26003() { testValid("((int & any) | {any, int})","{(int | int), (int & int)}"); }
		@Test public void test_26004() { testValid("((int & any) | {any, int})","{(any & any), (int & int)}"); }
		@Test public void test_26005() { testValid("((int & any) | {any, int})","{(any & int), (int & int)}"); }
		@Test public void test_26006() { testValid("((int & any) | {any, int})","{(int & int), (int & int)}"); }
		@Test public void test_26007() { testInvalid("((int & any) | {any, int})","(!int | {any})"); }
		@Test public void test_26008() { testInvalid("((int & any) | {any, int})","({any, any} | {any})"); }
		@Test public void test_26009() { testInvalid("((int & any) | {any, int})","((any | any) | {any})"); }
		@Test public void test_26010() { testInvalid("((int & any) | {any, int})","((int | any) | {any})"); }
		@Test public void test_26011() { testInvalid("((int & any) | {any, int})","((any & any) | {any})"); }
		@Test public void test_26012() { testInvalid("((int & any) | {any, int})","((int & any) | {any})"); }
		@Test public void test_26013() { testInvalid("((int & any) | {any, int})","((any & int) | {any})"); }
		@Test public void test_26014() { testInvalid("((int & any) | {any, int})","({int} | {int})"); }
		@Test public void test_26015() { testInvalid("((int & any) | {any, int})","(!any | {int})"); }
		@Test public void test_26016() { testInvalid("((int & any) | {any, int})","(!int | {int})"); }
		@Test public void test_26017() { testInvalid("((int & any) | {any, int})","({any, int} | {int})"); }
		@Test public void test_26018() { testInvalid("((int & any) | {any, int})","((int & any) | {int})"); }
		@Test public void test_26019() { testInvalid("((int & any) | {any, int})","((any & int) | {int})"); }
		@Test public void test_26020() { testInvalid("((int & any) | {any, int})","((int & int) | {int})"); }
		@Test public void test_26021() { testInvalid("((int & any) | {any, int})","({any} | !any)"); }
		@Test public void test_26022() { testInvalid("((int & any) | {any, int})","({int} | !any)"); }
		@Test public void test_26023() { testInvalid("((int & any) | {any, int})","({any, any} | !any)"); }
		@Test public void test_26024() { testValid("((int & any) | {any, int})","({int, int} | !any)"); }
		@Test public void test_26025() { testInvalid("((int & any) | {any, int})","((any | any) | !any)"); }
		@Test public void test_26026() { testInvalid("((int & any) | {any, int})","((int | any) | !any)"); }
		@Test public void test_26027() { testValid("((int & any) | {any, int})","((int | int) | !any)"); }
		@Test public void test_26028() { testValid("((int & any) | {any, int})","((int & int) | !any)"); }
		@Test public void test_26029() { testInvalid("((int & any) | {any, int})","(!int | !int)"); }
		@Test public void test_26030() { testInvalid("((int & any) | {any, int})","({any, any} | !int)"); }
		@Test public void test_26031() { testInvalid("((int & any) | {any, int})","({int, int} | !int)"); }
		@Test public void test_26032() { testInvalid("((int & any) | {any, int})","((int | any) | !int)"); }
		@Test public void test_26033() { testInvalid("((int & any) | {any, int})","((any | int) | !int)"); }
		@Test public void test_26034() { testInvalid("((int & any) | {any, int})","((any & int) | !int)"); }
		@Test public void test_26035() { testInvalid("((int & any) | {any, int})","((int & int) | !int)"); }
		@Test public void test_26036() { testInvalid("((int & any) | {any, int})","({int} | {any, any})"); }
		@Test public void test_26037() { testInvalid("((int & any) | {any, int})","(!any | {any, any})"); }
		@Test public void test_26038() { testInvalid("((int & any) | {any, int})","(!int | {any, any})"); }
		@Test public void test_26039() { testInvalid("((int & any) | {any, int})","({any, int} | {any, any})"); }
		@Test public void test_26040() { testInvalid("((int & any) | {any, int})","((int | any) | {any, any})"); }
		@Test public void test_26041() { testInvalid("((int & any) | {any, int})","((any & any) | {any, any})"); }
		@Test public void test_26042() { testInvalid("((int & any) | {any, int})","((any & int) | {any, any})"); }
		@Test public void test_26043() { testInvalid("((int & any) | {any, int})","(!int | {int, any})"); }
		@Test public void test_26044() { testInvalid("((int & any) | {any, int})","({any, int} | {int, any})"); }
		@Test public void test_26045() { testInvalid("((int & any) | {any, int})","((any | any) | {int, any})"); }
		@Test public void test_26046() { testInvalid("((int & any) | {any, int})","((int | any) | {int, any})"); }
		@Test public void test_26047() { testInvalid("((int & any) | {any, int})","((any | int) | {int, any})"); }
		@Test public void test_26048() { testInvalid("((int & any) | {any, int})","((int & any) | {int, any})"); }
		@Test public void test_26049() { testInvalid("((int & any) | {any, int})","({any} | {any, int})"); }
		@Test public void test_26050() { testInvalid("((int & any) | {any, int})","(!int | {any, int})"); }
		@Test public void test_26051() { testValid("((int & any) | {any, int})","({any, int} | {any, int})"); }
		@Test public void test_26052() { testInvalid("((int & any) | {any, int})","((any | any) | {any, int})"); }
		@Test public void test_26053() { testInvalid("((int & any) | {any, int})","((any | int) | {any, int})"); }
		@Test public void test_26054() { testValid("((int & any) | {any, int})","((int | int) | {any, int})"); }
		@Test public void test_26055() { testValid("((int & any) | {any, int})","((int & any) | {any, int})"); }
		@Test public void test_26056() { testValid("((int & any) | {any, int})","(!any | {int, int})"); }
		@Test public void test_26057() { testInvalid("((int & any) | {any, int})","(!int | {int, int})"); }
		@Test public void test_26058() { testInvalid("((int & any) | {any, int})","({any, any} | {int, int})"); }
		@Test public void test_26059() { testValid("((int & any) | {any, int})","({any, int} | {int, int})"); }
		@Test public void test_26060() { testInvalid("((int & any) | {any, int})","((any | any) | {int, int})"); }
		@Test public void test_26061() { testValid("((int & any) | {any, int})","((int | int) | {int, int})"); }
		@Test public void test_26062() { testValid("((int & any) | {any, int})","((int & any) | {int, int})"); }
		@Test public void test_26063() { testValid("((int & any) | {any, int})","((any & int) | {int, int})"); }
		@Test public void test_26064() { testValid("((int & any) | {any, int})","((int & int) | {int, int})"); }
		@Test public void test_26065() { testInvalid("((int & any) | {any, int})","({any} | (any | any))"); }
		@Test public void test_26066() { testInvalid("((int & any) | {any, int})","(!any | (any | any))"); }
		@Test public void test_26067() { testInvalid("((int & any) | {any, int})","({any, any} | (any | any))"); }
		@Test public void test_26068() { testInvalid("((int & any) | {any, int})","({any, int} | (any | any))"); }
		@Test public void test_26069() { testInvalid("((int & any) | {any, int})","({int, int} | (any | any))"); }
		@Test public void test_26070() { testInvalid("((int & any) | {any, int})","((int | any) | (any | any))"); }
		@Test public void test_26071() { testInvalid("((int & any) | {any, int})","((any | int) | (any | any))"); }
		@Test public void test_26072() { testInvalid("((int & any) | {any, int})","((any & int) | (any | any))"); }
		@Test public void test_26073() { testInvalid("((int & any) | {any, int})","((int & int) | (any | any))"); }
		@Test public void test_26074() { testInvalid("((int & any) | {any, int})","({any} | (int | any))"); }
		@Test public void test_26075() { testInvalid("((int & any) | {any, int})","(!int | (int | any))"); }
		@Test public void test_26076() { testInvalid("((int & any) | {any, int})","({int, any} | (int | any))"); }
		@Test public void test_26077() { testInvalid("((int & any) | {any, int})","({any, int} | (int | any))"); }
		@Test public void test_26078() { testInvalid("((int & any) | {any, int})","((int & any) | (int | any))"); }
		@Test public void test_26079() { testInvalid("((int & any) | {any, int})","((any & int) | (int | any))"); }
		@Test public void test_26080() { testInvalid("((int & any) | {any, int})","({any} | (any | int))"); }
		@Test public void test_26081() { testInvalid("((int & any) | {any, int})","({int} | (any | int))"); }
		@Test public void test_26082() { testInvalid("((int & any) | {any, int})","(!any | (any | int))"); }
		@Test public void test_26083() { testInvalid("((int & any) | {any, int})","(!int | (any | int))"); }
		@Test public void test_26084() { testInvalid("((int & any) | {any, int})","({any, int} | (any | int))"); }
		@Test public void test_26085() { testInvalid("((int & any) | {any, int})","({int, int} | (any | int))"); }
		@Test public void test_26086() { testInvalid("((int & any) | {any, int})","((int | any) | (any | int))"); }
		@Test public void test_26087() { testInvalid("((int & any) | {any, int})","((any | int) | (any | int))"); }
		@Test public void test_26088() { testInvalid("((int & any) | {any, int})","((int | int) | (any | int))"); }
		@Test public void test_26089() { testInvalid("((int & any) | {any, int})","((any & any) | (any | int))"); }
		@Test public void test_26090() { testInvalid("((int & any) | {any, int})","({int} | (int | int))"); }
		@Test public void test_26091() { testValid("((int & any) | {any, int})","(!any | (int | int))"); }
		@Test public void test_26092() { testInvalid("((int & any) | {any, int})","(!int | (int | int))"); }
		@Test public void test_26093() { testInvalid("((int & any) | {any, int})","({int, any} | (int | int))"); }
		@Test public void test_26094() { testValid("((int & any) | {any, int})","({any, int} | (int | int))"); }
		@Test public void test_26095() { testInvalid("((int & any) | {any, int})","((any | int) | (int | int))"); }
		@Test public void test_26096() { testValid("((int & any) | {any, int})","((int | int) | (int | int))"); }
		@Test public void test_26097() { testInvalid("((int & any) | {any, int})","((any & any) | (int | int))"); }
		@Test public void test_26098() { testValid("((int & any) | {any, int})","((int & any) | (int | int))"); }
		@Test public void test_26099() { testValid("((int & any) | {any, int})","((int & int) | (int | int))"); }
		@Test public void test_26100() { testInvalid("((int & any) | {any, int})","(!any | (any & any))"); }
		@Test public void test_26101() { testInvalid("((int & any) | {any, int})","(!int | (any & any))"); }
		@Test public void test_26102() { testInvalid("((int & any) | {any, int})","({any, any} | (any & any))"); }
		@Test public void test_26103() { testInvalid("((int & any) | {any, int})","({int, any} | (any & any))"); }
		@Test public void test_26104() { testInvalid("((int & any) | {any, int})","({any, int} | (any & any))"); }
		@Test public void test_26105() { testInvalid("((int & any) | {any, int})","({int, int} | (any & any))"); }
		@Test public void test_26106() { testInvalid("((int & any) | {any, int})","((int | any) | (any & any))"); }
		@Test public void test_26107() { testInvalid("((int & any) | {any, int})","((int | int) | (any & any))"); }
		@Test public void test_26108() { testInvalid("((int & any) | {any, int})","((int & any) | (any & any))"); }
		@Test public void test_26109() { testInvalid("((int & any) | {any, int})","((any & int) | (any & any))"); }
		@Test public void test_26110() { testInvalid("((int & any) | {any, int})","((int & int) | (any & any))"); }
		@Test public void test_26111() { testInvalid("((int & any) | {any, int})","({any} | (int & any))"); }
		@Test public void test_26112() { testInvalid("(!any | {int, int})","{int}"); }
		@Test public void test_26113() { testInvalid("(!any | {int, int})","{any, any}"); }
		@Test public void test_26114() { testValid("(!any | {int, int})","{int, int}"); }
		@Test public void test_26115() { testInvalid("(!any | {int, int})","(any | int)"); }
		@Test public void test_26116() { testInvalid("(!any | {int, int})","(int & any)"); }
		@Test public void test_26117() { testInvalid("(!any | {int, int})","{{any}}"); }
		@Test public void test_26118() { testInvalid("(!any | {int, int})","{{int, any}}"); }
		@Test public void test_26119() { testInvalid("(!any | {int, int})","{{int, int}}"); }
		@Test public void test_26120() { testInvalid("(!any | {int, int})","{(any | int)}"); }
		@Test public void test_26121() { testInvalid("(!any | {int, int})","!{int, any}"); }
		@Test public void test_26122() { testInvalid("(!any | {int, int})","!{int, int}"); }
		@Test public void test_26123() { testValid("(!any | {int, int})","!(any | any)"); }
		@Test public void test_26124() { testValid("(!any | {int, int})","!(any & any)"); }
		@Test public void test_26125() { testInvalid("(!any | {int, int})","!(int & int)"); }
		@Test public void test_26126() { testInvalid("(!any | {int, int})","{{int}, {any}}"); }
		@Test public void test_26127() { testInvalid("(!any | {int, int})","{!int, {any}}"); }
		@Test public void test_26128() { testInvalid("(!any | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_26129() { testInvalid("(!any | {int, int})","{(any | int), {any}}"); }
		@Test public void test_26130() { testInvalid("(!any | {int, int})","{!int, {int}}"); }
		@Test public void test_26131() { testInvalid("(!any | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_26132() { testInvalid("(!any | {int, int})","{(any | any), {int}}"); }
		@Test public void test_26133() { testInvalid("(!any | {int, int})","{(any & any), {int}}"); }
		@Test public void test_26134() { testInvalid("(!any | {int, int})","{(any & int), {int}}"); }
		@Test public void test_26135() { testInvalid("(!any | {int, int})","{{any, any}, !int}"); }
		@Test public void test_26136() { testInvalid("(!any | {int, int})","{{any, int}, !int}"); }
		@Test public void test_26137() { testInvalid("(!any | {int, int})","{(any | any), !int}"); }
		@Test public void test_26138() { testInvalid("(!any | {int, int})","{(int | any), !int}"); }
		@Test public void test_26139() { testInvalid("(!any | {int, int})","{(any & any), !int}"); }
		@Test public void test_26140() { testInvalid("(!any | {int, int})","{(int & any), !int}"); }
		@Test public void test_26141() { testInvalid("(!any | {int, int})","{(int & int), !int}"); }
		@Test public void test_26142() { testInvalid("(!any | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_26143() { testInvalid("(!any | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_26144() { testInvalid("(!any | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_26145() { testInvalid("(!any | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_26146() { testInvalid("(!any | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_26147() { testInvalid("(!any | {int, int})","{!int, {int, any}}"); }
		@Test public void test_26148() { testInvalid("(!any | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_26149() { testInvalid("(!any | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_26150() { testInvalid("(!any | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_26151() { testInvalid("(!any | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_26152() { testInvalid("(!any | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_26153() { testInvalid("(!any | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_26154() { testInvalid("(!any | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_26155() { testInvalid("(!any | {int, int})","{!int, {int, int}}"); }
		@Test public void test_26156() { testInvalid("(!any | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_26157() { testInvalid("(!any | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_26158() { testInvalid("(!any | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_26159() { testInvalid("(!any | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_26160() { testInvalid("(!any | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_26161() { testInvalid("(!any | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_26162() { testInvalid("(!any | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_26163() { testInvalid("(!any | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_26164() { testInvalid("(!any | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_26165() { testInvalid("(!any | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_26166() { testInvalid("(!any | {int, int})","{!int, (int | any)}"); }
		@Test public void test_26167() { testInvalid("(!any | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_26168() { testInvalid("(!any | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_26169() { testInvalid("(!any | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_26170() { testInvalid("(!any | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_26171() { testInvalid("(!any | {int, int})","{!int, (any | int)}"); }
		@Test public void test_26172() { testInvalid("(!any | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_26173() { testInvalid("(!any | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_26174() { testInvalid("(!any | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_26175() { testInvalid("(!any | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_26176() { testInvalid("(!any | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_26177() { testInvalid("(!any | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_26178() { testInvalid("(!any | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_26179() { testInvalid("(!any | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_26180() { testInvalid("(!any | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_26181() { testInvalid("(!any | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_26182() { testInvalid("(!any | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_26183() { testInvalid("(!any | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_26184() { testInvalid("(!any | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_26185() { testInvalid("(!any | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_26186() { testInvalid("(!any | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_26187() { testInvalid("(!any | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_26188() { testInvalid("(!any | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_26189() { testInvalid("(!any | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_26190() { testValid("(!any | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_26191() { testValid("(!any | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_26192() { testInvalid("(!any | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26193() { testInvalid("(!any | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_26194() { testInvalid("(!any | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26195() { testValid("(!any | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_26196() { testInvalid("(!any | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_26197() { testValid("(!any | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_26198() { testValid("(!any | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_26199() { testInvalid("(!any | {int, int})","(!int | {any})"); }
		@Test public void test_26200() { testInvalid("(!any | {int, int})","({any, any} | {any})"); }
		@Test public void test_26201() { testInvalid("(!any | {int, int})","((any | any) | {any})"); }
		@Test public void test_26202() { testInvalid("(!any | {int, int})","((int | any) | {any})"); }
		@Test public void test_26203() { testInvalid("(!any | {int, int})","((any & any) | {any})"); }
		@Test public void test_26204() { testInvalid("(!any | {int, int})","((int & any) | {any})"); }
		@Test public void test_26205() { testInvalid("(!any | {int, int})","((any & int) | {any})"); }
		@Test public void test_26206() { testInvalid("(!any | {int, int})","({int} | {int})"); }
		@Test public void test_26207() { testInvalid("(!any | {int, int})","(!any | {int})"); }
		@Test public void test_26208() { testInvalid("(!any | {int, int})","(!int | {int})"); }
		@Test public void test_26209() { testInvalid("(!any | {int, int})","({any, int} | {int})"); }
		@Test public void test_26210() { testInvalid("(!any | {int, int})","((int & any) | {int})"); }
		@Test public void test_26211() { testInvalid("(!any | {int, int})","((any & int) | {int})"); }
		@Test public void test_26212() { testInvalid("(!any | {int, int})","((int & int) | {int})"); }
		@Test public void test_26213() { testInvalid("(!any | {int, int})","({any} | !any)"); }
		@Test public void test_26214() { testInvalid("(!any | {int, int})","({int} | !any)"); }
		@Test public void test_26215() { testInvalid("(!any | {int, int})","({any, any} | !any)"); }
		@Test public void test_26216() { testValid("(!any | {int, int})","({int, int} | !any)"); }
		@Test public void test_26217() { testInvalid("(!any | {int, int})","((any | any) | !any)"); }
		@Test public void test_26218() { testInvalid("(!any | {int, int})","((int | any) | !any)"); }
		@Test public void test_26219() { testInvalid("(!any | {int, int})","((int | int) | !any)"); }
		@Test public void test_26220() { testInvalid("(!any | {int, int})","((int & int) | !any)"); }
		@Test public void test_26221() { testInvalid("(!any | {int, int})","(!int | !int)"); }
		@Test public void test_26222() { testInvalid("(!any | {int, int})","({any, any} | !int)"); }
		@Test public void test_26223() { testInvalid("(!any | {int, int})","({int, int} | !int)"); }
		@Test public void test_26224() { testInvalid("(!any | {int, int})","((int | any) | !int)"); }
		@Test public void test_26225() { testInvalid("(!any | {int, int})","((any | int) | !int)"); }
		@Test public void test_26226() { testInvalid("(!any | {int, int})","((any & int) | !int)"); }
		@Test public void test_26227() { testInvalid("(!any | {int, int})","((int & int) | !int)"); }
		@Test public void test_26228() { testInvalid("(!any | {int, int})","({int} | {any, any})"); }
		@Test public void test_26229() { testInvalid("(!any | {int, int})","(!any | {any, any})"); }
		@Test public void test_26230() { testInvalid("(!any | {int, int})","(!int | {any, any})"); }
		@Test public void test_26231() { testInvalid("(!any | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_26232() { testInvalid("(!any | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_26233() { testInvalid("(!any | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_26234() { testInvalid("(!any | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_26235() { testInvalid("(!any | {int, int})","(!int | {int, any})"); }
		@Test public void test_26236() { testInvalid("(!any | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_26237() { testInvalid("(!any | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_26238() { testInvalid("(!any | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_26239() { testInvalid("(!any | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_26240() { testInvalid("(!any | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_26241() { testInvalid("(!any | {int, int})","({any} | {any, int})"); }
		@Test public void test_26242() { testInvalid("(!any | {int, int})","(!int | {any, int})"); }
		@Test public void test_26243() { testInvalid("(!any | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_26244() { testInvalid("(!any | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_26245() { testInvalid("(!any | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_26246() { testInvalid("(!any | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_26247() { testInvalid("(!any | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_26248() { testValid("(!any | {int, int})","(!any | {int, int})"); }
		@Test public void test_26249() { testInvalid("(!any | {int, int})","(!int | {int, int})"); }
		@Test public void test_26250() { testInvalid("(!any | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_26251() { testInvalid("(!any | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_26252() { testInvalid("(!any | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_26253() { testInvalid("(!any | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_26254() { testInvalid("(!any | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_26255() { testInvalid("(!any | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_26256() { testInvalid("(!any | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_26257() { testInvalid("(!any | {int, int})","({any} | (any | any))"); }
		@Test public void test_26258() { testInvalid("(!any | {int, int})","(!any | (any | any))"); }
		@Test public void test_26259() { testInvalid("(!any | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_26260() { testInvalid("(!any | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_26261() { testInvalid("(!any | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_26262() { testInvalid("(!any | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_26263() { testInvalid("(!any | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_26264() { testInvalid("(!any | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_26265() { testInvalid("(!any | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_26266() { testInvalid("(!any | {int, int})","({any} | (int | any))"); }
		@Test public void test_26267() { testInvalid("(!any | {int, int})","(!int | (int | any))"); }
		@Test public void test_26268() { testInvalid("(!any | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_26269() { testInvalid("(!any | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_26270() { testInvalid("(!any | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_26271() { testInvalid("(!any | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_26272() { testInvalid("(!any | {int, int})","({any} | (any | int))"); }
		@Test public void test_26273() { testInvalid("(!any | {int, int})","({int} | (any | int))"); }
		@Test public void test_26274() { testInvalid("(!any | {int, int})","(!any | (any | int))"); }
		@Test public void test_26275() { testInvalid("(!any | {int, int})","(!int | (any | int))"); }
		@Test public void test_26276() { testInvalid("(!any | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_26277() { testInvalid("(!any | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_26278() { testInvalid("(!any | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_26279() { testInvalid("(!any | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_26280() { testInvalid("(!any | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_26281() { testInvalid("(!any | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_26282() { testInvalid("(!any | {int, int})","({int} | (int | int))"); }
		@Test public void test_26283() { testInvalid("(!any | {int, int})","(!any | (int | int))"); }
		@Test public void test_26284() { testInvalid("(!any | {int, int})","(!int | (int | int))"); }
		@Test public void test_26285() { testInvalid("(!any | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_26286() { testInvalid("(!any | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_26287() { testInvalid("(!any | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_26288() { testInvalid("(!any | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_26289() { testInvalid("(!any | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_26290() { testInvalid("(!any | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_26291() { testInvalid("(!any | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_26292() { testInvalid("(!any | {int, int})","(!any | (any & any))"); }
		@Test public void test_26293() { testInvalid("(!any | {int, int})","(!int | (any & any))"); }
		@Test public void test_26294() { testInvalid("(!any | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_26295() { testInvalid("(!any | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_26296() { testInvalid("(!any | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_26297() { testInvalid("(!any | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_26298() { testInvalid("(!any | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_26299() { testInvalid("(!any | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_26300() { testInvalid("(!any | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_26301() { testInvalid("(!any | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_26302() { testInvalid("(!any | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_26303() { testInvalid("(!any | {int, int})","({any} | (int & any))"); }
		@Test public void test_26304() { testValid("(!int | {int, int})","{int}"); }
		@Test public void test_26305() { testValid("(!int | {int, int})","{any, any}"); }
		@Test public void test_26306() { testValid("(!int | {int, int})","{int, int}"); }
		@Test public void test_26307() { testInvalid("(!int | {int, int})","(any | int)"); }
		@Test public void test_26308() { testInvalid("(!int | {int, int})","(int & any)"); }
		@Test public void test_26309() { testValid("(!int | {int, int})","{{any}}"); }
		@Test public void test_26310() { testValid("(!int | {int, int})","{{int, any}}"); }
		@Test public void test_26311() { testValid("(!int | {int, int})","{{int, int}}"); }
		@Test public void test_26312() { testValid("(!int | {int, int})","{(any | int)}"); }
		@Test public void test_26313() { testInvalid("(!int | {int, int})","!{int, any}"); }
		@Test public void test_26314() { testInvalid("(!int | {int, int})","!{int, int}"); }
		@Test public void test_26315() { testValid("(!int | {int, int})","!(any | any)"); }
		@Test public void test_26316() { testValid("(!int | {int, int})","!(any & any)"); }
		@Test public void test_26317() { testValid("(!int | {int, int})","!(int & int)"); }
		@Test public void test_26318() { testValid("(!int | {int, int})","{{int}, {any}}"); }
		@Test public void test_26319() { testValid("(!int | {int, int})","{!int, {any}}"); }
		@Test public void test_26320() { testValid("(!int | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_26321() { testValid("(!int | {int, int})","{(any | int), {any}}"); }
		@Test public void test_26322() { testValid("(!int | {int, int})","{!int, {int}}"); }
		@Test public void test_26323() { testValid("(!int | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_26324() { testValid("(!int | {int, int})","{(any | any), {int}}"); }
		@Test public void test_26325() { testValid("(!int | {int, int})","{(any & any), {int}}"); }
		@Test public void test_26326() { testValid("(!int | {int, int})","{(any & int), {int}}"); }
		@Test public void test_26327() { testValid("(!int | {int, int})","{{any, any}, !int}"); }
		@Test public void test_26328() { testValid("(!int | {int, int})","{{any, int}, !int}"); }
		@Test public void test_26329() { testValid("(!int | {int, int})","{(any | any), !int}"); }
		@Test public void test_26330() { testValid("(!int | {int, int})","{(int | any), !int}"); }
		@Test public void test_26331() { testValid("(!int | {int, int})","{(any & any), !int}"); }
		@Test public void test_26332() { testValid("(!int | {int, int})","{(int & any), !int}"); }
		@Test public void test_26333() { testValid("(!int | {int, int})","{(int & int), !int}"); }
		@Test public void test_26334() { testValid("(!int | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_26335() { testValid("(!int | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_26336() { testValid("(!int | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_26337() { testValid("(!int | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_26338() { testValid("(!int | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_26339() { testValid("(!int | {int, int})","{!int, {int, any}}"); }
		@Test public void test_26340() { testValid("(!int | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_26341() { testValid("(!int | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_26342() { testValid("(!int | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_26343() { testValid("(!int | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_26344() { testValid("(!int | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_26345() { testValid("(!int | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_26346() { testValid("(!int | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_26347() { testValid("(!int | {int, int})","{!int, {int, int}}"); }
		@Test public void test_26348() { testValid("(!int | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_26349() { testValid("(!int | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_26350() { testValid("(!int | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_26351() { testValid("(!int | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_26352() { testValid("(!int | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_26353() { testValid("(!int | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_26354() { testValid("(!int | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_26355() { testValid("(!int | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_26356() { testValid("(!int | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_26357() { testValid("(!int | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_26358() { testValid("(!int | {int, int})","{!int, (int | any)}"); }
		@Test public void test_26359() { testValid("(!int | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_26360() { testValid("(!int | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_26361() { testValid("(!int | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_26362() { testValid("(!int | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_26363() { testValid("(!int | {int, int})","{!int, (any | int)}"); }
		@Test public void test_26364() { testValid("(!int | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_26365() { testValid("(!int | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_26366() { testValid("(!int | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_26367() { testValid("(!int | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_26368() { testValid("(!int | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_26369() { testValid("(!int | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_26370() { testValid("(!int | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_26371() { testValid("(!int | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_26372() { testValid("(!int | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_26373() { testValid("(!int | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_26374() { testValid("(!int | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_26375() { testValid("(!int | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_26376() { testValid("(!int | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_26377() { testValid("(!int | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_26378() { testValid("(!int | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_26379() { testValid("(!int | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_26380() { testValid("(!int | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_26381() { testValid("(!int | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_26382() { testValid("(!int | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_26383() { testValid("(!int | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_26384() { testValid("(!int | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26385() { testValid("(!int | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_26386() { testValid("(!int | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26387() { testValid("(!int | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_26388() { testValid("(!int | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_26389() { testValid("(!int | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_26390() { testValid("(!int | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_26391() { testValid("(!int | {int, int})","(!int | {any})"); }
		@Test public void test_26392() { testValid("(!int | {int, int})","({any, any} | {any})"); }
		@Test public void test_26393() { testInvalid("(!int | {int, int})","((any | any) | {any})"); }
		@Test public void test_26394() { testInvalid("(!int | {int, int})","((int | any) | {any})"); }
		@Test public void test_26395() { testInvalid("(!int | {int, int})","((any & any) | {any})"); }
		@Test public void test_26396() { testInvalid("(!int | {int, int})","((int & any) | {any})"); }
		@Test public void test_26397() { testInvalid("(!int | {int, int})","((any & int) | {any})"); }
		@Test public void test_26398() { testValid("(!int | {int, int})","({int} | {int})"); }
		@Test public void test_26399() { testValid("(!int | {int, int})","(!any | {int})"); }
		@Test public void test_26400() { testValid("(!int | {int, int})","(!int | {int})"); }
		@Test public void test_26401() { testValid("(!int | {int, int})","({any, int} | {int})"); }
		@Test public void test_26402() { testInvalid("(!int | {int, int})","((int & any) | {int})"); }
		@Test public void test_26403() { testInvalid("(!int | {int, int})","((any & int) | {int})"); }
		@Test public void test_26404() { testInvalid("(!int | {int, int})","((int & int) | {int})"); }
		@Test public void test_26405() { testValid("(!int | {int, int})","({any} | !any)"); }
		@Test public void test_26406() { testValid("(!int | {int, int})","({int} | !any)"); }
		@Test public void test_26407() { testValid("(!int | {int, int})","({any, any} | !any)"); }
		@Test public void test_26408() { testValid("(!int | {int, int})","({int, int} | !any)"); }
		@Test public void test_26409() { testInvalid("(!int | {int, int})","((any | any) | !any)"); }
		@Test public void test_26410() { testInvalid("(!int | {int, int})","((int | any) | !any)"); }
		@Test public void test_26411() { testInvalid("(!int | {int, int})","((int | int) | !any)"); }
		@Test public void test_26412() { testInvalid("(!int | {int, int})","((int & int) | !any)"); }
		@Test public void test_26413() { testValid("(!int | {int, int})","(!int | !int)"); }
		@Test public void test_26414() { testValid("(!int | {int, int})","({any, any} | !int)"); }
		@Test public void test_26415() { testValid("(!int | {int, int})","({int, int} | !int)"); }
		@Test public void test_26416() { testInvalid("(!int | {int, int})","((int | any) | !int)"); }
		@Test public void test_26417() { testInvalid("(!int | {int, int})","((any | int) | !int)"); }
		@Test public void test_26418() { testInvalid("(!int | {int, int})","((any & int) | !int)"); }
		@Test public void test_26419() { testInvalid("(!int | {int, int})","((int & int) | !int)"); }
		@Test public void test_26420() { testValid("(!int | {int, int})","({int} | {any, any})"); }
		@Test public void test_26421() { testValid("(!int | {int, int})","(!any | {any, any})"); }
		@Test public void test_26422() { testValid("(!int | {int, int})","(!int | {any, any})"); }
		@Test public void test_26423() { testValid("(!int | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_26424() { testInvalid("(!int | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_26425() { testInvalid("(!int | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_26426() { testInvalid("(!int | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_26427() { testValid("(!int | {int, int})","(!int | {int, any})"); }
		@Test public void test_26428() { testValid("(!int | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_26429() { testInvalid("(!int | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_26430() { testInvalid("(!int | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_26431() { testInvalid("(!int | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_26432() { testInvalid("(!int | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_26433() { testValid("(!int | {int, int})","({any} | {any, int})"); }
		@Test public void test_26434() { testValid("(!int | {int, int})","(!int | {any, int})"); }
		@Test public void test_26435() { testValid("(!int | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_26436() { testInvalid("(!int | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_26437() { testInvalid("(!int | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_26438() { testInvalid("(!int | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_26439() { testInvalid("(!int | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_26440() { testValid("(!int | {int, int})","(!any | {int, int})"); }
		@Test public void test_26441() { testValid("(!int | {int, int})","(!int | {int, int})"); }
		@Test public void test_26442() { testValid("(!int | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_26443() { testValid("(!int | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_26444() { testInvalid("(!int | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_26445() { testInvalid("(!int | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_26446() { testInvalid("(!int | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_26447() { testInvalid("(!int | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_26448() { testInvalid("(!int | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_26449() { testInvalid("(!int | {int, int})","({any} | (any | any))"); }
		@Test public void test_26450() { testInvalid("(!int | {int, int})","(!any | (any | any))"); }
		@Test public void test_26451() { testInvalid("(!int | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_26452() { testInvalid("(!int | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_26453() { testInvalid("(!int | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_26454() { testInvalid("(!int | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_26455() { testInvalid("(!int | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_26456() { testInvalid("(!int | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_26457() { testInvalid("(!int | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_26458() { testInvalid("(!int | {int, int})","({any} | (int | any))"); }
		@Test public void test_26459() { testInvalid("(!int | {int, int})","(!int | (int | any))"); }
		@Test public void test_26460() { testInvalid("(!int | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_26461() { testInvalid("(!int | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_26462() { testInvalid("(!int | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_26463() { testInvalid("(!int | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_26464() { testInvalid("(!int | {int, int})","({any} | (any | int))"); }
		@Test public void test_26465() { testInvalid("(!int | {int, int})","({int} | (any | int))"); }
		@Test public void test_26466() { testInvalid("(!int | {int, int})","(!any | (any | int))"); }
		@Test public void test_26467() { testInvalid("(!int | {int, int})","(!int | (any | int))"); }
		@Test public void test_26468() { testInvalid("(!int | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_26469() { testInvalid("(!int | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_26470() { testInvalid("(!int | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_26471() { testInvalid("(!int | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_26472() { testInvalid("(!int | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_26473() { testInvalid("(!int | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_26474() { testInvalid("(!int | {int, int})","({int} | (int | int))"); }
		@Test public void test_26475() { testInvalid("(!int | {int, int})","(!any | (int | int))"); }
		@Test public void test_26476() { testInvalid("(!int | {int, int})","(!int | (int | int))"); }
		@Test public void test_26477() { testInvalid("(!int | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_26478() { testInvalid("(!int | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_26479() { testInvalid("(!int | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_26480() { testInvalid("(!int | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_26481() { testInvalid("(!int | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_26482() { testInvalid("(!int | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_26483() { testInvalid("(!int | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_26484() { testInvalid("(!int | {int, int})","(!any | (any & any))"); }
		@Test public void test_26485() { testInvalid("(!int | {int, int})","(!int | (any & any))"); }
		@Test public void test_26486() { testInvalid("(!int | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_26487() { testInvalid("(!int | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_26488() { testInvalid("(!int | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_26489() { testInvalid("(!int | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_26490() { testInvalid("(!int | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_26491() { testInvalid("(!int | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_26492() { testInvalid("(!int | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_26493() { testInvalid("(!int | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_26494() { testInvalid("(!int | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_26495() { testInvalid("(!int | {int, int})","({any} | (int & any))"); }
		@Test public void test_26496() { testInvalid("({any, any} | {int, int})","{int}"); }
		@Test public void test_26497() { testValid("({any, any} | {int, int})","{any, any}"); }
		@Test public void test_26498() { testValid("({any, any} | {int, int})","{int, int}"); }
		@Test public void test_26499() { testInvalid("({any, any} | {int, int})","(any | int)"); }
		@Test public void test_26500() { testInvalid("({any, any} | {int, int})","(int & any)"); }
		@Test public void test_26501() { testInvalid("({any, any} | {int, int})","{{any}}"); }
		@Test public void test_26502() { testInvalid("({any, any} | {int, int})","{{int, any}}"); }
		@Test public void test_26503() { testInvalid("({any, any} | {int, int})","{{int, int}}"); }
		@Test public void test_26504() { testInvalid("({any, any} | {int, int})","{(any | int)}"); }
		@Test public void test_26505() { testInvalid("({any, any} | {int, int})","!{int, any}"); }
		@Test public void test_26506() { testInvalid("({any, any} | {int, int})","!{int, int}"); }
		@Test public void test_26507() { testValid("({any, any} | {int, int})","!(any | any)"); }
		@Test public void test_26508() { testValid("({any, any} | {int, int})","!(any & any)"); }
		@Test public void test_26509() { testInvalid("({any, any} | {int, int})","!(int & int)"); }
		@Test public void test_26510() { testValid("({any, any} | {int, int})","{{int}, {any}}"); }
		@Test public void test_26511() { testValid("({any, any} | {int, int})","{!int, {any}}"); }
		@Test public void test_26512() { testValid("({any, any} | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_26513() { testValid("({any, any} | {int, int})","{(any | int), {any}}"); }
		@Test public void test_26514() { testValid("({any, any} | {int, int})","{!int, {int}}"); }
		@Test public void test_26515() { testValid("({any, any} | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_26516() { testValid("({any, any} | {int, int})","{(any | any), {int}}"); }
		@Test public void test_26517() { testValid("({any, any} | {int, int})","{(any & any), {int}}"); }
		@Test public void test_26518() { testValid("({any, any} | {int, int})","{(any & int), {int}}"); }
		@Test public void test_26519() { testValid("({any, any} | {int, int})","{{any, any}, !int}"); }
		@Test public void test_26520() { testValid("({any, any} | {int, int})","{{any, int}, !int}"); }
		@Test public void test_26521() { testValid("({any, any} | {int, int})","{(any | any), !int}"); }
		@Test public void test_26522() { testValid("({any, any} | {int, int})","{(int | any), !int}"); }
		@Test public void test_26523() { testValid("({any, any} | {int, int})","{(any & any), !int}"); }
		@Test public void test_26524() { testValid("({any, any} | {int, int})","{(int & any), !int}"); }
		@Test public void test_26525() { testValid("({any, any} | {int, int})","{(int & int), !int}"); }
		@Test public void test_26526() { testValid("({any, any} | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_26527() { testValid("({any, any} | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_26528() { testValid("({any, any} | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_26529() { testValid("({any, any} | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_26530() { testValid("({any, any} | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_26531() { testValid("({any, any} | {int, int})","{!int, {int, any}}"); }
		@Test public void test_26532() { testValid("({any, any} | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_26533() { testValid("({any, any} | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_26534() { testValid("({any, any} | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_26535() { testValid("({any, any} | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_26536() { testValid("({any, any} | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_26537() { testValid("({any, any} | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_26538() { testValid("({any, any} | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_26539() { testValid("({any, any} | {int, int})","{!int, {int, int}}"); }
		@Test public void test_26540() { testValid("({any, any} | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_26541() { testValid("({any, any} | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_26542() { testValid("({any, any} | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_26543() { testValid("({any, any} | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_26544() { testValid("({any, any} | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_26545() { testValid("({any, any} | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_26546() { testValid("({any, any} | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_26547() { testValid("({any, any} | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_26548() { testValid("({any, any} | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_26549() { testValid("({any, any} | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_26550() { testValid("({any, any} | {int, int})","{!int, (int | any)}"); }
		@Test public void test_26551() { testValid("({any, any} | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_26552() { testValid("({any, any} | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_26553() { testValid("({any, any} | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_26554() { testValid("({any, any} | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_26555() { testValid("({any, any} | {int, int})","{!int, (any | int)}"); }
		@Test public void test_26556() { testValid("({any, any} | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_26557() { testValid("({any, any} | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_26558() { testValid("({any, any} | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_26559() { testValid("({any, any} | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_26560() { testValid("({any, any} | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_26561() { testValid("({any, any} | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_26562() { testValid("({any, any} | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_26563() { testValid("({any, any} | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_26564() { testValid("({any, any} | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_26565() { testValid("({any, any} | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_26566() { testValid("({any, any} | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_26567() { testValid("({any, any} | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_26568() { testValid("({any, any} | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_26569() { testValid("({any, any} | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_26570() { testValid("({any, any} | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_26571() { testValid("({any, any} | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_26572() { testValid("({any, any} | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_26573() { testValid("({any, any} | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_26574() { testValid("({any, any} | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_26575() { testValid("({any, any} | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_26576() { testValid("({any, any} | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26577() { testValid("({any, any} | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_26578() { testValid("({any, any} | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26579() { testValid("({any, any} | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_26580() { testValid("({any, any} | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_26581() { testValid("({any, any} | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_26582() { testValid("({any, any} | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_26583() { testInvalid("({any, any} | {int, int})","(!int | {any})"); }
		@Test public void test_26584() { testInvalid("({any, any} | {int, int})","({any, any} | {any})"); }
		@Test public void test_26585() { testInvalid("({any, any} | {int, int})","((any | any) | {any})"); }
		@Test public void test_26586() { testInvalid("({any, any} | {int, int})","((int | any) | {any})"); }
		@Test public void test_26587() { testInvalid("({any, any} | {int, int})","((any & any) | {any})"); }
		@Test public void test_26588() { testInvalid("({any, any} | {int, int})","((int & any) | {any})"); }
		@Test public void test_26589() { testInvalid("({any, any} | {int, int})","((any & int) | {any})"); }
		@Test public void test_26590() { testInvalid("({any, any} | {int, int})","({int} | {int})"); }
		@Test public void test_26591() { testInvalid("({any, any} | {int, int})","(!any | {int})"); }
		@Test public void test_26592() { testInvalid("({any, any} | {int, int})","(!int | {int})"); }
		@Test public void test_26593() { testInvalid("({any, any} | {int, int})","({any, int} | {int})"); }
		@Test public void test_26594() { testInvalid("({any, any} | {int, int})","((int & any) | {int})"); }
		@Test public void test_26595() { testInvalid("({any, any} | {int, int})","((any & int) | {int})"); }
		@Test public void test_26596() { testInvalid("({any, any} | {int, int})","((int & int) | {int})"); }
		@Test public void test_26597() { testInvalid("({any, any} | {int, int})","({any} | !any)"); }
		@Test public void test_26598() { testInvalid("({any, any} | {int, int})","({int} | !any)"); }
		@Test public void test_26599() { testValid("({any, any} | {int, int})","({any, any} | !any)"); }
		@Test public void test_26600() { testValid("({any, any} | {int, int})","({int, int} | !any)"); }
		@Test public void test_26601() { testInvalid("({any, any} | {int, int})","((any | any) | !any)"); }
		@Test public void test_26602() { testInvalid("({any, any} | {int, int})","((int | any) | !any)"); }
		@Test public void test_26603() { testInvalid("({any, any} | {int, int})","((int | int) | !any)"); }
		@Test public void test_26604() { testInvalid("({any, any} | {int, int})","((int & int) | !any)"); }
		@Test public void test_26605() { testInvalid("({any, any} | {int, int})","(!int | !int)"); }
		@Test public void test_26606() { testInvalid("({any, any} | {int, int})","({any, any} | !int)"); }
		@Test public void test_26607() { testInvalid("({any, any} | {int, int})","({int, int} | !int)"); }
		@Test public void test_26608() { testInvalid("({any, any} | {int, int})","((int | any) | !int)"); }
		@Test public void test_26609() { testInvalid("({any, any} | {int, int})","((any | int) | !int)"); }
		@Test public void test_26610() { testInvalid("({any, any} | {int, int})","((any & int) | !int)"); }
		@Test public void test_26611() { testInvalid("({any, any} | {int, int})","((int & int) | !int)"); }
		@Test public void test_26612() { testInvalid("({any, any} | {int, int})","({int} | {any, any})"); }
		@Test public void test_26613() { testValid("({any, any} | {int, int})","(!any | {any, any})"); }
		@Test public void test_26614() { testInvalid("({any, any} | {int, int})","(!int | {any, any})"); }
		@Test public void test_26615() { testValid("({any, any} | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_26616() { testInvalid("({any, any} | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_26617() { testInvalid("({any, any} | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_26618() { testInvalid("({any, any} | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_26619() { testInvalid("({any, any} | {int, int})","(!int | {int, any})"); }
		@Test public void test_26620() { testValid("({any, any} | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_26621() { testInvalid("({any, any} | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_26622() { testInvalid("({any, any} | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_26623() { testInvalid("({any, any} | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_26624() { testInvalid("({any, any} | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_26625() { testInvalid("({any, any} | {int, int})","({any} | {any, int})"); }
		@Test public void test_26626() { testInvalid("({any, any} | {int, int})","(!int | {any, int})"); }
		@Test public void test_26627() { testValid("({any, any} | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_26628() { testInvalid("({any, any} | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_26629() { testInvalid("({any, any} | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_26630() { testInvalid("({any, any} | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_26631() { testInvalid("({any, any} | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_26632() { testValid("({any, any} | {int, int})","(!any | {int, int})"); }
		@Test public void test_26633() { testInvalid("({any, any} | {int, int})","(!int | {int, int})"); }
		@Test public void test_26634() { testValid("({any, any} | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_26635() { testValid("({any, any} | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_26636() { testInvalid("({any, any} | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_26637() { testInvalid("({any, any} | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_26638() { testInvalid("({any, any} | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_26639() { testInvalid("({any, any} | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_26640() { testInvalid("({any, any} | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_26641() { testInvalid("({any, any} | {int, int})","({any} | (any | any))"); }
		@Test public void test_26642() { testInvalid("({any, any} | {int, int})","(!any | (any | any))"); }
		@Test public void test_26643() { testInvalid("({any, any} | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_26644() { testInvalid("({any, any} | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_26645() { testInvalid("({any, any} | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_26646() { testInvalid("({any, any} | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_26647() { testInvalid("({any, any} | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_26648() { testInvalid("({any, any} | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_26649() { testInvalid("({any, any} | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_26650() { testInvalid("({any, any} | {int, int})","({any} | (int | any))"); }
		@Test public void test_26651() { testInvalid("({any, any} | {int, int})","(!int | (int | any))"); }
		@Test public void test_26652() { testInvalid("({any, any} | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_26653() { testInvalid("({any, any} | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_26654() { testInvalid("({any, any} | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_26655() { testInvalid("({any, any} | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_26656() { testInvalid("({any, any} | {int, int})","({any} | (any | int))"); }
		@Test public void test_26657() { testInvalid("({any, any} | {int, int})","({int} | (any | int))"); }
		@Test public void test_26658() { testInvalid("({any, any} | {int, int})","(!any | (any | int))"); }
		@Test public void test_26659() { testInvalid("({any, any} | {int, int})","(!int | (any | int))"); }
		@Test public void test_26660() { testInvalid("({any, any} | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_26661() { testInvalid("({any, any} | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_26662() { testInvalid("({any, any} | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_26663() { testInvalid("({any, any} | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_26664() { testInvalid("({any, any} | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_26665() { testInvalid("({any, any} | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_26666() { testInvalid("({any, any} | {int, int})","({int} | (int | int))"); }
		@Test public void test_26667() { testInvalid("({any, any} | {int, int})","(!any | (int | int))"); }
		@Test public void test_26668() { testInvalid("({any, any} | {int, int})","(!int | (int | int))"); }
		@Test public void test_26669() { testInvalid("({any, any} | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_26670() { testInvalid("({any, any} | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_26671() { testInvalid("({any, any} | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_26672() { testInvalid("({any, any} | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_26673() { testInvalid("({any, any} | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_26674() { testInvalid("({any, any} | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_26675() { testInvalid("({any, any} | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_26676() { testInvalid("({any, any} | {int, int})","(!any | (any & any))"); }
		@Test public void test_26677() { testInvalid("({any, any} | {int, int})","(!int | (any & any))"); }
		@Test public void test_26678() { testInvalid("({any, any} | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_26679() { testInvalid("({any, any} | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_26680() { testInvalid("({any, any} | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_26681() { testInvalid("({any, any} | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_26682() { testInvalid("({any, any} | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_26683() { testInvalid("({any, any} | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_26684() { testInvalid("({any, any} | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_26685() { testInvalid("({any, any} | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_26686() { testInvalid("({any, any} | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_26687() { testInvalid("({any, any} | {int, int})","({any} | (int & any))"); }
		@Test public void test_26688() { testInvalid("({any, int} | {int, int})","{int}"); }
		@Test public void test_26689() { testInvalid("({any, int} | {int, int})","{any, any}"); }
		@Test public void test_26690() { testValid("({any, int} | {int, int})","{int, int}"); }
		@Test public void test_26691() { testInvalid("({any, int} | {int, int})","(any | int)"); }
		@Test public void test_26692() { testInvalid("({any, int} | {int, int})","(int & any)"); }
		@Test public void test_26693() { testInvalid("({any, int} | {int, int})","{{any}}"); }
		@Test public void test_26694() { testInvalid("({any, int} | {int, int})","{{int, any}}"); }
		@Test public void test_26695() { testInvalid("({any, int} | {int, int})","{{int, int}}"); }
		@Test public void test_26696() { testInvalid("({any, int} | {int, int})","{(any | int)}"); }
		@Test public void test_26697() { testInvalid("({any, int} | {int, int})","!{int, any}"); }
		@Test public void test_26698() { testInvalid("({any, int} | {int, int})","!{int, int}"); }
		@Test public void test_26699() { testValid("({any, int} | {int, int})","!(any | any)"); }
		@Test public void test_26700() { testValid("({any, int} | {int, int})","!(any & any)"); }
		@Test public void test_26701() { testInvalid("({any, int} | {int, int})","!(int & int)"); }
		@Test public void test_26702() { testInvalid("({any, int} | {int, int})","{{int}, {any}}"); }
		@Test public void test_26703() { testInvalid("({any, int} | {int, int})","{!int, {any}}"); }
		@Test public void test_26704() { testInvalid("({any, int} | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_26705() { testInvalid("({any, int} | {int, int})","{(any | int), {any}}"); }
		@Test public void test_26706() { testInvalid("({any, int} | {int, int})","{!int, {int}}"); }
		@Test public void test_26707() { testInvalid("({any, int} | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_26708() { testInvalid("({any, int} | {int, int})","{(any | any), {int}}"); }
		@Test public void test_26709() { testInvalid("({any, int} | {int, int})","{(any & any), {int}}"); }
		@Test public void test_26710() { testInvalid("({any, int} | {int, int})","{(any & int), {int}}"); }
		@Test public void test_26711() { testInvalid("({any, int} | {int, int})","{{any, any}, !int}"); }
		@Test public void test_26712() { testInvalid("({any, int} | {int, int})","{{any, int}, !int}"); }
		@Test public void test_26713() { testInvalid("({any, int} | {int, int})","{(any | any), !int}"); }
		@Test public void test_26714() { testInvalid("({any, int} | {int, int})","{(int | any), !int}"); }
		@Test public void test_26715() { testInvalid("({any, int} | {int, int})","{(any & any), !int}"); }
		@Test public void test_26716() { testInvalid("({any, int} | {int, int})","{(int & any), !int}"); }
		@Test public void test_26717() { testInvalid("({any, int} | {int, int})","{(int & int), !int}"); }
		@Test public void test_26718() { testInvalid("({any, int} | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_26719() { testInvalid("({any, int} | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_26720() { testInvalid("({any, int} | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_26721() { testInvalid("({any, int} | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_26722() { testInvalid("({any, int} | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_26723() { testInvalid("({any, int} | {int, int})","{!int, {int, any}}"); }
		@Test public void test_26724() { testInvalid("({any, int} | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_26725() { testInvalid("({any, int} | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_26726() { testInvalid("({any, int} | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_26727() { testInvalid("({any, int} | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_26728() { testInvalid("({any, int} | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_26729() { testInvalid("({any, int} | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_26730() { testInvalid("({any, int} | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_26731() { testInvalid("({any, int} | {int, int})","{!int, {int, int}}"); }
		@Test public void test_26732() { testInvalid("({any, int} | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_26733() { testInvalid("({any, int} | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_26734() { testInvalid("({any, int} | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_26735() { testInvalid("({any, int} | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_26736() { testInvalid("({any, int} | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_26737() { testInvalid("({any, int} | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_26738() { testInvalid("({any, int} | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_26739() { testInvalid("({any, int} | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_26740() { testInvalid("({any, int} | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_26741() { testInvalid("({any, int} | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_26742() { testInvalid("({any, int} | {int, int})","{!int, (int | any)}"); }
		@Test public void test_26743() { testInvalid("({any, int} | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_26744() { testInvalid("({any, int} | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_26745() { testInvalid("({any, int} | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_26746() { testInvalid("({any, int} | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_26747() { testInvalid("({any, int} | {int, int})","{!int, (any | int)}"); }
		@Test public void test_26748() { testInvalid("({any, int} | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_26749() { testInvalid("({any, int} | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_26750() { testInvalid("({any, int} | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_26751() { testValid("({any, int} | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_26752() { testValid("({any, int} | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_26753() { testValid("({any, int} | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_26754() { testInvalid("({any, int} | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_26755() { testInvalid("({any, int} | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_26756() { testInvalid("({any, int} | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_26757() { testInvalid("({any, int} | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_26758() { testInvalid("({any, int} | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_26759() { testInvalid("({any, int} | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_26760() { testValid("({any, int} | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_26761() { testValid("({any, int} | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_26762() { testValid("({any, int} | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_26763() { testValid("({any, int} | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_26764() { testValid("({any, int} | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_26765() { testValid("({any, int} | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_26766() { testValid("({any, int} | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_26767() { testValid("({any, int} | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_26768() { testValid("({any, int} | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26769() { testValid("({any, int} | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_26770() { testValid("({any, int} | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26771() { testValid("({any, int} | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_26772() { testValid("({any, int} | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_26773() { testValid("({any, int} | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_26774() { testValid("({any, int} | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_26775() { testInvalid("({any, int} | {int, int})","(!int | {any})"); }
		@Test public void test_26776() { testInvalid("({any, int} | {int, int})","({any, any} | {any})"); }
		@Test public void test_26777() { testInvalid("({any, int} | {int, int})","((any | any) | {any})"); }
		@Test public void test_26778() { testInvalid("({any, int} | {int, int})","((int | any) | {any})"); }
		@Test public void test_26779() { testInvalid("({any, int} | {int, int})","((any & any) | {any})"); }
		@Test public void test_26780() { testInvalid("({any, int} | {int, int})","((int & any) | {any})"); }
		@Test public void test_26781() { testInvalid("({any, int} | {int, int})","((any & int) | {any})"); }
		@Test public void test_26782() { testInvalid("({any, int} | {int, int})","({int} | {int})"); }
		@Test public void test_26783() { testInvalid("({any, int} | {int, int})","(!any | {int})"); }
		@Test public void test_26784() { testInvalid("({any, int} | {int, int})","(!int | {int})"); }
		@Test public void test_26785() { testInvalid("({any, int} | {int, int})","({any, int} | {int})"); }
		@Test public void test_26786() { testInvalid("({any, int} | {int, int})","((int & any) | {int})"); }
		@Test public void test_26787() { testInvalid("({any, int} | {int, int})","((any & int) | {int})"); }
		@Test public void test_26788() { testInvalid("({any, int} | {int, int})","((int & int) | {int})"); }
		@Test public void test_26789() { testInvalid("({any, int} | {int, int})","({any} | !any)"); }
		@Test public void test_26790() { testInvalid("({any, int} | {int, int})","({int} | !any)"); }
		@Test public void test_26791() { testInvalid("({any, int} | {int, int})","({any, any} | !any)"); }
		@Test public void test_26792() { testValid("({any, int} | {int, int})","({int, int} | !any)"); }
		@Test public void test_26793() { testInvalid("({any, int} | {int, int})","((any | any) | !any)"); }
		@Test public void test_26794() { testInvalid("({any, int} | {int, int})","((int | any) | !any)"); }
		@Test public void test_26795() { testInvalid("({any, int} | {int, int})","((int | int) | !any)"); }
		@Test public void test_26796() { testInvalid("({any, int} | {int, int})","((int & int) | !any)"); }
		@Test public void test_26797() { testInvalid("({any, int} | {int, int})","(!int | !int)"); }
		@Test public void test_26798() { testInvalid("({any, int} | {int, int})","({any, any} | !int)"); }
		@Test public void test_26799() { testInvalid("({any, int} | {int, int})","({int, int} | !int)"); }
		@Test public void test_26800() { testInvalid("({any, int} | {int, int})","((int | any) | !int)"); }
		@Test public void test_26801() { testInvalid("({any, int} | {int, int})","((any | int) | !int)"); }
		@Test public void test_26802() { testInvalid("({any, int} | {int, int})","((any & int) | !int)"); }
		@Test public void test_26803() { testInvalid("({any, int} | {int, int})","((int & int) | !int)"); }
		@Test public void test_26804() { testInvalid("({any, int} | {int, int})","({int} | {any, any})"); }
		@Test public void test_26805() { testInvalid("({any, int} | {int, int})","(!any | {any, any})"); }
		@Test public void test_26806() { testInvalid("({any, int} | {int, int})","(!int | {any, any})"); }
		@Test public void test_26807() { testInvalid("({any, int} | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_26808() { testInvalid("({any, int} | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_26809() { testInvalid("({any, int} | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_26810() { testInvalid("({any, int} | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_26811() { testInvalid("({any, int} | {int, int})","(!int | {int, any})"); }
		@Test public void test_26812() { testInvalid("({any, int} | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_26813() { testInvalid("({any, int} | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_26814() { testInvalid("({any, int} | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_26815() { testInvalid("({any, int} | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_26816() { testInvalid("({any, int} | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_26817() { testInvalid("({any, int} | {int, int})","({any} | {any, int})"); }
		@Test public void test_26818() { testInvalid("({any, int} | {int, int})","(!int | {any, int})"); }
		@Test public void test_26819() { testValid("({any, int} | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_26820() { testInvalid("({any, int} | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_26821() { testInvalid("({any, int} | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_26822() { testInvalid("({any, int} | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_26823() { testInvalid("({any, int} | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_26824() { testValid("({any, int} | {int, int})","(!any | {int, int})"); }
		@Test public void test_26825() { testInvalid("({any, int} | {int, int})","(!int | {int, int})"); }
		@Test public void test_26826() { testInvalid("({any, int} | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_26827() { testValid("({any, int} | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_26828() { testInvalid("({any, int} | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_26829() { testInvalid("({any, int} | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_26830() { testInvalid("({any, int} | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_26831() { testInvalid("({any, int} | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_26832() { testInvalid("({any, int} | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_26833() { testInvalid("({any, int} | {int, int})","({any} | (any | any))"); }
		@Test public void test_26834() { testInvalid("({any, int} | {int, int})","(!any | (any | any))"); }
		@Test public void test_26835() { testInvalid("({any, int} | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_26836() { testInvalid("({any, int} | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_26837() { testInvalid("({any, int} | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_26838() { testInvalid("({any, int} | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_26839() { testInvalid("({any, int} | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_26840() { testInvalid("({any, int} | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_26841() { testInvalid("({any, int} | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_26842() { testInvalid("({any, int} | {int, int})","({any} | (int | any))"); }
		@Test public void test_26843() { testInvalid("({any, int} | {int, int})","(!int | (int | any))"); }
		@Test public void test_26844() { testInvalid("({any, int} | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_26845() { testInvalid("({any, int} | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_26846() { testInvalid("({any, int} | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_26847() { testInvalid("({any, int} | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_26848() { testInvalid("({any, int} | {int, int})","({any} | (any | int))"); }
		@Test public void test_26849() { testInvalid("({any, int} | {int, int})","({int} | (any | int))"); }
		@Test public void test_26850() { testInvalid("({any, int} | {int, int})","(!any | (any | int))"); }
		@Test public void test_26851() { testInvalid("({any, int} | {int, int})","(!int | (any | int))"); }
		@Test public void test_26852() { testInvalid("({any, int} | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_26853() { testInvalid("({any, int} | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_26854() { testInvalid("({any, int} | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_26855() { testInvalid("({any, int} | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_26856() { testInvalid("({any, int} | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_26857() { testInvalid("({any, int} | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_26858() { testInvalid("({any, int} | {int, int})","({int} | (int | int))"); }
		@Test public void test_26859() { testInvalid("({any, int} | {int, int})","(!any | (int | int))"); }
		@Test public void test_26860() { testInvalid("({any, int} | {int, int})","(!int | (int | int))"); }
		@Test public void test_26861() { testInvalid("({any, int} | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_26862() { testInvalid("({any, int} | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_26863() { testInvalid("({any, int} | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_26864() { testInvalid("({any, int} | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_26865() { testInvalid("({any, int} | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_26866() { testInvalid("({any, int} | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_26867() { testInvalid("({any, int} | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_26868() { testInvalid("({any, int} | {int, int})","(!any | (any & any))"); }
		@Test public void test_26869() { testInvalid("({any, int} | {int, int})","(!int | (any & any))"); }
		@Test public void test_26870() { testInvalid("({any, int} | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_26871() { testInvalid("({any, int} | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_26872() { testInvalid("({any, int} | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_26873() { testInvalid("({any, int} | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_26874() { testInvalid("({any, int} | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_26875() { testInvalid("({any, int} | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_26876() { testInvalid("({any, int} | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_26877() { testInvalid("({any, int} | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_26878() { testInvalid("({any, int} | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_26879() { testInvalid("({any, int} | {int, int})","({any} | (int & any))"); }
		@Test public void test_26880() { testValid("((any | any) | {int, int})","{int}"); }
		@Test public void test_26881() { testValid("((any | any) | {int, int})","{any, any}"); }
		@Test public void test_26882() { testValid("((any | any) | {int, int})","{int, int}"); }
		@Test public void test_26883() { testValid("((any | any) | {int, int})","(any | int)"); }
		@Test public void test_26884() { testValid("((any | any) | {int, int})","(int & any)"); }
		@Test public void test_26885() { testValid("((any | any) | {int, int})","{{any}}"); }
		@Test public void test_26886() { testValid("((any | any) | {int, int})","{{int, any}}"); }
		@Test public void test_26887() { testValid("((any | any) | {int, int})","{{int, int}}"); }
		@Test public void test_26888() { testValid("((any | any) | {int, int})","{(any | int)}"); }
		@Test public void test_26889() { testValid("((any | any) | {int, int})","!{int, any}"); }
		@Test public void test_26890() { testValid("((any | any) | {int, int})","!{int, int}"); }
		@Test public void test_26891() { testValid("((any | any) | {int, int})","!(any | any)"); }
		@Test public void test_26892() { testValid("((any | any) | {int, int})","!(any & any)"); }
		@Test public void test_26893() { testValid("((any | any) | {int, int})","!(int & int)"); }
		@Test public void test_26894() { testValid("((any | any) | {int, int})","{{int}, {any}}"); }
		@Test public void test_26895() { testValid("((any | any) | {int, int})","{!int, {any}}"); }
		@Test public void test_26896() { testValid("((any | any) | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_26897() { testValid("((any | any) | {int, int})","{(any | int), {any}}"); }
		@Test public void test_26898() { testValid("((any | any) | {int, int})","{!int, {int}}"); }
		@Test public void test_26899() { testValid("((any | any) | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_26900() { testValid("((any | any) | {int, int})","{(any | any), {int}}"); }
		@Test public void test_26901() { testValid("((any | any) | {int, int})","{(any & any), {int}}"); }
		@Test public void test_26902() { testValid("((any | any) | {int, int})","{(any & int), {int}}"); }
		@Test public void test_26903() { testValid("((any | any) | {int, int})","{{any, any}, !int}"); }
		@Test public void test_26904() { testValid("((any | any) | {int, int})","{{any, int}, !int}"); }
		@Test public void test_26905() { testValid("((any | any) | {int, int})","{(any | any), !int}"); }
		@Test public void test_26906() { testValid("((any | any) | {int, int})","{(int | any), !int}"); }
		@Test public void test_26907() { testValid("((any | any) | {int, int})","{(any & any), !int}"); }
		@Test public void test_26908() { testValid("((any | any) | {int, int})","{(int & any), !int}"); }
		@Test public void test_26909() { testValid("((any | any) | {int, int})","{(int & int), !int}"); }
		@Test public void test_26910() { testValid("((any | any) | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_26911() { testValid("((any | any) | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_26912() { testValid("((any | any) | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_26913() { testValid("((any | any) | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_26914() { testValid("((any | any) | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_26915() { testValid("((any | any) | {int, int})","{!int, {int, any}}"); }
		@Test public void test_26916() { testValid("((any | any) | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_26917() { testValid("((any | any) | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_26918() { testValid("((any | any) | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_26919() { testValid("((any | any) | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_26920() { testValid("((any | any) | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_26921() { testValid("((any | any) | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_26922() { testValid("((any | any) | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_26923() { testValid("((any | any) | {int, int})","{!int, {int, int}}"); }
		@Test public void test_26924() { testValid("((any | any) | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_26925() { testValid("((any | any) | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_26926() { testValid("((any | any) | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_26927() { testValid("((any | any) | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_26928() { testValid("((any | any) | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_26929() { testValid("((any | any) | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_26930() { testValid("((any | any) | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_26931() { testValid("((any | any) | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_26932() { testValid("((any | any) | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_26933() { testValid("((any | any) | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_26934() { testValid("((any | any) | {int, int})","{!int, (int | any)}"); }
		@Test public void test_26935() { testValid("((any | any) | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_26936() { testValid("((any | any) | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_26937() { testValid("((any | any) | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_26938() { testValid("((any | any) | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_26939() { testValid("((any | any) | {int, int})","{!int, (any | int)}"); }
		@Test public void test_26940() { testValid("((any | any) | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_26941() { testValid("((any | any) | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_26942() { testValid("((any | any) | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_26943() { testValid("((any | any) | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_26944() { testValid("((any | any) | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_26945() { testValid("((any | any) | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_26946() { testValid("((any | any) | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_26947() { testValid("((any | any) | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_26948() { testValid("((any | any) | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_26949() { testValid("((any | any) | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_26950() { testValid("((any | any) | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_26951() { testValid("((any | any) | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_26952() { testValid("((any | any) | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_26953() { testValid("((any | any) | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_26954() { testValid("((any | any) | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_26955() { testValid("((any | any) | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_26956() { testValid("((any | any) | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_26957() { testValid("((any | any) | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_26958() { testValid("((any | any) | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_26959() { testValid("((any | any) | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_26960() { testValid("((any | any) | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_26961() { testValid("((any | any) | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_26962() { testValid("((any | any) | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_26963() { testValid("((any | any) | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_26964() { testValid("((any | any) | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_26965() { testValid("((any | any) | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_26966() { testValid("((any | any) | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_26967() { testValid("((any | any) | {int, int})","(!int | {any})"); }
		@Test public void test_26968() { testValid("((any | any) | {int, int})","({any, any} | {any})"); }
		@Test public void test_26969() { testValid("((any | any) | {int, int})","((any | any) | {any})"); }
		@Test public void test_26970() { testValid("((any | any) | {int, int})","((int | any) | {any})"); }
		@Test public void test_26971() { testValid("((any | any) | {int, int})","((any & any) | {any})"); }
		@Test public void test_26972() { testValid("((any | any) | {int, int})","((int & any) | {any})"); }
		@Test public void test_26973() { testValid("((any | any) | {int, int})","((any & int) | {any})"); }
		@Test public void test_26974() { testValid("((any | any) | {int, int})","({int} | {int})"); }
		@Test public void test_26975() { testValid("((any | any) | {int, int})","(!any | {int})"); }
		@Test public void test_26976() { testValid("((any | any) | {int, int})","(!int | {int})"); }
		@Test public void test_26977() { testValid("((any | any) | {int, int})","({any, int} | {int})"); }
		@Test public void test_26978() { testValid("((any | any) | {int, int})","((int & any) | {int})"); }
		@Test public void test_26979() { testValid("((any | any) | {int, int})","((any & int) | {int})"); }
		@Test public void test_26980() { testValid("((any | any) | {int, int})","((int & int) | {int})"); }
		@Test public void test_26981() { testValid("((any | any) | {int, int})","({any} | !any)"); }
		@Test public void test_26982() { testValid("((any | any) | {int, int})","({int} | !any)"); }
		@Test public void test_26983() { testValid("((any | any) | {int, int})","({any, any} | !any)"); }
		@Test public void test_26984() { testValid("((any | any) | {int, int})","({int, int} | !any)"); }
		@Test public void test_26985() { testValid("((any | any) | {int, int})","((any | any) | !any)"); }
		@Test public void test_26986() { testValid("((any | any) | {int, int})","((int | any) | !any)"); }
		@Test public void test_26987() { testValid("((any | any) | {int, int})","((int | int) | !any)"); }
		@Test public void test_26988() { testValid("((any | any) | {int, int})","((int & int) | !any)"); }
		@Test public void test_26989() { testValid("((any | any) | {int, int})","(!int | !int)"); }
		@Test public void test_26990() { testValid("((any | any) | {int, int})","({any, any} | !int)"); }
		@Test public void test_26991() { testValid("((any | any) | {int, int})","({int, int} | !int)"); }
		@Test public void test_26992() { testValid("((any | any) | {int, int})","((int | any) | !int)"); }
		@Test public void test_26993() { testValid("((any | any) | {int, int})","((any | int) | !int)"); }
		@Test public void test_26994() { testValid("((any | any) | {int, int})","((any & int) | !int)"); }
		@Test public void test_26995() { testValid("((any | any) | {int, int})","((int & int) | !int)"); }
		@Test public void test_26996() { testValid("((any | any) | {int, int})","({int} | {any, any})"); }
		@Test public void test_26997() { testValid("((any | any) | {int, int})","(!any | {any, any})"); }
		@Test public void test_26998() { testValid("((any | any) | {int, int})","(!int | {any, any})"); }
		@Test public void test_26999() { testValid("((any | any) | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_27000() { testValid("((any | any) | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_27001() { testValid("((any | any) | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_27002() { testValid("((any | any) | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_27003() { testValid("((any | any) | {int, int})","(!int | {int, any})"); }
		@Test public void test_27004() { testValid("((any | any) | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_27005() { testValid("((any | any) | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_27006() { testValid("((any | any) | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_27007() { testValid("((any | any) | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_27008() { testValid("((any | any) | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_27009() { testValid("((any | any) | {int, int})","({any} | {any, int})"); }
		@Test public void test_27010() { testValid("((any | any) | {int, int})","(!int | {any, int})"); }
		@Test public void test_27011() { testValid("((any | any) | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_27012() { testValid("((any | any) | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_27013() { testValid("((any | any) | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_27014() { testValid("((any | any) | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_27015() { testValid("((any | any) | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_27016() { testValid("((any | any) | {int, int})","(!any | {int, int})"); }
		@Test public void test_27017() { testValid("((any | any) | {int, int})","(!int | {int, int})"); }
		@Test public void test_27018() { testValid("((any | any) | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_27019() { testValid("((any | any) | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_27020() { testValid("((any | any) | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_27021() { testValid("((any | any) | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_27022() { testValid("((any | any) | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_27023() { testValid("((any | any) | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_27024() { testValid("((any | any) | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_27025() { testValid("((any | any) | {int, int})","({any} | (any | any))"); }
		@Test public void test_27026() { testValid("((any | any) | {int, int})","(!any | (any | any))"); }
		@Test public void test_27027() { testValid("((any | any) | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_27028() { testValid("((any | any) | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_27029() { testValid("((any | any) | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_27030() { testValid("((any | any) | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_27031() { testValid("((any | any) | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_27032() { testValid("((any | any) | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_27033() { testValid("((any | any) | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_27034() { testValid("((any | any) | {int, int})","({any} | (int | any))"); }
		@Test public void test_27035() { testValid("((any | any) | {int, int})","(!int | (int | any))"); }
		@Test public void test_27036() { testValid("((any | any) | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_27037() { testValid("((any | any) | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_27038() { testValid("((any | any) | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_27039() { testValid("((any | any) | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_27040() { testValid("((any | any) | {int, int})","({any} | (any | int))"); }
		@Test public void test_27041() { testValid("((any | any) | {int, int})","({int} | (any | int))"); }
		@Test public void test_27042() { testValid("((any | any) | {int, int})","(!any | (any | int))"); }
		@Test public void test_27043() { testValid("((any | any) | {int, int})","(!int | (any | int))"); }
		@Test public void test_27044() { testValid("((any | any) | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_27045() { testValid("((any | any) | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_27046() { testValid("((any | any) | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_27047() { testValid("((any | any) | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_27048() { testValid("((any | any) | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_27049() { testValid("((any | any) | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_27050() { testValid("((any | any) | {int, int})","({int} | (int | int))"); }
		@Test public void test_27051() { testValid("((any | any) | {int, int})","(!any | (int | int))"); }
		@Test public void test_27052() { testValid("((any | any) | {int, int})","(!int | (int | int))"); }
		@Test public void test_27053() { testValid("((any | any) | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_27054() { testValid("((any | any) | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_27055() { testValid("((any | any) | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_27056() { testValid("((any | any) | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_27057() { testValid("((any | any) | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_27058() { testValid("((any | any) | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_27059() { testValid("((any | any) | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_27060() { testValid("((any | any) | {int, int})","(!any | (any & any))"); }
		@Test public void test_27061() { testValid("((any | any) | {int, int})","(!int | (any & any))"); }
		@Test public void test_27062() { testValid("((any | any) | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_27063() { testValid("((any | any) | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_27064() { testValid("((any | any) | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_27065() { testValid("((any | any) | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_27066() { testValid("((any | any) | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_27067() { testValid("((any | any) | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_27068() { testValid("((any | any) | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_27069() { testValid("((any | any) | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_27070() { testValid("((any | any) | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_27071() { testValid("((any | any) | {int, int})","({any} | (int & any))"); }
		@Test public void test_27072() { testInvalid("((int | int) | {int, int})","{int}"); }
		@Test public void test_27073() { testInvalid("((int | int) | {int, int})","{any, any}"); }
		@Test public void test_27074() { testValid("((int | int) | {int, int})","{int, int}"); }
		@Test public void test_27075() { testInvalid("((int | int) | {int, int})","(any | int)"); }
		@Test public void test_27076() { testValid("((int | int) | {int, int})","(int & any)"); }
		@Test public void test_27077() { testInvalid("((int | int) | {int, int})","{{any}}"); }
		@Test public void test_27078() { testInvalid("((int | int) | {int, int})","{{int, any}}"); }
		@Test public void test_27079() { testInvalid("((int | int) | {int, int})","{{int, int}}"); }
		@Test public void test_27080() { testInvalid("((int | int) | {int, int})","{(any | int)}"); }
		@Test public void test_27081() { testInvalid("((int | int) | {int, int})","!{int, any}"); }
		@Test public void test_27082() { testInvalid("((int | int) | {int, int})","!{int, int}"); }
		@Test public void test_27083() { testValid("((int | int) | {int, int})","!(any | any)"); }
		@Test public void test_27084() { testValid("((int | int) | {int, int})","!(any & any)"); }
		@Test public void test_27085() { testInvalid("((int | int) | {int, int})","!(int & int)"); }
		@Test public void test_27086() { testInvalid("((int | int) | {int, int})","{{int}, {any}}"); }
		@Test public void test_27087() { testInvalid("((int | int) | {int, int})","{!int, {any}}"); }
		@Test public void test_27088() { testInvalid("((int | int) | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_27089() { testInvalid("((int | int) | {int, int})","{(any | int), {any}}"); }
		@Test public void test_27090() { testInvalid("((int | int) | {int, int})","{!int, {int}}"); }
		@Test public void test_27091() { testInvalid("((int | int) | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_27092() { testInvalid("((int | int) | {int, int})","{(any | any), {int}}"); }
		@Test public void test_27093() { testInvalid("((int | int) | {int, int})","{(any & any), {int}}"); }
		@Test public void test_27094() { testInvalid("((int | int) | {int, int})","{(any & int), {int}}"); }
		@Test public void test_27095() { testInvalid("((int | int) | {int, int})","{{any, any}, !int}"); }
		@Test public void test_27096() { testInvalid("((int | int) | {int, int})","{{any, int}, !int}"); }
		@Test public void test_27097() { testInvalid("((int | int) | {int, int})","{(any | any), !int}"); }
		@Test public void test_27098() { testInvalid("((int | int) | {int, int})","{(int | any), !int}"); }
		@Test public void test_27099() { testInvalid("((int | int) | {int, int})","{(any & any), !int}"); }
		@Test public void test_27100() { testInvalid("((int | int) | {int, int})","{(int & any), !int}"); }
		@Test public void test_27101() { testInvalid("((int | int) | {int, int})","{(int & int), !int}"); }
		@Test public void test_27102() { testInvalid("((int | int) | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_27103() { testInvalid("((int | int) | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_27104() { testInvalid("((int | int) | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_27105() { testInvalid("((int | int) | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_27106() { testInvalid("((int | int) | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_27107() { testInvalid("((int | int) | {int, int})","{!int, {int, any}}"); }
		@Test public void test_27108() { testInvalid("((int | int) | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_27109() { testInvalid("((int | int) | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_27110() { testInvalid("((int | int) | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_27111() { testInvalid("((int | int) | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_27112() { testInvalid("((int | int) | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_27113() { testInvalid("((int | int) | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_27114() { testInvalid("((int | int) | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_27115() { testInvalid("((int | int) | {int, int})","{!int, {int, int}}"); }
		@Test public void test_27116() { testInvalid("((int | int) | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_27117() { testInvalid("((int | int) | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_27118() { testInvalid("((int | int) | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_27119() { testInvalid("((int | int) | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_27120() { testInvalid("((int | int) | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_27121() { testInvalid("((int | int) | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_27122() { testInvalid("((int | int) | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_27123() { testInvalid("((int | int) | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_27124() { testInvalid("((int | int) | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_27125() { testInvalid("((int | int) | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_27126() { testInvalid("((int | int) | {int, int})","{!int, (int | any)}"); }
		@Test public void test_27127() { testInvalid("((int | int) | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_27128() { testInvalid("((int | int) | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_27129() { testInvalid("((int | int) | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_27130() { testInvalid("((int | int) | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_27131() { testInvalid("((int | int) | {int, int})","{!int, (any | int)}"); }
		@Test public void test_27132() { testInvalid("((int | int) | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_27133() { testInvalid("((int | int) | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_27134() { testInvalid("((int | int) | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_27135() { testInvalid("((int | int) | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_27136() { testInvalid("((int | int) | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_27137() { testInvalid("((int | int) | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_27138() { testInvalid("((int | int) | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_27139() { testInvalid("((int | int) | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_27140() { testInvalid("((int | int) | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_27141() { testInvalid("((int | int) | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_27142() { testInvalid("((int | int) | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_27143() { testInvalid("((int | int) | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_27144() { testInvalid("((int | int) | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_27145() { testInvalid("((int | int) | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_27146() { testInvalid("((int | int) | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_27147() { testInvalid("((int | int) | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_27148() { testInvalid("((int | int) | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_27149() { testInvalid("((int | int) | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_27150() { testValid("((int | int) | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_27151() { testValid("((int | int) | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_27152() { testInvalid("((int | int) | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_27153() { testInvalid("((int | int) | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_27154() { testInvalid("((int | int) | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_27155() { testValid("((int | int) | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_27156() { testInvalid("((int | int) | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_27157() { testValid("((int | int) | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_27158() { testValid("((int | int) | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_27159() { testInvalid("((int | int) | {int, int})","(!int | {any})"); }
		@Test public void test_27160() { testInvalid("((int | int) | {int, int})","({any, any} | {any})"); }
		@Test public void test_27161() { testInvalid("((int | int) | {int, int})","((any | any) | {any})"); }
		@Test public void test_27162() { testInvalid("((int | int) | {int, int})","((int | any) | {any})"); }
		@Test public void test_27163() { testInvalid("((int | int) | {int, int})","((any & any) | {any})"); }
		@Test public void test_27164() { testInvalid("((int | int) | {int, int})","((int & any) | {any})"); }
		@Test public void test_27165() { testInvalid("((int | int) | {int, int})","((any & int) | {any})"); }
		@Test public void test_27166() { testInvalid("((int | int) | {int, int})","({int} | {int})"); }
		@Test public void test_27167() { testInvalid("((int | int) | {int, int})","(!any | {int})"); }
		@Test public void test_27168() { testInvalid("((int | int) | {int, int})","(!int | {int})"); }
		@Test public void test_27169() { testInvalid("((int | int) | {int, int})","({any, int} | {int})"); }
		@Test public void test_27170() { testInvalid("((int | int) | {int, int})","((int & any) | {int})"); }
		@Test public void test_27171() { testInvalid("((int | int) | {int, int})","((any & int) | {int})"); }
		@Test public void test_27172() { testInvalid("((int | int) | {int, int})","((int & int) | {int})"); }
		@Test public void test_27173() { testInvalid("((int | int) | {int, int})","({any} | !any)"); }
		@Test public void test_27174() { testInvalid("((int | int) | {int, int})","({int} | !any)"); }
		@Test public void test_27175() { testInvalid("((int | int) | {int, int})","({any, any} | !any)"); }
		@Test public void test_27176() { testValid("((int | int) | {int, int})","({int, int} | !any)"); }
		@Test public void test_27177() { testInvalid("((int | int) | {int, int})","((any | any) | !any)"); }
		@Test public void test_27178() { testInvalid("((int | int) | {int, int})","((int | any) | !any)"); }
		@Test public void test_27179() { testValid("((int | int) | {int, int})","((int | int) | !any)"); }
		@Test public void test_27180() { testValid("((int | int) | {int, int})","((int & int) | !any)"); }
		@Test public void test_27181() { testInvalid("((int | int) | {int, int})","(!int | !int)"); }
		@Test public void test_27182() { testInvalid("((int | int) | {int, int})","({any, any} | !int)"); }
		@Test public void test_27183() { testInvalid("((int | int) | {int, int})","({int, int} | !int)"); }
		@Test public void test_27184() { testInvalid("((int | int) | {int, int})","((int | any) | !int)"); }
		@Test public void test_27185() { testInvalid("((int | int) | {int, int})","((any | int) | !int)"); }
		@Test public void test_27186() { testInvalid("((int | int) | {int, int})","((any & int) | !int)"); }
		@Test public void test_27187() { testInvalid("((int | int) | {int, int})","((int & int) | !int)"); }
		@Test public void test_27188() { testInvalid("((int | int) | {int, int})","({int} | {any, any})"); }
		@Test public void test_27189() { testInvalid("((int | int) | {int, int})","(!any | {any, any})"); }
		@Test public void test_27190() { testInvalid("((int | int) | {int, int})","(!int | {any, any})"); }
		@Test public void test_27191() { testInvalid("((int | int) | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_27192() { testInvalid("((int | int) | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_27193() { testInvalid("((int | int) | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_27194() { testInvalid("((int | int) | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_27195() { testInvalid("((int | int) | {int, int})","(!int | {int, any})"); }
		@Test public void test_27196() { testInvalid("((int | int) | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_27197() { testInvalid("((int | int) | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_27198() { testInvalid("((int | int) | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_27199() { testInvalid("((int | int) | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_27200() { testInvalid("((int | int) | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_27201() { testInvalid("((int | int) | {int, int})","({any} | {any, int})"); }
		@Test public void test_27202() { testInvalid("((int | int) | {int, int})","(!int | {any, int})"); }
		@Test public void test_27203() { testInvalid("((int | int) | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_27204() { testInvalid("((int | int) | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_27205() { testInvalid("((int | int) | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_27206() { testInvalid("((int | int) | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_27207() { testInvalid("((int | int) | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_27208() { testValid("((int | int) | {int, int})","(!any | {int, int})"); }
		@Test public void test_27209() { testInvalid("((int | int) | {int, int})","(!int | {int, int})"); }
		@Test public void test_27210() { testInvalid("((int | int) | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_27211() { testInvalid("((int | int) | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_27212() { testInvalid("((int | int) | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_27213() { testValid("((int | int) | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_27214() { testValid("((int | int) | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_27215() { testValid("((int | int) | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_27216() { testValid("((int | int) | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_27217() { testInvalid("((int | int) | {int, int})","({any} | (any | any))"); }
		@Test public void test_27218() { testInvalid("((int | int) | {int, int})","(!any | (any | any))"); }
		@Test public void test_27219() { testInvalid("((int | int) | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_27220() { testInvalid("((int | int) | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_27221() { testInvalid("((int | int) | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_27222() { testInvalid("((int | int) | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_27223() { testInvalid("((int | int) | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_27224() { testInvalid("((int | int) | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_27225() { testInvalid("((int | int) | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_27226() { testInvalid("((int | int) | {int, int})","({any} | (int | any))"); }
		@Test public void test_27227() { testInvalid("((int | int) | {int, int})","(!int | (int | any))"); }
		@Test public void test_27228() { testInvalid("((int | int) | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_27229() { testInvalid("((int | int) | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_27230() { testInvalid("((int | int) | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_27231() { testInvalid("((int | int) | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_27232() { testInvalid("((int | int) | {int, int})","({any} | (any | int))"); }
		@Test public void test_27233() { testInvalid("((int | int) | {int, int})","({int} | (any | int))"); }
		@Test public void test_27234() { testInvalid("((int | int) | {int, int})","(!any | (any | int))"); }
		@Test public void test_27235() { testInvalid("((int | int) | {int, int})","(!int | (any | int))"); }
		@Test public void test_27236() { testInvalid("((int | int) | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_27237() { testInvalid("((int | int) | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_27238() { testInvalid("((int | int) | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_27239() { testInvalid("((int | int) | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_27240() { testInvalid("((int | int) | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_27241() { testInvalid("((int | int) | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_27242() { testInvalid("((int | int) | {int, int})","({int} | (int | int))"); }
		@Test public void test_27243() { testValid("((int | int) | {int, int})","(!any | (int | int))"); }
		@Test public void test_27244() { testInvalid("((int | int) | {int, int})","(!int | (int | int))"); }
		@Test public void test_27245() { testInvalid("((int | int) | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_27246() { testInvalid("((int | int) | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_27247() { testInvalid("((int | int) | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_27248() { testValid("((int | int) | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_27249() { testInvalid("((int | int) | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_27250() { testValid("((int | int) | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_27251() { testValid("((int | int) | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_27252() { testInvalid("((int | int) | {int, int})","(!any | (any & any))"); }
		@Test public void test_27253() { testInvalid("((int | int) | {int, int})","(!int | (any & any))"); }
		@Test public void test_27254() { testInvalid("((int | int) | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_27255() { testInvalid("((int | int) | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_27256() { testInvalid("((int | int) | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_27257() { testInvalid("((int | int) | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_27258() { testInvalid("((int | int) | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_27259() { testInvalid("((int | int) | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_27260() { testInvalid("((int | int) | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_27261() { testInvalid("((int | int) | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_27262() { testInvalid("((int | int) | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_27263() { testInvalid("((int | int) | {int, int})","({any} | (int & any))"); }
		@Test public void test_27264() { testInvalid("((int & any) | {int, int})","{int}"); }
		@Test public void test_27265() { testInvalid("((int & any) | {int, int})","{any, any}"); }
		@Test public void test_27266() { testValid("((int & any) | {int, int})","{int, int}"); }
		@Test public void test_27267() { testInvalid("((int & any) | {int, int})","(any | int)"); }
		@Test public void test_27268() { testValid("((int & any) | {int, int})","(int & any)"); }
		@Test public void test_27269() { testInvalid("((int & any) | {int, int})","{{any}}"); }
		@Test public void test_27270() { testInvalid("((int & any) | {int, int})","{{int, any}}"); }
		@Test public void test_27271() { testInvalid("((int & any) | {int, int})","{{int, int}}"); }
		@Test public void test_27272() { testInvalid("((int & any) | {int, int})","{(any | int)}"); }
		@Test public void test_27273() { testInvalid("((int & any) | {int, int})","!{int, any}"); }
		@Test public void test_27274() { testInvalid("((int & any) | {int, int})","!{int, int}"); }
		@Test public void test_27275() { testValid("((int & any) | {int, int})","!(any | any)"); }
		@Test public void test_27276() { testValid("((int & any) | {int, int})","!(any & any)"); }
		@Test public void test_27277() { testInvalid("((int & any) | {int, int})","!(int & int)"); }
		@Test public void test_27278() { testInvalid("((int & any) | {int, int})","{{int}, {any}}"); }
		@Test public void test_27279() { testInvalid("((int & any) | {int, int})","{!int, {any}}"); }
		@Test public void test_27280() { testInvalid("((int & any) | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_27281() { testInvalid("((int & any) | {int, int})","{(any | int), {any}}"); }
		@Test public void test_27282() { testInvalid("((int & any) | {int, int})","{!int, {int}}"); }
		@Test public void test_27283() { testInvalid("((int & any) | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_27284() { testInvalid("((int & any) | {int, int})","{(any | any), {int}}"); }
		@Test public void test_27285() { testInvalid("((int & any) | {int, int})","{(any & any), {int}}"); }
		@Test public void test_27286() { testInvalid("((int & any) | {int, int})","{(any & int), {int}}"); }
		@Test public void test_27287() { testInvalid("((int & any) | {int, int})","{{any, any}, !int}"); }
		@Test public void test_27288() { testInvalid("((int & any) | {int, int})","{{any, int}, !int}"); }
		@Test public void test_27289() { testInvalid("((int & any) | {int, int})","{(any | any), !int}"); }
		@Test public void test_27290() { testInvalid("((int & any) | {int, int})","{(int | any), !int}"); }
		@Test public void test_27291() { testInvalid("((int & any) | {int, int})","{(any & any), !int}"); }
		@Test public void test_27292() { testInvalid("((int & any) | {int, int})","{(int & any), !int}"); }
		@Test public void test_27293() { testInvalid("((int & any) | {int, int})","{(int & int), !int}"); }
		@Test public void test_27294() { testInvalid("((int & any) | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_27295() { testInvalid("((int & any) | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_27296() { testInvalid("((int & any) | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_27297() { testInvalid("((int & any) | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_27298() { testInvalid("((int & any) | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_27299() { testInvalid("((int & any) | {int, int})","{!int, {int, any}}"); }
		@Test public void test_27300() { testInvalid("((int & any) | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_27301() { testInvalid("((int & any) | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_27302() { testInvalid("((int & any) | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_27303() { testInvalid("((int & any) | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_27304() { testInvalid("((int & any) | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_27305() { testInvalid("((int & any) | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_27306() { testInvalid("((int & any) | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_27307() { testInvalid("((int & any) | {int, int})","{!int, {int, int}}"); }
		@Test public void test_27308() { testInvalid("((int & any) | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_27309() { testInvalid("((int & any) | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_27310() { testInvalid("((int & any) | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_27311() { testInvalid("((int & any) | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_27312() { testInvalid("((int & any) | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_27313() { testInvalid("((int & any) | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_27314() { testInvalid("((int & any) | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_27315() { testInvalid("((int & any) | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_27316() { testInvalid("((int & any) | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_27317() { testInvalid("((int & any) | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_27318() { testInvalid("((int & any) | {int, int})","{!int, (int | any)}"); }
		@Test public void test_27319() { testInvalid("((int & any) | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_27320() { testInvalid("((int & any) | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_27321() { testInvalid("((int & any) | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_27322() { testInvalid("((int & any) | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_27323() { testInvalid("((int & any) | {int, int})","{!int, (any | int)}"); }
		@Test public void test_27324() { testInvalid("((int & any) | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_27325() { testInvalid("((int & any) | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_27326() { testInvalid("((int & any) | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_27327() { testInvalid("((int & any) | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_27328() { testInvalid("((int & any) | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_27329() { testInvalid("((int & any) | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_27330() { testInvalid("((int & any) | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_27331() { testInvalid("((int & any) | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_27332() { testInvalid("((int & any) | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_27333() { testInvalid("((int & any) | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_27334() { testInvalid("((int & any) | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_27335() { testInvalid("((int & any) | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_27336() { testInvalid("((int & any) | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_27337() { testInvalid("((int & any) | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_27338() { testInvalid("((int & any) | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_27339() { testInvalid("((int & any) | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_27340() { testInvalid("((int & any) | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_27341() { testInvalid("((int & any) | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_27342() { testValid("((int & any) | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_27343() { testValid("((int & any) | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_27344() { testInvalid("((int & any) | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_27345() { testInvalid("((int & any) | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_27346() { testInvalid("((int & any) | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_27347() { testValid("((int & any) | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_27348() { testInvalid("((int & any) | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_27349() { testValid("((int & any) | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_27350() { testValid("((int & any) | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_27351() { testInvalid("((int & any) | {int, int})","(!int | {any})"); }
		@Test public void test_27352() { testInvalid("((int & any) | {int, int})","({any, any} | {any})"); }
		@Test public void test_27353() { testInvalid("((int & any) | {int, int})","((any | any) | {any})"); }
		@Test public void test_27354() { testInvalid("((int & any) | {int, int})","((int | any) | {any})"); }
		@Test public void test_27355() { testInvalid("((int & any) | {int, int})","((any & any) | {any})"); }
		@Test public void test_27356() { testInvalid("((int & any) | {int, int})","((int & any) | {any})"); }
		@Test public void test_27357() { testInvalid("((int & any) | {int, int})","((any & int) | {any})"); }
		@Test public void test_27358() { testInvalid("((int & any) | {int, int})","({int} | {int})"); }
		@Test public void test_27359() { testInvalid("((int & any) | {int, int})","(!any | {int})"); }
		@Test public void test_27360() { testInvalid("((int & any) | {int, int})","(!int | {int})"); }
		@Test public void test_27361() { testInvalid("((int & any) | {int, int})","({any, int} | {int})"); }
		@Test public void test_27362() { testInvalid("((int & any) | {int, int})","((int & any) | {int})"); }
		@Test public void test_27363() { testInvalid("((int & any) | {int, int})","((any & int) | {int})"); }
		@Test public void test_27364() { testInvalid("((int & any) | {int, int})","((int & int) | {int})"); }
		@Test public void test_27365() { testInvalid("((int & any) | {int, int})","({any} | !any)"); }
		@Test public void test_27366() { testInvalid("((int & any) | {int, int})","({int} | !any)"); }
		@Test public void test_27367() { testInvalid("((int & any) | {int, int})","({any, any} | !any)"); }
		@Test public void test_27368() { testValid("((int & any) | {int, int})","({int, int} | !any)"); }
		@Test public void test_27369() { testInvalid("((int & any) | {int, int})","((any | any) | !any)"); }
		@Test public void test_27370() { testInvalid("((int & any) | {int, int})","((int | any) | !any)"); }
		@Test public void test_27371() { testValid("((int & any) | {int, int})","((int | int) | !any)"); }
		@Test public void test_27372() { testValid("((int & any) | {int, int})","((int & int) | !any)"); }
		@Test public void test_27373() { testInvalid("((int & any) | {int, int})","(!int | !int)"); }
		@Test public void test_27374() { testInvalid("((int & any) | {int, int})","({any, any} | !int)"); }
		@Test public void test_27375() { testInvalid("((int & any) | {int, int})","({int, int} | !int)"); }
		@Test public void test_27376() { testInvalid("((int & any) | {int, int})","((int | any) | !int)"); }
		@Test public void test_27377() { testInvalid("((int & any) | {int, int})","((any | int) | !int)"); }
		@Test public void test_27378() { testInvalid("((int & any) | {int, int})","((any & int) | !int)"); }
		@Test public void test_27379() { testInvalid("((int & any) | {int, int})","((int & int) | !int)"); }
		@Test public void test_27380() { testInvalid("((int & any) | {int, int})","({int} | {any, any})"); }
		@Test public void test_27381() { testInvalid("((int & any) | {int, int})","(!any | {any, any})"); }
		@Test public void test_27382() { testInvalid("((int & any) | {int, int})","(!int | {any, any})"); }
		@Test public void test_27383() { testInvalid("((int & any) | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_27384() { testInvalid("((int & any) | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_27385() { testInvalid("((int & any) | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_27386() { testInvalid("((int & any) | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_27387() { testInvalid("((int & any) | {int, int})","(!int | {int, any})"); }
		@Test public void test_27388() { testInvalid("((int & any) | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_27389() { testInvalid("((int & any) | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_27390() { testInvalid("((int & any) | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_27391() { testInvalid("((int & any) | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_27392() { testInvalid("((int & any) | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_27393() { testInvalid("((int & any) | {int, int})","({any} | {any, int})"); }
		@Test public void test_27394() { testInvalid("((int & any) | {int, int})","(!int | {any, int})"); }
		@Test public void test_27395() { testInvalid("((int & any) | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_27396() { testInvalid("((int & any) | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_27397() { testInvalid("((int & any) | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_27398() { testInvalid("((int & any) | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_27399() { testInvalid("((int & any) | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_27400() { testValid("((int & any) | {int, int})","(!any | {int, int})"); }
		@Test public void test_27401() { testInvalid("((int & any) | {int, int})","(!int | {int, int})"); }
		@Test public void test_27402() { testInvalid("((int & any) | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_27403() { testInvalid("((int & any) | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_27404() { testInvalid("((int & any) | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_27405() { testValid("((int & any) | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_27406() { testValid("((int & any) | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_27407() { testValid("((int & any) | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_27408() { testValid("((int & any) | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_27409() { testInvalid("((int & any) | {int, int})","({any} | (any | any))"); }
		@Test public void test_27410() { testInvalid("((int & any) | {int, int})","(!any | (any | any))"); }
		@Test public void test_27411() { testInvalid("((int & any) | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_27412() { testInvalid("((int & any) | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_27413() { testInvalid("((int & any) | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_27414() { testInvalid("((int & any) | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_27415() { testInvalid("((int & any) | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_27416() { testInvalid("((int & any) | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_27417() { testInvalid("((int & any) | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_27418() { testInvalid("((int & any) | {int, int})","({any} | (int | any))"); }
		@Test public void test_27419() { testInvalid("((int & any) | {int, int})","(!int | (int | any))"); }
		@Test public void test_27420() { testInvalid("((int & any) | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_27421() { testInvalid("((int & any) | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_27422() { testInvalid("((int & any) | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_27423() { testInvalid("((int & any) | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_27424() { testInvalid("((int & any) | {int, int})","({any} | (any | int))"); }
		@Test public void test_27425() { testInvalid("((int & any) | {int, int})","({int} | (any | int))"); }
		@Test public void test_27426() { testInvalid("((int & any) | {int, int})","(!any | (any | int))"); }
		@Test public void test_27427() { testInvalid("((int & any) | {int, int})","(!int | (any | int))"); }
		@Test public void test_27428() { testInvalid("((int & any) | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_27429() { testInvalid("((int & any) | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_27430() { testInvalid("((int & any) | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_27431() { testInvalid("((int & any) | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_27432() { testInvalid("((int & any) | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_27433() { testInvalid("((int & any) | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_27434() { testInvalid("((int & any) | {int, int})","({int} | (int | int))"); }
		@Test public void test_27435() { testValid("((int & any) | {int, int})","(!any | (int | int))"); }
		@Test public void test_27436() { testInvalid("((int & any) | {int, int})","(!int | (int | int))"); }
		@Test public void test_27437() { testInvalid("((int & any) | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_27438() { testInvalid("((int & any) | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_27439() { testInvalid("((int & any) | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_27440() { testValid("((int & any) | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_27441() { testInvalid("((int & any) | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_27442() { testValid("((int & any) | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_27443() { testValid("((int & any) | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_27444() { testInvalid("((int & any) | {int, int})","(!any | (any & any))"); }
		@Test public void test_27445() { testInvalid("((int & any) | {int, int})","(!int | (any & any))"); }
		@Test public void test_27446() { testInvalid("((int & any) | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_27447() { testInvalid("((int & any) | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_27448() { testInvalid("((int & any) | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_27449() { testInvalid("((int & any) | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_27450() { testInvalid("((int & any) | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_27451() { testInvalid("((int & any) | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_27452() { testInvalid("((int & any) | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_27453() { testInvalid("((int & any) | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_27454() { testInvalid("((int & any) | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_27455() { testInvalid("((int & any) | {int, int})","({any} | (int & any))"); }
		@Test public void test_27456() { testInvalid("((any & int) | {int, int})","{int}"); }
		@Test public void test_27457() { testInvalid("((any & int) | {int, int})","{any, any}"); }
		@Test public void test_27458() { testValid("((any & int) | {int, int})","{int, int}"); }
		@Test public void test_27459() { testInvalid("((any & int) | {int, int})","(any | int)"); }
		@Test public void test_27460() { testValid("((any & int) | {int, int})","(int & any)"); }
		@Test public void test_27461() { testInvalid("((any & int) | {int, int})","{{any}}"); }
		@Test public void test_27462() { testInvalid("((any & int) | {int, int})","{{int, any}}"); }
		@Test public void test_27463() { testInvalid("((any & int) | {int, int})","{{int, int}}"); }
		@Test public void test_27464() { testInvalid("((any & int) | {int, int})","{(any | int)}"); }
		@Test public void test_27465() { testInvalid("((any & int) | {int, int})","!{int, any}"); }
		@Test public void test_27466() { testInvalid("((any & int) | {int, int})","!{int, int}"); }
		@Test public void test_27467() { testValid("((any & int) | {int, int})","!(any | any)"); }
		@Test public void test_27468() { testValid("((any & int) | {int, int})","!(any & any)"); }
		@Test public void test_27469() { testInvalid("((any & int) | {int, int})","!(int & int)"); }
		@Test public void test_27470() { testInvalid("((any & int) | {int, int})","{{int}, {any}}"); }
		@Test public void test_27471() { testInvalid("((any & int) | {int, int})","{!int, {any}}"); }
		@Test public void test_27472() { testInvalid("((any & int) | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_27473() { testInvalid("((any & int) | {int, int})","{(any | int), {any}}"); }
		@Test public void test_27474() { testInvalid("((any & int) | {int, int})","{!int, {int}}"); }
		@Test public void test_27475() { testInvalid("((any & int) | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_27476() { testInvalid("((any & int) | {int, int})","{(any | any), {int}}"); }
		@Test public void test_27477() { testInvalid("((any & int) | {int, int})","{(any & any), {int}}"); }
		@Test public void test_27478() { testInvalid("((any & int) | {int, int})","{(any & int), {int}}"); }
		@Test public void test_27479() { testInvalid("((any & int) | {int, int})","{{any, any}, !int}"); }
		@Test public void test_27480() { testInvalid("((any & int) | {int, int})","{{any, int}, !int}"); }
		@Test public void test_27481() { testInvalid("((any & int) | {int, int})","{(any | any), !int}"); }
		@Test public void test_27482() { testInvalid("((any & int) | {int, int})","{(int | any), !int}"); }
		@Test public void test_27483() { testInvalid("((any & int) | {int, int})","{(any & any), !int}"); }
		@Test public void test_27484() { testInvalid("((any & int) | {int, int})","{(int & any), !int}"); }
		@Test public void test_27485() { testInvalid("((any & int) | {int, int})","{(int & int), !int}"); }
		@Test public void test_27486() { testInvalid("((any & int) | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_27487() { testInvalid("((any & int) | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_27488() { testInvalid("((any & int) | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_27489() { testInvalid("((any & int) | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_27490() { testInvalid("((any & int) | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_27491() { testInvalid("((any & int) | {int, int})","{!int, {int, any}}"); }
		@Test public void test_27492() { testInvalid("((any & int) | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_27493() { testInvalid("((any & int) | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_27494() { testInvalid("((any & int) | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_27495() { testInvalid("((any & int) | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_27496() { testInvalid("((any & int) | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_27497() { testInvalid("((any & int) | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_27498() { testInvalid("((any & int) | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_27499() { testInvalid("((any & int) | {int, int})","{!int, {int, int}}"); }
		@Test public void test_27500() { testInvalid("((any & int) | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_27501() { testInvalid("((any & int) | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_27502() { testInvalid("((any & int) | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_27503() { testInvalid("((any & int) | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_27504() { testInvalid("((any & int) | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_27505() { testInvalid("((any & int) | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_27506() { testInvalid("((any & int) | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_27507() { testInvalid("((any & int) | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_27508() { testInvalid("((any & int) | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_27509() { testInvalid("((any & int) | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_27510() { testInvalid("((any & int) | {int, int})","{!int, (int | any)}"); }
		@Test public void test_27511() { testInvalid("((any & int) | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_27512() { testInvalid("((any & int) | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_27513() { testInvalid("((any & int) | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_27514() { testInvalid("((any & int) | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_27515() { testInvalid("((any & int) | {int, int})","{!int, (any | int)}"); }
		@Test public void test_27516() { testInvalid("((any & int) | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_27517() { testInvalid("((any & int) | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_27518() { testInvalid("((any & int) | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_27519() { testInvalid("((any & int) | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_27520() { testInvalid("((any & int) | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_27521() { testInvalid("((any & int) | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_27522() { testInvalid("((any & int) | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_27523() { testInvalid("((any & int) | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_27524() { testInvalid("((any & int) | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_27525() { testInvalid("((any & int) | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_27526() { testInvalid("((any & int) | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_27527() { testInvalid("((any & int) | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_27528() { testInvalid("((any & int) | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_27529() { testInvalid("((any & int) | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_27530() { testInvalid("((any & int) | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_27531() { testInvalid("((any & int) | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_27532() { testInvalid("((any & int) | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_27533() { testInvalid("((any & int) | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_27534() { testValid("((any & int) | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_27535() { testValid("((any & int) | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_27536() { testInvalid("((any & int) | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_27537() { testInvalid("((any & int) | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_27538() { testInvalid("((any & int) | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_27539() { testValid("((any & int) | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_27540() { testInvalid("((any & int) | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_27541() { testValid("((any & int) | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_27542() { testValid("((any & int) | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_27543() { testInvalid("((any & int) | {int, int})","(!int | {any})"); }
		@Test public void test_27544() { testInvalid("((any & int) | {int, int})","({any, any} | {any})"); }
		@Test public void test_27545() { testInvalid("((any & int) | {int, int})","((any | any) | {any})"); }
		@Test public void test_27546() { testInvalid("((any & int) | {int, int})","((int | any) | {any})"); }
		@Test public void test_27547() { testInvalid("((any & int) | {int, int})","((any & any) | {any})"); }
		@Test public void test_27548() { testInvalid("((any & int) | {int, int})","((int & any) | {any})"); }
		@Test public void test_27549() { testInvalid("((any & int) | {int, int})","((any & int) | {any})"); }
		@Test public void test_27550() { testInvalid("((any & int) | {int, int})","({int} | {int})"); }
		@Test public void test_27551() { testInvalid("((any & int) | {int, int})","(!any | {int})"); }
		@Test public void test_27552() { testInvalid("((any & int) | {int, int})","(!int | {int})"); }
		@Test public void test_27553() { testInvalid("((any & int) | {int, int})","({any, int} | {int})"); }
		@Test public void test_27554() { testInvalid("((any & int) | {int, int})","((int & any) | {int})"); }
		@Test public void test_27555() { testInvalid("((any & int) | {int, int})","((any & int) | {int})"); }
		@Test public void test_27556() { testInvalid("((any & int) | {int, int})","((int & int) | {int})"); }
		@Test public void test_27557() { testInvalid("((any & int) | {int, int})","({any} | !any)"); }
		@Test public void test_27558() { testInvalid("((any & int) | {int, int})","({int} | !any)"); }
		@Test public void test_27559() { testInvalid("((any & int) | {int, int})","({any, any} | !any)"); }
		@Test public void test_27560() { testValid("((any & int) | {int, int})","({int, int} | !any)"); }
		@Test public void test_27561() { testInvalid("((any & int) | {int, int})","((any | any) | !any)"); }
		@Test public void test_27562() { testInvalid("((any & int) | {int, int})","((int | any) | !any)"); }
		@Test public void test_27563() { testValid("((any & int) | {int, int})","((int | int) | !any)"); }
		@Test public void test_27564() { testValid("((any & int) | {int, int})","((int & int) | !any)"); }
		@Test public void test_27565() { testInvalid("((any & int) | {int, int})","(!int | !int)"); }
		@Test public void test_27566() { testInvalid("((any & int) | {int, int})","({any, any} | !int)"); }
		@Test public void test_27567() { testInvalid("((any & int) | {int, int})","({int, int} | !int)"); }
		@Test public void test_27568() { testInvalid("((any & int) | {int, int})","((int | any) | !int)"); }
		@Test public void test_27569() { testInvalid("((any & int) | {int, int})","((any | int) | !int)"); }
		@Test public void test_27570() { testInvalid("((any & int) | {int, int})","((any & int) | !int)"); }
		@Test public void test_27571() { testInvalid("((any & int) | {int, int})","((int & int) | !int)"); }
		@Test public void test_27572() { testInvalid("((any & int) | {int, int})","({int} | {any, any})"); }
		@Test public void test_27573() { testInvalid("((any & int) | {int, int})","(!any | {any, any})"); }
		@Test public void test_27574() { testInvalid("((any & int) | {int, int})","(!int | {any, any})"); }
		@Test public void test_27575() { testInvalid("((any & int) | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_27576() { testInvalid("((any & int) | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_27577() { testInvalid("((any & int) | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_27578() { testInvalid("((any & int) | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_27579() { testInvalid("((any & int) | {int, int})","(!int | {int, any})"); }
		@Test public void test_27580() { testInvalid("((any & int) | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_27581() { testInvalid("((any & int) | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_27582() { testInvalid("((any & int) | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_27583() { testInvalid("((any & int) | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_27584() { testInvalid("((any & int) | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_27585() { testInvalid("((any & int) | {int, int})","({any} | {any, int})"); }
		@Test public void test_27586() { testInvalid("((any & int) | {int, int})","(!int | {any, int})"); }
		@Test public void test_27587() { testInvalid("((any & int) | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_27588() { testInvalid("((any & int) | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_27589() { testInvalid("((any & int) | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_27590() { testInvalid("((any & int) | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_27591() { testInvalid("((any & int) | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_27592() { testValid("((any & int) | {int, int})","(!any | {int, int})"); }
		@Test public void test_27593() { testInvalid("((any & int) | {int, int})","(!int | {int, int})"); }
		@Test public void test_27594() { testInvalid("((any & int) | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_27595() { testInvalid("((any & int) | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_27596() { testInvalid("((any & int) | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_27597() { testValid("((any & int) | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_27598() { testValid("((any & int) | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_27599() { testValid("((any & int) | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_27600() { testValid("((any & int) | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_27601() { testInvalid("((any & int) | {int, int})","({any} | (any | any))"); }
		@Test public void test_27602() { testInvalid("((any & int) | {int, int})","(!any | (any | any))"); }
		@Test public void test_27603() { testInvalid("((any & int) | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_27604() { testInvalid("((any & int) | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_27605() { testInvalid("((any & int) | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_27606() { testInvalid("((any & int) | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_27607() { testInvalid("((any & int) | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_27608() { testInvalid("((any & int) | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_27609() { testInvalid("((any & int) | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_27610() { testInvalid("((any & int) | {int, int})","({any} | (int | any))"); }
		@Test public void test_27611() { testInvalid("((any & int) | {int, int})","(!int | (int | any))"); }
		@Test public void test_27612() { testInvalid("((any & int) | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_27613() { testInvalid("((any & int) | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_27614() { testInvalid("((any & int) | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_27615() { testInvalid("((any & int) | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_27616() { testInvalid("((any & int) | {int, int})","({any} | (any | int))"); }
		@Test public void test_27617() { testInvalid("((any & int) | {int, int})","({int} | (any | int))"); }
		@Test public void test_27618() { testInvalid("((any & int) | {int, int})","(!any | (any | int))"); }
		@Test public void test_27619() { testInvalid("((any & int) | {int, int})","(!int | (any | int))"); }
		@Test public void test_27620() { testInvalid("((any & int) | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_27621() { testInvalid("((any & int) | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_27622() { testInvalid("((any & int) | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_27623() { testInvalid("((any & int) | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_27624() { testInvalid("((any & int) | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_27625() { testInvalid("((any & int) | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_27626() { testInvalid("((any & int) | {int, int})","({int} | (int | int))"); }
		@Test public void test_27627() { testValid("((any & int) | {int, int})","(!any | (int | int))"); }
		@Test public void test_27628() { testInvalid("((any & int) | {int, int})","(!int | (int | int))"); }
		@Test public void test_27629() { testInvalid("((any & int) | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_27630() { testInvalid("((any & int) | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_27631() { testInvalid("((any & int) | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_27632() { testValid("((any & int) | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_27633() { testInvalid("((any & int) | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_27634() { testValid("((any & int) | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_27635() { testValid("((any & int) | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_27636() { testInvalid("((any & int) | {int, int})","(!any | (any & any))"); }
		@Test public void test_27637() { testInvalid("((any & int) | {int, int})","(!int | (any & any))"); }
		@Test public void test_27638() { testInvalid("((any & int) | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_27639() { testInvalid("((any & int) | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_27640() { testInvalid("((any & int) | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_27641() { testInvalid("((any & int) | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_27642() { testInvalid("((any & int) | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_27643() { testInvalid("((any & int) | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_27644() { testInvalid("((any & int) | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_27645() { testInvalid("((any & int) | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_27646() { testInvalid("((any & int) | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_27647() { testInvalid("((any & int) | {int, int})","({any} | (int & any))"); }
		@Test public void test_27648() { testInvalid("((int & int) | {int, int})","{int}"); }
		@Test public void test_27649() { testInvalid("((int & int) | {int, int})","{any, any}"); }
		@Test public void test_27650() { testValid("((int & int) | {int, int})","{int, int}"); }
		@Test public void test_27651() { testInvalid("((int & int) | {int, int})","(any | int)"); }
		@Test public void test_27652() { testValid("((int & int) | {int, int})","(int & any)"); }
		@Test public void test_27653() { testInvalid("((int & int) | {int, int})","{{any}}"); }
		@Test public void test_27654() { testInvalid("((int & int) | {int, int})","{{int, any}}"); }
		@Test public void test_27655() { testInvalid("((int & int) | {int, int})","{{int, int}}"); }
		@Test public void test_27656() { testInvalid("((int & int) | {int, int})","{(any | int)}"); }
		@Test public void test_27657() { testInvalid("((int & int) | {int, int})","!{int, any}"); }
		@Test public void test_27658() { testInvalid("((int & int) | {int, int})","!{int, int}"); }
		@Test public void test_27659() { testValid("((int & int) | {int, int})","!(any | any)"); }
		@Test public void test_27660() { testValid("((int & int) | {int, int})","!(any & any)"); }
		@Test public void test_27661() { testInvalid("((int & int) | {int, int})","!(int & int)"); }
		@Test public void test_27662() { testInvalid("((int & int) | {int, int})","{{int}, {any}}"); }
		@Test public void test_27663() { testInvalid("((int & int) | {int, int})","{!int, {any}}"); }
		@Test public void test_27664() { testInvalid("((int & int) | {int, int})","{{int, int}, {any}}"); }
		@Test public void test_27665() { testInvalid("((int & int) | {int, int})","{(any | int), {any}}"); }
		@Test public void test_27666() { testInvalid("((int & int) | {int, int})","{!int, {int}}"); }
		@Test public void test_27667() { testInvalid("((int & int) | {int, int})","{{any, any}, {int}}"); }
		@Test public void test_27668() { testInvalid("((int & int) | {int, int})","{(any | any), {int}}"); }
		@Test public void test_27669() { testInvalid("((int & int) | {int, int})","{(any & any), {int}}"); }
		@Test public void test_27670() { testInvalid("((int & int) | {int, int})","{(any & int), {int}}"); }
		@Test public void test_27671() { testInvalid("((int & int) | {int, int})","{{any, any}, !int}"); }
		@Test public void test_27672() { testInvalid("((int & int) | {int, int})","{{any, int}, !int}"); }
		@Test public void test_27673() { testInvalid("((int & int) | {int, int})","{(any | any), !int}"); }
		@Test public void test_27674() { testInvalid("((int & int) | {int, int})","{(int | any), !int}"); }
		@Test public void test_27675() { testInvalid("((int & int) | {int, int})","{(any & any), !int}"); }
		@Test public void test_27676() { testInvalid("((int & int) | {int, int})","{(int & any), !int}"); }
		@Test public void test_27677() { testInvalid("((int & int) | {int, int})","{(int & int), !int}"); }
		@Test public void test_27678() { testInvalid("((int & int) | {int, int})","{{any}, {any, any}}"); }
		@Test public void test_27679() { testInvalid("((int & int) | {int, int})","{{int}, {any, any}}"); }
		@Test public void test_27680() { testInvalid("((int & int) | {int, int})","{{int, int}, {any, any}}"); }
		@Test public void test_27681() { testInvalid("((int & int) | {int, int})","{(any | any), {any, any}}"); }
		@Test public void test_27682() { testInvalid("((int & int) | {int, int})","{(any | int), {any, any}}"); }
		@Test public void test_27683() { testInvalid("((int & int) | {int, int})","{!int, {int, any}}"); }
		@Test public void test_27684() { testInvalid("((int & int) | {int, int})","{{int, any}, {int, any}}"); }
		@Test public void test_27685() { testInvalid("((int & int) | {int, int})","{{any, int}, {int, any}}"); }
		@Test public void test_27686() { testInvalid("((int & int) | {int, int})","{(any & int), {int, any}}"); }
		@Test public void test_27687() { testInvalid("((int & int) | {int, int})","{{any}, {any, int}}"); }
		@Test public void test_27688() { testInvalid("((int & int) | {int, int})","{{int, int}, {any, int}}"); }
		@Test public void test_27689() { testInvalid("((int & int) | {int, int})","{(int | int), {any, int}}"); }
		@Test public void test_27690() { testInvalid("((int & int) | {int, int})","{(any & int), {any, int}}"); }
		@Test public void test_27691() { testInvalid("((int & int) | {int, int})","{!int, {int, int}}"); }
		@Test public void test_27692() { testInvalid("((int & int) | {int, int})","{{int, int}, {int, int}}"); }
		@Test public void test_27693() { testInvalid("((int & int) | {int, int})","{(any | any), {int, int}}"); }
		@Test public void test_27694() { testInvalid("((int & int) | {int, int})","{(int | any), {int, int}}"); }
		@Test public void test_27695() { testInvalid("((int & int) | {int, int})","{(int & any), {int, int}}"); }
		@Test public void test_27696() { testInvalid("((int & int) | {int, int})","{{int}, (any | any)}"); }
		@Test public void test_27697() { testInvalid("((int & int) | {int, int})","{{int, any}, (any | any)}"); }
		@Test public void test_27698() { testInvalid("((int & int) | {int, int})","{{any, int}, (any | any)}"); }
		@Test public void test_27699() { testInvalid("((int & int) | {int, int})","{(any | any), (any | any)}"); }
		@Test public void test_27700() { testInvalid("((int & int) | {int, int})","{(int | any), (any | any)}"); }
		@Test public void test_27701() { testInvalid("((int & int) | {int, int})","{(int & int), (any | any)}"); }
		@Test public void test_27702() { testInvalid("((int & int) | {int, int})","{!int, (int | any)}"); }
		@Test public void test_27703() { testInvalid("((int & int) | {int, int})","{{int, int}, (int | any)}"); }
		@Test public void test_27704() { testInvalid("((int & int) | {int, int})","{(any | any), (int | any)}"); }
		@Test public void test_27705() { testInvalid("((int & int) | {int, int})","{(int | int), (int | any)}"); }
		@Test public void test_27706() { testInvalid("((int & int) | {int, int})","{{any}, (any | int)}"); }
		@Test public void test_27707() { testInvalid("((int & int) | {int, int})","{!int, (any | int)}"); }
		@Test public void test_27708() { testInvalid("((int & int) | {int, int})","{(any | any), (any | int)}"); }
		@Test public void test_27709() { testInvalid("((int & int) | {int, int})","{(any | int), (any | int)}"); }
		@Test public void test_27710() { testInvalid("((int & int) | {int, int})","{(any & int), (any | int)}"); }
		@Test public void test_27711() { testInvalid("((int & int) | {int, int})","{{int}, (int | int)}"); }
		@Test public void test_27712() { testInvalid("((int & int) | {int, int})","{{any, any}, (int | int)}"); }
		@Test public void test_27713() { testInvalid("((int & int) | {int, int})","{{int, int}, (int | int)}"); }
		@Test public void test_27714() { testInvalid("((int & int) | {int, int})","{{int}, (any & any)}"); }
		@Test public void test_27715() { testInvalid("((int & int) | {int, int})","{{int, any}, (any & any)}"); }
		@Test public void test_27716() { testInvalid("((int & int) | {int, int})","{{any, int}, (any & any)}"); }
		@Test public void test_27717() { testInvalid("((int & int) | {int, int})","{(int | any), (any & any)}"); }
		@Test public void test_27718() { testInvalid("((int & int) | {int, int})","{(any & any), (any & any)}"); }
		@Test public void test_27719() { testInvalid("((int & int) | {int, int})","{(int & any), (any & any)}"); }
		@Test public void test_27720() { testInvalid("((int & int) | {int, int})","{{any}, (int & any)}"); }
		@Test public void test_27721() { testInvalid("((int & int) | {int, int})","{{int}, (int & any)}"); }
		@Test public void test_27722() { testInvalid("((int & int) | {int, int})","{{any, any}, (int & any)}"); }
		@Test public void test_27723() { testInvalid("((int & int) | {int, int})","{{int, any}, (int & any)}"); }
		@Test public void test_27724() { testInvalid("((int & int) | {int, int})","{(any | int), (int & any)}"); }
		@Test public void test_27725() { testInvalid("((int & int) | {int, int})","{(any & any), (int & any)}"); }
		@Test public void test_27726() { testValid("((int & int) | {int, int})","{(int & any), (int & any)}"); }
		@Test public void test_27727() { testValid("((int & int) | {int, int})","{(int & int), (int & any)}"); }
		@Test public void test_27728() { testInvalid("((int & int) | {int, int})","{{int, any}, (any & int)}"); }
		@Test public void test_27729() { testInvalid("((int & int) | {int, int})","{(any & any), (any & int)}"); }
		@Test public void test_27730() { testInvalid("((int & int) | {int, int})","{{any, int}, (int & int)}"); }
		@Test public void test_27731() { testValid("((int & int) | {int, int})","{(int | int), (int & int)}"); }
		@Test public void test_27732() { testInvalid("((int & int) | {int, int})","{(any & any), (int & int)}"); }
		@Test public void test_27733() { testValid("((int & int) | {int, int})","{(any & int), (int & int)}"); }
		@Test public void test_27734() { testValid("((int & int) | {int, int})","{(int & int), (int & int)}"); }
		@Test public void test_27735() { testInvalid("((int & int) | {int, int})","(!int | {any})"); }
		@Test public void test_27736() { testInvalid("((int & int) | {int, int})","({any, any} | {any})"); }
		@Test public void test_27737() { testInvalid("((int & int) | {int, int})","((any | any) | {any})"); }
		@Test public void test_27738() { testInvalid("((int & int) | {int, int})","((int | any) | {any})"); }
		@Test public void test_27739() { testInvalid("((int & int) | {int, int})","((any & any) | {any})"); }
		@Test public void test_27740() { testInvalid("((int & int) | {int, int})","((int & any) | {any})"); }
		@Test public void test_27741() { testInvalid("((int & int) | {int, int})","((any & int) | {any})"); }
		@Test public void test_27742() { testInvalid("((int & int) | {int, int})","({int} | {int})"); }
		@Test public void test_27743() { testInvalid("((int & int) | {int, int})","(!any | {int})"); }
		@Test public void test_27744() { testInvalid("((int & int) | {int, int})","(!int | {int})"); }
		@Test public void test_27745() { testInvalid("((int & int) | {int, int})","({any, int} | {int})"); }
		@Test public void test_27746() { testInvalid("((int & int) | {int, int})","((int & any) | {int})"); }
		@Test public void test_27747() { testInvalid("((int & int) | {int, int})","((any & int) | {int})"); }
		@Test public void test_27748() { testInvalid("((int & int) | {int, int})","((int & int) | {int})"); }
		@Test public void test_27749() { testInvalid("((int & int) | {int, int})","({any} | !any)"); }
		@Test public void test_27750() { testInvalid("((int & int) | {int, int})","({int} | !any)"); }
		@Test public void test_27751() { testInvalid("((int & int) | {int, int})","({any, any} | !any)"); }
		@Test public void test_27752() { testValid("((int & int) | {int, int})","({int, int} | !any)"); }
		@Test public void test_27753() { testInvalid("((int & int) | {int, int})","((any | any) | !any)"); }
		@Test public void test_27754() { testInvalid("((int & int) | {int, int})","((int | any) | !any)"); }
		@Test public void test_27755() { testValid("((int & int) | {int, int})","((int | int) | !any)"); }
		@Test public void test_27756() { testValid("((int & int) | {int, int})","((int & int) | !any)"); }
		@Test public void test_27757() { testInvalid("((int & int) | {int, int})","(!int | !int)"); }
		@Test public void test_27758() { testInvalid("((int & int) | {int, int})","({any, any} | !int)"); }
		@Test public void test_27759() { testInvalid("((int & int) | {int, int})","({int, int} | !int)"); }
		@Test public void test_27760() { testInvalid("((int & int) | {int, int})","((int | any) | !int)"); }
		@Test public void test_27761() { testInvalid("((int & int) | {int, int})","((any | int) | !int)"); }
		@Test public void test_27762() { testInvalid("((int & int) | {int, int})","((any & int) | !int)"); }
		@Test public void test_27763() { testInvalid("((int & int) | {int, int})","((int & int) | !int)"); }
		@Test public void test_27764() { testInvalid("((int & int) | {int, int})","({int} | {any, any})"); }
		@Test public void test_27765() { testInvalid("((int & int) | {int, int})","(!any | {any, any})"); }
		@Test public void test_27766() { testInvalid("((int & int) | {int, int})","(!int | {any, any})"); }
		@Test public void test_27767() { testInvalid("((int & int) | {int, int})","({any, int} | {any, any})"); }
		@Test public void test_27768() { testInvalid("((int & int) | {int, int})","((int | any) | {any, any})"); }
		@Test public void test_27769() { testInvalid("((int & int) | {int, int})","((any & any) | {any, any})"); }
		@Test public void test_27770() { testInvalid("((int & int) | {int, int})","((any & int) | {any, any})"); }
		@Test public void test_27771() { testInvalid("((int & int) | {int, int})","(!int | {int, any})"); }
		@Test public void test_27772() { testInvalid("((int & int) | {int, int})","({any, int} | {int, any})"); }
		@Test public void test_27773() { testInvalid("((int & int) | {int, int})","((any | any) | {int, any})"); }
		@Test public void test_27774() { testInvalid("((int & int) | {int, int})","((int | any) | {int, any})"); }
		@Test public void test_27775() { testInvalid("((int & int) | {int, int})","((any | int) | {int, any})"); }
		@Test public void test_27776() { testInvalid("((int & int) | {int, int})","((int & any) | {int, any})"); }
		@Test public void test_27777() { testInvalid("((int & int) | {int, int})","({any} | {any, int})"); }
		@Test public void test_27778() { testInvalid("((int & int) | {int, int})","(!int | {any, int})"); }
		@Test public void test_27779() { testInvalid("((int & int) | {int, int})","({any, int} | {any, int})"); }
		@Test public void test_27780() { testInvalid("((int & int) | {int, int})","((any | any) | {any, int})"); }
		@Test public void test_27781() { testInvalid("((int & int) | {int, int})","((any | int) | {any, int})"); }
		@Test public void test_27782() { testInvalid("((int & int) | {int, int})","((int | int) | {any, int})"); }
		@Test public void test_27783() { testInvalid("((int & int) | {int, int})","((int & any) | {any, int})"); }
		@Test public void test_27784() { testValid("((int & int) | {int, int})","(!any | {int, int})"); }
		@Test public void test_27785() { testInvalid("((int & int) | {int, int})","(!int | {int, int})"); }
		@Test public void test_27786() { testInvalid("((int & int) | {int, int})","({any, any} | {int, int})"); }
		@Test public void test_27787() { testInvalid("((int & int) | {int, int})","({any, int} | {int, int})"); }
		@Test public void test_27788() { testInvalid("((int & int) | {int, int})","((any | any) | {int, int})"); }
		@Test public void test_27789() { testValid("((int & int) | {int, int})","((int | int) | {int, int})"); }
		@Test public void test_27790() { testValid("((int & int) | {int, int})","((int & any) | {int, int})"); }
		@Test public void test_27791() { testValid("((int & int) | {int, int})","((any & int) | {int, int})"); }
		@Test public void test_27792() { testValid("((int & int) | {int, int})","((int & int) | {int, int})"); }
		@Test public void test_27793() { testInvalid("((int & int) | {int, int})","({any} | (any | any))"); }
		@Test public void test_27794() { testInvalid("((int & int) | {int, int})","(!any | (any | any))"); }
		@Test public void test_27795() { testInvalid("((int & int) | {int, int})","({any, any} | (any | any))"); }
		@Test public void test_27796() { testInvalid("((int & int) | {int, int})","({any, int} | (any | any))"); }
		@Test public void test_27797() { testInvalid("((int & int) | {int, int})","({int, int} | (any | any))"); }
		@Test public void test_27798() { testInvalid("((int & int) | {int, int})","((int | any) | (any | any))"); }
		@Test public void test_27799() { testInvalid("((int & int) | {int, int})","((any | int) | (any | any))"); }
		@Test public void test_27800() { testInvalid("((int & int) | {int, int})","((any & int) | (any | any))"); }
		@Test public void test_27801() { testInvalid("((int & int) | {int, int})","((int & int) | (any | any))"); }
		@Test public void test_27802() { testInvalid("((int & int) | {int, int})","({any} | (int | any))"); }
		@Test public void test_27803() { testInvalid("((int & int) | {int, int})","(!int | (int | any))"); }
		@Test public void test_27804() { testInvalid("((int & int) | {int, int})","({int, any} | (int | any))"); }
		@Test public void test_27805() { testInvalid("((int & int) | {int, int})","({any, int} | (int | any))"); }
		@Test public void test_27806() { testInvalid("((int & int) | {int, int})","((int & any) | (int | any))"); }
		@Test public void test_27807() { testInvalid("((int & int) | {int, int})","((any & int) | (int | any))"); }
		@Test public void test_27808() { testInvalid("((int & int) | {int, int})","({any} | (any | int))"); }
		@Test public void test_27809() { testInvalid("((int & int) | {int, int})","({int} | (any | int))"); }
		@Test public void test_27810() { testInvalid("((int & int) | {int, int})","(!any | (any | int))"); }
		@Test public void test_27811() { testInvalid("((int & int) | {int, int})","(!int | (any | int))"); }
		@Test public void test_27812() { testInvalid("((int & int) | {int, int})","({any, int} | (any | int))"); }
		@Test public void test_27813() { testInvalid("((int & int) | {int, int})","({int, int} | (any | int))"); }
		@Test public void test_27814() { testInvalid("((int & int) | {int, int})","((int | any) | (any | int))"); }
		@Test public void test_27815() { testInvalid("((int & int) | {int, int})","((any | int) | (any | int))"); }
		@Test public void test_27816() { testInvalid("((int & int) | {int, int})","((int | int) | (any | int))"); }
		@Test public void test_27817() { testInvalid("((int & int) | {int, int})","((any & any) | (any | int))"); }
		@Test public void test_27818() { testInvalid("((int & int) | {int, int})","({int} | (int | int))"); }
		@Test public void test_27819() { testValid("((int & int) | {int, int})","(!any | (int | int))"); }
		@Test public void test_27820() { testInvalid("((int & int) | {int, int})","(!int | (int | int))"); }
		@Test public void test_27821() { testInvalid("((int & int) | {int, int})","({int, any} | (int | int))"); }
		@Test public void test_27822() { testInvalid("((int & int) | {int, int})","({any, int} | (int | int))"); }
		@Test public void test_27823() { testInvalid("((int & int) | {int, int})","((any | int) | (int | int))"); }
		@Test public void test_27824() { testValid("((int & int) | {int, int})","((int | int) | (int | int))"); }
		@Test public void test_27825() { testInvalid("((int & int) | {int, int})","((any & any) | (int | int))"); }
		@Test public void test_27826() { testValid("((int & int) | {int, int})","((int & any) | (int | int))"); }
		@Test public void test_27827() { testValid("((int & int) | {int, int})","((int & int) | (int | int))"); }
		@Test public void test_27828() { testInvalid("((int & int) | {int, int})","(!any | (any & any))"); }
		@Test public void test_27829() { testInvalid("((int & int) | {int, int})","(!int | (any & any))"); }
		@Test public void test_27830() { testInvalid("((int & int) | {int, int})","({any, any} | (any & any))"); }
		@Test public void test_27831() { testInvalid("((int & int) | {int, int})","({int, any} | (any & any))"); }
		@Test public void test_27832() { testInvalid("((int & int) | {int, int})","({any, int} | (any & any))"); }
		@Test public void test_27833() { testInvalid("((int & int) | {int, int})","({int, int} | (any & any))"); }
		@Test public void test_27834() { testInvalid("((int & int) | {int, int})","((int | any) | (any & any))"); }
		@Test public void test_27835() { testInvalid("((int & int) | {int, int})","((int | int) | (any & any))"); }
		@Test public void test_27836() { testInvalid("((int & int) | {int, int})","((int & any) | (any & any))"); }
		@Test public void test_27837() { testInvalid("((int & int) | {int, int})","((any & int) | (any & any))"); }
		@Test public void test_27838() { testInvalid("((int & int) | {int, int})","((int & int) | (any & any))"); }
		@Test public void test_27839() { testInvalid("((int & int) | {int, int})","({any} | (int & any))"); }
		@Test public void test_27840() { testValid("({any} | (any | any))","{int}"); }
		@Test public void test_27841() { testValid("({any} | (any | any))","{any, any}"); }
		@Test public void test_27842() { testValid("({any} | (any | any))","{int, int}"); }
		@Test public void test_27843() { testValid("({any} | (any | any))","(any | int)"); }
		@Test public void test_27844() { testValid("({any} | (any | any))","(int & any)"); }
		@Test public void test_27845() { testValid("({any} | (any | any))","{{any}}"); }
		@Test public void test_27846() { testValid("({any} | (any | any))","{{int, any}}"); }
		@Test public void test_27847() { testValid("({any} | (any | any))","{{int, int}}"); }
		@Test public void test_27848() { testValid("({any} | (any | any))","{(any | int)}"); }
		@Test public void test_27849() { testValid("({any} | (any | any))","!{int, any}"); }
		@Test public void test_27850() { testValid("({any} | (any | any))","!{int, int}"); }
		@Test public void test_27851() { testValid("({any} | (any | any))","!(any | any)"); }
		@Test public void test_27852() { testValid("({any} | (any | any))","!(any & any)"); }
		@Test public void test_27853() { testValid("({any} | (any | any))","!(int & int)"); }
		@Test public void test_27854() { testValid("({any} | (any | any))","{{int}, {any}}"); }
		@Test public void test_27855() { testValid("({any} | (any | any))","{!int, {any}}"); }
		@Test public void test_27856() { testValid("({any} | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_27857() { testValid("({any} | (any | any))","{(any | int), {any}}"); }
		@Test public void test_27858() { testValid("({any} | (any | any))","{!int, {int}}"); }
		@Test public void test_27859() { testValid("({any} | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_27860() { testValid("({any} | (any | any))","{(any | any), {int}}"); }
		@Test public void test_27861() { testValid("({any} | (any | any))","{(any & any), {int}}"); }
		@Test public void test_27862() { testValid("({any} | (any | any))","{(any & int), {int}}"); }
		@Test public void test_27863() { testValid("({any} | (any | any))","{{any, any}, !int}"); }
		@Test public void test_27864() { testValid("({any} | (any | any))","{{any, int}, !int}"); }
		@Test public void test_27865() { testValid("({any} | (any | any))","{(any | any), !int}"); }
		@Test public void test_27866() { testValid("({any} | (any | any))","{(int | any), !int}"); }
		@Test public void test_27867() { testValid("({any} | (any | any))","{(any & any), !int}"); }
		@Test public void test_27868() { testValid("({any} | (any | any))","{(int & any), !int}"); }
		@Test public void test_27869() { testValid("({any} | (any | any))","{(int & int), !int}"); }
		@Test public void test_27870() { testValid("({any} | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_27871() { testValid("({any} | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_27872() { testValid("({any} | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_27873() { testValid("({any} | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_27874() { testValid("({any} | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_27875() { testValid("({any} | (any | any))","{!int, {int, any}}"); }
		@Test public void test_27876() { testValid("({any} | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_27877() { testValid("({any} | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_27878() { testValid("({any} | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_27879() { testValid("({any} | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_27880() { testValid("({any} | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_27881() { testValid("({any} | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_27882() { testValid("({any} | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_27883() { testValid("({any} | (any | any))","{!int, {int, int}}"); }
		@Test public void test_27884() { testValid("({any} | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_27885() { testValid("({any} | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_27886() { testValid("({any} | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_27887() { testValid("({any} | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_27888() { testValid("({any} | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_27889() { testValid("({any} | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_27890() { testValid("({any} | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_27891() { testValid("({any} | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_27892() { testValid("({any} | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_27893() { testValid("({any} | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_27894() { testValid("({any} | (any | any))","{!int, (int | any)}"); }
		@Test public void test_27895() { testValid("({any} | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_27896() { testValid("({any} | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_27897() { testValid("({any} | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_27898() { testValid("({any} | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_27899() { testValid("({any} | (any | any))","{!int, (any | int)}"); }
		@Test public void test_27900() { testValid("({any} | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_27901() { testValid("({any} | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_27902() { testValid("({any} | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_27903() { testValid("({any} | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_27904() { testValid("({any} | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_27905() { testValid("({any} | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_27906() { testValid("({any} | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_27907() { testValid("({any} | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_27908() { testValid("({any} | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_27909() { testValid("({any} | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_27910() { testValid("({any} | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_27911() { testValid("({any} | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_27912() { testValid("({any} | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_27913() { testValid("({any} | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_27914() { testValid("({any} | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_27915() { testValid("({any} | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_27916() { testValid("({any} | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_27917() { testValid("({any} | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_27918() { testValid("({any} | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_27919() { testValid("({any} | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_27920() { testValid("({any} | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_27921() { testValid("({any} | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_27922() { testValid("({any} | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_27923() { testValid("({any} | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_27924() { testValid("({any} | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_27925() { testValid("({any} | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_27926() { testValid("({any} | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_27927() { testValid("({any} | (any | any))","(!int | {any})"); }
		@Test public void test_27928() { testValid("({any} | (any | any))","({any, any} | {any})"); }
		@Test public void test_27929() { testValid("({any} | (any | any))","((any | any) | {any})"); }
		@Test public void test_27930() { testValid("({any} | (any | any))","((int | any) | {any})"); }
		@Test public void test_27931() { testValid("({any} | (any | any))","((any & any) | {any})"); }
		@Test public void test_27932() { testValid("({any} | (any | any))","((int & any) | {any})"); }
		@Test public void test_27933() { testValid("({any} | (any | any))","((any & int) | {any})"); }
		@Test public void test_27934() { testValid("({any} | (any | any))","({int} | {int})"); }
		@Test public void test_27935() { testValid("({any} | (any | any))","(!any | {int})"); }
		@Test public void test_27936() { testValid("({any} | (any | any))","(!int | {int})"); }
		@Test public void test_27937() { testValid("({any} | (any | any))","({any, int} | {int})"); }
		@Test public void test_27938() { testValid("({any} | (any | any))","((int & any) | {int})"); }
		@Test public void test_27939() { testValid("({any} | (any | any))","((any & int) | {int})"); }
		@Test public void test_27940() { testValid("({any} | (any | any))","((int & int) | {int})"); }
		@Test public void test_27941() { testValid("({any} | (any | any))","({any} | !any)"); }
		@Test public void test_27942() { testValid("({any} | (any | any))","({int} | !any)"); }
		@Test public void test_27943() { testValid("({any} | (any | any))","({any, any} | !any)"); }
		@Test public void test_27944() { testValid("({any} | (any | any))","({int, int} | !any)"); }
		@Test public void test_27945() { testValid("({any} | (any | any))","((any | any) | !any)"); }
		@Test public void test_27946() { testValid("({any} | (any | any))","((int | any) | !any)"); }
		@Test public void test_27947() { testValid("({any} | (any | any))","((int | int) | !any)"); }
		@Test public void test_27948() { testValid("({any} | (any | any))","((int & int) | !any)"); }
		@Test public void test_27949() { testValid("({any} | (any | any))","(!int | !int)"); }
		@Test public void test_27950() { testValid("({any} | (any | any))","({any, any} | !int)"); }
		@Test public void test_27951() { testValid("({any} | (any | any))","({int, int} | !int)"); }
		@Test public void test_27952() { testValid("({any} | (any | any))","((int | any) | !int)"); }
		@Test public void test_27953() { testValid("({any} | (any | any))","((any | int) | !int)"); }
		@Test public void test_27954() { testValid("({any} | (any | any))","((any & int) | !int)"); }
		@Test public void test_27955() { testValid("({any} | (any | any))","((int & int) | !int)"); }
		@Test public void test_27956() { testValid("({any} | (any | any))","({int} | {any, any})"); }
		@Test public void test_27957() { testValid("({any} | (any | any))","(!any | {any, any})"); }
		@Test public void test_27958() { testValid("({any} | (any | any))","(!int | {any, any})"); }
		@Test public void test_27959() { testValid("({any} | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_27960() { testValid("({any} | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_27961() { testValid("({any} | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_27962() { testValid("({any} | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_27963() { testValid("({any} | (any | any))","(!int | {int, any})"); }
		@Test public void test_27964() { testValid("({any} | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_27965() { testValid("({any} | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_27966() { testValid("({any} | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_27967() { testValid("({any} | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_27968() { testValid("({any} | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_27969() { testValid("({any} | (any | any))","({any} | {any, int})"); }
		@Test public void test_27970() { testValid("({any} | (any | any))","(!int | {any, int})"); }
		@Test public void test_27971() { testValid("({any} | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_27972() { testValid("({any} | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_27973() { testValid("({any} | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_27974() { testValid("({any} | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_27975() { testValid("({any} | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_27976() { testValid("({any} | (any | any))","(!any | {int, int})"); }
		@Test public void test_27977() { testValid("({any} | (any | any))","(!int | {int, int})"); }
		@Test public void test_27978() { testValid("({any} | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_27979() { testValid("({any} | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_27980() { testValid("({any} | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_27981() { testValid("({any} | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_27982() { testValid("({any} | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_27983() { testValid("({any} | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_27984() { testValid("({any} | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_27985() { testValid("({any} | (any | any))","({any} | (any | any))"); }
		@Test public void test_27986() { testValid("({any} | (any | any))","(!any | (any | any))"); }
		@Test public void test_27987() { testValid("({any} | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_27988() { testValid("({any} | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_27989() { testValid("({any} | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_27990() { testValid("({any} | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_27991() { testValid("({any} | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_27992() { testValid("({any} | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_27993() { testValid("({any} | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_27994() { testValid("({any} | (any | any))","({any} | (int | any))"); }
		@Test public void test_27995() { testValid("({any} | (any | any))","(!int | (int | any))"); }
		@Test public void test_27996() { testValid("({any} | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_27997() { testValid("({any} | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_27998() { testValid("({any} | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_27999() { testValid("({any} | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28000() { testValid("({any} | (any | any))","({any} | (any | int))"); }
		@Test public void test_28001() { testValid("({any} | (any | any))","({int} | (any | int))"); }
		@Test public void test_28002() { testValid("({any} | (any | any))","(!any | (any | int))"); }
		@Test public void test_28003() { testValid("({any} | (any | any))","(!int | (any | int))"); }
		@Test public void test_28004() { testValid("({any} | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28005() { testValid("({any} | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28006() { testValid("({any} | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28007() { testValid("({any} | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28008() { testValid("({any} | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28009() { testValid("({any} | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28010() { testValid("({any} | (any | any))","({int} | (int | int))"); }
		@Test public void test_28011() { testValid("({any} | (any | any))","(!any | (int | int))"); }
		@Test public void test_28012() { testValid("({any} | (any | any))","(!int | (int | int))"); }
		@Test public void test_28013() { testValid("({any} | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28014() { testValid("({any} | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28015() { testValid("({any} | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28016() { testValid("({any} | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28017() { testValid("({any} | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28018() { testValid("({any} | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28019() { testValid("({any} | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28020() { testValid("({any} | (any | any))","(!any | (any & any))"); }
		@Test public void test_28021() { testValid("({any} | (any | any))","(!int | (any & any))"); }
		@Test public void test_28022() { testValid("({any} | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28023() { testValid("({any} | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28024() { testValid("({any} | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28025() { testValid("({any} | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28026() { testValid("({any} | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28027() { testValid("({any} | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28028() { testValid("({any} | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28029() { testValid("({any} | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28030() { testValid("({any} | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28031() { testValid("({any} | (any | any))","({any} | (int & any))"); }
		@Test public void test_28032() { testValid("(!any | (any | any))","{int}"); }
		@Test public void test_28033() { testValid("(!any | (any | any))","{any, any}"); }
		@Test public void test_28034() { testValid("(!any | (any | any))","{int, int}"); }
		@Test public void test_28035() { testValid("(!any | (any | any))","(any | int)"); }
		@Test public void test_28036() { testValid("(!any | (any | any))","(int & any)"); }
		@Test public void test_28037() { testValid("(!any | (any | any))","{{any}}"); }
		@Test public void test_28038() { testValid("(!any | (any | any))","{{int, any}}"); }
		@Test public void test_28039() { testValid("(!any | (any | any))","{{int, int}}"); }
		@Test public void test_28040() { testValid("(!any | (any | any))","{(any | int)}"); }
		@Test public void test_28041() { testValid("(!any | (any | any))","!{int, any}"); }
		@Test public void test_28042() { testValid("(!any | (any | any))","!{int, int}"); }
		@Test public void test_28043() { testValid("(!any | (any | any))","!(any | any)"); }
		@Test public void test_28044() { testValid("(!any | (any | any))","!(any & any)"); }
		@Test public void test_28045() { testValid("(!any | (any | any))","!(int & int)"); }
		@Test public void test_28046() { testValid("(!any | (any | any))","{{int}, {any}}"); }
		@Test public void test_28047() { testValid("(!any | (any | any))","{!int, {any}}"); }
		@Test public void test_28048() { testValid("(!any | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_28049() { testValid("(!any | (any | any))","{(any | int), {any}}"); }
		@Test public void test_28050() { testValid("(!any | (any | any))","{!int, {int}}"); }
		@Test public void test_28051() { testValid("(!any | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_28052() { testValid("(!any | (any | any))","{(any | any), {int}}"); }
		@Test public void test_28053() { testValid("(!any | (any | any))","{(any & any), {int}}"); }
		@Test public void test_28054() { testValid("(!any | (any | any))","{(any & int), {int}}"); }
		@Test public void test_28055() { testValid("(!any | (any | any))","{{any, any}, !int}"); }
		@Test public void test_28056() { testValid("(!any | (any | any))","{{any, int}, !int}"); }
		@Test public void test_28057() { testValid("(!any | (any | any))","{(any | any), !int}"); }
		@Test public void test_28058() { testValid("(!any | (any | any))","{(int | any), !int}"); }
		@Test public void test_28059() { testValid("(!any | (any | any))","{(any & any), !int}"); }
		@Test public void test_28060() { testValid("(!any | (any | any))","{(int & any), !int}"); }
		@Test public void test_28061() { testValid("(!any | (any | any))","{(int & int), !int}"); }
		@Test public void test_28062() { testValid("(!any | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_28063() { testValid("(!any | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_28064() { testValid("(!any | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_28065() { testValid("(!any | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_28066() { testValid("(!any | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_28067() { testValid("(!any | (any | any))","{!int, {int, any}}"); }
		@Test public void test_28068() { testValid("(!any | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_28069() { testValid("(!any | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_28070() { testValid("(!any | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_28071() { testValid("(!any | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_28072() { testValid("(!any | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_28073() { testValid("(!any | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_28074() { testValid("(!any | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_28075() { testValid("(!any | (any | any))","{!int, {int, int}}"); }
		@Test public void test_28076() { testValid("(!any | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_28077() { testValid("(!any | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_28078() { testValid("(!any | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_28079() { testValid("(!any | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_28080() { testValid("(!any | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_28081() { testValid("(!any | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_28082() { testValid("(!any | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_28083() { testValid("(!any | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_28084() { testValid("(!any | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_28085() { testValid("(!any | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_28086() { testValid("(!any | (any | any))","{!int, (int | any)}"); }
		@Test public void test_28087() { testValid("(!any | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_28088() { testValid("(!any | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_28089() { testValid("(!any | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_28090() { testValid("(!any | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_28091() { testValid("(!any | (any | any))","{!int, (any | int)}"); }
		@Test public void test_28092() { testValid("(!any | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_28093() { testValid("(!any | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_28094() { testValid("(!any | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_28095() { testValid("(!any | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_28096() { testValid("(!any | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_28097() { testValid("(!any | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_28098() { testValid("(!any | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_28099() { testValid("(!any | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_28100() { testValid("(!any | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_28101() { testValid("(!any | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_28102() { testValid("(!any | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_28103() { testValid("(!any | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_28104() { testValid("(!any | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_28105() { testValid("(!any | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_28106() { testValid("(!any | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_28107() { testValid("(!any | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_28108() { testValid("(!any | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_28109() { testValid("(!any | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_28110() { testValid("(!any | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_28111() { testValid("(!any | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_28112() { testValid("(!any | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_28113() { testValid("(!any | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_28114() { testValid("(!any | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_28115() { testValid("(!any | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_28116() { testValid("(!any | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_28117() { testValid("(!any | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_28118() { testValid("(!any | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_28119() { testValid("(!any | (any | any))","(!int | {any})"); }
		@Test public void test_28120() { testValid("(!any | (any | any))","({any, any} | {any})"); }
		@Test public void test_28121() { testValid("(!any | (any | any))","((any | any) | {any})"); }
		@Test public void test_28122() { testValid("(!any | (any | any))","((int | any) | {any})"); }
		@Test public void test_28123() { testValid("(!any | (any | any))","((any & any) | {any})"); }
		@Test public void test_28124() { testValid("(!any | (any | any))","((int & any) | {any})"); }
		@Test public void test_28125() { testValid("(!any | (any | any))","((any & int) | {any})"); }
		@Test public void test_28126() { testValid("(!any | (any | any))","({int} | {int})"); }
		@Test public void test_28127() { testValid("(!any | (any | any))","(!any | {int})"); }
		@Test public void test_28128() { testValid("(!any | (any | any))","(!int | {int})"); }
		@Test public void test_28129() { testValid("(!any | (any | any))","({any, int} | {int})"); }
		@Test public void test_28130() { testValid("(!any | (any | any))","((int & any) | {int})"); }
		@Test public void test_28131() { testValid("(!any | (any | any))","((any & int) | {int})"); }
		@Test public void test_28132() { testValid("(!any | (any | any))","((int & int) | {int})"); }
		@Test public void test_28133() { testValid("(!any | (any | any))","({any} | !any)"); }
		@Test public void test_28134() { testValid("(!any | (any | any))","({int} | !any)"); }
		@Test public void test_28135() { testValid("(!any | (any | any))","({any, any} | !any)"); }
		@Test public void test_28136() { testValid("(!any | (any | any))","({int, int} | !any)"); }
		@Test public void test_28137() { testValid("(!any | (any | any))","((any | any) | !any)"); }
		@Test public void test_28138() { testValid("(!any | (any | any))","((int | any) | !any)"); }
		@Test public void test_28139() { testValid("(!any | (any | any))","((int | int) | !any)"); }
		@Test public void test_28140() { testValid("(!any | (any | any))","((int & int) | !any)"); }
		@Test public void test_28141() { testValid("(!any | (any | any))","(!int | !int)"); }
		@Test public void test_28142() { testValid("(!any | (any | any))","({any, any} | !int)"); }
		@Test public void test_28143() { testValid("(!any | (any | any))","({int, int} | !int)"); }
		@Test public void test_28144() { testValid("(!any | (any | any))","((int | any) | !int)"); }
		@Test public void test_28145() { testValid("(!any | (any | any))","((any | int) | !int)"); }
		@Test public void test_28146() { testValid("(!any | (any | any))","((any & int) | !int)"); }
		@Test public void test_28147() { testValid("(!any | (any | any))","((int & int) | !int)"); }
		@Test public void test_28148() { testValid("(!any | (any | any))","({int} | {any, any})"); }
		@Test public void test_28149() { testValid("(!any | (any | any))","(!any | {any, any})"); }
		@Test public void test_28150() { testValid("(!any | (any | any))","(!int | {any, any})"); }
		@Test public void test_28151() { testValid("(!any | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_28152() { testValid("(!any | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_28153() { testValid("(!any | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_28154() { testValid("(!any | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_28155() { testValid("(!any | (any | any))","(!int | {int, any})"); }
		@Test public void test_28156() { testValid("(!any | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_28157() { testValid("(!any | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_28158() { testValid("(!any | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_28159() { testValid("(!any | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_28160() { testValid("(!any | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_28161() { testValid("(!any | (any | any))","({any} | {any, int})"); }
		@Test public void test_28162() { testValid("(!any | (any | any))","(!int | {any, int})"); }
		@Test public void test_28163() { testValid("(!any | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_28164() { testValid("(!any | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_28165() { testValid("(!any | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_28166() { testValid("(!any | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_28167() { testValid("(!any | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_28168() { testValid("(!any | (any | any))","(!any | {int, int})"); }
		@Test public void test_28169() { testValid("(!any | (any | any))","(!int | {int, int})"); }
		@Test public void test_28170() { testValid("(!any | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_28171() { testValid("(!any | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_28172() { testValid("(!any | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_28173() { testValid("(!any | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_28174() { testValid("(!any | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_28175() { testValid("(!any | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_28176() { testValid("(!any | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_28177() { testValid("(!any | (any | any))","({any} | (any | any))"); }
		@Test public void test_28178() { testValid("(!any | (any | any))","(!any | (any | any))"); }
		@Test public void test_28179() { testValid("(!any | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_28180() { testValid("(!any | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_28181() { testValid("(!any | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_28182() { testValid("(!any | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_28183() { testValid("(!any | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_28184() { testValid("(!any | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_28185() { testValid("(!any | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_28186() { testValid("(!any | (any | any))","({any} | (int | any))"); }
		@Test public void test_28187() { testValid("(!any | (any | any))","(!int | (int | any))"); }
		@Test public void test_28188() { testValid("(!any | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_28189() { testValid("(!any | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_28190() { testValid("(!any | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_28191() { testValid("(!any | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28192() { testValid("(!any | (any | any))","({any} | (any | int))"); }
		@Test public void test_28193() { testValid("(!any | (any | any))","({int} | (any | int))"); }
		@Test public void test_28194() { testValid("(!any | (any | any))","(!any | (any | int))"); }
		@Test public void test_28195() { testValid("(!any | (any | any))","(!int | (any | int))"); }
		@Test public void test_28196() { testValid("(!any | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28197() { testValid("(!any | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28198() { testValid("(!any | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28199() { testValid("(!any | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28200() { testValid("(!any | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28201() { testValid("(!any | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28202() { testValid("(!any | (any | any))","({int} | (int | int))"); }
		@Test public void test_28203() { testValid("(!any | (any | any))","(!any | (int | int))"); }
		@Test public void test_28204() { testValid("(!any | (any | any))","(!int | (int | int))"); }
		@Test public void test_28205() { testValid("(!any | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28206() { testValid("(!any | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28207() { testValid("(!any | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28208() { testValid("(!any | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28209() { testValid("(!any | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28210() { testValid("(!any | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28211() { testValid("(!any | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28212() { testValid("(!any | (any | any))","(!any | (any & any))"); }
		@Test public void test_28213() { testValid("(!any | (any | any))","(!int | (any & any))"); }
		@Test public void test_28214() { testValid("(!any | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28215() { testValid("(!any | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28216() { testValid("(!any | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28217() { testValid("(!any | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28218() { testValid("(!any | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28219() { testValid("(!any | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28220() { testValid("(!any | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28221() { testValid("(!any | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28222() { testValid("(!any | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28223() { testValid("(!any | (any | any))","({any} | (int & any))"); }
		@Test public void test_28224() { testValid("({any, any} | (any | any))","{int}"); }
		@Test public void test_28225() { testValid("({any, any} | (any | any))","{any, any}"); }
		@Test public void test_28226() { testValid("({any, any} | (any | any))","{int, int}"); }
		@Test public void test_28227() { testValid("({any, any} | (any | any))","(any | int)"); }
		@Test public void test_28228() { testValid("({any, any} | (any | any))","(int & any)"); }
		@Test public void test_28229() { testValid("({any, any} | (any | any))","{{any}}"); }
		@Test public void test_28230() { testValid("({any, any} | (any | any))","{{int, any}}"); }
		@Test public void test_28231() { testValid("({any, any} | (any | any))","{{int, int}}"); }
		@Test public void test_28232() { testValid("({any, any} | (any | any))","{(any | int)}"); }
		@Test public void test_28233() { testValid("({any, any} | (any | any))","!{int, any}"); }
		@Test public void test_28234() { testValid("({any, any} | (any | any))","!{int, int}"); }
		@Test public void test_28235() { testValid("({any, any} | (any | any))","!(any | any)"); }
		@Test public void test_28236() { testValid("({any, any} | (any | any))","!(any & any)"); }
		@Test public void test_28237() { testValid("({any, any} | (any | any))","!(int & int)"); }
		@Test public void test_28238() { testValid("({any, any} | (any | any))","{{int}, {any}}"); }
		@Test public void test_28239() { testValid("({any, any} | (any | any))","{!int, {any}}"); }
		@Test public void test_28240() { testValid("({any, any} | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_28241() { testValid("({any, any} | (any | any))","{(any | int), {any}}"); }
		@Test public void test_28242() { testValid("({any, any} | (any | any))","{!int, {int}}"); }
		@Test public void test_28243() { testValid("({any, any} | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_28244() { testValid("({any, any} | (any | any))","{(any | any), {int}}"); }
		@Test public void test_28245() { testValid("({any, any} | (any | any))","{(any & any), {int}}"); }
		@Test public void test_28246() { testValid("({any, any} | (any | any))","{(any & int), {int}}"); }
		@Test public void test_28247() { testValid("({any, any} | (any | any))","{{any, any}, !int}"); }
		@Test public void test_28248() { testValid("({any, any} | (any | any))","{{any, int}, !int}"); }
		@Test public void test_28249() { testValid("({any, any} | (any | any))","{(any | any), !int}"); }
		@Test public void test_28250() { testValid("({any, any} | (any | any))","{(int | any), !int}"); }
		@Test public void test_28251() { testValid("({any, any} | (any | any))","{(any & any), !int}"); }
		@Test public void test_28252() { testValid("({any, any} | (any | any))","{(int & any), !int}"); }
		@Test public void test_28253() { testValid("({any, any} | (any | any))","{(int & int), !int}"); }
		@Test public void test_28254() { testValid("({any, any} | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_28255() { testValid("({any, any} | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_28256() { testValid("({any, any} | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_28257() { testValid("({any, any} | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_28258() { testValid("({any, any} | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_28259() { testValid("({any, any} | (any | any))","{!int, {int, any}}"); }
		@Test public void test_28260() { testValid("({any, any} | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_28261() { testValid("({any, any} | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_28262() { testValid("({any, any} | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_28263() { testValid("({any, any} | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_28264() { testValid("({any, any} | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_28265() { testValid("({any, any} | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_28266() { testValid("({any, any} | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_28267() { testValid("({any, any} | (any | any))","{!int, {int, int}}"); }
		@Test public void test_28268() { testValid("({any, any} | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_28269() { testValid("({any, any} | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_28270() { testValid("({any, any} | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_28271() { testValid("({any, any} | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_28272() { testValid("({any, any} | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_28273() { testValid("({any, any} | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_28274() { testValid("({any, any} | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_28275() { testValid("({any, any} | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_28276() { testValid("({any, any} | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_28277() { testValid("({any, any} | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_28278() { testValid("({any, any} | (any | any))","{!int, (int | any)}"); }
		@Test public void test_28279() { testValid("({any, any} | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_28280() { testValid("({any, any} | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_28281() { testValid("({any, any} | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_28282() { testValid("({any, any} | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_28283() { testValid("({any, any} | (any | any))","{!int, (any | int)}"); }
		@Test public void test_28284() { testValid("({any, any} | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_28285() { testValid("({any, any} | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_28286() { testValid("({any, any} | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_28287() { testValid("({any, any} | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_28288() { testValid("({any, any} | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_28289() { testValid("({any, any} | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_28290() { testValid("({any, any} | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_28291() { testValid("({any, any} | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_28292() { testValid("({any, any} | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_28293() { testValid("({any, any} | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_28294() { testValid("({any, any} | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_28295() { testValid("({any, any} | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_28296() { testValid("({any, any} | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_28297() { testValid("({any, any} | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_28298() { testValid("({any, any} | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_28299() { testValid("({any, any} | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_28300() { testValid("({any, any} | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_28301() { testValid("({any, any} | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_28302() { testValid("({any, any} | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_28303() { testValid("({any, any} | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_28304() { testValid("({any, any} | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_28305() { testValid("({any, any} | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_28306() { testValid("({any, any} | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_28307() { testValid("({any, any} | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_28308() { testValid("({any, any} | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_28309() { testValid("({any, any} | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_28310() { testValid("({any, any} | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_28311() { testValid("({any, any} | (any | any))","(!int | {any})"); }
		@Test public void test_28312() { testValid("({any, any} | (any | any))","({any, any} | {any})"); }
		@Test public void test_28313() { testValid("({any, any} | (any | any))","((any | any) | {any})"); }
		@Test public void test_28314() { testValid("({any, any} | (any | any))","((int | any) | {any})"); }
		@Test public void test_28315() { testValid("({any, any} | (any | any))","((any & any) | {any})"); }
		@Test public void test_28316() { testValid("({any, any} | (any | any))","((int & any) | {any})"); }
		@Test public void test_28317() { testValid("({any, any} | (any | any))","((any & int) | {any})"); }
		@Test public void test_28318() { testValid("({any, any} | (any | any))","({int} | {int})"); }
		@Test public void test_28319() { testValid("({any, any} | (any | any))","(!any | {int})"); }
		@Test public void test_28320() { testValid("({any, any} | (any | any))","(!int | {int})"); }
		@Test public void test_28321() { testValid("({any, any} | (any | any))","({any, int} | {int})"); }
		@Test public void test_28322() { testValid("({any, any} | (any | any))","((int & any) | {int})"); }
		@Test public void test_28323() { testValid("({any, any} | (any | any))","((any & int) | {int})"); }
		@Test public void test_28324() { testValid("({any, any} | (any | any))","((int & int) | {int})"); }
		@Test public void test_28325() { testValid("({any, any} | (any | any))","({any} | !any)"); }
		@Test public void test_28326() { testValid("({any, any} | (any | any))","({int} | !any)"); }
		@Test public void test_28327() { testValid("({any, any} | (any | any))","({any, any} | !any)"); }
		@Test public void test_28328() { testValid("({any, any} | (any | any))","({int, int} | !any)"); }
		@Test public void test_28329() { testValid("({any, any} | (any | any))","((any | any) | !any)"); }
		@Test public void test_28330() { testValid("({any, any} | (any | any))","((int | any) | !any)"); }
		@Test public void test_28331() { testValid("({any, any} | (any | any))","((int | int) | !any)"); }
		@Test public void test_28332() { testValid("({any, any} | (any | any))","((int & int) | !any)"); }
		@Test public void test_28333() { testValid("({any, any} | (any | any))","(!int | !int)"); }
		@Test public void test_28334() { testValid("({any, any} | (any | any))","({any, any} | !int)"); }
		@Test public void test_28335() { testValid("({any, any} | (any | any))","({int, int} | !int)"); }
		@Test public void test_28336() { testValid("({any, any} | (any | any))","((int | any) | !int)"); }
		@Test public void test_28337() { testValid("({any, any} | (any | any))","((any | int) | !int)"); }
		@Test public void test_28338() { testValid("({any, any} | (any | any))","((any & int) | !int)"); }
		@Test public void test_28339() { testValid("({any, any} | (any | any))","((int & int) | !int)"); }
		@Test public void test_28340() { testValid("({any, any} | (any | any))","({int} | {any, any})"); }
		@Test public void test_28341() { testValid("({any, any} | (any | any))","(!any | {any, any})"); }
		@Test public void test_28342() { testValid("({any, any} | (any | any))","(!int | {any, any})"); }
		@Test public void test_28343() { testValid("({any, any} | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_28344() { testValid("({any, any} | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_28345() { testValid("({any, any} | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_28346() { testValid("({any, any} | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_28347() { testValid("({any, any} | (any | any))","(!int | {int, any})"); }
		@Test public void test_28348() { testValid("({any, any} | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_28349() { testValid("({any, any} | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_28350() { testValid("({any, any} | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_28351() { testValid("({any, any} | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_28352() { testValid("({any, any} | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_28353() { testValid("({any, any} | (any | any))","({any} | {any, int})"); }
		@Test public void test_28354() { testValid("({any, any} | (any | any))","(!int | {any, int})"); }
		@Test public void test_28355() { testValid("({any, any} | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_28356() { testValid("({any, any} | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_28357() { testValid("({any, any} | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_28358() { testValid("({any, any} | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_28359() { testValid("({any, any} | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_28360() { testValid("({any, any} | (any | any))","(!any | {int, int})"); }
		@Test public void test_28361() { testValid("({any, any} | (any | any))","(!int | {int, int})"); }
		@Test public void test_28362() { testValid("({any, any} | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_28363() { testValid("({any, any} | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_28364() { testValid("({any, any} | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_28365() { testValid("({any, any} | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_28366() { testValid("({any, any} | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_28367() { testValid("({any, any} | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_28368() { testValid("({any, any} | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_28369() { testValid("({any, any} | (any | any))","({any} | (any | any))"); }
		@Test public void test_28370() { testValid("({any, any} | (any | any))","(!any | (any | any))"); }
		@Test public void test_28371() { testValid("({any, any} | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_28372() { testValid("({any, any} | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_28373() { testValid("({any, any} | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_28374() { testValid("({any, any} | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_28375() { testValid("({any, any} | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_28376() { testValid("({any, any} | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_28377() { testValid("({any, any} | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_28378() { testValid("({any, any} | (any | any))","({any} | (int | any))"); }
		@Test public void test_28379() { testValid("({any, any} | (any | any))","(!int | (int | any))"); }
		@Test public void test_28380() { testValid("({any, any} | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_28381() { testValid("({any, any} | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_28382() { testValid("({any, any} | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_28383() { testValid("({any, any} | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28384() { testValid("({any, any} | (any | any))","({any} | (any | int))"); }
		@Test public void test_28385() { testValid("({any, any} | (any | any))","({int} | (any | int))"); }
		@Test public void test_28386() { testValid("({any, any} | (any | any))","(!any | (any | int))"); }
		@Test public void test_28387() { testValid("({any, any} | (any | any))","(!int | (any | int))"); }
		@Test public void test_28388() { testValid("({any, any} | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28389() { testValid("({any, any} | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28390() { testValid("({any, any} | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28391() { testValid("({any, any} | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28392() { testValid("({any, any} | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28393() { testValid("({any, any} | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28394() { testValid("({any, any} | (any | any))","({int} | (int | int))"); }
		@Test public void test_28395() { testValid("({any, any} | (any | any))","(!any | (int | int))"); }
		@Test public void test_28396() { testValid("({any, any} | (any | any))","(!int | (int | int))"); }
		@Test public void test_28397() { testValid("({any, any} | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28398() { testValid("({any, any} | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28399() { testValid("({any, any} | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28400() { testValid("({any, any} | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28401() { testValid("({any, any} | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28402() { testValid("({any, any} | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28403() { testValid("({any, any} | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28404() { testValid("({any, any} | (any | any))","(!any | (any & any))"); }
		@Test public void test_28405() { testValid("({any, any} | (any | any))","(!int | (any & any))"); }
		@Test public void test_28406() { testValid("({any, any} | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28407() { testValid("({any, any} | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28408() { testValid("({any, any} | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28409() { testValid("({any, any} | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28410() { testValid("({any, any} | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28411() { testValid("({any, any} | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28412() { testValid("({any, any} | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28413() { testValid("({any, any} | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28414() { testValid("({any, any} | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28415() { testValid("({any, any} | (any | any))","({any} | (int & any))"); }
		@Test public void test_28416() { testValid("({any, int} | (any | any))","{int}"); }
		@Test public void test_28417() { testValid("({any, int} | (any | any))","{any, any}"); }
		@Test public void test_28418() { testValid("({any, int} | (any | any))","{int, int}"); }
		@Test public void test_28419() { testValid("({any, int} | (any | any))","(any | int)"); }
		@Test public void test_28420() { testValid("({any, int} | (any | any))","(int & any)"); }
		@Test public void test_28421() { testValid("({any, int} | (any | any))","{{any}}"); }
		@Test public void test_28422() { testValid("({any, int} | (any | any))","{{int, any}}"); }
		@Test public void test_28423() { testValid("({any, int} | (any | any))","{{int, int}}"); }
		@Test public void test_28424() { testValid("({any, int} | (any | any))","{(any | int)}"); }
		@Test public void test_28425() { testValid("({any, int} | (any | any))","!{int, any}"); }
		@Test public void test_28426() { testValid("({any, int} | (any | any))","!{int, int}"); }
		@Test public void test_28427() { testValid("({any, int} | (any | any))","!(any | any)"); }
		@Test public void test_28428() { testValid("({any, int} | (any | any))","!(any & any)"); }
		@Test public void test_28429() { testValid("({any, int} | (any | any))","!(int & int)"); }
		@Test public void test_28430() { testValid("({any, int} | (any | any))","{{int}, {any}}"); }
		@Test public void test_28431() { testValid("({any, int} | (any | any))","{!int, {any}}"); }
		@Test public void test_28432() { testValid("({any, int} | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_28433() { testValid("({any, int} | (any | any))","{(any | int), {any}}"); }
		@Test public void test_28434() { testValid("({any, int} | (any | any))","{!int, {int}}"); }
		@Test public void test_28435() { testValid("({any, int} | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_28436() { testValid("({any, int} | (any | any))","{(any | any), {int}}"); }
		@Test public void test_28437() { testValid("({any, int} | (any | any))","{(any & any), {int}}"); }
		@Test public void test_28438() { testValid("({any, int} | (any | any))","{(any & int), {int}}"); }
		@Test public void test_28439() { testValid("({any, int} | (any | any))","{{any, any}, !int}"); }
		@Test public void test_28440() { testValid("({any, int} | (any | any))","{{any, int}, !int}"); }
		@Test public void test_28441() { testValid("({any, int} | (any | any))","{(any | any), !int}"); }
		@Test public void test_28442() { testValid("({any, int} | (any | any))","{(int | any), !int}"); }
		@Test public void test_28443() { testValid("({any, int} | (any | any))","{(any & any), !int}"); }
		@Test public void test_28444() { testValid("({any, int} | (any | any))","{(int & any), !int}"); }
		@Test public void test_28445() { testValid("({any, int} | (any | any))","{(int & int), !int}"); }
		@Test public void test_28446() { testValid("({any, int} | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_28447() { testValid("({any, int} | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_28448() { testValid("({any, int} | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_28449() { testValid("({any, int} | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_28450() { testValid("({any, int} | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_28451() { testValid("({any, int} | (any | any))","{!int, {int, any}}"); }
		@Test public void test_28452() { testValid("({any, int} | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_28453() { testValid("({any, int} | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_28454() { testValid("({any, int} | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_28455() { testValid("({any, int} | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_28456() { testValid("({any, int} | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_28457() { testValid("({any, int} | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_28458() { testValid("({any, int} | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_28459() { testValid("({any, int} | (any | any))","{!int, {int, int}}"); }
		@Test public void test_28460() { testValid("({any, int} | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_28461() { testValid("({any, int} | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_28462() { testValid("({any, int} | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_28463() { testValid("({any, int} | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_28464() { testValid("({any, int} | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_28465() { testValid("({any, int} | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_28466() { testValid("({any, int} | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_28467() { testValid("({any, int} | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_28468() { testValid("({any, int} | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_28469() { testValid("({any, int} | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_28470() { testValid("({any, int} | (any | any))","{!int, (int | any)}"); }
		@Test public void test_28471() { testValid("({any, int} | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_28472() { testValid("({any, int} | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_28473() { testValid("({any, int} | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_28474() { testValid("({any, int} | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_28475() { testValid("({any, int} | (any | any))","{!int, (any | int)}"); }
		@Test public void test_28476() { testValid("({any, int} | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_28477() { testValid("({any, int} | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_28478() { testValid("({any, int} | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_28479() { testValid("({any, int} | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_28480() { testValid("({any, int} | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_28481() { testValid("({any, int} | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_28482() { testValid("({any, int} | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_28483() { testValid("({any, int} | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_28484() { testValid("({any, int} | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_28485() { testValid("({any, int} | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_28486() { testValid("({any, int} | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_28487() { testValid("({any, int} | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_28488() { testValid("({any, int} | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_28489() { testValid("({any, int} | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_28490() { testValid("({any, int} | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_28491() { testValid("({any, int} | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_28492() { testValid("({any, int} | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_28493() { testValid("({any, int} | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_28494() { testValid("({any, int} | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_28495() { testValid("({any, int} | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_28496() { testValid("({any, int} | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_28497() { testValid("({any, int} | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_28498() { testValid("({any, int} | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_28499() { testValid("({any, int} | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_28500() { testValid("({any, int} | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_28501() { testValid("({any, int} | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_28502() { testValid("({any, int} | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_28503() { testValid("({any, int} | (any | any))","(!int | {any})"); }
		@Test public void test_28504() { testValid("({any, int} | (any | any))","({any, any} | {any})"); }
		@Test public void test_28505() { testValid("({any, int} | (any | any))","((any | any) | {any})"); }
		@Test public void test_28506() { testValid("({any, int} | (any | any))","((int | any) | {any})"); }
		@Test public void test_28507() { testValid("({any, int} | (any | any))","((any & any) | {any})"); }
		@Test public void test_28508() { testValid("({any, int} | (any | any))","((int & any) | {any})"); }
		@Test public void test_28509() { testValid("({any, int} | (any | any))","((any & int) | {any})"); }
		@Test public void test_28510() { testValid("({any, int} | (any | any))","({int} | {int})"); }
		@Test public void test_28511() { testValid("({any, int} | (any | any))","(!any | {int})"); }
		@Test public void test_28512() { testValid("({any, int} | (any | any))","(!int | {int})"); }
		@Test public void test_28513() { testValid("({any, int} | (any | any))","({any, int} | {int})"); }
		@Test public void test_28514() { testValid("({any, int} | (any | any))","((int & any) | {int})"); }
		@Test public void test_28515() { testValid("({any, int} | (any | any))","((any & int) | {int})"); }
		@Test public void test_28516() { testValid("({any, int} | (any | any))","((int & int) | {int})"); }
		@Test public void test_28517() { testValid("({any, int} | (any | any))","({any} | !any)"); }
		@Test public void test_28518() { testValid("({any, int} | (any | any))","({int} | !any)"); }
		@Test public void test_28519() { testValid("({any, int} | (any | any))","({any, any} | !any)"); }
		@Test public void test_28520() { testValid("({any, int} | (any | any))","({int, int} | !any)"); }
		@Test public void test_28521() { testValid("({any, int} | (any | any))","((any | any) | !any)"); }
		@Test public void test_28522() { testValid("({any, int} | (any | any))","((int | any) | !any)"); }
		@Test public void test_28523() { testValid("({any, int} | (any | any))","((int | int) | !any)"); }
		@Test public void test_28524() { testValid("({any, int} | (any | any))","((int & int) | !any)"); }
		@Test public void test_28525() { testValid("({any, int} | (any | any))","(!int | !int)"); }
		@Test public void test_28526() { testValid("({any, int} | (any | any))","({any, any} | !int)"); }
		@Test public void test_28527() { testValid("({any, int} | (any | any))","({int, int} | !int)"); }
		@Test public void test_28528() { testValid("({any, int} | (any | any))","((int | any) | !int)"); }
		@Test public void test_28529() { testValid("({any, int} | (any | any))","((any | int) | !int)"); }
		@Test public void test_28530() { testValid("({any, int} | (any | any))","((any & int) | !int)"); }
		@Test public void test_28531() { testValid("({any, int} | (any | any))","((int & int) | !int)"); }
		@Test public void test_28532() { testValid("({any, int} | (any | any))","({int} | {any, any})"); }
		@Test public void test_28533() { testValid("({any, int} | (any | any))","(!any | {any, any})"); }
		@Test public void test_28534() { testValid("({any, int} | (any | any))","(!int | {any, any})"); }
		@Test public void test_28535() { testValid("({any, int} | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_28536() { testValid("({any, int} | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_28537() { testValid("({any, int} | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_28538() { testValid("({any, int} | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_28539() { testValid("({any, int} | (any | any))","(!int | {int, any})"); }
		@Test public void test_28540() { testValid("({any, int} | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_28541() { testValid("({any, int} | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_28542() { testValid("({any, int} | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_28543() { testValid("({any, int} | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_28544() { testValid("({any, int} | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_28545() { testValid("({any, int} | (any | any))","({any} | {any, int})"); }
		@Test public void test_28546() { testValid("({any, int} | (any | any))","(!int | {any, int})"); }
		@Test public void test_28547() { testValid("({any, int} | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_28548() { testValid("({any, int} | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_28549() { testValid("({any, int} | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_28550() { testValid("({any, int} | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_28551() { testValid("({any, int} | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_28552() { testValid("({any, int} | (any | any))","(!any | {int, int})"); }
		@Test public void test_28553() { testValid("({any, int} | (any | any))","(!int | {int, int})"); }
		@Test public void test_28554() { testValid("({any, int} | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_28555() { testValid("({any, int} | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_28556() { testValid("({any, int} | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_28557() { testValid("({any, int} | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_28558() { testValid("({any, int} | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_28559() { testValid("({any, int} | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_28560() { testValid("({any, int} | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_28561() { testValid("({any, int} | (any | any))","({any} | (any | any))"); }
		@Test public void test_28562() { testValid("({any, int} | (any | any))","(!any | (any | any))"); }
		@Test public void test_28563() { testValid("({any, int} | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_28564() { testValid("({any, int} | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_28565() { testValid("({any, int} | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_28566() { testValid("({any, int} | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_28567() { testValid("({any, int} | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_28568() { testValid("({any, int} | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_28569() { testValid("({any, int} | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_28570() { testValid("({any, int} | (any | any))","({any} | (int | any))"); }
		@Test public void test_28571() { testValid("({any, int} | (any | any))","(!int | (int | any))"); }
		@Test public void test_28572() { testValid("({any, int} | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_28573() { testValid("({any, int} | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_28574() { testValid("({any, int} | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_28575() { testValid("({any, int} | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28576() { testValid("({any, int} | (any | any))","({any} | (any | int))"); }
		@Test public void test_28577() { testValid("({any, int} | (any | any))","({int} | (any | int))"); }
		@Test public void test_28578() { testValid("({any, int} | (any | any))","(!any | (any | int))"); }
		@Test public void test_28579() { testValid("({any, int} | (any | any))","(!int | (any | int))"); }
		@Test public void test_28580() { testValid("({any, int} | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28581() { testValid("({any, int} | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28582() { testValid("({any, int} | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28583() { testValid("({any, int} | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28584() { testValid("({any, int} | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28585() { testValid("({any, int} | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28586() { testValid("({any, int} | (any | any))","({int} | (int | int))"); }
		@Test public void test_28587() { testValid("({any, int} | (any | any))","(!any | (int | int))"); }
		@Test public void test_28588() { testValid("({any, int} | (any | any))","(!int | (int | int))"); }
		@Test public void test_28589() { testValid("({any, int} | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28590() { testValid("({any, int} | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28591() { testValid("({any, int} | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28592() { testValid("({any, int} | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28593() { testValid("({any, int} | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28594() { testValid("({any, int} | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28595() { testValid("({any, int} | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28596() { testValid("({any, int} | (any | any))","(!any | (any & any))"); }
		@Test public void test_28597() { testValid("({any, int} | (any | any))","(!int | (any & any))"); }
		@Test public void test_28598() { testValid("({any, int} | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28599() { testValid("({any, int} | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28600() { testValid("({any, int} | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28601() { testValid("({any, int} | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28602() { testValid("({any, int} | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28603() { testValid("({any, int} | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28604() { testValid("({any, int} | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28605() { testValid("({any, int} | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28606() { testValid("({any, int} | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28607() { testValid("({any, int} | (any | any))","({any} | (int & any))"); }
		@Test public void test_28608() { testValid("({int, int} | (any | any))","{int}"); }
		@Test public void test_28609() { testValid("({int, int} | (any | any))","{any, any}"); }
		@Test public void test_28610() { testValid("({int, int} | (any | any))","{int, int}"); }
		@Test public void test_28611() { testValid("({int, int} | (any | any))","(any | int)"); }
		@Test public void test_28612() { testValid("({int, int} | (any | any))","(int & any)"); }
		@Test public void test_28613() { testValid("({int, int} | (any | any))","{{any}}"); }
		@Test public void test_28614() { testValid("({int, int} | (any | any))","{{int, any}}"); }
		@Test public void test_28615() { testValid("({int, int} | (any | any))","{{int, int}}"); }
		@Test public void test_28616() { testValid("({int, int} | (any | any))","{(any | int)}"); }
		@Test public void test_28617() { testValid("({int, int} | (any | any))","!{int, any}"); }
		@Test public void test_28618() { testValid("({int, int} | (any | any))","!{int, int}"); }
		@Test public void test_28619() { testValid("({int, int} | (any | any))","!(any | any)"); }
		@Test public void test_28620() { testValid("({int, int} | (any | any))","!(any & any)"); }
		@Test public void test_28621() { testValid("({int, int} | (any | any))","!(int & int)"); }
		@Test public void test_28622() { testValid("({int, int} | (any | any))","{{int}, {any}}"); }
		@Test public void test_28623() { testValid("({int, int} | (any | any))","{!int, {any}}"); }
		@Test public void test_28624() { testValid("({int, int} | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_28625() { testValid("({int, int} | (any | any))","{(any | int), {any}}"); }
		@Test public void test_28626() { testValid("({int, int} | (any | any))","{!int, {int}}"); }
		@Test public void test_28627() { testValid("({int, int} | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_28628() { testValid("({int, int} | (any | any))","{(any | any), {int}}"); }
		@Test public void test_28629() { testValid("({int, int} | (any | any))","{(any & any), {int}}"); }
		@Test public void test_28630() { testValid("({int, int} | (any | any))","{(any & int), {int}}"); }
		@Test public void test_28631() { testValid("({int, int} | (any | any))","{{any, any}, !int}"); }
		@Test public void test_28632() { testValid("({int, int} | (any | any))","{{any, int}, !int}"); }
		@Test public void test_28633() { testValid("({int, int} | (any | any))","{(any | any), !int}"); }
		@Test public void test_28634() { testValid("({int, int} | (any | any))","{(int | any), !int}"); }
		@Test public void test_28635() { testValid("({int, int} | (any | any))","{(any & any), !int}"); }
		@Test public void test_28636() { testValid("({int, int} | (any | any))","{(int & any), !int}"); }
		@Test public void test_28637() { testValid("({int, int} | (any | any))","{(int & int), !int}"); }
		@Test public void test_28638() { testValid("({int, int} | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_28639() { testValid("({int, int} | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_28640() { testValid("({int, int} | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_28641() { testValid("({int, int} | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_28642() { testValid("({int, int} | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_28643() { testValid("({int, int} | (any | any))","{!int, {int, any}}"); }
		@Test public void test_28644() { testValid("({int, int} | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_28645() { testValid("({int, int} | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_28646() { testValid("({int, int} | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_28647() { testValid("({int, int} | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_28648() { testValid("({int, int} | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_28649() { testValid("({int, int} | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_28650() { testValid("({int, int} | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_28651() { testValid("({int, int} | (any | any))","{!int, {int, int}}"); }
		@Test public void test_28652() { testValid("({int, int} | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_28653() { testValid("({int, int} | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_28654() { testValid("({int, int} | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_28655() { testValid("({int, int} | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_28656() { testValid("({int, int} | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_28657() { testValid("({int, int} | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_28658() { testValid("({int, int} | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_28659() { testValid("({int, int} | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_28660() { testValid("({int, int} | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_28661() { testValid("({int, int} | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_28662() { testValid("({int, int} | (any | any))","{!int, (int | any)}"); }
		@Test public void test_28663() { testValid("({int, int} | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_28664() { testValid("({int, int} | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_28665() { testValid("({int, int} | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_28666() { testValid("({int, int} | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_28667() { testValid("({int, int} | (any | any))","{!int, (any | int)}"); }
		@Test public void test_28668() { testValid("({int, int} | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_28669() { testValid("({int, int} | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_28670() { testValid("({int, int} | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_28671() { testValid("({int, int} | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_28672() { testValid("({int, int} | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_28673() { testValid("({int, int} | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_28674() { testValid("({int, int} | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_28675() { testValid("({int, int} | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_28676() { testValid("({int, int} | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_28677() { testValid("({int, int} | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_28678() { testValid("({int, int} | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_28679() { testValid("({int, int} | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_28680() { testValid("({int, int} | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_28681() { testValid("({int, int} | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_28682() { testValid("({int, int} | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_28683() { testValid("({int, int} | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_28684() { testValid("({int, int} | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_28685() { testValid("({int, int} | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_28686() { testValid("({int, int} | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_28687() { testValid("({int, int} | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_28688() { testValid("({int, int} | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_28689() { testValid("({int, int} | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_28690() { testValid("({int, int} | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_28691() { testValid("({int, int} | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_28692() { testValid("({int, int} | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_28693() { testValid("({int, int} | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_28694() { testValid("({int, int} | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_28695() { testValid("({int, int} | (any | any))","(!int | {any})"); }
		@Test public void test_28696() { testValid("({int, int} | (any | any))","({any, any} | {any})"); }
		@Test public void test_28697() { testValid("({int, int} | (any | any))","((any | any) | {any})"); }
		@Test public void test_28698() { testValid("({int, int} | (any | any))","((int | any) | {any})"); }
		@Test public void test_28699() { testValid("({int, int} | (any | any))","((any & any) | {any})"); }
		@Test public void test_28700() { testValid("({int, int} | (any | any))","((int & any) | {any})"); }
		@Test public void test_28701() { testValid("({int, int} | (any | any))","((any & int) | {any})"); }
		@Test public void test_28702() { testValid("({int, int} | (any | any))","({int} | {int})"); }
		@Test public void test_28703() { testValid("({int, int} | (any | any))","(!any | {int})"); }
		@Test public void test_28704() { testValid("({int, int} | (any | any))","(!int | {int})"); }
		@Test public void test_28705() { testValid("({int, int} | (any | any))","({any, int} | {int})"); }
		@Test public void test_28706() { testValid("({int, int} | (any | any))","((int & any) | {int})"); }
		@Test public void test_28707() { testValid("({int, int} | (any | any))","((any & int) | {int})"); }
		@Test public void test_28708() { testValid("({int, int} | (any | any))","((int & int) | {int})"); }
		@Test public void test_28709() { testValid("({int, int} | (any | any))","({any} | !any)"); }
		@Test public void test_28710() { testValid("({int, int} | (any | any))","({int} | !any)"); }
		@Test public void test_28711() { testValid("({int, int} | (any | any))","({any, any} | !any)"); }
		@Test public void test_28712() { testValid("({int, int} | (any | any))","({int, int} | !any)"); }
		@Test public void test_28713() { testValid("({int, int} | (any | any))","((any | any) | !any)"); }
		@Test public void test_28714() { testValid("({int, int} | (any | any))","((int | any) | !any)"); }
		@Test public void test_28715() { testValid("({int, int} | (any | any))","((int | int) | !any)"); }
		@Test public void test_28716() { testValid("({int, int} | (any | any))","((int & int) | !any)"); }
		@Test public void test_28717() { testValid("({int, int} | (any | any))","(!int | !int)"); }
		@Test public void test_28718() { testValid("({int, int} | (any | any))","({any, any} | !int)"); }
		@Test public void test_28719() { testValid("({int, int} | (any | any))","({int, int} | !int)"); }
		@Test public void test_28720() { testValid("({int, int} | (any | any))","((int | any) | !int)"); }
		@Test public void test_28721() { testValid("({int, int} | (any | any))","((any | int) | !int)"); }
		@Test public void test_28722() { testValid("({int, int} | (any | any))","((any & int) | !int)"); }
		@Test public void test_28723() { testValid("({int, int} | (any | any))","((int & int) | !int)"); }
		@Test public void test_28724() { testValid("({int, int} | (any | any))","({int} | {any, any})"); }
		@Test public void test_28725() { testValid("({int, int} | (any | any))","(!any | {any, any})"); }
		@Test public void test_28726() { testValid("({int, int} | (any | any))","(!int | {any, any})"); }
		@Test public void test_28727() { testValid("({int, int} | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_28728() { testValid("({int, int} | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_28729() { testValid("({int, int} | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_28730() { testValid("({int, int} | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_28731() { testValid("({int, int} | (any | any))","(!int | {int, any})"); }
		@Test public void test_28732() { testValid("({int, int} | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_28733() { testValid("({int, int} | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_28734() { testValid("({int, int} | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_28735() { testValid("({int, int} | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_28736() { testValid("({int, int} | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_28737() { testValid("({int, int} | (any | any))","({any} | {any, int})"); }
		@Test public void test_28738() { testValid("({int, int} | (any | any))","(!int | {any, int})"); }
		@Test public void test_28739() { testValid("({int, int} | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_28740() { testValid("({int, int} | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_28741() { testValid("({int, int} | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_28742() { testValid("({int, int} | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_28743() { testValid("({int, int} | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_28744() { testValid("({int, int} | (any | any))","(!any | {int, int})"); }
		@Test public void test_28745() { testValid("({int, int} | (any | any))","(!int | {int, int})"); }
		@Test public void test_28746() { testValid("({int, int} | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_28747() { testValid("({int, int} | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_28748() { testValid("({int, int} | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_28749() { testValid("({int, int} | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_28750() { testValid("({int, int} | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_28751() { testValid("({int, int} | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_28752() { testValid("({int, int} | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_28753() { testValid("({int, int} | (any | any))","({any} | (any | any))"); }
		@Test public void test_28754() { testValid("({int, int} | (any | any))","(!any | (any | any))"); }
		@Test public void test_28755() { testValid("({int, int} | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_28756() { testValid("({int, int} | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_28757() { testValid("({int, int} | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_28758() { testValid("({int, int} | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_28759() { testValid("({int, int} | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_28760() { testValid("({int, int} | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_28761() { testValid("({int, int} | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_28762() { testValid("({int, int} | (any | any))","({any} | (int | any))"); }
		@Test public void test_28763() { testValid("({int, int} | (any | any))","(!int | (int | any))"); }
		@Test public void test_28764() { testValid("({int, int} | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_28765() { testValid("({int, int} | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_28766() { testValid("({int, int} | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_28767() { testValid("({int, int} | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28768() { testValid("({int, int} | (any | any))","({any} | (any | int))"); }
		@Test public void test_28769() { testValid("({int, int} | (any | any))","({int} | (any | int))"); }
		@Test public void test_28770() { testValid("({int, int} | (any | any))","(!any | (any | int))"); }
		@Test public void test_28771() { testValid("({int, int} | (any | any))","(!int | (any | int))"); }
		@Test public void test_28772() { testValid("({int, int} | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28773() { testValid("({int, int} | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28774() { testValid("({int, int} | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28775() { testValid("({int, int} | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28776() { testValid("({int, int} | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28777() { testValid("({int, int} | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28778() { testValid("({int, int} | (any | any))","({int} | (int | int))"); }
		@Test public void test_28779() { testValid("({int, int} | (any | any))","(!any | (int | int))"); }
		@Test public void test_28780() { testValid("({int, int} | (any | any))","(!int | (int | int))"); }
		@Test public void test_28781() { testValid("({int, int} | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28782() { testValid("({int, int} | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28783() { testValid("({int, int} | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28784() { testValid("({int, int} | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28785() { testValid("({int, int} | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28786() { testValid("({int, int} | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28787() { testValid("({int, int} | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28788() { testValid("({int, int} | (any | any))","(!any | (any & any))"); }
		@Test public void test_28789() { testValid("({int, int} | (any | any))","(!int | (any & any))"); }
		@Test public void test_28790() { testValid("({int, int} | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28791() { testValid("({int, int} | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28792() { testValid("({int, int} | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28793() { testValid("({int, int} | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28794() { testValid("({int, int} | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28795() { testValid("({int, int} | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28796() { testValid("({int, int} | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28797() { testValid("({int, int} | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28798() { testValid("({int, int} | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28799() { testValid("({int, int} | (any | any))","({any} | (int & any))"); }
		@Test public void test_28800() { testValid("((int | any) | (any | any))","{int}"); }
		@Test public void test_28801() { testValid("((int | any) | (any | any))","{any, any}"); }
		@Test public void test_28802() { testValid("((int | any) | (any | any))","{int, int}"); }
		@Test public void test_28803() { testValid("((int | any) | (any | any))","(any | int)"); }
		@Test public void test_28804() { testValid("((int | any) | (any | any))","(int & any)"); }
		@Test public void test_28805() { testValid("((int | any) | (any | any))","{{any}}"); }
		@Test public void test_28806() { testValid("((int | any) | (any | any))","{{int, any}}"); }
		@Test public void test_28807() { testValid("((int | any) | (any | any))","{{int, int}}"); }
		@Test public void test_28808() { testValid("((int | any) | (any | any))","{(any | int)}"); }
		@Test public void test_28809() { testValid("((int | any) | (any | any))","!{int, any}"); }
		@Test public void test_28810() { testValid("((int | any) | (any | any))","!{int, int}"); }
		@Test public void test_28811() { testValid("((int | any) | (any | any))","!(any | any)"); }
		@Test public void test_28812() { testValid("((int | any) | (any | any))","!(any & any)"); }
		@Test public void test_28813() { testValid("((int | any) | (any | any))","!(int & int)"); }
		@Test public void test_28814() { testValid("((int | any) | (any | any))","{{int}, {any}}"); }
		@Test public void test_28815() { testValid("((int | any) | (any | any))","{!int, {any}}"); }
		@Test public void test_28816() { testValid("((int | any) | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_28817() { testValid("((int | any) | (any | any))","{(any | int), {any}}"); }
		@Test public void test_28818() { testValid("((int | any) | (any | any))","{!int, {int}}"); }
		@Test public void test_28819() { testValid("((int | any) | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_28820() { testValid("((int | any) | (any | any))","{(any | any), {int}}"); }
		@Test public void test_28821() { testValid("((int | any) | (any | any))","{(any & any), {int}}"); }
		@Test public void test_28822() { testValid("((int | any) | (any | any))","{(any & int), {int}}"); }
		@Test public void test_28823() { testValid("((int | any) | (any | any))","{{any, any}, !int}"); }
		@Test public void test_28824() { testValid("((int | any) | (any | any))","{{any, int}, !int}"); }
		@Test public void test_28825() { testValid("((int | any) | (any | any))","{(any | any), !int}"); }
		@Test public void test_28826() { testValid("((int | any) | (any | any))","{(int | any), !int}"); }
		@Test public void test_28827() { testValid("((int | any) | (any | any))","{(any & any), !int}"); }
		@Test public void test_28828() { testValid("((int | any) | (any | any))","{(int & any), !int}"); }
		@Test public void test_28829() { testValid("((int | any) | (any | any))","{(int & int), !int}"); }
		@Test public void test_28830() { testValid("((int | any) | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_28831() { testValid("((int | any) | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_28832() { testValid("((int | any) | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_28833() { testValid("((int | any) | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_28834() { testValid("((int | any) | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_28835() { testValid("((int | any) | (any | any))","{!int, {int, any}}"); }
		@Test public void test_28836() { testValid("((int | any) | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_28837() { testValid("((int | any) | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_28838() { testValid("((int | any) | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_28839() { testValid("((int | any) | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_28840() { testValid("((int | any) | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_28841() { testValid("((int | any) | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_28842() { testValid("((int | any) | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_28843() { testValid("((int | any) | (any | any))","{!int, {int, int}}"); }
		@Test public void test_28844() { testValid("((int | any) | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_28845() { testValid("((int | any) | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_28846() { testValid("((int | any) | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_28847() { testValid("((int | any) | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_28848() { testValid("((int | any) | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_28849() { testValid("((int | any) | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_28850() { testValid("((int | any) | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_28851() { testValid("((int | any) | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_28852() { testValid("((int | any) | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_28853() { testValid("((int | any) | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_28854() { testValid("((int | any) | (any | any))","{!int, (int | any)}"); }
		@Test public void test_28855() { testValid("((int | any) | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_28856() { testValid("((int | any) | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_28857() { testValid("((int | any) | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_28858() { testValid("((int | any) | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_28859() { testValid("((int | any) | (any | any))","{!int, (any | int)}"); }
		@Test public void test_28860() { testValid("((int | any) | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_28861() { testValid("((int | any) | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_28862() { testValid("((int | any) | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_28863() { testValid("((int | any) | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_28864() { testValid("((int | any) | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_28865() { testValid("((int | any) | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_28866() { testValid("((int | any) | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_28867() { testValid("((int | any) | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_28868() { testValid("((int | any) | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_28869() { testValid("((int | any) | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_28870() { testValid("((int | any) | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_28871() { testValid("((int | any) | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_28872() { testValid("((int | any) | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_28873() { testValid("((int | any) | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_28874() { testValid("((int | any) | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_28875() { testValid("((int | any) | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_28876() { testValid("((int | any) | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_28877() { testValid("((int | any) | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_28878() { testValid("((int | any) | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_28879() { testValid("((int | any) | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_28880() { testValid("((int | any) | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_28881() { testValid("((int | any) | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_28882() { testValid("((int | any) | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_28883() { testValid("((int | any) | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_28884() { testValid("((int | any) | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_28885() { testValid("((int | any) | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_28886() { testValid("((int | any) | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_28887() { testValid("((int | any) | (any | any))","(!int | {any})"); }
		@Test public void test_28888() { testValid("((int | any) | (any | any))","({any, any} | {any})"); }
		@Test public void test_28889() { testValid("((int | any) | (any | any))","((any | any) | {any})"); }
		@Test public void test_28890() { testValid("((int | any) | (any | any))","((int | any) | {any})"); }
		@Test public void test_28891() { testValid("((int | any) | (any | any))","((any & any) | {any})"); }
		@Test public void test_28892() { testValid("((int | any) | (any | any))","((int & any) | {any})"); }
		@Test public void test_28893() { testValid("((int | any) | (any | any))","((any & int) | {any})"); }
		@Test public void test_28894() { testValid("((int | any) | (any | any))","({int} | {int})"); }
		@Test public void test_28895() { testValid("((int | any) | (any | any))","(!any | {int})"); }
		@Test public void test_28896() { testValid("((int | any) | (any | any))","(!int | {int})"); }
		@Test public void test_28897() { testValid("((int | any) | (any | any))","({any, int} | {int})"); }
		@Test public void test_28898() { testValid("((int | any) | (any | any))","((int & any) | {int})"); }
		@Test public void test_28899() { testValid("((int | any) | (any | any))","((any & int) | {int})"); }
		@Test public void test_28900() { testValid("((int | any) | (any | any))","((int & int) | {int})"); }
		@Test public void test_28901() { testValid("((int | any) | (any | any))","({any} | !any)"); }
		@Test public void test_28902() { testValid("((int | any) | (any | any))","({int} | !any)"); }
		@Test public void test_28903() { testValid("((int | any) | (any | any))","({any, any} | !any)"); }
		@Test public void test_28904() { testValid("((int | any) | (any | any))","({int, int} | !any)"); }
		@Test public void test_28905() { testValid("((int | any) | (any | any))","((any | any) | !any)"); }
		@Test public void test_28906() { testValid("((int | any) | (any | any))","((int | any) | !any)"); }
		@Test public void test_28907() { testValid("((int | any) | (any | any))","((int | int) | !any)"); }
		@Test public void test_28908() { testValid("((int | any) | (any | any))","((int & int) | !any)"); }
		@Test public void test_28909() { testValid("((int | any) | (any | any))","(!int | !int)"); }
		@Test public void test_28910() { testValid("((int | any) | (any | any))","({any, any} | !int)"); }
		@Test public void test_28911() { testValid("((int | any) | (any | any))","({int, int} | !int)"); }
		@Test public void test_28912() { testValid("((int | any) | (any | any))","((int | any) | !int)"); }
		@Test public void test_28913() { testValid("((int | any) | (any | any))","((any | int) | !int)"); }
		@Test public void test_28914() { testValid("((int | any) | (any | any))","((any & int) | !int)"); }
		@Test public void test_28915() { testValid("((int | any) | (any | any))","((int & int) | !int)"); }
		@Test public void test_28916() { testValid("((int | any) | (any | any))","({int} | {any, any})"); }
		@Test public void test_28917() { testValid("((int | any) | (any | any))","(!any | {any, any})"); }
		@Test public void test_28918() { testValid("((int | any) | (any | any))","(!int | {any, any})"); }
		@Test public void test_28919() { testValid("((int | any) | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_28920() { testValid("((int | any) | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_28921() { testValid("((int | any) | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_28922() { testValid("((int | any) | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_28923() { testValid("((int | any) | (any | any))","(!int | {int, any})"); }
		@Test public void test_28924() { testValid("((int | any) | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_28925() { testValid("((int | any) | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_28926() { testValid("((int | any) | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_28927() { testValid("((int | any) | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_28928() { testValid("((int | any) | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_28929() { testValid("((int | any) | (any | any))","({any} | {any, int})"); }
		@Test public void test_28930() { testValid("((int | any) | (any | any))","(!int | {any, int})"); }
		@Test public void test_28931() { testValid("((int | any) | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_28932() { testValid("((int | any) | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_28933() { testValid("((int | any) | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_28934() { testValid("((int | any) | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_28935() { testValid("((int | any) | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_28936() { testValid("((int | any) | (any | any))","(!any | {int, int})"); }
		@Test public void test_28937() { testValid("((int | any) | (any | any))","(!int | {int, int})"); }
		@Test public void test_28938() { testValid("((int | any) | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_28939() { testValid("((int | any) | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_28940() { testValid("((int | any) | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_28941() { testValid("((int | any) | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_28942() { testValid("((int | any) | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_28943() { testValid("((int | any) | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_28944() { testValid("((int | any) | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_28945() { testValid("((int | any) | (any | any))","({any} | (any | any))"); }
		@Test public void test_28946() { testValid("((int | any) | (any | any))","(!any | (any | any))"); }
		@Test public void test_28947() { testValid("((int | any) | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_28948() { testValid("((int | any) | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_28949() { testValid("((int | any) | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_28950() { testValid("((int | any) | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_28951() { testValid("((int | any) | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_28952() { testValid("((int | any) | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_28953() { testValid("((int | any) | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_28954() { testValid("((int | any) | (any | any))","({any} | (int | any))"); }
		@Test public void test_28955() { testValid("((int | any) | (any | any))","(!int | (int | any))"); }
		@Test public void test_28956() { testValid("((int | any) | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_28957() { testValid("((int | any) | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_28958() { testValid("((int | any) | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_28959() { testValid("((int | any) | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_28960() { testValid("((int | any) | (any | any))","({any} | (any | int))"); }
		@Test public void test_28961() { testValid("((int | any) | (any | any))","({int} | (any | int))"); }
		@Test public void test_28962() { testValid("((int | any) | (any | any))","(!any | (any | int))"); }
		@Test public void test_28963() { testValid("((int | any) | (any | any))","(!int | (any | int))"); }
		@Test public void test_28964() { testValid("((int | any) | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_28965() { testValid("((int | any) | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_28966() { testValid("((int | any) | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_28967() { testValid("((int | any) | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_28968() { testValid("((int | any) | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_28969() { testValid("((int | any) | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_28970() { testValid("((int | any) | (any | any))","({int} | (int | int))"); }
		@Test public void test_28971() { testValid("((int | any) | (any | any))","(!any | (int | int))"); }
		@Test public void test_28972() { testValid("((int | any) | (any | any))","(!int | (int | int))"); }
		@Test public void test_28973() { testValid("((int | any) | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_28974() { testValid("((int | any) | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_28975() { testValid("((int | any) | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_28976() { testValid("((int | any) | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_28977() { testValid("((int | any) | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_28978() { testValid("((int | any) | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_28979() { testValid("((int | any) | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_28980() { testValid("((int | any) | (any | any))","(!any | (any & any))"); }
		@Test public void test_28981() { testValid("((int | any) | (any | any))","(!int | (any & any))"); }
		@Test public void test_28982() { testValid("((int | any) | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_28983() { testValid("((int | any) | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_28984() { testValid("((int | any) | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_28985() { testValid("((int | any) | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_28986() { testValid("((int | any) | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_28987() { testValid("((int | any) | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_28988() { testValid("((int | any) | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_28989() { testValid("((int | any) | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_28990() { testValid("((int | any) | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_28991() { testValid("((int | any) | (any | any))","({any} | (int & any))"); }
		@Test public void test_28992() { testValid("((any | int) | (any | any))","{int}"); }
		@Test public void test_28993() { testValid("((any | int) | (any | any))","{any, any}"); }
		@Test public void test_28994() { testValid("((any | int) | (any | any))","{int, int}"); }
		@Test public void test_28995() { testValid("((any | int) | (any | any))","(any | int)"); }
		@Test public void test_28996() { testValid("((any | int) | (any | any))","(int & any)"); }
		@Test public void test_28997() { testValid("((any | int) | (any | any))","{{any}}"); }
		@Test public void test_28998() { testValid("((any | int) | (any | any))","{{int, any}}"); }
		@Test public void test_28999() { testValid("((any | int) | (any | any))","{{int, int}}"); }
		@Test public void test_29000() { testValid("((any | int) | (any | any))","{(any | int)}"); }
		@Test public void test_29001() { testValid("((any | int) | (any | any))","!{int, any}"); }
		@Test public void test_29002() { testValid("((any | int) | (any | any))","!{int, int}"); }
		@Test public void test_29003() { testValid("((any | int) | (any | any))","!(any | any)"); }
		@Test public void test_29004() { testValid("((any | int) | (any | any))","!(any & any)"); }
		@Test public void test_29005() { testValid("((any | int) | (any | any))","!(int & int)"); }
		@Test public void test_29006() { testValid("((any | int) | (any | any))","{{int}, {any}}"); }
		@Test public void test_29007() { testValid("((any | int) | (any | any))","{!int, {any}}"); }
		@Test public void test_29008() { testValid("((any | int) | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_29009() { testValid("((any | int) | (any | any))","{(any | int), {any}}"); }
		@Test public void test_29010() { testValid("((any | int) | (any | any))","{!int, {int}}"); }
		@Test public void test_29011() { testValid("((any | int) | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_29012() { testValid("((any | int) | (any | any))","{(any | any), {int}}"); }
		@Test public void test_29013() { testValid("((any | int) | (any | any))","{(any & any), {int}}"); }
		@Test public void test_29014() { testValid("((any | int) | (any | any))","{(any & int), {int}}"); }
		@Test public void test_29015() { testValid("((any | int) | (any | any))","{{any, any}, !int}"); }
		@Test public void test_29016() { testValid("((any | int) | (any | any))","{{any, int}, !int}"); }
		@Test public void test_29017() { testValid("((any | int) | (any | any))","{(any | any), !int}"); }
		@Test public void test_29018() { testValid("((any | int) | (any | any))","{(int | any), !int}"); }
		@Test public void test_29019() { testValid("((any | int) | (any | any))","{(any & any), !int}"); }
		@Test public void test_29020() { testValid("((any | int) | (any | any))","{(int & any), !int}"); }
		@Test public void test_29021() { testValid("((any | int) | (any | any))","{(int & int), !int}"); }
		@Test public void test_29022() { testValid("((any | int) | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_29023() { testValid("((any | int) | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_29024() { testValid("((any | int) | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29025() { testValid("((any | int) | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_29026() { testValid("((any | int) | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_29027() { testValid("((any | int) | (any | any))","{!int, {int, any}}"); }
		@Test public void test_29028() { testValid("((any | int) | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29029() { testValid("((any | int) | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29030() { testValid("((any | int) | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_29031() { testValid("((any | int) | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_29032() { testValid("((any | int) | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29033() { testValid("((any | int) | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_29034() { testValid("((any | int) | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_29035() { testValid("((any | int) | (any | any))","{!int, {int, int}}"); }
		@Test public void test_29036() { testValid("((any | int) | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29037() { testValid("((any | int) | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_29038() { testValid("((any | int) | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_29039() { testValid("((any | int) | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_29040() { testValid("((any | int) | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_29041() { testValid("((any | int) | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_29042() { testValid("((any | int) | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_29043() { testValid("((any | int) | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_29044() { testValid("((any | int) | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_29045() { testValid("((any | int) | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_29046() { testValid("((any | int) | (any | any))","{!int, (int | any)}"); }
		@Test public void test_29047() { testValid("((any | int) | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_29048() { testValid("((any | int) | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_29049() { testValid("((any | int) | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_29050() { testValid("((any | int) | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_29051() { testValid("((any | int) | (any | any))","{!int, (any | int)}"); }
		@Test public void test_29052() { testValid("((any | int) | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_29053() { testValid("((any | int) | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_29054() { testValid("((any | int) | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_29055() { testValid("((any | int) | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_29056() { testValid("((any | int) | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_29057() { testValid("((any | int) | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_29058() { testValid("((any | int) | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_29059() { testValid("((any | int) | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_29060() { testValid("((any | int) | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_29061() { testValid("((any | int) | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_29062() { testValid("((any | int) | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_29063() { testValid("((any | int) | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_29064() { testValid("((any | int) | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_29065() { testValid("((any | int) | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_29066() { testValid("((any | int) | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_29067() { testValid("((any | int) | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_29068() { testValid("((any | int) | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_29069() { testValid("((any | int) | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_29070() { testValid("((any | int) | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_29071() { testValid("((any | int) | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_29072() { testValid("((any | int) | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_29073() { testValid("((any | int) | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_29074() { testValid("((any | int) | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_29075() { testValid("((any | int) | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_29076() { testValid("((any | int) | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_29077() { testValid("((any | int) | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_29078() { testValid("((any | int) | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_29079() { testValid("((any | int) | (any | any))","(!int | {any})"); }
		@Test public void test_29080() { testValid("((any | int) | (any | any))","({any, any} | {any})"); }
		@Test public void test_29081() { testValid("((any | int) | (any | any))","((any | any) | {any})"); }
		@Test public void test_29082() { testValid("((any | int) | (any | any))","((int | any) | {any})"); }
		@Test public void test_29083() { testValid("((any | int) | (any | any))","((any & any) | {any})"); }
		@Test public void test_29084() { testValid("((any | int) | (any | any))","((int & any) | {any})"); }
		@Test public void test_29085() { testValid("((any | int) | (any | any))","((any & int) | {any})"); }
		@Test public void test_29086() { testValid("((any | int) | (any | any))","({int} | {int})"); }
		@Test public void test_29087() { testValid("((any | int) | (any | any))","(!any | {int})"); }
		@Test public void test_29088() { testValid("((any | int) | (any | any))","(!int | {int})"); }
		@Test public void test_29089() { testValid("((any | int) | (any | any))","({any, int} | {int})"); }
		@Test public void test_29090() { testValid("((any | int) | (any | any))","((int & any) | {int})"); }
		@Test public void test_29091() { testValid("((any | int) | (any | any))","((any & int) | {int})"); }
		@Test public void test_29092() { testValid("((any | int) | (any | any))","((int & int) | {int})"); }
		@Test public void test_29093() { testValid("((any | int) | (any | any))","({any} | !any)"); }
		@Test public void test_29094() { testValid("((any | int) | (any | any))","({int} | !any)"); }
		@Test public void test_29095() { testValid("((any | int) | (any | any))","({any, any} | !any)"); }
		@Test public void test_29096() { testValid("((any | int) | (any | any))","({int, int} | !any)"); }
		@Test public void test_29097() { testValid("((any | int) | (any | any))","((any | any) | !any)"); }
		@Test public void test_29098() { testValid("((any | int) | (any | any))","((int | any) | !any)"); }
		@Test public void test_29099() { testValid("((any | int) | (any | any))","((int | int) | !any)"); }
		@Test public void test_29100() { testValid("((any | int) | (any | any))","((int & int) | !any)"); }
		@Test public void test_29101() { testValid("((any | int) | (any | any))","(!int | !int)"); }
		@Test public void test_29102() { testValid("((any | int) | (any | any))","({any, any} | !int)"); }
		@Test public void test_29103() { testValid("((any | int) | (any | any))","({int, int} | !int)"); }
		@Test public void test_29104() { testValid("((any | int) | (any | any))","((int | any) | !int)"); }
		@Test public void test_29105() { testValid("((any | int) | (any | any))","((any | int) | !int)"); }
		@Test public void test_29106() { testValid("((any | int) | (any | any))","((any & int) | !int)"); }
		@Test public void test_29107() { testValid("((any | int) | (any | any))","((int & int) | !int)"); }
		@Test public void test_29108() { testValid("((any | int) | (any | any))","({int} | {any, any})"); }
		@Test public void test_29109() { testValid("((any | int) | (any | any))","(!any | {any, any})"); }
		@Test public void test_29110() { testValid("((any | int) | (any | any))","(!int | {any, any})"); }
		@Test public void test_29111() { testValid("((any | int) | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_29112() { testValid("((any | int) | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_29113() { testValid("((any | int) | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_29114() { testValid("((any | int) | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_29115() { testValid("((any | int) | (any | any))","(!int | {int, any})"); }
		@Test public void test_29116() { testValid("((any | int) | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_29117() { testValid("((any | int) | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_29118() { testValid("((any | int) | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_29119() { testValid("((any | int) | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_29120() { testValid("((any | int) | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_29121() { testValid("((any | int) | (any | any))","({any} | {any, int})"); }
		@Test public void test_29122() { testValid("((any | int) | (any | any))","(!int | {any, int})"); }
		@Test public void test_29123() { testValid("((any | int) | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_29124() { testValid("((any | int) | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_29125() { testValid("((any | int) | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_29126() { testValid("((any | int) | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_29127() { testValid("((any | int) | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_29128() { testValid("((any | int) | (any | any))","(!any | {int, int})"); }
		@Test public void test_29129() { testValid("((any | int) | (any | any))","(!int | {int, int})"); }
		@Test public void test_29130() { testValid("((any | int) | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_29131() { testValid("((any | int) | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_29132() { testValid("((any | int) | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_29133() { testValid("((any | int) | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_29134() { testValid("((any | int) | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_29135() { testValid("((any | int) | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_29136() { testValid("((any | int) | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_29137() { testValid("((any | int) | (any | any))","({any} | (any | any))"); }
		@Test public void test_29138() { testValid("((any | int) | (any | any))","(!any | (any | any))"); }
		@Test public void test_29139() { testValid("((any | int) | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_29140() { testValid("((any | int) | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_29141() { testValid("((any | int) | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_29142() { testValid("((any | int) | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_29143() { testValid("((any | int) | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_29144() { testValid("((any | int) | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_29145() { testValid("((any | int) | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_29146() { testValid("((any | int) | (any | any))","({any} | (int | any))"); }
		@Test public void test_29147() { testValid("((any | int) | (any | any))","(!int | (int | any))"); }
		@Test public void test_29148() { testValid("((any | int) | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_29149() { testValid("((any | int) | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_29150() { testValid("((any | int) | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_29151() { testValid("((any | int) | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_29152() { testValid("((any | int) | (any | any))","({any} | (any | int))"); }
		@Test public void test_29153() { testValid("((any | int) | (any | any))","({int} | (any | int))"); }
		@Test public void test_29154() { testValid("((any | int) | (any | any))","(!any | (any | int))"); }
		@Test public void test_29155() { testValid("((any | int) | (any | any))","(!int | (any | int))"); }
		@Test public void test_29156() { testValid("((any | int) | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_29157() { testValid("((any | int) | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_29158() { testValid("((any | int) | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_29159() { testValid("((any | int) | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_29160() { testValid("((any | int) | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_29161() { testValid("((any | int) | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_29162() { testValid("((any | int) | (any | any))","({int} | (int | int))"); }
		@Test public void test_29163() { testValid("((any | int) | (any | any))","(!any | (int | int))"); }
		@Test public void test_29164() { testValid("((any | int) | (any | any))","(!int | (int | int))"); }
		@Test public void test_29165() { testValid("((any | int) | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_29166() { testValid("((any | int) | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_29167() { testValid("((any | int) | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_29168() { testValid("((any | int) | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_29169() { testValid("((any | int) | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_29170() { testValid("((any | int) | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_29171() { testValid("((any | int) | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_29172() { testValid("((any | int) | (any | any))","(!any | (any & any))"); }
		@Test public void test_29173() { testValid("((any | int) | (any | any))","(!int | (any & any))"); }
		@Test public void test_29174() { testValid("((any | int) | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_29175() { testValid("((any | int) | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_29176() { testValid("((any | int) | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_29177() { testValid("((any | int) | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_29178() { testValid("((any | int) | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_29179() { testValid("((any | int) | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_29180() { testValid("((any | int) | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_29181() { testValid("((any | int) | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_29182() { testValid("((any | int) | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_29183() { testValid("((any | int) | (any | any))","({any} | (int & any))"); }
		@Test public void test_29184() { testValid("((any & int) | (any | any))","{int}"); }
		@Test public void test_29185() { testValid("((any & int) | (any | any))","{any, any}"); }
		@Test public void test_29186() { testValid("((any & int) | (any | any))","{int, int}"); }
		@Test public void test_29187() { testValid("((any & int) | (any | any))","(any | int)"); }
		@Test public void test_29188() { testValid("((any & int) | (any | any))","(int & any)"); }
		@Test public void test_29189() { testValid("((any & int) | (any | any))","{{any}}"); }
		@Test public void test_29190() { testValid("((any & int) | (any | any))","{{int, any}}"); }
		@Test public void test_29191() { testValid("((any & int) | (any | any))","{{int, int}}"); }
		@Test public void test_29192() { testValid("((any & int) | (any | any))","{(any | int)}"); }
		@Test public void test_29193() { testValid("((any & int) | (any | any))","!{int, any}"); }
		@Test public void test_29194() { testValid("((any & int) | (any | any))","!{int, int}"); }
		@Test public void test_29195() { testValid("((any & int) | (any | any))","!(any | any)"); }
		@Test public void test_29196() { testValid("((any & int) | (any | any))","!(any & any)"); }
		@Test public void test_29197() { testValid("((any & int) | (any | any))","!(int & int)"); }
		@Test public void test_29198() { testValid("((any & int) | (any | any))","{{int}, {any}}"); }
		@Test public void test_29199() { testValid("((any & int) | (any | any))","{!int, {any}}"); }
		@Test public void test_29200() { testValid("((any & int) | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_29201() { testValid("((any & int) | (any | any))","{(any | int), {any}}"); }
		@Test public void test_29202() { testValid("((any & int) | (any | any))","{!int, {int}}"); }
		@Test public void test_29203() { testValid("((any & int) | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_29204() { testValid("((any & int) | (any | any))","{(any | any), {int}}"); }
		@Test public void test_29205() { testValid("((any & int) | (any | any))","{(any & any), {int}}"); }
		@Test public void test_29206() { testValid("((any & int) | (any | any))","{(any & int), {int}}"); }
		@Test public void test_29207() { testValid("((any & int) | (any | any))","{{any, any}, !int}"); }
		@Test public void test_29208() { testValid("((any & int) | (any | any))","{{any, int}, !int}"); }
		@Test public void test_29209() { testValid("((any & int) | (any | any))","{(any | any), !int}"); }
		@Test public void test_29210() { testValid("((any & int) | (any | any))","{(int | any), !int}"); }
		@Test public void test_29211() { testValid("((any & int) | (any | any))","{(any & any), !int}"); }
		@Test public void test_29212() { testValid("((any & int) | (any | any))","{(int & any), !int}"); }
		@Test public void test_29213() { testValid("((any & int) | (any | any))","{(int & int), !int}"); }
		@Test public void test_29214() { testValid("((any & int) | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_29215() { testValid("((any & int) | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_29216() { testValid("((any & int) | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29217() { testValid("((any & int) | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_29218() { testValid("((any & int) | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_29219() { testValid("((any & int) | (any | any))","{!int, {int, any}}"); }
		@Test public void test_29220() { testValid("((any & int) | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29221() { testValid("((any & int) | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29222() { testValid("((any & int) | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_29223() { testValid("((any & int) | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_29224() { testValid("((any & int) | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29225() { testValid("((any & int) | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_29226() { testValid("((any & int) | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_29227() { testValid("((any & int) | (any | any))","{!int, {int, int}}"); }
		@Test public void test_29228() { testValid("((any & int) | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29229() { testValid("((any & int) | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_29230() { testValid("((any & int) | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_29231() { testValid("((any & int) | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_29232() { testValid("((any & int) | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_29233() { testValid("((any & int) | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_29234() { testValid("((any & int) | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_29235() { testValid("((any & int) | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_29236() { testValid("((any & int) | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_29237() { testValid("((any & int) | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_29238() { testValid("((any & int) | (any | any))","{!int, (int | any)}"); }
		@Test public void test_29239() { testValid("((any & int) | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_29240() { testValid("((any & int) | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_29241() { testValid("((any & int) | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_29242() { testValid("((any & int) | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_29243() { testValid("((any & int) | (any | any))","{!int, (any | int)}"); }
		@Test public void test_29244() { testValid("((any & int) | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_29245() { testValid("((any & int) | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_29246() { testValid("((any & int) | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_29247() { testValid("((any & int) | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_29248() { testValid("((any & int) | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_29249() { testValid("((any & int) | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_29250() { testValid("((any & int) | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_29251() { testValid("((any & int) | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_29252() { testValid("((any & int) | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_29253() { testValid("((any & int) | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_29254() { testValid("((any & int) | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_29255() { testValid("((any & int) | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_29256() { testValid("((any & int) | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_29257() { testValid("((any & int) | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_29258() { testValid("((any & int) | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_29259() { testValid("((any & int) | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_29260() { testValid("((any & int) | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_29261() { testValid("((any & int) | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_29262() { testValid("((any & int) | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_29263() { testValid("((any & int) | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_29264() { testValid("((any & int) | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_29265() { testValid("((any & int) | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_29266() { testValid("((any & int) | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_29267() { testValid("((any & int) | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_29268() { testValid("((any & int) | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_29269() { testValid("((any & int) | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_29270() { testValid("((any & int) | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_29271() { testValid("((any & int) | (any | any))","(!int | {any})"); }
		@Test public void test_29272() { testValid("((any & int) | (any | any))","({any, any} | {any})"); }
		@Test public void test_29273() { testValid("((any & int) | (any | any))","((any | any) | {any})"); }
		@Test public void test_29274() { testValid("((any & int) | (any | any))","((int | any) | {any})"); }
		@Test public void test_29275() { testValid("((any & int) | (any | any))","((any & any) | {any})"); }
		@Test public void test_29276() { testValid("((any & int) | (any | any))","((int & any) | {any})"); }
		@Test public void test_29277() { testValid("((any & int) | (any | any))","((any & int) | {any})"); }
		@Test public void test_29278() { testValid("((any & int) | (any | any))","({int} | {int})"); }
		@Test public void test_29279() { testValid("((any & int) | (any | any))","(!any | {int})"); }
		@Test public void test_29280() { testValid("((any & int) | (any | any))","(!int | {int})"); }
		@Test public void test_29281() { testValid("((any & int) | (any | any))","({any, int} | {int})"); }
		@Test public void test_29282() { testValid("((any & int) | (any | any))","((int & any) | {int})"); }
		@Test public void test_29283() { testValid("((any & int) | (any | any))","((any & int) | {int})"); }
		@Test public void test_29284() { testValid("((any & int) | (any | any))","((int & int) | {int})"); }
		@Test public void test_29285() { testValid("((any & int) | (any | any))","({any} | !any)"); }
		@Test public void test_29286() { testValid("((any & int) | (any | any))","({int} | !any)"); }
		@Test public void test_29287() { testValid("((any & int) | (any | any))","({any, any} | !any)"); }
		@Test public void test_29288() { testValid("((any & int) | (any | any))","({int, int} | !any)"); }
		@Test public void test_29289() { testValid("((any & int) | (any | any))","((any | any) | !any)"); }
		@Test public void test_29290() { testValid("((any & int) | (any | any))","((int | any) | !any)"); }
		@Test public void test_29291() { testValid("((any & int) | (any | any))","((int | int) | !any)"); }
		@Test public void test_29292() { testValid("((any & int) | (any | any))","((int & int) | !any)"); }
		@Test public void test_29293() { testValid("((any & int) | (any | any))","(!int | !int)"); }
		@Test public void test_29294() { testValid("((any & int) | (any | any))","({any, any} | !int)"); }
		@Test public void test_29295() { testValid("((any & int) | (any | any))","({int, int} | !int)"); }
		@Test public void test_29296() { testValid("((any & int) | (any | any))","((int | any) | !int)"); }
		@Test public void test_29297() { testValid("((any & int) | (any | any))","((any | int) | !int)"); }
		@Test public void test_29298() { testValid("((any & int) | (any | any))","((any & int) | !int)"); }
		@Test public void test_29299() { testValid("((any & int) | (any | any))","((int & int) | !int)"); }
		@Test public void test_29300() { testValid("((any & int) | (any | any))","({int} | {any, any})"); }
		@Test public void test_29301() { testValid("((any & int) | (any | any))","(!any | {any, any})"); }
		@Test public void test_29302() { testValid("((any & int) | (any | any))","(!int | {any, any})"); }
		@Test public void test_29303() { testValid("((any & int) | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_29304() { testValid("((any & int) | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_29305() { testValid("((any & int) | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_29306() { testValid("((any & int) | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_29307() { testValid("((any & int) | (any | any))","(!int | {int, any})"); }
		@Test public void test_29308() { testValid("((any & int) | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_29309() { testValid("((any & int) | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_29310() { testValid("((any & int) | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_29311() { testValid("((any & int) | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_29312() { testValid("((any & int) | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_29313() { testValid("((any & int) | (any | any))","({any} | {any, int})"); }
		@Test public void test_29314() { testValid("((any & int) | (any | any))","(!int | {any, int})"); }
		@Test public void test_29315() { testValid("((any & int) | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_29316() { testValid("((any & int) | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_29317() { testValid("((any & int) | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_29318() { testValid("((any & int) | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_29319() { testValid("((any & int) | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_29320() { testValid("((any & int) | (any | any))","(!any | {int, int})"); }
		@Test public void test_29321() { testValid("((any & int) | (any | any))","(!int | {int, int})"); }
		@Test public void test_29322() { testValid("((any & int) | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_29323() { testValid("((any & int) | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_29324() { testValid("((any & int) | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_29325() { testValid("((any & int) | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_29326() { testValid("((any & int) | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_29327() { testValid("((any & int) | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_29328() { testValid("((any & int) | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_29329() { testValid("((any & int) | (any | any))","({any} | (any | any))"); }
		@Test public void test_29330() { testValid("((any & int) | (any | any))","(!any | (any | any))"); }
		@Test public void test_29331() { testValid("((any & int) | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_29332() { testValid("((any & int) | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_29333() { testValid("((any & int) | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_29334() { testValid("((any & int) | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_29335() { testValid("((any & int) | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_29336() { testValid("((any & int) | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_29337() { testValid("((any & int) | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_29338() { testValid("((any & int) | (any | any))","({any} | (int | any))"); }
		@Test public void test_29339() { testValid("((any & int) | (any | any))","(!int | (int | any))"); }
		@Test public void test_29340() { testValid("((any & int) | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_29341() { testValid("((any & int) | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_29342() { testValid("((any & int) | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_29343() { testValid("((any & int) | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_29344() { testValid("((any & int) | (any | any))","({any} | (any | int))"); }
		@Test public void test_29345() { testValid("((any & int) | (any | any))","({int} | (any | int))"); }
		@Test public void test_29346() { testValid("((any & int) | (any | any))","(!any | (any | int))"); }
		@Test public void test_29347() { testValid("((any & int) | (any | any))","(!int | (any | int))"); }
		@Test public void test_29348() { testValid("((any & int) | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_29349() { testValid("((any & int) | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_29350() { testValid("((any & int) | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_29351() { testValid("((any & int) | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_29352() { testValid("((any & int) | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_29353() { testValid("((any & int) | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_29354() { testValid("((any & int) | (any | any))","({int} | (int | int))"); }
		@Test public void test_29355() { testValid("((any & int) | (any | any))","(!any | (int | int))"); }
		@Test public void test_29356() { testValid("((any & int) | (any | any))","(!int | (int | int))"); }
		@Test public void test_29357() { testValid("((any & int) | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_29358() { testValid("((any & int) | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_29359() { testValid("((any & int) | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_29360() { testValid("((any & int) | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_29361() { testValid("((any & int) | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_29362() { testValid("((any & int) | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_29363() { testValid("((any & int) | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_29364() { testValid("((any & int) | (any | any))","(!any | (any & any))"); }
		@Test public void test_29365() { testValid("((any & int) | (any | any))","(!int | (any & any))"); }
		@Test public void test_29366() { testValid("((any & int) | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_29367() { testValid("((any & int) | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_29368() { testValid("((any & int) | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_29369() { testValid("((any & int) | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_29370() { testValid("((any & int) | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_29371() { testValid("((any & int) | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_29372() { testValid("((any & int) | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_29373() { testValid("((any & int) | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_29374() { testValid("((any & int) | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_29375() { testValid("((any & int) | (any | any))","({any} | (int & any))"); }
		@Test public void test_29376() { testValid("((int & int) | (any | any))","{int}"); }
		@Test public void test_29377() { testValid("((int & int) | (any | any))","{any, any}"); }
		@Test public void test_29378() { testValid("((int & int) | (any | any))","{int, int}"); }
		@Test public void test_29379() { testValid("((int & int) | (any | any))","(any | int)"); }
		@Test public void test_29380() { testValid("((int & int) | (any | any))","(int & any)"); }
		@Test public void test_29381() { testValid("((int & int) | (any | any))","{{any}}"); }
		@Test public void test_29382() { testValid("((int & int) | (any | any))","{{int, any}}"); }
		@Test public void test_29383() { testValid("((int & int) | (any | any))","{{int, int}}"); }
		@Test public void test_29384() { testValid("((int & int) | (any | any))","{(any | int)}"); }
		@Test public void test_29385() { testValid("((int & int) | (any | any))","!{int, any}"); }
		@Test public void test_29386() { testValid("((int & int) | (any | any))","!{int, int}"); }
		@Test public void test_29387() { testValid("((int & int) | (any | any))","!(any | any)"); }
		@Test public void test_29388() { testValid("((int & int) | (any | any))","!(any & any)"); }
		@Test public void test_29389() { testValid("((int & int) | (any | any))","!(int & int)"); }
		@Test public void test_29390() { testValid("((int & int) | (any | any))","{{int}, {any}}"); }
		@Test public void test_29391() { testValid("((int & int) | (any | any))","{!int, {any}}"); }
		@Test public void test_29392() { testValid("((int & int) | (any | any))","{{int, int}, {any}}"); }
		@Test public void test_29393() { testValid("((int & int) | (any | any))","{(any | int), {any}}"); }
		@Test public void test_29394() { testValid("((int & int) | (any | any))","{!int, {int}}"); }
		@Test public void test_29395() { testValid("((int & int) | (any | any))","{{any, any}, {int}}"); }
		@Test public void test_29396() { testValid("((int & int) | (any | any))","{(any | any), {int}}"); }
		@Test public void test_29397() { testValid("((int & int) | (any | any))","{(any & any), {int}}"); }
		@Test public void test_29398() { testValid("((int & int) | (any | any))","{(any & int), {int}}"); }
		@Test public void test_29399() { testValid("((int & int) | (any | any))","{{any, any}, !int}"); }
		@Test public void test_29400() { testValid("((int & int) | (any | any))","{{any, int}, !int}"); }
		@Test public void test_29401() { testValid("((int & int) | (any | any))","{(any | any), !int}"); }
		@Test public void test_29402() { testValid("((int & int) | (any | any))","{(int | any), !int}"); }
		@Test public void test_29403() { testValid("((int & int) | (any | any))","{(any & any), !int}"); }
		@Test public void test_29404() { testValid("((int & int) | (any | any))","{(int & any), !int}"); }
		@Test public void test_29405() { testValid("((int & int) | (any | any))","{(int & int), !int}"); }
		@Test public void test_29406() { testValid("((int & int) | (any | any))","{{any}, {any, any}}"); }
		@Test public void test_29407() { testValid("((int & int) | (any | any))","{{int}, {any, any}}"); }
		@Test public void test_29408() { testValid("((int & int) | (any | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29409() { testValid("((int & int) | (any | any))","{(any | any), {any, any}}"); }
		@Test public void test_29410() { testValid("((int & int) | (any | any))","{(any | int), {any, any}}"); }
		@Test public void test_29411() { testValid("((int & int) | (any | any))","{!int, {int, any}}"); }
		@Test public void test_29412() { testValid("((int & int) | (any | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29413() { testValid("((int & int) | (any | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29414() { testValid("((int & int) | (any | any))","{(any & int), {int, any}}"); }
		@Test public void test_29415() { testValid("((int & int) | (any | any))","{{any}, {any, int}}"); }
		@Test public void test_29416() { testValid("((int & int) | (any | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29417() { testValid("((int & int) | (any | any))","{(int | int), {any, int}}"); }
		@Test public void test_29418() { testValid("((int & int) | (any | any))","{(any & int), {any, int}}"); }
		@Test public void test_29419() { testValid("((int & int) | (any | any))","{!int, {int, int}}"); }
		@Test public void test_29420() { testValid("((int & int) | (any | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29421() { testValid("((int & int) | (any | any))","{(any | any), {int, int}}"); }
		@Test public void test_29422() { testValid("((int & int) | (any | any))","{(int | any), {int, int}}"); }
		@Test public void test_29423() { testValid("((int & int) | (any | any))","{(int & any), {int, int}}"); }
		@Test public void test_29424() { testValid("((int & int) | (any | any))","{{int}, (any | any)}"); }
		@Test public void test_29425() { testValid("((int & int) | (any | any))","{{int, any}, (any | any)}"); }
		@Test public void test_29426() { testValid("((int & int) | (any | any))","{{any, int}, (any | any)}"); }
		@Test public void test_29427() { testValid("((int & int) | (any | any))","{(any | any), (any | any)}"); }
		@Test public void test_29428() { testValid("((int & int) | (any | any))","{(int | any), (any | any)}"); }
		@Test public void test_29429() { testValid("((int & int) | (any | any))","{(int & int), (any | any)}"); }
		@Test public void test_29430() { testValid("((int & int) | (any | any))","{!int, (int | any)}"); }
		@Test public void test_29431() { testValid("((int & int) | (any | any))","{{int, int}, (int | any)}"); }
		@Test public void test_29432() { testValid("((int & int) | (any | any))","{(any | any), (int | any)}"); }
		@Test public void test_29433() { testValid("((int & int) | (any | any))","{(int | int), (int | any)}"); }
		@Test public void test_29434() { testValid("((int & int) | (any | any))","{{any}, (any | int)}"); }
		@Test public void test_29435() { testValid("((int & int) | (any | any))","{!int, (any | int)}"); }
		@Test public void test_29436() { testValid("((int & int) | (any | any))","{(any | any), (any | int)}"); }
		@Test public void test_29437() { testValid("((int & int) | (any | any))","{(any | int), (any | int)}"); }
		@Test public void test_29438() { testValid("((int & int) | (any | any))","{(any & int), (any | int)}"); }
		@Test public void test_29439() { testValid("((int & int) | (any | any))","{{int}, (int | int)}"); }
		@Test public void test_29440() { testValid("((int & int) | (any | any))","{{any, any}, (int | int)}"); }
		@Test public void test_29441() { testValid("((int & int) | (any | any))","{{int, int}, (int | int)}"); }
		@Test public void test_29442() { testValid("((int & int) | (any | any))","{{int}, (any & any)}"); }
		@Test public void test_29443() { testValid("((int & int) | (any | any))","{{int, any}, (any & any)}"); }
		@Test public void test_29444() { testValid("((int & int) | (any | any))","{{any, int}, (any & any)}"); }
		@Test public void test_29445() { testValid("((int & int) | (any | any))","{(int | any), (any & any)}"); }
		@Test public void test_29446() { testValid("((int & int) | (any | any))","{(any & any), (any & any)}"); }
		@Test public void test_29447() { testValid("((int & int) | (any | any))","{(int & any), (any & any)}"); }
		@Test public void test_29448() { testValid("((int & int) | (any | any))","{{any}, (int & any)}"); }
		@Test public void test_29449() { testValid("((int & int) | (any | any))","{{int}, (int & any)}"); }
		@Test public void test_29450() { testValid("((int & int) | (any | any))","{{any, any}, (int & any)}"); }
		@Test public void test_29451() { testValid("((int & int) | (any | any))","{{int, any}, (int & any)}"); }
		@Test public void test_29452() { testValid("((int & int) | (any | any))","{(any | int), (int & any)}"); }
		@Test public void test_29453() { testValid("((int & int) | (any | any))","{(any & any), (int & any)}"); }
		@Test public void test_29454() { testValid("((int & int) | (any | any))","{(int & any), (int & any)}"); }
		@Test public void test_29455() { testValid("((int & int) | (any | any))","{(int & int), (int & any)}"); }
		@Test public void test_29456() { testValid("((int & int) | (any | any))","{{int, any}, (any & int)}"); }
		@Test public void test_29457() { testValid("((int & int) | (any | any))","{(any & any), (any & int)}"); }
		@Test public void test_29458() { testValid("((int & int) | (any | any))","{{any, int}, (int & int)}"); }
		@Test public void test_29459() { testValid("((int & int) | (any | any))","{(int | int), (int & int)}"); }
		@Test public void test_29460() { testValid("((int & int) | (any | any))","{(any & any), (int & int)}"); }
		@Test public void test_29461() { testValid("((int & int) | (any | any))","{(any & int), (int & int)}"); }
		@Test public void test_29462() { testValid("((int & int) | (any | any))","{(int & int), (int & int)}"); }
		@Test public void test_29463() { testValid("((int & int) | (any | any))","(!int | {any})"); }
		@Test public void test_29464() { testValid("((int & int) | (any | any))","({any, any} | {any})"); }
		@Test public void test_29465() { testValid("((int & int) | (any | any))","((any | any) | {any})"); }
		@Test public void test_29466() { testValid("((int & int) | (any | any))","((int | any) | {any})"); }
		@Test public void test_29467() { testValid("((int & int) | (any | any))","((any & any) | {any})"); }
		@Test public void test_29468() { testValid("((int & int) | (any | any))","((int & any) | {any})"); }
		@Test public void test_29469() { testValid("((int & int) | (any | any))","((any & int) | {any})"); }
		@Test public void test_29470() { testValid("((int & int) | (any | any))","({int} | {int})"); }
		@Test public void test_29471() { testValid("((int & int) | (any | any))","(!any | {int})"); }
		@Test public void test_29472() { testValid("((int & int) | (any | any))","(!int | {int})"); }
		@Test public void test_29473() { testValid("((int & int) | (any | any))","({any, int} | {int})"); }
		@Test public void test_29474() { testValid("((int & int) | (any | any))","((int & any) | {int})"); }
		@Test public void test_29475() { testValid("((int & int) | (any | any))","((any & int) | {int})"); }
		@Test public void test_29476() { testValid("((int & int) | (any | any))","((int & int) | {int})"); }
		@Test public void test_29477() { testValid("((int & int) | (any | any))","({any} | !any)"); }
		@Test public void test_29478() { testValid("((int & int) | (any | any))","({int} | !any)"); }
		@Test public void test_29479() { testValid("((int & int) | (any | any))","({any, any} | !any)"); }
		@Test public void test_29480() { testValid("((int & int) | (any | any))","({int, int} | !any)"); }
		@Test public void test_29481() { testValid("((int & int) | (any | any))","((any | any) | !any)"); }
		@Test public void test_29482() { testValid("((int & int) | (any | any))","((int | any) | !any)"); }
		@Test public void test_29483() { testValid("((int & int) | (any | any))","((int | int) | !any)"); }
		@Test public void test_29484() { testValid("((int & int) | (any | any))","((int & int) | !any)"); }
		@Test public void test_29485() { testValid("((int & int) | (any | any))","(!int | !int)"); }
		@Test public void test_29486() { testValid("((int & int) | (any | any))","({any, any} | !int)"); }
		@Test public void test_29487() { testValid("((int & int) | (any | any))","({int, int} | !int)"); }
		@Test public void test_29488() { testValid("((int & int) | (any | any))","((int | any) | !int)"); }
		@Test public void test_29489() { testValid("((int & int) | (any | any))","((any | int) | !int)"); }
		@Test public void test_29490() { testValid("((int & int) | (any | any))","((any & int) | !int)"); }
		@Test public void test_29491() { testValid("((int & int) | (any | any))","((int & int) | !int)"); }
		@Test public void test_29492() { testValid("((int & int) | (any | any))","({int} | {any, any})"); }
		@Test public void test_29493() { testValid("((int & int) | (any | any))","(!any | {any, any})"); }
		@Test public void test_29494() { testValid("((int & int) | (any | any))","(!int | {any, any})"); }
		@Test public void test_29495() { testValid("((int & int) | (any | any))","({any, int} | {any, any})"); }
		@Test public void test_29496() { testValid("((int & int) | (any | any))","((int | any) | {any, any})"); }
		@Test public void test_29497() { testValid("((int & int) | (any | any))","((any & any) | {any, any})"); }
		@Test public void test_29498() { testValid("((int & int) | (any | any))","((any & int) | {any, any})"); }
		@Test public void test_29499() { testValid("((int & int) | (any | any))","(!int | {int, any})"); }
		@Test public void test_29500() { testValid("((int & int) | (any | any))","({any, int} | {int, any})"); }
		@Test public void test_29501() { testValid("((int & int) | (any | any))","((any | any) | {int, any})"); }
		@Test public void test_29502() { testValid("((int & int) | (any | any))","((int | any) | {int, any})"); }
		@Test public void test_29503() { testValid("((int & int) | (any | any))","((any | int) | {int, any})"); }
		@Test public void test_29504() { testValid("((int & int) | (any | any))","((int & any) | {int, any})"); }
		@Test public void test_29505() { testValid("((int & int) | (any | any))","({any} | {any, int})"); }
		@Test public void test_29506() { testValid("((int & int) | (any | any))","(!int | {any, int})"); }
		@Test public void test_29507() { testValid("((int & int) | (any | any))","({any, int} | {any, int})"); }
		@Test public void test_29508() { testValid("((int & int) | (any | any))","((any | any) | {any, int})"); }
		@Test public void test_29509() { testValid("((int & int) | (any | any))","((any | int) | {any, int})"); }
		@Test public void test_29510() { testValid("((int & int) | (any | any))","((int | int) | {any, int})"); }
		@Test public void test_29511() { testValid("((int & int) | (any | any))","((int & any) | {any, int})"); }
		@Test public void test_29512() { testValid("((int & int) | (any | any))","(!any | {int, int})"); }
		@Test public void test_29513() { testValid("((int & int) | (any | any))","(!int | {int, int})"); }
		@Test public void test_29514() { testValid("((int & int) | (any | any))","({any, any} | {int, int})"); }
		@Test public void test_29515() { testValid("((int & int) | (any | any))","({any, int} | {int, int})"); }
		@Test public void test_29516() { testValid("((int & int) | (any | any))","((any | any) | {int, int})"); }
		@Test public void test_29517() { testValid("((int & int) | (any | any))","((int | int) | {int, int})"); }
		@Test public void test_29518() { testValid("((int & int) | (any | any))","((int & any) | {int, int})"); }
		@Test public void test_29519() { testValid("((int & int) | (any | any))","((any & int) | {int, int})"); }
		@Test public void test_29520() { testValid("((int & int) | (any | any))","((int & int) | {int, int})"); }
		@Test public void test_29521() { testValid("((int & int) | (any | any))","({any} | (any | any))"); }
		@Test public void test_29522() { testValid("((int & int) | (any | any))","(!any | (any | any))"); }
		@Test public void test_29523() { testValid("((int & int) | (any | any))","({any, any} | (any | any))"); }
		@Test public void test_29524() { testValid("((int & int) | (any | any))","({any, int} | (any | any))"); }
		@Test public void test_29525() { testValid("((int & int) | (any | any))","({int, int} | (any | any))"); }
		@Test public void test_29526() { testValid("((int & int) | (any | any))","((int | any) | (any | any))"); }
		@Test public void test_29527() { testValid("((int & int) | (any | any))","((any | int) | (any | any))"); }
		@Test public void test_29528() { testValid("((int & int) | (any | any))","((any & int) | (any | any))"); }
		@Test public void test_29529() { testValid("((int & int) | (any | any))","((int & int) | (any | any))"); }
		@Test public void test_29530() { testValid("((int & int) | (any | any))","({any} | (int | any))"); }
		@Test public void test_29531() { testValid("((int & int) | (any | any))","(!int | (int | any))"); }
		@Test public void test_29532() { testValid("((int & int) | (any | any))","({int, any} | (int | any))"); }
		@Test public void test_29533() { testValid("((int & int) | (any | any))","({any, int} | (int | any))"); }
		@Test public void test_29534() { testValid("((int & int) | (any | any))","((int & any) | (int | any))"); }
		@Test public void test_29535() { testValid("((int & int) | (any | any))","((any & int) | (int | any))"); }
		@Test public void test_29536() { testValid("((int & int) | (any | any))","({any} | (any | int))"); }
		@Test public void test_29537() { testValid("((int & int) | (any | any))","({int} | (any | int))"); }
		@Test public void test_29538() { testValid("((int & int) | (any | any))","(!any | (any | int))"); }
		@Test public void test_29539() { testValid("((int & int) | (any | any))","(!int | (any | int))"); }
		@Test public void test_29540() { testValid("((int & int) | (any | any))","({any, int} | (any | int))"); }
		@Test public void test_29541() { testValid("((int & int) | (any | any))","({int, int} | (any | int))"); }
		@Test public void test_29542() { testValid("((int & int) | (any | any))","((int | any) | (any | int))"); }
		@Test public void test_29543() { testValid("((int & int) | (any | any))","((any | int) | (any | int))"); }
		@Test public void test_29544() { testValid("((int & int) | (any | any))","((int | int) | (any | int))"); }
		@Test public void test_29545() { testValid("((int & int) | (any | any))","((any & any) | (any | int))"); }
		@Test public void test_29546() { testValid("((int & int) | (any | any))","({int} | (int | int))"); }
		@Test public void test_29547() { testValid("((int & int) | (any | any))","(!any | (int | int))"); }
		@Test public void test_29548() { testValid("((int & int) | (any | any))","(!int | (int | int))"); }
		@Test public void test_29549() { testValid("((int & int) | (any | any))","({int, any} | (int | int))"); }
		@Test public void test_29550() { testValid("((int & int) | (any | any))","({any, int} | (int | int))"); }
		@Test public void test_29551() { testValid("((int & int) | (any | any))","((any | int) | (int | int))"); }
		@Test public void test_29552() { testValid("((int & int) | (any | any))","((int | int) | (int | int))"); }
		@Test public void test_29553() { testValid("((int & int) | (any | any))","((any & any) | (int | int))"); }
		@Test public void test_29554() { testValid("((int & int) | (any | any))","((int & any) | (int | int))"); }
		@Test public void test_29555() { testValid("((int & int) | (any | any))","((int & int) | (int | int))"); }
		@Test public void test_29556() { testValid("((int & int) | (any | any))","(!any | (any & any))"); }
		@Test public void test_29557() { testValid("((int & int) | (any | any))","(!int | (any & any))"); }
		@Test public void test_29558() { testValid("((int & int) | (any | any))","({any, any} | (any & any))"); }
		@Test public void test_29559() { testValid("((int & int) | (any | any))","({int, any} | (any & any))"); }
		@Test public void test_29560() { testValid("((int & int) | (any | any))","({any, int} | (any & any))"); }
		@Test public void test_29561() { testValid("((int & int) | (any | any))","({int, int} | (any & any))"); }
		@Test public void test_29562() { testValid("((int & int) | (any | any))","((int | any) | (any & any))"); }
		@Test public void test_29563() { testValid("((int & int) | (any | any))","((int | int) | (any & any))"); }
		@Test public void test_29564() { testValid("((int & int) | (any | any))","((int & any) | (any & any))"); }
		@Test public void test_29565() { testValid("((int & int) | (any | any))","((any & int) | (any & any))"); }
		@Test public void test_29566() { testValid("((int & int) | (any | any))","((int & int) | (any & any))"); }
		@Test public void test_29567() { testValid("((int & int) | (any | any))","({any} | (int & any))"); }
		@Test public void test_29568() { testValid("({any} | (int | any))","{int}"); }
		@Test public void test_29569() { testValid("({any} | (int | any))","{any, any}"); }
		@Test public void test_29570() { testValid("({any} | (int | any))","{int, int}"); }
		@Test public void test_29571() { testValid("({any} | (int | any))","(any | int)"); }
		@Test public void test_29572() { testValid("({any} | (int | any))","(int & any)"); }
		@Test public void test_29573() { testValid("({any} | (int | any))","{{any}}"); }
		@Test public void test_29574() { testValid("({any} | (int | any))","{{int, any}}"); }
		@Test public void test_29575() { testValid("({any} | (int | any))","{{int, int}}"); }
		@Test public void test_29576() { testValid("({any} | (int | any))","{(any | int)}"); }
		@Test public void test_29577() { testValid("({any} | (int | any))","!{int, any}"); }
		@Test public void test_29578() { testValid("({any} | (int | any))","!{int, int}"); }
		@Test public void test_29579() { testValid("({any} | (int | any))","!(any | any)"); }
		@Test public void test_29580() { testValid("({any} | (int | any))","!(any & any)"); }
		@Test public void test_29581() { testValid("({any} | (int | any))","!(int & int)"); }
		@Test public void test_29582() { testValid("({any} | (int | any))","{{int}, {any}}"); }
		@Test public void test_29583() { testValid("({any} | (int | any))","{!int, {any}}"); }
		@Test public void test_29584() { testValid("({any} | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_29585() { testValid("({any} | (int | any))","{(any | int), {any}}"); }
		@Test public void test_29586() { testValid("({any} | (int | any))","{!int, {int}}"); }
		@Test public void test_29587() { testValid("({any} | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_29588() { testValid("({any} | (int | any))","{(any | any), {int}}"); }
		@Test public void test_29589() { testValid("({any} | (int | any))","{(any & any), {int}}"); }
		@Test public void test_29590() { testValid("({any} | (int | any))","{(any & int), {int}}"); }
		@Test public void test_29591() { testValid("({any} | (int | any))","{{any, any}, !int}"); }
		@Test public void test_29592() { testValid("({any} | (int | any))","{{any, int}, !int}"); }
		@Test public void test_29593() { testValid("({any} | (int | any))","{(any | any), !int}"); }
		@Test public void test_29594() { testValid("({any} | (int | any))","{(int | any), !int}"); }
		@Test public void test_29595() { testValid("({any} | (int | any))","{(any & any), !int}"); }
		@Test public void test_29596() { testValid("({any} | (int | any))","{(int & any), !int}"); }
		@Test public void test_29597() { testValid("({any} | (int | any))","{(int & int), !int}"); }
		@Test public void test_29598() { testValid("({any} | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_29599() { testValid("({any} | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_29600() { testValid("({any} | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29601() { testValid("({any} | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_29602() { testValid("({any} | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_29603() { testValid("({any} | (int | any))","{!int, {int, any}}"); }
		@Test public void test_29604() { testValid("({any} | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29605() { testValid("({any} | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29606() { testValid("({any} | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_29607() { testValid("({any} | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_29608() { testValid("({any} | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29609() { testValid("({any} | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_29610() { testValid("({any} | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_29611() { testValid("({any} | (int | any))","{!int, {int, int}}"); }
		@Test public void test_29612() { testValid("({any} | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29613() { testValid("({any} | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_29614() { testValid("({any} | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_29615() { testValid("({any} | (int | any))","{(int & any), {int, int}}"); }
		@Test public void test_29616() { testValid("({any} | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_29617() { testValid("({any} | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_29618() { testValid("({any} | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_29619() { testValid("({any} | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_29620() { testValid("({any} | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_29621() { testValid("({any} | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_29622() { testValid("({any} | (int | any))","{!int, (int | any)}"); }
		@Test public void test_29623() { testValid("({any} | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_29624() { testValid("({any} | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_29625() { testValid("({any} | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_29626() { testValid("({any} | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_29627() { testValid("({any} | (int | any))","{!int, (any | int)}"); }
		@Test public void test_29628() { testValid("({any} | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_29629() { testValid("({any} | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_29630() { testValid("({any} | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_29631() { testValid("({any} | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_29632() { testValid("({any} | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_29633() { testValid("({any} | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_29634() { testValid("({any} | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_29635() { testValid("({any} | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_29636() { testValid("({any} | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_29637() { testValid("({any} | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_29638() { testValid("({any} | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_29639() { testValid("({any} | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_29640() { testValid("({any} | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_29641() { testValid("({any} | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_29642() { testValid("({any} | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_29643() { testValid("({any} | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_29644() { testValid("({any} | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_29645() { testValid("({any} | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_29646() { testValid("({any} | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_29647() { testValid("({any} | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_29648() { testValid("({any} | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_29649() { testValid("({any} | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_29650() { testValid("({any} | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_29651() { testValid("({any} | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_29652() { testValid("({any} | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_29653() { testValid("({any} | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_29654() { testValid("({any} | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_29655() { testValid("({any} | (int | any))","(!int | {any})"); }
		@Test public void test_29656() { testValid("({any} | (int | any))","({any, any} | {any})"); }
		@Test public void test_29657() { testValid("({any} | (int | any))","((any | any) | {any})"); }
		@Test public void test_29658() { testValid("({any} | (int | any))","((int | any) | {any})"); }
		@Test public void test_29659() { testValid("({any} | (int | any))","((any & any) | {any})"); }
		@Test public void test_29660() { testValid("({any} | (int | any))","((int & any) | {any})"); }
		@Test public void test_29661() { testValid("({any} | (int | any))","((any & int) | {any})"); }
		@Test public void test_29662() { testValid("({any} | (int | any))","({int} | {int})"); }
		@Test public void test_29663() { testValid("({any} | (int | any))","(!any | {int})"); }
		@Test public void test_29664() { testValid("({any} | (int | any))","(!int | {int})"); }
		@Test public void test_29665() { testValid("({any} | (int | any))","({any, int} | {int})"); }
		@Test public void test_29666() { testValid("({any} | (int | any))","((int & any) | {int})"); }
		@Test public void test_29667() { testValid("({any} | (int | any))","((any & int) | {int})"); }
		@Test public void test_29668() { testValid("({any} | (int | any))","((int & int) | {int})"); }
		@Test public void test_29669() { testValid("({any} | (int | any))","({any} | !any)"); }
		@Test public void test_29670() { testValid("({any} | (int | any))","({int} | !any)"); }
		@Test public void test_29671() { testValid("({any} | (int | any))","({any, any} | !any)"); }
		@Test public void test_29672() { testValid("({any} | (int | any))","({int, int} | !any)"); }
		@Test public void test_29673() { testValid("({any} | (int | any))","((any | any) | !any)"); }
		@Test public void test_29674() { testValid("({any} | (int | any))","((int | any) | !any)"); }
		@Test public void test_29675() { testValid("({any} | (int | any))","((int | int) | !any)"); }
		@Test public void test_29676() { testValid("({any} | (int | any))","((int & int) | !any)"); }
		@Test public void test_29677() { testValid("({any} | (int | any))","(!int | !int)"); }
		@Test public void test_29678() { testValid("({any} | (int | any))","({any, any} | !int)"); }
		@Test public void test_29679() { testValid("({any} | (int | any))","({int, int} | !int)"); }
		@Test public void test_29680() { testValid("({any} | (int | any))","((int | any) | !int)"); }
		@Test public void test_29681() { testValid("({any} | (int | any))","((any | int) | !int)"); }
		@Test public void test_29682() { testValid("({any} | (int | any))","((any & int) | !int)"); }
		@Test public void test_29683() { testValid("({any} | (int | any))","((int & int) | !int)"); }
		@Test public void test_29684() { testValid("({any} | (int | any))","({int} | {any, any})"); }
		@Test public void test_29685() { testValid("({any} | (int | any))","(!any | {any, any})"); }
		@Test public void test_29686() { testValid("({any} | (int | any))","(!int | {any, any})"); }
		@Test public void test_29687() { testValid("({any} | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_29688() { testValid("({any} | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_29689() { testValid("({any} | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_29690() { testValid("({any} | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_29691() { testValid("({any} | (int | any))","(!int | {int, any})"); }
		@Test public void test_29692() { testValid("({any} | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_29693() { testValid("({any} | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_29694() { testValid("({any} | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_29695() { testValid("({any} | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_29696() { testValid("({any} | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_29697() { testValid("({any} | (int | any))","({any} | {any, int})"); }
		@Test public void test_29698() { testValid("({any} | (int | any))","(!int | {any, int})"); }
		@Test public void test_29699() { testValid("({any} | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_29700() { testValid("({any} | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_29701() { testValid("({any} | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_29702() { testValid("({any} | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_29703() { testValid("({any} | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_29704() { testValid("({any} | (int | any))","(!any | {int, int})"); }
		@Test public void test_29705() { testValid("({any} | (int | any))","(!int | {int, int})"); }
		@Test public void test_29706() { testValid("({any} | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_29707() { testValid("({any} | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_29708() { testValid("({any} | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_29709() { testValid("({any} | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_29710() { testValid("({any} | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_29711() { testValid("({any} | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_29712() { testValid("({any} | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_29713() { testValid("({any} | (int | any))","({any} | (any | any))"); }
		@Test public void test_29714() { testValid("({any} | (int | any))","(!any | (any | any))"); }
		@Test public void test_29715() { testValid("({any} | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_29716() { testValid("({any} | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_29717() { testValid("({any} | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_29718() { testValid("({any} | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_29719() { testValid("({any} | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_29720() { testValid("({any} | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_29721() { testValid("({any} | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_29722() { testValid("({any} | (int | any))","({any} | (int | any))"); }
		@Test public void test_29723() { testValid("({any} | (int | any))","(!int | (int | any))"); }
		@Test public void test_29724() { testValid("({any} | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_29725() { testValid("({any} | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_29726() { testValid("({any} | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_29727() { testValid("({any} | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_29728() { testValid("({any} | (int | any))","({any} | (any | int))"); }
		@Test public void test_29729() { testValid("({any} | (int | any))","({int} | (any | int))"); }
		@Test public void test_29730() { testValid("({any} | (int | any))","(!any | (any | int))"); }
		@Test public void test_29731() { testValid("({any} | (int | any))","(!int | (any | int))"); }
		@Test public void test_29732() { testValid("({any} | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_29733() { testValid("({any} | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_29734() { testValid("({any} | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_29735() { testValid("({any} | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_29736() { testValid("({any} | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_29737() { testValid("({any} | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_29738() { testValid("({any} | (int | any))","({int} | (int | int))"); }
		@Test public void test_29739() { testValid("({any} | (int | any))","(!any | (int | int))"); }
		@Test public void test_29740() { testValid("({any} | (int | any))","(!int | (int | int))"); }
		@Test public void test_29741() { testValid("({any} | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_29742() { testValid("({any} | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_29743() { testValid("({any} | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_29744() { testValid("({any} | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_29745() { testValid("({any} | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_29746() { testValid("({any} | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_29747() { testValid("({any} | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_29748() { testValid("({any} | (int | any))","(!any | (any & any))"); }
		@Test public void test_29749() { testValid("({any} | (int | any))","(!int | (any & any))"); }
		@Test public void test_29750() { testValid("({any} | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_29751() { testValid("({any} | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_29752() { testValid("({any} | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_29753() { testValid("({any} | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_29754() { testValid("({any} | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_29755() { testValid("({any} | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_29756() { testValid("({any} | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_29757() { testValid("({any} | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_29758() { testValid("({any} | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_29759() { testValid("({any} | (int | any))","({any} | (int & any))"); }
		@Test public void test_29760() { testValid("(!int | (int | any))","{int}"); }
		@Test public void test_29761() { testValid("(!int | (int | any))","{any, any}"); }
		@Test public void test_29762() { testValid("(!int | (int | any))","{int, int}"); }
		@Test public void test_29763() { testValid("(!int | (int | any))","(any | int)"); }
		@Test public void test_29764() { testValid("(!int | (int | any))","(int & any)"); }
		@Test public void test_29765() { testValid("(!int | (int | any))","{{any}}"); }
		@Test public void test_29766() { testValid("(!int | (int | any))","{{int, any}}"); }
		@Test public void test_29767() { testValid("(!int | (int | any))","{{int, int}}"); }
		@Test public void test_29768() { testValid("(!int | (int | any))","{(any | int)}"); }
		@Test public void test_29769() { testValid("(!int | (int | any))","!{int, any}"); }
		@Test public void test_29770() { testValid("(!int | (int | any))","!{int, int}"); }
		@Test public void test_29771() { testValid("(!int | (int | any))","!(any | any)"); }
		@Test public void test_29772() { testValid("(!int | (int | any))","!(any & any)"); }
		@Test public void test_29773() { testValid("(!int | (int | any))","!(int & int)"); }
		@Test public void test_29774() { testValid("(!int | (int | any))","{{int}, {any}}"); }
		@Test public void test_29775() { testValid("(!int | (int | any))","{!int, {any}}"); }
		@Test public void test_29776() { testValid("(!int | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_29777() { testValid("(!int | (int | any))","{(any | int), {any}}"); }
		@Test public void test_29778() { testValid("(!int | (int | any))","{!int, {int}}"); }
		@Test public void test_29779() { testValid("(!int | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_29780() { testValid("(!int | (int | any))","{(any | any), {int}}"); }
		@Test public void test_29781() { testValid("(!int | (int | any))","{(any & any), {int}}"); }
		@Test public void test_29782() { testValid("(!int | (int | any))","{(any & int), {int}}"); }
		@Test public void test_29783() { testValid("(!int | (int | any))","{{any, any}, !int}"); }
		@Test public void test_29784() { testValid("(!int | (int | any))","{{any, int}, !int}"); }
		@Test public void test_29785() { testValid("(!int | (int | any))","{(any | any), !int}"); }
		@Test public void test_29786() { testValid("(!int | (int | any))","{(int | any), !int}"); }
		@Test public void test_29787() { testValid("(!int | (int | any))","{(any & any), !int}"); }
		@Test public void test_29788() { testValid("(!int | (int | any))","{(int & any), !int}"); }
		@Test public void test_29789() { testValid("(!int | (int | any))","{(int & int), !int}"); }
		@Test public void test_29790() { testValid("(!int | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_29791() { testValid("(!int | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_29792() { testValid("(!int | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29793() { testValid("(!int | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_29794() { testValid("(!int | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_29795() { testValid("(!int | (int | any))","{!int, {int, any}}"); }
		@Test public void test_29796() { testValid("(!int | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29797() { testValid("(!int | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29798() { testValid("(!int | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_29799() { testValid("(!int | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_29800() { testValid("(!int | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29801() { testValid("(!int | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_29802() { testValid("(!int | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_29803() { testValid("(!int | (int | any))","{!int, {int, int}}"); }
		@Test public void test_29804() { testValid("(!int | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29805() { testValid("(!int | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_29806() { testValid("(!int | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_29807() { testValid("(!int | (int | any))","{(int & any), {int, int}}"); }
		@Test public void test_29808() { testValid("(!int | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_29809() { testValid("(!int | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_29810() { testValid("(!int | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_29811() { testValid("(!int | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_29812() { testValid("(!int | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_29813() { testValid("(!int | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_29814() { testValid("(!int | (int | any))","{!int, (int | any)}"); }
		@Test public void test_29815() { testValid("(!int | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_29816() { testValid("(!int | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_29817() { testValid("(!int | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_29818() { testValid("(!int | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_29819() { testValid("(!int | (int | any))","{!int, (any | int)}"); }
		@Test public void test_29820() { testValid("(!int | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_29821() { testValid("(!int | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_29822() { testValid("(!int | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_29823() { testValid("(!int | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_29824() { testValid("(!int | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_29825() { testValid("(!int | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_29826() { testValid("(!int | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_29827() { testValid("(!int | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_29828() { testValid("(!int | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_29829() { testValid("(!int | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_29830() { testValid("(!int | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_29831() { testValid("(!int | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_29832() { testValid("(!int | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_29833() { testValid("(!int | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_29834() { testValid("(!int | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_29835() { testValid("(!int | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_29836() { testValid("(!int | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_29837() { testValid("(!int | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_29838() { testValid("(!int | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_29839() { testValid("(!int | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_29840() { testValid("(!int | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_29841() { testValid("(!int | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_29842() { testValid("(!int | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_29843() { testValid("(!int | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_29844() { testValid("(!int | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_29845() { testValid("(!int | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_29846() { testValid("(!int | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_29847() { testValid("(!int | (int | any))","(!int | {any})"); }
		@Test public void test_29848() { testValid("(!int | (int | any))","({any, any} | {any})"); }
		@Test public void test_29849() { testValid("(!int | (int | any))","((any | any) | {any})"); }
		@Test public void test_29850() { testValid("(!int | (int | any))","((int | any) | {any})"); }
		@Test public void test_29851() { testValid("(!int | (int | any))","((any & any) | {any})"); }
		@Test public void test_29852() { testValid("(!int | (int | any))","((int & any) | {any})"); }
		@Test public void test_29853() { testValid("(!int | (int | any))","((any & int) | {any})"); }
		@Test public void test_29854() { testValid("(!int | (int | any))","({int} | {int})"); }
		@Test public void test_29855() { testValid("(!int | (int | any))","(!any | {int})"); }
		@Test public void test_29856() { testValid("(!int | (int | any))","(!int | {int})"); }
		@Test public void test_29857() { testValid("(!int | (int | any))","({any, int} | {int})"); }
		@Test public void test_29858() { testValid("(!int | (int | any))","((int & any) | {int})"); }
		@Test public void test_29859() { testValid("(!int | (int | any))","((any & int) | {int})"); }
		@Test public void test_29860() { testValid("(!int | (int | any))","((int & int) | {int})"); }
		@Test public void test_29861() { testValid("(!int | (int | any))","({any} | !any)"); }
		@Test public void test_29862() { testValid("(!int | (int | any))","({int} | !any)"); }
		@Test public void test_29863() { testValid("(!int | (int | any))","({any, any} | !any)"); }
		@Test public void test_29864() { testValid("(!int | (int | any))","({int, int} | !any)"); }
		@Test public void test_29865() { testValid("(!int | (int | any))","((any | any) | !any)"); }
		@Test public void test_29866() { testValid("(!int | (int | any))","((int | any) | !any)"); }
		@Test public void test_29867() { testValid("(!int | (int | any))","((int | int) | !any)"); }
		@Test public void test_29868() { testValid("(!int | (int | any))","((int & int) | !any)"); }
		@Test public void test_29869() { testValid("(!int | (int | any))","(!int | !int)"); }
		@Test public void test_29870() { testValid("(!int | (int | any))","({any, any} | !int)"); }
		@Test public void test_29871() { testValid("(!int | (int | any))","({int, int} | !int)"); }
		@Test public void test_29872() { testValid("(!int | (int | any))","((int | any) | !int)"); }
		@Test public void test_29873() { testValid("(!int | (int | any))","((any | int) | !int)"); }
		@Test public void test_29874() { testValid("(!int | (int | any))","((any & int) | !int)"); }
		@Test public void test_29875() { testValid("(!int | (int | any))","((int & int) | !int)"); }
		@Test public void test_29876() { testValid("(!int | (int | any))","({int} | {any, any})"); }
		@Test public void test_29877() { testValid("(!int | (int | any))","(!any | {any, any})"); }
		@Test public void test_29878() { testValid("(!int | (int | any))","(!int | {any, any})"); }
		@Test public void test_29879() { testValid("(!int | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_29880() { testValid("(!int | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_29881() { testValid("(!int | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_29882() { testValid("(!int | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_29883() { testValid("(!int | (int | any))","(!int | {int, any})"); }
		@Test public void test_29884() { testValid("(!int | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_29885() { testValid("(!int | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_29886() { testValid("(!int | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_29887() { testValid("(!int | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_29888() { testValid("(!int | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_29889() { testValid("(!int | (int | any))","({any} | {any, int})"); }
		@Test public void test_29890() { testValid("(!int | (int | any))","(!int | {any, int})"); }
		@Test public void test_29891() { testValid("(!int | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_29892() { testValid("(!int | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_29893() { testValid("(!int | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_29894() { testValid("(!int | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_29895() { testValid("(!int | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_29896() { testValid("(!int | (int | any))","(!any | {int, int})"); }
		@Test public void test_29897() { testValid("(!int | (int | any))","(!int | {int, int})"); }
		@Test public void test_29898() { testValid("(!int | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_29899() { testValid("(!int | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_29900() { testValid("(!int | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_29901() { testValid("(!int | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_29902() { testValid("(!int | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_29903() { testValid("(!int | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_29904() { testValid("(!int | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_29905() { testValid("(!int | (int | any))","({any} | (any | any))"); }
		@Test public void test_29906() { testValid("(!int | (int | any))","(!any | (any | any))"); }
		@Test public void test_29907() { testValid("(!int | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_29908() { testValid("(!int | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_29909() { testValid("(!int | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_29910() { testValid("(!int | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_29911() { testValid("(!int | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_29912() { testValid("(!int | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_29913() { testValid("(!int | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_29914() { testValid("(!int | (int | any))","({any} | (int | any))"); }
		@Test public void test_29915() { testValid("(!int | (int | any))","(!int | (int | any))"); }
		@Test public void test_29916() { testValid("(!int | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_29917() { testValid("(!int | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_29918() { testValid("(!int | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_29919() { testValid("(!int | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_29920() { testValid("(!int | (int | any))","({any} | (any | int))"); }
		@Test public void test_29921() { testValid("(!int | (int | any))","({int} | (any | int))"); }
		@Test public void test_29922() { testValid("(!int | (int | any))","(!any | (any | int))"); }
		@Test public void test_29923() { testValid("(!int | (int | any))","(!int | (any | int))"); }
		@Test public void test_29924() { testValid("(!int | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_29925() { testValid("(!int | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_29926() { testValid("(!int | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_29927() { testValid("(!int | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_29928() { testValid("(!int | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_29929() { testValid("(!int | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_29930() { testValid("(!int | (int | any))","({int} | (int | int))"); }
		@Test public void test_29931() { testValid("(!int | (int | any))","(!any | (int | int))"); }
		@Test public void test_29932() { testValid("(!int | (int | any))","(!int | (int | int))"); }
		@Test public void test_29933() { testValid("(!int | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_29934() { testValid("(!int | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_29935() { testValid("(!int | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_29936() { testValid("(!int | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_29937() { testValid("(!int | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_29938() { testValid("(!int | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_29939() { testValid("(!int | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_29940() { testValid("(!int | (int | any))","(!any | (any & any))"); }
		@Test public void test_29941() { testValid("(!int | (int | any))","(!int | (any & any))"); }
		@Test public void test_29942() { testValid("(!int | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_29943() { testValid("(!int | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_29944() { testValid("(!int | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_29945() { testValid("(!int | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_29946() { testValid("(!int | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_29947() { testValid("(!int | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_29948() { testValid("(!int | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_29949() { testValid("(!int | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_29950() { testValid("(!int | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_29951() { testValid("(!int | (int | any))","({any} | (int & any))"); }
		@Test public void test_29952() { testValid("({int, any} | (int | any))","{int}"); }
		@Test public void test_29953() { testValid("({int, any} | (int | any))","{any, any}"); }
		@Test public void test_29954() { testValid("({int, any} | (int | any))","{int, int}"); }
		@Test public void test_29955() { testValid("({int, any} | (int | any))","(any | int)"); }
		@Test public void test_29956() { testValid("({int, any} | (int | any))","(int & any)"); }
		@Test public void test_29957() { testValid("({int, any} | (int | any))","{{any}}"); }
		@Test public void test_29958() { testValid("({int, any} | (int | any))","{{int, any}}"); }
		@Test public void test_29959() { testValid("({int, any} | (int | any))","{{int, int}}"); }
		@Test public void test_29960() { testValid("({int, any} | (int | any))","{(any | int)}"); }
		@Test public void test_29961() { testValid("({int, any} | (int | any))","!{int, any}"); }
		@Test public void test_29962() { testValid("({int, any} | (int | any))","!{int, int}"); }
		@Test public void test_29963() { testValid("({int, any} | (int | any))","!(any | any)"); }
		@Test public void test_29964() { testValid("({int, any} | (int | any))","!(any & any)"); }
		@Test public void test_29965() { testValid("({int, any} | (int | any))","!(int & int)"); }
		@Test public void test_29966() { testValid("({int, any} | (int | any))","{{int}, {any}}"); }
		@Test public void test_29967() { testValid("({int, any} | (int | any))","{!int, {any}}"); }
		@Test public void test_29968() { testValid("({int, any} | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_29969() { testValid("({int, any} | (int | any))","{(any | int), {any}}"); }
		@Test public void test_29970() { testValid("({int, any} | (int | any))","{!int, {int}}"); }
		@Test public void test_29971() { testValid("({int, any} | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_29972() { testValid("({int, any} | (int | any))","{(any | any), {int}}"); }
		@Test public void test_29973() { testValid("({int, any} | (int | any))","{(any & any), {int}}"); }
		@Test public void test_29974() { testValid("({int, any} | (int | any))","{(any & int), {int}}"); }
		@Test public void test_29975() { testValid("({int, any} | (int | any))","{{any, any}, !int}"); }
		@Test public void test_29976() { testValid("({int, any} | (int | any))","{{any, int}, !int}"); }
		@Test public void test_29977() { testValid("({int, any} | (int | any))","{(any | any), !int}"); }
		@Test public void test_29978() { testValid("({int, any} | (int | any))","{(int | any), !int}"); }
		@Test public void test_29979() { testValid("({int, any} | (int | any))","{(any & any), !int}"); }
		@Test public void test_29980() { testValid("({int, any} | (int | any))","{(int & any), !int}"); }
		@Test public void test_29981() { testValid("({int, any} | (int | any))","{(int & int), !int}"); }
		@Test public void test_29982() { testValid("({int, any} | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_29983() { testValid("({int, any} | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_29984() { testValid("({int, any} | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_29985() { testValid("({int, any} | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_29986() { testValid("({int, any} | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_29987() { testValid("({int, any} | (int | any))","{!int, {int, any}}"); }
		@Test public void test_29988() { testValid("({int, any} | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_29989() { testValid("({int, any} | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_29990() { testValid("({int, any} | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_29991() { testValid("({int, any} | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_29992() { testValid("({int, any} | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_29993() { testValid("({int, any} | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_29994() { testValid("({int, any} | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_29995() { testValid("({int, any} | (int | any))","{!int, {int, int}}"); }
		@Test public void test_29996() { testValid("({int, any} | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_29997() { testValid("({int, any} | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_29998() { testValid("({int, any} | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_29999() { testValid("({int, any} | (int | any))","{(int & any), {int, int}}"); }
	}
	public static class Part_3 {
		@Test public void test_30000() { testValid("({int, any} | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_30001() { testValid("({int, any} | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_30002() { testValid("({int, any} | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_30003() { testValid("({int, any} | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_30004() { testValid("({int, any} | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_30005() { testValid("({int, any} | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_30006() { testValid("({int, any} | (int | any))","{!int, (int | any)}"); }
		@Test public void test_30007() { testValid("({int, any} | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_30008() { testValid("({int, any} | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_30009() { testValid("({int, any} | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_30010() { testValid("({int, any} | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_30011() { testValid("({int, any} | (int | any))","{!int, (any | int)}"); }
		@Test public void test_30012() { testValid("({int, any} | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_30013() { testValid("({int, any} | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_30014() { testValid("({int, any} | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_30015() { testValid("({int, any} | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_30016() { testValid("({int, any} | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_30017() { testValid("({int, any} | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_30018() { testValid("({int, any} | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_30019() { testValid("({int, any} | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_30020() { testValid("({int, any} | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_30021() { testValid("({int, any} | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_30022() { testValid("({int, any} | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_30023() { testValid("({int, any} | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_30024() { testValid("({int, any} | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_30025() { testValid("({int, any} | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_30026() { testValid("({int, any} | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_30027() { testValid("({int, any} | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_30028() { testValid("({int, any} | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_30029() { testValid("({int, any} | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_30030() { testValid("({int, any} | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_30031() { testValid("({int, any} | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_30032() { testValid("({int, any} | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_30033() { testValid("({int, any} | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_30034() { testValid("({int, any} | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_30035() { testValid("({int, any} | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_30036() { testValid("({int, any} | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_30037() { testValid("({int, any} | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_30038() { testValid("({int, any} | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_30039() { testValid("({int, any} | (int | any))","(!int | {any})"); }
		@Test public void test_30040() { testValid("({int, any} | (int | any))","({any, any} | {any})"); }
		@Test public void test_30041() { testValid("({int, any} | (int | any))","((any | any) | {any})"); }
		@Test public void test_30042() { testValid("({int, any} | (int | any))","((int | any) | {any})"); }
		@Test public void test_30043() { testValid("({int, any} | (int | any))","((any & any) | {any})"); }
		@Test public void test_30044() { testValid("({int, any} | (int | any))","((int & any) | {any})"); }
		@Test public void test_30045() { testValid("({int, any} | (int | any))","((any & int) | {any})"); }
		@Test public void test_30046() { testValid("({int, any} | (int | any))","({int} | {int})"); }
		@Test public void test_30047() { testValid("({int, any} | (int | any))","(!any | {int})"); }
		@Test public void test_30048() { testValid("({int, any} | (int | any))","(!int | {int})"); }
		@Test public void test_30049() { testValid("({int, any} | (int | any))","({any, int} | {int})"); }
		@Test public void test_30050() { testValid("({int, any} | (int | any))","((int & any) | {int})"); }
		@Test public void test_30051() { testValid("({int, any} | (int | any))","((any & int) | {int})"); }
		@Test public void test_30052() { testValid("({int, any} | (int | any))","((int & int) | {int})"); }
		@Test public void test_30053() { testValid("({int, any} | (int | any))","({any} | !any)"); }
		@Test public void test_30054() { testValid("({int, any} | (int | any))","({int} | !any)"); }
		@Test public void test_30055() { testValid("({int, any} | (int | any))","({any, any} | !any)"); }
		@Test public void test_30056() { testValid("({int, any} | (int | any))","({int, int} | !any)"); }
		@Test public void test_30057() { testValid("({int, any} | (int | any))","((any | any) | !any)"); }
		@Test public void test_30058() { testValid("({int, any} | (int | any))","((int | any) | !any)"); }
		@Test public void test_30059() { testValid("({int, any} | (int | any))","((int | int) | !any)"); }
		@Test public void test_30060() { testValid("({int, any} | (int | any))","((int & int) | !any)"); }
		@Test public void test_30061() { testValid("({int, any} | (int | any))","(!int | !int)"); }
		@Test public void test_30062() { testValid("({int, any} | (int | any))","({any, any} | !int)"); }
		@Test public void test_30063() { testValid("({int, any} | (int | any))","({int, int} | !int)"); }
		@Test public void test_30064() { testValid("({int, any} | (int | any))","((int | any) | !int)"); }
		@Test public void test_30065() { testValid("({int, any} | (int | any))","((any | int) | !int)"); }
		@Test public void test_30066() { testValid("({int, any} | (int | any))","((any & int) | !int)"); }
		@Test public void test_30067() { testValid("({int, any} | (int | any))","((int & int) | !int)"); }
		@Test public void test_30068() { testValid("({int, any} | (int | any))","({int} | {any, any})"); }
		@Test public void test_30069() { testValid("({int, any} | (int | any))","(!any | {any, any})"); }
		@Test public void test_30070() { testValid("({int, any} | (int | any))","(!int | {any, any})"); }
		@Test public void test_30071() { testValid("({int, any} | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_30072() { testValid("({int, any} | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_30073() { testValid("({int, any} | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_30074() { testValid("({int, any} | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_30075() { testValid("({int, any} | (int | any))","(!int | {int, any})"); }
		@Test public void test_30076() { testValid("({int, any} | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_30077() { testValid("({int, any} | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_30078() { testValid("({int, any} | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_30079() { testValid("({int, any} | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_30080() { testValid("({int, any} | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_30081() { testValid("({int, any} | (int | any))","({any} | {any, int})"); }
		@Test public void test_30082() { testValid("({int, any} | (int | any))","(!int | {any, int})"); }
		@Test public void test_30083() { testValid("({int, any} | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_30084() { testValid("({int, any} | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_30085() { testValid("({int, any} | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_30086() { testValid("({int, any} | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_30087() { testValid("({int, any} | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_30088() { testValid("({int, any} | (int | any))","(!any | {int, int})"); }
		@Test public void test_30089() { testValid("({int, any} | (int | any))","(!int | {int, int})"); }
		@Test public void test_30090() { testValid("({int, any} | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_30091() { testValid("({int, any} | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_30092() { testValid("({int, any} | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_30093() { testValid("({int, any} | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_30094() { testValid("({int, any} | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_30095() { testValid("({int, any} | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_30096() { testValid("({int, any} | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_30097() { testValid("({int, any} | (int | any))","({any} | (any | any))"); }
		@Test public void test_30098() { testValid("({int, any} | (int | any))","(!any | (any | any))"); }
		@Test public void test_30099() { testValid("({int, any} | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_30100() { testValid("({int, any} | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_30101() { testValid("({int, any} | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_30102() { testValid("({int, any} | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_30103() { testValid("({int, any} | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_30104() { testValid("({int, any} | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_30105() { testValid("({int, any} | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_30106() { testValid("({int, any} | (int | any))","({any} | (int | any))"); }
		@Test public void test_30107() { testValid("({int, any} | (int | any))","(!int | (int | any))"); }
		@Test public void test_30108() { testValid("({int, any} | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_30109() { testValid("({int, any} | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_30110() { testValid("({int, any} | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_30111() { testValid("({int, any} | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_30112() { testValid("({int, any} | (int | any))","({any} | (any | int))"); }
		@Test public void test_30113() { testValid("({int, any} | (int | any))","({int} | (any | int))"); }
		@Test public void test_30114() { testValid("({int, any} | (int | any))","(!any | (any | int))"); }
		@Test public void test_30115() { testValid("({int, any} | (int | any))","(!int | (any | int))"); }
		@Test public void test_30116() { testValid("({int, any} | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_30117() { testValid("({int, any} | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_30118() { testValid("({int, any} | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_30119() { testValid("({int, any} | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_30120() { testValid("({int, any} | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_30121() { testValid("({int, any} | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_30122() { testValid("({int, any} | (int | any))","({int} | (int | int))"); }
		@Test public void test_30123() { testValid("({int, any} | (int | any))","(!any | (int | int))"); }
		@Test public void test_30124() { testValid("({int, any} | (int | any))","(!int | (int | int))"); }
		@Test public void test_30125() { testValid("({int, any} | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_30126() { testValid("({int, any} | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_30127() { testValid("({int, any} | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_30128() { testValid("({int, any} | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_30129() { testValid("({int, any} | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_30130() { testValid("({int, any} | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_30131() { testValid("({int, any} | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_30132() { testValid("({int, any} | (int | any))","(!any | (any & any))"); }
		@Test public void test_30133() { testValid("({int, any} | (int | any))","(!int | (any & any))"); }
		@Test public void test_30134() { testValid("({int, any} | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_30135() { testValid("({int, any} | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_30136() { testValid("({int, any} | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_30137() { testValid("({int, any} | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_30138() { testValid("({int, any} | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_30139() { testValid("({int, any} | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_30140() { testValid("({int, any} | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_30141() { testValid("({int, any} | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_30142() { testValid("({int, any} | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_30143() { testValid("({int, any} | (int | any))","({any} | (int & any))"); }
		@Test public void test_30144() { testValid("({any, int} | (int | any))","{int}"); }
		@Test public void test_30145() { testValid("({any, int} | (int | any))","{any, any}"); }
		@Test public void test_30146() { testValid("({any, int} | (int | any))","{int, int}"); }
		@Test public void test_30147() { testValid("({any, int} | (int | any))","(any | int)"); }
		@Test public void test_30148() { testValid("({any, int} | (int | any))","(int & any)"); }
		@Test public void test_30149() { testValid("({any, int} | (int | any))","{{any}}"); }
		@Test public void test_30150() { testValid("({any, int} | (int | any))","{{int, any}}"); }
		@Test public void test_30151() { testValid("({any, int} | (int | any))","{{int, int}}"); }
		@Test public void test_30152() { testValid("({any, int} | (int | any))","{(any | int)}"); }
		@Test public void test_30153() { testValid("({any, int} | (int | any))","!{int, any}"); }
		@Test public void test_30154() { testValid("({any, int} | (int | any))","!{int, int}"); }
		@Test public void test_30155() { testValid("({any, int} | (int | any))","!(any | any)"); }
		@Test public void test_30156() { testValid("({any, int} | (int | any))","!(any & any)"); }
		@Test public void test_30157() { testValid("({any, int} | (int | any))","!(int & int)"); }
		@Test public void test_30158() { testValid("({any, int} | (int | any))","{{int}, {any}}"); }
		@Test public void test_30159() { testValid("({any, int} | (int | any))","{!int, {any}}"); }
		@Test public void test_30160() { testValid("({any, int} | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_30161() { testValid("({any, int} | (int | any))","{(any | int), {any}}"); }
		@Test public void test_30162() { testValid("({any, int} | (int | any))","{!int, {int}}"); }
		@Test public void test_30163() { testValid("({any, int} | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_30164() { testValid("({any, int} | (int | any))","{(any | any), {int}}"); }
		@Test public void test_30165() { testValid("({any, int} | (int | any))","{(any & any), {int}}"); }
		@Test public void test_30166() { testValid("({any, int} | (int | any))","{(any & int), {int}}"); }
		@Test public void test_30167() { testValid("({any, int} | (int | any))","{{any, any}, !int}"); }
		@Test public void test_30168() { testValid("({any, int} | (int | any))","{{any, int}, !int}"); }
		@Test public void test_30169() { testValid("({any, int} | (int | any))","{(any | any), !int}"); }
		@Test public void test_30170() { testValid("({any, int} | (int | any))","{(int | any), !int}"); }
		@Test public void test_30171() { testValid("({any, int} | (int | any))","{(any & any), !int}"); }
		@Test public void test_30172() { testValid("({any, int} | (int | any))","{(int & any), !int}"); }
		@Test public void test_30173() { testValid("({any, int} | (int | any))","{(int & int), !int}"); }
		@Test public void test_30174() { testValid("({any, int} | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_30175() { testValid("({any, int} | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_30176() { testValid("({any, int} | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_30177() { testValid("({any, int} | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_30178() { testValid("({any, int} | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_30179() { testValid("({any, int} | (int | any))","{!int, {int, any}}"); }
		@Test public void test_30180() { testValid("({any, int} | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_30181() { testValid("({any, int} | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_30182() { testValid("({any, int} | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_30183() { testValid("({any, int} | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_30184() { testValid("({any, int} | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_30185() { testValid("({any, int} | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_30186() { testValid("({any, int} | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_30187() { testValid("({any, int} | (int | any))","{!int, {int, int}}"); }
		@Test public void test_30188() { testValid("({any, int} | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_30189() { testValid("({any, int} | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_30190() { testValid("({any, int} | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_30191() { testValid("({any, int} | (int | any))","{(int & any), {int, int}}"); }
		@Test public void test_30192() { testValid("({any, int} | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_30193() { testValid("({any, int} | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_30194() { testValid("({any, int} | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_30195() { testValid("({any, int} | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_30196() { testValid("({any, int} | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_30197() { testValid("({any, int} | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_30198() { testValid("({any, int} | (int | any))","{!int, (int | any)}"); }
		@Test public void test_30199() { testValid("({any, int} | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_30200() { testValid("({any, int} | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_30201() { testValid("({any, int} | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_30202() { testValid("({any, int} | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_30203() { testValid("({any, int} | (int | any))","{!int, (any | int)}"); }
		@Test public void test_30204() { testValid("({any, int} | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_30205() { testValid("({any, int} | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_30206() { testValid("({any, int} | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_30207() { testValid("({any, int} | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_30208() { testValid("({any, int} | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_30209() { testValid("({any, int} | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_30210() { testValid("({any, int} | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_30211() { testValid("({any, int} | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_30212() { testValid("({any, int} | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_30213() { testValid("({any, int} | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_30214() { testValid("({any, int} | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_30215() { testValid("({any, int} | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_30216() { testValid("({any, int} | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_30217() { testValid("({any, int} | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_30218() { testValid("({any, int} | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_30219() { testValid("({any, int} | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_30220() { testValid("({any, int} | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_30221() { testValid("({any, int} | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_30222() { testValid("({any, int} | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_30223() { testValid("({any, int} | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_30224() { testValid("({any, int} | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_30225() { testValid("({any, int} | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_30226() { testValid("({any, int} | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_30227() { testValid("({any, int} | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_30228() { testValid("({any, int} | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_30229() { testValid("({any, int} | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_30230() { testValid("({any, int} | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_30231() { testValid("({any, int} | (int | any))","(!int | {any})"); }
		@Test public void test_30232() { testValid("({any, int} | (int | any))","({any, any} | {any})"); }
		@Test public void test_30233() { testValid("({any, int} | (int | any))","((any | any) | {any})"); }
		@Test public void test_30234() { testValid("({any, int} | (int | any))","((int | any) | {any})"); }
		@Test public void test_30235() { testValid("({any, int} | (int | any))","((any & any) | {any})"); }
		@Test public void test_30236() { testValid("({any, int} | (int | any))","((int & any) | {any})"); }
		@Test public void test_30237() { testValid("({any, int} | (int | any))","((any & int) | {any})"); }
		@Test public void test_30238() { testValid("({any, int} | (int | any))","({int} | {int})"); }
		@Test public void test_30239() { testValid("({any, int} | (int | any))","(!any | {int})"); }
		@Test public void test_30240() { testValid("({any, int} | (int | any))","(!int | {int})"); }
		@Test public void test_30241() { testValid("({any, int} | (int | any))","({any, int} | {int})"); }
		@Test public void test_30242() { testValid("({any, int} | (int | any))","((int & any) | {int})"); }
		@Test public void test_30243() { testValid("({any, int} | (int | any))","((any & int) | {int})"); }
		@Test public void test_30244() { testValid("({any, int} | (int | any))","((int & int) | {int})"); }
		@Test public void test_30245() { testValid("({any, int} | (int | any))","({any} | !any)"); }
		@Test public void test_30246() { testValid("({any, int} | (int | any))","({int} | !any)"); }
		@Test public void test_30247() { testValid("({any, int} | (int | any))","({any, any} | !any)"); }
		@Test public void test_30248() { testValid("({any, int} | (int | any))","({int, int} | !any)"); }
		@Test public void test_30249() { testValid("({any, int} | (int | any))","((any | any) | !any)"); }
		@Test public void test_30250() { testValid("({any, int} | (int | any))","((int | any) | !any)"); }
		@Test public void test_30251() { testValid("({any, int} | (int | any))","((int | int) | !any)"); }
		@Test public void test_30252() { testValid("({any, int} | (int | any))","((int & int) | !any)"); }
		@Test public void test_30253() { testValid("({any, int} | (int | any))","(!int | !int)"); }
		@Test public void test_30254() { testValid("({any, int} | (int | any))","({any, any} | !int)"); }
		@Test public void test_30255() { testValid("({any, int} | (int | any))","({int, int} | !int)"); }
		@Test public void test_30256() { testValid("({any, int} | (int | any))","((int | any) | !int)"); }
		@Test public void test_30257() { testValid("({any, int} | (int | any))","((any | int) | !int)"); }
		@Test public void test_30258() { testValid("({any, int} | (int | any))","((any & int) | !int)"); }
		@Test public void test_30259() { testValid("({any, int} | (int | any))","((int & int) | !int)"); }
		@Test public void test_30260() { testValid("({any, int} | (int | any))","({int} | {any, any})"); }
		@Test public void test_30261() { testValid("({any, int} | (int | any))","(!any | {any, any})"); }
		@Test public void test_30262() { testValid("({any, int} | (int | any))","(!int | {any, any})"); }
		@Test public void test_30263() { testValid("({any, int} | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_30264() { testValid("({any, int} | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_30265() { testValid("({any, int} | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_30266() { testValid("({any, int} | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_30267() { testValid("({any, int} | (int | any))","(!int | {int, any})"); }
		@Test public void test_30268() { testValid("({any, int} | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_30269() { testValid("({any, int} | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_30270() { testValid("({any, int} | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_30271() { testValid("({any, int} | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_30272() { testValid("({any, int} | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_30273() { testValid("({any, int} | (int | any))","({any} | {any, int})"); }
		@Test public void test_30274() { testValid("({any, int} | (int | any))","(!int | {any, int})"); }
		@Test public void test_30275() { testValid("({any, int} | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_30276() { testValid("({any, int} | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_30277() { testValid("({any, int} | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_30278() { testValid("({any, int} | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_30279() { testValid("({any, int} | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_30280() { testValid("({any, int} | (int | any))","(!any | {int, int})"); }
		@Test public void test_30281() { testValid("({any, int} | (int | any))","(!int | {int, int})"); }
		@Test public void test_30282() { testValid("({any, int} | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_30283() { testValid("({any, int} | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_30284() { testValid("({any, int} | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_30285() { testValid("({any, int} | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_30286() { testValid("({any, int} | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_30287() { testValid("({any, int} | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_30288() { testValid("({any, int} | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_30289() { testValid("({any, int} | (int | any))","({any} | (any | any))"); }
		@Test public void test_30290() { testValid("({any, int} | (int | any))","(!any | (any | any))"); }
		@Test public void test_30291() { testValid("({any, int} | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_30292() { testValid("({any, int} | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_30293() { testValid("({any, int} | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_30294() { testValid("({any, int} | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_30295() { testValid("({any, int} | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_30296() { testValid("({any, int} | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_30297() { testValid("({any, int} | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_30298() { testValid("({any, int} | (int | any))","({any} | (int | any))"); }
		@Test public void test_30299() { testValid("({any, int} | (int | any))","(!int | (int | any))"); }
		@Test public void test_30300() { testValid("({any, int} | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_30301() { testValid("({any, int} | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_30302() { testValid("({any, int} | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_30303() { testValid("({any, int} | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_30304() { testValid("({any, int} | (int | any))","({any} | (any | int))"); }
		@Test public void test_30305() { testValid("({any, int} | (int | any))","({int} | (any | int))"); }
		@Test public void test_30306() { testValid("({any, int} | (int | any))","(!any | (any | int))"); }
		@Test public void test_30307() { testValid("({any, int} | (int | any))","(!int | (any | int))"); }
		@Test public void test_30308() { testValid("({any, int} | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_30309() { testValid("({any, int} | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_30310() { testValid("({any, int} | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_30311() { testValid("({any, int} | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_30312() { testValid("({any, int} | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_30313() { testValid("({any, int} | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_30314() { testValid("({any, int} | (int | any))","({int} | (int | int))"); }
		@Test public void test_30315() { testValid("({any, int} | (int | any))","(!any | (int | int))"); }
		@Test public void test_30316() { testValid("({any, int} | (int | any))","(!int | (int | int))"); }
		@Test public void test_30317() { testValid("({any, int} | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_30318() { testValid("({any, int} | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_30319() { testValid("({any, int} | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_30320() { testValid("({any, int} | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_30321() { testValid("({any, int} | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_30322() { testValid("({any, int} | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_30323() { testValid("({any, int} | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_30324() { testValid("({any, int} | (int | any))","(!any | (any & any))"); }
		@Test public void test_30325() { testValid("({any, int} | (int | any))","(!int | (any & any))"); }
		@Test public void test_30326() { testValid("({any, int} | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_30327() { testValid("({any, int} | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_30328() { testValid("({any, int} | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_30329() { testValid("({any, int} | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_30330() { testValid("({any, int} | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_30331() { testValid("({any, int} | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_30332() { testValid("({any, int} | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_30333() { testValid("({any, int} | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_30334() { testValid("({any, int} | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_30335() { testValid("({any, int} | (int | any))","({any} | (int & any))"); }
		@Test public void test_30336() { testValid("((int & any) | (int | any))","{int}"); }
		@Test public void test_30337() { testValid("((int & any) | (int | any))","{any, any}"); }
		@Test public void test_30338() { testValid("((int & any) | (int | any))","{int, int}"); }
		@Test public void test_30339() { testValid("((int & any) | (int | any))","(any | int)"); }
		@Test public void test_30340() { testValid("((int & any) | (int | any))","(int & any)"); }
		@Test public void test_30341() { testValid("((int & any) | (int | any))","{{any}}"); }
		@Test public void test_30342() { testValid("((int & any) | (int | any))","{{int, any}}"); }
		@Test public void test_30343() { testValid("((int & any) | (int | any))","{{int, int}}"); }
		@Test public void test_30344() { testValid("((int & any) | (int | any))","{(any | int)}"); }
		@Test public void test_30345() { testValid("((int & any) | (int | any))","!{int, any}"); }
		@Test public void test_30346() { testValid("((int & any) | (int | any))","!{int, int}"); }
		@Test public void test_30347() { testValid("((int & any) | (int | any))","!(any | any)"); }
		@Test public void test_30348() { testValid("((int & any) | (int | any))","!(any & any)"); }
		@Test public void test_30349() { testValid("((int & any) | (int | any))","!(int & int)"); }
		@Test public void test_30350() { testValid("((int & any) | (int | any))","{{int}, {any}}"); }
		@Test public void test_30351() { testValid("((int & any) | (int | any))","{!int, {any}}"); }
		@Test public void test_30352() { testValid("((int & any) | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_30353() { testValid("((int & any) | (int | any))","{(any | int), {any}}"); }
		@Test public void test_30354() { testValid("((int & any) | (int | any))","{!int, {int}}"); }
		@Test public void test_30355() { testValid("((int & any) | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_30356() { testValid("((int & any) | (int | any))","{(any | any), {int}}"); }
		@Test public void test_30357() { testValid("((int & any) | (int | any))","{(any & any), {int}}"); }
		@Test public void test_30358() { testValid("((int & any) | (int | any))","{(any & int), {int}}"); }
		@Test public void test_30359() { testValid("((int & any) | (int | any))","{{any, any}, !int}"); }
		@Test public void test_30360() { testValid("((int & any) | (int | any))","{{any, int}, !int}"); }
		@Test public void test_30361() { testValid("((int & any) | (int | any))","{(any | any), !int}"); }
		@Test public void test_30362() { testValid("((int & any) | (int | any))","{(int | any), !int}"); }
		@Test public void test_30363() { testValid("((int & any) | (int | any))","{(any & any), !int}"); }
		@Test public void test_30364() { testValid("((int & any) | (int | any))","{(int & any), !int}"); }
		@Test public void test_30365() { testValid("((int & any) | (int | any))","{(int & int), !int}"); }
		@Test public void test_30366() { testValid("((int & any) | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_30367() { testValid("((int & any) | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_30368() { testValid("((int & any) | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_30369() { testValid("((int & any) | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_30370() { testValid("((int & any) | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_30371() { testValid("((int & any) | (int | any))","{!int, {int, any}}"); }
		@Test public void test_30372() { testValid("((int & any) | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_30373() { testValid("((int & any) | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_30374() { testValid("((int & any) | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_30375() { testValid("((int & any) | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_30376() { testValid("((int & any) | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_30377() { testValid("((int & any) | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_30378() { testValid("((int & any) | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_30379() { testValid("((int & any) | (int | any))","{!int, {int, int}}"); }
		@Test public void test_30380() { testValid("((int & any) | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_30381() { testValid("((int & any) | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_30382() { testValid("((int & any) | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_30383() { testValid("((int & any) | (int | any))","{(int & any), {int, int}}"); }
		@Test public void test_30384() { testValid("((int & any) | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_30385() { testValid("((int & any) | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_30386() { testValid("((int & any) | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_30387() { testValid("((int & any) | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_30388() { testValid("((int & any) | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_30389() { testValid("((int & any) | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_30390() { testValid("((int & any) | (int | any))","{!int, (int | any)}"); }
		@Test public void test_30391() { testValid("((int & any) | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_30392() { testValid("((int & any) | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_30393() { testValid("((int & any) | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_30394() { testValid("((int & any) | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_30395() { testValid("((int & any) | (int | any))","{!int, (any | int)}"); }
		@Test public void test_30396() { testValid("((int & any) | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_30397() { testValid("((int & any) | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_30398() { testValid("((int & any) | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_30399() { testValid("((int & any) | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_30400() { testValid("((int & any) | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_30401() { testValid("((int & any) | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_30402() { testValid("((int & any) | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_30403() { testValid("((int & any) | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_30404() { testValid("((int & any) | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_30405() { testValid("((int & any) | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_30406() { testValid("((int & any) | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_30407() { testValid("((int & any) | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_30408() { testValid("((int & any) | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_30409() { testValid("((int & any) | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_30410() { testValid("((int & any) | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_30411() { testValid("((int & any) | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_30412() { testValid("((int & any) | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_30413() { testValid("((int & any) | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_30414() { testValid("((int & any) | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_30415() { testValid("((int & any) | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_30416() { testValid("((int & any) | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_30417() { testValid("((int & any) | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_30418() { testValid("((int & any) | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_30419() { testValid("((int & any) | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_30420() { testValid("((int & any) | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_30421() { testValid("((int & any) | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_30422() { testValid("((int & any) | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_30423() { testValid("((int & any) | (int | any))","(!int | {any})"); }
		@Test public void test_30424() { testValid("((int & any) | (int | any))","({any, any} | {any})"); }
		@Test public void test_30425() { testValid("((int & any) | (int | any))","((any | any) | {any})"); }
		@Test public void test_30426() { testValid("((int & any) | (int | any))","((int | any) | {any})"); }
		@Test public void test_30427() { testValid("((int & any) | (int | any))","((any & any) | {any})"); }
		@Test public void test_30428() { testValid("((int & any) | (int | any))","((int & any) | {any})"); }
		@Test public void test_30429() { testValid("((int & any) | (int | any))","((any & int) | {any})"); }
		@Test public void test_30430() { testValid("((int & any) | (int | any))","({int} | {int})"); }
		@Test public void test_30431() { testValid("((int & any) | (int | any))","(!any | {int})"); }
		@Test public void test_30432() { testValid("((int & any) | (int | any))","(!int | {int})"); }
		@Test public void test_30433() { testValid("((int & any) | (int | any))","({any, int} | {int})"); }
		@Test public void test_30434() { testValid("((int & any) | (int | any))","((int & any) | {int})"); }
		@Test public void test_30435() { testValid("((int & any) | (int | any))","((any & int) | {int})"); }
		@Test public void test_30436() { testValid("((int & any) | (int | any))","((int & int) | {int})"); }
		@Test public void test_30437() { testValid("((int & any) | (int | any))","({any} | !any)"); }
		@Test public void test_30438() { testValid("((int & any) | (int | any))","({int} | !any)"); }
		@Test public void test_30439() { testValid("((int & any) | (int | any))","({any, any} | !any)"); }
		@Test public void test_30440() { testValid("((int & any) | (int | any))","({int, int} | !any)"); }
		@Test public void test_30441() { testValid("((int & any) | (int | any))","((any | any) | !any)"); }
		@Test public void test_30442() { testValid("((int & any) | (int | any))","((int | any) | !any)"); }
		@Test public void test_30443() { testValid("((int & any) | (int | any))","((int | int) | !any)"); }
		@Test public void test_30444() { testValid("((int & any) | (int | any))","((int & int) | !any)"); }
		@Test public void test_30445() { testValid("((int & any) | (int | any))","(!int | !int)"); }
		@Test public void test_30446() { testValid("((int & any) | (int | any))","({any, any} | !int)"); }
		@Test public void test_30447() { testValid("((int & any) | (int | any))","({int, int} | !int)"); }
		@Test public void test_30448() { testValid("((int & any) | (int | any))","((int | any) | !int)"); }
		@Test public void test_30449() { testValid("((int & any) | (int | any))","((any | int) | !int)"); }
		@Test public void test_30450() { testValid("((int & any) | (int | any))","((any & int) | !int)"); }
		@Test public void test_30451() { testValid("((int & any) | (int | any))","((int & int) | !int)"); }
		@Test public void test_30452() { testValid("((int & any) | (int | any))","({int} | {any, any})"); }
		@Test public void test_30453() { testValid("((int & any) | (int | any))","(!any | {any, any})"); }
		@Test public void test_30454() { testValid("((int & any) | (int | any))","(!int | {any, any})"); }
		@Test public void test_30455() { testValid("((int & any) | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_30456() { testValid("((int & any) | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_30457() { testValid("((int & any) | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_30458() { testValid("((int & any) | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_30459() { testValid("((int & any) | (int | any))","(!int | {int, any})"); }
		@Test public void test_30460() { testValid("((int & any) | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_30461() { testValid("((int & any) | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_30462() { testValid("((int & any) | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_30463() { testValid("((int & any) | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_30464() { testValid("((int & any) | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_30465() { testValid("((int & any) | (int | any))","({any} | {any, int})"); }
		@Test public void test_30466() { testValid("((int & any) | (int | any))","(!int | {any, int})"); }
		@Test public void test_30467() { testValid("((int & any) | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_30468() { testValid("((int & any) | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_30469() { testValid("((int & any) | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_30470() { testValid("((int & any) | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_30471() { testValid("((int & any) | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_30472() { testValid("((int & any) | (int | any))","(!any | {int, int})"); }
		@Test public void test_30473() { testValid("((int & any) | (int | any))","(!int | {int, int})"); }
		@Test public void test_30474() { testValid("((int & any) | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_30475() { testValid("((int & any) | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_30476() { testValid("((int & any) | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_30477() { testValid("((int & any) | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_30478() { testValid("((int & any) | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_30479() { testValid("((int & any) | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_30480() { testValid("((int & any) | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_30481() { testValid("((int & any) | (int | any))","({any} | (any | any))"); }
		@Test public void test_30482() { testValid("((int & any) | (int | any))","(!any | (any | any))"); }
		@Test public void test_30483() { testValid("((int & any) | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_30484() { testValid("((int & any) | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_30485() { testValid("((int & any) | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_30486() { testValid("((int & any) | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_30487() { testValid("((int & any) | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_30488() { testValid("((int & any) | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_30489() { testValid("((int & any) | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_30490() { testValid("((int & any) | (int | any))","({any} | (int | any))"); }
		@Test public void test_30491() { testValid("((int & any) | (int | any))","(!int | (int | any))"); }
		@Test public void test_30492() { testValid("((int & any) | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_30493() { testValid("((int & any) | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_30494() { testValid("((int & any) | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_30495() { testValid("((int & any) | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_30496() { testValid("((int & any) | (int | any))","({any} | (any | int))"); }
		@Test public void test_30497() { testValid("((int & any) | (int | any))","({int} | (any | int))"); }
		@Test public void test_30498() { testValid("((int & any) | (int | any))","(!any | (any | int))"); }
		@Test public void test_30499() { testValid("((int & any) | (int | any))","(!int | (any | int))"); }
		@Test public void test_30500() { testValid("((int & any) | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_30501() { testValid("((int & any) | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_30502() { testValid("((int & any) | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_30503() { testValid("((int & any) | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_30504() { testValid("((int & any) | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_30505() { testValid("((int & any) | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_30506() { testValid("((int & any) | (int | any))","({int} | (int | int))"); }
		@Test public void test_30507() { testValid("((int & any) | (int | any))","(!any | (int | int))"); }
		@Test public void test_30508() { testValid("((int & any) | (int | any))","(!int | (int | int))"); }
		@Test public void test_30509() { testValid("((int & any) | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_30510() { testValid("((int & any) | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_30511() { testValid("((int & any) | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_30512() { testValid("((int & any) | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_30513() { testValid("((int & any) | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_30514() { testValid("((int & any) | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_30515() { testValid("((int & any) | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_30516() { testValid("((int & any) | (int | any))","(!any | (any & any))"); }
		@Test public void test_30517() { testValid("((int & any) | (int | any))","(!int | (any & any))"); }
		@Test public void test_30518() { testValid("((int & any) | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_30519() { testValid("((int & any) | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_30520() { testValid("((int & any) | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_30521() { testValid("((int & any) | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_30522() { testValid("((int & any) | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_30523() { testValid("((int & any) | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_30524() { testValid("((int & any) | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_30525() { testValid("((int & any) | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_30526() { testValid("((int & any) | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_30527() { testValid("((int & any) | (int | any))","({any} | (int & any))"); }
		@Test public void test_30528() { testValid("((any & int) | (int | any))","{int}"); }
		@Test public void test_30529() { testValid("((any & int) | (int | any))","{any, any}"); }
		@Test public void test_30530() { testValid("((any & int) | (int | any))","{int, int}"); }
		@Test public void test_30531() { testValid("((any & int) | (int | any))","(any | int)"); }
		@Test public void test_30532() { testValid("((any & int) | (int | any))","(int & any)"); }
		@Test public void test_30533() { testValid("((any & int) | (int | any))","{{any}}"); }
		@Test public void test_30534() { testValid("((any & int) | (int | any))","{{int, any}}"); }
		@Test public void test_30535() { testValid("((any & int) | (int | any))","{{int, int}}"); }
		@Test public void test_30536() { testValid("((any & int) | (int | any))","{(any | int)}"); }
		@Test public void test_30537() { testValid("((any & int) | (int | any))","!{int, any}"); }
		@Test public void test_30538() { testValid("((any & int) | (int | any))","!{int, int}"); }
		@Test public void test_30539() { testValid("((any & int) | (int | any))","!(any | any)"); }
		@Test public void test_30540() { testValid("((any & int) | (int | any))","!(any & any)"); }
		@Test public void test_30541() { testValid("((any & int) | (int | any))","!(int & int)"); }
		@Test public void test_30542() { testValid("((any & int) | (int | any))","{{int}, {any}}"); }
		@Test public void test_30543() { testValid("((any & int) | (int | any))","{!int, {any}}"); }
		@Test public void test_30544() { testValid("((any & int) | (int | any))","{{int, int}, {any}}"); }
		@Test public void test_30545() { testValid("((any & int) | (int | any))","{(any | int), {any}}"); }
		@Test public void test_30546() { testValid("((any & int) | (int | any))","{!int, {int}}"); }
		@Test public void test_30547() { testValid("((any & int) | (int | any))","{{any, any}, {int}}"); }
		@Test public void test_30548() { testValid("((any & int) | (int | any))","{(any | any), {int}}"); }
		@Test public void test_30549() { testValid("((any & int) | (int | any))","{(any & any), {int}}"); }
		@Test public void test_30550() { testValid("((any & int) | (int | any))","{(any & int), {int}}"); }
		@Test public void test_30551() { testValid("((any & int) | (int | any))","{{any, any}, !int}"); }
		@Test public void test_30552() { testValid("((any & int) | (int | any))","{{any, int}, !int}"); }
		@Test public void test_30553() { testValid("((any & int) | (int | any))","{(any | any), !int}"); }
		@Test public void test_30554() { testValid("((any & int) | (int | any))","{(int | any), !int}"); }
		@Test public void test_30555() { testValid("((any & int) | (int | any))","{(any & any), !int}"); }
		@Test public void test_30556() { testValid("((any & int) | (int | any))","{(int & any), !int}"); }
		@Test public void test_30557() { testValid("((any & int) | (int | any))","{(int & int), !int}"); }
		@Test public void test_30558() { testValid("((any & int) | (int | any))","{{any}, {any, any}}"); }
		@Test public void test_30559() { testValid("((any & int) | (int | any))","{{int}, {any, any}}"); }
		@Test public void test_30560() { testValid("((any & int) | (int | any))","{{int, int}, {any, any}}"); }
		@Test public void test_30561() { testValid("((any & int) | (int | any))","{(any | any), {any, any}}"); }
		@Test public void test_30562() { testValid("((any & int) | (int | any))","{(any | int), {any, any}}"); }
		@Test public void test_30563() { testValid("((any & int) | (int | any))","{!int, {int, any}}"); }
		@Test public void test_30564() { testValid("((any & int) | (int | any))","{{int, any}, {int, any}}"); }
		@Test public void test_30565() { testValid("((any & int) | (int | any))","{{any, int}, {int, any}}"); }
		@Test public void test_30566() { testValid("((any & int) | (int | any))","{(any & int), {int, any}}"); }
		@Test public void test_30567() { testValid("((any & int) | (int | any))","{{any}, {any, int}}"); }
		@Test public void test_30568() { testValid("((any & int) | (int | any))","{{int, int}, {any, int}}"); }
		@Test public void test_30569() { testValid("((any & int) | (int | any))","{(int | int), {any, int}}"); }
		@Test public void test_30570() { testValid("((any & int) | (int | any))","{(any & int), {any, int}}"); }
		@Test public void test_30571() { testValid("((any & int) | (int | any))","{!int, {int, int}}"); }
		@Test public void test_30572() { testValid("((any & int) | (int | any))","{{int, int}, {int, int}}"); }
		@Test public void test_30573() { testValid("((any & int) | (int | any))","{(any | any), {int, int}}"); }
		@Test public void test_30574() { testValid("((any & int) | (int | any))","{(int | any), {int, int}}"); }
		@Test public void test_30575() { testValid("((any & int) | (int | any))","{(int & any), {int, int}}"); }
		@Test public void test_30576() { testValid("((any & int) | (int | any))","{{int}, (any | any)}"); }
		@Test public void test_30577() { testValid("((any & int) | (int | any))","{{int, any}, (any | any)}"); }
		@Test public void test_30578() { testValid("((any & int) | (int | any))","{{any, int}, (any | any)}"); }
		@Test public void test_30579() { testValid("((any & int) | (int | any))","{(any | any), (any | any)}"); }
		@Test public void test_30580() { testValid("((any & int) | (int | any))","{(int | any), (any | any)}"); }
		@Test public void test_30581() { testValid("((any & int) | (int | any))","{(int & int), (any | any)}"); }
		@Test public void test_30582() { testValid("((any & int) | (int | any))","{!int, (int | any)}"); }
		@Test public void test_30583() { testValid("((any & int) | (int | any))","{{int, int}, (int | any)}"); }
		@Test public void test_30584() { testValid("((any & int) | (int | any))","{(any | any), (int | any)}"); }
		@Test public void test_30585() { testValid("((any & int) | (int | any))","{(int | int), (int | any)}"); }
		@Test public void test_30586() { testValid("((any & int) | (int | any))","{{any}, (any | int)}"); }
		@Test public void test_30587() { testValid("((any & int) | (int | any))","{!int, (any | int)}"); }
		@Test public void test_30588() { testValid("((any & int) | (int | any))","{(any | any), (any | int)}"); }
		@Test public void test_30589() { testValid("((any & int) | (int | any))","{(any | int), (any | int)}"); }
		@Test public void test_30590() { testValid("((any & int) | (int | any))","{(any & int), (any | int)}"); }
		@Test public void test_30591() { testValid("((any & int) | (int | any))","{{int}, (int | int)}"); }
		@Test public void test_30592() { testValid("((any & int) | (int | any))","{{any, any}, (int | int)}"); }
		@Test public void test_30593() { testValid("((any & int) | (int | any))","{{int, int}, (int | int)}"); }
		@Test public void test_30594() { testValid("((any & int) | (int | any))","{{int}, (any & any)}"); }
		@Test public void test_30595() { testValid("((any & int) | (int | any))","{{int, any}, (any & any)}"); }
		@Test public void test_30596() { testValid("((any & int) | (int | any))","{{any, int}, (any & any)}"); }
		@Test public void test_30597() { testValid("((any & int) | (int | any))","{(int | any), (any & any)}"); }
		@Test public void test_30598() { testValid("((any & int) | (int | any))","{(any & any), (any & any)}"); }
		@Test public void test_30599() { testValid("((any & int) | (int | any))","{(int & any), (any & any)}"); }
		@Test public void test_30600() { testValid("((any & int) | (int | any))","{{any}, (int & any)}"); }
		@Test public void test_30601() { testValid("((any & int) | (int | any))","{{int}, (int & any)}"); }
		@Test public void test_30602() { testValid("((any & int) | (int | any))","{{any, any}, (int & any)}"); }
		@Test public void test_30603() { testValid("((any & int) | (int | any))","{{int, any}, (int & any)}"); }
		@Test public void test_30604() { testValid("((any & int) | (int | any))","{(any | int), (int & any)}"); }
		@Test public void test_30605() { testValid("((any & int) | (int | any))","{(any & any), (int & any)}"); }
		@Test public void test_30606() { testValid("((any & int) | (int | any))","{(int & any), (int & any)}"); }
		@Test public void test_30607() { testValid("((any & int) | (int | any))","{(int & int), (int & any)}"); }
		@Test public void test_30608() { testValid("((any & int) | (int | any))","{{int, any}, (any & int)}"); }
		@Test public void test_30609() { testValid("((any & int) | (int | any))","{(any & any), (any & int)}"); }
		@Test public void test_30610() { testValid("((any & int) | (int | any))","{{any, int}, (int & int)}"); }
		@Test public void test_30611() { testValid("((any & int) | (int | any))","{(int | int), (int & int)}"); }
		@Test public void test_30612() { testValid("((any & int) | (int | any))","{(any & any), (int & int)}"); }
		@Test public void test_30613() { testValid("((any & int) | (int | any))","{(any & int), (int & int)}"); }
		@Test public void test_30614() { testValid("((any & int) | (int | any))","{(int & int), (int & int)}"); }
		@Test public void test_30615() { testValid("((any & int) | (int | any))","(!int | {any})"); }
		@Test public void test_30616() { testValid("((any & int) | (int | any))","({any, any} | {any})"); }
		@Test public void test_30617() { testValid("((any & int) | (int | any))","((any | any) | {any})"); }
		@Test public void test_30618() { testValid("((any & int) | (int | any))","((int | any) | {any})"); }
		@Test public void test_30619() { testValid("((any & int) | (int | any))","((any & any) | {any})"); }
		@Test public void test_30620() { testValid("((any & int) | (int | any))","((int & any) | {any})"); }
		@Test public void test_30621() { testValid("((any & int) | (int | any))","((any & int) | {any})"); }
		@Test public void test_30622() { testValid("((any & int) | (int | any))","({int} | {int})"); }
		@Test public void test_30623() { testValid("((any & int) | (int | any))","(!any | {int})"); }
		@Test public void test_30624() { testValid("((any & int) | (int | any))","(!int | {int})"); }
		@Test public void test_30625() { testValid("((any & int) | (int | any))","({any, int} | {int})"); }
		@Test public void test_30626() { testValid("((any & int) | (int | any))","((int & any) | {int})"); }
		@Test public void test_30627() { testValid("((any & int) | (int | any))","((any & int) | {int})"); }
		@Test public void test_30628() { testValid("((any & int) | (int | any))","((int & int) | {int})"); }
		@Test public void test_30629() { testValid("((any & int) | (int | any))","({any} | !any)"); }
		@Test public void test_30630() { testValid("((any & int) | (int | any))","({int} | !any)"); }
		@Test public void test_30631() { testValid("((any & int) | (int | any))","({any, any} | !any)"); }
		@Test public void test_30632() { testValid("((any & int) | (int | any))","({int, int} | !any)"); }
		@Test public void test_30633() { testValid("((any & int) | (int | any))","((any | any) | !any)"); }
		@Test public void test_30634() { testValid("((any & int) | (int | any))","((int | any) | !any)"); }
		@Test public void test_30635() { testValid("((any & int) | (int | any))","((int | int) | !any)"); }
		@Test public void test_30636() { testValid("((any & int) | (int | any))","((int & int) | !any)"); }
		@Test public void test_30637() { testValid("((any & int) | (int | any))","(!int | !int)"); }
		@Test public void test_30638() { testValid("((any & int) | (int | any))","({any, any} | !int)"); }
		@Test public void test_30639() { testValid("((any & int) | (int | any))","({int, int} | !int)"); }
		@Test public void test_30640() { testValid("((any & int) | (int | any))","((int | any) | !int)"); }
		@Test public void test_30641() { testValid("((any & int) | (int | any))","((any | int) | !int)"); }
		@Test public void test_30642() { testValid("((any & int) | (int | any))","((any & int) | !int)"); }
		@Test public void test_30643() { testValid("((any & int) | (int | any))","((int & int) | !int)"); }
		@Test public void test_30644() { testValid("((any & int) | (int | any))","({int} | {any, any})"); }
		@Test public void test_30645() { testValid("((any & int) | (int | any))","(!any | {any, any})"); }
		@Test public void test_30646() { testValid("((any & int) | (int | any))","(!int | {any, any})"); }
		@Test public void test_30647() { testValid("((any & int) | (int | any))","({any, int} | {any, any})"); }
		@Test public void test_30648() { testValid("((any & int) | (int | any))","((int | any) | {any, any})"); }
		@Test public void test_30649() { testValid("((any & int) | (int | any))","((any & any) | {any, any})"); }
		@Test public void test_30650() { testValid("((any & int) | (int | any))","((any & int) | {any, any})"); }
		@Test public void test_30651() { testValid("((any & int) | (int | any))","(!int | {int, any})"); }
		@Test public void test_30652() { testValid("((any & int) | (int | any))","({any, int} | {int, any})"); }
		@Test public void test_30653() { testValid("((any & int) | (int | any))","((any | any) | {int, any})"); }
		@Test public void test_30654() { testValid("((any & int) | (int | any))","((int | any) | {int, any})"); }
		@Test public void test_30655() { testValid("((any & int) | (int | any))","((any | int) | {int, any})"); }
		@Test public void test_30656() { testValid("((any & int) | (int | any))","((int & any) | {int, any})"); }
		@Test public void test_30657() { testValid("((any & int) | (int | any))","({any} | {any, int})"); }
		@Test public void test_30658() { testValid("((any & int) | (int | any))","(!int | {any, int})"); }
		@Test public void test_30659() { testValid("((any & int) | (int | any))","({any, int} | {any, int})"); }
		@Test public void test_30660() { testValid("((any & int) | (int | any))","((any | any) | {any, int})"); }
		@Test public void test_30661() { testValid("((any & int) | (int | any))","((any | int) | {any, int})"); }
		@Test public void test_30662() { testValid("((any & int) | (int | any))","((int | int) | {any, int})"); }
		@Test public void test_30663() { testValid("((any & int) | (int | any))","((int & any) | {any, int})"); }
		@Test public void test_30664() { testValid("((any & int) | (int | any))","(!any | {int, int})"); }
		@Test public void test_30665() { testValid("((any & int) | (int | any))","(!int | {int, int})"); }
		@Test public void test_30666() { testValid("((any & int) | (int | any))","({any, any} | {int, int})"); }
		@Test public void test_30667() { testValid("((any & int) | (int | any))","({any, int} | {int, int})"); }
		@Test public void test_30668() { testValid("((any & int) | (int | any))","((any | any) | {int, int})"); }
		@Test public void test_30669() { testValid("((any & int) | (int | any))","((int | int) | {int, int})"); }
		@Test public void test_30670() { testValid("((any & int) | (int | any))","((int & any) | {int, int})"); }
		@Test public void test_30671() { testValid("((any & int) | (int | any))","((any & int) | {int, int})"); }
		@Test public void test_30672() { testValid("((any & int) | (int | any))","((int & int) | {int, int})"); }
		@Test public void test_30673() { testValid("((any & int) | (int | any))","({any} | (any | any))"); }
		@Test public void test_30674() { testValid("((any & int) | (int | any))","(!any | (any | any))"); }
		@Test public void test_30675() { testValid("((any & int) | (int | any))","({any, any} | (any | any))"); }
		@Test public void test_30676() { testValid("((any & int) | (int | any))","({any, int} | (any | any))"); }
		@Test public void test_30677() { testValid("((any & int) | (int | any))","({int, int} | (any | any))"); }
		@Test public void test_30678() { testValid("((any & int) | (int | any))","((int | any) | (any | any))"); }
		@Test public void test_30679() { testValid("((any & int) | (int | any))","((any | int) | (any | any))"); }
		@Test public void test_30680() { testValid("((any & int) | (int | any))","((any & int) | (any | any))"); }
		@Test public void test_30681() { testValid("((any & int) | (int | any))","((int & int) | (any | any))"); }
		@Test public void test_30682() { testValid("((any & int) | (int | any))","({any} | (int | any))"); }
		@Test public void test_30683() { testValid("((any & int) | (int | any))","(!int | (int | any))"); }
		@Test public void test_30684() { testValid("((any & int) | (int | any))","({int, any} | (int | any))"); }
		@Test public void test_30685() { testValid("((any & int) | (int | any))","({any, int} | (int | any))"); }
		@Test public void test_30686() { testValid("((any & int) | (int | any))","((int & any) | (int | any))"); }
		@Test public void test_30687() { testValid("((any & int) | (int | any))","((any & int) | (int | any))"); }
		@Test public void test_30688() { testValid("((any & int) | (int | any))","({any} | (any | int))"); }
		@Test public void test_30689() { testValid("((any & int) | (int | any))","({int} | (any | int))"); }
		@Test public void test_30690() { testValid("((any & int) | (int | any))","(!any | (any | int))"); }
		@Test public void test_30691() { testValid("((any & int) | (int | any))","(!int | (any | int))"); }
		@Test public void test_30692() { testValid("((any & int) | (int | any))","({any, int} | (any | int))"); }
		@Test public void test_30693() { testValid("((any & int) | (int | any))","({int, int} | (any | int))"); }
		@Test public void test_30694() { testValid("((any & int) | (int | any))","((int | any) | (any | int))"); }
		@Test public void test_30695() { testValid("((any & int) | (int | any))","((any | int) | (any | int))"); }
		@Test public void test_30696() { testValid("((any & int) | (int | any))","((int | int) | (any | int))"); }
		@Test public void test_30697() { testValid("((any & int) | (int | any))","((any & any) | (any | int))"); }
		@Test public void test_30698() { testValid("((any & int) | (int | any))","({int} | (int | int))"); }
		@Test public void test_30699() { testValid("((any & int) | (int | any))","(!any | (int | int))"); }
		@Test public void test_30700() { testValid("((any & int) | (int | any))","(!int | (int | int))"); }
		@Test public void test_30701() { testValid("((any & int) | (int | any))","({int, any} | (int | int))"); }
		@Test public void test_30702() { testValid("((any & int) | (int | any))","({any, int} | (int | int))"); }
		@Test public void test_30703() { testValid("((any & int) | (int | any))","((any | int) | (int | int))"); }
		@Test public void test_30704() { testValid("((any & int) | (int | any))","((int | int) | (int | int))"); }
		@Test public void test_30705() { testValid("((any & int) | (int | any))","((any & any) | (int | int))"); }
		@Test public void test_30706() { testValid("((any & int) | (int | any))","((int & any) | (int | int))"); }
		@Test public void test_30707() { testValid("((any & int) | (int | any))","((int & int) | (int | int))"); }
		@Test public void test_30708() { testValid("((any & int) | (int | any))","(!any | (any & any))"); }
		@Test public void test_30709() { testValid("((any & int) | (int | any))","(!int | (any & any))"); }
		@Test public void test_30710() { testValid("((any & int) | (int | any))","({any, any} | (any & any))"); }
		@Test public void test_30711() { testValid("((any & int) | (int | any))","({int, any} | (any & any))"); }
		@Test public void test_30712() { testValid("((any & int) | (int | any))","({any, int} | (any & any))"); }
		@Test public void test_30713() { testValid("((any & int) | (int | any))","({int, int} | (any & any))"); }
		@Test public void test_30714() { testValid("((any & int) | (int | any))","((int | any) | (any & any))"); }
		@Test public void test_30715() { testValid("((any & int) | (int | any))","((int | int) | (any & any))"); }
		@Test public void test_30716() { testValid("((any & int) | (int | any))","((int & any) | (any & any))"); }
		@Test public void test_30717() { testValid("((any & int) | (int | any))","((any & int) | (any & any))"); }
		@Test public void test_30718() { testValid("((any & int) | (int | any))","((int & int) | (any & any))"); }
		@Test public void test_30719() { testValid("((any & int) | (int | any))","({any} | (int & any))"); }
		@Test public void test_30720() { testValid("({any} | (any | int))","{int}"); }
		@Test public void test_30721() { testValid("({any} | (any | int))","{any, any}"); }
		@Test public void test_30722() { testValid("({any} | (any | int))","{int, int}"); }
		@Test public void test_30723() { testValid("({any} | (any | int))","(any | int)"); }
		@Test public void test_30724() { testValid("({any} | (any | int))","(int & any)"); }
		@Test public void test_30725() { testValid("({any} | (any | int))","{{any}}"); }
		@Test public void test_30726() { testValid("({any} | (any | int))","{{int, any}}"); }
		@Test public void test_30727() { testValid("({any} | (any | int))","{{int, int}}"); }
		@Test public void test_30728() { testValid("({any} | (any | int))","{(any | int)}"); }
		@Test public void test_30729() { testValid("({any} | (any | int))","!{int, any}"); }
		@Test public void test_30730() { testValid("({any} | (any | int))","!{int, int}"); }
		@Test public void test_30731() { testValid("({any} | (any | int))","!(any | any)"); }
		@Test public void test_30732() { testValid("({any} | (any | int))","!(any & any)"); }
		@Test public void test_30733() { testValid("({any} | (any | int))","!(int & int)"); }
		@Test public void test_30734() { testValid("({any} | (any | int))","{{int}, {any}}"); }
		@Test public void test_30735() { testValid("({any} | (any | int))","{!int, {any}}"); }
		@Test public void test_30736() { testValid("({any} | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_30737() { testValid("({any} | (any | int))","{(any | int), {any}}"); }
		@Test public void test_30738() { testValid("({any} | (any | int))","{!int, {int}}"); }
		@Test public void test_30739() { testValid("({any} | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_30740() { testValid("({any} | (any | int))","{(any | any), {int}}"); }
		@Test public void test_30741() { testValid("({any} | (any | int))","{(any & any), {int}}"); }
		@Test public void test_30742() { testValid("({any} | (any | int))","{(any & int), {int}}"); }
		@Test public void test_30743() { testValid("({any} | (any | int))","{{any, any}, !int}"); }
		@Test public void test_30744() { testValid("({any} | (any | int))","{{any, int}, !int}"); }
		@Test public void test_30745() { testValid("({any} | (any | int))","{(any | any), !int}"); }
		@Test public void test_30746() { testValid("({any} | (any | int))","{(int | any), !int}"); }
		@Test public void test_30747() { testValid("({any} | (any | int))","{(any & any), !int}"); }
		@Test public void test_30748() { testValid("({any} | (any | int))","{(int & any), !int}"); }
		@Test public void test_30749() { testValid("({any} | (any | int))","{(int & int), !int}"); }
		@Test public void test_30750() { testValid("({any} | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_30751() { testValid("({any} | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_30752() { testValid("({any} | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_30753() { testValid("({any} | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_30754() { testValid("({any} | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_30755() { testValid("({any} | (any | int))","{!int, {int, any}}"); }
		@Test public void test_30756() { testValid("({any} | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_30757() { testValid("({any} | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_30758() { testValid("({any} | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_30759() { testValid("({any} | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_30760() { testValid("({any} | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_30761() { testValid("({any} | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_30762() { testValid("({any} | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_30763() { testValid("({any} | (any | int))","{!int, {int, int}}"); }
		@Test public void test_30764() { testValid("({any} | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_30765() { testValid("({any} | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_30766() { testValid("({any} | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_30767() { testValid("({any} | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_30768() { testValid("({any} | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_30769() { testValid("({any} | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_30770() { testValid("({any} | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_30771() { testValid("({any} | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_30772() { testValid("({any} | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_30773() { testValid("({any} | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_30774() { testValid("({any} | (any | int))","{!int, (int | any)}"); }
		@Test public void test_30775() { testValid("({any} | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_30776() { testValid("({any} | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_30777() { testValid("({any} | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_30778() { testValid("({any} | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_30779() { testValid("({any} | (any | int))","{!int, (any | int)}"); }
		@Test public void test_30780() { testValid("({any} | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_30781() { testValid("({any} | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_30782() { testValid("({any} | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_30783() { testValid("({any} | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_30784() { testValid("({any} | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_30785() { testValid("({any} | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_30786() { testValid("({any} | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_30787() { testValid("({any} | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_30788() { testValid("({any} | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_30789() { testValid("({any} | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_30790() { testValid("({any} | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_30791() { testValid("({any} | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_30792() { testValid("({any} | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_30793() { testValid("({any} | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_30794() { testValid("({any} | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_30795() { testValid("({any} | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_30796() { testValid("({any} | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_30797() { testValid("({any} | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_30798() { testValid("({any} | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_30799() { testValid("({any} | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_30800() { testValid("({any} | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_30801() { testValid("({any} | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_30802() { testValid("({any} | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_30803() { testValid("({any} | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_30804() { testValid("({any} | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_30805() { testValid("({any} | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_30806() { testValid("({any} | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_30807() { testValid("({any} | (any | int))","(!int | {any})"); }
		@Test public void test_30808() { testValid("({any} | (any | int))","({any, any} | {any})"); }
		@Test public void test_30809() { testValid("({any} | (any | int))","((any | any) | {any})"); }
		@Test public void test_30810() { testValid("({any} | (any | int))","((int | any) | {any})"); }
		@Test public void test_30811() { testValid("({any} | (any | int))","((any & any) | {any})"); }
		@Test public void test_30812() { testValid("({any} | (any | int))","((int & any) | {any})"); }
		@Test public void test_30813() { testValid("({any} | (any | int))","((any & int) | {any})"); }
		@Test public void test_30814() { testValid("({any} | (any | int))","({int} | {int})"); }
		@Test public void test_30815() { testValid("({any} | (any | int))","(!any | {int})"); }
		@Test public void test_30816() { testValid("({any} | (any | int))","(!int | {int})"); }
		@Test public void test_30817() { testValid("({any} | (any | int))","({any, int} | {int})"); }
		@Test public void test_30818() { testValid("({any} | (any | int))","((int & any) | {int})"); }
		@Test public void test_30819() { testValid("({any} | (any | int))","((any & int) | {int})"); }
		@Test public void test_30820() { testValid("({any} | (any | int))","((int & int) | {int})"); }
		@Test public void test_30821() { testValid("({any} | (any | int))","({any} | !any)"); }
		@Test public void test_30822() { testValid("({any} | (any | int))","({int} | !any)"); }
		@Test public void test_30823() { testValid("({any} | (any | int))","({any, any} | !any)"); }
		@Test public void test_30824() { testValid("({any} | (any | int))","({int, int} | !any)"); }
		@Test public void test_30825() { testValid("({any} | (any | int))","((any | any) | !any)"); }
		@Test public void test_30826() { testValid("({any} | (any | int))","((int | any) | !any)"); }
		@Test public void test_30827() { testValid("({any} | (any | int))","((int | int) | !any)"); }
		@Test public void test_30828() { testValid("({any} | (any | int))","((int & int) | !any)"); }
		@Test public void test_30829() { testValid("({any} | (any | int))","(!int | !int)"); }
		@Test public void test_30830() { testValid("({any} | (any | int))","({any, any} | !int)"); }
		@Test public void test_30831() { testValid("({any} | (any | int))","({int, int} | !int)"); }
		@Test public void test_30832() { testValid("({any} | (any | int))","((int | any) | !int)"); }
		@Test public void test_30833() { testValid("({any} | (any | int))","((any | int) | !int)"); }
		@Test public void test_30834() { testValid("({any} | (any | int))","((any & int) | !int)"); }
		@Test public void test_30835() { testValid("({any} | (any | int))","((int & int) | !int)"); }
		@Test public void test_30836() { testValid("({any} | (any | int))","({int} | {any, any})"); }
		@Test public void test_30837() { testValid("({any} | (any | int))","(!any | {any, any})"); }
		@Test public void test_30838() { testValid("({any} | (any | int))","(!int | {any, any})"); }
		@Test public void test_30839() { testValid("({any} | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_30840() { testValid("({any} | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_30841() { testValid("({any} | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_30842() { testValid("({any} | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_30843() { testValid("({any} | (any | int))","(!int | {int, any})"); }
		@Test public void test_30844() { testValid("({any} | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_30845() { testValid("({any} | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_30846() { testValid("({any} | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_30847() { testValid("({any} | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_30848() { testValid("({any} | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_30849() { testValid("({any} | (any | int))","({any} | {any, int})"); }
		@Test public void test_30850() { testValid("({any} | (any | int))","(!int | {any, int})"); }
		@Test public void test_30851() { testValid("({any} | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_30852() { testValid("({any} | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_30853() { testValid("({any} | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_30854() { testValid("({any} | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_30855() { testValid("({any} | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_30856() { testValid("({any} | (any | int))","(!any | {int, int})"); }
		@Test public void test_30857() { testValid("({any} | (any | int))","(!int | {int, int})"); }
		@Test public void test_30858() { testValid("({any} | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_30859() { testValid("({any} | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_30860() { testValid("({any} | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_30861() { testValid("({any} | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_30862() { testValid("({any} | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_30863() { testValid("({any} | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_30864() { testValid("({any} | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_30865() { testValid("({any} | (any | int))","({any} | (any | any))"); }
		@Test public void test_30866() { testValid("({any} | (any | int))","(!any | (any | any))"); }
		@Test public void test_30867() { testValid("({any} | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_30868() { testValid("({any} | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_30869() { testValid("({any} | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_30870() { testValid("({any} | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_30871() { testValid("({any} | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_30872() { testValid("({any} | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_30873() { testValid("({any} | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_30874() { testValid("({any} | (any | int))","({any} | (int | any))"); }
		@Test public void test_30875() { testValid("({any} | (any | int))","(!int | (int | any))"); }
		@Test public void test_30876() { testValid("({any} | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_30877() { testValid("({any} | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_30878() { testValid("({any} | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_30879() { testValid("({any} | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_30880() { testValid("({any} | (any | int))","({any} | (any | int))"); }
		@Test public void test_30881() { testValid("({any} | (any | int))","({int} | (any | int))"); }
		@Test public void test_30882() { testValid("({any} | (any | int))","(!any | (any | int))"); }
		@Test public void test_30883() { testValid("({any} | (any | int))","(!int | (any | int))"); }
		@Test public void test_30884() { testValid("({any} | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_30885() { testValid("({any} | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_30886() { testValid("({any} | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_30887() { testValid("({any} | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_30888() { testValid("({any} | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_30889() { testValid("({any} | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_30890() { testValid("({any} | (any | int))","({int} | (int | int))"); }
		@Test public void test_30891() { testValid("({any} | (any | int))","(!any | (int | int))"); }
		@Test public void test_30892() { testValid("({any} | (any | int))","(!int | (int | int))"); }
		@Test public void test_30893() { testValid("({any} | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_30894() { testValid("({any} | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_30895() { testValid("({any} | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_30896() { testValid("({any} | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_30897() { testValid("({any} | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_30898() { testValid("({any} | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_30899() { testValid("({any} | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_30900() { testValid("({any} | (any | int))","(!any | (any & any))"); }
		@Test public void test_30901() { testValid("({any} | (any | int))","(!int | (any & any))"); }
		@Test public void test_30902() { testValid("({any} | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_30903() { testValid("({any} | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_30904() { testValid("({any} | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_30905() { testValid("({any} | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_30906() { testValid("({any} | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_30907() { testValid("({any} | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_30908() { testValid("({any} | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_30909() { testValid("({any} | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_30910() { testValid("({any} | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_30911() { testValid("({any} | (any | int))","({any} | (int & any))"); }
		@Test public void test_30912() { testValid("({int} | (any | int))","{int}"); }
		@Test public void test_30913() { testValid("({int} | (any | int))","{any, any}"); }
		@Test public void test_30914() { testValid("({int} | (any | int))","{int, int}"); }
		@Test public void test_30915() { testValid("({int} | (any | int))","(any | int)"); }
		@Test public void test_30916() { testValid("({int} | (any | int))","(int & any)"); }
		@Test public void test_30917() { testValid("({int} | (any | int))","{{any}}"); }
		@Test public void test_30918() { testValid("({int} | (any | int))","{{int, any}}"); }
		@Test public void test_30919() { testValid("({int} | (any | int))","{{int, int}}"); }
		@Test public void test_30920() { testValid("({int} | (any | int))","{(any | int)}"); }
		@Test public void test_30921() { testValid("({int} | (any | int))","!{int, any}"); }
		@Test public void test_30922() { testValid("({int} | (any | int))","!{int, int}"); }
		@Test public void test_30923() { testValid("({int} | (any | int))","!(any | any)"); }
		@Test public void test_30924() { testValid("({int} | (any | int))","!(any & any)"); }
		@Test public void test_30925() { testValid("({int} | (any | int))","!(int & int)"); }
		@Test public void test_30926() { testValid("({int} | (any | int))","{{int}, {any}}"); }
		@Test public void test_30927() { testValid("({int} | (any | int))","{!int, {any}}"); }
		@Test public void test_30928() { testValid("({int} | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_30929() { testValid("({int} | (any | int))","{(any | int), {any}}"); }
		@Test public void test_30930() { testValid("({int} | (any | int))","{!int, {int}}"); }
		@Test public void test_30931() { testValid("({int} | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_30932() { testValid("({int} | (any | int))","{(any | any), {int}}"); }
		@Test public void test_30933() { testValid("({int} | (any | int))","{(any & any), {int}}"); }
		@Test public void test_30934() { testValid("({int} | (any | int))","{(any & int), {int}}"); }
		@Test public void test_30935() { testValid("({int} | (any | int))","{{any, any}, !int}"); }
		@Test public void test_30936() { testValid("({int} | (any | int))","{{any, int}, !int}"); }
		@Test public void test_30937() { testValid("({int} | (any | int))","{(any | any), !int}"); }
		@Test public void test_30938() { testValid("({int} | (any | int))","{(int | any), !int}"); }
		@Test public void test_30939() { testValid("({int} | (any | int))","{(any & any), !int}"); }
		@Test public void test_30940() { testValid("({int} | (any | int))","{(int & any), !int}"); }
		@Test public void test_30941() { testValid("({int} | (any | int))","{(int & int), !int}"); }
		@Test public void test_30942() { testValid("({int} | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_30943() { testValid("({int} | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_30944() { testValid("({int} | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_30945() { testValid("({int} | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_30946() { testValid("({int} | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_30947() { testValid("({int} | (any | int))","{!int, {int, any}}"); }
		@Test public void test_30948() { testValid("({int} | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_30949() { testValid("({int} | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_30950() { testValid("({int} | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_30951() { testValid("({int} | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_30952() { testValid("({int} | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_30953() { testValid("({int} | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_30954() { testValid("({int} | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_30955() { testValid("({int} | (any | int))","{!int, {int, int}}"); }
		@Test public void test_30956() { testValid("({int} | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_30957() { testValid("({int} | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_30958() { testValid("({int} | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_30959() { testValid("({int} | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_30960() { testValid("({int} | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_30961() { testValid("({int} | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_30962() { testValid("({int} | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_30963() { testValid("({int} | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_30964() { testValid("({int} | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_30965() { testValid("({int} | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_30966() { testValid("({int} | (any | int))","{!int, (int | any)}"); }
		@Test public void test_30967() { testValid("({int} | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_30968() { testValid("({int} | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_30969() { testValid("({int} | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_30970() { testValid("({int} | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_30971() { testValid("({int} | (any | int))","{!int, (any | int)}"); }
		@Test public void test_30972() { testValid("({int} | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_30973() { testValid("({int} | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_30974() { testValid("({int} | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_30975() { testValid("({int} | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_30976() { testValid("({int} | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_30977() { testValid("({int} | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_30978() { testValid("({int} | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_30979() { testValid("({int} | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_30980() { testValid("({int} | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_30981() { testValid("({int} | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_30982() { testValid("({int} | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_30983() { testValid("({int} | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_30984() { testValid("({int} | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_30985() { testValid("({int} | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_30986() { testValid("({int} | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_30987() { testValid("({int} | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_30988() { testValid("({int} | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_30989() { testValid("({int} | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_30990() { testValid("({int} | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_30991() { testValid("({int} | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_30992() { testValid("({int} | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_30993() { testValid("({int} | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_30994() { testValid("({int} | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_30995() { testValid("({int} | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_30996() { testValid("({int} | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_30997() { testValid("({int} | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_30998() { testValid("({int} | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_30999() { testValid("({int} | (any | int))","(!int | {any})"); }
		@Test public void test_31000() { testValid("({int} | (any | int))","({any, any} | {any})"); }
		@Test public void test_31001() { testValid("({int} | (any | int))","((any | any) | {any})"); }
		@Test public void test_31002() { testValid("({int} | (any | int))","((int | any) | {any})"); }
		@Test public void test_31003() { testValid("({int} | (any | int))","((any & any) | {any})"); }
		@Test public void test_31004() { testValid("({int} | (any | int))","((int & any) | {any})"); }
		@Test public void test_31005() { testValid("({int} | (any | int))","((any & int) | {any})"); }
		@Test public void test_31006() { testValid("({int} | (any | int))","({int} | {int})"); }
		@Test public void test_31007() { testValid("({int} | (any | int))","(!any | {int})"); }
		@Test public void test_31008() { testValid("({int} | (any | int))","(!int | {int})"); }
		@Test public void test_31009() { testValid("({int} | (any | int))","({any, int} | {int})"); }
		@Test public void test_31010() { testValid("({int} | (any | int))","((int & any) | {int})"); }
		@Test public void test_31011() { testValid("({int} | (any | int))","((any & int) | {int})"); }
		@Test public void test_31012() { testValid("({int} | (any | int))","((int & int) | {int})"); }
		@Test public void test_31013() { testValid("({int} | (any | int))","({any} | !any)"); }
		@Test public void test_31014() { testValid("({int} | (any | int))","({int} | !any)"); }
		@Test public void test_31015() { testValid("({int} | (any | int))","({any, any} | !any)"); }
		@Test public void test_31016() { testValid("({int} | (any | int))","({int, int} | !any)"); }
		@Test public void test_31017() { testValid("({int} | (any | int))","((any | any) | !any)"); }
		@Test public void test_31018() { testValid("({int} | (any | int))","((int | any) | !any)"); }
		@Test public void test_31019() { testValid("({int} | (any | int))","((int | int) | !any)"); }
		@Test public void test_31020() { testValid("({int} | (any | int))","((int & int) | !any)"); }
		@Test public void test_31021() { testValid("({int} | (any | int))","(!int | !int)"); }
		@Test public void test_31022() { testValid("({int} | (any | int))","({any, any} | !int)"); }
		@Test public void test_31023() { testValid("({int} | (any | int))","({int, int} | !int)"); }
		@Test public void test_31024() { testValid("({int} | (any | int))","((int | any) | !int)"); }
		@Test public void test_31025() { testValid("({int} | (any | int))","((any | int) | !int)"); }
		@Test public void test_31026() { testValid("({int} | (any | int))","((any & int) | !int)"); }
		@Test public void test_31027() { testValid("({int} | (any | int))","((int & int) | !int)"); }
		@Test public void test_31028() { testValid("({int} | (any | int))","({int} | {any, any})"); }
		@Test public void test_31029() { testValid("({int} | (any | int))","(!any | {any, any})"); }
		@Test public void test_31030() { testValid("({int} | (any | int))","(!int | {any, any})"); }
		@Test public void test_31031() { testValid("({int} | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31032() { testValid("({int} | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31033() { testValid("({int} | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31034() { testValid("({int} | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31035() { testValid("({int} | (any | int))","(!int | {int, any})"); }
		@Test public void test_31036() { testValid("({int} | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31037() { testValid("({int} | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31038() { testValid("({int} | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31039() { testValid("({int} | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_31040() { testValid("({int} | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_31041() { testValid("({int} | (any | int))","({any} | {any, int})"); }
		@Test public void test_31042() { testValid("({int} | (any | int))","(!int | {any, int})"); }
		@Test public void test_31043() { testValid("({int} | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_31044() { testValid("({int} | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_31045() { testValid("({int} | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_31046() { testValid("({int} | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_31047() { testValid("({int} | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_31048() { testValid("({int} | (any | int))","(!any | {int, int})"); }
		@Test public void test_31049() { testValid("({int} | (any | int))","(!int | {int, int})"); }
		@Test public void test_31050() { testValid("({int} | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_31051() { testValid("({int} | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_31052() { testValid("({int} | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_31053() { testValid("({int} | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_31054() { testValid("({int} | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_31055() { testValid("({int} | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_31056() { testValid("({int} | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_31057() { testValid("({int} | (any | int))","({any} | (any | any))"); }
		@Test public void test_31058() { testValid("({int} | (any | int))","(!any | (any | any))"); }
		@Test public void test_31059() { testValid("({int} | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_31060() { testValid("({int} | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_31061() { testValid("({int} | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_31062() { testValid("({int} | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_31063() { testValid("({int} | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_31064() { testValid("({int} | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_31065() { testValid("({int} | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_31066() { testValid("({int} | (any | int))","({any} | (int | any))"); }
		@Test public void test_31067() { testValid("({int} | (any | int))","(!int | (int | any))"); }
		@Test public void test_31068() { testValid("({int} | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_31069() { testValid("({int} | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_31070() { testValid("({int} | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_31071() { testValid("({int} | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_31072() { testValid("({int} | (any | int))","({any} | (any | int))"); }
		@Test public void test_31073() { testValid("({int} | (any | int))","({int} | (any | int))"); }
		@Test public void test_31074() { testValid("({int} | (any | int))","(!any | (any | int))"); }
		@Test public void test_31075() { testValid("({int} | (any | int))","(!int | (any | int))"); }
		@Test public void test_31076() { testValid("({int} | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_31077() { testValid("({int} | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_31078() { testValid("({int} | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_31079() { testValid("({int} | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_31080() { testValid("({int} | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_31081() { testValid("({int} | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_31082() { testValid("({int} | (any | int))","({int} | (int | int))"); }
		@Test public void test_31083() { testValid("({int} | (any | int))","(!any | (int | int))"); }
		@Test public void test_31084() { testValid("({int} | (any | int))","(!int | (int | int))"); }
		@Test public void test_31085() { testValid("({int} | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_31086() { testValid("({int} | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_31087() { testValid("({int} | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_31088() { testValid("({int} | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_31089() { testValid("({int} | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_31090() { testValid("({int} | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_31091() { testValid("({int} | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_31092() { testValid("({int} | (any | int))","(!any | (any & any))"); }
		@Test public void test_31093() { testValid("({int} | (any | int))","(!int | (any & any))"); }
		@Test public void test_31094() { testValid("({int} | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_31095() { testValid("({int} | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_31096() { testValid("({int} | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_31097() { testValid("({int} | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_31098() { testValid("({int} | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_31099() { testValid("({int} | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_31100() { testValid("({int} | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_31101() { testValid("({int} | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_31102() { testValid("({int} | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_31103() { testValid("({int} | (any | int))","({any} | (int & any))"); }
		@Test public void test_31104() { testValid("(!any | (any | int))","{int}"); }
		@Test public void test_31105() { testValid("(!any | (any | int))","{any, any}"); }
		@Test public void test_31106() { testValid("(!any | (any | int))","{int, int}"); }
		@Test public void test_31107() { testValid("(!any | (any | int))","(any | int)"); }
		@Test public void test_31108() { testValid("(!any | (any | int))","(int & any)"); }
		@Test public void test_31109() { testValid("(!any | (any | int))","{{any}}"); }
		@Test public void test_31110() { testValid("(!any | (any | int))","{{int, any}}"); }
		@Test public void test_31111() { testValid("(!any | (any | int))","{{int, int}}"); }
		@Test public void test_31112() { testValid("(!any | (any | int))","{(any | int)}"); }
		@Test public void test_31113() { testValid("(!any | (any | int))","!{int, any}"); }
		@Test public void test_31114() { testValid("(!any | (any | int))","!{int, int}"); }
		@Test public void test_31115() { testValid("(!any | (any | int))","!(any | any)"); }
		@Test public void test_31116() { testValid("(!any | (any | int))","!(any & any)"); }
		@Test public void test_31117() { testValid("(!any | (any | int))","!(int & int)"); }
		@Test public void test_31118() { testValid("(!any | (any | int))","{{int}, {any}}"); }
		@Test public void test_31119() { testValid("(!any | (any | int))","{!int, {any}}"); }
		@Test public void test_31120() { testValid("(!any | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_31121() { testValid("(!any | (any | int))","{(any | int), {any}}"); }
		@Test public void test_31122() { testValid("(!any | (any | int))","{!int, {int}}"); }
		@Test public void test_31123() { testValid("(!any | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_31124() { testValid("(!any | (any | int))","{(any | any), {int}}"); }
		@Test public void test_31125() { testValid("(!any | (any | int))","{(any & any), {int}}"); }
		@Test public void test_31126() { testValid("(!any | (any | int))","{(any & int), {int}}"); }
		@Test public void test_31127() { testValid("(!any | (any | int))","{{any, any}, !int}"); }
		@Test public void test_31128() { testValid("(!any | (any | int))","{{any, int}, !int}"); }
		@Test public void test_31129() { testValid("(!any | (any | int))","{(any | any), !int}"); }
		@Test public void test_31130() { testValid("(!any | (any | int))","{(int | any), !int}"); }
		@Test public void test_31131() { testValid("(!any | (any | int))","{(any & any), !int}"); }
		@Test public void test_31132() { testValid("(!any | (any | int))","{(int & any), !int}"); }
		@Test public void test_31133() { testValid("(!any | (any | int))","{(int & int), !int}"); }
		@Test public void test_31134() { testValid("(!any | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_31135() { testValid("(!any | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_31136() { testValid("(!any | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_31137() { testValid("(!any | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_31138() { testValid("(!any | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_31139() { testValid("(!any | (any | int))","{!int, {int, any}}"); }
		@Test public void test_31140() { testValid("(!any | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_31141() { testValid("(!any | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_31142() { testValid("(!any | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_31143() { testValid("(!any | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_31144() { testValid("(!any | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_31145() { testValid("(!any | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_31146() { testValid("(!any | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_31147() { testValid("(!any | (any | int))","{!int, {int, int}}"); }
		@Test public void test_31148() { testValid("(!any | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_31149() { testValid("(!any | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_31150() { testValid("(!any | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_31151() { testValid("(!any | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_31152() { testValid("(!any | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_31153() { testValid("(!any | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_31154() { testValid("(!any | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_31155() { testValid("(!any | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_31156() { testValid("(!any | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_31157() { testValid("(!any | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_31158() { testValid("(!any | (any | int))","{!int, (int | any)}"); }
		@Test public void test_31159() { testValid("(!any | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_31160() { testValid("(!any | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_31161() { testValid("(!any | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_31162() { testValid("(!any | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_31163() { testValid("(!any | (any | int))","{!int, (any | int)}"); }
		@Test public void test_31164() { testValid("(!any | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_31165() { testValid("(!any | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_31166() { testValid("(!any | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_31167() { testValid("(!any | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_31168() { testValid("(!any | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_31169() { testValid("(!any | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_31170() { testValid("(!any | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_31171() { testValid("(!any | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_31172() { testValid("(!any | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_31173() { testValid("(!any | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_31174() { testValid("(!any | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_31175() { testValid("(!any | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_31176() { testValid("(!any | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_31177() { testValid("(!any | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_31178() { testValid("(!any | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_31179() { testValid("(!any | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_31180() { testValid("(!any | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_31181() { testValid("(!any | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_31182() { testValid("(!any | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_31183() { testValid("(!any | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_31184() { testValid("(!any | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_31185() { testValid("(!any | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_31186() { testValid("(!any | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_31187() { testValid("(!any | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_31188() { testValid("(!any | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_31189() { testValid("(!any | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_31190() { testValid("(!any | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_31191() { testValid("(!any | (any | int))","(!int | {any})"); }
		@Test public void test_31192() { testValid("(!any | (any | int))","({any, any} | {any})"); }
		@Test public void test_31193() { testValid("(!any | (any | int))","((any | any) | {any})"); }
		@Test public void test_31194() { testValid("(!any | (any | int))","((int | any) | {any})"); }
		@Test public void test_31195() { testValid("(!any | (any | int))","((any & any) | {any})"); }
		@Test public void test_31196() { testValid("(!any | (any | int))","((int & any) | {any})"); }
		@Test public void test_31197() { testValid("(!any | (any | int))","((any & int) | {any})"); }
		@Test public void test_31198() { testValid("(!any | (any | int))","({int} | {int})"); }
		@Test public void test_31199() { testValid("(!any | (any | int))","(!any | {int})"); }
		@Test public void test_31200() { testValid("(!any | (any | int))","(!int | {int})"); }
		@Test public void test_31201() { testValid("(!any | (any | int))","({any, int} | {int})"); }
		@Test public void test_31202() { testValid("(!any | (any | int))","((int & any) | {int})"); }
		@Test public void test_31203() { testValid("(!any | (any | int))","((any & int) | {int})"); }
		@Test public void test_31204() { testValid("(!any | (any | int))","((int & int) | {int})"); }
		@Test public void test_31205() { testValid("(!any | (any | int))","({any} | !any)"); }
		@Test public void test_31206() { testValid("(!any | (any | int))","({int} | !any)"); }
		@Test public void test_31207() { testValid("(!any | (any | int))","({any, any} | !any)"); }
		@Test public void test_31208() { testValid("(!any | (any | int))","({int, int} | !any)"); }
		@Test public void test_31209() { testValid("(!any | (any | int))","((any | any) | !any)"); }
		@Test public void test_31210() { testValid("(!any | (any | int))","((int | any) | !any)"); }
		@Test public void test_31211() { testValid("(!any | (any | int))","((int | int) | !any)"); }
		@Test public void test_31212() { testValid("(!any | (any | int))","((int & int) | !any)"); }
		@Test public void test_31213() { testValid("(!any | (any | int))","(!int | !int)"); }
		@Test public void test_31214() { testValid("(!any | (any | int))","({any, any} | !int)"); }
		@Test public void test_31215() { testValid("(!any | (any | int))","({int, int} | !int)"); }
		@Test public void test_31216() { testValid("(!any | (any | int))","((int | any) | !int)"); }
		@Test public void test_31217() { testValid("(!any | (any | int))","((any | int) | !int)"); }
		@Test public void test_31218() { testValid("(!any | (any | int))","((any & int) | !int)"); }
		@Test public void test_31219() { testValid("(!any | (any | int))","((int & int) | !int)"); }
		@Test public void test_31220() { testValid("(!any | (any | int))","({int} | {any, any})"); }
		@Test public void test_31221() { testValid("(!any | (any | int))","(!any | {any, any})"); }
		@Test public void test_31222() { testValid("(!any | (any | int))","(!int | {any, any})"); }
		@Test public void test_31223() { testValid("(!any | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31224() { testValid("(!any | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31225() { testValid("(!any | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31226() { testValid("(!any | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31227() { testValid("(!any | (any | int))","(!int | {int, any})"); }
		@Test public void test_31228() { testValid("(!any | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31229() { testValid("(!any | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31230() { testValid("(!any | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31231() { testValid("(!any | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_31232() { testValid("(!any | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_31233() { testValid("(!any | (any | int))","({any} | {any, int})"); }
		@Test public void test_31234() { testValid("(!any | (any | int))","(!int | {any, int})"); }
		@Test public void test_31235() { testValid("(!any | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_31236() { testValid("(!any | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_31237() { testValid("(!any | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_31238() { testValid("(!any | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_31239() { testValid("(!any | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_31240() { testValid("(!any | (any | int))","(!any | {int, int})"); }
		@Test public void test_31241() { testValid("(!any | (any | int))","(!int | {int, int})"); }
		@Test public void test_31242() { testValid("(!any | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_31243() { testValid("(!any | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_31244() { testValid("(!any | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_31245() { testValid("(!any | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_31246() { testValid("(!any | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_31247() { testValid("(!any | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_31248() { testValid("(!any | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_31249() { testValid("(!any | (any | int))","({any} | (any | any))"); }
		@Test public void test_31250() { testValid("(!any | (any | int))","(!any | (any | any))"); }
		@Test public void test_31251() { testValid("(!any | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_31252() { testValid("(!any | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_31253() { testValid("(!any | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_31254() { testValid("(!any | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_31255() { testValid("(!any | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_31256() { testValid("(!any | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_31257() { testValid("(!any | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_31258() { testValid("(!any | (any | int))","({any} | (int | any))"); }
		@Test public void test_31259() { testValid("(!any | (any | int))","(!int | (int | any))"); }
		@Test public void test_31260() { testValid("(!any | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_31261() { testValid("(!any | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_31262() { testValid("(!any | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_31263() { testValid("(!any | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_31264() { testValid("(!any | (any | int))","({any} | (any | int))"); }
		@Test public void test_31265() { testValid("(!any | (any | int))","({int} | (any | int))"); }
		@Test public void test_31266() { testValid("(!any | (any | int))","(!any | (any | int))"); }
		@Test public void test_31267() { testValid("(!any | (any | int))","(!int | (any | int))"); }
		@Test public void test_31268() { testValid("(!any | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_31269() { testValid("(!any | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_31270() { testValid("(!any | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_31271() { testValid("(!any | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_31272() { testValid("(!any | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_31273() { testValid("(!any | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_31274() { testValid("(!any | (any | int))","({int} | (int | int))"); }
		@Test public void test_31275() { testValid("(!any | (any | int))","(!any | (int | int))"); }
		@Test public void test_31276() { testValid("(!any | (any | int))","(!int | (int | int))"); }
		@Test public void test_31277() { testValid("(!any | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_31278() { testValid("(!any | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_31279() { testValid("(!any | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_31280() { testValid("(!any | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_31281() { testValid("(!any | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_31282() { testValid("(!any | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_31283() { testValid("(!any | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_31284() { testValid("(!any | (any | int))","(!any | (any & any))"); }
		@Test public void test_31285() { testValid("(!any | (any | int))","(!int | (any & any))"); }
		@Test public void test_31286() { testValid("(!any | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_31287() { testValid("(!any | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_31288() { testValid("(!any | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_31289() { testValid("(!any | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_31290() { testValid("(!any | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_31291() { testValid("(!any | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_31292() { testValid("(!any | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_31293() { testValid("(!any | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_31294() { testValid("(!any | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_31295() { testValid("(!any | (any | int))","({any} | (int & any))"); }
		@Test public void test_31296() { testValid("(!int | (any | int))","{int}"); }
		@Test public void test_31297() { testValid("(!int | (any | int))","{any, any}"); }
		@Test public void test_31298() { testValid("(!int | (any | int))","{int, int}"); }
		@Test public void test_31299() { testValid("(!int | (any | int))","(any | int)"); }
		@Test public void test_31300() { testValid("(!int | (any | int))","(int & any)"); }
		@Test public void test_31301() { testValid("(!int | (any | int))","{{any}}"); }
		@Test public void test_31302() { testValid("(!int | (any | int))","{{int, any}}"); }
		@Test public void test_31303() { testValid("(!int | (any | int))","{{int, int}}"); }
		@Test public void test_31304() { testValid("(!int | (any | int))","{(any | int)}"); }
		@Test public void test_31305() { testValid("(!int | (any | int))","!{int, any}"); }
		@Test public void test_31306() { testValid("(!int | (any | int))","!{int, int}"); }
		@Test public void test_31307() { testValid("(!int | (any | int))","!(any | any)"); }
		@Test public void test_31308() { testValid("(!int | (any | int))","!(any & any)"); }
		@Test public void test_31309() { testValid("(!int | (any | int))","!(int & int)"); }
		@Test public void test_31310() { testValid("(!int | (any | int))","{{int}, {any}}"); }
		@Test public void test_31311() { testValid("(!int | (any | int))","{!int, {any}}"); }
		@Test public void test_31312() { testValid("(!int | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_31313() { testValid("(!int | (any | int))","{(any | int), {any}}"); }
		@Test public void test_31314() { testValid("(!int | (any | int))","{!int, {int}}"); }
		@Test public void test_31315() { testValid("(!int | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_31316() { testValid("(!int | (any | int))","{(any | any), {int}}"); }
		@Test public void test_31317() { testValid("(!int | (any | int))","{(any & any), {int}}"); }
		@Test public void test_31318() { testValid("(!int | (any | int))","{(any & int), {int}}"); }
		@Test public void test_31319() { testValid("(!int | (any | int))","{{any, any}, !int}"); }
		@Test public void test_31320() { testValid("(!int | (any | int))","{{any, int}, !int}"); }
		@Test public void test_31321() { testValid("(!int | (any | int))","{(any | any), !int}"); }
		@Test public void test_31322() { testValid("(!int | (any | int))","{(int | any), !int}"); }
		@Test public void test_31323() { testValid("(!int | (any | int))","{(any & any), !int}"); }
		@Test public void test_31324() { testValid("(!int | (any | int))","{(int & any), !int}"); }
		@Test public void test_31325() { testValid("(!int | (any | int))","{(int & int), !int}"); }
		@Test public void test_31326() { testValid("(!int | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_31327() { testValid("(!int | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_31328() { testValid("(!int | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_31329() { testValid("(!int | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_31330() { testValid("(!int | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_31331() { testValid("(!int | (any | int))","{!int, {int, any}}"); }
		@Test public void test_31332() { testValid("(!int | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_31333() { testValid("(!int | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_31334() { testValid("(!int | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_31335() { testValid("(!int | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_31336() { testValid("(!int | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_31337() { testValid("(!int | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_31338() { testValid("(!int | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_31339() { testValid("(!int | (any | int))","{!int, {int, int}}"); }
		@Test public void test_31340() { testValid("(!int | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_31341() { testValid("(!int | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_31342() { testValid("(!int | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_31343() { testValid("(!int | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_31344() { testValid("(!int | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_31345() { testValid("(!int | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_31346() { testValid("(!int | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_31347() { testValid("(!int | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_31348() { testValid("(!int | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_31349() { testValid("(!int | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_31350() { testValid("(!int | (any | int))","{!int, (int | any)}"); }
		@Test public void test_31351() { testValid("(!int | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_31352() { testValid("(!int | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_31353() { testValid("(!int | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_31354() { testValid("(!int | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_31355() { testValid("(!int | (any | int))","{!int, (any | int)}"); }
		@Test public void test_31356() { testValid("(!int | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_31357() { testValid("(!int | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_31358() { testValid("(!int | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_31359() { testValid("(!int | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_31360() { testValid("(!int | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_31361() { testValid("(!int | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_31362() { testValid("(!int | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_31363() { testValid("(!int | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_31364() { testValid("(!int | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_31365() { testValid("(!int | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_31366() { testValid("(!int | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_31367() { testValid("(!int | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_31368() { testValid("(!int | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_31369() { testValid("(!int | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_31370() { testValid("(!int | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_31371() { testValid("(!int | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_31372() { testValid("(!int | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_31373() { testValid("(!int | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_31374() { testValid("(!int | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_31375() { testValid("(!int | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_31376() { testValid("(!int | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_31377() { testValid("(!int | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_31378() { testValid("(!int | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_31379() { testValid("(!int | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_31380() { testValid("(!int | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_31381() { testValid("(!int | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_31382() { testValid("(!int | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_31383() { testValid("(!int | (any | int))","(!int | {any})"); }
		@Test public void test_31384() { testValid("(!int | (any | int))","({any, any} | {any})"); }
		@Test public void test_31385() { testValid("(!int | (any | int))","((any | any) | {any})"); }
		@Test public void test_31386() { testValid("(!int | (any | int))","((int | any) | {any})"); }
		@Test public void test_31387() { testValid("(!int | (any | int))","((any & any) | {any})"); }
		@Test public void test_31388() { testValid("(!int | (any | int))","((int & any) | {any})"); }
		@Test public void test_31389() { testValid("(!int | (any | int))","((any & int) | {any})"); }
		@Test public void test_31390() { testValid("(!int | (any | int))","({int} | {int})"); }
		@Test public void test_31391() { testValid("(!int | (any | int))","(!any | {int})"); }
		@Test public void test_31392() { testValid("(!int | (any | int))","(!int | {int})"); }
		@Test public void test_31393() { testValid("(!int | (any | int))","({any, int} | {int})"); }
		@Test public void test_31394() { testValid("(!int | (any | int))","((int & any) | {int})"); }
		@Test public void test_31395() { testValid("(!int | (any | int))","((any & int) | {int})"); }
		@Test public void test_31396() { testValid("(!int | (any | int))","((int & int) | {int})"); }
		@Test public void test_31397() { testValid("(!int | (any | int))","({any} | !any)"); }
		@Test public void test_31398() { testValid("(!int | (any | int))","({int} | !any)"); }
		@Test public void test_31399() { testValid("(!int | (any | int))","({any, any} | !any)"); }
		@Test public void test_31400() { testValid("(!int | (any | int))","({int, int} | !any)"); }
		@Test public void test_31401() { testValid("(!int | (any | int))","((any | any) | !any)"); }
		@Test public void test_31402() { testValid("(!int | (any | int))","((int | any) | !any)"); }
		@Test public void test_31403() { testValid("(!int | (any | int))","((int | int) | !any)"); }
		@Test public void test_31404() { testValid("(!int | (any | int))","((int & int) | !any)"); }
		@Test public void test_31405() { testValid("(!int | (any | int))","(!int | !int)"); }
		@Test public void test_31406() { testValid("(!int | (any | int))","({any, any} | !int)"); }
		@Test public void test_31407() { testValid("(!int | (any | int))","({int, int} | !int)"); }
		@Test public void test_31408() { testValid("(!int | (any | int))","((int | any) | !int)"); }
		@Test public void test_31409() { testValid("(!int | (any | int))","((any | int) | !int)"); }
		@Test public void test_31410() { testValid("(!int | (any | int))","((any & int) | !int)"); }
		@Test public void test_31411() { testValid("(!int | (any | int))","((int & int) | !int)"); }
		@Test public void test_31412() { testValid("(!int | (any | int))","({int} | {any, any})"); }
		@Test public void test_31413() { testValid("(!int | (any | int))","(!any | {any, any})"); }
		@Test public void test_31414() { testValid("(!int | (any | int))","(!int | {any, any})"); }
		@Test public void test_31415() { testValid("(!int | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31416() { testValid("(!int | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31417() { testValid("(!int | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31418() { testValid("(!int | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31419() { testValid("(!int | (any | int))","(!int | {int, any})"); }
		@Test public void test_31420() { testValid("(!int | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31421() { testValid("(!int | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31422() { testValid("(!int | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31423() { testValid("(!int | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_31424() { testValid("(!int | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_31425() { testValid("(!int | (any | int))","({any} | {any, int})"); }
		@Test public void test_31426() { testValid("(!int | (any | int))","(!int | {any, int})"); }
		@Test public void test_31427() { testValid("(!int | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_31428() { testValid("(!int | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_31429() { testValid("(!int | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_31430() { testValid("(!int | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_31431() { testValid("(!int | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_31432() { testValid("(!int | (any | int))","(!any | {int, int})"); }
		@Test public void test_31433() { testValid("(!int | (any | int))","(!int | {int, int})"); }
		@Test public void test_31434() { testValid("(!int | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_31435() { testValid("(!int | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_31436() { testValid("(!int | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_31437() { testValid("(!int | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_31438() { testValid("(!int | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_31439() { testValid("(!int | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_31440() { testValid("(!int | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_31441() { testValid("(!int | (any | int))","({any} | (any | any))"); }
		@Test public void test_31442() { testValid("(!int | (any | int))","(!any | (any | any))"); }
		@Test public void test_31443() { testValid("(!int | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_31444() { testValid("(!int | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_31445() { testValid("(!int | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_31446() { testValid("(!int | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_31447() { testValid("(!int | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_31448() { testValid("(!int | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_31449() { testValid("(!int | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_31450() { testValid("(!int | (any | int))","({any} | (int | any))"); }
		@Test public void test_31451() { testValid("(!int | (any | int))","(!int | (int | any))"); }
		@Test public void test_31452() { testValid("(!int | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_31453() { testValid("(!int | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_31454() { testValid("(!int | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_31455() { testValid("(!int | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_31456() { testValid("(!int | (any | int))","({any} | (any | int))"); }
		@Test public void test_31457() { testValid("(!int | (any | int))","({int} | (any | int))"); }
		@Test public void test_31458() { testValid("(!int | (any | int))","(!any | (any | int))"); }
		@Test public void test_31459() { testValid("(!int | (any | int))","(!int | (any | int))"); }
		@Test public void test_31460() { testValid("(!int | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_31461() { testValid("(!int | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_31462() { testValid("(!int | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_31463() { testValid("(!int | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_31464() { testValid("(!int | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_31465() { testValid("(!int | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_31466() { testValid("(!int | (any | int))","({int} | (int | int))"); }
		@Test public void test_31467() { testValid("(!int | (any | int))","(!any | (int | int))"); }
		@Test public void test_31468() { testValid("(!int | (any | int))","(!int | (int | int))"); }
		@Test public void test_31469() { testValid("(!int | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_31470() { testValid("(!int | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_31471() { testValid("(!int | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_31472() { testValid("(!int | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_31473() { testValid("(!int | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_31474() { testValid("(!int | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_31475() { testValid("(!int | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_31476() { testValid("(!int | (any | int))","(!any | (any & any))"); }
		@Test public void test_31477() { testValid("(!int | (any | int))","(!int | (any & any))"); }
		@Test public void test_31478() { testValid("(!int | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_31479() { testValid("(!int | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_31480() { testValid("(!int | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_31481() { testValid("(!int | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_31482() { testValid("(!int | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_31483() { testValid("(!int | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_31484() { testValid("(!int | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_31485() { testValid("(!int | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_31486() { testValid("(!int | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_31487() { testValid("(!int | (any | int))","({any} | (int & any))"); }
		@Test public void test_31488() { testValid("({any, int} | (any | int))","{int}"); }
		@Test public void test_31489() { testValid("({any, int} | (any | int))","{any, any}"); }
		@Test public void test_31490() { testValid("({any, int} | (any | int))","{int, int}"); }
		@Test public void test_31491() { testValid("({any, int} | (any | int))","(any | int)"); }
		@Test public void test_31492() { testValid("({any, int} | (any | int))","(int & any)"); }
		@Test public void test_31493() { testValid("({any, int} | (any | int))","{{any}}"); }
		@Test public void test_31494() { testValid("({any, int} | (any | int))","{{int, any}}"); }
		@Test public void test_31495() { testValid("({any, int} | (any | int))","{{int, int}}"); }
		@Test public void test_31496() { testValid("({any, int} | (any | int))","{(any | int)}"); }
		@Test public void test_31497() { testValid("({any, int} | (any | int))","!{int, any}"); }
		@Test public void test_31498() { testValid("({any, int} | (any | int))","!{int, int}"); }
		@Test public void test_31499() { testValid("({any, int} | (any | int))","!(any | any)"); }
		@Test public void test_31500() { testValid("({any, int} | (any | int))","!(any & any)"); }
		@Test public void test_31501() { testValid("({any, int} | (any | int))","!(int & int)"); }
		@Test public void test_31502() { testValid("({any, int} | (any | int))","{{int}, {any}}"); }
		@Test public void test_31503() { testValid("({any, int} | (any | int))","{!int, {any}}"); }
		@Test public void test_31504() { testValid("({any, int} | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_31505() { testValid("({any, int} | (any | int))","{(any | int), {any}}"); }
		@Test public void test_31506() { testValid("({any, int} | (any | int))","{!int, {int}}"); }
		@Test public void test_31507() { testValid("({any, int} | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_31508() { testValid("({any, int} | (any | int))","{(any | any), {int}}"); }
		@Test public void test_31509() { testValid("({any, int} | (any | int))","{(any & any), {int}}"); }
		@Test public void test_31510() { testValid("({any, int} | (any | int))","{(any & int), {int}}"); }
		@Test public void test_31511() { testValid("({any, int} | (any | int))","{{any, any}, !int}"); }
		@Test public void test_31512() { testValid("({any, int} | (any | int))","{{any, int}, !int}"); }
		@Test public void test_31513() { testValid("({any, int} | (any | int))","{(any | any), !int}"); }
		@Test public void test_31514() { testValid("({any, int} | (any | int))","{(int | any), !int}"); }
		@Test public void test_31515() { testValid("({any, int} | (any | int))","{(any & any), !int}"); }
		@Test public void test_31516() { testValid("({any, int} | (any | int))","{(int & any), !int}"); }
		@Test public void test_31517() { testValid("({any, int} | (any | int))","{(int & int), !int}"); }
		@Test public void test_31518() { testValid("({any, int} | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_31519() { testValid("({any, int} | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_31520() { testValid("({any, int} | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_31521() { testValid("({any, int} | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_31522() { testValid("({any, int} | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_31523() { testValid("({any, int} | (any | int))","{!int, {int, any}}"); }
		@Test public void test_31524() { testValid("({any, int} | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_31525() { testValid("({any, int} | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_31526() { testValid("({any, int} | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_31527() { testValid("({any, int} | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_31528() { testValid("({any, int} | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_31529() { testValid("({any, int} | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_31530() { testValid("({any, int} | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_31531() { testValid("({any, int} | (any | int))","{!int, {int, int}}"); }
		@Test public void test_31532() { testValid("({any, int} | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_31533() { testValid("({any, int} | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_31534() { testValid("({any, int} | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_31535() { testValid("({any, int} | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_31536() { testValid("({any, int} | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_31537() { testValid("({any, int} | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_31538() { testValid("({any, int} | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_31539() { testValid("({any, int} | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_31540() { testValid("({any, int} | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_31541() { testValid("({any, int} | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_31542() { testValid("({any, int} | (any | int))","{!int, (int | any)}"); }
		@Test public void test_31543() { testValid("({any, int} | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_31544() { testValid("({any, int} | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_31545() { testValid("({any, int} | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_31546() { testValid("({any, int} | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_31547() { testValid("({any, int} | (any | int))","{!int, (any | int)}"); }
		@Test public void test_31548() { testValid("({any, int} | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_31549() { testValid("({any, int} | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_31550() { testValid("({any, int} | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_31551() { testValid("({any, int} | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_31552() { testValid("({any, int} | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_31553() { testValid("({any, int} | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_31554() { testValid("({any, int} | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_31555() { testValid("({any, int} | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_31556() { testValid("({any, int} | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_31557() { testValid("({any, int} | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_31558() { testValid("({any, int} | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_31559() { testValid("({any, int} | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_31560() { testValid("({any, int} | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_31561() { testValid("({any, int} | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_31562() { testValid("({any, int} | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_31563() { testValid("({any, int} | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_31564() { testValid("({any, int} | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_31565() { testValid("({any, int} | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_31566() { testValid("({any, int} | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_31567() { testValid("({any, int} | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_31568() { testValid("({any, int} | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_31569() { testValid("({any, int} | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_31570() { testValid("({any, int} | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_31571() { testValid("({any, int} | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_31572() { testValid("({any, int} | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_31573() { testValid("({any, int} | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_31574() { testValid("({any, int} | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_31575() { testValid("({any, int} | (any | int))","(!int | {any})"); }
		@Test public void test_31576() { testValid("({any, int} | (any | int))","({any, any} | {any})"); }
		@Test public void test_31577() { testValid("({any, int} | (any | int))","((any | any) | {any})"); }
		@Test public void test_31578() { testValid("({any, int} | (any | int))","((int | any) | {any})"); }
		@Test public void test_31579() { testValid("({any, int} | (any | int))","((any & any) | {any})"); }
		@Test public void test_31580() { testValid("({any, int} | (any | int))","((int & any) | {any})"); }
		@Test public void test_31581() { testValid("({any, int} | (any | int))","((any & int) | {any})"); }
		@Test public void test_31582() { testValid("({any, int} | (any | int))","({int} | {int})"); }
		@Test public void test_31583() { testValid("({any, int} | (any | int))","(!any | {int})"); }
		@Test public void test_31584() { testValid("({any, int} | (any | int))","(!int | {int})"); }
		@Test public void test_31585() { testValid("({any, int} | (any | int))","({any, int} | {int})"); }
		@Test public void test_31586() { testValid("({any, int} | (any | int))","((int & any) | {int})"); }
		@Test public void test_31587() { testValid("({any, int} | (any | int))","((any & int) | {int})"); }
		@Test public void test_31588() { testValid("({any, int} | (any | int))","((int & int) | {int})"); }
		@Test public void test_31589() { testValid("({any, int} | (any | int))","({any} | !any)"); }
		@Test public void test_31590() { testValid("({any, int} | (any | int))","({int} | !any)"); }
		@Test public void test_31591() { testValid("({any, int} | (any | int))","({any, any} | !any)"); }
		@Test public void test_31592() { testValid("({any, int} | (any | int))","({int, int} | !any)"); }
		@Test public void test_31593() { testValid("({any, int} | (any | int))","((any | any) | !any)"); }
		@Test public void test_31594() { testValid("({any, int} | (any | int))","((int | any) | !any)"); }
		@Test public void test_31595() { testValid("({any, int} | (any | int))","((int | int) | !any)"); }
		@Test public void test_31596() { testValid("({any, int} | (any | int))","((int & int) | !any)"); }
		@Test public void test_31597() { testValid("({any, int} | (any | int))","(!int | !int)"); }
		@Test public void test_31598() { testValid("({any, int} | (any | int))","({any, any} | !int)"); }
		@Test public void test_31599() { testValid("({any, int} | (any | int))","({int, int} | !int)"); }
		@Test public void test_31600() { testValid("({any, int} | (any | int))","((int | any) | !int)"); }
		@Test public void test_31601() { testValid("({any, int} | (any | int))","((any | int) | !int)"); }
		@Test public void test_31602() { testValid("({any, int} | (any | int))","((any & int) | !int)"); }
		@Test public void test_31603() { testValid("({any, int} | (any | int))","((int & int) | !int)"); }
		@Test public void test_31604() { testValid("({any, int} | (any | int))","({int} | {any, any})"); }
		@Test public void test_31605() { testValid("({any, int} | (any | int))","(!any | {any, any})"); }
		@Test public void test_31606() { testValid("({any, int} | (any | int))","(!int | {any, any})"); }
		@Test public void test_31607() { testValid("({any, int} | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31608() { testValid("({any, int} | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31609() { testValid("({any, int} | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31610() { testValid("({any, int} | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31611() { testValid("({any, int} | (any | int))","(!int | {int, any})"); }
		@Test public void test_31612() { testValid("({any, int} | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31613() { testValid("({any, int} | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31614() { testValid("({any, int} | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31615() { testValid("({any, int} | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_31616() { testValid("({any, int} | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_31617() { testValid("({any, int} | (any | int))","({any} | {any, int})"); }
		@Test public void test_31618() { testValid("({any, int} | (any | int))","(!int | {any, int})"); }
		@Test public void test_31619() { testValid("({any, int} | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_31620() { testValid("({any, int} | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_31621() { testValid("({any, int} | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_31622() { testValid("({any, int} | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_31623() { testValid("({any, int} | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_31624() { testValid("({any, int} | (any | int))","(!any | {int, int})"); }
		@Test public void test_31625() { testValid("({any, int} | (any | int))","(!int | {int, int})"); }
		@Test public void test_31626() { testValid("({any, int} | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_31627() { testValid("({any, int} | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_31628() { testValid("({any, int} | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_31629() { testValid("({any, int} | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_31630() { testValid("({any, int} | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_31631() { testValid("({any, int} | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_31632() { testValid("({any, int} | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_31633() { testValid("({any, int} | (any | int))","({any} | (any | any))"); }
		@Test public void test_31634() { testValid("({any, int} | (any | int))","(!any | (any | any))"); }
		@Test public void test_31635() { testValid("({any, int} | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_31636() { testValid("({any, int} | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_31637() { testValid("({any, int} | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_31638() { testValid("({any, int} | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_31639() { testValid("({any, int} | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_31640() { testValid("({any, int} | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_31641() { testValid("({any, int} | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_31642() { testValid("({any, int} | (any | int))","({any} | (int | any))"); }
		@Test public void test_31643() { testValid("({any, int} | (any | int))","(!int | (int | any))"); }
		@Test public void test_31644() { testValid("({any, int} | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_31645() { testValid("({any, int} | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_31646() { testValid("({any, int} | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_31647() { testValid("({any, int} | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_31648() { testValid("({any, int} | (any | int))","({any} | (any | int))"); }
		@Test public void test_31649() { testValid("({any, int} | (any | int))","({int} | (any | int))"); }
		@Test public void test_31650() { testValid("({any, int} | (any | int))","(!any | (any | int))"); }
		@Test public void test_31651() { testValid("({any, int} | (any | int))","(!int | (any | int))"); }
		@Test public void test_31652() { testValid("({any, int} | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_31653() { testValid("({any, int} | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_31654() { testValid("({any, int} | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_31655() { testValid("({any, int} | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_31656() { testValid("({any, int} | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_31657() { testValid("({any, int} | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_31658() { testValid("({any, int} | (any | int))","({int} | (int | int))"); }
		@Test public void test_31659() { testValid("({any, int} | (any | int))","(!any | (int | int))"); }
		@Test public void test_31660() { testValid("({any, int} | (any | int))","(!int | (int | int))"); }
		@Test public void test_31661() { testValid("({any, int} | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_31662() { testValid("({any, int} | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_31663() { testValid("({any, int} | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_31664() { testValid("({any, int} | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_31665() { testValid("({any, int} | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_31666() { testValid("({any, int} | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_31667() { testValid("({any, int} | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_31668() { testValid("({any, int} | (any | int))","(!any | (any & any))"); }
		@Test public void test_31669() { testValid("({any, int} | (any | int))","(!int | (any & any))"); }
		@Test public void test_31670() { testValid("({any, int} | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_31671() { testValid("({any, int} | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_31672() { testValid("({any, int} | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_31673() { testValid("({any, int} | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_31674() { testValid("({any, int} | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_31675() { testValid("({any, int} | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_31676() { testValid("({any, int} | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_31677() { testValid("({any, int} | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_31678() { testValid("({any, int} | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_31679() { testValid("({any, int} | (any | int))","({any} | (int & any))"); }
		@Test public void test_31680() { testValid("({int, int} | (any | int))","{int}"); }
		@Test public void test_31681() { testValid("({int, int} | (any | int))","{any, any}"); }
		@Test public void test_31682() { testValid("({int, int} | (any | int))","{int, int}"); }
		@Test public void test_31683() { testValid("({int, int} | (any | int))","(any | int)"); }
		@Test public void test_31684() { testValid("({int, int} | (any | int))","(int & any)"); }
		@Test public void test_31685() { testValid("({int, int} | (any | int))","{{any}}"); }
		@Test public void test_31686() { testValid("({int, int} | (any | int))","{{int, any}}"); }
		@Test public void test_31687() { testValid("({int, int} | (any | int))","{{int, int}}"); }
		@Test public void test_31688() { testValid("({int, int} | (any | int))","{(any | int)}"); }
		@Test public void test_31689() { testValid("({int, int} | (any | int))","!{int, any}"); }
		@Test public void test_31690() { testValid("({int, int} | (any | int))","!{int, int}"); }
		@Test public void test_31691() { testValid("({int, int} | (any | int))","!(any | any)"); }
		@Test public void test_31692() { testValid("({int, int} | (any | int))","!(any & any)"); }
		@Test public void test_31693() { testValid("({int, int} | (any | int))","!(int & int)"); }
		@Test public void test_31694() { testValid("({int, int} | (any | int))","{{int}, {any}}"); }
		@Test public void test_31695() { testValid("({int, int} | (any | int))","{!int, {any}}"); }
		@Test public void test_31696() { testValid("({int, int} | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_31697() { testValid("({int, int} | (any | int))","{(any | int), {any}}"); }
		@Test public void test_31698() { testValid("({int, int} | (any | int))","{!int, {int}}"); }
		@Test public void test_31699() { testValid("({int, int} | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_31700() { testValid("({int, int} | (any | int))","{(any | any), {int}}"); }
		@Test public void test_31701() { testValid("({int, int} | (any | int))","{(any & any), {int}}"); }
		@Test public void test_31702() { testValid("({int, int} | (any | int))","{(any & int), {int}}"); }
		@Test public void test_31703() { testValid("({int, int} | (any | int))","{{any, any}, !int}"); }
		@Test public void test_31704() { testValid("({int, int} | (any | int))","{{any, int}, !int}"); }
		@Test public void test_31705() { testValid("({int, int} | (any | int))","{(any | any), !int}"); }
		@Test public void test_31706() { testValid("({int, int} | (any | int))","{(int | any), !int}"); }
		@Test public void test_31707() { testValid("({int, int} | (any | int))","{(any & any), !int}"); }
		@Test public void test_31708() { testValid("({int, int} | (any | int))","{(int & any), !int}"); }
		@Test public void test_31709() { testValid("({int, int} | (any | int))","{(int & int), !int}"); }
		@Test public void test_31710() { testValid("({int, int} | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_31711() { testValid("({int, int} | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_31712() { testValid("({int, int} | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_31713() { testValid("({int, int} | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_31714() { testValid("({int, int} | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_31715() { testValid("({int, int} | (any | int))","{!int, {int, any}}"); }
		@Test public void test_31716() { testValid("({int, int} | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_31717() { testValid("({int, int} | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_31718() { testValid("({int, int} | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_31719() { testValid("({int, int} | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_31720() { testValid("({int, int} | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_31721() { testValid("({int, int} | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_31722() { testValid("({int, int} | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_31723() { testValid("({int, int} | (any | int))","{!int, {int, int}}"); }
		@Test public void test_31724() { testValid("({int, int} | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_31725() { testValid("({int, int} | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_31726() { testValid("({int, int} | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_31727() { testValid("({int, int} | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_31728() { testValid("({int, int} | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_31729() { testValid("({int, int} | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_31730() { testValid("({int, int} | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_31731() { testValid("({int, int} | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_31732() { testValid("({int, int} | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_31733() { testValid("({int, int} | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_31734() { testValid("({int, int} | (any | int))","{!int, (int | any)}"); }
		@Test public void test_31735() { testValid("({int, int} | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_31736() { testValid("({int, int} | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_31737() { testValid("({int, int} | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_31738() { testValid("({int, int} | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_31739() { testValid("({int, int} | (any | int))","{!int, (any | int)}"); }
		@Test public void test_31740() { testValid("({int, int} | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_31741() { testValid("({int, int} | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_31742() { testValid("({int, int} | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_31743() { testValid("({int, int} | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_31744() { testValid("({int, int} | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_31745() { testValid("({int, int} | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_31746() { testValid("({int, int} | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_31747() { testValid("({int, int} | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_31748() { testValid("({int, int} | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_31749() { testValid("({int, int} | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_31750() { testValid("({int, int} | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_31751() { testValid("({int, int} | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_31752() { testValid("({int, int} | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_31753() { testValid("({int, int} | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_31754() { testValid("({int, int} | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_31755() { testValid("({int, int} | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_31756() { testValid("({int, int} | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_31757() { testValid("({int, int} | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_31758() { testValid("({int, int} | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_31759() { testValid("({int, int} | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_31760() { testValid("({int, int} | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_31761() { testValid("({int, int} | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_31762() { testValid("({int, int} | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_31763() { testValid("({int, int} | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_31764() { testValid("({int, int} | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_31765() { testValid("({int, int} | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_31766() { testValid("({int, int} | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_31767() { testValid("({int, int} | (any | int))","(!int | {any})"); }
		@Test public void test_31768() { testValid("({int, int} | (any | int))","({any, any} | {any})"); }
		@Test public void test_31769() { testValid("({int, int} | (any | int))","((any | any) | {any})"); }
		@Test public void test_31770() { testValid("({int, int} | (any | int))","((int | any) | {any})"); }
		@Test public void test_31771() { testValid("({int, int} | (any | int))","((any & any) | {any})"); }
		@Test public void test_31772() { testValid("({int, int} | (any | int))","((int & any) | {any})"); }
		@Test public void test_31773() { testValid("({int, int} | (any | int))","((any & int) | {any})"); }
		@Test public void test_31774() { testValid("({int, int} | (any | int))","({int} | {int})"); }
		@Test public void test_31775() { testValid("({int, int} | (any | int))","(!any | {int})"); }
		@Test public void test_31776() { testValid("({int, int} | (any | int))","(!int | {int})"); }
		@Test public void test_31777() { testValid("({int, int} | (any | int))","({any, int} | {int})"); }
		@Test public void test_31778() { testValid("({int, int} | (any | int))","((int & any) | {int})"); }
		@Test public void test_31779() { testValid("({int, int} | (any | int))","((any & int) | {int})"); }
		@Test public void test_31780() { testValid("({int, int} | (any | int))","((int & int) | {int})"); }
		@Test public void test_31781() { testValid("({int, int} | (any | int))","({any} | !any)"); }
		@Test public void test_31782() { testValid("({int, int} | (any | int))","({int} | !any)"); }
		@Test public void test_31783() { testValid("({int, int} | (any | int))","({any, any} | !any)"); }
		@Test public void test_31784() { testValid("({int, int} | (any | int))","({int, int} | !any)"); }
		@Test public void test_31785() { testValid("({int, int} | (any | int))","((any | any) | !any)"); }
		@Test public void test_31786() { testValid("({int, int} | (any | int))","((int | any) | !any)"); }
		@Test public void test_31787() { testValid("({int, int} | (any | int))","((int | int) | !any)"); }
		@Test public void test_31788() { testValid("({int, int} | (any | int))","((int & int) | !any)"); }
		@Test public void test_31789() { testValid("({int, int} | (any | int))","(!int | !int)"); }
		@Test public void test_31790() { testValid("({int, int} | (any | int))","({any, any} | !int)"); }
		@Test public void test_31791() { testValid("({int, int} | (any | int))","({int, int} | !int)"); }
		@Test public void test_31792() { testValid("({int, int} | (any | int))","((int | any) | !int)"); }
		@Test public void test_31793() { testValid("({int, int} | (any | int))","((any | int) | !int)"); }
		@Test public void test_31794() { testValid("({int, int} | (any | int))","((any & int) | !int)"); }
		@Test public void test_31795() { testValid("({int, int} | (any | int))","((int & int) | !int)"); }
		@Test public void test_31796() { testValid("({int, int} | (any | int))","({int} | {any, any})"); }
		@Test public void test_31797() { testValid("({int, int} | (any | int))","(!any | {any, any})"); }
		@Test public void test_31798() { testValid("({int, int} | (any | int))","(!int | {any, any})"); }
		@Test public void test_31799() { testValid("({int, int} | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31800() { testValid("({int, int} | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31801() { testValid("({int, int} | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31802() { testValid("({int, int} | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31803() { testValid("({int, int} | (any | int))","(!int | {int, any})"); }
		@Test public void test_31804() { testValid("({int, int} | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31805() { testValid("({int, int} | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31806() { testValid("({int, int} | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31807() { testValid("({int, int} | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_31808() { testValid("({int, int} | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_31809() { testValid("({int, int} | (any | int))","({any} | {any, int})"); }
		@Test public void test_31810() { testValid("({int, int} | (any | int))","(!int | {any, int})"); }
		@Test public void test_31811() { testValid("({int, int} | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_31812() { testValid("({int, int} | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_31813() { testValid("({int, int} | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_31814() { testValid("({int, int} | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_31815() { testValid("({int, int} | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_31816() { testValid("({int, int} | (any | int))","(!any | {int, int})"); }
		@Test public void test_31817() { testValid("({int, int} | (any | int))","(!int | {int, int})"); }
		@Test public void test_31818() { testValid("({int, int} | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_31819() { testValid("({int, int} | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_31820() { testValid("({int, int} | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_31821() { testValid("({int, int} | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_31822() { testValid("({int, int} | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_31823() { testValid("({int, int} | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_31824() { testValid("({int, int} | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_31825() { testValid("({int, int} | (any | int))","({any} | (any | any))"); }
		@Test public void test_31826() { testValid("({int, int} | (any | int))","(!any | (any | any))"); }
		@Test public void test_31827() { testValid("({int, int} | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_31828() { testValid("({int, int} | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_31829() { testValid("({int, int} | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_31830() { testValid("({int, int} | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_31831() { testValid("({int, int} | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_31832() { testValid("({int, int} | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_31833() { testValid("({int, int} | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_31834() { testValid("({int, int} | (any | int))","({any} | (int | any))"); }
		@Test public void test_31835() { testValid("({int, int} | (any | int))","(!int | (int | any))"); }
		@Test public void test_31836() { testValid("({int, int} | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_31837() { testValid("({int, int} | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_31838() { testValid("({int, int} | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_31839() { testValid("({int, int} | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_31840() { testValid("({int, int} | (any | int))","({any} | (any | int))"); }
		@Test public void test_31841() { testValid("({int, int} | (any | int))","({int} | (any | int))"); }
		@Test public void test_31842() { testValid("({int, int} | (any | int))","(!any | (any | int))"); }
		@Test public void test_31843() { testValid("({int, int} | (any | int))","(!int | (any | int))"); }
		@Test public void test_31844() { testValid("({int, int} | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_31845() { testValid("({int, int} | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_31846() { testValid("({int, int} | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_31847() { testValid("({int, int} | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_31848() { testValid("({int, int} | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_31849() { testValid("({int, int} | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_31850() { testValid("({int, int} | (any | int))","({int} | (int | int))"); }
		@Test public void test_31851() { testValid("({int, int} | (any | int))","(!any | (int | int))"); }
		@Test public void test_31852() { testValid("({int, int} | (any | int))","(!int | (int | int))"); }
		@Test public void test_31853() { testValid("({int, int} | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_31854() { testValid("({int, int} | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_31855() { testValid("({int, int} | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_31856() { testValid("({int, int} | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_31857() { testValid("({int, int} | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_31858() { testValid("({int, int} | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_31859() { testValid("({int, int} | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_31860() { testValid("({int, int} | (any | int))","(!any | (any & any))"); }
		@Test public void test_31861() { testValid("({int, int} | (any | int))","(!int | (any & any))"); }
		@Test public void test_31862() { testValid("({int, int} | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_31863() { testValid("({int, int} | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_31864() { testValid("({int, int} | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_31865() { testValid("({int, int} | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_31866() { testValid("({int, int} | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_31867() { testValid("({int, int} | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_31868() { testValid("({int, int} | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_31869() { testValid("({int, int} | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_31870() { testValid("({int, int} | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_31871() { testValid("({int, int} | (any | int))","({any} | (int & any))"); }
		@Test public void test_31872() { testValid("((int | any) | (any | int))","{int}"); }
		@Test public void test_31873() { testValid("((int | any) | (any | int))","{any, any}"); }
		@Test public void test_31874() { testValid("((int | any) | (any | int))","{int, int}"); }
		@Test public void test_31875() { testValid("((int | any) | (any | int))","(any | int)"); }
		@Test public void test_31876() { testValid("((int | any) | (any | int))","(int & any)"); }
		@Test public void test_31877() { testValid("((int | any) | (any | int))","{{any}}"); }
		@Test public void test_31878() { testValid("((int | any) | (any | int))","{{int, any}}"); }
		@Test public void test_31879() { testValid("((int | any) | (any | int))","{{int, int}}"); }
		@Test public void test_31880() { testValid("((int | any) | (any | int))","{(any | int)}"); }
		@Test public void test_31881() { testValid("((int | any) | (any | int))","!{int, any}"); }
		@Test public void test_31882() { testValid("((int | any) | (any | int))","!{int, int}"); }
		@Test public void test_31883() { testValid("((int | any) | (any | int))","!(any | any)"); }
		@Test public void test_31884() { testValid("((int | any) | (any | int))","!(any & any)"); }
		@Test public void test_31885() { testValid("((int | any) | (any | int))","!(int & int)"); }
		@Test public void test_31886() { testValid("((int | any) | (any | int))","{{int}, {any}}"); }
		@Test public void test_31887() { testValid("((int | any) | (any | int))","{!int, {any}}"); }
		@Test public void test_31888() { testValid("((int | any) | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_31889() { testValid("((int | any) | (any | int))","{(any | int), {any}}"); }
		@Test public void test_31890() { testValid("((int | any) | (any | int))","{!int, {int}}"); }
		@Test public void test_31891() { testValid("((int | any) | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_31892() { testValid("((int | any) | (any | int))","{(any | any), {int}}"); }
		@Test public void test_31893() { testValid("((int | any) | (any | int))","{(any & any), {int}}"); }
		@Test public void test_31894() { testValid("((int | any) | (any | int))","{(any & int), {int}}"); }
		@Test public void test_31895() { testValid("((int | any) | (any | int))","{{any, any}, !int}"); }
		@Test public void test_31896() { testValid("((int | any) | (any | int))","{{any, int}, !int}"); }
		@Test public void test_31897() { testValid("((int | any) | (any | int))","{(any | any), !int}"); }
		@Test public void test_31898() { testValid("((int | any) | (any | int))","{(int | any), !int}"); }
		@Test public void test_31899() { testValid("((int | any) | (any | int))","{(any & any), !int}"); }
		@Test public void test_31900() { testValid("((int | any) | (any | int))","{(int & any), !int}"); }
		@Test public void test_31901() { testValid("((int | any) | (any | int))","{(int & int), !int}"); }
		@Test public void test_31902() { testValid("((int | any) | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_31903() { testValid("((int | any) | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_31904() { testValid("((int | any) | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_31905() { testValid("((int | any) | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_31906() { testValid("((int | any) | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_31907() { testValid("((int | any) | (any | int))","{!int, {int, any}}"); }
		@Test public void test_31908() { testValid("((int | any) | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_31909() { testValid("((int | any) | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_31910() { testValid("((int | any) | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_31911() { testValid("((int | any) | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_31912() { testValid("((int | any) | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_31913() { testValid("((int | any) | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_31914() { testValid("((int | any) | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_31915() { testValid("((int | any) | (any | int))","{!int, {int, int}}"); }
		@Test public void test_31916() { testValid("((int | any) | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_31917() { testValid("((int | any) | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_31918() { testValid("((int | any) | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_31919() { testValid("((int | any) | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_31920() { testValid("((int | any) | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_31921() { testValid("((int | any) | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_31922() { testValid("((int | any) | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_31923() { testValid("((int | any) | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_31924() { testValid("((int | any) | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_31925() { testValid("((int | any) | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_31926() { testValid("((int | any) | (any | int))","{!int, (int | any)}"); }
		@Test public void test_31927() { testValid("((int | any) | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_31928() { testValid("((int | any) | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_31929() { testValid("((int | any) | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_31930() { testValid("((int | any) | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_31931() { testValid("((int | any) | (any | int))","{!int, (any | int)}"); }
		@Test public void test_31932() { testValid("((int | any) | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_31933() { testValid("((int | any) | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_31934() { testValid("((int | any) | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_31935() { testValid("((int | any) | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_31936() { testValid("((int | any) | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_31937() { testValid("((int | any) | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_31938() { testValid("((int | any) | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_31939() { testValid("((int | any) | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_31940() { testValid("((int | any) | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_31941() { testValid("((int | any) | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_31942() { testValid("((int | any) | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_31943() { testValid("((int | any) | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_31944() { testValid("((int | any) | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_31945() { testValid("((int | any) | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_31946() { testValid("((int | any) | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_31947() { testValid("((int | any) | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_31948() { testValid("((int | any) | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_31949() { testValid("((int | any) | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_31950() { testValid("((int | any) | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_31951() { testValid("((int | any) | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_31952() { testValid("((int | any) | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_31953() { testValid("((int | any) | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_31954() { testValid("((int | any) | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_31955() { testValid("((int | any) | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_31956() { testValid("((int | any) | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_31957() { testValid("((int | any) | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_31958() { testValid("((int | any) | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_31959() { testValid("((int | any) | (any | int))","(!int | {any})"); }
		@Test public void test_31960() { testValid("((int | any) | (any | int))","({any, any} | {any})"); }
		@Test public void test_31961() { testValid("((int | any) | (any | int))","((any | any) | {any})"); }
		@Test public void test_31962() { testValid("((int | any) | (any | int))","((int | any) | {any})"); }
		@Test public void test_31963() { testValid("((int | any) | (any | int))","((any & any) | {any})"); }
		@Test public void test_31964() { testValid("((int | any) | (any | int))","((int & any) | {any})"); }
		@Test public void test_31965() { testValid("((int | any) | (any | int))","((any & int) | {any})"); }
		@Test public void test_31966() { testValid("((int | any) | (any | int))","({int} | {int})"); }
		@Test public void test_31967() { testValid("((int | any) | (any | int))","(!any | {int})"); }
		@Test public void test_31968() { testValid("((int | any) | (any | int))","(!int | {int})"); }
		@Test public void test_31969() { testValid("((int | any) | (any | int))","({any, int} | {int})"); }
		@Test public void test_31970() { testValid("((int | any) | (any | int))","((int & any) | {int})"); }
		@Test public void test_31971() { testValid("((int | any) | (any | int))","((any & int) | {int})"); }
		@Test public void test_31972() { testValid("((int | any) | (any | int))","((int & int) | {int})"); }
		@Test public void test_31973() { testValid("((int | any) | (any | int))","({any} | !any)"); }
		@Test public void test_31974() { testValid("((int | any) | (any | int))","({int} | !any)"); }
		@Test public void test_31975() { testValid("((int | any) | (any | int))","({any, any} | !any)"); }
		@Test public void test_31976() { testValid("((int | any) | (any | int))","({int, int} | !any)"); }
		@Test public void test_31977() { testValid("((int | any) | (any | int))","((any | any) | !any)"); }
		@Test public void test_31978() { testValid("((int | any) | (any | int))","((int | any) | !any)"); }
		@Test public void test_31979() { testValid("((int | any) | (any | int))","((int | int) | !any)"); }
		@Test public void test_31980() { testValid("((int | any) | (any | int))","((int & int) | !any)"); }
		@Test public void test_31981() { testValid("((int | any) | (any | int))","(!int | !int)"); }
		@Test public void test_31982() { testValid("((int | any) | (any | int))","({any, any} | !int)"); }
		@Test public void test_31983() { testValid("((int | any) | (any | int))","({int, int} | !int)"); }
		@Test public void test_31984() { testValid("((int | any) | (any | int))","((int | any) | !int)"); }
		@Test public void test_31985() { testValid("((int | any) | (any | int))","((any | int) | !int)"); }
		@Test public void test_31986() { testValid("((int | any) | (any | int))","((any & int) | !int)"); }
		@Test public void test_31987() { testValid("((int | any) | (any | int))","((int & int) | !int)"); }
		@Test public void test_31988() { testValid("((int | any) | (any | int))","({int} | {any, any})"); }
		@Test public void test_31989() { testValid("((int | any) | (any | int))","(!any | {any, any})"); }
		@Test public void test_31990() { testValid("((int | any) | (any | int))","(!int | {any, any})"); }
		@Test public void test_31991() { testValid("((int | any) | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_31992() { testValid("((int | any) | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_31993() { testValid("((int | any) | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_31994() { testValid("((int | any) | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_31995() { testValid("((int | any) | (any | int))","(!int | {int, any})"); }
		@Test public void test_31996() { testValid("((int | any) | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_31997() { testValid("((int | any) | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_31998() { testValid("((int | any) | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_31999() { testValid("((int | any) | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_32000() { testValid("((int | any) | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_32001() { testValid("((int | any) | (any | int))","({any} | {any, int})"); }
		@Test public void test_32002() { testValid("((int | any) | (any | int))","(!int | {any, int})"); }
		@Test public void test_32003() { testValid("((int | any) | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_32004() { testValid("((int | any) | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_32005() { testValid("((int | any) | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_32006() { testValid("((int | any) | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_32007() { testValid("((int | any) | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_32008() { testValid("((int | any) | (any | int))","(!any | {int, int})"); }
		@Test public void test_32009() { testValid("((int | any) | (any | int))","(!int | {int, int})"); }
		@Test public void test_32010() { testValid("((int | any) | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_32011() { testValid("((int | any) | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_32012() { testValid("((int | any) | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_32013() { testValid("((int | any) | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_32014() { testValid("((int | any) | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_32015() { testValid("((int | any) | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_32016() { testValid("((int | any) | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_32017() { testValid("((int | any) | (any | int))","({any} | (any | any))"); }
		@Test public void test_32018() { testValid("((int | any) | (any | int))","(!any | (any | any))"); }
		@Test public void test_32019() { testValid("((int | any) | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_32020() { testValid("((int | any) | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_32021() { testValid("((int | any) | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_32022() { testValid("((int | any) | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_32023() { testValid("((int | any) | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_32024() { testValid("((int | any) | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_32025() { testValid("((int | any) | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_32026() { testValid("((int | any) | (any | int))","({any} | (int | any))"); }
		@Test public void test_32027() { testValid("((int | any) | (any | int))","(!int | (int | any))"); }
		@Test public void test_32028() { testValid("((int | any) | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_32029() { testValid("((int | any) | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_32030() { testValid("((int | any) | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_32031() { testValid("((int | any) | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_32032() { testValid("((int | any) | (any | int))","({any} | (any | int))"); }
		@Test public void test_32033() { testValid("((int | any) | (any | int))","({int} | (any | int))"); }
		@Test public void test_32034() { testValid("((int | any) | (any | int))","(!any | (any | int))"); }
		@Test public void test_32035() { testValid("((int | any) | (any | int))","(!int | (any | int))"); }
		@Test public void test_32036() { testValid("((int | any) | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_32037() { testValid("((int | any) | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_32038() { testValid("((int | any) | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_32039() { testValid("((int | any) | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_32040() { testValid("((int | any) | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_32041() { testValid("((int | any) | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_32042() { testValid("((int | any) | (any | int))","({int} | (int | int))"); }
		@Test public void test_32043() { testValid("((int | any) | (any | int))","(!any | (int | int))"); }
		@Test public void test_32044() { testValid("((int | any) | (any | int))","(!int | (int | int))"); }
		@Test public void test_32045() { testValid("((int | any) | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_32046() { testValid("((int | any) | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_32047() { testValid("((int | any) | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_32048() { testValid("((int | any) | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_32049() { testValid("((int | any) | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_32050() { testValid("((int | any) | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_32051() { testValid("((int | any) | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_32052() { testValid("((int | any) | (any | int))","(!any | (any & any))"); }
		@Test public void test_32053() { testValid("((int | any) | (any | int))","(!int | (any & any))"); }
		@Test public void test_32054() { testValid("((int | any) | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_32055() { testValid("((int | any) | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_32056() { testValid("((int | any) | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_32057() { testValid("((int | any) | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_32058() { testValid("((int | any) | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_32059() { testValid("((int | any) | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_32060() { testValid("((int | any) | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_32061() { testValid("((int | any) | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_32062() { testValid("((int | any) | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_32063() { testValid("((int | any) | (any | int))","({any} | (int & any))"); }
		@Test public void test_32064() { testValid("((any | int) | (any | int))","{int}"); }
		@Test public void test_32065() { testValid("((any | int) | (any | int))","{any, any}"); }
		@Test public void test_32066() { testValid("((any | int) | (any | int))","{int, int}"); }
		@Test public void test_32067() { testValid("((any | int) | (any | int))","(any | int)"); }
		@Test public void test_32068() { testValid("((any | int) | (any | int))","(int & any)"); }
		@Test public void test_32069() { testValid("((any | int) | (any | int))","{{any}}"); }
		@Test public void test_32070() { testValid("((any | int) | (any | int))","{{int, any}}"); }
		@Test public void test_32071() { testValid("((any | int) | (any | int))","{{int, int}}"); }
		@Test public void test_32072() { testValid("((any | int) | (any | int))","{(any | int)}"); }
		@Test public void test_32073() { testValid("((any | int) | (any | int))","!{int, any}"); }
		@Test public void test_32074() { testValid("((any | int) | (any | int))","!{int, int}"); }
		@Test public void test_32075() { testValid("((any | int) | (any | int))","!(any | any)"); }
		@Test public void test_32076() { testValid("((any | int) | (any | int))","!(any & any)"); }
		@Test public void test_32077() { testValid("((any | int) | (any | int))","!(int & int)"); }
		@Test public void test_32078() { testValid("((any | int) | (any | int))","{{int}, {any}}"); }
		@Test public void test_32079() { testValid("((any | int) | (any | int))","{!int, {any}}"); }
		@Test public void test_32080() { testValid("((any | int) | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_32081() { testValid("((any | int) | (any | int))","{(any | int), {any}}"); }
		@Test public void test_32082() { testValid("((any | int) | (any | int))","{!int, {int}}"); }
		@Test public void test_32083() { testValid("((any | int) | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_32084() { testValid("((any | int) | (any | int))","{(any | any), {int}}"); }
		@Test public void test_32085() { testValid("((any | int) | (any | int))","{(any & any), {int}}"); }
		@Test public void test_32086() { testValid("((any | int) | (any | int))","{(any & int), {int}}"); }
		@Test public void test_32087() { testValid("((any | int) | (any | int))","{{any, any}, !int}"); }
		@Test public void test_32088() { testValid("((any | int) | (any | int))","{{any, int}, !int}"); }
		@Test public void test_32089() { testValid("((any | int) | (any | int))","{(any | any), !int}"); }
		@Test public void test_32090() { testValid("((any | int) | (any | int))","{(int | any), !int}"); }
		@Test public void test_32091() { testValid("((any | int) | (any | int))","{(any & any), !int}"); }
		@Test public void test_32092() { testValid("((any | int) | (any | int))","{(int & any), !int}"); }
		@Test public void test_32093() { testValid("((any | int) | (any | int))","{(int & int), !int}"); }
		@Test public void test_32094() { testValid("((any | int) | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_32095() { testValid("((any | int) | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_32096() { testValid("((any | int) | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_32097() { testValid("((any | int) | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_32098() { testValid("((any | int) | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_32099() { testValid("((any | int) | (any | int))","{!int, {int, any}}"); }
		@Test public void test_32100() { testValid("((any | int) | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_32101() { testValid("((any | int) | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_32102() { testValid("((any | int) | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_32103() { testValid("((any | int) | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_32104() { testValid("((any | int) | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_32105() { testValid("((any | int) | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_32106() { testValid("((any | int) | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_32107() { testValid("((any | int) | (any | int))","{!int, {int, int}}"); }
		@Test public void test_32108() { testValid("((any | int) | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_32109() { testValid("((any | int) | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_32110() { testValid("((any | int) | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_32111() { testValid("((any | int) | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_32112() { testValid("((any | int) | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_32113() { testValid("((any | int) | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_32114() { testValid("((any | int) | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_32115() { testValid("((any | int) | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_32116() { testValid("((any | int) | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_32117() { testValid("((any | int) | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_32118() { testValid("((any | int) | (any | int))","{!int, (int | any)}"); }
		@Test public void test_32119() { testValid("((any | int) | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_32120() { testValid("((any | int) | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_32121() { testValid("((any | int) | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_32122() { testValid("((any | int) | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_32123() { testValid("((any | int) | (any | int))","{!int, (any | int)}"); }
		@Test public void test_32124() { testValid("((any | int) | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_32125() { testValid("((any | int) | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_32126() { testValid("((any | int) | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_32127() { testValid("((any | int) | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_32128() { testValid("((any | int) | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_32129() { testValid("((any | int) | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_32130() { testValid("((any | int) | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_32131() { testValid("((any | int) | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_32132() { testValid("((any | int) | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_32133() { testValid("((any | int) | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_32134() { testValid("((any | int) | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_32135() { testValid("((any | int) | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_32136() { testValid("((any | int) | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_32137() { testValid("((any | int) | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_32138() { testValid("((any | int) | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_32139() { testValid("((any | int) | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_32140() { testValid("((any | int) | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_32141() { testValid("((any | int) | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_32142() { testValid("((any | int) | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_32143() { testValid("((any | int) | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_32144() { testValid("((any | int) | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_32145() { testValid("((any | int) | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_32146() { testValid("((any | int) | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_32147() { testValid("((any | int) | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_32148() { testValid("((any | int) | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_32149() { testValid("((any | int) | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_32150() { testValid("((any | int) | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_32151() { testValid("((any | int) | (any | int))","(!int | {any})"); }
		@Test public void test_32152() { testValid("((any | int) | (any | int))","({any, any} | {any})"); }
		@Test public void test_32153() { testValid("((any | int) | (any | int))","((any | any) | {any})"); }
		@Test public void test_32154() { testValid("((any | int) | (any | int))","((int | any) | {any})"); }
		@Test public void test_32155() { testValid("((any | int) | (any | int))","((any & any) | {any})"); }
		@Test public void test_32156() { testValid("((any | int) | (any | int))","((int & any) | {any})"); }
		@Test public void test_32157() { testValid("((any | int) | (any | int))","((any & int) | {any})"); }
		@Test public void test_32158() { testValid("((any | int) | (any | int))","({int} | {int})"); }
		@Test public void test_32159() { testValid("((any | int) | (any | int))","(!any | {int})"); }
		@Test public void test_32160() { testValid("((any | int) | (any | int))","(!int | {int})"); }
		@Test public void test_32161() { testValid("((any | int) | (any | int))","({any, int} | {int})"); }
		@Test public void test_32162() { testValid("((any | int) | (any | int))","((int & any) | {int})"); }
		@Test public void test_32163() { testValid("((any | int) | (any | int))","((any & int) | {int})"); }
		@Test public void test_32164() { testValid("((any | int) | (any | int))","((int & int) | {int})"); }
		@Test public void test_32165() { testValid("((any | int) | (any | int))","({any} | !any)"); }
		@Test public void test_32166() { testValid("((any | int) | (any | int))","({int} | !any)"); }
		@Test public void test_32167() { testValid("((any | int) | (any | int))","({any, any} | !any)"); }
		@Test public void test_32168() { testValid("((any | int) | (any | int))","({int, int} | !any)"); }
		@Test public void test_32169() { testValid("((any | int) | (any | int))","((any | any) | !any)"); }
		@Test public void test_32170() { testValid("((any | int) | (any | int))","((int | any) | !any)"); }
		@Test public void test_32171() { testValid("((any | int) | (any | int))","((int | int) | !any)"); }
		@Test public void test_32172() { testValid("((any | int) | (any | int))","((int & int) | !any)"); }
		@Test public void test_32173() { testValid("((any | int) | (any | int))","(!int | !int)"); }
		@Test public void test_32174() { testValid("((any | int) | (any | int))","({any, any} | !int)"); }
		@Test public void test_32175() { testValid("((any | int) | (any | int))","({int, int} | !int)"); }
		@Test public void test_32176() { testValid("((any | int) | (any | int))","((int | any) | !int)"); }
		@Test public void test_32177() { testValid("((any | int) | (any | int))","((any | int) | !int)"); }
		@Test public void test_32178() { testValid("((any | int) | (any | int))","((any & int) | !int)"); }
		@Test public void test_32179() { testValid("((any | int) | (any | int))","((int & int) | !int)"); }
		@Test public void test_32180() { testValid("((any | int) | (any | int))","({int} | {any, any})"); }
		@Test public void test_32181() { testValid("((any | int) | (any | int))","(!any | {any, any})"); }
		@Test public void test_32182() { testValid("((any | int) | (any | int))","(!int | {any, any})"); }
		@Test public void test_32183() { testValid("((any | int) | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_32184() { testValid("((any | int) | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_32185() { testValid("((any | int) | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_32186() { testValid("((any | int) | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_32187() { testValid("((any | int) | (any | int))","(!int | {int, any})"); }
		@Test public void test_32188() { testValid("((any | int) | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_32189() { testValid("((any | int) | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_32190() { testValid("((any | int) | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_32191() { testValid("((any | int) | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_32192() { testValid("((any | int) | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_32193() { testValid("((any | int) | (any | int))","({any} | {any, int})"); }
		@Test public void test_32194() { testValid("((any | int) | (any | int))","(!int | {any, int})"); }
		@Test public void test_32195() { testValid("((any | int) | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_32196() { testValid("((any | int) | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_32197() { testValid("((any | int) | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_32198() { testValid("((any | int) | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_32199() { testValid("((any | int) | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_32200() { testValid("((any | int) | (any | int))","(!any | {int, int})"); }
		@Test public void test_32201() { testValid("((any | int) | (any | int))","(!int | {int, int})"); }
		@Test public void test_32202() { testValid("((any | int) | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_32203() { testValid("((any | int) | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_32204() { testValid("((any | int) | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_32205() { testValid("((any | int) | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_32206() { testValid("((any | int) | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_32207() { testValid("((any | int) | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_32208() { testValid("((any | int) | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_32209() { testValid("((any | int) | (any | int))","({any} | (any | any))"); }
		@Test public void test_32210() { testValid("((any | int) | (any | int))","(!any | (any | any))"); }
		@Test public void test_32211() { testValid("((any | int) | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_32212() { testValid("((any | int) | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_32213() { testValid("((any | int) | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_32214() { testValid("((any | int) | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_32215() { testValid("((any | int) | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_32216() { testValid("((any | int) | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_32217() { testValid("((any | int) | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_32218() { testValid("((any | int) | (any | int))","({any} | (int | any))"); }
		@Test public void test_32219() { testValid("((any | int) | (any | int))","(!int | (int | any))"); }
		@Test public void test_32220() { testValid("((any | int) | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_32221() { testValid("((any | int) | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_32222() { testValid("((any | int) | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_32223() { testValid("((any | int) | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_32224() { testValid("((any | int) | (any | int))","({any} | (any | int))"); }
		@Test public void test_32225() { testValid("((any | int) | (any | int))","({int} | (any | int))"); }
		@Test public void test_32226() { testValid("((any | int) | (any | int))","(!any | (any | int))"); }
		@Test public void test_32227() { testValid("((any | int) | (any | int))","(!int | (any | int))"); }
		@Test public void test_32228() { testValid("((any | int) | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_32229() { testValid("((any | int) | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_32230() { testValid("((any | int) | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_32231() { testValid("((any | int) | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_32232() { testValid("((any | int) | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_32233() { testValid("((any | int) | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_32234() { testValid("((any | int) | (any | int))","({int} | (int | int))"); }
		@Test public void test_32235() { testValid("((any | int) | (any | int))","(!any | (int | int))"); }
		@Test public void test_32236() { testValid("((any | int) | (any | int))","(!int | (int | int))"); }
		@Test public void test_32237() { testValid("((any | int) | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_32238() { testValid("((any | int) | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_32239() { testValid("((any | int) | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_32240() { testValid("((any | int) | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_32241() { testValid("((any | int) | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_32242() { testValid("((any | int) | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_32243() { testValid("((any | int) | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_32244() { testValid("((any | int) | (any | int))","(!any | (any & any))"); }
		@Test public void test_32245() { testValid("((any | int) | (any | int))","(!int | (any & any))"); }
		@Test public void test_32246() { testValid("((any | int) | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_32247() { testValid("((any | int) | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_32248() { testValid("((any | int) | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_32249() { testValid("((any | int) | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_32250() { testValid("((any | int) | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_32251() { testValid("((any | int) | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_32252() { testValid("((any | int) | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_32253() { testValid("((any | int) | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_32254() { testValid("((any | int) | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_32255() { testValid("((any | int) | (any | int))","({any} | (int & any))"); }
		@Test public void test_32256() { testValid("((int | int) | (any | int))","{int}"); }
		@Test public void test_32257() { testValid("((int | int) | (any | int))","{any, any}"); }
		@Test public void test_32258() { testValid("((int | int) | (any | int))","{int, int}"); }
		@Test public void test_32259() { testValid("((int | int) | (any | int))","(any | int)"); }
		@Test public void test_32260() { testValid("((int | int) | (any | int))","(int & any)"); }
		@Test public void test_32261() { testValid("((int | int) | (any | int))","{{any}}"); }
		@Test public void test_32262() { testValid("((int | int) | (any | int))","{{int, any}}"); }
		@Test public void test_32263() { testValid("((int | int) | (any | int))","{{int, int}}"); }
		@Test public void test_32264() { testValid("((int | int) | (any | int))","{(any | int)}"); }
		@Test public void test_32265() { testValid("((int | int) | (any | int))","!{int, any}"); }
		@Test public void test_32266() { testValid("((int | int) | (any | int))","!{int, int}"); }
		@Test public void test_32267() { testValid("((int | int) | (any | int))","!(any | any)"); }
		@Test public void test_32268() { testValid("((int | int) | (any | int))","!(any & any)"); }
		@Test public void test_32269() { testValid("((int | int) | (any | int))","!(int & int)"); }
		@Test public void test_32270() { testValid("((int | int) | (any | int))","{{int}, {any}}"); }
		@Test public void test_32271() { testValid("((int | int) | (any | int))","{!int, {any}}"); }
		@Test public void test_32272() { testValid("((int | int) | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_32273() { testValid("((int | int) | (any | int))","{(any | int), {any}}"); }
		@Test public void test_32274() { testValid("((int | int) | (any | int))","{!int, {int}}"); }
		@Test public void test_32275() { testValid("((int | int) | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_32276() { testValid("((int | int) | (any | int))","{(any | any), {int}}"); }
		@Test public void test_32277() { testValid("((int | int) | (any | int))","{(any & any), {int}}"); }
		@Test public void test_32278() { testValid("((int | int) | (any | int))","{(any & int), {int}}"); }
		@Test public void test_32279() { testValid("((int | int) | (any | int))","{{any, any}, !int}"); }
		@Test public void test_32280() { testValid("((int | int) | (any | int))","{{any, int}, !int}"); }
		@Test public void test_32281() { testValid("((int | int) | (any | int))","{(any | any), !int}"); }
		@Test public void test_32282() { testValid("((int | int) | (any | int))","{(int | any), !int}"); }
		@Test public void test_32283() { testValid("((int | int) | (any | int))","{(any & any), !int}"); }
		@Test public void test_32284() { testValid("((int | int) | (any | int))","{(int & any), !int}"); }
		@Test public void test_32285() { testValid("((int | int) | (any | int))","{(int & int), !int}"); }
		@Test public void test_32286() { testValid("((int | int) | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_32287() { testValid("((int | int) | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_32288() { testValid("((int | int) | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_32289() { testValid("((int | int) | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_32290() { testValid("((int | int) | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_32291() { testValid("((int | int) | (any | int))","{!int, {int, any}}"); }
		@Test public void test_32292() { testValid("((int | int) | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_32293() { testValid("((int | int) | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_32294() { testValid("((int | int) | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_32295() { testValid("((int | int) | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_32296() { testValid("((int | int) | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_32297() { testValid("((int | int) | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_32298() { testValid("((int | int) | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_32299() { testValid("((int | int) | (any | int))","{!int, {int, int}}"); }
		@Test public void test_32300() { testValid("((int | int) | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_32301() { testValid("((int | int) | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_32302() { testValid("((int | int) | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_32303() { testValid("((int | int) | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_32304() { testValid("((int | int) | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_32305() { testValid("((int | int) | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_32306() { testValid("((int | int) | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_32307() { testValid("((int | int) | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_32308() { testValid("((int | int) | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_32309() { testValid("((int | int) | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_32310() { testValid("((int | int) | (any | int))","{!int, (int | any)}"); }
		@Test public void test_32311() { testValid("((int | int) | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_32312() { testValid("((int | int) | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_32313() { testValid("((int | int) | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_32314() { testValid("((int | int) | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_32315() { testValid("((int | int) | (any | int))","{!int, (any | int)}"); }
		@Test public void test_32316() { testValid("((int | int) | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_32317() { testValid("((int | int) | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_32318() { testValid("((int | int) | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_32319() { testValid("((int | int) | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_32320() { testValid("((int | int) | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_32321() { testValid("((int | int) | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_32322() { testValid("((int | int) | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_32323() { testValid("((int | int) | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_32324() { testValid("((int | int) | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_32325() { testValid("((int | int) | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_32326() { testValid("((int | int) | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_32327() { testValid("((int | int) | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_32328() { testValid("((int | int) | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_32329() { testValid("((int | int) | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_32330() { testValid("((int | int) | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_32331() { testValid("((int | int) | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_32332() { testValid("((int | int) | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_32333() { testValid("((int | int) | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_32334() { testValid("((int | int) | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_32335() { testValid("((int | int) | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_32336() { testValid("((int | int) | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_32337() { testValid("((int | int) | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_32338() { testValid("((int | int) | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_32339() { testValid("((int | int) | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_32340() { testValid("((int | int) | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_32341() { testValid("((int | int) | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_32342() { testValid("((int | int) | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_32343() { testValid("((int | int) | (any | int))","(!int | {any})"); }
		@Test public void test_32344() { testValid("((int | int) | (any | int))","({any, any} | {any})"); }
		@Test public void test_32345() { testValid("((int | int) | (any | int))","((any | any) | {any})"); }
		@Test public void test_32346() { testValid("((int | int) | (any | int))","((int | any) | {any})"); }
		@Test public void test_32347() { testValid("((int | int) | (any | int))","((any & any) | {any})"); }
		@Test public void test_32348() { testValid("((int | int) | (any | int))","((int & any) | {any})"); }
		@Test public void test_32349() { testValid("((int | int) | (any | int))","((any & int) | {any})"); }
		@Test public void test_32350() { testValid("((int | int) | (any | int))","({int} | {int})"); }
		@Test public void test_32351() { testValid("((int | int) | (any | int))","(!any | {int})"); }
		@Test public void test_32352() { testValid("((int | int) | (any | int))","(!int | {int})"); }
		@Test public void test_32353() { testValid("((int | int) | (any | int))","({any, int} | {int})"); }
		@Test public void test_32354() { testValid("((int | int) | (any | int))","((int & any) | {int})"); }
		@Test public void test_32355() { testValid("((int | int) | (any | int))","((any & int) | {int})"); }
		@Test public void test_32356() { testValid("((int | int) | (any | int))","((int & int) | {int})"); }
		@Test public void test_32357() { testValid("((int | int) | (any | int))","({any} | !any)"); }
		@Test public void test_32358() { testValid("((int | int) | (any | int))","({int} | !any)"); }
		@Test public void test_32359() { testValid("((int | int) | (any | int))","({any, any} | !any)"); }
		@Test public void test_32360() { testValid("((int | int) | (any | int))","({int, int} | !any)"); }
		@Test public void test_32361() { testValid("((int | int) | (any | int))","((any | any) | !any)"); }
		@Test public void test_32362() { testValid("((int | int) | (any | int))","((int | any) | !any)"); }
		@Test public void test_32363() { testValid("((int | int) | (any | int))","((int | int) | !any)"); }
		@Test public void test_32364() { testValid("((int | int) | (any | int))","((int & int) | !any)"); }
		@Test public void test_32365() { testValid("((int | int) | (any | int))","(!int | !int)"); }
		@Test public void test_32366() { testValid("((int | int) | (any | int))","({any, any} | !int)"); }
		@Test public void test_32367() { testValid("((int | int) | (any | int))","({int, int} | !int)"); }
		@Test public void test_32368() { testValid("((int | int) | (any | int))","((int | any) | !int)"); }
		@Test public void test_32369() { testValid("((int | int) | (any | int))","((any | int) | !int)"); }
		@Test public void test_32370() { testValid("((int | int) | (any | int))","((any & int) | !int)"); }
		@Test public void test_32371() { testValid("((int | int) | (any | int))","((int & int) | !int)"); }
		@Test public void test_32372() { testValid("((int | int) | (any | int))","({int} | {any, any})"); }
		@Test public void test_32373() { testValid("((int | int) | (any | int))","(!any | {any, any})"); }
		@Test public void test_32374() { testValid("((int | int) | (any | int))","(!int | {any, any})"); }
		@Test public void test_32375() { testValid("((int | int) | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_32376() { testValid("((int | int) | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_32377() { testValid("((int | int) | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_32378() { testValid("((int | int) | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_32379() { testValid("((int | int) | (any | int))","(!int | {int, any})"); }
		@Test public void test_32380() { testValid("((int | int) | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_32381() { testValid("((int | int) | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_32382() { testValid("((int | int) | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_32383() { testValid("((int | int) | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_32384() { testValid("((int | int) | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_32385() { testValid("((int | int) | (any | int))","({any} | {any, int})"); }
		@Test public void test_32386() { testValid("((int | int) | (any | int))","(!int | {any, int})"); }
		@Test public void test_32387() { testValid("((int | int) | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_32388() { testValid("((int | int) | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_32389() { testValid("((int | int) | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_32390() { testValid("((int | int) | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_32391() { testValid("((int | int) | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_32392() { testValid("((int | int) | (any | int))","(!any | {int, int})"); }
		@Test public void test_32393() { testValid("((int | int) | (any | int))","(!int | {int, int})"); }
		@Test public void test_32394() { testValid("((int | int) | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_32395() { testValid("((int | int) | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_32396() { testValid("((int | int) | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_32397() { testValid("((int | int) | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_32398() { testValid("((int | int) | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_32399() { testValid("((int | int) | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_32400() { testValid("((int | int) | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_32401() { testValid("((int | int) | (any | int))","({any} | (any | any))"); }
		@Test public void test_32402() { testValid("((int | int) | (any | int))","(!any | (any | any))"); }
		@Test public void test_32403() { testValid("((int | int) | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_32404() { testValid("((int | int) | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_32405() { testValid("((int | int) | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_32406() { testValid("((int | int) | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_32407() { testValid("((int | int) | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_32408() { testValid("((int | int) | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_32409() { testValid("((int | int) | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_32410() { testValid("((int | int) | (any | int))","({any} | (int | any))"); }
		@Test public void test_32411() { testValid("((int | int) | (any | int))","(!int | (int | any))"); }
		@Test public void test_32412() { testValid("((int | int) | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_32413() { testValid("((int | int) | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_32414() { testValid("((int | int) | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_32415() { testValid("((int | int) | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_32416() { testValid("((int | int) | (any | int))","({any} | (any | int))"); }
		@Test public void test_32417() { testValid("((int | int) | (any | int))","({int} | (any | int))"); }
		@Test public void test_32418() { testValid("((int | int) | (any | int))","(!any | (any | int))"); }
		@Test public void test_32419() { testValid("((int | int) | (any | int))","(!int | (any | int))"); }
		@Test public void test_32420() { testValid("((int | int) | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_32421() { testValid("((int | int) | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_32422() { testValid("((int | int) | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_32423() { testValid("((int | int) | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_32424() { testValid("((int | int) | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_32425() { testValid("((int | int) | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_32426() { testValid("((int | int) | (any | int))","({int} | (int | int))"); }
		@Test public void test_32427() { testValid("((int | int) | (any | int))","(!any | (int | int))"); }
		@Test public void test_32428() { testValid("((int | int) | (any | int))","(!int | (int | int))"); }
		@Test public void test_32429() { testValid("((int | int) | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_32430() { testValid("((int | int) | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_32431() { testValid("((int | int) | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_32432() { testValid("((int | int) | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_32433() { testValid("((int | int) | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_32434() { testValid("((int | int) | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_32435() { testValid("((int | int) | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_32436() { testValid("((int | int) | (any | int))","(!any | (any & any))"); }
		@Test public void test_32437() { testValid("((int | int) | (any | int))","(!int | (any & any))"); }
		@Test public void test_32438() { testValid("((int | int) | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_32439() { testValid("((int | int) | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_32440() { testValid("((int | int) | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_32441() { testValid("((int | int) | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_32442() { testValid("((int | int) | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_32443() { testValid("((int | int) | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_32444() { testValid("((int | int) | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_32445() { testValid("((int | int) | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_32446() { testValid("((int | int) | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_32447() { testValid("((int | int) | (any | int))","({any} | (int & any))"); }
		@Test public void test_32448() { testValid("((any & any) | (any | int))","{int}"); }
		@Test public void test_32449() { testValid("((any & any) | (any | int))","{any, any}"); }
		@Test public void test_32450() { testValid("((any & any) | (any | int))","{int, int}"); }
		@Test public void test_32451() { testValid("((any & any) | (any | int))","(any | int)"); }
		@Test public void test_32452() { testValid("((any & any) | (any | int))","(int & any)"); }
		@Test public void test_32453() { testValid("((any & any) | (any | int))","{{any}}"); }
		@Test public void test_32454() { testValid("((any & any) | (any | int))","{{int, any}}"); }
		@Test public void test_32455() { testValid("((any & any) | (any | int))","{{int, int}}"); }
		@Test public void test_32456() { testValid("((any & any) | (any | int))","{(any | int)}"); }
		@Test public void test_32457() { testValid("((any & any) | (any | int))","!{int, any}"); }
		@Test public void test_32458() { testValid("((any & any) | (any | int))","!{int, int}"); }
		@Test public void test_32459() { testValid("((any & any) | (any | int))","!(any | any)"); }
		@Test public void test_32460() { testValid("((any & any) | (any | int))","!(any & any)"); }
		@Test public void test_32461() { testValid("((any & any) | (any | int))","!(int & int)"); }
		@Test public void test_32462() { testValid("((any & any) | (any | int))","{{int}, {any}}"); }
		@Test public void test_32463() { testValid("((any & any) | (any | int))","{!int, {any}}"); }
		@Test public void test_32464() { testValid("((any & any) | (any | int))","{{int, int}, {any}}"); }
		@Test public void test_32465() { testValid("((any & any) | (any | int))","{(any | int), {any}}"); }
		@Test public void test_32466() { testValid("((any & any) | (any | int))","{!int, {int}}"); }
		@Test public void test_32467() { testValid("((any & any) | (any | int))","{{any, any}, {int}}"); }
		@Test public void test_32468() { testValid("((any & any) | (any | int))","{(any | any), {int}}"); }
		@Test public void test_32469() { testValid("((any & any) | (any | int))","{(any & any), {int}}"); }
		@Test public void test_32470() { testValid("((any & any) | (any | int))","{(any & int), {int}}"); }
		@Test public void test_32471() { testValid("((any & any) | (any | int))","{{any, any}, !int}"); }
		@Test public void test_32472() { testValid("((any & any) | (any | int))","{{any, int}, !int}"); }
		@Test public void test_32473() { testValid("((any & any) | (any | int))","{(any | any), !int}"); }
		@Test public void test_32474() { testValid("((any & any) | (any | int))","{(int | any), !int}"); }
		@Test public void test_32475() { testValid("((any & any) | (any | int))","{(any & any), !int}"); }
		@Test public void test_32476() { testValid("((any & any) | (any | int))","{(int & any), !int}"); }
		@Test public void test_32477() { testValid("((any & any) | (any | int))","{(int & int), !int}"); }
		@Test public void test_32478() { testValid("((any & any) | (any | int))","{{any}, {any, any}}"); }
		@Test public void test_32479() { testValid("((any & any) | (any | int))","{{int}, {any, any}}"); }
		@Test public void test_32480() { testValid("((any & any) | (any | int))","{{int, int}, {any, any}}"); }
		@Test public void test_32481() { testValid("((any & any) | (any | int))","{(any | any), {any, any}}"); }
		@Test public void test_32482() { testValid("((any & any) | (any | int))","{(any | int), {any, any}}"); }
		@Test public void test_32483() { testValid("((any & any) | (any | int))","{!int, {int, any}}"); }
		@Test public void test_32484() { testValid("((any & any) | (any | int))","{{int, any}, {int, any}}"); }
		@Test public void test_32485() { testValid("((any & any) | (any | int))","{{any, int}, {int, any}}"); }
		@Test public void test_32486() { testValid("((any & any) | (any | int))","{(any & int), {int, any}}"); }
		@Test public void test_32487() { testValid("((any & any) | (any | int))","{{any}, {any, int}}"); }
		@Test public void test_32488() { testValid("((any & any) | (any | int))","{{int, int}, {any, int}}"); }
		@Test public void test_32489() { testValid("((any & any) | (any | int))","{(int | int), {any, int}}"); }
		@Test public void test_32490() { testValid("((any & any) | (any | int))","{(any & int), {any, int}}"); }
		@Test public void test_32491() { testValid("((any & any) | (any | int))","{!int, {int, int}}"); }
		@Test public void test_32492() { testValid("((any & any) | (any | int))","{{int, int}, {int, int}}"); }
		@Test public void test_32493() { testValid("((any & any) | (any | int))","{(any | any), {int, int}}"); }
		@Test public void test_32494() { testValid("((any & any) | (any | int))","{(int | any), {int, int}}"); }
		@Test public void test_32495() { testValid("((any & any) | (any | int))","{(int & any), {int, int}}"); }
		@Test public void test_32496() { testValid("((any & any) | (any | int))","{{int}, (any | any)}"); }
		@Test public void test_32497() { testValid("((any & any) | (any | int))","{{int, any}, (any | any)}"); }
		@Test public void test_32498() { testValid("((any & any) | (any | int))","{{any, int}, (any | any)}"); }
		@Test public void test_32499() { testValid("((any & any) | (any | int))","{(any | any), (any | any)}"); }
		@Test public void test_32500() { testValid("((any & any) | (any | int))","{(int | any), (any | any)}"); }
		@Test public void test_32501() { testValid("((any & any) | (any | int))","{(int & int), (any | any)}"); }
		@Test public void test_32502() { testValid("((any & any) | (any | int))","{!int, (int | any)}"); }
		@Test public void test_32503() { testValid("((any & any) | (any | int))","{{int, int}, (int | any)}"); }
		@Test public void test_32504() { testValid("((any & any) | (any | int))","{(any | any), (int | any)}"); }
		@Test public void test_32505() { testValid("((any & any) | (any | int))","{(int | int), (int | any)}"); }
		@Test public void test_32506() { testValid("((any & any) | (any | int))","{{any}, (any | int)}"); }
		@Test public void test_32507() { testValid("((any & any) | (any | int))","{!int, (any | int)}"); }
		@Test public void test_32508() { testValid("((any & any) | (any | int))","{(any | any), (any | int)}"); }
		@Test public void test_32509() { testValid("((any & any) | (any | int))","{(any | int), (any | int)}"); }
		@Test public void test_32510() { testValid("((any & any) | (any | int))","{(any & int), (any | int)}"); }
		@Test public void test_32511() { testValid("((any & any) | (any | int))","{{int}, (int | int)}"); }
		@Test public void test_32512() { testValid("((any & any) | (any | int))","{{any, any}, (int | int)}"); }
		@Test public void test_32513() { testValid("((any & any) | (any | int))","{{int, int}, (int | int)}"); }
		@Test public void test_32514() { testValid("((any & any) | (any | int))","{{int}, (any & any)}"); }
		@Test public void test_32515() { testValid("((any & any) | (any | int))","{{int, any}, (any & any)}"); }
		@Test public void test_32516() { testValid("((any & any) | (any | int))","{{any, int}, (any & any)}"); }
		@Test public void test_32517() { testValid("((any & any) | (any | int))","{(int | any), (any & any)}"); }
		@Test public void test_32518() { testValid("((any & any) | (any | int))","{(any & any), (any & any)}"); }
		@Test public void test_32519() { testValid("((any & any) | (any | int))","{(int & any), (any & any)}"); }
		@Test public void test_32520() { testValid("((any & any) | (any | int))","{{any}, (int & any)}"); }
		@Test public void test_32521() { testValid("((any & any) | (any | int))","{{int}, (int & any)}"); }
		@Test public void test_32522() { testValid("((any & any) | (any | int))","{{any, any}, (int & any)}"); }
		@Test public void test_32523() { testValid("((any & any) | (any | int))","{{int, any}, (int & any)}"); }
		@Test public void test_32524() { testValid("((any & any) | (any | int))","{(any | int), (int & any)}"); }
		@Test public void test_32525() { testValid("((any & any) | (any | int))","{(any & any), (int & any)}"); }
		@Test public void test_32526() { testValid("((any & any) | (any | int))","{(int & any), (int & any)}"); }
		@Test public void test_32527() { testValid("((any & any) | (any | int))","{(int & int), (int & any)}"); }
		@Test public void test_32528() { testValid("((any & any) | (any | int))","{{int, any}, (any & int)}"); }
		@Test public void test_32529() { testValid("((any & any) | (any | int))","{(any & any), (any & int)}"); }
		@Test public void test_32530() { testValid("((any & any) | (any | int))","{{any, int}, (int & int)}"); }
		@Test public void test_32531() { testValid("((any & any) | (any | int))","{(int | int), (int & int)}"); }
		@Test public void test_32532() { testValid("((any & any) | (any | int))","{(any & any), (int & int)}"); }
		@Test public void test_32533() { testValid("((any & any) | (any | int))","{(any & int), (int & int)}"); }
		@Test public void test_32534() { testValid("((any & any) | (any | int))","{(int & int), (int & int)}"); }
		@Test public void test_32535() { testValid("((any & any) | (any | int))","(!int | {any})"); }
		@Test public void test_32536() { testValid("((any & any) | (any | int))","({any, any} | {any})"); }
		@Test public void test_32537() { testValid("((any & any) | (any | int))","((any | any) | {any})"); }
		@Test public void test_32538() { testValid("((any & any) | (any | int))","((int | any) | {any})"); }
		@Test public void test_32539() { testValid("((any & any) | (any | int))","((any & any) | {any})"); }
		@Test public void test_32540() { testValid("((any & any) | (any | int))","((int & any) | {any})"); }
		@Test public void test_32541() { testValid("((any & any) | (any | int))","((any & int) | {any})"); }
		@Test public void test_32542() { testValid("((any & any) | (any | int))","({int} | {int})"); }
		@Test public void test_32543() { testValid("((any & any) | (any | int))","(!any | {int})"); }
		@Test public void test_32544() { testValid("((any & any) | (any | int))","(!int | {int})"); }
		@Test public void test_32545() { testValid("((any & any) | (any | int))","({any, int} | {int})"); }
		@Test public void test_32546() { testValid("((any & any) | (any | int))","((int & any) | {int})"); }
		@Test public void test_32547() { testValid("((any & any) | (any | int))","((any & int) | {int})"); }
		@Test public void test_32548() { testValid("((any & any) | (any | int))","((int & int) | {int})"); }
		@Test public void test_32549() { testValid("((any & any) | (any | int))","({any} | !any)"); }
		@Test public void test_32550() { testValid("((any & any) | (any | int))","({int} | !any)"); }
		@Test public void test_32551() { testValid("((any & any) | (any | int))","({any, any} | !any)"); }
		@Test public void test_32552() { testValid("((any & any) | (any | int))","({int, int} | !any)"); }
		@Test public void test_32553() { testValid("((any & any) | (any | int))","((any | any) | !any)"); }
		@Test public void test_32554() { testValid("((any & any) | (any | int))","((int | any) | !any)"); }
		@Test public void test_32555() { testValid("((any & any) | (any | int))","((int | int) | !any)"); }
		@Test public void test_32556() { testValid("((any & any) | (any | int))","((int & int) | !any)"); }
		@Test public void test_32557() { testValid("((any & any) | (any | int))","(!int | !int)"); }
		@Test public void test_32558() { testValid("((any & any) | (any | int))","({any, any} | !int)"); }
		@Test public void test_32559() { testValid("((any & any) | (any | int))","({int, int} | !int)"); }
		@Test public void test_32560() { testValid("((any & any) | (any | int))","((int | any) | !int)"); }
		@Test public void test_32561() { testValid("((any & any) | (any | int))","((any | int) | !int)"); }
		@Test public void test_32562() { testValid("((any & any) | (any | int))","((any & int) | !int)"); }
		@Test public void test_32563() { testValid("((any & any) | (any | int))","((int & int) | !int)"); }
		@Test public void test_32564() { testValid("((any & any) | (any | int))","({int} | {any, any})"); }
		@Test public void test_32565() { testValid("((any & any) | (any | int))","(!any | {any, any})"); }
		@Test public void test_32566() { testValid("((any & any) | (any | int))","(!int | {any, any})"); }
		@Test public void test_32567() { testValid("((any & any) | (any | int))","({any, int} | {any, any})"); }
		@Test public void test_32568() { testValid("((any & any) | (any | int))","((int | any) | {any, any})"); }
		@Test public void test_32569() { testValid("((any & any) | (any | int))","((any & any) | {any, any})"); }
		@Test public void test_32570() { testValid("((any & any) | (any | int))","((any & int) | {any, any})"); }
		@Test public void test_32571() { testValid("((any & any) | (any | int))","(!int | {int, any})"); }
		@Test public void test_32572() { testValid("((any & any) | (any | int))","({any, int} | {int, any})"); }
		@Test public void test_32573() { testValid("((any & any) | (any | int))","((any | any) | {int, any})"); }
		@Test public void test_32574() { testValid("((any & any) | (any | int))","((int | any) | {int, any})"); }
		@Test public void test_32575() { testValid("((any & any) | (any | int))","((any | int) | {int, any})"); }
		@Test public void test_32576() { testValid("((any & any) | (any | int))","((int & any) | {int, any})"); }
		@Test public void test_32577() { testValid("((any & any) | (any | int))","({any} | {any, int})"); }
		@Test public void test_32578() { testValid("((any & any) | (any | int))","(!int | {any, int})"); }
		@Test public void test_32579() { testValid("((any & any) | (any | int))","({any, int} | {any, int})"); }
		@Test public void test_32580() { testValid("((any & any) | (any | int))","((any | any) | {any, int})"); }
		@Test public void test_32581() { testValid("((any & any) | (any | int))","((any | int) | {any, int})"); }
		@Test public void test_32582() { testValid("((any & any) | (any | int))","((int | int) | {any, int})"); }
		@Test public void test_32583() { testValid("((any & any) | (any | int))","((int & any) | {any, int})"); }
		@Test public void test_32584() { testValid("((any & any) | (any | int))","(!any | {int, int})"); }
		@Test public void test_32585() { testValid("((any & any) | (any | int))","(!int | {int, int})"); }
		@Test public void test_32586() { testValid("((any & any) | (any | int))","({any, any} | {int, int})"); }
		@Test public void test_32587() { testValid("((any & any) | (any | int))","({any, int} | {int, int})"); }
		@Test public void test_32588() { testValid("((any & any) | (any | int))","((any | any) | {int, int})"); }
		@Test public void test_32589() { testValid("((any & any) | (any | int))","((int | int) | {int, int})"); }
		@Test public void test_32590() { testValid("((any & any) | (any | int))","((int & any) | {int, int})"); }
		@Test public void test_32591() { testValid("((any & any) | (any | int))","((any & int) | {int, int})"); }
		@Test public void test_32592() { testValid("((any & any) | (any | int))","((int & int) | {int, int})"); }
		@Test public void test_32593() { testValid("((any & any) | (any | int))","({any} | (any | any))"); }
		@Test public void test_32594() { testValid("((any & any) | (any | int))","(!any | (any | any))"); }
		@Test public void test_32595() { testValid("((any & any) | (any | int))","({any, any} | (any | any))"); }
		@Test public void test_32596() { testValid("((any & any) | (any | int))","({any, int} | (any | any))"); }
		@Test public void test_32597() { testValid("((any & any) | (any | int))","({int, int} | (any | any))"); }
		@Test public void test_32598() { testValid("((any & any) | (any | int))","((int | any) | (any | any))"); }
		@Test public void test_32599() { testValid("((any & any) | (any | int))","((any | int) | (any | any))"); }
		@Test public void test_32600() { testValid("((any & any) | (any | int))","((any & int) | (any | any))"); }
		@Test public void test_32601() { testValid("((any & any) | (any | int))","((int & int) | (any | any))"); }
		@Test public void test_32602() { testValid("((any & any) | (any | int))","({any} | (int | any))"); }
		@Test public void test_32603() { testValid("((any & any) | (any | int))","(!int | (int | any))"); }
		@Test public void test_32604() { testValid("((any & any) | (any | int))","({int, any} | (int | any))"); }
		@Test public void test_32605() { testValid("((any & any) | (any | int))","({any, int} | (int | any))"); }
		@Test public void test_32606() { testValid("((any & any) | (any | int))","((int & any) | (int | any))"); }
		@Test public void test_32607() { testValid("((any & any) | (any | int))","((any & int) | (int | any))"); }
		@Test public void test_32608() { testValid("((any & any) | (any | int))","({any} | (any | int))"); }
		@Test public void test_32609() { testValid("((any & any) | (any | int))","({int} | (any | int))"); }
		@Test public void test_32610() { testValid("((any & any) | (any | int))","(!any | (any | int))"); }
		@Test public void test_32611() { testValid("((any & any) | (any | int))","(!int | (any | int))"); }
		@Test public void test_32612() { testValid("((any & any) | (any | int))","({any, int} | (any | int))"); }
		@Test public void test_32613() { testValid("((any & any) | (any | int))","({int, int} | (any | int))"); }
		@Test public void test_32614() { testValid("((any & any) | (any | int))","((int | any) | (any | int))"); }
		@Test public void test_32615() { testValid("((any & any) | (any | int))","((any | int) | (any | int))"); }
		@Test public void test_32616() { testValid("((any & any) | (any | int))","((int | int) | (any | int))"); }
		@Test public void test_32617() { testValid("((any & any) | (any | int))","((any & any) | (any | int))"); }
		@Test public void test_32618() { testValid("((any & any) | (any | int))","({int} | (int | int))"); }
		@Test public void test_32619() { testValid("((any & any) | (any | int))","(!any | (int | int))"); }
		@Test public void test_32620() { testValid("((any & any) | (any | int))","(!int | (int | int))"); }
		@Test public void test_32621() { testValid("((any & any) | (any | int))","({int, any} | (int | int))"); }
		@Test public void test_32622() { testValid("((any & any) | (any | int))","({any, int} | (int | int))"); }
		@Test public void test_32623() { testValid("((any & any) | (any | int))","((any | int) | (int | int))"); }
		@Test public void test_32624() { testValid("((any & any) | (any | int))","((int | int) | (int | int))"); }
		@Test public void test_32625() { testValid("((any & any) | (any | int))","((any & any) | (int | int))"); }
		@Test public void test_32626() { testValid("((any & any) | (any | int))","((int & any) | (int | int))"); }
		@Test public void test_32627() { testValid("((any & any) | (any | int))","((int & int) | (int | int))"); }
		@Test public void test_32628() { testValid("((any & any) | (any | int))","(!any | (any & any))"); }
		@Test public void test_32629() { testValid("((any & any) | (any | int))","(!int | (any & any))"); }
		@Test public void test_32630() { testValid("((any & any) | (any | int))","({any, any} | (any & any))"); }
		@Test public void test_32631() { testValid("((any & any) | (any | int))","({int, any} | (any & any))"); }
		@Test public void test_32632() { testValid("((any & any) | (any | int))","({any, int} | (any & any))"); }
		@Test public void test_32633() { testValid("((any & any) | (any | int))","({int, int} | (any & any))"); }
		@Test public void test_32634() { testValid("((any & any) | (any | int))","((int | any) | (any & any))"); }
		@Test public void test_32635() { testValid("((any & any) | (any | int))","((int | int) | (any & any))"); }
		@Test public void test_32636() { testValid("((any & any) | (any | int))","((int & any) | (any & any))"); }
		@Test public void test_32637() { testValid("((any & any) | (any | int))","((any & int) | (any & any))"); }
		@Test public void test_32638() { testValid("((any & any) | (any | int))","((int & int) | (any & any))"); }
		@Test public void test_32639() { testValid("((any & any) | (any | int))","({any} | (int & any))"); }
		@Test public void test_32640() { testValid("({int} | (int | int))","{int}"); }
		@Test public void test_32641() { testInvalid("({int} | (int | int))","{any, any}"); }
		@Test public void test_32642() { testInvalid("({int} | (int | int))","{int, int}"); }
		@Test public void test_32643() { testInvalid("({int} | (int | int))","(any | int)"); }
		@Test public void test_32644() { testValid("({int} | (int | int))","(int & any)"); }
		@Test public void test_32645() { testInvalid("({int} | (int | int))","{{any}}"); }
		@Test public void test_32646() { testInvalid("({int} | (int | int))","{{int, any}}"); }
		@Test public void test_32647() { testInvalid("({int} | (int | int))","{{int, int}}"); }
		@Test public void test_32648() { testInvalid("({int} | (int | int))","{(any | int)}"); }
		@Test public void test_32649() { testInvalid("({int} | (int | int))","!{int, any}"); }
		@Test public void test_32650() { testInvalid("({int} | (int | int))","!{int, int}"); }
		@Test public void test_32651() { testValid("({int} | (int | int))","!(any | any)"); }
		@Test public void test_32652() { testValid("({int} | (int | int))","!(any & any)"); }
		@Test public void test_32653() { testInvalid("({int} | (int | int))","!(int & int)"); }
		@Test public void test_32654() { testInvalid("({int} | (int | int))","{{int}, {any}}"); }
		@Test public void test_32655() { testInvalid("({int} | (int | int))","{!int, {any}}"); }
		@Test public void test_32656() { testInvalid("({int} | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_32657() { testInvalid("({int} | (int | int))","{(any | int), {any}}"); }
		@Test public void test_32658() { testInvalid("({int} | (int | int))","{!int, {int}}"); }
		@Test public void test_32659() { testInvalid("({int} | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_32660() { testInvalid("({int} | (int | int))","{(any | any), {int}}"); }
		@Test public void test_32661() { testInvalid("({int} | (int | int))","{(any & any), {int}}"); }
		@Test public void test_32662() { testInvalid("({int} | (int | int))","{(any & int), {int}}"); }
		@Test public void test_32663() { testInvalid("({int} | (int | int))","{{any, any}, !int}"); }
		@Test public void test_32664() { testInvalid("({int} | (int | int))","{{any, int}, !int}"); }
		@Test public void test_32665() { testInvalid("({int} | (int | int))","{(any | any), !int}"); }
		@Test public void test_32666() { testInvalid("({int} | (int | int))","{(int | any), !int}"); }
		@Test public void test_32667() { testInvalid("({int} | (int | int))","{(any & any), !int}"); }
		@Test public void test_32668() { testInvalid("({int} | (int | int))","{(int & any), !int}"); }
		@Test public void test_32669() { testInvalid("({int} | (int | int))","{(int & int), !int}"); }
		@Test public void test_32670() { testInvalid("({int} | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_32671() { testInvalid("({int} | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_32672() { testInvalid("({int} | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_32673() { testInvalid("({int} | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_32674() { testInvalid("({int} | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_32675() { testInvalid("({int} | (int | int))","{!int, {int, any}}"); }
		@Test public void test_32676() { testInvalid("({int} | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_32677() { testInvalid("({int} | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_32678() { testInvalid("({int} | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_32679() { testInvalid("({int} | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_32680() { testInvalid("({int} | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_32681() { testInvalid("({int} | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_32682() { testInvalid("({int} | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_32683() { testInvalid("({int} | (int | int))","{!int, {int, int}}"); }
		@Test public void test_32684() { testInvalid("({int} | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_32685() { testInvalid("({int} | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_32686() { testInvalid("({int} | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_32687() { testInvalid("({int} | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_32688() { testInvalid("({int} | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_32689() { testInvalid("({int} | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_32690() { testInvalid("({int} | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_32691() { testInvalid("({int} | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_32692() { testInvalid("({int} | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_32693() { testInvalid("({int} | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_32694() { testInvalid("({int} | (int | int))","{!int, (int | any)}"); }
		@Test public void test_32695() { testInvalid("({int} | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_32696() { testInvalid("({int} | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_32697() { testInvalid("({int} | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_32698() { testInvalid("({int} | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_32699() { testInvalid("({int} | (int | int))","{!int, (any | int)}"); }
		@Test public void test_32700() { testInvalid("({int} | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_32701() { testInvalid("({int} | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_32702() { testInvalid("({int} | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_32703() { testInvalid("({int} | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_32704() { testInvalid("({int} | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_32705() { testInvalid("({int} | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_32706() { testInvalid("({int} | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_32707() { testInvalid("({int} | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_32708() { testInvalid("({int} | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_32709() { testInvalid("({int} | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_32710() { testInvalid("({int} | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_32711() { testInvalid("({int} | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_32712() { testInvalid("({int} | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_32713() { testInvalid("({int} | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_32714() { testInvalid("({int} | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_32715() { testInvalid("({int} | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_32716() { testInvalid("({int} | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_32717() { testInvalid("({int} | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_32718() { testInvalid("({int} | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_32719() { testInvalid("({int} | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_32720() { testInvalid("({int} | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_32721() { testInvalid("({int} | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_32722() { testInvalid("({int} | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_32723() { testInvalid("({int} | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_32724() { testInvalid("({int} | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_32725() { testInvalid("({int} | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_32726() { testInvalid("({int} | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_32727() { testInvalid("({int} | (int | int))","(!int | {any})"); }
		@Test public void test_32728() { testInvalid("({int} | (int | int))","({any, any} | {any})"); }
		@Test public void test_32729() { testInvalid("({int} | (int | int))","((any | any) | {any})"); }
		@Test public void test_32730() { testInvalid("({int} | (int | int))","((int | any) | {any})"); }
		@Test public void test_32731() { testInvalid("({int} | (int | int))","((any & any) | {any})"); }
		@Test public void test_32732() { testInvalid("({int} | (int | int))","((int & any) | {any})"); }
		@Test public void test_32733() { testInvalid("({int} | (int | int))","((any & int) | {any})"); }
		@Test public void test_32734() { testValid("({int} | (int | int))","({int} | {int})"); }
		@Test public void test_32735() { testValid("({int} | (int | int))","(!any | {int})"); }
		@Test public void test_32736() { testInvalid("({int} | (int | int))","(!int | {int})"); }
		@Test public void test_32737() { testInvalid("({int} | (int | int))","({any, int} | {int})"); }
		@Test public void test_32738() { testValid("({int} | (int | int))","((int & any) | {int})"); }
		@Test public void test_32739() { testValid("({int} | (int | int))","((any & int) | {int})"); }
		@Test public void test_32740() { testValid("({int} | (int | int))","((int & int) | {int})"); }
		@Test public void test_32741() { testInvalid("({int} | (int | int))","({any} | !any)"); }
		@Test public void test_32742() { testValid("({int} | (int | int))","({int} | !any)"); }
		@Test public void test_32743() { testInvalid("({int} | (int | int))","({any, any} | !any)"); }
		@Test public void test_32744() { testInvalid("({int} | (int | int))","({int, int} | !any)"); }
		@Test public void test_32745() { testInvalid("({int} | (int | int))","((any | any) | !any)"); }
		@Test public void test_32746() { testInvalid("({int} | (int | int))","((int | any) | !any)"); }
		@Test public void test_32747() { testValid("({int} | (int | int))","((int | int) | !any)"); }
		@Test public void test_32748() { testValid("({int} | (int | int))","((int & int) | !any)"); }
		@Test public void test_32749() { testInvalid("({int} | (int | int))","(!int | !int)"); }
		@Test public void test_32750() { testInvalid("({int} | (int | int))","({any, any} | !int)"); }
		@Test public void test_32751() { testInvalid("({int} | (int | int))","({int, int} | !int)"); }
		@Test public void test_32752() { testInvalid("({int} | (int | int))","((int | any) | !int)"); }
		@Test public void test_32753() { testInvalid("({int} | (int | int))","((any | int) | !int)"); }
		@Test public void test_32754() { testInvalid("({int} | (int | int))","((any & int) | !int)"); }
		@Test public void test_32755() { testInvalid("({int} | (int | int))","((int & int) | !int)"); }
		@Test public void test_32756() { testInvalid("({int} | (int | int))","({int} | {any, any})"); }
		@Test public void test_32757() { testInvalid("({int} | (int | int))","(!any | {any, any})"); }
		@Test public void test_32758() { testInvalid("({int} | (int | int))","(!int | {any, any})"); }
		@Test public void test_32759() { testInvalid("({int} | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_32760() { testInvalid("({int} | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_32761() { testInvalid("({int} | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_32762() { testInvalid("({int} | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_32763() { testInvalid("({int} | (int | int))","(!int | {int, any})"); }
		@Test public void test_32764() { testInvalid("({int} | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_32765() { testInvalid("({int} | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_32766() { testInvalid("({int} | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_32767() { testInvalid("({int} | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_32768() { testInvalid("({int} | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_32769() { testInvalid("({int} | (int | int))","({any} | {any, int})"); }
		@Test public void test_32770() { testInvalid("({int} | (int | int))","(!int | {any, int})"); }
		@Test public void test_32771() { testInvalid("({int} | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_32772() { testInvalid("({int} | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_32773() { testInvalid("({int} | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_32774() { testInvalid("({int} | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_32775() { testInvalid("({int} | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_32776() { testInvalid("({int} | (int | int))","(!any | {int, int})"); }
		@Test public void test_32777() { testInvalid("({int} | (int | int))","(!int | {int, int})"); }
		@Test public void test_32778() { testInvalid("({int} | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_32779() { testInvalid("({int} | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_32780() { testInvalid("({int} | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_32781() { testInvalid("({int} | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_32782() { testInvalid("({int} | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_32783() { testInvalid("({int} | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_32784() { testInvalid("({int} | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_32785() { testInvalid("({int} | (int | int))","({any} | (any | any))"); }
		@Test public void test_32786() { testInvalid("({int} | (int | int))","(!any | (any | any))"); }
		@Test public void test_32787() { testInvalid("({int} | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_32788() { testInvalid("({int} | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_32789() { testInvalid("({int} | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_32790() { testInvalid("({int} | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_32791() { testInvalid("({int} | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_32792() { testInvalid("({int} | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_32793() { testInvalid("({int} | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_32794() { testInvalid("({int} | (int | int))","({any} | (int | any))"); }
		@Test public void test_32795() { testInvalid("({int} | (int | int))","(!int | (int | any))"); }
		@Test public void test_32796() { testInvalid("({int} | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_32797() { testInvalid("({int} | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_32798() { testInvalid("({int} | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_32799() { testInvalid("({int} | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_32800() { testInvalid("({int} | (int | int))","({any} | (any | int))"); }
		@Test public void test_32801() { testInvalid("({int} | (int | int))","({int} | (any | int))"); }
		@Test public void test_32802() { testInvalid("({int} | (int | int))","(!any | (any | int))"); }
		@Test public void test_32803() { testInvalid("({int} | (int | int))","(!int | (any | int))"); }
		@Test public void test_32804() { testInvalid("({int} | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_32805() { testInvalid("({int} | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_32806() { testInvalid("({int} | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_32807() { testInvalid("({int} | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_32808() { testInvalid("({int} | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_32809() { testInvalid("({int} | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_32810() { testValid("({int} | (int | int))","({int} | (int | int))"); }
		@Test public void test_32811() { testValid("({int} | (int | int))","(!any | (int | int))"); }
		@Test public void test_32812() { testInvalid("({int} | (int | int))","(!int | (int | int))"); }
		@Test public void test_32813() { testInvalid("({int} | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_32814() { testInvalid("({int} | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_32815() { testInvalid("({int} | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_32816() { testValid("({int} | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_32817() { testInvalid("({int} | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_32818() { testValid("({int} | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_32819() { testValid("({int} | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_32820() { testInvalid("({int} | (int | int))","(!any | (any & any))"); }
		@Test public void test_32821() { testInvalid("({int} | (int | int))","(!int | (any & any))"); }
		@Test public void test_32822() { testInvalid("({int} | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_32823() { testInvalid("({int} | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_32824() { testInvalid("({int} | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_32825() { testInvalid("({int} | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_32826() { testInvalid("({int} | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_32827() { testInvalid("({int} | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_32828() { testInvalid("({int} | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_32829() { testInvalid("({int} | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_32830() { testInvalid("({int} | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_32831() { testInvalid("({int} | (int | int))","({any} | (int & any))"); }
		@Test public void test_32832() { testInvalid("(!any | (int | int))","{int}"); }
		@Test public void test_32833() { testInvalid("(!any | (int | int))","{any, any}"); }
		@Test public void test_32834() { testInvalid("(!any | (int | int))","{int, int}"); }
		@Test public void test_32835() { testInvalid("(!any | (int | int))","(any | int)"); }
		@Test public void test_32836() { testValid("(!any | (int | int))","(int & any)"); }
		@Test public void test_32837() { testInvalid("(!any | (int | int))","{{any}}"); }
		@Test public void test_32838() { testInvalid("(!any | (int | int))","{{int, any}}"); }
		@Test public void test_32839() { testInvalid("(!any | (int | int))","{{int, int}}"); }
		@Test public void test_32840() { testInvalid("(!any | (int | int))","{(any | int)}"); }
		@Test public void test_32841() { testInvalid("(!any | (int | int))","!{int, any}"); }
		@Test public void test_32842() { testInvalid("(!any | (int | int))","!{int, int}"); }
		@Test public void test_32843() { testValid("(!any | (int | int))","!(any | any)"); }
		@Test public void test_32844() { testValid("(!any | (int | int))","!(any & any)"); }
		@Test public void test_32845() { testInvalid("(!any | (int | int))","!(int & int)"); }
		@Test public void test_32846() { testInvalid("(!any | (int | int))","{{int}, {any}}"); }
		@Test public void test_32847() { testInvalid("(!any | (int | int))","{!int, {any}}"); }
		@Test public void test_32848() { testInvalid("(!any | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_32849() { testInvalid("(!any | (int | int))","{(any | int), {any}}"); }
		@Test public void test_32850() { testInvalid("(!any | (int | int))","{!int, {int}}"); }
		@Test public void test_32851() { testInvalid("(!any | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_32852() { testInvalid("(!any | (int | int))","{(any | any), {int}}"); }
		@Test public void test_32853() { testInvalid("(!any | (int | int))","{(any & any), {int}}"); }
		@Test public void test_32854() { testInvalid("(!any | (int | int))","{(any & int), {int}}"); }
		@Test public void test_32855() { testInvalid("(!any | (int | int))","{{any, any}, !int}"); }
		@Test public void test_32856() { testInvalid("(!any | (int | int))","{{any, int}, !int}"); }
		@Test public void test_32857() { testInvalid("(!any | (int | int))","{(any | any), !int}"); }
		@Test public void test_32858() { testInvalid("(!any | (int | int))","{(int | any), !int}"); }
		@Test public void test_32859() { testInvalid("(!any | (int | int))","{(any & any), !int}"); }
		@Test public void test_32860() { testInvalid("(!any | (int | int))","{(int & any), !int}"); }
		@Test public void test_32861() { testInvalid("(!any | (int | int))","{(int & int), !int}"); }
		@Test public void test_32862() { testInvalid("(!any | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_32863() { testInvalid("(!any | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_32864() { testInvalid("(!any | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_32865() { testInvalid("(!any | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_32866() { testInvalid("(!any | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_32867() { testInvalid("(!any | (int | int))","{!int, {int, any}}"); }
		@Test public void test_32868() { testInvalid("(!any | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_32869() { testInvalid("(!any | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_32870() { testInvalid("(!any | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_32871() { testInvalid("(!any | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_32872() { testInvalid("(!any | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_32873() { testInvalid("(!any | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_32874() { testInvalid("(!any | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_32875() { testInvalid("(!any | (int | int))","{!int, {int, int}}"); }
		@Test public void test_32876() { testInvalid("(!any | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_32877() { testInvalid("(!any | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_32878() { testInvalid("(!any | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_32879() { testInvalid("(!any | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_32880() { testInvalid("(!any | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_32881() { testInvalid("(!any | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_32882() { testInvalid("(!any | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_32883() { testInvalid("(!any | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_32884() { testInvalid("(!any | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_32885() { testInvalid("(!any | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_32886() { testInvalid("(!any | (int | int))","{!int, (int | any)}"); }
		@Test public void test_32887() { testInvalid("(!any | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_32888() { testInvalid("(!any | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_32889() { testInvalid("(!any | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_32890() { testInvalid("(!any | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_32891() { testInvalid("(!any | (int | int))","{!int, (any | int)}"); }
		@Test public void test_32892() { testInvalid("(!any | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_32893() { testInvalid("(!any | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_32894() { testInvalid("(!any | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_32895() { testInvalid("(!any | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_32896() { testInvalid("(!any | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_32897() { testInvalid("(!any | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_32898() { testInvalid("(!any | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_32899() { testInvalid("(!any | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_32900() { testInvalid("(!any | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_32901() { testInvalid("(!any | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_32902() { testInvalid("(!any | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_32903() { testInvalid("(!any | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_32904() { testInvalid("(!any | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_32905() { testInvalid("(!any | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_32906() { testInvalid("(!any | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_32907() { testInvalid("(!any | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_32908() { testInvalid("(!any | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_32909() { testInvalid("(!any | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_32910() { testInvalid("(!any | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_32911() { testInvalid("(!any | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_32912() { testInvalid("(!any | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_32913() { testInvalid("(!any | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_32914() { testInvalid("(!any | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_32915() { testInvalid("(!any | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_32916() { testInvalid("(!any | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_32917() { testInvalid("(!any | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_32918() { testInvalid("(!any | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_32919() { testInvalid("(!any | (int | int))","(!int | {any})"); }
		@Test public void test_32920() { testInvalid("(!any | (int | int))","({any, any} | {any})"); }
		@Test public void test_32921() { testInvalid("(!any | (int | int))","((any | any) | {any})"); }
		@Test public void test_32922() { testInvalid("(!any | (int | int))","((int | any) | {any})"); }
		@Test public void test_32923() { testInvalid("(!any | (int | int))","((any & any) | {any})"); }
		@Test public void test_32924() { testInvalid("(!any | (int | int))","((int & any) | {any})"); }
		@Test public void test_32925() { testInvalid("(!any | (int | int))","((any & int) | {any})"); }
		@Test public void test_32926() { testInvalid("(!any | (int | int))","({int} | {int})"); }
		@Test public void test_32927() { testInvalid("(!any | (int | int))","(!any | {int})"); }
		@Test public void test_32928() { testInvalid("(!any | (int | int))","(!int | {int})"); }
		@Test public void test_32929() { testInvalid("(!any | (int | int))","({any, int} | {int})"); }
		@Test public void test_32930() { testInvalid("(!any | (int | int))","((int & any) | {int})"); }
		@Test public void test_32931() { testInvalid("(!any | (int | int))","((any & int) | {int})"); }
		@Test public void test_32932() { testInvalid("(!any | (int | int))","((int & int) | {int})"); }
		@Test public void test_32933() { testInvalid("(!any | (int | int))","({any} | !any)"); }
		@Test public void test_32934() { testInvalid("(!any | (int | int))","({int} | !any)"); }
		@Test public void test_32935() { testInvalid("(!any | (int | int))","({any, any} | !any)"); }
		@Test public void test_32936() { testInvalid("(!any | (int | int))","({int, int} | !any)"); }
		@Test public void test_32937() { testInvalid("(!any | (int | int))","((any | any) | !any)"); }
		@Test public void test_32938() { testInvalid("(!any | (int | int))","((int | any) | !any)"); }
		@Test public void test_32939() { testValid("(!any | (int | int))","((int | int) | !any)"); }
		@Test public void test_32940() { testValid("(!any | (int | int))","((int & int) | !any)"); }
		@Test public void test_32941() { testInvalid("(!any | (int | int))","(!int | !int)"); }
		@Test public void test_32942() { testInvalid("(!any | (int | int))","({any, any} | !int)"); }
		@Test public void test_32943() { testInvalid("(!any | (int | int))","({int, int} | !int)"); }
		@Test public void test_32944() { testInvalid("(!any | (int | int))","((int | any) | !int)"); }
		@Test public void test_32945() { testInvalid("(!any | (int | int))","((any | int) | !int)"); }
		@Test public void test_32946() { testInvalid("(!any | (int | int))","((any & int) | !int)"); }
		@Test public void test_32947() { testInvalid("(!any | (int | int))","((int & int) | !int)"); }
		@Test public void test_32948() { testInvalid("(!any | (int | int))","({int} | {any, any})"); }
		@Test public void test_32949() { testInvalid("(!any | (int | int))","(!any | {any, any})"); }
		@Test public void test_32950() { testInvalid("(!any | (int | int))","(!int | {any, any})"); }
		@Test public void test_32951() { testInvalid("(!any | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_32952() { testInvalid("(!any | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_32953() { testInvalid("(!any | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_32954() { testInvalid("(!any | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_32955() { testInvalid("(!any | (int | int))","(!int | {int, any})"); }
		@Test public void test_32956() { testInvalid("(!any | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_32957() { testInvalid("(!any | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_32958() { testInvalid("(!any | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_32959() { testInvalid("(!any | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_32960() { testInvalid("(!any | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_32961() { testInvalid("(!any | (int | int))","({any} | {any, int})"); }
		@Test public void test_32962() { testInvalid("(!any | (int | int))","(!int | {any, int})"); }
		@Test public void test_32963() { testInvalid("(!any | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_32964() { testInvalid("(!any | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_32965() { testInvalid("(!any | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_32966() { testInvalid("(!any | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_32967() { testInvalid("(!any | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_32968() { testInvalid("(!any | (int | int))","(!any | {int, int})"); }
		@Test public void test_32969() { testInvalid("(!any | (int | int))","(!int | {int, int})"); }
		@Test public void test_32970() { testInvalid("(!any | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_32971() { testInvalid("(!any | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_32972() { testInvalid("(!any | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_32973() { testInvalid("(!any | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_32974() { testInvalid("(!any | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_32975() { testInvalid("(!any | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_32976() { testInvalid("(!any | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_32977() { testInvalid("(!any | (int | int))","({any} | (any | any))"); }
		@Test public void test_32978() { testInvalid("(!any | (int | int))","(!any | (any | any))"); }
		@Test public void test_32979() { testInvalid("(!any | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_32980() { testInvalid("(!any | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_32981() { testInvalid("(!any | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_32982() { testInvalid("(!any | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_32983() { testInvalid("(!any | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_32984() { testInvalid("(!any | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_32985() { testInvalid("(!any | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_32986() { testInvalid("(!any | (int | int))","({any} | (int | any))"); }
		@Test public void test_32987() { testInvalid("(!any | (int | int))","(!int | (int | any))"); }
		@Test public void test_32988() { testInvalid("(!any | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_32989() { testInvalid("(!any | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_32990() { testInvalid("(!any | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_32991() { testInvalid("(!any | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_32992() { testInvalid("(!any | (int | int))","({any} | (any | int))"); }
		@Test public void test_32993() { testInvalid("(!any | (int | int))","({int} | (any | int))"); }
		@Test public void test_32994() { testInvalid("(!any | (int | int))","(!any | (any | int))"); }
		@Test public void test_32995() { testInvalid("(!any | (int | int))","(!int | (any | int))"); }
		@Test public void test_32996() { testInvalid("(!any | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_32997() { testInvalid("(!any | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_32998() { testInvalid("(!any | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_32999() { testInvalid("(!any | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33000() { testInvalid("(!any | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33001() { testInvalid("(!any | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33002() { testInvalid("(!any | (int | int))","({int} | (int | int))"); }
		@Test public void test_33003() { testValid("(!any | (int | int))","(!any | (int | int))"); }
		@Test public void test_33004() { testInvalid("(!any | (int | int))","(!int | (int | int))"); }
		@Test public void test_33005() { testInvalid("(!any | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33006() { testInvalid("(!any | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33007() { testInvalid("(!any | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33008() { testValid("(!any | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33009() { testInvalid("(!any | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33010() { testValid("(!any | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33011() { testValid("(!any | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33012() { testInvalid("(!any | (int | int))","(!any | (any & any))"); }
		@Test public void test_33013() { testInvalid("(!any | (int | int))","(!int | (any & any))"); }
		@Test public void test_33014() { testInvalid("(!any | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33015() { testInvalid("(!any | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33016() { testInvalid("(!any | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33017() { testInvalid("(!any | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33018() { testInvalid("(!any | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33019() { testInvalid("(!any | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33020() { testInvalid("(!any | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33021() { testInvalid("(!any | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33022() { testInvalid("(!any | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33023() { testInvalid("(!any | (int | int))","({any} | (int & any))"); }
		@Test public void test_33024() { testValid("(!int | (int | int))","{int}"); }
		@Test public void test_33025() { testValid("(!int | (int | int))","{any, any}"); }
		@Test public void test_33026() { testValid("(!int | (int | int))","{int, int}"); }
		@Test public void test_33027() { testInvalid("(!int | (int | int))","(any | int)"); }
		@Test public void test_33028() { testValid("(!int | (int | int))","(int & any)"); }
		@Test public void test_33029() { testValid("(!int | (int | int))","{{any}}"); }
		@Test public void test_33030() { testValid("(!int | (int | int))","{{int, any}}"); }
		@Test public void test_33031() { testValid("(!int | (int | int))","{{int, int}}"); }
		@Test public void test_33032() { testValid("(!int | (int | int))","{(any | int)}"); }
		@Test public void test_33033() { testInvalid("(!int | (int | int))","!{int, any}"); }
		@Test public void test_33034() { testInvalid("(!int | (int | int))","!{int, int}"); }
		@Test public void test_33035() { testValid("(!int | (int | int))","!(any | any)"); }
		@Test public void test_33036() { testValid("(!int | (int | int))","!(any & any)"); }
		@Test public void test_33037() { testValid("(!int | (int | int))","!(int & int)"); }
		@Test public void test_33038() { testValid("(!int | (int | int))","{{int}, {any}}"); }
		@Test public void test_33039() { testValid("(!int | (int | int))","{!int, {any}}"); }
		@Test public void test_33040() { testValid("(!int | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_33041() { testValid("(!int | (int | int))","{(any | int), {any}}"); }
		@Test public void test_33042() { testValid("(!int | (int | int))","{!int, {int}}"); }
		@Test public void test_33043() { testValid("(!int | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_33044() { testValid("(!int | (int | int))","{(any | any), {int}}"); }
		@Test public void test_33045() { testValid("(!int | (int | int))","{(any & any), {int}}"); }
		@Test public void test_33046() { testValid("(!int | (int | int))","{(any & int), {int}}"); }
		@Test public void test_33047() { testValid("(!int | (int | int))","{{any, any}, !int}"); }
		@Test public void test_33048() { testValid("(!int | (int | int))","{{any, int}, !int}"); }
		@Test public void test_33049() { testValid("(!int | (int | int))","{(any | any), !int}"); }
		@Test public void test_33050() { testValid("(!int | (int | int))","{(int | any), !int}"); }
		@Test public void test_33051() { testValid("(!int | (int | int))","{(any & any), !int}"); }
		@Test public void test_33052() { testValid("(!int | (int | int))","{(int & any), !int}"); }
		@Test public void test_33053() { testValid("(!int | (int | int))","{(int & int), !int}"); }
		@Test public void test_33054() { testValid("(!int | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_33055() { testValid("(!int | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_33056() { testValid("(!int | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_33057() { testValid("(!int | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_33058() { testValid("(!int | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_33059() { testValid("(!int | (int | int))","{!int, {int, any}}"); }
		@Test public void test_33060() { testValid("(!int | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_33061() { testValid("(!int | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_33062() { testValid("(!int | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_33063() { testValid("(!int | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_33064() { testValid("(!int | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_33065() { testValid("(!int | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_33066() { testValid("(!int | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_33067() { testValid("(!int | (int | int))","{!int, {int, int}}"); }
		@Test public void test_33068() { testValid("(!int | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_33069() { testValid("(!int | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_33070() { testValid("(!int | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_33071() { testValid("(!int | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_33072() { testValid("(!int | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_33073() { testValid("(!int | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_33074() { testValid("(!int | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_33075() { testValid("(!int | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_33076() { testValid("(!int | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_33077() { testValid("(!int | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_33078() { testValid("(!int | (int | int))","{!int, (int | any)}"); }
		@Test public void test_33079() { testValid("(!int | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_33080() { testValid("(!int | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_33081() { testValid("(!int | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_33082() { testValid("(!int | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_33083() { testValid("(!int | (int | int))","{!int, (any | int)}"); }
		@Test public void test_33084() { testValid("(!int | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_33085() { testValid("(!int | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_33086() { testValid("(!int | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_33087() { testValid("(!int | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_33088() { testValid("(!int | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_33089() { testValid("(!int | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_33090() { testValid("(!int | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_33091() { testValid("(!int | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_33092() { testValid("(!int | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_33093() { testValid("(!int | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_33094() { testValid("(!int | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_33095() { testValid("(!int | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_33096() { testValid("(!int | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_33097() { testValid("(!int | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_33098() { testValid("(!int | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_33099() { testValid("(!int | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_33100() { testValid("(!int | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_33101() { testValid("(!int | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_33102() { testValid("(!int | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_33103() { testValid("(!int | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_33104() { testValid("(!int | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_33105() { testValid("(!int | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_33106() { testValid("(!int | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_33107() { testValid("(!int | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_33108() { testValid("(!int | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_33109() { testValid("(!int | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_33110() { testValid("(!int | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_33111() { testValid("(!int | (int | int))","(!int | {any})"); }
		@Test public void test_33112() { testValid("(!int | (int | int))","({any, any} | {any})"); }
		@Test public void test_33113() { testInvalid("(!int | (int | int))","((any | any) | {any})"); }
		@Test public void test_33114() { testInvalid("(!int | (int | int))","((int | any) | {any})"); }
		@Test public void test_33115() { testInvalid("(!int | (int | int))","((any & any) | {any})"); }
		@Test public void test_33116() { testValid("(!int | (int | int))","((int & any) | {any})"); }
		@Test public void test_33117() { testValid("(!int | (int | int))","((any & int) | {any})"); }
		@Test public void test_33118() { testValid("(!int | (int | int))","({int} | {int})"); }
		@Test public void test_33119() { testValid("(!int | (int | int))","(!any | {int})"); }
		@Test public void test_33120() { testValid("(!int | (int | int))","(!int | {int})"); }
		@Test public void test_33121() { testValid("(!int | (int | int))","({any, int} | {int})"); }
		@Test public void test_33122() { testValid("(!int | (int | int))","((int & any) | {int})"); }
		@Test public void test_33123() { testValid("(!int | (int | int))","((any & int) | {int})"); }
		@Test public void test_33124() { testValid("(!int | (int | int))","((int & int) | {int})"); }
		@Test public void test_33125() { testValid("(!int | (int | int))","({any} | !any)"); }
		@Test public void test_33126() { testValid("(!int | (int | int))","({int} | !any)"); }
		@Test public void test_33127() { testValid("(!int | (int | int))","({any, any} | !any)"); }
		@Test public void test_33128() { testValid("(!int | (int | int))","({int, int} | !any)"); }
		@Test public void test_33129() { testInvalid("(!int | (int | int))","((any | any) | !any)"); }
		@Test public void test_33130() { testInvalid("(!int | (int | int))","((int | any) | !any)"); }
		@Test public void test_33131() { testValid("(!int | (int | int))","((int | int) | !any)"); }
		@Test public void test_33132() { testValid("(!int | (int | int))","((int & int) | !any)"); }
		@Test public void test_33133() { testValid("(!int | (int | int))","(!int | !int)"); }
		@Test public void test_33134() { testValid("(!int | (int | int))","({any, any} | !int)"); }
		@Test public void test_33135() { testValid("(!int | (int | int))","({int, int} | !int)"); }
		@Test public void test_33136() { testInvalid("(!int | (int | int))","((int | any) | !int)"); }
		@Test public void test_33137() { testInvalid("(!int | (int | int))","((any | int) | !int)"); }
		@Test public void test_33138() { testValid("(!int | (int | int))","((any & int) | !int)"); }
		@Test public void test_33139() { testValid("(!int | (int | int))","((int & int) | !int)"); }
		@Test public void test_33140() { testValid("(!int | (int | int))","({int} | {any, any})"); }
		@Test public void test_33141() { testValid("(!int | (int | int))","(!any | {any, any})"); }
		@Test public void test_33142() { testValid("(!int | (int | int))","(!int | {any, any})"); }
		@Test public void test_33143() { testValid("(!int | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_33144() { testInvalid("(!int | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_33145() { testInvalid("(!int | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_33146() { testValid("(!int | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_33147() { testValid("(!int | (int | int))","(!int | {int, any})"); }
		@Test public void test_33148() { testValid("(!int | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_33149() { testInvalid("(!int | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_33150() { testInvalid("(!int | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_33151() { testInvalid("(!int | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_33152() { testValid("(!int | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_33153() { testValid("(!int | (int | int))","({any} | {any, int})"); }
		@Test public void test_33154() { testValid("(!int | (int | int))","(!int | {any, int})"); }
		@Test public void test_33155() { testValid("(!int | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_33156() { testInvalid("(!int | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_33157() { testInvalid("(!int | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_33158() { testValid("(!int | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_33159() { testValid("(!int | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_33160() { testValid("(!int | (int | int))","(!any | {int, int})"); }
		@Test public void test_33161() { testValid("(!int | (int | int))","(!int | {int, int})"); }
		@Test public void test_33162() { testValid("(!int | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_33163() { testValid("(!int | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_33164() { testInvalid("(!int | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_33165() { testValid("(!int | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_33166() { testValid("(!int | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_33167() { testValid("(!int | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_33168() { testValid("(!int | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_33169() { testInvalid("(!int | (int | int))","({any} | (any | any))"); }
		@Test public void test_33170() { testInvalid("(!int | (int | int))","(!any | (any | any))"); }
		@Test public void test_33171() { testInvalid("(!int | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_33172() { testInvalid("(!int | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_33173() { testInvalid("(!int | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_33174() { testInvalid("(!int | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_33175() { testInvalid("(!int | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_33176() { testInvalid("(!int | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_33177() { testInvalid("(!int | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_33178() { testInvalid("(!int | (int | int))","({any} | (int | any))"); }
		@Test public void test_33179() { testInvalid("(!int | (int | int))","(!int | (int | any))"); }
		@Test public void test_33180() { testInvalid("(!int | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_33181() { testInvalid("(!int | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_33182() { testInvalid("(!int | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_33183() { testInvalid("(!int | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_33184() { testInvalid("(!int | (int | int))","({any} | (any | int))"); }
		@Test public void test_33185() { testInvalid("(!int | (int | int))","({int} | (any | int))"); }
		@Test public void test_33186() { testInvalid("(!int | (int | int))","(!any | (any | int))"); }
		@Test public void test_33187() { testInvalid("(!int | (int | int))","(!int | (any | int))"); }
		@Test public void test_33188() { testInvalid("(!int | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_33189() { testInvalid("(!int | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_33190() { testInvalid("(!int | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_33191() { testInvalid("(!int | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33192() { testInvalid("(!int | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33193() { testInvalid("(!int | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33194() { testValid("(!int | (int | int))","({int} | (int | int))"); }
		@Test public void test_33195() { testValid("(!int | (int | int))","(!any | (int | int))"); }
		@Test public void test_33196() { testValid("(!int | (int | int))","(!int | (int | int))"); }
		@Test public void test_33197() { testValid("(!int | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33198() { testValid("(!int | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33199() { testInvalid("(!int | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33200() { testValid("(!int | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33201() { testInvalid("(!int | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33202() { testValid("(!int | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33203() { testValid("(!int | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33204() { testInvalid("(!int | (int | int))","(!any | (any & any))"); }
		@Test public void test_33205() { testInvalid("(!int | (int | int))","(!int | (any & any))"); }
		@Test public void test_33206() { testInvalid("(!int | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33207() { testInvalid("(!int | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33208() { testInvalid("(!int | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33209() { testInvalid("(!int | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33210() { testInvalid("(!int | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33211() { testInvalid("(!int | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33212() { testInvalid("(!int | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33213() { testInvalid("(!int | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33214() { testInvalid("(!int | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33215() { testValid("(!int | (int | int))","({any} | (int & any))"); }
		@Test public void test_33216() { testInvalid("({int, any} | (int | int))","{int}"); }
		@Test public void test_33217() { testInvalid("({int, any} | (int | int))","{any, any}"); }
		@Test public void test_33218() { testValid("({int, any} | (int | int))","{int, int}"); }
		@Test public void test_33219() { testInvalid("({int, any} | (int | int))","(any | int)"); }
		@Test public void test_33220() { testValid("({int, any} | (int | int))","(int & any)"); }
		@Test public void test_33221() { testInvalid("({int, any} | (int | int))","{{any}}"); }
		@Test public void test_33222() { testInvalid("({int, any} | (int | int))","{{int, any}}"); }
		@Test public void test_33223() { testInvalid("({int, any} | (int | int))","{{int, int}}"); }
		@Test public void test_33224() { testInvalid("({int, any} | (int | int))","{(any | int)}"); }
		@Test public void test_33225() { testInvalid("({int, any} | (int | int))","!{int, any}"); }
		@Test public void test_33226() { testInvalid("({int, any} | (int | int))","!{int, int}"); }
		@Test public void test_33227() { testValid("({int, any} | (int | int))","!(any | any)"); }
		@Test public void test_33228() { testValid("({int, any} | (int | int))","!(any & any)"); }
		@Test public void test_33229() { testInvalid("({int, any} | (int | int))","!(int & int)"); }
		@Test public void test_33230() { testInvalid("({int, any} | (int | int))","{{int}, {any}}"); }
		@Test public void test_33231() { testInvalid("({int, any} | (int | int))","{!int, {any}}"); }
		@Test public void test_33232() { testInvalid("({int, any} | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_33233() { testInvalid("({int, any} | (int | int))","{(any | int), {any}}"); }
		@Test public void test_33234() { testInvalid("({int, any} | (int | int))","{!int, {int}}"); }
		@Test public void test_33235() { testInvalid("({int, any} | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_33236() { testInvalid("({int, any} | (int | int))","{(any | any), {int}}"); }
		@Test public void test_33237() { testInvalid("({int, any} | (int | int))","{(any & any), {int}}"); }
		@Test public void test_33238() { testValid("({int, any} | (int | int))","{(any & int), {int}}"); }
		@Test public void test_33239() { testInvalid("({int, any} | (int | int))","{{any, any}, !int}"); }
		@Test public void test_33240() { testInvalid("({int, any} | (int | int))","{{any, int}, !int}"); }
		@Test public void test_33241() { testInvalid("({int, any} | (int | int))","{(any | any), !int}"); }
		@Test public void test_33242() { testInvalid("({int, any} | (int | int))","{(int | any), !int}"); }
		@Test public void test_33243() { testInvalid("({int, any} | (int | int))","{(any & any), !int}"); }
		@Test public void test_33244() { testValid("({int, any} | (int | int))","{(int & any), !int}"); }
		@Test public void test_33245() { testValid("({int, any} | (int | int))","{(int & int), !int}"); }
		@Test public void test_33246() { testInvalid("({int, any} | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_33247() { testInvalid("({int, any} | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_33248() { testInvalid("({int, any} | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_33249() { testInvalid("({int, any} | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_33250() { testInvalid("({int, any} | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_33251() { testInvalid("({int, any} | (int | int))","{!int, {int, any}}"); }
		@Test public void test_33252() { testInvalid("({int, any} | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_33253() { testInvalid("({int, any} | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_33254() { testValid("({int, any} | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_33255() { testInvalid("({int, any} | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_33256() { testInvalid("({int, any} | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_33257() { testValid("({int, any} | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_33258() { testValid("({int, any} | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_33259() { testInvalid("({int, any} | (int | int))","{!int, {int, int}}"); }
		@Test public void test_33260() { testInvalid("({int, any} | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_33261() { testInvalid("({int, any} | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_33262() { testInvalid("({int, any} | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_33263() { testValid("({int, any} | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_33264() { testInvalid("({int, any} | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_33265() { testInvalid("({int, any} | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_33266() { testInvalid("({int, any} | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_33267() { testInvalid("({int, any} | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_33268() { testInvalid("({int, any} | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_33269() { testValid("({int, any} | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_33270() { testInvalid("({int, any} | (int | int))","{!int, (int | any)}"); }
		@Test public void test_33271() { testInvalid("({int, any} | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_33272() { testInvalid("({int, any} | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_33273() { testValid("({int, any} | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_33274() { testInvalid("({int, any} | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_33275() { testInvalid("({int, any} | (int | int))","{!int, (any | int)}"); }
		@Test public void test_33276() { testInvalid("({int, any} | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_33277() { testInvalid("({int, any} | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_33278() { testValid("({int, any} | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_33279() { testInvalid("({int, any} | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_33280() { testInvalid("({int, any} | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_33281() { testInvalid("({int, any} | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_33282() { testInvalid("({int, any} | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_33283() { testInvalid("({int, any} | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_33284() { testInvalid("({int, any} | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_33285() { testInvalid("({int, any} | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_33286() { testInvalid("({int, any} | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_33287() { testValid("({int, any} | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_33288() { testInvalid("({int, any} | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_33289() { testInvalid("({int, any} | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_33290() { testInvalid("({int, any} | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_33291() { testInvalid("({int, any} | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_33292() { testInvalid("({int, any} | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_33293() { testInvalid("({int, any} | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_33294() { testValid("({int, any} | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_33295() { testValid("({int, any} | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_33296() { testInvalid("({int, any} | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_33297() { testInvalid("({int, any} | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_33298() { testInvalid("({int, any} | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_33299() { testValid("({int, any} | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_33300() { testInvalid("({int, any} | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_33301() { testValid("({int, any} | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_33302() { testValid("({int, any} | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_33303() { testInvalid("({int, any} | (int | int))","(!int | {any})"); }
		@Test public void test_33304() { testInvalid("({int, any} | (int | int))","({any, any} | {any})"); }
		@Test public void test_33305() { testInvalid("({int, any} | (int | int))","((any | any) | {any})"); }
		@Test public void test_33306() { testInvalid("({int, any} | (int | int))","((int | any) | {any})"); }
		@Test public void test_33307() { testInvalid("({int, any} | (int | int))","((any & any) | {any})"); }
		@Test public void test_33308() { testInvalid("({int, any} | (int | int))","((int & any) | {any})"); }
		@Test public void test_33309() { testInvalid("({int, any} | (int | int))","((any & int) | {any})"); }
		@Test public void test_33310() { testInvalid("({int, any} | (int | int))","({int} | {int})"); }
		@Test public void test_33311() { testInvalid("({int, any} | (int | int))","(!any | {int})"); }
		@Test public void test_33312() { testInvalid("({int, any} | (int | int))","(!int | {int})"); }
		@Test public void test_33313() { testInvalid("({int, any} | (int | int))","({any, int} | {int})"); }
		@Test public void test_33314() { testInvalid("({int, any} | (int | int))","((int & any) | {int})"); }
		@Test public void test_33315() { testInvalid("({int, any} | (int | int))","((any & int) | {int})"); }
		@Test public void test_33316() { testInvalid("({int, any} | (int | int))","((int & int) | {int})"); }
		@Test public void test_33317() { testInvalid("({int, any} | (int | int))","({any} | !any)"); }
		@Test public void test_33318() { testInvalid("({int, any} | (int | int))","({int} | !any)"); }
		@Test public void test_33319() { testInvalid("({int, any} | (int | int))","({any, any} | !any)"); }
		@Test public void test_33320() { testValid("({int, any} | (int | int))","({int, int} | !any)"); }
		@Test public void test_33321() { testInvalid("({int, any} | (int | int))","((any | any) | !any)"); }
		@Test public void test_33322() { testInvalid("({int, any} | (int | int))","((int | any) | !any)"); }
		@Test public void test_33323() { testValid("({int, any} | (int | int))","((int | int) | !any)"); }
		@Test public void test_33324() { testValid("({int, any} | (int | int))","((int & int) | !any)"); }
		@Test public void test_33325() { testInvalid("({int, any} | (int | int))","(!int | !int)"); }
		@Test public void test_33326() { testInvalid("({int, any} | (int | int))","({any, any} | !int)"); }
		@Test public void test_33327() { testInvalid("({int, any} | (int | int))","({int, int} | !int)"); }
		@Test public void test_33328() { testInvalid("({int, any} | (int | int))","((int | any) | !int)"); }
		@Test public void test_33329() { testInvalid("({int, any} | (int | int))","((any | int) | !int)"); }
		@Test public void test_33330() { testInvalid("({int, any} | (int | int))","((any & int) | !int)"); }
		@Test public void test_33331() { testInvalid("({int, any} | (int | int))","((int & int) | !int)"); }
		@Test public void test_33332() { testInvalid("({int, any} | (int | int))","({int} | {any, any})"); }
		@Test public void test_33333() { testInvalid("({int, any} | (int | int))","(!any | {any, any})"); }
		@Test public void test_33334() { testInvalid("({int, any} | (int | int))","(!int | {any, any})"); }
		@Test public void test_33335() { testInvalid("({int, any} | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_33336() { testInvalid("({int, any} | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_33337() { testInvalid("({int, any} | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_33338() { testInvalid("({int, any} | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_33339() { testInvalid("({int, any} | (int | int))","(!int | {int, any})"); }
		@Test public void test_33340() { testInvalid("({int, any} | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_33341() { testInvalid("({int, any} | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_33342() { testInvalid("({int, any} | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_33343() { testInvalid("({int, any} | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_33344() { testValid("({int, any} | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_33345() { testInvalid("({int, any} | (int | int))","({any} | {any, int})"); }
		@Test public void test_33346() { testInvalid("({int, any} | (int | int))","(!int | {any, int})"); }
		@Test public void test_33347() { testInvalid("({int, any} | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_33348() { testInvalid("({int, any} | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_33349() { testInvalid("({int, any} | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_33350() { testInvalid("({int, any} | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_33351() { testInvalid("({int, any} | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_33352() { testValid("({int, any} | (int | int))","(!any | {int, int})"); }
		@Test public void test_33353() { testInvalid("({int, any} | (int | int))","(!int | {int, int})"); }
		@Test public void test_33354() { testInvalid("({int, any} | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_33355() { testInvalid("({int, any} | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_33356() { testInvalid("({int, any} | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_33357() { testValid("({int, any} | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_33358() { testValid("({int, any} | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_33359() { testValid("({int, any} | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_33360() { testValid("({int, any} | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_33361() { testInvalid("({int, any} | (int | int))","({any} | (any | any))"); }
		@Test public void test_33362() { testInvalid("({int, any} | (int | int))","(!any | (any | any))"); }
		@Test public void test_33363() { testInvalid("({int, any} | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_33364() { testInvalid("({int, any} | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_33365() { testInvalid("({int, any} | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_33366() { testInvalid("({int, any} | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_33367() { testInvalid("({int, any} | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_33368() { testInvalid("({int, any} | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_33369() { testInvalid("({int, any} | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_33370() { testInvalid("({int, any} | (int | int))","({any} | (int | any))"); }
		@Test public void test_33371() { testInvalid("({int, any} | (int | int))","(!int | (int | any))"); }
		@Test public void test_33372() { testInvalid("({int, any} | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_33373() { testInvalid("({int, any} | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_33374() { testInvalid("({int, any} | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_33375() { testInvalid("({int, any} | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_33376() { testInvalid("({int, any} | (int | int))","({any} | (any | int))"); }
		@Test public void test_33377() { testInvalid("({int, any} | (int | int))","({int} | (any | int))"); }
		@Test public void test_33378() { testInvalid("({int, any} | (int | int))","(!any | (any | int))"); }
		@Test public void test_33379() { testInvalid("({int, any} | (int | int))","(!int | (any | int))"); }
		@Test public void test_33380() { testInvalid("({int, any} | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_33381() { testInvalid("({int, any} | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_33382() { testInvalid("({int, any} | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_33383() { testInvalid("({int, any} | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33384() { testInvalid("({int, any} | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33385() { testInvalid("({int, any} | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33386() { testInvalid("({int, any} | (int | int))","({int} | (int | int))"); }
		@Test public void test_33387() { testValid("({int, any} | (int | int))","(!any | (int | int))"); }
		@Test public void test_33388() { testInvalid("({int, any} | (int | int))","(!int | (int | int))"); }
		@Test public void test_33389() { testValid("({int, any} | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33390() { testInvalid("({int, any} | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33391() { testInvalid("({int, any} | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33392() { testValid("({int, any} | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33393() { testInvalid("({int, any} | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33394() { testValid("({int, any} | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33395() { testValid("({int, any} | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33396() { testInvalid("({int, any} | (int | int))","(!any | (any & any))"); }
		@Test public void test_33397() { testInvalid("({int, any} | (int | int))","(!int | (any & any))"); }
		@Test public void test_33398() { testInvalid("({int, any} | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33399() { testInvalid("({int, any} | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33400() { testInvalid("({int, any} | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33401() { testInvalid("({int, any} | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33402() { testInvalid("({int, any} | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33403() { testInvalid("({int, any} | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33404() { testInvalid("({int, any} | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33405() { testInvalid("({int, any} | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33406() { testInvalid("({int, any} | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33407() { testInvalid("({int, any} | (int | int))","({any} | (int & any))"); }
		@Test public void test_33408() { testInvalid("({any, int} | (int | int))","{int}"); }
		@Test public void test_33409() { testInvalid("({any, int} | (int | int))","{any, any}"); }
		@Test public void test_33410() { testValid("({any, int} | (int | int))","{int, int}"); }
		@Test public void test_33411() { testInvalid("({any, int} | (int | int))","(any | int)"); }
		@Test public void test_33412() { testValid("({any, int} | (int | int))","(int & any)"); }
		@Test public void test_33413() { testInvalid("({any, int} | (int | int))","{{any}}"); }
		@Test public void test_33414() { testInvalid("({any, int} | (int | int))","{{int, any}}"); }
		@Test public void test_33415() { testInvalid("({any, int} | (int | int))","{{int, int}}"); }
		@Test public void test_33416() { testInvalid("({any, int} | (int | int))","{(any | int)}"); }
		@Test public void test_33417() { testInvalid("({any, int} | (int | int))","!{int, any}"); }
		@Test public void test_33418() { testInvalid("({any, int} | (int | int))","!{int, int}"); }
		@Test public void test_33419() { testValid("({any, int} | (int | int))","!(any | any)"); }
		@Test public void test_33420() { testValid("({any, int} | (int | int))","!(any & any)"); }
		@Test public void test_33421() { testInvalid("({any, int} | (int | int))","!(int & int)"); }
		@Test public void test_33422() { testInvalid("({any, int} | (int | int))","{{int}, {any}}"); }
		@Test public void test_33423() { testInvalid("({any, int} | (int | int))","{!int, {any}}"); }
		@Test public void test_33424() { testInvalid("({any, int} | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_33425() { testInvalid("({any, int} | (int | int))","{(any | int), {any}}"); }
		@Test public void test_33426() { testInvalid("({any, int} | (int | int))","{!int, {int}}"); }
		@Test public void test_33427() { testInvalid("({any, int} | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_33428() { testInvalid("({any, int} | (int | int))","{(any | any), {int}}"); }
		@Test public void test_33429() { testInvalid("({any, int} | (int | int))","{(any & any), {int}}"); }
		@Test public void test_33430() { testInvalid("({any, int} | (int | int))","{(any & int), {int}}"); }
		@Test public void test_33431() { testInvalid("({any, int} | (int | int))","{{any, any}, !int}"); }
		@Test public void test_33432() { testInvalid("({any, int} | (int | int))","{{any, int}, !int}"); }
		@Test public void test_33433() { testInvalid("({any, int} | (int | int))","{(any | any), !int}"); }
		@Test public void test_33434() { testInvalid("({any, int} | (int | int))","{(int | any), !int}"); }
		@Test public void test_33435() { testInvalid("({any, int} | (int | int))","{(any & any), !int}"); }
		@Test public void test_33436() { testInvalid("({any, int} | (int | int))","{(int & any), !int}"); }
		@Test public void test_33437() { testInvalid("({any, int} | (int | int))","{(int & int), !int}"); }
		@Test public void test_33438() { testInvalid("({any, int} | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_33439() { testInvalid("({any, int} | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_33440() { testInvalid("({any, int} | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_33441() { testInvalid("({any, int} | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_33442() { testInvalid("({any, int} | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_33443() { testInvalid("({any, int} | (int | int))","{!int, {int, any}}"); }
		@Test public void test_33444() { testInvalid("({any, int} | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_33445() { testInvalid("({any, int} | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_33446() { testInvalid("({any, int} | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_33447() { testInvalid("({any, int} | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_33448() { testInvalid("({any, int} | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_33449() { testInvalid("({any, int} | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_33450() { testInvalid("({any, int} | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_33451() { testInvalid("({any, int} | (int | int))","{!int, {int, int}}"); }
		@Test public void test_33452() { testInvalid("({any, int} | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_33453() { testInvalid("({any, int} | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_33454() { testInvalid("({any, int} | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_33455() { testInvalid("({any, int} | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_33456() { testInvalid("({any, int} | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_33457() { testInvalid("({any, int} | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_33458() { testInvalid("({any, int} | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_33459() { testInvalid("({any, int} | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_33460() { testInvalid("({any, int} | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_33461() { testInvalid("({any, int} | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_33462() { testInvalid("({any, int} | (int | int))","{!int, (int | any)}"); }
		@Test public void test_33463() { testInvalid("({any, int} | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_33464() { testInvalid("({any, int} | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_33465() { testInvalid("({any, int} | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_33466() { testInvalid("({any, int} | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_33467() { testInvalid("({any, int} | (int | int))","{!int, (any | int)}"); }
		@Test public void test_33468() { testInvalid("({any, int} | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_33469() { testInvalid("({any, int} | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_33470() { testInvalid("({any, int} | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_33471() { testValid("({any, int} | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_33472() { testValid("({any, int} | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_33473() { testValid("({any, int} | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_33474() { testInvalid("({any, int} | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_33475() { testInvalid("({any, int} | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_33476() { testInvalid("({any, int} | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_33477() { testInvalid("({any, int} | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_33478() { testInvalid("({any, int} | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_33479() { testInvalid("({any, int} | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_33480() { testValid("({any, int} | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_33481() { testValid("({any, int} | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_33482() { testValid("({any, int} | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_33483() { testValid("({any, int} | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_33484() { testValid("({any, int} | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_33485() { testValid("({any, int} | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_33486() { testValid("({any, int} | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_33487() { testValid("({any, int} | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_33488() { testValid("({any, int} | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_33489() { testValid("({any, int} | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_33490() { testValid("({any, int} | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_33491() { testValid("({any, int} | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_33492() { testValid("({any, int} | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_33493() { testValid("({any, int} | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_33494() { testValid("({any, int} | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_33495() { testInvalid("({any, int} | (int | int))","(!int | {any})"); }
		@Test public void test_33496() { testInvalid("({any, int} | (int | int))","({any, any} | {any})"); }
		@Test public void test_33497() { testInvalid("({any, int} | (int | int))","((any | any) | {any})"); }
		@Test public void test_33498() { testInvalid("({any, int} | (int | int))","((int | any) | {any})"); }
		@Test public void test_33499() { testInvalid("({any, int} | (int | int))","((any & any) | {any})"); }
		@Test public void test_33500() { testInvalid("({any, int} | (int | int))","((int & any) | {any})"); }
		@Test public void test_33501() { testInvalid("({any, int} | (int | int))","((any & int) | {any})"); }
		@Test public void test_33502() { testInvalid("({any, int} | (int | int))","({int} | {int})"); }
		@Test public void test_33503() { testInvalid("({any, int} | (int | int))","(!any | {int})"); }
		@Test public void test_33504() { testInvalid("({any, int} | (int | int))","(!int | {int})"); }
		@Test public void test_33505() { testInvalid("({any, int} | (int | int))","({any, int} | {int})"); }
		@Test public void test_33506() { testInvalid("({any, int} | (int | int))","((int & any) | {int})"); }
		@Test public void test_33507() { testInvalid("({any, int} | (int | int))","((any & int) | {int})"); }
		@Test public void test_33508() { testInvalid("({any, int} | (int | int))","((int & int) | {int})"); }
		@Test public void test_33509() { testInvalid("({any, int} | (int | int))","({any} | !any)"); }
		@Test public void test_33510() { testInvalid("({any, int} | (int | int))","({int} | !any)"); }
		@Test public void test_33511() { testInvalid("({any, int} | (int | int))","({any, any} | !any)"); }
		@Test public void test_33512() { testValid("({any, int} | (int | int))","({int, int} | !any)"); }
		@Test public void test_33513() { testInvalid("({any, int} | (int | int))","((any | any) | !any)"); }
		@Test public void test_33514() { testInvalid("({any, int} | (int | int))","((int | any) | !any)"); }
		@Test public void test_33515() { testValid("({any, int} | (int | int))","((int | int) | !any)"); }
		@Test public void test_33516() { testValid("({any, int} | (int | int))","((int & int) | !any)"); }
		@Test public void test_33517() { testInvalid("({any, int} | (int | int))","(!int | !int)"); }
		@Test public void test_33518() { testInvalid("({any, int} | (int | int))","({any, any} | !int)"); }
		@Test public void test_33519() { testInvalid("({any, int} | (int | int))","({int, int} | !int)"); }
		@Test public void test_33520() { testInvalid("({any, int} | (int | int))","((int | any) | !int)"); }
		@Test public void test_33521() { testInvalid("({any, int} | (int | int))","((any | int) | !int)"); }
		@Test public void test_33522() { testInvalid("({any, int} | (int | int))","((any & int) | !int)"); }
		@Test public void test_33523() { testInvalid("({any, int} | (int | int))","((int & int) | !int)"); }
		@Test public void test_33524() { testInvalid("({any, int} | (int | int))","({int} | {any, any})"); }
		@Test public void test_33525() { testInvalid("({any, int} | (int | int))","(!any | {any, any})"); }
		@Test public void test_33526() { testInvalid("({any, int} | (int | int))","(!int | {any, any})"); }
		@Test public void test_33527() { testInvalid("({any, int} | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_33528() { testInvalid("({any, int} | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_33529() { testInvalid("({any, int} | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_33530() { testInvalid("({any, int} | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_33531() { testInvalid("({any, int} | (int | int))","(!int | {int, any})"); }
		@Test public void test_33532() { testInvalid("({any, int} | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_33533() { testInvalid("({any, int} | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_33534() { testInvalid("({any, int} | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_33535() { testInvalid("({any, int} | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_33536() { testInvalid("({any, int} | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_33537() { testInvalid("({any, int} | (int | int))","({any} | {any, int})"); }
		@Test public void test_33538() { testInvalid("({any, int} | (int | int))","(!int | {any, int})"); }
		@Test public void test_33539() { testValid("({any, int} | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_33540() { testInvalid("({any, int} | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_33541() { testInvalid("({any, int} | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_33542() { testValid("({any, int} | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_33543() { testValid("({any, int} | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_33544() { testValid("({any, int} | (int | int))","(!any | {int, int})"); }
		@Test public void test_33545() { testInvalid("({any, int} | (int | int))","(!int | {int, int})"); }
		@Test public void test_33546() { testInvalid("({any, int} | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_33547() { testValid("({any, int} | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_33548() { testInvalid("({any, int} | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_33549() { testValid("({any, int} | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_33550() { testValid("({any, int} | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_33551() { testValid("({any, int} | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_33552() { testValid("({any, int} | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_33553() { testInvalid("({any, int} | (int | int))","({any} | (any | any))"); }
		@Test public void test_33554() { testInvalid("({any, int} | (int | int))","(!any | (any | any))"); }
		@Test public void test_33555() { testInvalid("({any, int} | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_33556() { testInvalid("({any, int} | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_33557() { testInvalid("({any, int} | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_33558() { testInvalid("({any, int} | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_33559() { testInvalid("({any, int} | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_33560() { testInvalid("({any, int} | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_33561() { testInvalid("({any, int} | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_33562() { testInvalid("({any, int} | (int | int))","({any} | (int | any))"); }
		@Test public void test_33563() { testInvalid("({any, int} | (int | int))","(!int | (int | any))"); }
		@Test public void test_33564() { testInvalid("({any, int} | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_33565() { testInvalid("({any, int} | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_33566() { testInvalid("({any, int} | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_33567() { testInvalid("({any, int} | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_33568() { testInvalid("({any, int} | (int | int))","({any} | (any | int))"); }
		@Test public void test_33569() { testInvalid("({any, int} | (int | int))","({int} | (any | int))"); }
		@Test public void test_33570() { testInvalid("({any, int} | (int | int))","(!any | (any | int))"); }
		@Test public void test_33571() { testInvalid("({any, int} | (int | int))","(!int | (any | int))"); }
		@Test public void test_33572() { testInvalid("({any, int} | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_33573() { testInvalid("({any, int} | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_33574() { testInvalid("({any, int} | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_33575() { testInvalid("({any, int} | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33576() { testInvalid("({any, int} | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33577() { testInvalid("({any, int} | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33578() { testInvalid("({any, int} | (int | int))","({int} | (int | int))"); }
		@Test public void test_33579() { testValid("({any, int} | (int | int))","(!any | (int | int))"); }
		@Test public void test_33580() { testInvalid("({any, int} | (int | int))","(!int | (int | int))"); }
		@Test public void test_33581() { testInvalid("({any, int} | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33582() { testValid("({any, int} | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33583() { testInvalid("({any, int} | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33584() { testValid("({any, int} | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33585() { testInvalid("({any, int} | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33586() { testValid("({any, int} | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33587() { testValid("({any, int} | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33588() { testInvalid("({any, int} | (int | int))","(!any | (any & any))"); }
		@Test public void test_33589() { testInvalid("({any, int} | (int | int))","(!int | (any & any))"); }
		@Test public void test_33590() { testInvalid("({any, int} | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33591() { testInvalid("({any, int} | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33592() { testInvalid("({any, int} | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33593() { testInvalid("({any, int} | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33594() { testInvalid("({any, int} | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33595() { testInvalid("({any, int} | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33596() { testInvalid("({any, int} | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33597() { testInvalid("({any, int} | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33598() { testInvalid("({any, int} | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33599() { testInvalid("({any, int} | (int | int))","({any} | (int & any))"); }
		@Test public void test_33600() { testValid("((any | int) | (int | int))","{int}"); }
		@Test public void test_33601() { testValid("((any | int) | (int | int))","{any, any}"); }
		@Test public void test_33602() { testValid("((any | int) | (int | int))","{int, int}"); }
		@Test public void test_33603() { testValid("((any | int) | (int | int))","(any | int)"); }
		@Test public void test_33604() { testValid("((any | int) | (int | int))","(int & any)"); }
		@Test public void test_33605() { testValid("((any | int) | (int | int))","{{any}}"); }
		@Test public void test_33606() { testValid("((any | int) | (int | int))","{{int, any}}"); }
		@Test public void test_33607() { testValid("((any | int) | (int | int))","{{int, int}}"); }
		@Test public void test_33608() { testValid("((any | int) | (int | int))","{(any | int)}"); }
		@Test public void test_33609() { testValid("((any | int) | (int | int))","!{int, any}"); }
		@Test public void test_33610() { testValid("((any | int) | (int | int))","!{int, int}"); }
		@Test public void test_33611() { testValid("((any | int) | (int | int))","!(any | any)"); }
		@Test public void test_33612() { testValid("((any | int) | (int | int))","!(any & any)"); }
		@Test public void test_33613() { testValid("((any | int) | (int | int))","!(int & int)"); }
		@Test public void test_33614() { testValid("((any | int) | (int | int))","{{int}, {any}}"); }
		@Test public void test_33615() { testValid("((any | int) | (int | int))","{!int, {any}}"); }
		@Test public void test_33616() { testValid("((any | int) | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_33617() { testValid("((any | int) | (int | int))","{(any | int), {any}}"); }
		@Test public void test_33618() { testValid("((any | int) | (int | int))","{!int, {int}}"); }
		@Test public void test_33619() { testValid("((any | int) | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_33620() { testValid("((any | int) | (int | int))","{(any | any), {int}}"); }
		@Test public void test_33621() { testValid("((any | int) | (int | int))","{(any & any), {int}}"); }
		@Test public void test_33622() { testValid("((any | int) | (int | int))","{(any & int), {int}}"); }
		@Test public void test_33623() { testValid("((any | int) | (int | int))","{{any, any}, !int}"); }
		@Test public void test_33624() { testValid("((any | int) | (int | int))","{{any, int}, !int}"); }
		@Test public void test_33625() { testValid("((any | int) | (int | int))","{(any | any), !int}"); }
		@Test public void test_33626() { testValid("((any | int) | (int | int))","{(int | any), !int}"); }
		@Test public void test_33627() { testValid("((any | int) | (int | int))","{(any & any), !int}"); }
		@Test public void test_33628() { testValid("((any | int) | (int | int))","{(int & any), !int}"); }
		@Test public void test_33629() { testValid("((any | int) | (int | int))","{(int & int), !int}"); }
		@Test public void test_33630() { testValid("((any | int) | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_33631() { testValid("((any | int) | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_33632() { testValid("((any | int) | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_33633() { testValid("((any | int) | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_33634() { testValid("((any | int) | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_33635() { testValid("((any | int) | (int | int))","{!int, {int, any}}"); }
		@Test public void test_33636() { testValid("((any | int) | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_33637() { testValid("((any | int) | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_33638() { testValid("((any | int) | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_33639() { testValid("((any | int) | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_33640() { testValid("((any | int) | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_33641() { testValid("((any | int) | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_33642() { testValid("((any | int) | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_33643() { testValid("((any | int) | (int | int))","{!int, {int, int}}"); }
		@Test public void test_33644() { testValid("((any | int) | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_33645() { testValid("((any | int) | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_33646() { testValid("((any | int) | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_33647() { testValid("((any | int) | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_33648() { testValid("((any | int) | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_33649() { testValid("((any | int) | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_33650() { testValid("((any | int) | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_33651() { testValid("((any | int) | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_33652() { testValid("((any | int) | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_33653() { testValid("((any | int) | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_33654() { testValid("((any | int) | (int | int))","{!int, (int | any)}"); }
		@Test public void test_33655() { testValid("((any | int) | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_33656() { testValid("((any | int) | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_33657() { testValid("((any | int) | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_33658() { testValid("((any | int) | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_33659() { testValid("((any | int) | (int | int))","{!int, (any | int)}"); }
		@Test public void test_33660() { testValid("((any | int) | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_33661() { testValid("((any | int) | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_33662() { testValid("((any | int) | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_33663() { testValid("((any | int) | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_33664() { testValid("((any | int) | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_33665() { testValid("((any | int) | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_33666() { testValid("((any | int) | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_33667() { testValid("((any | int) | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_33668() { testValid("((any | int) | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_33669() { testValid("((any | int) | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_33670() { testValid("((any | int) | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_33671() { testValid("((any | int) | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_33672() { testValid("((any | int) | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_33673() { testValid("((any | int) | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_33674() { testValid("((any | int) | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_33675() { testValid("((any | int) | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_33676() { testValid("((any | int) | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_33677() { testValid("((any | int) | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_33678() { testValid("((any | int) | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_33679() { testValid("((any | int) | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_33680() { testValid("((any | int) | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_33681() { testValid("((any | int) | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_33682() { testValid("((any | int) | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_33683() { testValid("((any | int) | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_33684() { testValid("((any | int) | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_33685() { testValid("((any | int) | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_33686() { testValid("((any | int) | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_33687() { testValid("((any | int) | (int | int))","(!int | {any})"); }
		@Test public void test_33688() { testValid("((any | int) | (int | int))","({any, any} | {any})"); }
		@Test public void test_33689() { testValid("((any | int) | (int | int))","((any | any) | {any})"); }
		@Test public void test_33690() { testValid("((any | int) | (int | int))","((int | any) | {any})"); }
		@Test public void test_33691() { testValid("((any | int) | (int | int))","((any & any) | {any})"); }
		@Test public void test_33692() { testValid("((any | int) | (int | int))","((int & any) | {any})"); }
		@Test public void test_33693() { testValid("((any | int) | (int | int))","((any & int) | {any})"); }
		@Test public void test_33694() { testValid("((any | int) | (int | int))","({int} | {int})"); }
		@Test public void test_33695() { testValid("((any | int) | (int | int))","(!any | {int})"); }
		@Test public void test_33696() { testValid("((any | int) | (int | int))","(!int | {int})"); }
		@Test public void test_33697() { testValid("((any | int) | (int | int))","({any, int} | {int})"); }
		@Test public void test_33698() { testValid("((any | int) | (int | int))","((int & any) | {int})"); }
		@Test public void test_33699() { testValid("((any | int) | (int | int))","((any & int) | {int})"); }
		@Test public void test_33700() { testValid("((any | int) | (int | int))","((int & int) | {int})"); }
		@Test public void test_33701() { testValid("((any | int) | (int | int))","({any} | !any)"); }
		@Test public void test_33702() { testValid("((any | int) | (int | int))","({int} | !any)"); }
		@Test public void test_33703() { testValid("((any | int) | (int | int))","({any, any} | !any)"); }
		@Test public void test_33704() { testValid("((any | int) | (int | int))","({int, int} | !any)"); }
		@Test public void test_33705() { testValid("((any | int) | (int | int))","((any | any) | !any)"); }
		@Test public void test_33706() { testValid("((any | int) | (int | int))","((int | any) | !any)"); }
		@Test public void test_33707() { testValid("((any | int) | (int | int))","((int | int) | !any)"); }
		@Test public void test_33708() { testValid("((any | int) | (int | int))","((int & int) | !any)"); }
		@Test public void test_33709() { testValid("((any | int) | (int | int))","(!int | !int)"); }
		@Test public void test_33710() { testValid("((any | int) | (int | int))","({any, any} | !int)"); }
		@Test public void test_33711() { testValid("((any | int) | (int | int))","({int, int} | !int)"); }
		@Test public void test_33712() { testValid("((any | int) | (int | int))","((int | any) | !int)"); }
		@Test public void test_33713() { testValid("((any | int) | (int | int))","((any | int) | !int)"); }
		@Test public void test_33714() { testValid("((any | int) | (int | int))","((any & int) | !int)"); }
		@Test public void test_33715() { testValid("((any | int) | (int | int))","((int & int) | !int)"); }
		@Test public void test_33716() { testValid("((any | int) | (int | int))","({int} | {any, any})"); }
		@Test public void test_33717() { testValid("((any | int) | (int | int))","(!any | {any, any})"); }
		@Test public void test_33718() { testValid("((any | int) | (int | int))","(!int | {any, any})"); }
		@Test public void test_33719() { testValid("((any | int) | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_33720() { testValid("((any | int) | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_33721() { testValid("((any | int) | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_33722() { testValid("((any | int) | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_33723() { testValid("((any | int) | (int | int))","(!int | {int, any})"); }
		@Test public void test_33724() { testValid("((any | int) | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_33725() { testValid("((any | int) | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_33726() { testValid("((any | int) | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_33727() { testValid("((any | int) | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_33728() { testValid("((any | int) | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_33729() { testValid("((any | int) | (int | int))","({any} | {any, int})"); }
		@Test public void test_33730() { testValid("((any | int) | (int | int))","(!int | {any, int})"); }
		@Test public void test_33731() { testValid("((any | int) | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_33732() { testValid("((any | int) | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_33733() { testValid("((any | int) | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_33734() { testValid("((any | int) | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_33735() { testValid("((any | int) | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_33736() { testValid("((any | int) | (int | int))","(!any | {int, int})"); }
		@Test public void test_33737() { testValid("((any | int) | (int | int))","(!int | {int, int})"); }
		@Test public void test_33738() { testValid("((any | int) | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_33739() { testValid("((any | int) | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_33740() { testValid("((any | int) | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_33741() { testValid("((any | int) | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_33742() { testValid("((any | int) | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_33743() { testValid("((any | int) | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_33744() { testValid("((any | int) | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_33745() { testValid("((any | int) | (int | int))","({any} | (any | any))"); }
		@Test public void test_33746() { testValid("((any | int) | (int | int))","(!any | (any | any))"); }
		@Test public void test_33747() { testValid("((any | int) | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_33748() { testValid("((any | int) | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_33749() { testValid("((any | int) | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_33750() { testValid("((any | int) | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_33751() { testValid("((any | int) | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_33752() { testValid("((any | int) | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_33753() { testValid("((any | int) | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_33754() { testValid("((any | int) | (int | int))","({any} | (int | any))"); }
		@Test public void test_33755() { testValid("((any | int) | (int | int))","(!int | (int | any))"); }
		@Test public void test_33756() { testValid("((any | int) | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_33757() { testValid("((any | int) | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_33758() { testValid("((any | int) | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_33759() { testValid("((any | int) | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_33760() { testValid("((any | int) | (int | int))","({any} | (any | int))"); }
		@Test public void test_33761() { testValid("((any | int) | (int | int))","({int} | (any | int))"); }
		@Test public void test_33762() { testValid("((any | int) | (int | int))","(!any | (any | int))"); }
		@Test public void test_33763() { testValid("((any | int) | (int | int))","(!int | (any | int))"); }
		@Test public void test_33764() { testValid("((any | int) | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_33765() { testValid("((any | int) | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_33766() { testValid("((any | int) | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_33767() { testValid("((any | int) | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33768() { testValid("((any | int) | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33769() { testValid("((any | int) | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33770() { testValid("((any | int) | (int | int))","({int} | (int | int))"); }
		@Test public void test_33771() { testValid("((any | int) | (int | int))","(!any | (int | int))"); }
		@Test public void test_33772() { testValid("((any | int) | (int | int))","(!int | (int | int))"); }
		@Test public void test_33773() { testValid("((any | int) | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33774() { testValid("((any | int) | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33775() { testValid("((any | int) | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33776() { testValid("((any | int) | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33777() { testValid("((any | int) | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33778() { testValid("((any | int) | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33779() { testValid("((any | int) | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33780() { testValid("((any | int) | (int | int))","(!any | (any & any))"); }
		@Test public void test_33781() { testValid("((any | int) | (int | int))","(!int | (any & any))"); }
		@Test public void test_33782() { testValid("((any | int) | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33783() { testValid("((any | int) | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33784() { testValid("((any | int) | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33785() { testValid("((any | int) | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33786() { testValid("((any | int) | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33787() { testValid("((any | int) | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33788() { testValid("((any | int) | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33789() { testValid("((any | int) | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33790() { testValid("((any | int) | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33791() { testValid("((any | int) | (int | int))","({any} | (int & any))"); }
		@Test public void test_33792() { testInvalid("((int | int) | (int | int))","{int}"); }
		@Test public void test_33793() { testInvalid("((int | int) | (int | int))","{any, any}"); }
		@Test public void test_33794() { testInvalid("((int | int) | (int | int))","{int, int}"); }
		@Test public void test_33795() { testInvalid("((int | int) | (int | int))","(any | int)"); }
		@Test public void test_33796() { testValid("((int | int) | (int | int))","(int & any)"); }
		@Test public void test_33797() { testInvalid("((int | int) | (int | int))","{{any}}"); }
		@Test public void test_33798() { testInvalid("((int | int) | (int | int))","{{int, any}}"); }
		@Test public void test_33799() { testInvalid("((int | int) | (int | int))","{{int, int}}"); }
		@Test public void test_33800() { testInvalid("((int | int) | (int | int))","{(any | int)}"); }
		@Test public void test_33801() { testInvalid("((int | int) | (int | int))","!{int, any}"); }
		@Test public void test_33802() { testInvalid("((int | int) | (int | int))","!{int, int}"); }
		@Test public void test_33803() { testValid("((int | int) | (int | int))","!(any | any)"); }
		@Test public void test_33804() { testValid("((int | int) | (int | int))","!(any & any)"); }
		@Test public void test_33805() { testInvalid("((int | int) | (int | int))","!(int & int)"); }
		@Test public void test_33806() { testInvalid("((int | int) | (int | int))","{{int}, {any}}"); }
		@Test public void test_33807() { testInvalid("((int | int) | (int | int))","{!int, {any}}"); }
		@Test public void test_33808() { testInvalid("((int | int) | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_33809() { testInvalid("((int | int) | (int | int))","{(any | int), {any}}"); }
		@Test public void test_33810() { testInvalid("((int | int) | (int | int))","{!int, {int}}"); }
		@Test public void test_33811() { testInvalid("((int | int) | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_33812() { testInvalid("((int | int) | (int | int))","{(any | any), {int}}"); }
		@Test public void test_33813() { testInvalid("((int | int) | (int | int))","{(any & any), {int}}"); }
		@Test public void test_33814() { testInvalid("((int | int) | (int | int))","{(any & int), {int}}"); }
		@Test public void test_33815() { testInvalid("((int | int) | (int | int))","{{any, any}, !int}"); }
		@Test public void test_33816() { testInvalid("((int | int) | (int | int))","{{any, int}, !int}"); }
		@Test public void test_33817() { testInvalid("((int | int) | (int | int))","{(any | any), !int}"); }
		@Test public void test_33818() { testInvalid("((int | int) | (int | int))","{(int | any), !int}"); }
		@Test public void test_33819() { testInvalid("((int | int) | (int | int))","{(any & any), !int}"); }
		@Test public void test_33820() { testInvalid("((int | int) | (int | int))","{(int & any), !int}"); }
		@Test public void test_33821() { testInvalid("((int | int) | (int | int))","{(int & int), !int}"); }
		@Test public void test_33822() { testInvalid("((int | int) | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_33823() { testInvalid("((int | int) | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_33824() { testInvalid("((int | int) | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_33825() { testInvalid("((int | int) | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_33826() { testInvalid("((int | int) | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_33827() { testInvalid("((int | int) | (int | int))","{!int, {int, any}}"); }
		@Test public void test_33828() { testInvalid("((int | int) | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_33829() { testInvalid("((int | int) | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_33830() { testInvalid("((int | int) | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_33831() { testInvalid("((int | int) | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_33832() { testInvalid("((int | int) | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_33833() { testInvalid("((int | int) | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_33834() { testInvalid("((int | int) | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_33835() { testInvalid("((int | int) | (int | int))","{!int, {int, int}}"); }
		@Test public void test_33836() { testInvalid("((int | int) | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_33837() { testInvalid("((int | int) | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_33838() { testInvalid("((int | int) | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_33839() { testInvalid("((int | int) | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_33840() { testInvalid("((int | int) | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_33841() { testInvalid("((int | int) | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_33842() { testInvalid("((int | int) | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_33843() { testInvalid("((int | int) | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_33844() { testInvalid("((int | int) | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_33845() { testInvalid("((int | int) | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_33846() { testInvalid("((int | int) | (int | int))","{!int, (int | any)}"); }
		@Test public void test_33847() { testInvalid("((int | int) | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_33848() { testInvalid("((int | int) | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_33849() { testInvalid("((int | int) | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_33850() { testInvalid("((int | int) | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_33851() { testInvalid("((int | int) | (int | int))","{!int, (any | int)}"); }
		@Test public void test_33852() { testInvalid("((int | int) | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_33853() { testInvalid("((int | int) | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_33854() { testInvalid("((int | int) | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_33855() { testInvalid("((int | int) | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_33856() { testInvalid("((int | int) | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_33857() { testInvalid("((int | int) | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_33858() { testInvalid("((int | int) | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_33859() { testInvalid("((int | int) | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_33860() { testInvalid("((int | int) | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_33861() { testInvalid("((int | int) | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_33862() { testInvalid("((int | int) | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_33863() { testInvalid("((int | int) | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_33864() { testInvalid("((int | int) | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_33865() { testInvalid("((int | int) | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_33866() { testInvalid("((int | int) | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_33867() { testInvalid("((int | int) | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_33868() { testInvalid("((int | int) | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_33869() { testInvalid("((int | int) | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_33870() { testInvalid("((int | int) | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_33871() { testInvalid("((int | int) | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_33872() { testInvalid("((int | int) | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_33873() { testInvalid("((int | int) | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_33874() { testInvalid("((int | int) | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_33875() { testInvalid("((int | int) | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_33876() { testInvalid("((int | int) | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_33877() { testInvalid("((int | int) | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_33878() { testInvalid("((int | int) | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_33879() { testInvalid("((int | int) | (int | int))","(!int | {any})"); }
		@Test public void test_33880() { testInvalid("((int | int) | (int | int))","({any, any} | {any})"); }
		@Test public void test_33881() { testInvalid("((int | int) | (int | int))","((any | any) | {any})"); }
		@Test public void test_33882() { testInvalid("((int | int) | (int | int))","((int | any) | {any})"); }
		@Test public void test_33883() { testInvalid("((int | int) | (int | int))","((any & any) | {any})"); }
		@Test public void test_33884() { testInvalid("((int | int) | (int | int))","((int & any) | {any})"); }
		@Test public void test_33885() { testInvalid("((int | int) | (int | int))","((any & int) | {any})"); }
		@Test public void test_33886() { testInvalid("((int | int) | (int | int))","({int} | {int})"); }
		@Test public void test_33887() { testInvalid("((int | int) | (int | int))","(!any | {int})"); }
		@Test public void test_33888() { testInvalid("((int | int) | (int | int))","(!int | {int})"); }
		@Test public void test_33889() { testInvalid("((int | int) | (int | int))","({any, int} | {int})"); }
		@Test public void test_33890() { testInvalid("((int | int) | (int | int))","((int & any) | {int})"); }
		@Test public void test_33891() { testInvalid("((int | int) | (int | int))","((any & int) | {int})"); }
		@Test public void test_33892() { testInvalid("((int | int) | (int | int))","((int & int) | {int})"); }
		@Test public void test_33893() { testInvalid("((int | int) | (int | int))","({any} | !any)"); }
		@Test public void test_33894() { testInvalid("((int | int) | (int | int))","({int} | !any)"); }
		@Test public void test_33895() { testInvalid("((int | int) | (int | int))","({any, any} | !any)"); }
		@Test public void test_33896() { testInvalid("((int | int) | (int | int))","({int, int} | !any)"); }
		@Test public void test_33897() { testInvalid("((int | int) | (int | int))","((any | any) | !any)"); }
		@Test public void test_33898() { testInvalid("((int | int) | (int | int))","((int | any) | !any)"); }
		@Test public void test_33899() { testValid("((int | int) | (int | int))","((int | int) | !any)"); }
		@Test public void test_33900() { testValid("((int | int) | (int | int))","((int & int) | !any)"); }
		@Test public void test_33901() { testInvalid("((int | int) | (int | int))","(!int | !int)"); }
		@Test public void test_33902() { testInvalid("((int | int) | (int | int))","({any, any} | !int)"); }
		@Test public void test_33903() { testInvalid("((int | int) | (int | int))","({int, int} | !int)"); }
		@Test public void test_33904() { testInvalid("((int | int) | (int | int))","((int | any) | !int)"); }
		@Test public void test_33905() { testInvalid("((int | int) | (int | int))","((any | int) | !int)"); }
		@Test public void test_33906() { testInvalid("((int | int) | (int | int))","((any & int) | !int)"); }
		@Test public void test_33907() { testInvalid("((int | int) | (int | int))","((int & int) | !int)"); }
		@Test public void test_33908() { testInvalid("((int | int) | (int | int))","({int} | {any, any})"); }
		@Test public void test_33909() { testInvalid("((int | int) | (int | int))","(!any | {any, any})"); }
		@Test public void test_33910() { testInvalid("((int | int) | (int | int))","(!int | {any, any})"); }
		@Test public void test_33911() { testInvalid("((int | int) | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_33912() { testInvalid("((int | int) | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_33913() { testInvalid("((int | int) | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_33914() { testInvalid("((int | int) | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_33915() { testInvalid("((int | int) | (int | int))","(!int | {int, any})"); }
		@Test public void test_33916() { testInvalid("((int | int) | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_33917() { testInvalid("((int | int) | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_33918() { testInvalid("((int | int) | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_33919() { testInvalid("((int | int) | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_33920() { testInvalid("((int | int) | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_33921() { testInvalid("((int | int) | (int | int))","({any} | {any, int})"); }
		@Test public void test_33922() { testInvalid("((int | int) | (int | int))","(!int | {any, int})"); }
		@Test public void test_33923() { testInvalid("((int | int) | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_33924() { testInvalid("((int | int) | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_33925() { testInvalid("((int | int) | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_33926() { testInvalid("((int | int) | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_33927() { testInvalid("((int | int) | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_33928() { testInvalid("((int | int) | (int | int))","(!any | {int, int})"); }
		@Test public void test_33929() { testInvalid("((int | int) | (int | int))","(!int | {int, int})"); }
		@Test public void test_33930() { testInvalid("((int | int) | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_33931() { testInvalid("((int | int) | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_33932() { testInvalid("((int | int) | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_33933() { testInvalid("((int | int) | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_33934() { testInvalid("((int | int) | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_33935() { testInvalid("((int | int) | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_33936() { testInvalid("((int | int) | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_33937() { testInvalid("((int | int) | (int | int))","({any} | (any | any))"); }
		@Test public void test_33938() { testInvalid("((int | int) | (int | int))","(!any | (any | any))"); }
		@Test public void test_33939() { testInvalid("((int | int) | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_33940() { testInvalid("((int | int) | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_33941() { testInvalid("((int | int) | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_33942() { testInvalid("((int | int) | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_33943() { testInvalid("((int | int) | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_33944() { testInvalid("((int | int) | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_33945() { testInvalid("((int | int) | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_33946() { testInvalid("((int | int) | (int | int))","({any} | (int | any))"); }
		@Test public void test_33947() { testInvalid("((int | int) | (int | int))","(!int | (int | any))"); }
		@Test public void test_33948() { testInvalid("((int | int) | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_33949() { testInvalid("((int | int) | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_33950() { testInvalid("((int | int) | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_33951() { testInvalid("((int | int) | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_33952() { testInvalid("((int | int) | (int | int))","({any} | (any | int))"); }
		@Test public void test_33953() { testInvalid("((int | int) | (int | int))","({int} | (any | int))"); }
		@Test public void test_33954() { testInvalid("((int | int) | (int | int))","(!any | (any | int))"); }
		@Test public void test_33955() { testInvalid("((int | int) | (int | int))","(!int | (any | int))"); }
		@Test public void test_33956() { testInvalid("((int | int) | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_33957() { testInvalid("((int | int) | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_33958() { testInvalid("((int | int) | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_33959() { testInvalid("((int | int) | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_33960() { testInvalid("((int | int) | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_33961() { testInvalid("((int | int) | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_33962() { testInvalid("((int | int) | (int | int))","({int} | (int | int))"); }
		@Test public void test_33963() { testValid("((int | int) | (int | int))","(!any | (int | int))"); }
		@Test public void test_33964() { testInvalid("((int | int) | (int | int))","(!int | (int | int))"); }
		@Test public void test_33965() { testInvalid("((int | int) | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_33966() { testInvalid("((int | int) | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_33967() { testInvalid("((int | int) | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_33968() { testValid("((int | int) | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_33969() { testInvalid("((int | int) | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_33970() { testValid("((int | int) | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_33971() { testValid("((int | int) | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_33972() { testInvalid("((int | int) | (int | int))","(!any | (any & any))"); }
		@Test public void test_33973() { testInvalid("((int | int) | (int | int))","(!int | (any & any))"); }
		@Test public void test_33974() { testInvalid("((int | int) | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_33975() { testInvalid("((int | int) | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_33976() { testInvalid("((int | int) | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_33977() { testInvalid("((int | int) | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_33978() { testInvalid("((int | int) | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_33979() { testInvalid("((int | int) | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_33980() { testInvalid("((int | int) | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_33981() { testInvalid("((int | int) | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_33982() { testInvalid("((int | int) | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_33983() { testInvalid("((int | int) | (int | int))","({any} | (int & any))"); }
		@Test public void test_33984() { testValid("((any & any) | (int | int))","{int}"); }
		@Test public void test_33985() { testValid("((any & any) | (int | int))","{any, any}"); }
		@Test public void test_33986() { testValid("((any & any) | (int | int))","{int, int}"); }
		@Test public void test_33987() { testValid("((any & any) | (int | int))","(any | int)"); }
		@Test public void test_33988() { testValid("((any & any) | (int | int))","(int & any)"); }
		@Test public void test_33989() { testValid("((any & any) | (int | int))","{{any}}"); }
		@Test public void test_33990() { testValid("((any & any) | (int | int))","{{int, any}}"); }
		@Test public void test_33991() { testValid("((any & any) | (int | int))","{{int, int}}"); }
		@Test public void test_33992() { testValid("((any & any) | (int | int))","{(any | int)}"); }
		@Test public void test_33993() { testValid("((any & any) | (int | int))","!{int, any}"); }
		@Test public void test_33994() { testValid("((any & any) | (int | int))","!{int, int}"); }
		@Test public void test_33995() { testValid("((any & any) | (int | int))","!(any | any)"); }
		@Test public void test_33996() { testValid("((any & any) | (int | int))","!(any & any)"); }
		@Test public void test_33997() { testValid("((any & any) | (int | int))","!(int & int)"); }
		@Test public void test_33998() { testValid("((any & any) | (int | int))","{{int}, {any}}"); }
		@Test public void test_33999() { testValid("((any & any) | (int | int))","{!int, {any}}"); }
		@Test public void test_34000() { testValid("((any & any) | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_34001() { testValid("((any & any) | (int | int))","{(any | int), {any}}"); }
		@Test public void test_34002() { testValid("((any & any) | (int | int))","{!int, {int}}"); }
		@Test public void test_34003() { testValid("((any & any) | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_34004() { testValid("((any & any) | (int | int))","{(any | any), {int}}"); }
		@Test public void test_34005() { testValid("((any & any) | (int | int))","{(any & any), {int}}"); }
		@Test public void test_34006() { testValid("((any & any) | (int | int))","{(any & int), {int}}"); }
		@Test public void test_34007() { testValid("((any & any) | (int | int))","{{any, any}, !int}"); }
		@Test public void test_34008() { testValid("((any & any) | (int | int))","{{any, int}, !int}"); }
		@Test public void test_34009() { testValid("((any & any) | (int | int))","{(any | any), !int}"); }
		@Test public void test_34010() { testValid("((any & any) | (int | int))","{(int | any), !int}"); }
		@Test public void test_34011() { testValid("((any & any) | (int | int))","{(any & any), !int}"); }
		@Test public void test_34012() { testValid("((any & any) | (int | int))","{(int & any), !int}"); }
		@Test public void test_34013() { testValid("((any & any) | (int | int))","{(int & int), !int}"); }
		@Test public void test_34014() { testValid("((any & any) | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_34015() { testValid("((any & any) | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_34016() { testValid("((any & any) | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_34017() { testValid("((any & any) | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_34018() { testValid("((any & any) | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_34019() { testValid("((any & any) | (int | int))","{!int, {int, any}}"); }
		@Test public void test_34020() { testValid("((any & any) | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_34021() { testValid("((any & any) | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_34022() { testValid("((any & any) | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_34023() { testValid("((any & any) | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_34024() { testValid("((any & any) | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_34025() { testValid("((any & any) | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_34026() { testValid("((any & any) | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_34027() { testValid("((any & any) | (int | int))","{!int, {int, int}}"); }
		@Test public void test_34028() { testValid("((any & any) | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_34029() { testValid("((any & any) | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_34030() { testValid("((any & any) | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_34031() { testValid("((any & any) | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_34032() { testValid("((any & any) | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_34033() { testValid("((any & any) | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_34034() { testValid("((any & any) | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_34035() { testValid("((any & any) | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_34036() { testValid("((any & any) | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_34037() { testValid("((any & any) | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_34038() { testValid("((any & any) | (int | int))","{!int, (int | any)}"); }
		@Test public void test_34039() { testValid("((any & any) | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_34040() { testValid("((any & any) | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_34041() { testValid("((any & any) | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_34042() { testValid("((any & any) | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_34043() { testValid("((any & any) | (int | int))","{!int, (any | int)}"); }
		@Test public void test_34044() { testValid("((any & any) | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_34045() { testValid("((any & any) | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_34046() { testValid("((any & any) | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_34047() { testValid("((any & any) | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_34048() { testValid("((any & any) | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_34049() { testValid("((any & any) | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_34050() { testValid("((any & any) | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_34051() { testValid("((any & any) | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_34052() { testValid("((any & any) | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_34053() { testValid("((any & any) | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_34054() { testValid("((any & any) | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_34055() { testValid("((any & any) | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_34056() { testValid("((any & any) | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_34057() { testValid("((any & any) | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_34058() { testValid("((any & any) | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_34059() { testValid("((any & any) | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_34060() { testValid("((any & any) | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_34061() { testValid("((any & any) | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_34062() { testValid("((any & any) | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_34063() { testValid("((any & any) | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_34064() { testValid("((any & any) | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_34065() { testValid("((any & any) | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_34066() { testValid("((any & any) | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_34067() { testValid("((any & any) | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_34068() { testValid("((any & any) | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_34069() { testValid("((any & any) | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_34070() { testValid("((any & any) | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_34071() { testValid("((any & any) | (int | int))","(!int | {any})"); }
		@Test public void test_34072() { testValid("((any & any) | (int | int))","({any, any} | {any})"); }
		@Test public void test_34073() { testValid("((any & any) | (int | int))","((any | any) | {any})"); }
		@Test public void test_34074() { testValid("((any & any) | (int | int))","((int | any) | {any})"); }
		@Test public void test_34075() { testValid("((any & any) | (int | int))","((any & any) | {any})"); }
		@Test public void test_34076() { testValid("((any & any) | (int | int))","((int & any) | {any})"); }
		@Test public void test_34077() { testValid("((any & any) | (int | int))","((any & int) | {any})"); }
		@Test public void test_34078() { testValid("((any & any) | (int | int))","({int} | {int})"); }
		@Test public void test_34079() { testValid("((any & any) | (int | int))","(!any | {int})"); }
		@Test public void test_34080() { testValid("((any & any) | (int | int))","(!int | {int})"); }
		@Test public void test_34081() { testValid("((any & any) | (int | int))","({any, int} | {int})"); }
		@Test public void test_34082() { testValid("((any & any) | (int | int))","((int & any) | {int})"); }
		@Test public void test_34083() { testValid("((any & any) | (int | int))","((any & int) | {int})"); }
		@Test public void test_34084() { testValid("((any & any) | (int | int))","((int & int) | {int})"); }
		@Test public void test_34085() { testValid("((any & any) | (int | int))","({any} | !any)"); }
		@Test public void test_34086() { testValid("((any & any) | (int | int))","({int} | !any)"); }
		@Test public void test_34087() { testValid("((any & any) | (int | int))","({any, any} | !any)"); }
		@Test public void test_34088() { testValid("((any & any) | (int | int))","({int, int} | !any)"); }
		@Test public void test_34089() { testValid("((any & any) | (int | int))","((any | any) | !any)"); }
		@Test public void test_34090() { testValid("((any & any) | (int | int))","((int | any) | !any)"); }
		@Test public void test_34091() { testValid("((any & any) | (int | int))","((int | int) | !any)"); }
		@Test public void test_34092() { testValid("((any & any) | (int | int))","((int & int) | !any)"); }
		@Test public void test_34093() { testValid("((any & any) | (int | int))","(!int | !int)"); }
		@Test public void test_34094() { testValid("((any & any) | (int | int))","({any, any} | !int)"); }
		@Test public void test_34095() { testValid("((any & any) | (int | int))","({int, int} | !int)"); }
		@Test public void test_34096() { testValid("((any & any) | (int | int))","((int | any) | !int)"); }
		@Test public void test_34097() { testValid("((any & any) | (int | int))","((any | int) | !int)"); }
		@Test public void test_34098() { testValid("((any & any) | (int | int))","((any & int) | !int)"); }
		@Test public void test_34099() { testValid("((any & any) | (int | int))","((int & int) | !int)"); }
		@Test public void test_34100() { testValid("((any & any) | (int | int))","({int} | {any, any})"); }
		@Test public void test_34101() { testValid("((any & any) | (int | int))","(!any | {any, any})"); }
		@Test public void test_34102() { testValid("((any & any) | (int | int))","(!int | {any, any})"); }
		@Test public void test_34103() { testValid("((any & any) | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_34104() { testValid("((any & any) | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_34105() { testValid("((any & any) | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_34106() { testValid("((any & any) | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_34107() { testValid("((any & any) | (int | int))","(!int | {int, any})"); }
		@Test public void test_34108() { testValid("((any & any) | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_34109() { testValid("((any & any) | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_34110() { testValid("((any & any) | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_34111() { testValid("((any & any) | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_34112() { testValid("((any & any) | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_34113() { testValid("((any & any) | (int | int))","({any} | {any, int})"); }
		@Test public void test_34114() { testValid("((any & any) | (int | int))","(!int | {any, int})"); }
		@Test public void test_34115() { testValid("((any & any) | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_34116() { testValid("((any & any) | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_34117() { testValid("((any & any) | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_34118() { testValid("((any & any) | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_34119() { testValid("((any & any) | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_34120() { testValid("((any & any) | (int | int))","(!any | {int, int})"); }
		@Test public void test_34121() { testValid("((any & any) | (int | int))","(!int | {int, int})"); }
		@Test public void test_34122() { testValid("((any & any) | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_34123() { testValid("((any & any) | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_34124() { testValid("((any & any) | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_34125() { testValid("((any & any) | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_34126() { testValid("((any & any) | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_34127() { testValid("((any & any) | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_34128() { testValid("((any & any) | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_34129() { testValid("((any & any) | (int | int))","({any} | (any | any))"); }
		@Test public void test_34130() { testValid("((any & any) | (int | int))","(!any | (any | any))"); }
		@Test public void test_34131() { testValid("((any & any) | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_34132() { testValid("((any & any) | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_34133() { testValid("((any & any) | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_34134() { testValid("((any & any) | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_34135() { testValid("((any & any) | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_34136() { testValid("((any & any) | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_34137() { testValid("((any & any) | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_34138() { testValid("((any & any) | (int | int))","({any} | (int | any))"); }
		@Test public void test_34139() { testValid("((any & any) | (int | int))","(!int | (int | any))"); }
		@Test public void test_34140() { testValid("((any & any) | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_34141() { testValid("((any & any) | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_34142() { testValid("((any & any) | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_34143() { testValid("((any & any) | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_34144() { testValid("((any & any) | (int | int))","({any} | (any | int))"); }
		@Test public void test_34145() { testValid("((any & any) | (int | int))","({int} | (any | int))"); }
		@Test public void test_34146() { testValid("((any & any) | (int | int))","(!any | (any | int))"); }
		@Test public void test_34147() { testValid("((any & any) | (int | int))","(!int | (any | int))"); }
		@Test public void test_34148() { testValid("((any & any) | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_34149() { testValid("((any & any) | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_34150() { testValid("((any & any) | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_34151() { testValid("((any & any) | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_34152() { testValid("((any & any) | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_34153() { testValid("((any & any) | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_34154() { testValid("((any & any) | (int | int))","({int} | (int | int))"); }
		@Test public void test_34155() { testValid("((any & any) | (int | int))","(!any | (int | int))"); }
		@Test public void test_34156() { testValid("((any & any) | (int | int))","(!int | (int | int))"); }
		@Test public void test_34157() { testValid("((any & any) | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_34158() { testValid("((any & any) | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_34159() { testValid("((any & any) | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_34160() { testValid("((any & any) | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_34161() { testValid("((any & any) | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_34162() { testValid("((any & any) | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_34163() { testValid("((any & any) | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_34164() { testValid("((any & any) | (int | int))","(!any | (any & any))"); }
		@Test public void test_34165() { testValid("((any & any) | (int | int))","(!int | (any & any))"); }
		@Test public void test_34166() { testValid("((any & any) | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_34167() { testValid("((any & any) | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_34168() { testValid("((any & any) | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_34169() { testValid("((any & any) | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_34170() { testValid("((any & any) | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_34171() { testValid("((any & any) | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_34172() { testValid("((any & any) | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_34173() { testValid("((any & any) | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_34174() { testValid("((any & any) | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_34175() { testValid("((any & any) | (int | int))","({any} | (int & any))"); }
		@Test public void test_34176() { testInvalid("((int & any) | (int | int))","{int}"); }
		@Test public void test_34177() { testInvalid("((int & any) | (int | int))","{any, any}"); }
		@Test public void test_34178() { testInvalid("((int & any) | (int | int))","{int, int}"); }
		@Test public void test_34179() { testInvalid("((int & any) | (int | int))","(any | int)"); }
		@Test public void test_34180() { testValid("((int & any) | (int | int))","(int & any)"); }
		@Test public void test_34181() { testInvalid("((int & any) | (int | int))","{{any}}"); }
		@Test public void test_34182() { testInvalid("((int & any) | (int | int))","{{int, any}}"); }
		@Test public void test_34183() { testInvalid("((int & any) | (int | int))","{{int, int}}"); }
		@Test public void test_34184() { testInvalid("((int & any) | (int | int))","{(any | int)}"); }
		@Test public void test_34185() { testInvalid("((int & any) | (int | int))","!{int, any}"); }
		@Test public void test_34186() { testInvalid("((int & any) | (int | int))","!{int, int}"); }
		@Test public void test_34187() { testValid("((int & any) | (int | int))","!(any | any)"); }
		@Test public void test_34188() { testValid("((int & any) | (int | int))","!(any & any)"); }
		@Test public void test_34189() { testInvalid("((int & any) | (int | int))","!(int & int)"); }
		@Test public void test_34190() { testInvalid("((int & any) | (int | int))","{{int}, {any}}"); }
		@Test public void test_34191() { testInvalid("((int & any) | (int | int))","{!int, {any}}"); }
		@Test public void test_34192() { testInvalid("((int & any) | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_34193() { testInvalid("((int & any) | (int | int))","{(any | int), {any}}"); }
		@Test public void test_34194() { testInvalid("((int & any) | (int | int))","{!int, {int}}"); }
		@Test public void test_34195() { testInvalid("((int & any) | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_34196() { testInvalid("((int & any) | (int | int))","{(any | any), {int}}"); }
		@Test public void test_34197() { testInvalid("((int & any) | (int | int))","{(any & any), {int}}"); }
		@Test public void test_34198() { testInvalid("((int & any) | (int | int))","{(any & int), {int}}"); }
		@Test public void test_34199() { testInvalid("((int & any) | (int | int))","{{any, any}, !int}"); }
		@Test public void test_34200() { testInvalid("((int & any) | (int | int))","{{any, int}, !int}"); }
		@Test public void test_34201() { testInvalid("((int & any) | (int | int))","{(any | any), !int}"); }
		@Test public void test_34202() { testInvalid("((int & any) | (int | int))","{(int | any), !int}"); }
		@Test public void test_34203() { testInvalid("((int & any) | (int | int))","{(any & any), !int}"); }
		@Test public void test_34204() { testInvalid("((int & any) | (int | int))","{(int & any), !int}"); }
		@Test public void test_34205() { testInvalid("((int & any) | (int | int))","{(int & int), !int}"); }
		@Test public void test_34206() { testInvalid("((int & any) | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_34207() { testInvalid("((int & any) | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_34208() { testInvalid("((int & any) | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_34209() { testInvalid("((int & any) | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_34210() { testInvalid("((int & any) | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_34211() { testInvalid("((int & any) | (int | int))","{!int, {int, any}}"); }
		@Test public void test_34212() { testInvalid("((int & any) | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_34213() { testInvalid("((int & any) | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_34214() { testInvalid("((int & any) | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_34215() { testInvalid("((int & any) | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_34216() { testInvalid("((int & any) | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_34217() { testInvalid("((int & any) | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_34218() { testInvalid("((int & any) | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_34219() { testInvalid("((int & any) | (int | int))","{!int, {int, int}}"); }
		@Test public void test_34220() { testInvalid("((int & any) | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_34221() { testInvalid("((int & any) | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_34222() { testInvalid("((int & any) | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_34223() { testInvalid("((int & any) | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_34224() { testInvalid("((int & any) | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_34225() { testInvalid("((int & any) | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_34226() { testInvalid("((int & any) | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_34227() { testInvalid("((int & any) | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_34228() { testInvalid("((int & any) | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_34229() { testInvalid("((int & any) | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_34230() { testInvalid("((int & any) | (int | int))","{!int, (int | any)}"); }
		@Test public void test_34231() { testInvalid("((int & any) | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_34232() { testInvalid("((int & any) | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_34233() { testInvalid("((int & any) | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_34234() { testInvalid("((int & any) | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_34235() { testInvalid("((int & any) | (int | int))","{!int, (any | int)}"); }
		@Test public void test_34236() { testInvalid("((int & any) | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_34237() { testInvalid("((int & any) | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_34238() { testInvalid("((int & any) | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_34239() { testInvalid("((int & any) | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_34240() { testInvalid("((int & any) | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_34241() { testInvalid("((int & any) | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_34242() { testInvalid("((int & any) | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_34243() { testInvalid("((int & any) | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_34244() { testInvalid("((int & any) | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_34245() { testInvalid("((int & any) | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_34246() { testInvalid("((int & any) | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_34247() { testInvalid("((int & any) | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_34248() { testInvalid("((int & any) | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_34249() { testInvalid("((int & any) | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_34250() { testInvalid("((int & any) | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_34251() { testInvalid("((int & any) | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_34252() { testInvalid("((int & any) | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_34253() { testInvalid("((int & any) | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_34254() { testInvalid("((int & any) | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_34255() { testInvalid("((int & any) | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_34256() { testInvalid("((int & any) | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_34257() { testInvalid("((int & any) | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_34258() { testInvalid("((int & any) | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_34259() { testInvalid("((int & any) | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_34260() { testInvalid("((int & any) | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_34261() { testInvalid("((int & any) | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_34262() { testInvalid("((int & any) | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_34263() { testInvalid("((int & any) | (int | int))","(!int | {any})"); }
		@Test public void test_34264() { testInvalid("((int & any) | (int | int))","({any, any} | {any})"); }
		@Test public void test_34265() { testInvalid("((int & any) | (int | int))","((any | any) | {any})"); }
		@Test public void test_34266() { testInvalid("((int & any) | (int | int))","((int | any) | {any})"); }
		@Test public void test_34267() { testInvalid("((int & any) | (int | int))","((any & any) | {any})"); }
		@Test public void test_34268() { testInvalid("((int & any) | (int | int))","((int & any) | {any})"); }
		@Test public void test_34269() { testInvalid("((int & any) | (int | int))","((any & int) | {any})"); }
		@Test public void test_34270() { testInvalid("((int & any) | (int | int))","({int} | {int})"); }
		@Test public void test_34271() { testInvalid("((int & any) | (int | int))","(!any | {int})"); }
		@Test public void test_34272() { testInvalid("((int & any) | (int | int))","(!int | {int})"); }
		@Test public void test_34273() { testInvalid("((int & any) | (int | int))","({any, int} | {int})"); }
		@Test public void test_34274() { testInvalid("((int & any) | (int | int))","((int & any) | {int})"); }
		@Test public void test_34275() { testInvalid("((int & any) | (int | int))","((any & int) | {int})"); }
		@Test public void test_34276() { testInvalid("((int & any) | (int | int))","((int & int) | {int})"); }
		@Test public void test_34277() { testInvalid("((int & any) | (int | int))","({any} | !any)"); }
		@Test public void test_34278() { testInvalid("((int & any) | (int | int))","({int} | !any)"); }
		@Test public void test_34279() { testInvalid("((int & any) | (int | int))","({any, any} | !any)"); }
		@Test public void test_34280() { testInvalid("((int & any) | (int | int))","({int, int} | !any)"); }
		@Test public void test_34281() { testInvalid("((int & any) | (int | int))","((any | any) | !any)"); }
		@Test public void test_34282() { testInvalid("((int & any) | (int | int))","((int | any) | !any)"); }
		@Test public void test_34283() { testValid("((int & any) | (int | int))","((int | int) | !any)"); }
		@Test public void test_34284() { testValid("((int & any) | (int | int))","((int & int) | !any)"); }
		@Test public void test_34285() { testInvalid("((int & any) | (int | int))","(!int | !int)"); }
		@Test public void test_34286() { testInvalid("((int & any) | (int | int))","({any, any} | !int)"); }
		@Test public void test_34287() { testInvalid("((int & any) | (int | int))","({int, int} | !int)"); }
		@Test public void test_34288() { testInvalid("((int & any) | (int | int))","((int | any) | !int)"); }
		@Test public void test_34289() { testInvalid("((int & any) | (int | int))","((any | int) | !int)"); }
		@Test public void test_34290() { testInvalid("((int & any) | (int | int))","((any & int) | !int)"); }
		@Test public void test_34291() { testInvalid("((int & any) | (int | int))","((int & int) | !int)"); }
		@Test public void test_34292() { testInvalid("((int & any) | (int | int))","({int} | {any, any})"); }
		@Test public void test_34293() { testInvalid("((int & any) | (int | int))","(!any | {any, any})"); }
		@Test public void test_34294() { testInvalid("((int & any) | (int | int))","(!int | {any, any})"); }
		@Test public void test_34295() { testInvalid("((int & any) | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_34296() { testInvalid("((int & any) | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_34297() { testInvalid("((int & any) | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_34298() { testInvalid("((int & any) | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_34299() { testInvalid("((int & any) | (int | int))","(!int | {int, any})"); }
		@Test public void test_34300() { testInvalid("((int & any) | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_34301() { testInvalid("((int & any) | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_34302() { testInvalid("((int & any) | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_34303() { testInvalid("((int & any) | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_34304() { testInvalid("((int & any) | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_34305() { testInvalid("((int & any) | (int | int))","({any} | {any, int})"); }
		@Test public void test_34306() { testInvalid("((int & any) | (int | int))","(!int | {any, int})"); }
		@Test public void test_34307() { testInvalid("((int & any) | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_34308() { testInvalid("((int & any) | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_34309() { testInvalid("((int & any) | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_34310() { testInvalid("((int & any) | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_34311() { testInvalid("((int & any) | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_34312() { testInvalid("((int & any) | (int | int))","(!any | {int, int})"); }
		@Test public void test_34313() { testInvalid("((int & any) | (int | int))","(!int | {int, int})"); }
		@Test public void test_34314() { testInvalid("((int & any) | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_34315() { testInvalid("((int & any) | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_34316() { testInvalid("((int & any) | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_34317() { testInvalid("((int & any) | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_34318() { testInvalid("((int & any) | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_34319() { testInvalid("((int & any) | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_34320() { testInvalid("((int & any) | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_34321() { testInvalid("((int & any) | (int | int))","({any} | (any | any))"); }
		@Test public void test_34322() { testInvalid("((int & any) | (int | int))","(!any | (any | any))"); }
		@Test public void test_34323() { testInvalid("((int & any) | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_34324() { testInvalid("((int & any) | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_34325() { testInvalid("((int & any) | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_34326() { testInvalid("((int & any) | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_34327() { testInvalid("((int & any) | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_34328() { testInvalid("((int & any) | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_34329() { testInvalid("((int & any) | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_34330() { testInvalid("((int & any) | (int | int))","({any} | (int | any))"); }
		@Test public void test_34331() { testInvalid("((int & any) | (int | int))","(!int | (int | any))"); }
		@Test public void test_34332() { testInvalid("((int & any) | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_34333() { testInvalid("((int & any) | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_34334() { testInvalid("((int & any) | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_34335() { testInvalid("((int & any) | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_34336() { testInvalid("((int & any) | (int | int))","({any} | (any | int))"); }
		@Test public void test_34337() { testInvalid("((int & any) | (int | int))","({int} | (any | int))"); }
		@Test public void test_34338() { testInvalid("((int & any) | (int | int))","(!any | (any | int))"); }
		@Test public void test_34339() { testInvalid("((int & any) | (int | int))","(!int | (any | int))"); }
		@Test public void test_34340() { testInvalid("((int & any) | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_34341() { testInvalid("((int & any) | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_34342() { testInvalid("((int & any) | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_34343() { testInvalid("((int & any) | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_34344() { testInvalid("((int & any) | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_34345() { testInvalid("((int & any) | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_34346() { testInvalid("((int & any) | (int | int))","({int} | (int | int))"); }
		@Test public void test_34347() { testValid("((int & any) | (int | int))","(!any | (int | int))"); }
		@Test public void test_34348() { testInvalid("((int & any) | (int | int))","(!int | (int | int))"); }
		@Test public void test_34349() { testInvalid("((int & any) | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_34350() { testInvalid("((int & any) | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_34351() { testInvalid("((int & any) | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_34352() { testValid("((int & any) | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_34353() { testInvalid("((int & any) | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_34354() { testValid("((int & any) | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_34355() { testValid("((int & any) | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_34356() { testInvalid("((int & any) | (int | int))","(!any | (any & any))"); }
		@Test public void test_34357() { testInvalid("((int & any) | (int | int))","(!int | (any & any))"); }
		@Test public void test_34358() { testInvalid("((int & any) | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_34359() { testInvalid("((int & any) | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_34360() { testInvalid("((int & any) | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_34361() { testInvalid("((int & any) | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_34362() { testInvalid("((int & any) | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_34363() { testInvalid("((int & any) | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_34364() { testInvalid("((int & any) | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_34365() { testInvalid("((int & any) | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_34366() { testInvalid("((int & any) | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_34367() { testInvalid("((int & any) | (int | int))","({any} | (int & any))"); }
		@Test public void test_34368() { testInvalid("((int & int) | (int | int))","{int}"); }
		@Test public void test_34369() { testInvalid("((int & int) | (int | int))","{any, any}"); }
		@Test public void test_34370() { testInvalid("((int & int) | (int | int))","{int, int}"); }
		@Test public void test_34371() { testInvalid("((int & int) | (int | int))","(any | int)"); }
		@Test public void test_34372() { testValid("((int & int) | (int | int))","(int & any)"); }
		@Test public void test_34373() { testInvalid("((int & int) | (int | int))","{{any}}"); }
		@Test public void test_34374() { testInvalid("((int & int) | (int | int))","{{int, any}}"); }
		@Test public void test_34375() { testInvalid("((int & int) | (int | int))","{{int, int}}"); }
		@Test public void test_34376() { testInvalid("((int & int) | (int | int))","{(any | int)}"); }
		@Test public void test_34377() { testInvalid("((int & int) | (int | int))","!{int, any}"); }
		@Test public void test_34378() { testInvalid("((int & int) | (int | int))","!{int, int}"); }
		@Test public void test_34379() { testValid("((int & int) | (int | int))","!(any | any)"); }
		@Test public void test_34380() { testValid("((int & int) | (int | int))","!(any & any)"); }
		@Test public void test_34381() { testInvalid("((int & int) | (int | int))","!(int & int)"); }
		@Test public void test_34382() { testInvalid("((int & int) | (int | int))","{{int}, {any}}"); }
		@Test public void test_34383() { testInvalid("((int & int) | (int | int))","{!int, {any}}"); }
		@Test public void test_34384() { testInvalid("((int & int) | (int | int))","{{int, int}, {any}}"); }
		@Test public void test_34385() { testInvalid("((int & int) | (int | int))","{(any | int), {any}}"); }
		@Test public void test_34386() { testInvalid("((int & int) | (int | int))","{!int, {int}}"); }
		@Test public void test_34387() { testInvalid("((int & int) | (int | int))","{{any, any}, {int}}"); }
		@Test public void test_34388() { testInvalid("((int & int) | (int | int))","{(any | any), {int}}"); }
		@Test public void test_34389() { testInvalid("((int & int) | (int | int))","{(any & any), {int}}"); }
		@Test public void test_34390() { testInvalid("((int & int) | (int | int))","{(any & int), {int}}"); }
		@Test public void test_34391() { testInvalid("((int & int) | (int | int))","{{any, any}, !int}"); }
		@Test public void test_34392() { testInvalid("((int & int) | (int | int))","{{any, int}, !int}"); }
		@Test public void test_34393() { testInvalid("((int & int) | (int | int))","{(any | any), !int}"); }
		@Test public void test_34394() { testInvalid("((int & int) | (int | int))","{(int | any), !int}"); }
		@Test public void test_34395() { testInvalid("((int & int) | (int | int))","{(any & any), !int}"); }
		@Test public void test_34396() { testInvalid("((int & int) | (int | int))","{(int & any), !int}"); }
		@Test public void test_34397() { testInvalid("((int & int) | (int | int))","{(int & int), !int}"); }
		@Test public void test_34398() { testInvalid("((int & int) | (int | int))","{{any}, {any, any}}"); }
		@Test public void test_34399() { testInvalid("((int & int) | (int | int))","{{int}, {any, any}}"); }
		@Test public void test_34400() { testInvalid("((int & int) | (int | int))","{{int, int}, {any, any}}"); }
		@Test public void test_34401() { testInvalid("((int & int) | (int | int))","{(any | any), {any, any}}"); }
		@Test public void test_34402() { testInvalid("((int & int) | (int | int))","{(any | int), {any, any}}"); }
		@Test public void test_34403() { testInvalid("((int & int) | (int | int))","{!int, {int, any}}"); }
		@Test public void test_34404() { testInvalid("((int & int) | (int | int))","{{int, any}, {int, any}}"); }
		@Test public void test_34405() { testInvalid("((int & int) | (int | int))","{{any, int}, {int, any}}"); }
		@Test public void test_34406() { testInvalid("((int & int) | (int | int))","{(any & int), {int, any}}"); }
		@Test public void test_34407() { testInvalid("((int & int) | (int | int))","{{any}, {any, int}}"); }
		@Test public void test_34408() { testInvalid("((int & int) | (int | int))","{{int, int}, {any, int}}"); }
		@Test public void test_34409() { testInvalid("((int & int) | (int | int))","{(int | int), {any, int}}"); }
		@Test public void test_34410() { testInvalid("((int & int) | (int | int))","{(any & int), {any, int}}"); }
		@Test public void test_34411() { testInvalid("((int & int) | (int | int))","{!int, {int, int}}"); }
		@Test public void test_34412() { testInvalid("((int & int) | (int | int))","{{int, int}, {int, int}}"); }
		@Test public void test_34413() { testInvalid("((int & int) | (int | int))","{(any | any), {int, int}}"); }
		@Test public void test_34414() { testInvalid("((int & int) | (int | int))","{(int | any), {int, int}}"); }
		@Test public void test_34415() { testInvalid("((int & int) | (int | int))","{(int & any), {int, int}}"); }
		@Test public void test_34416() { testInvalid("((int & int) | (int | int))","{{int}, (any | any)}"); }
		@Test public void test_34417() { testInvalid("((int & int) | (int | int))","{{int, any}, (any | any)}"); }
		@Test public void test_34418() { testInvalid("((int & int) | (int | int))","{{any, int}, (any | any)}"); }
		@Test public void test_34419() { testInvalid("((int & int) | (int | int))","{(any | any), (any | any)}"); }
		@Test public void test_34420() { testInvalid("((int & int) | (int | int))","{(int | any), (any | any)}"); }
		@Test public void test_34421() { testInvalid("((int & int) | (int | int))","{(int & int), (any | any)}"); }
		@Test public void test_34422() { testInvalid("((int & int) | (int | int))","{!int, (int | any)}"); }
		@Test public void test_34423() { testInvalid("((int & int) | (int | int))","{{int, int}, (int | any)}"); }
		@Test public void test_34424() { testInvalid("((int & int) | (int | int))","{(any | any), (int | any)}"); }
		@Test public void test_34425() { testInvalid("((int & int) | (int | int))","{(int | int), (int | any)}"); }
		@Test public void test_34426() { testInvalid("((int & int) | (int | int))","{{any}, (any | int)}"); }
		@Test public void test_34427() { testInvalid("((int & int) | (int | int))","{!int, (any | int)}"); }
		@Test public void test_34428() { testInvalid("((int & int) | (int | int))","{(any | any), (any | int)}"); }
		@Test public void test_34429() { testInvalid("((int & int) | (int | int))","{(any | int), (any | int)}"); }
		@Test public void test_34430() { testInvalid("((int & int) | (int | int))","{(any & int), (any | int)}"); }
		@Test public void test_34431() { testInvalid("((int & int) | (int | int))","{{int}, (int | int)}"); }
		@Test public void test_34432() { testInvalid("((int & int) | (int | int))","{{any, any}, (int | int)}"); }
		@Test public void test_34433() { testInvalid("((int & int) | (int | int))","{{int, int}, (int | int)}"); }
		@Test public void test_34434() { testInvalid("((int & int) | (int | int))","{{int}, (any & any)}"); }
		@Test public void test_34435() { testInvalid("((int & int) | (int | int))","{{int, any}, (any & any)}"); }
		@Test public void test_34436() { testInvalid("((int & int) | (int | int))","{{any, int}, (any & any)}"); }
		@Test public void test_34437() { testInvalid("((int & int) | (int | int))","{(int | any), (any & any)}"); }
		@Test public void test_34438() { testInvalid("((int & int) | (int | int))","{(any & any), (any & any)}"); }
		@Test public void test_34439() { testInvalid("((int & int) | (int | int))","{(int & any), (any & any)}"); }
		@Test public void test_34440() { testInvalid("((int & int) | (int | int))","{{any}, (int & any)}"); }
		@Test public void test_34441() { testInvalid("((int & int) | (int | int))","{{int}, (int & any)}"); }
		@Test public void test_34442() { testInvalid("((int & int) | (int | int))","{{any, any}, (int & any)}"); }
		@Test public void test_34443() { testInvalid("((int & int) | (int | int))","{{int, any}, (int & any)}"); }
		@Test public void test_34444() { testInvalid("((int & int) | (int | int))","{(any | int), (int & any)}"); }
		@Test public void test_34445() { testInvalid("((int & int) | (int | int))","{(any & any), (int & any)}"); }
		@Test public void test_34446() { testInvalid("((int & int) | (int | int))","{(int & any), (int & any)}"); }
		@Test public void test_34447() { testInvalid("((int & int) | (int | int))","{(int & int), (int & any)}"); }
		@Test public void test_34448() { testInvalid("((int & int) | (int | int))","{{int, any}, (any & int)}"); }
		@Test public void test_34449() { testInvalid("((int & int) | (int | int))","{(any & any), (any & int)}"); }
		@Test public void test_34450() { testInvalid("((int & int) | (int | int))","{{any, int}, (int & int)}"); }
		@Test public void test_34451() { testInvalid("((int & int) | (int | int))","{(int | int), (int & int)}"); }
		@Test public void test_34452() { testInvalid("((int & int) | (int | int))","{(any & any), (int & int)}"); }
		@Test public void test_34453() { testInvalid("((int & int) | (int | int))","{(any & int), (int & int)}"); }
		@Test public void test_34454() { testInvalid("((int & int) | (int | int))","{(int & int), (int & int)}"); }
		@Test public void test_34455() { testInvalid("((int & int) | (int | int))","(!int | {any})"); }
		@Test public void test_34456() { testInvalid("((int & int) | (int | int))","({any, any} | {any})"); }
		@Test public void test_34457() { testInvalid("((int & int) | (int | int))","((any | any) | {any})"); }
		@Test public void test_34458() { testInvalid("((int & int) | (int | int))","((int | any) | {any})"); }
		@Test public void test_34459() { testInvalid("((int & int) | (int | int))","((any & any) | {any})"); }
		@Test public void test_34460() { testInvalid("((int & int) | (int | int))","((int & any) | {any})"); }
		@Test public void test_34461() { testInvalid("((int & int) | (int | int))","((any & int) | {any})"); }
		@Test public void test_34462() { testInvalid("((int & int) | (int | int))","({int} | {int})"); }
		@Test public void test_34463() { testInvalid("((int & int) | (int | int))","(!any | {int})"); }
		@Test public void test_34464() { testInvalid("((int & int) | (int | int))","(!int | {int})"); }
		@Test public void test_34465() { testInvalid("((int & int) | (int | int))","({any, int} | {int})"); }
		@Test public void test_34466() { testInvalid("((int & int) | (int | int))","((int & any) | {int})"); }
		@Test public void test_34467() { testInvalid("((int & int) | (int | int))","((any & int) | {int})"); }
		@Test public void test_34468() { testInvalid("((int & int) | (int | int))","((int & int) | {int})"); }
		@Test public void test_34469() { testInvalid("((int & int) | (int | int))","({any} | !any)"); }
		@Test public void test_34470() { testInvalid("((int & int) | (int | int))","({int} | !any)"); }
		@Test public void test_34471() { testInvalid("((int & int) | (int | int))","({any, any} | !any)"); }
		@Test public void test_34472() { testInvalid("((int & int) | (int | int))","({int, int} | !any)"); }
		@Test public void test_34473() { testInvalid("((int & int) | (int | int))","((any | any) | !any)"); }
		@Test public void test_34474() { testInvalid("((int & int) | (int | int))","((int | any) | !any)"); }
		@Test public void test_34475() { testValid("((int & int) | (int | int))","((int | int) | !any)"); }
		@Test public void test_34476() { testValid("((int & int) | (int | int))","((int & int) | !any)"); }
		@Test public void test_34477() { testInvalid("((int & int) | (int | int))","(!int | !int)"); }
		@Test public void test_34478() { testInvalid("((int & int) | (int | int))","({any, any} | !int)"); }
		@Test public void test_34479() { testInvalid("((int & int) | (int | int))","({int, int} | !int)"); }
		@Test public void test_34480() { testInvalid("((int & int) | (int | int))","((int | any) | !int)"); }
		@Test public void test_34481() { testInvalid("((int & int) | (int | int))","((any | int) | !int)"); }
		@Test public void test_34482() { testInvalid("((int & int) | (int | int))","((any & int) | !int)"); }
		@Test public void test_34483() { testInvalid("((int & int) | (int | int))","((int & int) | !int)"); }
		@Test public void test_34484() { testInvalid("((int & int) | (int | int))","({int} | {any, any})"); }
		@Test public void test_34485() { testInvalid("((int & int) | (int | int))","(!any | {any, any})"); }
		@Test public void test_34486() { testInvalid("((int & int) | (int | int))","(!int | {any, any})"); }
		@Test public void test_34487() { testInvalid("((int & int) | (int | int))","({any, int} | {any, any})"); }
		@Test public void test_34488() { testInvalid("((int & int) | (int | int))","((int | any) | {any, any})"); }
		@Test public void test_34489() { testInvalid("((int & int) | (int | int))","((any & any) | {any, any})"); }
		@Test public void test_34490() { testInvalid("((int & int) | (int | int))","((any & int) | {any, any})"); }
		@Test public void test_34491() { testInvalid("((int & int) | (int | int))","(!int | {int, any})"); }
		@Test public void test_34492() { testInvalid("((int & int) | (int | int))","({any, int} | {int, any})"); }
		@Test public void test_34493() { testInvalid("((int & int) | (int | int))","((any | any) | {int, any})"); }
		@Test public void test_34494() { testInvalid("((int & int) | (int | int))","((int | any) | {int, any})"); }
		@Test public void test_34495() { testInvalid("((int & int) | (int | int))","((any | int) | {int, any})"); }
		@Test public void test_34496() { testInvalid("((int & int) | (int | int))","((int & any) | {int, any})"); }
		@Test public void test_34497() { testInvalid("((int & int) | (int | int))","({any} | {any, int})"); }
		@Test public void test_34498() { testInvalid("((int & int) | (int | int))","(!int | {any, int})"); }
		@Test public void test_34499() { testInvalid("((int & int) | (int | int))","({any, int} | {any, int})"); }
		@Test public void test_34500() { testInvalid("((int & int) | (int | int))","((any | any) | {any, int})"); }
		@Test public void test_34501() { testInvalid("((int & int) | (int | int))","((any | int) | {any, int})"); }
		@Test public void test_34502() { testInvalid("((int & int) | (int | int))","((int | int) | {any, int})"); }
		@Test public void test_34503() { testInvalid("((int & int) | (int | int))","((int & any) | {any, int})"); }
		@Test public void test_34504() { testInvalid("((int & int) | (int | int))","(!any | {int, int})"); }
		@Test public void test_34505() { testInvalid("((int & int) | (int | int))","(!int | {int, int})"); }
		@Test public void test_34506() { testInvalid("((int & int) | (int | int))","({any, any} | {int, int})"); }
		@Test public void test_34507() { testInvalid("((int & int) | (int | int))","({any, int} | {int, int})"); }
		@Test public void test_34508() { testInvalid("((int & int) | (int | int))","((any | any) | {int, int})"); }
		@Test public void test_34509() { testInvalid("((int & int) | (int | int))","((int | int) | {int, int})"); }
		@Test public void test_34510() { testInvalid("((int & int) | (int | int))","((int & any) | {int, int})"); }
		@Test public void test_34511() { testInvalid("((int & int) | (int | int))","((any & int) | {int, int})"); }
		@Test public void test_34512() { testInvalid("((int & int) | (int | int))","((int & int) | {int, int})"); }
		@Test public void test_34513() { testInvalid("((int & int) | (int | int))","({any} | (any | any))"); }
		@Test public void test_34514() { testInvalid("((int & int) | (int | int))","(!any | (any | any))"); }
		@Test public void test_34515() { testInvalid("((int & int) | (int | int))","({any, any} | (any | any))"); }
		@Test public void test_34516() { testInvalid("((int & int) | (int | int))","({any, int} | (any | any))"); }
		@Test public void test_34517() { testInvalid("((int & int) | (int | int))","({int, int} | (any | any))"); }
		@Test public void test_34518() { testInvalid("((int & int) | (int | int))","((int | any) | (any | any))"); }
		@Test public void test_34519() { testInvalid("((int & int) | (int | int))","((any | int) | (any | any))"); }
		@Test public void test_34520() { testInvalid("((int & int) | (int | int))","((any & int) | (any | any))"); }
		@Test public void test_34521() { testInvalid("((int & int) | (int | int))","((int & int) | (any | any))"); }
		@Test public void test_34522() { testInvalid("((int & int) | (int | int))","({any} | (int | any))"); }
		@Test public void test_34523() { testInvalid("((int & int) | (int | int))","(!int | (int | any))"); }
		@Test public void test_34524() { testInvalid("((int & int) | (int | int))","({int, any} | (int | any))"); }
		@Test public void test_34525() { testInvalid("((int & int) | (int | int))","({any, int} | (int | any))"); }
		@Test public void test_34526() { testInvalid("((int & int) | (int | int))","((int & any) | (int | any))"); }
		@Test public void test_34527() { testInvalid("((int & int) | (int | int))","((any & int) | (int | any))"); }
		@Test public void test_34528() { testInvalid("((int & int) | (int | int))","({any} | (any | int))"); }
		@Test public void test_34529() { testInvalid("((int & int) | (int | int))","({int} | (any | int))"); }
		@Test public void test_34530() { testInvalid("((int & int) | (int | int))","(!any | (any | int))"); }
		@Test public void test_34531() { testInvalid("((int & int) | (int | int))","(!int | (any | int))"); }
		@Test public void test_34532() { testInvalid("((int & int) | (int | int))","({any, int} | (any | int))"); }
		@Test public void test_34533() { testInvalid("((int & int) | (int | int))","({int, int} | (any | int))"); }
		@Test public void test_34534() { testInvalid("((int & int) | (int | int))","((int | any) | (any | int))"); }
		@Test public void test_34535() { testInvalid("((int & int) | (int | int))","((any | int) | (any | int))"); }
		@Test public void test_34536() { testInvalid("((int & int) | (int | int))","((int | int) | (any | int))"); }
		@Test public void test_34537() { testInvalid("((int & int) | (int | int))","((any & any) | (any | int))"); }
		@Test public void test_34538() { testInvalid("((int & int) | (int | int))","({int} | (int | int))"); }
		@Test public void test_34539() { testValid("((int & int) | (int | int))","(!any | (int | int))"); }
		@Test public void test_34540() { testInvalid("((int & int) | (int | int))","(!int | (int | int))"); }
		@Test public void test_34541() { testInvalid("((int & int) | (int | int))","({int, any} | (int | int))"); }
		@Test public void test_34542() { testInvalid("((int & int) | (int | int))","({any, int} | (int | int))"); }
		@Test public void test_34543() { testInvalid("((int & int) | (int | int))","((any | int) | (int | int))"); }
		@Test public void test_34544() { testValid("((int & int) | (int | int))","((int | int) | (int | int))"); }
		@Test public void test_34545() { testInvalid("((int & int) | (int | int))","((any & any) | (int | int))"); }
		@Test public void test_34546() { testValid("((int & int) | (int | int))","((int & any) | (int | int))"); }
		@Test public void test_34547() { testValid("((int & int) | (int | int))","((int & int) | (int | int))"); }
		@Test public void test_34548() { testInvalid("((int & int) | (int | int))","(!any | (any & any))"); }
		@Test public void test_34549() { testInvalid("((int & int) | (int | int))","(!int | (any & any))"); }
		@Test public void test_34550() { testInvalid("((int & int) | (int | int))","({any, any} | (any & any))"); }
		@Test public void test_34551() { testInvalid("((int & int) | (int | int))","({int, any} | (any & any))"); }
		@Test public void test_34552() { testInvalid("((int & int) | (int | int))","({any, int} | (any & any))"); }
		@Test public void test_34553() { testInvalid("((int & int) | (int | int))","({int, int} | (any & any))"); }
		@Test public void test_34554() { testInvalid("((int & int) | (int | int))","((int | any) | (any & any))"); }
		@Test public void test_34555() { testInvalid("((int & int) | (int | int))","((int | int) | (any & any))"); }
		@Test public void test_34556() { testInvalid("((int & int) | (int | int))","((int & any) | (any & any))"); }
		@Test public void test_34557() { testInvalid("((int & int) | (int | int))","((any & int) | (any & any))"); }
		@Test public void test_34558() { testInvalid("((int & int) | (int | int))","((int & int) | (any & any))"); }
		@Test public void test_34559() { testInvalid("((int & int) | (int | int))","({any} | (int & any))"); }
		@Test public void test_34560() { testValid("(!any | (any & any))","{int}"); }
		@Test public void test_34561() { testValid("(!any | (any & any))","{any, any}"); }
		@Test public void test_34562() { testValid("(!any | (any & any))","{int, int}"); }
		@Test public void test_34563() { testValid("(!any | (any & any))","(any | int)"); }
		@Test public void test_34564() { testValid("(!any | (any & any))","(int & any)"); }
		@Test public void test_34565() { testValid("(!any | (any & any))","{{any}}"); }
		@Test public void test_34566() { testValid("(!any | (any & any))","{{int, any}}"); }
		@Test public void test_34567() { testValid("(!any | (any & any))","{{int, int}}"); }
		@Test public void test_34568() { testValid("(!any | (any & any))","{(any | int)}"); }
		@Test public void test_34569() { testValid("(!any | (any & any))","!{int, any}"); }
		@Test public void test_34570() { testValid("(!any | (any & any))","!{int, int}"); }
		@Test public void test_34571() { testValid("(!any | (any & any))","!(any | any)"); }
		@Test public void test_34572() { testValid("(!any | (any & any))","!(any & any)"); }
		@Test public void test_34573() { testValid("(!any | (any & any))","!(int & int)"); }
		@Test public void test_34574() { testValid("(!any | (any & any))","{{int}, {any}}"); }
		@Test public void test_34575() { testValid("(!any | (any & any))","{!int, {any}}"); }
		@Test public void test_34576() { testValid("(!any | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_34577() { testValid("(!any | (any & any))","{(any | int), {any}}"); }
		@Test public void test_34578() { testValid("(!any | (any & any))","{!int, {int}}"); }
		@Test public void test_34579() { testValid("(!any | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_34580() { testValid("(!any | (any & any))","{(any | any), {int}}"); }
		@Test public void test_34581() { testValid("(!any | (any & any))","{(any & any), {int}}"); }
		@Test public void test_34582() { testValid("(!any | (any & any))","{(any & int), {int}}"); }
		@Test public void test_34583() { testValid("(!any | (any & any))","{{any, any}, !int}"); }
		@Test public void test_34584() { testValid("(!any | (any & any))","{{any, int}, !int}"); }
		@Test public void test_34585() { testValid("(!any | (any & any))","{(any | any), !int}"); }
		@Test public void test_34586() { testValid("(!any | (any & any))","{(int | any), !int}"); }
		@Test public void test_34587() { testValid("(!any | (any & any))","{(any & any), !int}"); }
		@Test public void test_34588() { testValid("(!any | (any & any))","{(int & any), !int}"); }
		@Test public void test_34589() { testValid("(!any | (any & any))","{(int & int), !int}"); }
		@Test public void test_34590() { testValid("(!any | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_34591() { testValid("(!any | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_34592() { testValid("(!any | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_34593() { testValid("(!any | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_34594() { testValid("(!any | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_34595() { testValid("(!any | (any & any))","{!int, {int, any}}"); }
		@Test public void test_34596() { testValid("(!any | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_34597() { testValid("(!any | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_34598() { testValid("(!any | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_34599() { testValid("(!any | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_34600() { testValid("(!any | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_34601() { testValid("(!any | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_34602() { testValid("(!any | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_34603() { testValid("(!any | (any & any))","{!int, {int, int}}"); }
		@Test public void test_34604() { testValid("(!any | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_34605() { testValid("(!any | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_34606() { testValid("(!any | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_34607() { testValid("(!any | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_34608() { testValid("(!any | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_34609() { testValid("(!any | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_34610() { testValid("(!any | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_34611() { testValid("(!any | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_34612() { testValid("(!any | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_34613() { testValid("(!any | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_34614() { testValid("(!any | (any & any))","{!int, (int | any)}"); }
		@Test public void test_34615() { testValid("(!any | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_34616() { testValid("(!any | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_34617() { testValid("(!any | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_34618() { testValid("(!any | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_34619() { testValid("(!any | (any & any))","{!int, (any | int)}"); }
		@Test public void test_34620() { testValid("(!any | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_34621() { testValid("(!any | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_34622() { testValid("(!any | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_34623() { testValid("(!any | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_34624() { testValid("(!any | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_34625() { testValid("(!any | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_34626() { testValid("(!any | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_34627() { testValid("(!any | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_34628() { testValid("(!any | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_34629() { testValid("(!any | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_34630() { testValid("(!any | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_34631() { testValid("(!any | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_34632() { testValid("(!any | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_34633() { testValid("(!any | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_34634() { testValid("(!any | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_34635() { testValid("(!any | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_34636() { testValid("(!any | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_34637() { testValid("(!any | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_34638() { testValid("(!any | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_34639() { testValid("(!any | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_34640() { testValid("(!any | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_34641() { testValid("(!any | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_34642() { testValid("(!any | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_34643() { testValid("(!any | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_34644() { testValid("(!any | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_34645() { testValid("(!any | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_34646() { testValid("(!any | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_34647() { testValid("(!any | (any & any))","(!int | {any})"); }
		@Test public void test_34648() { testValid("(!any | (any & any))","({any, any} | {any})"); }
		@Test public void test_34649() { testValid("(!any | (any & any))","((any | any) | {any})"); }
		@Test public void test_34650() { testValid("(!any | (any & any))","((int | any) | {any})"); }
		@Test public void test_34651() { testValid("(!any | (any & any))","((any & any) | {any})"); }
		@Test public void test_34652() { testValid("(!any | (any & any))","((int & any) | {any})"); }
		@Test public void test_34653() { testValid("(!any | (any & any))","((any & int) | {any})"); }
		@Test public void test_34654() { testValid("(!any | (any & any))","({int} | {int})"); }
		@Test public void test_34655() { testValid("(!any | (any & any))","(!any | {int})"); }
		@Test public void test_34656() { testValid("(!any | (any & any))","(!int | {int})"); }
		@Test public void test_34657() { testValid("(!any | (any & any))","({any, int} | {int})"); }
		@Test public void test_34658() { testValid("(!any | (any & any))","((int & any) | {int})"); }
		@Test public void test_34659() { testValid("(!any | (any & any))","((any & int) | {int})"); }
		@Test public void test_34660() { testValid("(!any | (any & any))","((int & int) | {int})"); }
		@Test public void test_34661() { testValid("(!any | (any & any))","({any} | !any)"); }
		@Test public void test_34662() { testValid("(!any | (any & any))","({int} | !any)"); }
		@Test public void test_34663() { testValid("(!any | (any & any))","({any, any} | !any)"); }
		@Test public void test_34664() { testValid("(!any | (any & any))","({int, int} | !any)"); }
		@Test public void test_34665() { testValid("(!any | (any & any))","((any | any) | !any)"); }
		@Test public void test_34666() { testValid("(!any | (any & any))","((int | any) | !any)"); }
		@Test public void test_34667() { testValid("(!any | (any & any))","((int | int) | !any)"); }
		@Test public void test_34668() { testValid("(!any | (any & any))","((int & int) | !any)"); }
		@Test public void test_34669() { testValid("(!any | (any & any))","(!int | !int)"); }
		@Test public void test_34670() { testValid("(!any | (any & any))","({any, any} | !int)"); }
		@Test public void test_34671() { testValid("(!any | (any & any))","({int, int} | !int)"); }
		@Test public void test_34672() { testValid("(!any | (any & any))","((int | any) | !int)"); }
		@Test public void test_34673() { testValid("(!any | (any & any))","((any | int) | !int)"); }
		@Test public void test_34674() { testValid("(!any | (any & any))","((any & int) | !int)"); }
		@Test public void test_34675() { testValid("(!any | (any & any))","((int & int) | !int)"); }
		@Test public void test_34676() { testValid("(!any | (any & any))","({int} | {any, any})"); }
		@Test public void test_34677() { testValid("(!any | (any & any))","(!any | {any, any})"); }
		@Test public void test_34678() { testValid("(!any | (any & any))","(!int | {any, any})"); }
		@Test public void test_34679() { testValid("(!any | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_34680() { testValid("(!any | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_34681() { testValid("(!any | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_34682() { testValid("(!any | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_34683() { testValid("(!any | (any & any))","(!int | {int, any})"); }
		@Test public void test_34684() { testValid("(!any | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_34685() { testValid("(!any | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_34686() { testValid("(!any | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_34687() { testValid("(!any | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_34688() { testValid("(!any | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_34689() { testValid("(!any | (any & any))","({any} | {any, int})"); }
		@Test public void test_34690() { testValid("(!any | (any & any))","(!int | {any, int})"); }
		@Test public void test_34691() { testValid("(!any | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_34692() { testValid("(!any | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_34693() { testValid("(!any | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_34694() { testValid("(!any | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_34695() { testValid("(!any | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_34696() { testValid("(!any | (any & any))","(!any | {int, int})"); }
		@Test public void test_34697() { testValid("(!any | (any & any))","(!int | {int, int})"); }
		@Test public void test_34698() { testValid("(!any | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_34699() { testValid("(!any | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_34700() { testValid("(!any | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_34701() { testValid("(!any | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_34702() { testValid("(!any | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_34703() { testValid("(!any | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_34704() { testValid("(!any | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_34705() { testValid("(!any | (any & any))","({any} | (any | any))"); }
		@Test public void test_34706() { testValid("(!any | (any & any))","(!any | (any | any))"); }
		@Test public void test_34707() { testValid("(!any | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_34708() { testValid("(!any | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_34709() { testValid("(!any | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_34710() { testValid("(!any | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_34711() { testValid("(!any | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_34712() { testValid("(!any | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_34713() { testValid("(!any | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_34714() { testValid("(!any | (any & any))","({any} | (int | any))"); }
		@Test public void test_34715() { testValid("(!any | (any & any))","(!int | (int | any))"); }
		@Test public void test_34716() { testValid("(!any | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_34717() { testValid("(!any | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_34718() { testValid("(!any | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_34719() { testValid("(!any | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_34720() { testValid("(!any | (any & any))","({any} | (any | int))"); }
		@Test public void test_34721() { testValid("(!any | (any & any))","({int} | (any | int))"); }
		@Test public void test_34722() { testValid("(!any | (any & any))","(!any | (any | int))"); }
		@Test public void test_34723() { testValid("(!any | (any & any))","(!int | (any | int))"); }
		@Test public void test_34724() { testValid("(!any | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_34725() { testValid("(!any | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_34726() { testValid("(!any | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_34727() { testValid("(!any | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_34728() { testValid("(!any | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_34729() { testValid("(!any | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_34730() { testValid("(!any | (any & any))","({int} | (int | int))"); }
		@Test public void test_34731() { testValid("(!any | (any & any))","(!any | (int | int))"); }
		@Test public void test_34732() { testValid("(!any | (any & any))","(!int | (int | int))"); }
		@Test public void test_34733() { testValid("(!any | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_34734() { testValid("(!any | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_34735() { testValid("(!any | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_34736() { testValid("(!any | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_34737() { testValid("(!any | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_34738() { testValid("(!any | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_34739() { testValid("(!any | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_34740() { testValid("(!any | (any & any))","(!any | (any & any))"); }
		@Test public void test_34741() { testValid("(!any | (any & any))","(!int | (any & any))"); }
		@Test public void test_34742() { testValid("(!any | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_34743() { testValid("(!any | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_34744() { testValid("(!any | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_34745() { testValid("(!any | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_34746() { testValid("(!any | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_34747() { testValid("(!any | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_34748() { testValid("(!any | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_34749() { testValid("(!any | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_34750() { testValid("(!any | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_34751() { testValid("(!any | (any & any))","({any} | (int & any))"); }
		@Test public void test_34752() { testValid("(!int | (any & any))","{int}"); }
		@Test public void test_34753() { testValid("(!int | (any & any))","{any, any}"); }
		@Test public void test_34754() { testValid("(!int | (any & any))","{int, int}"); }
		@Test public void test_34755() { testValid("(!int | (any & any))","(any | int)"); }
		@Test public void test_34756() { testValid("(!int | (any & any))","(int & any)"); }
		@Test public void test_34757() { testValid("(!int | (any & any))","{{any}}"); }
		@Test public void test_34758() { testValid("(!int | (any & any))","{{int, any}}"); }
		@Test public void test_34759() { testValid("(!int | (any & any))","{{int, int}}"); }
		@Test public void test_34760() { testValid("(!int | (any & any))","{(any | int)}"); }
		@Test public void test_34761() { testValid("(!int | (any & any))","!{int, any}"); }
		@Test public void test_34762() { testValid("(!int | (any & any))","!{int, int}"); }
		@Test public void test_34763() { testValid("(!int | (any & any))","!(any | any)"); }
		@Test public void test_34764() { testValid("(!int | (any & any))","!(any & any)"); }
		@Test public void test_34765() { testValid("(!int | (any & any))","!(int & int)"); }
		@Test public void test_34766() { testValid("(!int | (any & any))","{{int}, {any}}"); }
		@Test public void test_34767() { testValid("(!int | (any & any))","{!int, {any}}"); }
		@Test public void test_34768() { testValid("(!int | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_34769() { testValid("(!int | (any & any))","{(any | int), {any}}"); }
		@Test public void test_34770() { testValid("(!int | (any & any))","{!int, {int}}"); }
		@Test public void test_34771() { testValid("(!int | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_34772() { testValid("(!int | (any & any))","{(any | any), {int}}"); }
		@Test public void test_34773() { testValid("(!int | (any & any))","{(any & any), {int}}"); }
		@Test public void test_34774() { testValid("(!int | (any & any))","{(any & int), {int}}"); }
		@Test public void test_34775() { testValid("(!int | (any & any))","{{any, any}, !int}"); }
		@Test public void test_34776() { testValid("(!int | (any & any))","{{any, int}, !int}"); }
		@Test public void test_34777() { testValid("(!int | (any & any))","{(any | any), !int}"); }
		@Test public void test_34778() { testValid("(!int | (any & any))","{(int | any), !int}"); }
		@Test public void test_34779() { testValid("(!int | (any & any))","{(any & any), !int}"); }
		@Test public void test_34780() { testValid("(!int | (any & any))","{(int & any), !int}"); }
		@Test public void test_34781() { testValid("(!int | (any & any))","{(int & int), !int}"); }
		@Test public void test_34782() { testValid("(!int | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_34783() { testValid("(!int | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_34784() { testValid("(!int | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_34785() { testValid("(!int | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_34786() { testValid("(!int | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_34787() { testValid("(!int | (any & any))","{!int, {int, any}}"); }
		@Test public void test_34788() { testValid("(!int | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_34789() { testValid("(!int | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_34790() { testValid("(!int | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_34791() { testValid("(!int | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_34792() { testValid("(!int | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_34793() { testValid("(!int | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_34794() { testValid("(!int | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_34795() { testValid("(!int | (any & any))","{!int, {int, int}}"); }
		@Test public void test_34796() { testValid("(!int | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_34797() { testValid("(!int | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_34798() { testValid("(!int | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_34799() { testValid("(!int | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_34800() { testValid("(!int | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_34801() { testValid("(!int | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_34802() { testValid("(!int | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_34803() { testValid("(!int | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_34804() { testValid("(!int | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_34805() { testValid("(!int | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_34806() { testValid("(!int | (any & any))","{!int, (int | any)}"); }
		@Test public void test_34807() { testValid("(!int | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_34808() { testValid("(!int | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_34809() { testValid("(!int | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_34810() { testValid("(!int | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_34811() { testValid("(!int | (any & any))","{!int, (any | int)}"); }
		@Test public void test_34812() { testValid("(!int | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_34813() { testValid("(!int | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_34814() { testValid("(!int | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_34815() { testValid("(!int | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_34816() { testValid("(!int | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_34817() { testValid("(!int | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_34818() { testValid("(!int | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_34819() { testValid("(!int | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_34820() { testValid("(!int | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_34821() { testValid("(!int | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_34822() { testValid("(!int | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_34823() { testValid("(!int | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_34824() { testValid("(!int | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_34825() { testValid("(!int | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_34826() { testValid("(!int | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_34827() { testValid("(!int | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_34828() { testValid("(!int | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_34829() { testValid("(!int | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_34830() { testValid("(!int | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_34831() { testValid("(!int | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_34832() { testValid("(!int | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_34833() { testValid("(!int | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_34834() { testValid("(!int | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_34835() { testValid("(!int | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_34836() { testValid("(!int | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_34837() { testValid("(!int | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_34838() { testValid("(!int | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_34839() { testValid("(!int | (any & any))","(!int | {any})"); }
		@Test public void test_34840() { testValid("(!int | (any & any))","({any, any} | {any})"); }
		@Test public void test_34841() { testValid("(!int | (any & any))","((any | any) | {any})"); }
		@Test public void test_34842() { testValid("(!int | (any & any))","((int | any) | {any})"); }
		@Test public void test_34843() { testValid("(!int | (any & any))","((any & any) | {any})"); }
		@Test public void test_34844() { testValid("(!int | (any & any))","((int & any) | {any})"); }
		@Test public void test_34845() { testValid("(!int | (any & any))","((any & int) | {any})"); }
		@Test public void test_34846() { testValid("(!int | (any & any))","({int} | {int})"); }
		@Test public void test_34847() { testValid("(!int | (any & any))","(!any | {int})"); }
		@Test public void test_34848() { testValid("(!int | (any & any))","(!int | {int})"); }
		@Test public void test_34849() { testValid("(!int | (any & any))","({any, int} | {int})"); }
		@Test public void test_34850() { testValid("(!int | (any & any))","((int & any) | {int})"); }
		@Test public void test_34851() { testValid("(!int | (any & any))","((any & int) | {int})"); }
		@Test public void test_34852() { testValid("(!int | (any & any))","((int & int) | {int})"); }
		@Test public void test_34853() { testValid("(!int | (any & any))","({any} | !any)"); }
		@Test public void test_34854() { testValid("(!int | (any & any))","({int} | !any)"); }
		@Test public void test_34855() { testValid("(!int | (any & any))","({any, any} | !any)"); }
		@Test public void test_34856() { testValid("(!int | (any & any))","({int, int} | !any)"); }
		@Test public void test_34857() { testValid("(!int | (any & any))","((any | any) | !any)"); }
		@Test public void test_34858() { testValid("(!int | (any & any))","((int | any) | !any)"); }
		@Test public void test_34859() { testValid("(!int | (any & any))","((int | int) | !any)"); }
		@Test public void test_34860() { testValid("(!int | (any & any))","((int & int) | !any)"); }
		@Test public void test_34861() { testValid("(!int | (any & any))","(!int | !int)"); }
		@Test public void test_34862() { testValid("(!int | (any & any))","({any, any} | !int)"); }
		@Test public void test_34863() { testValid("(!int | (any & any))","({int, int} | !int)"); }
		@Test public void test_34864() { testValid("(!int | (any & any))","((int | any) | !int)"); }
		@Test public void test_34865() { testValid("(!int | (any & any))","((any | int) | !int)"); }
		@Test public void test_34866() { testValid("(!int | (any & any))","((any & int) | !int)"); }
		@Test public void test_34867() { testValid("(!int | (any & any))","((int & int) | !int)"); }
		@Test public void test_34868() { testValid("(!int | (any & any))","({int} | {any, any})"); }
		@Test public void test_34869() { testValid("(!int | (any & any))","(!any | {any, any})"); }
		@Test public void test_34870() { testValid("(!int | (any & any))","(!int | {any, any})"); }
		@Test public void test_34871() { testValid("(!int | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_34872() { testValid("(!int | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_34873() { testValid("(!int | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_34874() { testValid("(!int | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_34875() { testValid("(!int | (any & any))","(!int | {int, any})"); }
		@Test public void test_34876() { testValid("(!int | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_34877() { testValid("(!int | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_34878() { testValid("(!int | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_34879() { testValid("(!int | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_34880() { testValid("(!int | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_34881() { testValid("(!int | (any & any))","({any} | {any, int})"); }
		@Test public void test_34882() { testValid("(!int | (any & any))","(!int | {any, int})"); }
		@Test public void test_34883() { testValid("(!int | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_34884() { testValid("(!int | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_34885() { testValid("(!int | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_34886() { testValid("(!int | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_34887() { testValid("(!int | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_34888() { testValid("(!int | (any & any))","(!any | {int, int})"); }
		@Test public void test_34889() { testValid("(!int | (any & any))","(!int | {int, int})"); }
		@Test public void test_34890() { testValid("(!int | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_34891() { testValid("(!int | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_34892() { testValid("(!int | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_34893() { testValid("(!int | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_34894() { testValid("(!int | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_34895() { testValid("(!int | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_34896() { testValid("(!int | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_34897() { testValid("(!int | (any & any))","({any} | (any | any))"); }
		@Test public void test_34898() { testValid("(!int | (any & any))","(!any | (any | any))"); }
		@Test public void test_34899() { testValid("(!int | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_34900() { testValid("(!int | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_34901() { testValid("(!int | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_34902() { testValid("(!int | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_34903() { testValid("(!int | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_34904() { testValid("(!int | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_34905() { testValid("(!int | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_34906() { testValid("(!int | (any & any))","({any} | (int | any))"); }
		@Test public void test_34907() { testValid("(!int | (any & any))","(!int | (int | any))"); }
		@Test public void test_34908() { testValid("(!int | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_34909() { testValid("(!int | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_34910() { testValid("(!int | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_34911() { testValid("(!int | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_34912() { testValid("(!int | (any & any))","({any} | (any | int))"); }
		@Test public void test_34913() { testValid("(!int | (any & any))","({int} | (any | int))"); }
		@Test public void test_34914() { testValid("(!int | (any & any))","(!any | (any | int))"); }
		@Test public void test_34915() { testValid("(!int | (any & any))","(!int | (any | int))"); }
		@Test public void test_34916() { testValid("(!int | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_34917() { testValid("(!int | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_34918() { testValid("(!int | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_34919() { testValid("(!int | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_34920() { testValid("(!int | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_34921() { testValid("(!int | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_34922() { testValid("(!int | (any & any))","({int} | (int | int))"); }
		@Test public void test_34923() { testValid("(!int | (any & any))","(!any | (int | int))"); }
		@Test public void test_34924() { testValid("(!int | (any & any))","(!int | (int | int))"); }
		@Test public void test_34925() { testValid("(!int | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_34926() { testValid("(!int | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_34927() { testValid("(!int | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_34928() { testValid("(!int | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_34929() { testValid("(!int | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_34930() { testValid("(!int | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_34931() { testValid("(!int | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_34932() { testValid("(!int | (any & any))","(!any | (any & any))"); }
		@Test public void test_34933() { testValid("(!int | (any & any))","(!int | (any & any))"); }
		@Test public void test_34934() { testValid("(!int | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_34935() { testValid("(!int | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_34936() { testValid("(!int | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_34937() { testValid("(!int | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_34938() { testValid("(!int | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_34939() { testValid("(!int | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_34940() { testValid("(!int | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_34941() { testValid("(!int | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_34942() { testValid("(!int | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_34943() { testValid("(!int | (any & any))","({any} | (int & any))"); }
		@Test public void test_34944() { testValid("({any, any} | (any & any))","{int}"); }
		@Test public void test_34945() { testValid("({any, any} | (any & any))","{any, any}"); }
		@Test public void test_34946() { testValid("({any, any} | (any & any))","{int, int}"); }
		@Test public void test_34947() { testValid("({any, any} | (any & any))","(any | int)"); }
		@Test public void test_34948() { testValid("({any, any} | (any & any))","(int & any)"); }
		@Test public void test_34949() { testValid("({any, any} | (any & any))","{{any}}"); }
		@Test public void test_34950() { testValid("({any, any} | (any & any))","{{int, any}}"); }
		@Test public void test_34951() { testValid("({any, any} | (any & any))","{{int, int}}"); }
		@Test public void test_34952() { testValid("({any, any} | (any & any))","{(any | int)}"); }
		@Test public void test_34953() { testValid("({any, any} | (any & any))","!{int, any}"); }
		@Test public void test_34954() { testValid("({any, any} | (any & any))","!{int, int}"); }
		@Test public void test_34955() { testValid("({any, any} | (any & any))","!(any | any)"); }
		@Test public void test_34956() { testValid("({any, any} | (any & any))","!(any & any)"); }
		@Test public void test_34957() { testValid("({any, any} | (any & any))","!(int & int)"); }
		@Test public void test_34958() { testValid("({any, any} | (any & any))","{{int}, {any}}"); }
		@Test public void test_34959() { testValid("({any, any} | (any & any))","{!int, {any}}"); }
		@Test public void test_34960() { testValid("({any, any} | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_34961() { testValid("({any, any} | (any & any))","{(any | int), {any}}"); }
		@Test public void test_34962() { testValid("({any, any} | (any & any))","{!int, {int}}"); }
		@Test public void test_34963() { testValid("({any, any} | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_34964() { testValid("({any, any} | (any & any))","{(any | any), {int}}"); }
		@Test public void test_34965() { testValid("({any, any} | (any & any))","{(any & any), {int}}"); }
		@Test public void test_34966() { testValid("({any, any} | (any & any))","{(any & int), {int}}"); }
		@Test public void test_34967() { testValid("({any, any} | (any & any))","{{any, any}, !int}"); }
		@Test public void test_34968() { testValid("({any, any} | (any & any))","{{any, int}, !int}"); }
		@Test public void test_34969() { testValid("({any, any} | (any & any))","{(any | any), !int}"); }
		@Test public void test_34970() { testValid("({any, any} | (any & any))","{(int | any), !int}"); }
		@Test public void test_34971() { testValid("({any, any} | (any & any))","{(any & any), !int}"); }
		@Test public void test_34972() { testValid("({any, any} | (any & any))","{(int & any), !int}"); }
		@Test public void test_34973() { testValid("({any, any} | (any & any))","{(int & int), !int}"); }
		@Test public void test_34974() { testValid("({any, any} | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_34975() { testValid("({any, any} | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_34976() { testValid("({any, any} | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_34977() { testValid("({any, any} | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_34978() { testValid("({any, any} | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_34979() { testValid("({any, any} | (any & any))","{!int, {int, any}}"); }
		@Test public void test_34980() { testValid("({any, any} | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_34981() { testValid("({any, any} | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_34982() { testValid("({any, any} | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_34983() { testValid("({any, any} | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_34984() { testValid("({any, any} | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_34985() { testValid("({any, any} | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_34986() { testValid("({any, any} | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_34987() { testValid("({any, any} | (any & any))","{!int, {int, int}}"); }
		@Test public void test_34988() { testValid("({any, any} | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_34989() { testValid("({any, any} | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_34990() { testValid("({any, any} | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_34991() { testValid("({any, any} | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_34992() { testValid("({any, any} | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_34993() { testValid("({any, any} | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_34994() { testValid("({any, any} | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_34995() { testValid("({any, any} | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_34996() { testValid("({any, any} | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_34997() { testValid("({any, any} | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_34998() { testValid("({any, any} | (any & any))","{!int, (int | any)}"); }
		@Test public void test_34999() { testValid("({any, any} | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35000() { testValid("({any, any} | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35001() { testValid("({any, any} | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35002() { testValid("({any, any} | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35003() { testValid("({any, any} | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35004() { testValid("({any, any} | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35005() { testValid("({any, any} | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35006() { testValid("({any, any} | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35007() { testValid("({any, any} | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35008() { testValid("({any, any} | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35009() { testValid("({any, any} | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35010() { testValid("({any, any} | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35011() { testValid("({any, any} | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35012() { testValid("({any, any} | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35013() { testValid("({any, any} | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35014() { testValid("({any, any} | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35015() { testValid("({any, any} | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35016() { testValid("({any, any} | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35017() { testValid("({any, any} | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35018() { testValid("({any, any} | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35019() { testValid("({any, any} | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35020() { testValid("({any, any} | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35021() { testValid("({any, any} | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35022() { testValid("({any, any} | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35023() { testValid("({any, any} | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35024() { testValid("({any, any} | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35025() { testValid("({any, any} | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35026() { testValid("({any, any} | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35027() { testValid("({any, any} | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35028() { testValid("({any, any} | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35029() { testValid("({any, any} | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35030() { testValid("({any, any} | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35031() { testValid("({any, any} | (any & any))","(!int | {any})"); }
		@Test public void test_35032() { testValid("({any, any} | (any & any))","({any, any} | {any})"); }
		@Test public void test_35033() { testValid("({any, any} | (any & any))","((any | any) | {any})"); }
		@Test public void test_35034() { testValid("({any, any} | (any & any))","((int | any) | {any})"); }
		@Test public void test_35035() { testValid("({any, any} | (any & any))","((any & any) | {any})"); }
		@Test public void test_35036() { testValid("({any, any} | (any & any))","((int & any) | {any})"); }
		@Test public void test_35037() { testValid("({any, any} | (any & any))","((any & int) | {any})"); }
		@Test public void test_35038() { testValid("({any, any} | (any & any))","({int} | {int})"); }
		@Test public void test_35039() { testValid("({any, any} | (any & any))","(!any | {int})"); }
		@Test public void test_35040() { testValid("({any, any} | (any & any))","(!int | {int})"); }
		@Test public void test_35041() { testValid("({any, any} | (any & any))","({any, int} | {int})"); }
		@Test public void test_35042() { testValid("({any, any} | (any & any))","((int & any) | {int})"); }
		@Test public void test_35043() { testValid("({any, any} | (any & any))","((any & int) | {int})"); }
		@Test public void test_35044() { testValid("({any, any} | (any & any))","((int & int) | {int})"); }
		@Test public void test_35045() { testValid("({any, any} | (any & any))","({any} | !any)"); }
		@Test public void test_35046() { testValid("({any, any} | (any & any))","({int} | !any)"); }
		@Test public void test_35047() { testValid("({any, any} | (any & any))","({any, any} | !any)"); }
		@Test public void test_35048() { testValid("({any, any} | (any & any))","({int, int} | !any)"); }
		@Test public void test_35049() { testValid("({any, any} | (any & any))","((any | any) | !any)"); }
		@Test public void test_35050() { testValid("({any, any} | (any & any))","((int | any) | !any)"); }
		@Test public void test_35051() { testValid("({any, any} | (any & any))","((int | int) | !any)"); }
		@Test public void test_35052() { testValid("({any, any} | (any & any))","((int & int) | !any)"); }
		@Test public void test_35053() { testValid("({any, any} | (any & any))","(!int | !int)"); }
		@Test public void test_35054() { testValid("({any, any} | (any & any))","({any, any} | !int)"); }
		@Test public void test_35055() { testValid("({any, any} | (any & any))","({int, int} | !int)"); }
		@Test public void test_35056() { testValid("({any, any} | (any & any))","((int | any) | !int)"); }
		@Test public void test_35057() { testValid("({any, any} | (any & any))","((any | int) | !int)"); }
		@Test public void test_35058() { testValid("({any, any} | (any & any))","((any & int) | !int)"); }
		@Test public void test_35059() { testValid("({any, any} | (any & any))","((int & int) | !int)"); }
		@Test public void test_35060() { testValid("({any, any} | (any & any))","({int} | {any, any})"); }
		@Test public void test_35061() { testValid("({any, any} | (any & any))","(!any | {any, any})"); }
		@Test public void test_35062() { testValid("({any, any} | (any & any))","(!int | {any, any})"); }
		@Test public void test_35063() { testValid("({any, any} | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_35064() { testValid("({any, any} | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_35065() { testValid("({any, any} | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_35066() { testValid("({any, any} | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_35067() { testValid("({any, any} | (any & any))","(!int | {int, any})"); }
		@Test public void test_35068() { testValid("({any, any} | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_35069() { testValid("({any, any} | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_35070() { testValid("({any, any} | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_35071() { testValid("({any, any} | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_35072() { testValid("({any, any} | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_35073() { testValid("({any, any} | (any & any))","({any} | {any, int})"); }
		@Test public void test_35074() { testValid("({any, any} | (any & any))","(!int | {any, int})"); }
		@Test public void test_35075() { testValid("({any, any} | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_35076() { testValid("({any, any} | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_35077() { testValid("({any, any} | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_35078() { testValid("({any, any} | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_35079() { testValid("({any, any} | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_35080() { testValid("({any, any} | (any & any))","(!any | {int, int})"); }
		@Test public void test_35081() { testValid("({any, any} | (any & any))","(!int | {int, int})"); }
		@Test public void test_35082() { testValid("({any, any} | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_35083() { testValid("({any, any} | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_35084() { testValid("({any, any} | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_35085() { testValid("({any, any} | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_35086() { testValid("({any, any} | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_35087() { testValid("({any, any} | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_35088() { testValid("({any, any} | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_35089() { testValid("({any, any} | (any & any))","({any} | (any | any))"); }
		@Test public void test_35090() { testValid("({any, any} | (any & any))","(!any | (any | any))"); }
		@Test public void test_35091() { testValid("({any, any} | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_35092() { testValid("({any, any} | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_35093() { testValid("({any, any} | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_35094() { testValid("({any, any} | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_35095() { testValid("({any, any} | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_35096() { testValid("({any, any} | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_35097() { testValid("({any, any} | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_35098() { testValid("({any, any} | (any & any))","({any} | (int | any))"); }
		@Test public void test_35099() { testValid("({any, any} | (any & any))","(!int | (int | any))"); }
		@Test public void test_35100() { testValid("({any, any} | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_35101() { testValid("({any, any} | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_35102() { testValid("({any, any} | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_35103() { testValid("({any, any} | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_35104() { testValid("({any, any} | (any & any))","({any} | (any | int))"); }
		@Test public void test_35105() { testValid("({any, any} | (any & any))","({int} | (any | int))"); }
		@Test public void test_35106() { testValid("({any, any} | (any & any))","(!any | (any | int))"); }
		@Test public void test_35107() { testValid("({any, any} | (any & any))","(!int | (any | int))"); }
		@Test public void test_35108() { testValid("({any, any} | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_35109() { testValid("({any, any} | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_35110() { testValid("({any, any} | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_35111() { testValid("({any, any} | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_35112() { testValid("({any, any} | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_35113() { testValid("({any, any} | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_35114() { testValid("({any, any} | (any & any))","({int} | (int | int))"); }
		@Test public void test_35115() { testValid("({any, any} | (any & any))","(!any | (int | int))"); }
		@Test public void test_35116() { testValid("({any, any} | (any & any))","(!int | (int | int))"); }
		@Test public void test_35117() { testValid("({any, any} | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_35118() { testValid("({any, any} | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_35119() { testValid("({any, any} | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_35120() { testValid("({any, any} | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_35121() { testValid("({any, any} | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_35122() { testValid("({any, any} | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_35123() { testValid("({any, any} | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_35124() { testValid("({any, any} | (any & any))","(!any | (any & any))"); }
		@Test public void test_35125() { testValid("({any, any} | (any & any))","(!int | (any & any))"); }
		@Test public void test_35126() { testValid("({any, any} | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_35127() { testValid("({any, any} | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_35128() { testValid("({any, any} | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_35129() { testValid("({any, any} | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_35130() { testValid("({any, any} | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_35131() { testValid("({any, any} | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_35132() { testValid("({any, any} | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_35133() { testValid("({any, any} | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_35134() { testValid("({any, any} | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_35135() { testValid("({any, any} | (any & any))","({any} | (int & any))"); }
		@Test public void test_35136() { testValid("({int, any} | (any & any))","{int}"); }
		@Test public void test_35137() { testValid("({int, any} | (any & any))","{any, any}"); }
		@Test public void test_35138() { testValid("({int, any} | (any & any))","{int, int}"); }
		@Test public void test_35139() { testValid("({int, any} | (any & any))","(any | int)"); }
		@Test public void test_35140() { testValid("({int, any} | (any & any))","(int & any)"); }
		@Test public void test_35141() { testValid("({int, any} | (any & any))","{{any}}"); }
		@Test public void test_35142() { testValid("({int, any} | (any & any))","{{int, any}}"); }
		@Test public void test_35143() { testValid("({int, any} | (any & any))","{{int, int}}"); }
		@Test public void test_35144() { testValid("({int, any} | (any & any))","{(any | int)}"); }
		@Test public void test_35145() { testValid("({int, any} | (any & any))","!{int, any}"); }
		@Test public void test_35146() { testValid("({int, any} | (any & any))","!{int, int}"); }
		@Test public void test_35147() { testValid("({int, any} | (any & any))","!(any | any)"); }
		@Test public void test_35148() { testValid("({int, any} | (any & any))","!(any & any)"); }
		@Test public void test_35149() { testValid("({int, any} | (any & any))","!(int & int)"); }
		@Test public void test_35150() { testValid("({int, any} | (any & any))","{{int}, {any}}"); }
		@Test public void test_35151() { testValid("({int, any} | (any & any))","{!int, {any}}"); }
		@Test public void test_35152() { testValid("({int, any} | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_35153() { testValid("({int, any} | (any & any))","{(any | int), {any}}"); }
		@Test public void test_35154() { testValid("({int, any} | (any & any))","{!int, {int}}"); }
		@Test public void test_35155() { testValid("({int, any} | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_35156() { testValid("({int, any} | (any & any))","{(any | any), {int}}"); }
		@Test public void test_35157() { testValid("({int, any} | (any & any))","{(any & any), {int}}"); }
		@Test public void test_35158() { testValid("({int, any} | (any & any))","{(any & int), {int}}"); }
		@Test public void test_35159() { testValid("({int, any} | (any & any))","{{any, any}, !int}"); }
		@Test public void test_35160() { testValid("({int, any} | (any & any))","{{any, int}, !int}"); }
		@Test public void test_35161() { testValid("({int, any} | (any & any))","{(any | any), !int}"); }
		@Test public void test_35162() { testValid("({int, any} | (any & any))","{(int | any), !int}"); }
		@Test public void test_35163() { testValid("({int, any} | (any & any))","{(any & any), !int}"); }
		@Test public void test_35164() { testValid("({int, any} | (any & any))","{(int & any), !int}"); }
		@Test public void test_35165() { testValid("({int, any} | (any & any))","{(int & int), !int}"); }
		@Test public void test_35166() { testValid("({int, any} | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_35167() { testValid("({int, any} | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_35168() { testValid("({int, any} | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_35169() { testValid("({int, any} | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_35170() { testValid("({int, any} | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_35171() { testValid("({int, any} | (any & any))","{!int, {int, any}}"); }
		@Test public void test_35172() { testValid("({int, any} | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_35173() { testValid("({int, any} | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_35174() { testValid("({int, any} | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_35175() { testValid("({int, any} | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_35176() { testValid("({int, any} | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_35177() { testValid("({int, any} | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_35178() { testValid("({int, any} | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_35179() { testValid("({int, any} | (any & any))","{!int, {int, int}}"); }
		@Test public void test_35180() { testValid("({int, any} | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_35181() { testValid("({int, any} | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_35182() { testValid("({int, any} | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_35183() { testValid("({int, any} | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_35184() { testValid("({int, any} | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_35185() { testValid("({int, any} | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_35186() { testValid("({int, any} | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_35187() { testValid("({int, any} | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_35188() { testValid("({int, any} | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_35189() { testValid("({int, any} | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_35190() { testValid("({int, any} | (any & any))","{!int, (int | any)}"); }
		@Test public void test_35191() { testValid("({int, any} | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35192() { testValid("({int, any} | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35193() { testValid("({int, any} | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35194() { testValid("({int, any} | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35195() { testValid("({int, any} | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35196() { testValid("({int, any} | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35197() { testValid("({int, any} | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35198() { testValid("({int, any} | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35199() { testValid("({int, any} | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35200() { testValid("({int, any} | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35201() { testValid("({int, any} | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35202() { testValid("({int, any} | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35203() { testValid("({int, any} | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35204() { testValid("({int, any} | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35205() { testValid("({int, any} | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35206() { testValid("({int, any} | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35207() { testValid("({int, any} | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35208() { testValid("({int, any} | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35209() { testValid("({int, any} | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35210() { testValid("({int, any} | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35211() { testValid("({int, any} | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35212() { testValid("({int, any} | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35213() { testValid("({int, any} | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35214() { testValid("({int, any} | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35215() { testValid("({int, any} | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35216() { testValid("({int, any} | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35217() { testValid("({int, any} | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35218() { testValid("({int, any} | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35219() { testValid("({int, any} | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35220() { testValid("({int, any} | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35221() { testValid("({int, any} | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35222() { testValid("({int, any} | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35223() { testValid("({int, any} | (any & any))","(!int | {any})"); }
		@Test public void test_35224() { testValid("({int, any} | (any & any))","({any, any} | {any})"); }
		@Test public void test_35225() { testValid("({int, any} | (any & any))","((any | any) | {any})"); }
		@Test public void test_35226() { testValid("({int, any} | (any & any))","((int | any) | {any})"); }
		@Test public void test_35227() { testValid("({int, any} | (any & any))","((any & any) | {any})"); }
		@Test public void test_35228() { testValid("({int, any} | (any & any))","((int & any) | {any})"); }
		@Test public void test_35229() { testValid("({int, any} | (any & any))","((any & int) | {any})"); }
		@Test public void test_35230() { testValid("({int, any} | (any & any))","({int} | {int})"); }
		@Test public void test_35231() { testValid("({int, any} | (any & any))","(!any | {int})"); }
		@Test public void test_35232() { testValid("({int, any} | (any & any))","(!int | {int})"); }
		@Test public void test_35233() { testValid("({int, any} | (any & any))","({any, int} | {int})"); }
		@Test public void test_35234() { testValid("({int, any} | (any & any))","((int & any) | {int})"); }
		@Test public void test_35235() { testValid("({int, any} | (any & any))","((any & int) | {int})"); }
		@Test public void test_35236() { testValid("({int, any} | (any & any))","((int & int) | {int})"); }
		@Test public void test_35237() { testValid("({int, any} | (any & any))","({any} | !any)"); }
		@Test public void test_35238() { testValid("({int, any} | (any & any))","({int} | !any)"); }
		@Test public void test_35239() { testValid("({int, any} | (any & any))","({any, any} | !any)"); }
		@Test public void test_35240() { testValid("({int, any} | (any & any))","({int, int} | !any)"); }
		@Test public void test_35241() { testValid("({int, any} | (any & any))","((any | any) | !any)"); }
		@Test public void test_35242() { testValid("({int, any} | (any & any))","((int | any) | !any)"); }
		@Test public void test_35243() { testValid("({int, any} | (any & any))","((int | int) | !any)"); }
		@Test public void test_35244() { testValid("({int, any} | (any & any))","((int & int) | !any)"); }
		@Test public void test_35245() { testValid("({int, any} | (any & any))","(!int | !int)"); }
		@Test public void test_35246() { testValid("({int, any} | (any & any))","({any, any} | !int)"); }
		@Test public void test_35247() { testValid("({int, any} | (any & any))","({int, int} | !int)"); }
		@Test public void test_35248() { testValid("({int, any} | (any & any))","((int | any) | !int)"); }
		@Test public void test_35249() { testValid("({int, any} | (any & any))","((any | int) | !int)"); }
		@Test public void test_35250() { testValid("({int, any} | (any & any))","((any & int) | !int)"); }
		@Test public void test_35251() { testValid("({int, any} | (any & any))","((int & int) | !int)"); }
		@Test public void test_35252() { testValid("({int, any} | (any & any))","({int} | {any, any})"); }
		@Test public void test_35253() { testValid("({int, any} | (any & any))","(!any | {any, any})"); }
		@Test public void test_35254() { testValid("({int, any} | (any & any))","(!int | {any, any})"); }
		@Test public void test_35255() { testValid("({int, any} | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_35256() { testValid("({int, any} | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_35257() { testValid("({int, any} | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_35258() { testValid("({int, any} | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_35259() { testValid("({int, any} | (any & any))","(!int | {int, any})"); }
		@Test public void test_35260() { testValid("({int, any} | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_35261() { testValid("({int, any} | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_35262() { testValid("({int, any} | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_35263() { testValid("({int, any} | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_35264() { testValid("({int, any} | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_35265() { testValid("({int, any} | (any & any))","({any} | {any, int})"); }
		@Test public void test_35266() { testValid("({int, any} | (any & any))","(!int | {any, int})"); }
		@Test public void test_35267() { testValid("({int, any} | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_35268() { testValid("({int, any} | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_35269() { testValid("({int, any} | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_35270() { testValid("({int, any} | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_35271() { testValid("({int, any} | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_35272() { testValid("({int, any} | (any & any))","(!any | {int, int})"); }
		@Test public void test_35273() { testValid("({int, any} | (any & any))","(!int | {int, int})"); }
		@Test public void test_35274() { testValid("({int, any} | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_35275() { testValid("({int, any} | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_35276() { testValid("({int, any} | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_35277() { testValid("({int, any} | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_35278() { testValid("({int, any} | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_35279() { testValid("({int, any} | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_35280() { testValid("({int, any} | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_35281() { testValid("({int, any} | (any & any))","({any} | (any | any))"); }
		@Test public void test_35282() { testValid("({int, any} | (any & any))","(!any | (any | any))"); }
		@Test public void test_35283() { testValid("({int, any} | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_35284() { testValid("({int, any} | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_35285() { testValid("({int, any} | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_35286() { testValid("({int, any} | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_35287() { testValid("({int, any} | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_35288() { testValid("({int, any} | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_35289() { testValid("({int, any} | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_35290() { testValid("({int, any} | (any & any))","({any} | (int | any))"); }
		@Test public void test_35291() { testValid("({int, any} | (any & any))","(!int | (int | any))"); }
		@Test public void test_35292() { testValid("({int, any} | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_35293() { testValid("({int, any} | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_35294() { testValid("({int, any} | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_35295() { testValid("({int, any} | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_35296() { testValid("({int, any} | (any & any))","({any} | (any | int))"); }
		@Test public void test_35297() { testValid("({int, any} | (any & any))","({int} | (any | int))"); }
		@Test public void test_35298() { testValid("({int, any} | (any & any))","(!any | (any | int))"); }
		@Test public void test_35299() { testValid("({int, any} | (any & any))","(!int | (any | int))"); }
		@Test public void test_35300() { testValid("({int, any} | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_35301() { testValid("({int, any} | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_35302() { testValid("({int, any} | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_35303() { testValid("({int, any} | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_35304() { testValid("({int, any} | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_35305() { testValid("({int, any} | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_35306() { testValid("({int, any} | (any & any))","({int} | (int | int))"); }
		@Test public void test_35307() { testValid("({int, any} | (any & any))","(!any | (int | int))"); }
		@Test public void test_35308() { testValid("({int, any} | (any & any))","(!int | (int | int))"); }
		@Test public void test_35309() { testValid("({int, any} | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_35310() { testValid("({int, any} | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_35311() { testValid("({int, any} | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_35312() { testValid("({int, any} | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_35313() { testValid("({int, any} | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_35314() { testValid("({int, any} | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_35315() { testValid("({int, any} | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_35316() { testValid("({int, any} | (any & any))","(!any | (any & any))"); }
		@Test public void test_35317() { testValid("({int, any} | (any & any))","(!int | (any & any))"); }
		@Test public void test_35318() { testValid("({int, any} | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_35319() { testValid("({int, any} | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_35320() { testValid("({int, any} | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_35321() { testValid("({int, any} | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_35322() { testValid("({int, any} | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_35323() { testValid("({int, any} | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_35324() { testValid("({int, any} | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_35325() { testValid("({int, any} | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_35326() { testValid("({int, any} | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_35327() { testValid("({int, any} | (any & any))","({any} | (int & any))"); }
		@Test public void test_35328() { testValid("({any, int} | (any & any))","{int}"); }
		@Test public void test_35329() { testValid("({any, int} | (any & any))","{any, any}"); }
		@Test public void test_35330() { testValid("({any, int} | (any & any))","{int, int}"); }
		@Test public void test_35331() { testValid("({any, int} | (any & any))","(any | int)"); }
		@Test public void test_35332() { testValid("({any, int} | (any & any))","(int & any)"); }
		@Test public void test_35333() { testValid("({any, int} | (any & any))","{{any}}"); }
		@Test public void test_35334() { testValid("({any, int} | (any & any))","{{int, any}}"); }
		@Test public void test_35335() { testValid("({any, int} | (any & any))","{{int, int}}"); }
		@Test public void test_35336() { testValid("({any, int} | (any & any))","{(any | int)}"); }
		@Test public void test_35337() { testValid("({any, int} | (any & any))","!{int, any}"); }
		@Test public void test_35338() { testValid("({any, int} | (any & any))","!{int, int}"); }
		@Test public void test_35339() { testValid("({any, int} | (any & any))","!(any | any)"); }
		@Test public void test_35340() { testValid("({any, int} | (any & any))","!(any & any)"); }
		@Test public void test_35341() { testValid("({any, int} | (any & any))","!(int & int)"); }
		@Test public void test_35342() { testValid("({any, int} | (any & any))","{{int}, {any}}"); }
		@Test public void test_35343() { testValid("({any, int} | (any & any))","{!int, {any}}"); }
		@Test public void test_35344() { testValid("({any, int} | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_35345() { testValid("({any, int} | (any & any))","{(any | int), {any}}"); }
		@Test public void test_35346() { testValid("({any, int} | (any & any))","{!int, {int}}"); }
		@Test public void test_35347() { testValid("({any, int} | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_35348() { testValid("({any, int} | (any & any))","{(any | any), {int}}"); }
		@Test public void test_35349() { testValid("({any, int} | (any & any))","{(any & any), {int}}"); }
		@Test public void test_35350() { testValid("({any, int} | (any & any))","{(any & int), {int}}"); }
		@Test public void test_35351() { testValid("({any, int} | (any & any))","{{any, any}, !int}"); }
		@Test public void test_35352() { testValid("({any, int} | (any & any))","{{any, int}, !int}"); }
		@Test public void test_35353() { testValid("({any, int} | (any & any))","{(any | any), !int}"); }
		@Test public void test_35354() { testValid("({any, int} | (any & any))","{(int | any), !int}"); }
		@Test public void test_35355() { testValid("({any, int} | (any & any))","{(any & any), !int}"); }
		@Test public void test_35356() { testValid("({any, int} | (any & any))","{(int & any), !int}"); }
		@Test public void test_35357() { testValid("({any, int} | (any & any))","{(int & int), !int}"); }
		@Test public void test_35358() { testValid("({any, int} | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_35359() { testValid("({any, int} | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_35360() { testValid("({any, int} | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_35361() { testValid("({any, int} | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_35362() { testValid("({any, int} | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_35363() { testValid("({any, int} | (any & any))","{!int, {int, any}}"); }
		@Test public void test_35364() { testValid("({any, int} | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_35365() { testValid("({any, int} | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_35366() { testValid("({any, int} | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_35367() { testValid("({any, int} | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_35368() { testValid("({any, int} | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_35369() { testValid("({any, int} | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_35370() { testValid("({any, int} | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_35371() { testValid("({any, int} | (any & any))","{!int, {int, int}}"); }
		@Test public void test_35372() { testValid("({any, int} | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_35373() { testValid("({any, int} | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_35374() { testValid("({any, int} | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_35375() { testValid("({any, int} | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_35376() { testValid("({any, int} | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_35377() { testValid("({any, int} | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_35378() { testValid("({any, int} | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_35379() { testValid("({any, int} | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_35380() { testValid("({any, int} | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_35381() { testValid("({any, int} | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_35382() { testValid("({any, int} | (any & any))","{!int, (int | any)}"); }
		@Test public void test_35383() { testValid("({any, int} | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35384() { testValid("({any, int} | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35385() { testValid("({any, int} | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35386() { testValid("({any, int} | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35387() { testValid("({any, int} | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35388() { testValid("({any, int} | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35389() { testValid("({any, int} | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35390() { testValid("({any, int} | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35391() { testValid("({any, int} | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35392() { testValid("({any, int} | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35393() { testValid("({any, int} | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35394() { testValid("({any, int} | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35395() { testValid("({any, int} | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35396() { testValid("({any, int} | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35397() { testValid("({any, int} | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35398() { testValid("({any, int} | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35399() { testValid("({any, int} | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35400() { testValid("({any, int} | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35401() { testValid("({any, int} | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35402() { testValid("({any, int} | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35403() { testValid("({any, int} | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35404() { testValid("({any, int} | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35405() { testValid("({any, int} | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35406() { testValid("({any, int} | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35407() { testValid("({any, int} | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35408() { testValid("({any, int} | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35409() { testValid("({any, int} | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35410() { testValid("({any, int} | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35411() { testValid("({any, int} | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35412() { testValid("({any, int} | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35413() { testValid("({any, int} | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35414() { testValid("({any, int} | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35415() { testValid("({any, int} | (any & any))","(!int | {any})"); }
		@Test public void test_35416() { testValid("({any, int} | (any & any))","({any, any} | {any})"); }
		@Test public void test_35417() { testValid("({any, int} | (any & any))","((any | any) | {any})"); }
		@Test public void test_35418() { testValid("({any, int} | (any & any))","((int | any) | {any})"); }
		@Test public void test_35419() { testValid("({any, int} | (any & any))","((any & any) | {any})"); }
		@Test public void test_35420() { testValid("({any, int} | (any & any))","((int & any) | {any})"); }
		@Test public void test_35421() { testValid("({any, int} | (any & any))","((any & int) | {any})"); }
		@Test public void test_35422() { testValid("({any, int} | (any & any))","({int} | {int})"); }
		@Test public void test_35423() { testValid("({any, int} | (any & any))","(!any | {int})"); }
		@Test public void test_35424() { testValid("({any, int} | (any & any))","(!int | {int})"); }
		@Test public void test_35425() { testValid("({any, int} | (any & any))","({any, int} | {int})"); }
		@Test public void test_35426() { testValid("({any, int} | (any & any))","((int & any) | {int})"); }
		@Test public void test_35427() { testValid("({any, int} | (any & any))","((any & int) | {int})"); }
		@Test public void test_35428() { testValid("({any, int} | (any & any))","((int & int) | {int})"); }
		@Test public void test_35429() { testValid("({any, int} | (any & any))","({any} | !any)"); }
		@Test public void test_35430() { testValid("({any, int} | (any & any))","({int} | !any)"); }
		@Test public void test_35431() { testValid("({any, int} | (any & any))","({any, any} | !any)"); }
		@Test public void test_35432() { testValid("({any, int} | (any & any))","({int, int} | !any)"); }
		@Test public void test_35433() { testValid("({any, int} | (any & any))","((any | any) | !any)"); }
		@Test public void test_35434() { testValid("({any, int} | (any & any))","((int | any) | !any)"); }
		@Test public void test_35435() { testValid("({any, int} | (any & any))","((int | int) | !any)"); }
		@Test public void test_35436() { testValid("({any, int} | (any & any))","((int & int) | !any)"); }
		@Test public void test_35437() { testValid("({any, int} | (any & any))","(!int | !int)"); }
		@Test public void test_35438() { testValid("({any, int} | (any & any))","({any, any} | !int)"); }
		@Test public void test_35439() { testValid("({any, int} | (any & any))","({int, int} | !int)"); }
		@Test public void test_35440() { testValid("({any, int} | (any & any))","((int | any) | !int)"); }
		@Test public void test_35441() { testValid("({any, int} | (any & any))","((any | int) | !int)"); }
		@Test public void test_35442() { testValid("({any, int} | (any & any))","((any & int) | !int)"); }
		@Test public void test_35443() { testValid("({any, int} | (any & any))","((int & int) | !int)"); }
		@Test public void test_35444() { testValid("({any, int} | (any & any))","({int} | {any, any})"); }
		@Test public void test_35445() { testValid("({any, int} | (any & any))","(!any | {any, any})"); }
		@Test public void test_35446() { testValid("({any, int} | (any & any))","(!int | {any, any})"); }
		@Test public void test_35447() { testValid("({any, int} | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_35448() { testValid("({any, int} | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_35449() { testValid("({any, int} | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_35450() { testValid("({any, int} | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_35451() { testValid("({any, int} | (any & any))","(!int | {int, any})"); }
		@Test public void test_35452() { testValid("({any, int} | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_35453() { testValid("({any, int} | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_35454() { testValid("({any, int} | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_35455() { testValid("({any, int} | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_35456() { testValid("({any, int} | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_35457() { testValid("({any, int} | (any & any))","({any} | {any, int})"); }
		@Test public void test_35458() { testValid("({any, int} | (any & any))","(!int | {any, int})"); }
		@Test public void test_35459() { testValid("({any, int} | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_35460() { testValid("({any, int} | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_35461() { testValid("({any, int} | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_35462() { testValid("({any, int} | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_35463() { testValid("({any, int} | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_35464() { testValid("({any, int} | (any & any))","(!any | {int, int})"); }
		@Test public void test_35465() { testValid("({any, int} | (any & any))","(!int | {int, int})"); }
		@Test public void test_35466() { testValid("({any, int} | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_35467() { testValid("({any, int} | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_35468() { testValid("({any, int} | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_35469() { testValid("({any, int} | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_35470() { testValid("({any, int} | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_35471() { testValid("({any, int} | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_35472() { testValid("({any, int} | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_35473() { testValid("({any, int} | (any & any))","({any} | (any | any))"); }
		@Test public void test_35474() { testValid("({any, int} | (any & any))","(!any | (any | any))"); }
		@Test public void test_35475() { testValid("({any, int} | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_35476() { testValid("({any, int} | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_35477() { testValid("({any, int} | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_35478() { testValid("({any, int} | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_35479() { testValid("({any, int} | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_35480() { testValid("({any, int} | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_35481() { testValid("({any, int} | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_35482() { testValid("({any, int} | (any & any))","({any} | (int | any))"); }
		@Test public void test_35483() { testValid("({any, int} | (any & any))","(!int | (int | any))"); }
		@Test public void test_35484() { testValid("({any, int} | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_35485() { testValid("({any, int} | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_35486() { testValid("({any, int} | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_35487() { testValid("({any, int} | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_35488() { testValid("({any, int} | (any & any))","({any} | (any | int))"); }
		@Test public void test_35489() { testValid("({any, int} | (any & any))","({int} | (any | int))"); }
		@Test public void test_35490() { testValid("({any, int} | (any & any))","(!any | (any | int))"); }
		@Test public void test_35491() { testValid("({any, int} | (any & any))","(!int | (any | int))"); }
		@Test public void test_35492() { testValid("({any, int} | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_35493() { testValid("({any, int} | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_35494() { testValid("({any, int} | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_35495() { testValid("({any, int} | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_35496() { testValid("({any, int} | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_35497() { testValid("({any, int} | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_35498() { testValid("({any, int} | (any & any))","({int} | (int | int))"); }
		@Test public void test_35499() { testValid("({any, int} | (any & any))","(!any | (int | int))"); }
		@Test public void test_35500() { testValid("({any, int} | (any & any))","(!int | (int | int))"); }
		@Test public void test_35501() { testValid("({any, int} | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_35502() { testValid("({any, int} | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_35503() { testValid("({any, int} | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_35504() { testValid("({any, int} | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_35505() { testValid("({any, int} | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_35506() { testValid("({any, int} | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_35507() { testValid("({any, int} | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_35508() { testValid("({any, int} | (any & any))","(!any | (any & any))"); }
		@Test public void test_35509() { testValid("({any, int} | (any & any))","(!int | (any & any))"); }
		@Test public void test_35510() { testValid("({any, int} | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_35511() { testValid("({any, int} | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_35512() { testValid("({any, int} | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_35513() { testValid("({any, int} | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_35514() { testValid("({any, int} | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_35515() { testValid("({any, int} | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_35516() { testValid("({any, int} | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_35517() { testValid("({any, int} | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_35518() { testValid("({any, int} | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_35519() { testValid("({any, int} | (any & any))","({any} | (int & any))"); }
		@Test public void test_35520() { testValid("({int, int} | (any & any))","{int}"); }
		@Test public void test_35521() { testValid("({int, int} | (any & any))","{any, any}"); }
		@Test public void test_35522() { testValid("({int, int} | (any & any))","{int, int}"); }
		@Test public void test_35523() { testValid("({int, int} | (any & any))","(any | int)"); }
		@Test public void test_35524() { testValid("({int, int} | (any & any))","(int & any)"); }
		@Test public void test_35525() { testValid("({int, int} | (any & any))","{{any}}"); }
		@Test public void test_35526() { testValid("({int, int} | (any & any))","{{int, any}}"); }
		@Test public void test_35527() { testValid("({int, int} | (any & any))","{{int, int}}"); }
		@Test public void test_35528() { testValid("({int, int} | (any & any))","{(any | int)}"); }
		@Test public void test_35529() { testValid("({int, int} | (any & any))","!{int, any}"); }
		@Test public void test_35530() { testValid("({int, int} | (any & any))","!{int, int}"); }
		@Test public void test_35531() { testValid("({int, int} | (any & any))","!(any | any)"); }
		@Test public void test_35532() { testValid("({int, int} | (any & any))","!(any & any)"); }
		@Test public void test_35533() { testValid("({int, int} | (any & any))","!(int & int)"); }
		@Test public void test_35534() { testValid("({int, int} | (any & any))","{{int}, {any}}"); }
		@Test public void test_35535() { testValid("({int, int} | (any & any))","{!int, {any}}"); }
		@Test public void test_35536() { testValid("({int, int} | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_35537() { testValid("({int, int} | (any & any))","{(any | int), {any}}"); }
		@Test public void test_35538() { testValid("({int, int} | (any & any))","{!int, {int}}"); }
		@Test public void test_35539() { testValid("({int, int} | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_35540() { testValid("({int, int} | (any & any))","{(any | any), {int}}"); }
		@Test public void test_35541() { testValid("({int, int} | (any & any))","{(any & any), {int}}"); }
		@Test public void test_35542() { testValid("({int, int} | (any & any))","{(any & int), {int}}"); }
		@Test public void test_35543() { testValid("({int, int} | (any & any))","{{any, any}, !int}"); }
		@Test public void test_35544() { testValid("({int, int} | (any & any))","{{any, int}, !int}"); }
		@Test public void test_35545() { testValid("({int, int} | (any & any))","{(any | any), !int}"); }
		@Test public void test_35546() { testValid("({int, int} | (any & any))","{(int | any), !int}"); }
		@Test public void test_35547() { testValid("({int, int} | (any & any))","{(any & any), !int}"); }
		@Test public void test_35548() { testValid("({int, int} | (any & any))","{(int & any), !int}"); }
		@Test public void test_35549() { testValid("({int, int} | (any & any))","{(int & int), !int}"); }
		@Test public void test_35550() { testValid("({int, int} | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_35551() { testValid("({int, int} | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_35552() { testValid("({int, int} | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_35553() { testValid("({int, int} | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_35554() { testValid("({int, int} | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_35555() { testValid("({int, int} | (any & any))","{!int, {int, any}}"); }
		@Test public void test_35556() { testValid("({int, int} | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_35557() { testValid("({int, int} | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_35558() { testValid("({int, int} | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_35559() { testValid("({int, int} | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_35560() { testValid("({int, int} | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_35561() { testValid("({int, int} | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_35562() { testValid("({int, int} | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_35563() { testValid("({int, int} | (any & any))","{!int, {int, int}}"); }
		@Test public void test_35564() { testValid("({int, int} | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_35565() { testValid("({int, int} | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_35566() { testValid("({int, int} | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_35567() { testValid("({int, int} | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_35568() { testValid("({int, int} | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_35569() { testValid("({int, int} | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_35570() { testValid("({int, int} | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_35571() { testValid("({int, int} | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_35572() { testValid("({int, int} | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_35573() { testValid("({int, int} | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_35574() { testValid("({int, int} | (any & any))","{!int, (int | any)}"); }
		@Test public void test_35575() { testValid("({int, int} | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35576() { testValid("({int, int} | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35577() { testValid("({int, int} | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35578() { testValid("({int, int} | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35579() { testValid("({int, int} | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35580() { testValid("({int, int} | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35581() { testValid("({int, int} | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35582() { testValid("({int, int} | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35583() { testValid("({int, int} | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35584() { testValid("({int, int} | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35585() { testValid("({int, int} | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35586() { testValid("({int, int} | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35587() { testValid("({int, int} | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35588() { testValid("({int, int} | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35589() { testValid("({int, int} | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35590() { testValid("({int, int} | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35591() { testValid("({int, int} | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35592() { testValid("({int, int} | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35593() { testValid("({int, int} | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35594() { testValid("({int, int} | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35595() { testValid("({int, int} | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35596() { testValid("({int, int} | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35597() { testValid("({int, int} | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35598() { testValid("({int, int} | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35599() { testValid("({int, int} | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35600() { testValid("({int, int} | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35601() { testValid("({int, int} | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35602() { testValid("({int, int} | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35603() { testValid("({int, int} | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35604() { testValid("({int, int} | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35605() { testValid("({int, int} | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35606() { testValid("({int, int} | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35607() { testValid("({int, int} | (any & any))","(!int | {any})"); }
		@Test public void test_35608() { testValid("({int, int} | (any & any))","({any, any} | {any})"); }
		@Test public void test_35609() { testValid("({int, int} | (any & any))","((any | any) | {any})"); }
		@Test public void test_35610() { testValid("({int, int} | (any & any))","((int | any) | {any})"); }
		@Test public void test_35611() { testValid("({int, int} | (any & any))","((any & any) | {any})"); }
		@Test public void test_35612() { testValid("({int, int} | (any & any))","((int & any) | {any})"); }
		@Test public void test_35613() { testValid("({int, int} | (any & any))","((any & int) | {any})"); }
		@Test public void test_35614() { testValid("({int, int} | (any & any))","({int} | {int})"); }
		@Test public void test_35615() { testValid("({int, int} | (any & any))","(!any | {int})"); }
		@Test public void test_35616() { testValid("({int, int} | (any & any))","(!int | {int})"); }
		@Test public void test_35617() { testValid("({int, int} | (any & any))","({any, int} | {int})"); }
		@Test public void test_35618() { testValid("({int, int} | (any & any))","((int & any) | {int})"); }
		@Test public void test_35619() { testValid("({int, int} | (any & any))","((any & int) | {int})"); }
		@Test public void test_35620() { testValid("({int, int} | (any & any))","((int & int) | {int})"); }
		@Test public void test_35621() { testValid("({int, int} | (any & any))","({any} | !any)"); }
		@Test public void test_35622() { testValid("({int, int} | (any & any))","({int} | !any)"); }
		@Test public void test_35623() { testValid("({int, int} | (any & any))","({any, any} | !any)"); }
		@Test public void test_35624() { testValid("({int, int} | (any & any))","({int, int} | !any)"); }
		@Test public void test_35625() { testValid("({int, int} | (any & any))","((any | any) | !any)"); }
		@Test public void test_35626() { testValid("({int, int} | (any & any))","((int | any) | !any)"); }
		@Test public void test_35627() { testValid("({int, int} | (any & any))","((int | int) | !any)"); }
		@Test public void test_35628() { testValid("({int, int} | (any & any))","((int & int) | !any)"); }
		@Test public void test_35629() { testValid("({int, int} | (any & any))","(!int | !int)"); }
		@Test public void test_35630() { testValid("({int, int} | (any & any))","({any, any} | !int)"); }
		@Test public void test_35631() { testValid("({int, int} | (any & any))","({int, int} | !int)"); }
		@Test public void test_35632() { testValid("({int, int} | (any & any))","((int | any) | !int)"); }
		@Test public void test_35633() { testValid("({int, int} | (any & any))","((any | int) | !int)"); }
		@Test public void test_35634() { testValid("({int, int} | (any & any))","((any & int) | !int)"); }
		@Test public void test_35635() { testValid("({int, int} | (any & any))","((int & int) | !int)"); }
		@Test public void test_35636() { testValid("({int, int} | (any & any))","({int} | {any, any})"); }
		@Test public void test_35637() { testValid("({int, int} | (any & any))","(!any | {any, any})"); }
		@Test public void test_35638() { testValid("({int, int} | (any & any))","(!int | {any, any})"); }
		@Test public void test_35639() { testValid("({int, int} | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_35640() { testValid("({int, int} | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_35641() { testValid("({int, int} | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_35642() { testValid("({int, int} | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_35643() { testValid("({int, int} | (any & any))","(!int | {int, any})"); }
		@Test public void test_35644() { testValid("({int, int} | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_35645() { testValid("({int, int} | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_35646() { testValid("({int, int} | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_35647() { testValid("({int, int} | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_35648() { testValid("({int, int} | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_35649() { testValid("({int, int} | (any & any))","({any} | {any, int})"); }
		@Test public void test_35650() { testValid("({int, int} | (any & any))","(!int | {any, int})"); }
		@Test public void test_35651() { testValid("({int, int} | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_35652() { testValid("({int, int} | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_35653() { testValid("({int, int} | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_35654() { testValid("({int, int} | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_35655() { testValid("({int, int} | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_35656() { testValid("({int, int} | (any & any))","(!any | {int, int})"); }
		@Test public void test_35657() { testValid("({int, int} | (any & any))","(!int | {int, int})"); }
		@Test public void test_35658() { testValid("({int, int} | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_35659() { testValid("({int, int} | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_35660() { testValid("({int, int} | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_35661() { testValid("({int, int} | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_35662() { testValid("({int, int} | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_35663() { testValid("({int, int} | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_35664() { testValid("({int, int} | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_35665() { testValid("({int, int} | (any & any))","({any} | (any | any))"); }
		@Test public void test_35666() { testValid("({int, int} | (any & any))","(!any | (any | any))"); }
		@Test public void test_35667() { testValid("({int, int} | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_35668() { testValid("({int, int} | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_35669() { testValid("({int, int} | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_35670() { testValid("({int, int} | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_35671() { testValid("({int, int} | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_35672() { testValid("({int, int} | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_35673() { testValid("({int, int} | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_35674() { testValid("({int, int} | (any & any))","({any} | (int | any))"); }
		@Test public void test_35675() { testValid("({int, int} | (any & any))","(!int | (int | any))"); }
		@Test public void test_35676() { testValid("({int, int} | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_35677() { testValid("({int, int} | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_35678() { testValid("({int, int} | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_35679() { testValid("({int, int} | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_35680() { testValid("({int, int} | (any & any))","({any} | (any | int))"); }
		@Test public void test_35681() { testValid("({int, int} | (any & any))","({int} | (any | int))"); }
		@Test public void test_35682() { testValid("({int, int} | (any & any))","(!any | (any | int))"); }
		@Test public void test_35683() { testValid("({int, int} | (any & any))","(!int | (any | int))"); }
		@Test public void test_35684() { testValid("({int, int} | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_35685() { testValid("({int, int} | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_35686() { testValid("({int, int} | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_35687() { testValid("({int, int} | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_35688() { testValid("({int, int} | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_35689() { testValid("({int, int} | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_35690() { testValid("({int, int} | (any & any))","({int} | (int | int))"); }
		@Test public void test_35691() { testValid("({int, int} | (any & any))","(!any | (int | int))"); }
		@Test public void test_35692() { testValid("({int, int} | (any & any))","(!int | (int | int))"); }
		@Test public void test_35693() { testValid("({int, int} | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_35694() { testValid("({int, int} | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_35695() { testValid("({int, int} | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_35696() { testValid("({int, int} | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_35697() { testValid("({int, int} | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_35698() { testValid("({int, int} | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_35699() { testValid("({int, int} | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_35700() { testValid("({int, int} | (any & any))","(!any | (any & any))"); }
		@Test public void test_35701() { testValid("({int, int} | (any & any))","(!int | (any & any))"); }
		@Test public void test_35702() { testValid("({int, int} | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_35703() { testValid("({int, int} | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_35704() { testValid("({int, int} | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_35705() { testValid("({int, int} | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_35706() { testValid("({int, int} | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_35707() { testValid("({int, int} | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_35708() { testValid("({int, int} | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_35709() { testValid("({int, int} | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_35710() { testValid("({int, int} | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_35711() { testValid("({int, int} | (any & any))","({any} | (int & any))"); }
		@Test public void test_35712() { testValid("((int | any) | (any & any))","{int}"); }
		@Test public void test_35713() { testValid("((int | any) | (any & any))","{any, any}"); }
		@Test public void test_35714() { testValid("((int | any) | (any & any))","{int, int}"); }
		@Test public void test_35715() { testValid("((int | any) | (any & any))","(any | int)"); }
		@Test public void test_35716() { testValid("((int | any) | (any & any))","(int & any)"); }
		@Test public void test_35717() { testValid("((int | any) | (any & any))","{{any}}"); }
		@Test public void test_35718() { testValid("((int | any) | (any & any))","{{int, any}}"); }
		@Test public void test_35719() { testValid("((int | any) | (any & any))","{{int, int}}"); }
		@Test public void test_35720() { testValid("((int | any) | (any & any))","{(any | int)}"); }
		@Test public void test_35721() { testValid("((int | any) | (any & any))","!{int, any}"); }
		@Test public void test_35722() { testValid("((int | any) | (any & any))","!{int, int}"); }
		@Test public void test_35723() { testValid("((int | any) | (any & any))","!(any | any)"); }
		@Test public void test_35724() { testValid("((int | any) | (any & any))","!(any & any)"); }
		@Test public void test_35725() { testValid("((int | any) | (any & any))","!(int & int)"); }
		@Test public void test_35726() { testValid("((int | any) | (any & any))","{{int}, {any}}"); }
		@Test public void test_35727() { testValid("((int | any) | (any & any))","{!int, {any}}"); }
		@Test public void test_35728() { testValid("((int | any) | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_35729() { testValid("((int | any) | (any & any))","{(any | int), {any}}"); }
		@Test public void test_35730() { testValid("((int | any) | (any & any))","{!int, {int}}"); }
		@Test public void test_35731() { testValid("((int | any) | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_35732() { testValid("((int | any) | (any & any))","{(any | any), {int}}"); }
		@Test public void test_35733() { testValid("((int | any) | (any & any))","{(any & any), {int}}"); }
		@Test public void test_35734() { testValid("((int | any) | (any & any))","{(any & int), {int}}"); }
		@Test public void test_35735() { testValid("((int | any) | (any & any))","{{any, any}, !int}"); }
		@Test public void test_35736() { testValid("((int | any) | (any & any))","{{any, int}, !int}"); }
		@Test public void test_35737() { testValid("((int | any) | (any & any))","{(any | any), !int}"); }
		@Test public void test_35738() { testValid("((int | any) | (any & any))","{(int | any), !int}"); }
		@Test public void test_35739() { testValid("((int | any) | (any & any))","{(any & any), !int}"); }
		@Test public void test_35740() { testValid("((int | any) | (any & any))","{(int & any), !int}"); }
		@Test public void test_35741() { testValid("((int | any) | (any & any))","{(int & int), !int}"); }
		@Test public void test_35742() { testValid("((int | any) | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_35743() { testValid("((int | any) | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_35744() { testValid("((int | any) | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_35745() { testValid("((int | any) | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_35746() { testValid("((int | any) | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_35747() { testValid("((int | any) | (any & any))","{!int, {int, any}}"); }
		@Test public void test_35748() { testValid("((int | any) | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_35749() { testValid("((int | any) | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_35750() { testValid("((int | any) | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_35751() { testValid("((int | any) | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_35752() { testValid("((int | any) | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_35753() { testValid("((int | any) | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_35754() { testValid("((int | any) | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_35755() { testValid("((int | any) | (any & any))","{!int, {int, int}}"); }
		@Test public void test_35756() { testValid("((int | any) | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_35757() { testValid("((int | any) | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_35758() { testValid("((int | any) | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_35759() { testValid("((int | any) | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_35760() { testValid("((int | any) | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_35761() { testValid("((int | any) | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_35762() { testValid("((int | any) | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_35763() { testValid("((int | any) | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_35764() { testValid("((int | any) | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_35765() { testValid("((int | any) | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_35766() { testValid("((int | any) | (any & any))","{!int, (int | any)}"); }
		@Test public void test_35767() { testValid("((int | any) | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35768() { testValid("((int | any) | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35769() { testValid("((int | any) | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35770() { testValid("((int | any) | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35771() { testValid("((int | any) | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35772() { testValid("((int | any) | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35773() { testValid("((int | any) | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35774() { testValid("((int | any) | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35775() { testValid("((int | any) | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35776() { testValid("((int | any) | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35777() { testValid("((int | any) | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35778() { testValid("((int | any) | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35779() { testValid("((int | any) | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35780() { testValid("((int | any) | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35781() { testValid("((int | any) | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35782() { testValid("((int | any) | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35783() { testValid("((int | any) | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35784() { testValid("((int | any) | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35785() { testValid("((int | any) | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35786() { testValid("((int | any) | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35787() { testValid("((int | any) | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35788() { testValid("((int | any) | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35789() { testValid("((int | any) | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35790() { testValid("((int | any) | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35791() { testValid("((int | any) | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35792() { testValid("((int | any) | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35793() { testValid("((int | any) | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35794() { testValid("((int | any) | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35795() { testValid("((int | any) | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35796() { testValid("((int | any) | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35797() { testValid("((int | any) | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35798() { testValid("((int | any) | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35799() { testValid("((int | any) | (any & any))","(!int | {any})"); }
		@Test public void test_35800() { testValid("((int | any) | (any & any))","({any, any} | {any})"); }
		@Test public void test_35801() { testValid("((int | any) | (any & any))","((any | any) | {any})"); }
		@Test public void test_35802() { testValid("((int | any) | (any & any))","((int | any) | {any})"); }
		@Test public void test_35803() { testValid("((int | any) | (any & any))","((any & any) | {any})"); }
		@Test public void test_35804() { testValid("((int | any) | (any & any))","((int & any) | {any})"); }
		@Test public void test_35805() { testValid("((int | any) | (any & any))","((any & int) | {any})"); }
		@Test public void test_35806() { testValid("((int | any) | (any & any))","({int} | {int})"); }
		@Test public void test_35807() { testValid("((int | any) | (any & any))","(!any | {int})"); }
		@Test public void test_35808() { testValid("((int | any) | (any & any))","(!int | {int})"); }
		@Test public void test_35809() { testValid("((int | any) | (any & any))","({any, int} | {int})"); }
		@Test public void test_35810() { testValid("((int | any) | (any & any))","((int & any) | {int})"); }
		@Test public void test_35811() { testValid("((int | any) | (any & any))","((any & int) | {int})"); }
		@Test public void test_35812() { testValid("((int | any) | (any & any))","((int & int) | {int})"); }
		@Test public void test_35813() { testValid("((int | any) | (any & any))","({any} | !any)"); }
		@Test public void test_35814() { testValid("((int | any) | (any & any))","({int} | !any)"); }
		@Test public void test_35815() { testValid("((int | any) | (any & any))","({any, any} | !any)"); }
		@Test public void test_35816() { testValid("((int | any) | (any & any))","({int, int} | !any)"); }
		@Test public void test_35817() { testValid("((int | any) | (any & any))","((any | any) | !any)"); }
		@Test public void test_35818() { testValid("((int | any) | (any & any))","((int | any) | !any)"); }
		@Test public void test_35819() { testValid("((int | any) | (any & any))","((int | int) | !any)"); }
		@Test public void test_35820() { testValid("((int | any) | (any & any))","((int & int) | !any)"); }
		@Test public void test_35821() { testValid("((int | any) | (any & any))","(!int | !int)"); }
		@Test public void test_35822() { testValid("((int | any) | (any & any))","({any, any} | !int)"); }
		@Test public void test_35823() { testValid("((int | any) | (any & any))","({int, int} | !int)"); }
		@Test public void test_35824() { testValid("((int | any) | (any & any))","((int | any) | !int)"); }
		@Test public void test_35825() { testValid("((int | any) | (any & any))","((any | int) | !int)"); }
		@Test public void test_35826() { testValid("((int | any) | (any & any))","((any & int) | !int)"); }
		@Test public void test_35827() { testValid("((int | any) | (any & any))","((int & int) | !int)"); }
		@Test public void test_35828() { testValid("((int | any) | (any & any))","({int} | {any, any})"); }
		@Test public void test_35829() { testValid("((int | any) | (any & any))","(!any | {any, any})"); }
		@Test public void test_35830() { testValid("((int | any) | (any & any))","(!int | {any, any})"); }
		@Test public void test_35831() { testValid("((int | any) | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_35832() { testValid("((int | any) | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_35833() { testValid("((int | any) | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_35834() { testValid("((int | any) | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_35835() { testValid("((int | any) | (any & any))","(!int | {int, any})"); }
		@Test public void test_35836() { testValid("((int | any) | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_35837() { testValid("((int | any) | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_35838() { testValid("((int | any) | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_35839() { testValid("((int | any) | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_35840() { testValid("((int | any) | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_35841() { testValid("((int | any) | (any & any))","({any} | {any, int})"); }
		@Test public void test_35842() { testValid("((int | any) | (any & any))","(!int | {any, int})"); }
		@Test public void test_35843() { testValid("((int | any) | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_35844() { testValid("((int | any) | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_35845() { testValid("((int | any) | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_35846() { testValid("((int | any) | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_35847() { testValid("((int | any) | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_35848() { testValid("((int | any) | (any & any))","(!any | {int, int})"); }
		@Test public void test_35849() { testValid("((int | any) | (any & any))","(!int | {int, int})"); }
		@Test public void test_35850() { testValid("((int | any) | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_35851() { testValid("((int | any) | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_35852() { testValid("((int | any) | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_35853() { testValid("((int | any) | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_35854() { testValid("((int | any) | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_35855() { testValid("((int | any) | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_35856() { testValid("((int | any) | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_35857() { testValid("((int | any) | (any & any))","({any} | (any | any))"); }
		@Test public void test_35858() { testValid("((int | any) | (any & any))","(!any | (any | any))"); }
		@Test public void test_35859() { testValid("((int | any) | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_35860() { testValid("((int | any) | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_35861() { testValid("((int | any) | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_35862() { testValid("((int | any) | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_35863() { testValid("((int | any) | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_35864() { testValid("((int | any) | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_35865() { testValid("((int | any) | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_35866() { testValid("((int | any) | (any & any))","({any} | (int | any))"); }
		@Test public void test_35867() { testValid("((int | any) | (any & any))","(!int | (int | any))"); }
		@Test public void test_35868() { testValid("((int | any) | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_35869() { testValid("((int | any) | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_35870() { testValid("((int | any) | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_35871() { testValid("((int | any) | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_35872() { testValid("((int | any) | (any & any))","({any} | (any | int))"); }
		@Test public void test_35873() { testValid("((int | any) | (any & any))","({int} | (any | int))"); }
		@Test public void test_35874() { testValid("((int | any) | (any & any))","(!any | (any | int))"); }
		@Test public void test_35875() { testValid("((int | any) | (any & any))","(!int | (any | int))"); }
		@Test public void test_35876() { testValid("((int | any) | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_35877() { testValid("((int | any) | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_35878() { testValid("((int | any) | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_35879() { testValid("((int | any) | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_35880() { testValid("((int | any) | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_35881() { testValid("((int | any) | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_35882() { testValid("((int | any) | (any & any))","({int} | (int | int))"); }
		@Test public void test_35883() { testValid("((int | any) | (any & any))","(!any | (int | int))"); }
		@Test public void test_35884() { testValid("((int | any) | (any & any))","(!int | (int | int))"); }
		@Test public void test_35885() { testValid("((int | any) | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_35886() { testValid("((int | any) | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_35887() { testValid("((int | any) | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_35888() { testValid("((int | any) | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_35889() { testValid("((int | any) | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_35890() { testValid("((int | any) | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_35891() { testValid("((int | any) | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_35892() { testValid("((int | any) | (any & any))","(!any | (any & any))"); }
		@Test public void test_35893() { testValid("((int | any) | (any & any))","(!int | (any & any))"); }
		@Test public void test_35894() { testValid("((int | any) | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_35895() { testValid("((int | any) | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_35896() { testValid("((int | any) | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_35897() { testValid("((int | any) | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_35898() { testValid("((int | any) | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_35899() { testValid("((int | any) | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_35900() { testValid("((int | any) | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_35901() { testValid("((int | any) | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_35902() { testValid("((int | any) | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_35903() { testValid("((int | any) | (any & any))","({any} | (int & any))"); }
		@Test public void test_35904() { testValid("((int | int) | (any & any))","{int}"); }
		@Test public void test_35905() { testValid("((int | int) | (any & any))","{any, any}"); }
		@Test public void test_35906() { testValid("((int | int) | (any & any))","{int, int}"); }
		@Test public void test_35907() { testValid("((int | int) | (any & any))","(any | int)"); }
		@Test public void test_35908() { testValid("((int | int) | (any & any))","(int & any)"); }
		@Test public void test_35909() { testValid("((int | int) | (any & any))","{{any}}"); }
		@Test public void test_35910() { testValid("((int | int) | (any & any))","{{int, any}}"); }
		@Test public void test_35911() { testValid("((int | int) | (any & any))","{{int, int}}"); }
		@Test public void test_35912() { testValid("((int | int) | (any & any))","{(any | int)}"); }
		@Test public void test_35913() { testValid("((int | int) | (any & any))","!{int, any}"); }
		@Test public void test_35914() { testValid("((int | int) | (any & any))","!{int, int}"); }
		@Test public void test_35915() { testValid("((int | int) | (any & any))","!(any | any)"); }
		@Test public void test_35916() { testValid("((int | int) | (any & any))","!(any & any)"); }
		@Test public void test_35917() { testValid("((int | int) | (any & any))","!(int & int)"); }
		@Test public void test_35918() { testValid("((int | int) | (any & any))","{{int}, {any}}"); }
		@Test public void test_35919() { testValid("((int | int) | (any & any))","{!int, {any}}"); }
		@Test public void test_35920() { testValid("((int | int) | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_35921() { testValid("((int | int) | (any & any))","{(any | int), {any}}"); }
		@Test public void test_35922() { testValid("((int | int) | (any & any))","{!int, {int}}"); }
		@Test public void test_35923() { testValid("((int | int) | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_35924() { testValid("((int | int) | (any & any))","{(any | any), {int}}"); }
		@Test public void test_35925() { testValid("((int | int) | (any & any))","{(any & any), {int}}"); }
		@Test public void test_35926() { testValid("((int | int) | (any & any))","{(any & int), {int}}"); }
		@Test public void test_35927() { testValid("((int | int) | (any & any))","{{any, any}, !int}"); }
		@Test public void test_35928() { testValid("((int | int) | (any & any))","{{any, int}, !int}"); }
		@Test public void test_35929() { testValid("((int | int) | (any & any))","{(any | any), !int}"); }
		@Test public void test_35930() { testValid("((int | int) | (any & any))","{(int | any), !int}"); }
		@Test public void test_35931() { testValid("((int | int) | (any & any))","{(any & any), !int}"); }
		@Test public void test_35932() { testValid("((int | int) | (any & any))","{(int & any), !int}"); }
		@Test public void test_35933() { testValid("((int | int) | (any & any))","{(int & int), !int}"); }
		@Test public void test_35934() { testValid("((int | int) | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_35935() { testValid("((int | int) | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_35936() { testValid("((int | int) | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_35937() { testValid("((int | int) | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_35938() { testValid("((int | int) | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_35939() { testValid("((int | int) | (any & any))","{!int, {int, any}}"); }
		@Test public void test_35940() { testValid("((int | int) | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_35941() { testValid("((int | int) | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_35942() { testValid("((int | int) | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_35943() { testValid("((int | int) | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_35944() { testValid("((int | int) | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_35945() { testValid("((int | int) | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_35946() { testValid("((int | int) | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_35947() { testValid("((int | int) | (any & any))","{!int, {int, int}}"); }
		@Test public void test_35948() { testValid("((int | int) | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_35949() { testValid("((int | int) | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_35950() { testValid("((int | int) | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_35951() { testValid("((int | int) | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_35952() { testValid("((int | int) | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_35953() { testValid("((int | int) | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_35954() { testValid("((int | int) | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_35955() { testValid("((int | int) | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_35956() { testValid("((int | int) | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_35957() { testValid("((int | int) | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_35958() { testValid("((int | int) | (any & any))","{!int, (int | any)}"); }
		@Test public void test_35959() { testValid("((int | int) | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_35960() { testValid("((int | int) | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_35961() { testValid("((int | int) | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_35962() { testValid("((int | int) | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_35963() { testValid("((int | int) | (any & any))","{!int, (any | int)}"); }
		@Test public void test_35964() { testValid("((int | int) | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_35965() { testValid("((int | int) | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_35966() { testValid("((int | int) | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_35967() { testValid("((int | int) | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_35968() { testValid("((int | int) | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_35969() { testValid("((int | int) | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_35970() { testValid("((int | int) | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_35971() { testValid("((int | int) | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_35972() { testValid("((int | int) | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_35973() { testValid("((int | int) | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_35974() { testValid("((int | int) | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_35975() { testValid("((int | int) | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_35976() { testValid("((int | int) | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_35977() { testValid("((int | int) | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_35978() { testValid("((int | int) | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_35979() { testValid("((int | int) | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_35980() { testValid("((int | int) | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_35981() { testValid("((int | int) | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_35982() { testValid("((int | int) | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_35983() { testValid("((int | int) | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_35984() { testValid("((int | int) | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_35985() { testValid("((int | int) | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_35986() { testValid("((int | int) | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_35987() { testValid("((int | int) | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_35988() { testValid("((int | int) | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_35989() { testValid("((int | int) | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_35990() { testValid("((int | int) | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_35991() { testValid("((int | int) | (any & any))","(!int | {any})"); }
		@Test public void test_35992() { testValid("((int | int) | (any & any))","({any, any} | {any})"); }
		@Test public void test_35993() { testValid("((int | int) | (any & any))","((any | any) | {any})"); }
		@Test public void test_35994() { testValid("((int | int) | (any & any))","((int | any) | {any})"); }
		@Test public void test_35995() { testValid("((int | int) | (any & any))","((any & any) | {any})"); }
		@Test public void test_35996() { testValid("((int | int) | (any & any))","((int & any) | {any})"); }
		@Test public void test_35997() { testValid("((int | int) | (any & any))","((any & int) | {any})"); }
		@Test public void test_35998() { testValid("((int | int) | (any & any))","({int} | {int})"); }
		@Test public void test_35999() { testValid("((int | int) | (any & any))","(!any | {int})"); }
		@Test public void test_36000() { testValid("((int | int) | (any & any))","(!int | {int})"); }
		@Test public void test_36001() { testValid("((int | int) | (any & any))","({any, int} | {int})"); }
		@Test public void test_36002() { testValid("((int | int) | (any & any))","((int & any) | {int})"); }
		@Test public void test_36003() { testValid("((int | int) | (any & any))","((any & int) | {int})"); }
		@Test public void test_36004() { testValid("((int | int) | (any & any))","((int & int) | {int})"); }
		@Test public void test_36005() { testValid("((int | int) | (any & any))","({any} | !any)"); }
		@Test public void test_36006() { testValid("((int | int) | (any & any))","({int} | !any)"); }
		@Test public void test_36007() { testValid("((int | int) | (any & any))","({any, any} | !any)"); }
		@Test public void test_36008() { testValid("((int | int) | (any & any))","({int, int} | !any)"); }
		@Test public void test_36009() { testValid("((int | int) | (any & any))","((any | any) | !any)"); }
		@Test public void test_36010() { testValid("((int | int) | (any & any))","((int | any) | !any)"); }
		@Test public void test_36011() { testValid("((int | int) | (any & any))","((int | int) | !any)"); }
		@Test public void test_36012() { testValid("((int | int) | (any & any))","((int & int) | !any)"); }
		@Test public void test_36013() { testValid("((int | int) | (any & any))","(!int | !int)"); }
		@Test public void test_36014() { testValid("((int | int) | (any & any))","({any, any} | !int)"); }
		@Test public void test_36015() { testValid("((int | int) | (any & any))","({int, int} | !int)"); }
		@Test public void test_36016() { testValid("((int | int) | (any & any))","((int | any) | !int)"); }
		@Test public void test_36017() { testValid("((int | int) | (any & any))","((any | int) | !int)"); }
		@Test public void test_36018() { testValid("((int | int) | (any & any))","((any & int) | !int)"); }
		@Test public void test_36019() { testValid("((int | int) | (any & any))","((int & int) | !int)"); }
		@Test public void test_36020() { testValid("((int | int) | (any & any))","({int} | {any, any})"); }
		@Test public void test_36021() { testValid("((int | int) | (any & any))","(!any | {any, any})"); }
		@Test public void test_36022() { testValid("((int | int) | (any & any))","(!int | {any, any})"); }
		@Test public void test_36023() { testValid("((int | int) | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_36024() { testValid("((int | int) | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_36025() { testValid("((int | int) | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_36026() { testValid("((int | int) | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_36027() { testValid("((int | int) | (any & any))","(!int | {int, any})"); }
		@Test public void test_36028() { testValid("((int | int) | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_36029() { testValid("((int | int) | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_36030() { testValid("((int | int) | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_36031() { testValid("((int | int) | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_36032() { testValid("((int | int) | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_36033() { testValid("((int | int) | (any & any))","({any} | {any, int})"); }
		@Test public void test_36034() { testValid("((int | int) | (any & any))","(!int | {any, int})"); }
		@Test public void test_36035() { testValid("((int | int) | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_36036() { testValid("((int | int) | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_36037() { testValid("((int | int) | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_36038() { testValid("((int | int) | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_36039() { testValid("((int | int) | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_36040() { testValid("((int | int) | (any & any))","(!any | {int, int})"); }
		@Test public void test_36041() { testValid("((int | int) | (any & any))","(!int | {int, int})"); }
		@Test public void test_36042() { testValid("((int | int) | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_36043() { testValid("((int | int) | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_36044() { testValid("((int | int) | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_36045() { testValid("((int | int) | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_36046() { testValid("((int | int) | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_36047() { testValid("((int | int) | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_36048() { testValid("((int | int) | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_36049() { testValid("((int | int) | (any & any))","({any} | (any | any))"); }
		@Test public void test_36050() { testValid("((int | int) | (any & any))","(!any | (any | any))"); }
		@Test public void test_36051() { testValid("((int | int) | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_36052() { testValid("((int | int) | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_36053() { testValid("((int | int) | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_36054() { testValid("((int | int) | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_36055() { testValid("((int | int) | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_36056() { testValid("((int | int) | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_36057() { testValid("((int | int) | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_36058() { testValid("((int | int) | (any & any))","({any} | (int | any))"); }
		@Test public void test_36059() { testValid("((int | int) | (any & any))","(!int | (int | any))"); }
		@Test public void test_36060() { testValid("((int | int) | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_36061() { testValid("((int | int) | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_36062() { testValid("((int | int) | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_36063() { testValid("((int | int) | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_36064() { testValid("((int | int) | (any & any))","({any} | (any | int))"); }
		@Test public void test_36065() { testValid("((int | int) | (any & any))","({int} | (any | int))"); }
		@Test public void test_36066() { testValid("((int | int) | (any & any))","(!any | (any | int))"); }
		@Test public void test_36067() { testValid("((int | int) | (any & any))","(!int | (any | int))"); }
		@Test public void test_36068() { testValid("((int | int) | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_36069() { testValid("((int | int) | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_36070() { testValid("((int | int) | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_36071() { testValid("((int | int) | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_36072() { testValid("((int | int) | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_36073() { testValid("((int | int) | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_36074() { testValid("((int | int) | (any & any))","({int} | (int | int))"); }
		@Test public void test_36075() { testValid("((int | int) | (any & any))","(!any | (int | int))"); }
		@Test public void test_36076() { testValid("((int | int) | (any & any))","(!int | (int | int))"); }
		@Test public void test_36077() { testValid("((int | int) | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_36078() { testValid("((int | int) | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_36079() { testValid("((int | int) | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_36080() { testValid("((int | int) | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_36081() { testValid("((int | int) | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_36082() { testValid("((int | int) | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_36083() { testValid("((int | int) | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_36084() { testValid("((int | int) | (any & any))","(!any | (any & any))"); }
		@Test public void test_36085() { testValid("((int | int) | (any & any))","(!int | (any & any))"); }
		@Test public void test_36086() { testValid("((int | int) | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_36087() { testValid("((int | int) | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_36088() { testValid("((int | int) | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_36089() { testValid("((int | int) | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_36090() { testValid("((int | int) | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_36091() { testValid("((int | int) | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_36092() { testValid("((int | int) | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_36093() { testValid("((int | int) | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_36094() { testValid("((int | int) | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_36095() { testValid("((int | int) | (any & any))","({any} | (int & any))"); }
		@Test public void test_36096() { testValid("((int & any) | (any & any))","{int}"); }
		@Test public void test_36097() { testValid("((int & any) | (any & any))","{any, any}"); }
		@Test public void test_36098() { testValid("((int & any) | (any & any))","{int, int}"); }
		@Test public void test_36099() { testValid("((int & any) | (any & any))","(any | int)"); }
		@Test public void test_36100() { testValid("((int & any) | (any & any))","(int & any)"); }
		@Test public void test_36101() { testValid("((int & any) | (any & any))","{{any}}"); }
		@Test public void test_36102() { testValid("((int & any) | (any & any))","{{int, any}}"); }
		@Test public void test_36103() { testValid("((int & any) | (any & any))","{{int, int}}"); }
		@Test public void test_36104() { testValid("((int & any) | (any & any))","{(any | int)}"); }
		@Test public void test_36105() { testValid("((int & any) | (any & any))","!{int, any}"); }
		@Test public void test_36106() { testValid("((int & any) | (any & any))","!{int, int}"); }
		@Test public void test_36107() { testValid("((int & any) | (any & any))","!(any | any)"); }
		@Test public void test_36108() { testValid("((int & any) | (any & any))","!(any & any)"); }
		@Test public void test_36109() { testValid("((int & any) | (any & any))","!(int & int)"); }
		@Test public void test_36110() { testValid("((int & any) | (any & any))","{{int}, {any}}"); }
		@Test public void test_36111() { testValid("((int & any) | (any & any))","{!int, {any}}"); }
		@Test public void test_36112() { testValid("((int & any) | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_36113() { testValid("((int & any) | (any & any))","{(any | int), {any}}"); }
		@Test public void test_36114() { testValid("((int & any) | (any & any))","{!int, {int}}"); }
		@Test public void test_36115() { testValid("((int & any) | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_36116() { testValid("((int & any) | (any & any))","{(any | any), {int}}"); }
		@Test public void test_36117() { testValid("((int & any) | (any & any))","{(any & any), {int}}"); }
		@Test public void test_36118() { testValid("((int & any) | (any & any))","{(any & int), {int}}"); }
		@Test public void test_36119() { testValid("((int & any) | (any & any))","{{any, any}, !int}"); }
		@Test public void test_36120() { testValid("((int & any) | (any & any))","{{any, int}, !int}"); }
		@Test public void test_36121() { testValid("((int & any) | (any & any))","{(any | any), !int}"); }
		@Test public void test_36122() { testValid("((int & any) | (any & any))","{(int | any), !int}"); }
		@Test public void test_36123() { testValid("((int & any) | (any & any))","{(any & any), !int}"); }
		@Test public void test_36124() { testValid("((int & any) | (any & any))","{(int & any), !int}"); }
		@Test public void test_36125() { testValid("((int & any) | (any & any))","{(int & int), !int}"); }
		@Test public void test_36126() { testValid("((int & any) | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_36127() { testValid("((int & any) | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_36128() { testValid("((int & any) | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_36129() { testValid("((int & any) | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_36130() { testValid("((int & any) | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_36131() { testValid("((int & any) | (any & any))","{!int, {int, any}}"); }
		@Test public void test_36132() { testValid("((int & any) | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_36133() { testValid("((int & any) | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_36134() { testValid("((int & any) | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_36135() { testValid("((int & any) | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_36136() { testValid("((int & any) | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_36137() { testValid("((int & any) | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_36138() { testValid("((int & any) | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_36139() { testValid("((int & any) | (any & any))","{!int, {int, int}}"); }
		@Test public void test_36140() { testValid("((int & any) | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_36141() { testValid("((int & any) | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_36142() { testValid("((int & any) | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_36143() { testValid("((int & any) | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_36144() { testValid("((int & any) | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_36145() { testValid("((int & any) | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_36146() { testValid("((int & any) | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_36147() { testValid("((int & any) | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_36148() { testValid("((int & any) | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_36149() { testValid("((int & any) | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_36150() { testValid("((int & any) | (any & any))","{!int, (int | any)}"); }
		@Test public void test_36151() { testValid("((int & any) | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_36152() { testValid("((int & any) | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_36153() { testValid("((int & any) | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_36154() { testValid("((int & any) | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_36155() { testValid("((int & any) | (any & any))","{!int, (any | int)}"); }
		@Test public void test_36156() { testValid("((int & any) | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_36157() { testValid("((int & any) | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_36158() { testValid("((int & any) | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_36159() { testValid("((int & any) | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_36160() { testValid("((int & any) | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_36161() { testValid("((int & any) | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_36162() { testValid("((int & any) | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_36163() { testValid("((int & any) | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_36164() { testValid("((int & any) | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_36165() { testValid("((int & any) | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_36166() { testValid("((int & any) | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_36167() { testValid("((int & any) | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_36168() { testValid("((int & any) | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_36169() { testValid("((int & any) | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_36170() { testValid("((int & any) | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_36171() { testValid("((int & any) | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_36172() { testValid("((int & any) | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_36173() { testValid("((int & any) | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_36174() { testValid("((int & any) | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_36175() { testValid("((int & any) | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_36176() { testValid("((int & any) | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_36177() { testValid("((int & any) | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_36178() { testValid("((int & any) | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_36179() { testValid("((int & any) | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_36180() { testValid("((int & any) | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_36181() { testValid("((int & any) | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_36182() { testValid("((int & any) | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_36183() { testValid("((int & any) | (any & any))","(!int | {any})"); }
		@Test public void test_36184() { testValid("((int & any) | (any & any))","({any, any} | {any})"); }
		@Test public void test_36185() { testValid("((int & any) | (any & any))","((any | any) | {any})"); }
		@Test public void test_36186() { testValid("((int & any) | (any & any))","((int | any) | {any})"); }
		@Test public void test_36187() { testValid("((int & any) | (any & any))","((any & any) | {any})"); }
		@Test public void test_36188() { testValid("((int & any) | (any & any))","((int & any) | {any})"); }
		@Test public void test_36189() { testValid("((int & any) | (any & any))","((any & int) | {any})"); }
		@Test public void test_36190() { testValid("((int & any) | (any & any))","({int} | {int})"); }
		@Test public void test_36191() { testValid("((int & any) | (any & any))","(!any | {int})"); }
		@Test public void test_36192() { testValid("((int & any) | (any & any))","(!int | {int})"); }
		@Test public void test_36193() { testValid("((int & any) | (any & any))","({any, int} | {int})"); }
		@Test public void test_36194() { testValid("((int & any) | (any & any))","((int & any) | {int})"); }
		@Test public void test_36195() { testValid("((int & any) | (any & any))","((any & int) | {int})"); }
		@Test public void test_36196() { testValid("((int & any) | (any & any))","((int & int) | {int})"); }
		@Test public void test_36197() { testValid("((int & any) | (any & any))","({any} | !any)"); }
		@Test public void test_36198() { testValid("((int & any) | (any & any))","({int} | !any)"); }
		@Test public void test_36199() { testValid("((int & any) | (any & any))","({any, any} | !any)"); }
		@Test public void test_36200() { testValid("((int & any) | (any & any))","({int, int} | !any)"); }
		@Test public void test_36201() { testValid("((int & any) | (any & any))","((any | any) | !any)"); }
		@Test public void test_36202() { testValid("((int & any) | (any & any))","((int | any) | !any)"); }
		@Test public void test_36203() { testValid("((int & any) | (any & any))","((int | int) | !any)"); }
		@Test public void test_36204() { testValid("((int & any) | (any & any))","((int & int) | !any)"); }
		@Test public void test_36205() { testValid("((int & any) | (any & any))","(!int | !int)"); }
		@Test public void test_36206() { testValid("((int & any) | (any & any))","({any, any} | !int)"); }
		@Test public void test_36207() { testValid("((int & any) | (any & any))","({int, int} | !int)"); }
		@Test public void test_36208() { testValid("((int & any) | (any & any))","((int | any) | !int)"); }
		@Test public void test_36209() { testValid("((int & any) | (any & any))","((any | int) | !int)"); }
		@Test public void test_36210() { testValid("((int & any) | (any & any))","((any & int) | !int)"); }
		@Test public void test_36211() { testValid("((int & any) | (any & any))","((int & int) | !int)"); }
		@Test public void test_36212() { testValid("((int & any) | (any & any))","({int} | {any, any})"); }
		@Test public void test_36213() { testValid("((int & any) | (any & any))","(!any | {any, any})"); }
		@Test public void test_36214() { testValid("((int & any) | (any & any))","(!int | {any, any})"); }
		@Test public void test_36215() { testValid("((int & any) | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_36216() { testValid("((int & any) | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_36217() { testValid("((int & any) | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_36218() { testValid("((int & any) | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_36219() { testValid("((int & any) | (any & any))","(!int | {int, any})"); }
		@Test public void test_36220() { testValid("((int & any) | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_36221() { testValid("((int & any) | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_36222() { testValid("((int & any) | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_36223() { testValid("((int & any) | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_36224() { testValid("((int & any) | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_36225() { testValid("((int & any) | (any & any))","({any} | {any, int})"); }
		@Test public void test_36226() { testValid("((int & any) | (any & any))","(!int | {any, int})"); }
		@Test public void test_36227() { testValid("((int & any) | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_36228() { testValid("((int & any) | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_36229() { testValid("((int & any) | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_36230() { testValid("((int & any) | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_36231() { testValid("((int & any) | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_36232() { testValid("((int & any) | (any & any))","(!any | {int, int})"); }
		@Test public void test_36233() { testValid("((int & any) | (any & any))","(!int | {int, int})"); }
		@Test public void test_36234() { testValid("((int & any) | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_36235() { testValid("((int & any) | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_36236() { testValid("((int & any) | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_36237() { testValid("((int & any) | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_36238() { testValid("((int & any) | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_36239() { testValid("((int & any) | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_36240() { testValid("((int & any) | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_36241() { testValid("((int & any) | (any & any))","({any} | (any | any))"); }
		@Test public void test_36242() { testValid("((int & any) | (any & any))","(!any | (any | any))"); }
		@Test public void test_36243() { testValid("((int & any) | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_36244() { testValid("((int & any) | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_36245() { testValid("((int & any) | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_36246() { testValid("((int & any) | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_36247() { testValid("((int & any) | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_36248() { testValid("((int & any) | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_36249() { testValid("((int & any) | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_36250() { testValid("((int & any) | (any & any))","({any} | (int | any))"); }
		@Test public void test_36251() { testValid("((int & any) | (any & any))","(!int | (int | any))"); }
		@Test public void test_36252() { testValid("((int & any) | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_36253() { testValid("((int & any) | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_36254() { testValid("((int & any) | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_36255() { testValid("((int & any) | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_36256() { testValid("((int & any) | (any & any))","({any} | (any | int))"); }
		@Test public void test_36257() { testValid("((int & any) | (any & any))","({int} | (any | int))"); }
		@Test public void test_36258() { testValid("((int & any) | (any & any))","(!any | (any | int))"); }
		@Test public void test_36259() { testValid("((int & any) | (any & any))","(!int | (any | int))"); }
		@Test public void test_36260() { testValid("((int & any) | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_36261() { testValid("((int & any) | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_36262() { testValid("((int & any) | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_36263() { testValid("((int & any) | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_36264() { testValid("((int & any) | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_36265() { testValid("((int & any) | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_36266() { testValid("((int & any) | (any & any))","({int} | (int | int))"); }
		@Test public void test_36267() { testValid("((int & any) | (any & any))","(!any | (int | int))"); }
		@Test public void test_36268() { testValid("((int & any) | (any & any))","(!int | (int | int))"); }
		@Test public void test_36269() { testValid("((int & any) | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_36270() { testValid("((int & any) | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_36271() { testValid("((int & any) | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_36272() { testValid("((int & any) | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_36273() { testValid("((int & any) | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_36274() { testValid("((int & any) | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_36275() { testValid("((int & any) | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_36276() { testValid("((int & any) | (any & any))","(!any | (any & any))"); }
		@Test public void test_36277() { testValid("((int & any) | (any & any))","(!int | (any & any))"); }
		@Test public void test_36278() { testValid("((int & any) | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_36279() { testValid("((int & any) | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_36280() { testValid("((int & any) | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_36281() { testValid("((int & any) | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_36282() { testValid("((int & any) | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_36283() { testValid("((int & any) | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_36284() { testValid("((int & any) | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_36285() { testValid("((int & any) | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_36286() { testValid("((int & any) | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_36287() { testValid("((int & any) | (any & any))","({any} | (int & any))"); }
		@Test public void test_36288() { testValid("((any & int) | (any & any))","{int}"); }
		@Test public void test_36289() { testValid("((any & int) | (any & any))","{any, any}"); }
		@Test public void test_36290() { testValid("((any & int) | (any & any))","{int, int}"); }
		@Test public void test_36291() { testValid("((any & int) | (any & any))","(any | int)"); }
		@Test public void test_36292() { testValid("((any & int) | (any & any))","(int & any)"); }
		@Test public void test_36293() { testValid("((any & int) | (any & any))","{{any}}"); }
		@Test public void test_36294() { testValid("((any & int) | (any & any))","{{int, any}}"); }
		@Test public void test_36295() { testValid("((any & int) | (any & any))","{{int, int}}"); }
		@Test public void test_36296() { testValid("((any & int) | (any & any))","{(any | int)}"); }
		@Test public void test_36297() { testValid("((any & int) | (any & any))","!{int, any}"); }
		@Test public void test_36298() { testValid("((any & int) | (any & any))","!{int, int}"); }
		@Test public void test_36299() { testValid("((any & int) | (any & any))","!(any | any)"); }
		@Test public void test_36300() { testValid("((any & int) | (any & any))","!(any & any)"); }
		@Test public void test_36301() { testValid("((any & int) | (any & any))","!(int & int)"); }
		@Test public void test_36302() { testValid("((any & int) | (any & any))","{{int}, {any}}"); }
		@Test public void test_36303() { testValid("((any & int) | (any & any))","{!int, {any}}"); }
		@Test public void test_36304() { testValid("((any & int) | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_36305() { testValid("((any & int) | (any & any))","{(any | int), {any}}"); }
		@Test public void test_36306() { testValid("((any & int) | (any & any))","{!int, {int}}"); }
		@Test public void test_36307() { testValid("((any & int) | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_36308() { testValid("((any & int) | (any & any))","{(any | any), {int}}"); }
		@Test public void test_36309() { testValid("((any & int) | (any & any))","{(any & any), {int}}"); }
		@Test public void test_36310() { testValid("((any & int) | (any & any))","{(any & int), {int}}"); }
		@Test public void test_36311() { testValid("((any & int) | (any & any))","{{any, any}, !int}"); }
		@Test public void test_36312() { testValid("((any & int) | (any & any))","{{any, int}, !int}"); }
		@Test public void test_36313() { testValid("((any & int) | (any & any))","{(any | any), !int}"); }
		@Test public void test_36314() { testValid("((any & int) | (any & any))","{(int | any), !int}"); }
		@Test public void test_36315() { testValid("((any & int) | (any & any))","{(any & any), !int}"); }
		@Test public void test_36316() { testValid("((any & int) | (any & any))","{(int & any), !int}"); }
		@Test public void test_36317() { testValid("((any & int) | (any & any))","{(int & int), !int}"); }
		@Test public void test_36318() { testValid("((any & int) | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_36319() { testValid("((any & int) | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_36320() { testValid("((any & int) | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_36321() { testValid("((any & int) | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_36322() { testValid("((any & int) | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_36323() { testValid("((any & int) | (any & any))","{!int, {int, any}}"); }
		@Test public void test_36324() { testValid("((any & int) | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_36325() { testValid("((any & int) | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_36326() { testValid("((any & int) | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_36327() { testValid("((any & int) | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_36328() { testValid("((any & int) | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_36329() { testValid("((any & int) | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_36330() { testValid("((any & int) | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_36331() { testValid("((any & int) | (any & any))","{!int, {int, int}}"); }
		@Test public void test_36332() { testValid("((any & int) | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_36333() { testValid("((any & int) | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_36334() { testValid("((any & int) | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_36335() { testValid("((any & int) | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_36336() { testValid("((any & int) | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_36337() { testValid("((any & int) | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_36338() { testValid("((any & int) | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_36339() { testValid("((any & int) | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_36340() { testValid("((any & int) | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_36341() { testValid("((any & int) | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_36342() { testValid("((any & int) | (any & any))","{!int, (int | any)}"); }
		@Test public void test_36343() { testValid("((any & int) | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_36344() { testValid("((any & int) | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_36345() { testValid("((any & int) | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_36346() { testValid("((any & int) | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_36347() { testValid("((any & int) | (any & any))","{!int, (any | int)}"); }
		@Test public void test_36348() { testValid("((any & int) | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_36349() { testValid("((any & int) | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_36350() { testValid("((any & int) | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_36351() { testValid("((any & int) | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_36352() { testValid("((any & int) | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_36353() { testValid("((any & int) | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_36354() { testValid("((any & int) | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_36355() { testValid("((any & int) | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_36356() { testValid("((any & int) | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_36357() { testValid("((any & int) | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_36358() { testValid("((any & int) | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_36359() { testValid("((any & int) | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_36360() { testValid("((any & int) | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_36361() { testValid("((any & int) | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_36362() { testValid("((any & int) | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_36363() { testValid("((any & int) | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_36364() { testValid("((any & int) | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_36365() { testValid("((any & int) | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_36366() { testValid("((any & int) | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_36367() { testValid("((any & int) | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_36368() { testValid("((any & int) | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_36369() { testValid("((any & int) | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_36370() { testValid("((any & int) | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_36371() { testValid("((any & int) | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_36372() { testValid("((any & int) | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_36373() { testValid("((any & int) | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_36374() { testValid("((any & int) | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_36375() { testValid("((any & int) | (any & any))","(!int | {any})"); }
		@Test public void test_36376() { testValid("((any & int) | (any & any))","({any, any} | {any})"); }
		@Test public void test_36377() { testValid("((any & int) | (any & any))","((any | any) | {any})"); }
		@Test public void test_36378() { testValid("((any & int) | (any & any))","((int | any) | {any})"); }
		@Test public void test_36379() { testValid("((any & int) | (any & any))","((any & any) | {any})"); }
		@Test public void test_36380() { testValid("((any & int) | (any & any))","((int & any) | {any})"); }
		@Test public void test_36381() { testValid("((any & int) | (any & any))","((any & int) | {any})"); }
		@Test public void test_36382() { testValid("((any & int) | (any & any))","({int} | {int})"); }
		@Test public void test_36383() { testValid("((any & int) | (any & any))","(!any | {int})"); }
		@Test public void test_36384() { testValid("((any & int) | (any & any))","(!int | {int})"); }
		@Test public void test_36385() { testValid("((any & int) | (any & any))","({any, int} | {int})"); }
		@Test public void test_36386() { testValid("((any & int) | (any & any))","((int & any) | {int})"); }
		@Test public void test_36387() { testValid("((any & int) | (any & any))","((any & int) | {int})"); }
		@Test public void test_36388() { testValid("((any & int) | (any & any))","((int & int) | {int})"); }
		@Test public void test_36389() { testValid("((any & int) | (any & any))","({any} | !any)"); }
		@Test public void test_36390() { testValid("((any & int) | (any & any))","({int} | !any)"); }
		@Test public void test_36391() { testValid("((any & int) | (any & any))","({any, any} | !any)"); }
		@Test public void test_36392() { testValid("((any & int) | (any & any))","({int, int} | !any)"); }
		@Test public void test_36393() { testValid("((any & int) | (any & any))","((any | any) | !any)"); }
		@Test public void test_36394() { testValid("((any & int) | (any & any))","((int | any) | !any)"); }
		@Test public void test_36395() { testValid("((any & int) | (any & any))","((int | int) | !any)"); }
		@Test public void test_36396() { testValid("((any & int) | (any & any))","((int & int) | !any)"); }
		@Test public void test_36397() { testValid("((any & int) | (any & any))","(!int | !int)"); }
		@Test public void test_36398() { testValid("((any & int) | (any & any))","({any, any} | !int)"); }
		@Test public void test_36399() { testValid("((any & int) | (any & any))","({int, int} | !int)"); }
		@Test public void test_36400() { testValid("((any & int) | (any & any))","((int | any) | !int)"); }
		@Test public void test_36401() { testValid("((any & int) | (any & any))","((any | int) | !int)"); }
		@Test public void test_36402() { testValid("((any & int) | (any & any))","((any & int) | !int)"); }
		@Test public void test_36403() { testValid("((any & int) | (any & any))","((int & int) | !int)"); }
		@Test public void test_36404() { testValid("((any & int) | (any & any))","({int} | {any, any})"); }
		@Test public void test_36405() { testValid("((any & int) | (any & any))","(!any | {any, any})"); }
		@Test public void test_36406() { testValid("((any & int) | (any & any))","(!int | {any, any})"); }
		@Test public void test_36407() { testValid("((any & int) | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_36408() { testValid("((any & int) | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_36409() { testValid("((any & int) | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_36410() { testValid("((any & int) | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_36411() { testValid("((any & int) | (any & any))","(!int | {int, any})"); }
		@Test public void test_36412() { testValid("((any & int) | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_36413() { testValid("((any & int) | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_36414() { testValid("((any & int) | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_36415() { testValid("((any & int) | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_36416() { testValid("((any & int) | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_36417() { testValid("((any & int) | (any & any))","({any} | {any, int})"); }
		@Test public void test_36418() { testValid("((any & int) | (any & any))","(!int | {any, int})"); }
		@Test public void test_36419() { testValid("((any & int) | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_36420() { testValid("((any & int) | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_36421() { testValid("((any & int) | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_36422() { testValid("((any & int) | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_36423() { testValid("((any & int) | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_36424() { testValid("((any & int) | (any & any))","(!any | {int, int})"); }
		@Test public void test_36425() { testValid("((any & int) | (any & any))","(!int | {int, int})"); }
		@Test public void test_36426() { testValid("((any & int) | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_36427() { testValid("((any & int) | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_36428() { testValid("((any & int) | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_36429() { testValid("((any & int) | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_36430() { testValid("((any & int) | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_36431() { testValid("((any & int) | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_36432() { testValid("((any & int) | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_36433() { testValid("((any & int) | (any & any))","({any} | (any | any))"); }
		@Test public void test_36434() { testValid("((any & int) | (any & any))","(!any | (any | any))"); }
		@Test public void test_36435() { testValid("((any & int) | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_36436() { testValid("((any & int) | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_36437() { testValid("((any & int) | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_36438() { testValid("((any & int) | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_36439() { testValid("((any & int) | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_36440() { testValid("((any & int) | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_36441() { testValid("((any & int) | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_36442() { testValid("((any & int) | (any & any))","({any} | (int | any))"); }
		@Test public void test_36443() { testValid("((any & int) | (any & any))","(!int | (int | any))"); }
		@Test public void test_36444() { testValid("((any & int) | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_36445() { testValid("((any & int) | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_36446() { testValid("((any & int) | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_36447() { testValid("((any & int) | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_36448() { testValid("((any & int) | (any & any))","({any} | (any | int))"); }
		@Test public void test_36449() { testValid("((any & int) | (any & any))","({int} | (any | int))"); }
		@Test public void test_36450() { testValid("((any & int) | (any & any))","(!any | (any | int))"); }
		@Test public void test_36451() { testValid("((any & int) | (any & any))","(!int | (any | int))"); }
		@Test public void test_36452() { testValid("((any & int) | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_36453() { testValid("((any & int) | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_36454() { testValid("((any & int) | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_36455() { testValid("((any & int) | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_36456() { testValid("((any & int) | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_36457() { testValid("((any & int) | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_36458() { testValid("((any & int) | (any & any))","({int} | (int | int))"); }
		@Test public void test_36459() { testValid("((any & int) | (any & any))","(!any | (int | int))"); }
		@Test public void test_36460() { testValid("((any & int) | (any & any))","(!int | (int | int))"); }
		@Test public void test_36461() { testValid("((any & int) | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_36462() { testValid("((any & int) | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_36463() { testValid("((any & int) | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_36464() { testValid("((any & int) | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_36465() { testValid("((any & int) | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_36466() { testValid("((any & int) | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_36467() { testValid("((any & int) | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_36468() { testValid("((any & int) | (any & any))","(!any | (any & any))"); }
		@Test public void test_36469() { testValid("((any & int) | (any & any))","(!int | (any & any))"); }
		@Test public void test_36470() { testValid("((any & int) | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_36471() { testValid("((any & int) | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_36472() { testValid("((any & int) | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_36473() { testValid("((any & int) | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_36474() { testValid("((any & int) | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_36475() { testValid("((any & int) | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_36476() { testValid("((any & int) | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_36477() { testValid("((any & int) | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_36478() { testValid("((any & int) | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_36479() { testValid("((any & int) | (any & any))","({any} | (int & any))"); }
		@Test public void test_36480() { testValid("((int & int) | (any & any))","{int}"); }
		@Test public void test_36481() { testValid("((int & int) | (any & any))","{any, any}"); }
		@Test public void test_36482() { testValid("((int & int) | (any & any))","{int, int}"); }
		@Test public void test_36483() { testValid("((int & int) | (any & any))","(any | int)"); }
		@Test public void test_36484() { testValid("((int & int) | (any & any))","(int & any)"); }
		@Test public void test_36485() { testValid("((int & int) | (any & any))","{{any}}"); }
		@Test public void test_36486() { testValid("((int & int) | (any & any))","{{int, any}}"); }
		@Test public void test_36487() { testValid("((int & int) | (any & any))","{{int, int}}"); }
		@Test public void test_36488() { testValid("((int & int) | (any & any))","{(any | int)}"); }
		@Test public void test_36489() { testValid("((int & int) | (any & any))","!{int, any}"); }
		@Test public void test_36490() { testValid("((int & int) | (any & any))","!{int, int}"); }
		@Test public void test_36491() { testValid("((int & int) | (any & any))","!(any | any)"); }
		@Test public void test_36492() { testValid("((int & int) | (any & any))","!(any & any)"); }
		@Test public void test_36493() { testValid("((int & int) | (any & any))","!(int & int)"); }
		@Test public void test_36494() { testValid("((int & int) | (any & any))","{{int}, {any}}"); }
		@Test public void test_36495() { testValid("((int & int) | (any & any))","{!int, {any}}"); }
		@Test public void test_36496() { testValid("((int & int) | (any & any))","{{int, int}, {any}}"); }
		@Test public void test_36497() { testValid("((int & int) | (any & any))","{(any | int), {any}}"); }
		@Test public void test_36498() { testValid("((int & int) | (any & any))","{!int, {int}}"); }
		@Test public void test_36499() { testValid("((int & int) | (any & any))","{{any, any}, {int}}"); }
		@Test public void test_36500() { testValid("((int & int) | (any & any))","{(any | any), {int}}"); }
		@Test public void test_36501() { testValid("((int & int) | (any & any))","{(any & any), {int}}"); }
		@Test public void test_36502() { testValid("((int & int) | (any & any))","{(any & int), {int}}"); }
		@Test public void test_36503() { testValid("((int & int) | (any & any))","{{any, any}, !int}"); }
		@Test public void test_36504() { testValid("((int & int) | (any & any))","{{any, int}, !int}"); }
		@Test public void test_36505() { testValid("((int & int) | (any & any))","{(any | any), !int}"); }
		@Test public void test_36506() { testValid("((int & int) | (any & any))","{(int | any), !int}"); }
		@Test public void test_36507() { testValid("((int & int) | (any & any))","{(any & any), !int}"); }
		@Test public void test_36508() { testValid("((int & int) | (any & any))","{(int & any), !int}"); }
		@Test public void test_36509() { testValid("((int & int) | (any & any))","{(int & int), !int}"); }
		@Test public void test_36510() { testValid("((int & int) | (any & any))","{{any}, {any, any}}"); }
		@Test public void test_36511() { testValid("((int & int) | (any & any))","{{int}, {any, any}}"); }
		@Test public void test_36512() { testValid("((int & int) | (any & any))","{{int, int}, {any, any}}"); }
		@Test public void test_36513() { testValid("((int & int) | (any & any))","{(any | any), {any, any}}"); }
		@Test public void test_36514() { testValid("((int & int) | (any & any))","{(any | int), {any, any}}"); }
		@Test public void test_36515() { testValid("((int & int) | (any & any))","{!int, {int, any}}"); }
		@Test public void test_36516() { testValid("((int & int) | (any & any))","{{int, any}, {int, any}}"); }
		@Test public void test_36517() { testValid("((int & int) | (any & any))","{{any, int}, {int, any}}"); }
		@Test public void test_36518() { testValid("((int & int) | (any & any))","{(any & int), {int, any}}"); }
		@Test public void test_36519() { testValid("((int & int) | (any & any))","{{any}, {any, int}}"); }
		@Test public void test_36520() { testValid("((int & int) | (any & any))","{{int, int}, {any, int}}"); }
		@Test public void test_36521() { testValid("((int & int) | (any & any))","{(int | int), {any, int}}"); }
		@Test public void test_36522() { testValid("((int & int) | (any & any))","{(any & int), {any, int}}"); }
		@Test public void test_36523() { testValid("((int & int) | (any & any))","{!int, {int, int}}"); }
		@Test public void test_36524() { testValid("((int & int) | (any & any))","{{int, int}, {int, int}}"); }
		@Test public void test_36525() { testValid("((int & int) | (any & any))","{(any | any), {int, int}}"); }
		@Test public void test_36526() { testValid("((int & int) | (any & any))","{(int | any), {int, int}}"); }
		@Test public void test_36527() { testValid("((int & int) | (any & any))","{(int & any), {int, int}}"); }
		@Test public void test_36528() { testValid("((int & int) | (any & any))","{{int}, (any | any)}"); }
		@Test public void test_36529() { testValid("((int & int) | (any & any))","{{int, any}, (any | any)}"); }
		@Test public void test_36530() { testValid("((int & int) | (any & any))","{{any, int}, (any | any)}"); }
		@Test public void test_36531() { testValid("((int & int) | (any & any))","{(any | any), (any | any)}"); }
		@Test public void test_36532() { testValid("((int & int) | (any & any))","{(int | any), (any | any)}"); }
		@Test public void test_36533() { testValid("((int & int) | (any & any))","{(int & int), (any | any)}"); }
		@Test public void test_36534() { testValid("((int & int) | (any & any))","{!int, (int | any)}"); }
		@Test public void test_36535() { testValid("((int & int) | (any & any))","{{int, int}, (int | any)}"); }
		@Test public void test_36536() { testValid("((int & int) | (any & any))","{(any | any), (int | any)}"); }
		@Test public void test_36537() { testValid("((int & int) | (any & any))","{(int | int), (int | any)}"); }
		@Test public void test_36538() { testValid("((int & int) | (any & any))","{{any}, (any | int)}"); }
		@Test public void test_36539() { testValid("((int & int) | (any & any))","{!int, (any | int)}"); }
		@Test public void test_36540() { testValid("((int & int) | (any & any))","{(any | any), (any | int)}"); }
		@Test public void test_36541() { testValid("((int & int) | (any & any))","{(any | int), (any | int)}"); }
		@Test public void test_36542() { testValid("((int & int) | (any & any))","{(any & int), (any | int)}"); }
		@Test public void test_36543() { testValid("((int & int) | (any & any))","{{int}, (int | int)}"); }
		@Test public void test_36544() { testValid("((int & int) | (any & any))","{{any, any}, (int | int)}"); }
		@Test public void test_36545() { testValid("((int & int) | (any & any))","{{int, int}, (int | int)}"); }
		@Test public void test_36546() { testValid("((int & int) | (any & any))","{{int}, (any & any)}"); }
		@Test public void test_36547() { testValid("((int & int) | (any & any))","{{int, any}, (any & any)}"); }
		@Test public void test_36548() { testValid("((int & int) | (any & any))","{{any, int}, (any & any)}"); }
		@Test public void test_36549() { testValid("((int & int) | (any & any))","{(int | any), (any & any)}"); }
		@Test public void test_36550() { testValid("((int & int) | (any & any))","{(any & any), (any & any)}"); }
		@Test public void test_36551() { testValid("((int & int) | (any & any))","{(int & any), (any & any)}"); }
		@Test public void test_36552() { testValid("((int & int) | (any & any))","{{any}, (int & any)}"); }
		@Test public void test_36553() { testValid("((int & int) | (any & any))","{{int}, (int & any)}"); }
		@Test public void test_36554() { testValid("((int & int) | (any & any))","{{any, any}, (int & any)}"); }
		@Test public void test_36555() { testValid("((int & int) | (any & any))","{{int, any}, (int & any)}"); }
		@Test public void test_36556() { testValid("((int & int) | (any & any))","{(any | int), (int & any)}"); }
		@Test public void test_36557() { testValid("((int & int) | (any & any))","{(any & any), (int & any)}"); }
		@Test public void test_36558() { testValid("((int & int) | (any & any))","{(int & any), (int & any)}"); }
		@Test public void test_36559() { testValid("((int & int) | (any & any))","{(int & int), (int & any)}"); }
		@Test public void test_36560() { testValid("((int & int) | (any & any))","{{int, any}, (any & int)}"); }
		@Test public void test_36561() { testValid("((int & int) | (any & any))","{(any & any), (any & int)}"); }
		@Test public void test_36562() { testValid("((int & int) | (any & any))","{{any, int}, (int & int)}"); }
		@Test public void test_36563() { testValid("((int & int) | (any & any))","{(int | int), (int & int)}"); }
		@Test public void test_36564() { testValid("((int & int) | (any & any))","{(any & any), (int & int)}"); }
		@Test public void test_36565() { testValid("((int & int) | (any & any))","{(any & int), (int & int)}"); }
		@Test public void test_36566() { testValid("((int & int) | (any & any))","{(int & int), (int & int)}"); }
		@Test public void test_36567() { testValid("((int & int) | (any & any))","(!int | {any})"); }
		@Test public void test_36568() { testValid("((int & int) | (any & any))","({any, any} | {any})"); }
		@Test public void test_36569() { testValid("((int & int) | (any & any))","((any | any) | {any})"); }
		@Test public void test_36570() { testValid("((int & int) | (any & any))","((int | any) | {any})"); }
		@Test public void test_36571() { testValid("((int & int) | (any & any))","((any & any) | {any})"); }
		@Test public void test_36572() { testValid("((int & int) | (any & any))","((int & any) | {any})"); }
		@Test public void test_36573() { testValid("((int & int) | (any & any))","((any & int) | {any})"); }
		@Test public void test_36574() { testValid("((int & int) | (any & any))","({int} | {int})"); }
		@Test public void test_36575() { testValid("((int & int) | (any & any))","(!any | {int})"); }
		@Test public void test_36576() { testValid("((int & int) | (any & any))","(!int | {int})"); }
		@Test public void test_36577() { testValid("((int & int) | (any & any))","({any, int} | {int})"); }
		@Test public void test_36578() { testValid("((int & int) | (any & any))","((int & any) | {int})"); }
		@Test public void test_36579() { testValid("((int & int) | (any & any))","((any & int) | {int})"); }
		@Test public void test_36580() { testValid("((int & int) | (any & any))","((int & int) | {int})"); }
		@Test public void test_36581() { testValid("((int & int) | (any & any))","({any} | !any)"); }
		@Test public void test_36582() { testValid("((int & int) | (any & any))","({int} | !any)"); }
		@Test public void test_36583() { testValid("((int & int) | (any & any))","({any, any} | !any)"); }
		@Test public void test_36584() { testValid("((int & int) | (any & any))","({int, int} | !any)"); }
		@Test public void test_36585() { testValid("((int & int) | (any & any))","((any | any) | !any)"); }
		@Test public void test_36586() { testValid("((int & int) | (any & any))","((int | any) | !any)"); }
		@Test public void test_36587() { testValid("((int & int) | (any & any))","((int | int) | !any)"); }
		@Test public void test_36588() { testValid("((int & int) | (any & any))","((int & int) | !any)"); }
		@Test public void test_36589() { testValid("((int & int) | (any & any))","(!int | !int)"); }
		@Test public void test_36590() { testValid("((int & int) | (any & any))","({any, any} | !int)"); }
		@Test public void test_36591() { testValid("((int & int) | (any & any))","({int, int} | !int)"); }
		@Test public void test_36592() { testValid("((int & int) | (any & any))","((int | any) | !int)"); }
		@Test public void test_36593() { testValid("((int & int) | (any & any))","((any | int) | !int)"); }
		@Test public void test_36594() { testValid("((int & int) | (any & any))","((any & int) | !int)"); }
		@Test public void test_36595() { testValid("((int & int) | (any & any))","((int & int) | !int)"); }
		@Test public void test_36596() { testValid("((int & int) | (any & any))","({int} | {any, any})"); }
		@Test public void test_36597() { testValid("((int & int) | (any & any))","(!any | {any, any})"); }
		@Test public void test_36598() { testValid("((int & int) | (any & any))","(!int | {any, any})"); }
		@Test public void test_36599() { testValid("((int & int) | (any & any))","({any, int} | {any, any})"); }
		@Test public void test_36600() { testValid("((int & int) | (any & any))","((int | any) | {any, any})"); }
		@Test public void test_36601() { testValid("((int & int) | (any & any))","((any & any) | {any, any})"); }
		@Test public void test_36602() { testValid("((int & int) | (any & any))","((any & int) | {any, any})"); }
		@Test public void test_36603() { testValid("((int & int) | (any & any))","(!int | {int, any})"); }
		@Test public void test_36604() { testValid("((int & int) | (any & any))","({any, int} | {int, any})"); }
		@Test public void test_36605() { testValid("((int & int) | (any & any))","((any | any) | {int, any})"); }
		@Test public void test_36606() { testValid("((int & int) | (any & any))","((int | any) | {int, any})"); }
		@Test public void test_36607() { testValid("((int & int) | (any & any))","((any | int) | {int, any})"); }
		@Test public void test_36608() { testValid("((int & int) | (any & any))","((int & any) | {int, any})"); }
		@Test public void test_36609() { testValid("((int & int) | (any & any))","({any} | {any, int})"); }
		@Test public void test_36610() { testValid("((int & int) | (any & any))","(!int | {any, int})"); }
		@Test public void test_36611() { testValid("((int & int) | (any & any))","({any, int} | {any, int})"); }
		@Test public void test_36612() { testValid("((int & int) | (any & any))","((any | any) | {any, int})"); }
		@Test public void test_36613() { testValid("((int & int) | (any & any))","((any | int) | {any, int})"); }
		@Test public void test_36614() { testValid("((int & int) | (any & any))","((int | int) | {any, int})"); }
		@Test public void test_36615() { testValid("((int & int) | (any & any))","((int & any) | {any, int})"); }
		@Test public void test_36616() { testValid("((int & int) | (any & any))","(!any | {int, int})"); }
		@Test public void test_36617() { testValid("((int & int) | (any & any))","(!int | {int, int})"); }
		@Test public void test_36618() { testValid("((int & int) | (any & any))","({any, any} | {int, int})"); }
		@Test public void test_36619() { testValid("((int & int) | (any & any))","({any, int} | {int, int})"); }
		@Test public void test_36620() { testValid("((int & int) | (any & any))","((any | any) | {int, int})"); }
		@Test public void test_36621() { testValid("((int & int) | (any & any))","((int | int) | {int, int})"); }
		@Test public void test_36622() { testValid("((int & int) | (any & any))","((int & any) | {int, int})"); }
		@Test public void test_36623() { testValid("((int & int) | (any & any))","((any & int) | {int, int})"); }
		@Test public void test_36624() { testValid("((int & int) | (any & any))","((int & int) | {int, int})"); }
		@Test public void test_36625() { testValid("((int & int) | (any & any))","({any} | (any | any))"); }
		@Test public void test_36626() { testValid("((int & int) | (any & any))","(!any | (any | any))"); }
		@Test public void test_36627() { testValid("((int & int) | (any & any))","({any, any} | (any | any))"); }
		@Test public void test_36628() { testValid("((int & int) | (any & any))","({any, int} | (any | any))"); }
		@Test public void test_36629() { testValid("((int & int) | (any & any))","({int, int} | (any | any))"); }
		@Test public void test_36630() { testValid("((int & int) | (any & any))","((int | any) | (any | any))"); }
		@Test public void test_36631() { testValid("((int & int) | (any & any))","((any | int) | (any | any))"); }
		@Test public void test_36632() { testValid("((int & int) | (any & any))","((any & int) | (any | any))"); }
		@Test public void test_36633() { testValid("((int & int) | (any & any))","((int & int) | (any | any))"); }
		@Test public void test_36634() { testValid("((int & int) | (any & any))","({any} | (int | any))"); }
		@Test public void test_36635() { testValid("((int & int) | (any & any))","(!int | (int | any))"); }
		@Test public void test_36636() { testValid("((int & int) | (any & any))","({int, any} | (int | any))"); }
		@Test public void test_36637() { testValid("((int & int) | (any & any))","({any, int} | (int | any))"); }
		@Test public void test_36638() { testValid("((int & int) | (any & any))","((int & any) | (int | any))"); }
		@Test public void test_36639() { testValid("((int & int) | (any & any))","((any & int) | (int | any))"); }
		@Test public void test_36640() { testValid("((int & int) | (any & any))","({any} | (any | int))"); }
		@Test public void test_36641() { testValid("((int & int) | (any & any))","({int} | (any | int))"); }
		@Test public void test_36642() { testValid("((int & int) | (any & any))","(!any | (any | int))"); }
		@Test public void test_36643() { testValid("((int & int) | (any & any))","(!int | (any | int))"); }
		@Test public void test_36644() { testValid("((int & int) | (any & any))","({any, int} | (any | int))"); }
		@Test public void test_36645() { testValid("((int & int) | (any & any))","({int, int} | (any | int))"); }
		@Test public void test_36646() { testValid("((int & int) | (any & any))","((int | any) | (any | int))"); }
		@Test public void test_36647() { testValid("((int & int) | (any & any))","((any | int) | (any | int))"); }
		@Test public void test_36648() { testValid("((int & int) | (any & any))","((int | int) | (any | int))"); }
		@Test public void test_36649() { testValid("((int & int) | (any & any))","((any & any) | (any | int))"); }
		@Test public void test_36650() { testValid("((int & int) | (any & any))","({int} | (int | int))"); }
		@Test public void test_36651() { testValid("((int & int) | (any & any))","(!any | (int | int))"); }
		@Test public void test_36652() { testValid("((int & int) | (any & any))","(!int | (int | int))"); }
		@Test public void test_36653() { testValid("((int & int) | (any & any))","({int, any} | (int | int))"); }
		@Test public void test_36654() { testValid("((int & int) | (any & any))","({any, int} | (int | int))"); }
		@Test public void test_36655() { testValid("((int & int) | (any & any))","((any | int) | (int | int))"); }
		@Test public void test_36656() { testValid("((int & int) | (any & any))","((int | int) | (int | int))"); }
		@Test public void test_36657() { testValid("((int & int) | (any & any))","((any & any) | (int | int))"); }
		@Test public void test_36658() { testValid("((int & int) | (any & any))","((int & any) | (int | int))"); }
		@Test public void test_36659() { testValid("((int & int) | (any & any))","((int & int) | (int | int))"); }
		@Test public void test_36660() { testValid("((int & int) | (any & any))","(!any | (any & any))"); }
		@Test public void test_36661() { testValid("((int & int) | (any & any))","(!int | (any & any))"); }
		@Test public void test_36662() { testValid("((int & int) | (any & any))","({any, any} | (any & any))"); }
		@Test public void test_36663() { testValid("((int & int) | (any & any))","({int, any} | (any & any))"); }
		@Test public void test_36664() { testValid("((int & int) | (any & any))","({any, int} | (any & any))"); }
		@Test public void test_36665() { testValid("((int & int) | (any & any))","({int, int} | (any & any))"); }
		@Test public void test_36666() { testValid("((int & int) | (any & any))","((int | any) | (any & any))"); }
		@Test public void test_36667() { testValid("((int & int) | (any & any))","((int | int) | (any & any))"); }
		@Test public void test_36668() { testValid("((int & int) | (any & any))","((int & any) | (any & any))"); }
		@Test public void test_36669() { testValid("((int & int) | (any & any))","((any & int) | (any & any))"); }
		@Test public void test_36670() { testValid("((int & int) | (any & any))","((int & int) | (any & any))"); }
		@Test public void test_36671() { testValid("((int & int) | (any & any))","({any} | (int & any))"); }
		@Test public void test_36672() { testValid("({any} | (int & any))","{int}"); }
		@Test public void test_36673() { testInvalid("({any} | (int & any))","{any, any}"); }
		@Test public void test_36674() { testInvalid("({any} | (int & any))","{int, int}"); }
		@Test public void test_36675() { testInvalid("({any} | (int & any))","(any | int)"); }
		@Test public void test_36676() { testValid("({any} | (int & any))","(int & any)"); }
		@Test public void test_36677() { testValid("({any} | (int & any))","{{any}}"); }
		@Test public void test_36678() { testValid("({any} | (int & any))","{{int, any}}"); }
		@Test public void test_36679() { testValid("({any} | (int & any))","{{int, int}}"); }
		@Test public void test_36680() { testValid("({any} | (int & any))","{(any | int)}"); }
		@Test public void test_36681() { testInvalid("({any} | (int & any))","!{int, any}"); }
		@Test public void test_36682() { testInvalid("({any} | (int & any))","!{int, int}"); }
		@Test public void test_36683() { testValid("({any} | (int & any))","!(any | any)"); }
		@Test public void test_36684() { testValid("({any} | (int & any))","!(any & any)"); }
		@Test public void test_36685() { testInvalid("({any} | (int & any))","!(int & int)"); }
		@Test public void test_36686() { testInvalid("({any} | (int & any))","{{int}, {any}}"); }
		@Test public void test_36687() { testInvalid("({any} | (int & any))","{!int, {any}}"); }
		@Test public void test_36688() { testInvalid("({any} | (int & any))","{{int, int}, {any}}"); }
		@Test public void test_36689() { testInvalid("({any} | (int & any))","{(any | int), {any}}"); }
		@Test public void test_36690() { testInvalid("({any} | (int & any))","{!int, {int}}"); }
		@Test public void test_36691() { testInvalid("({any} | (int & any))","{{any, any}, {int}}"); }
		@Test public void test_36692() { testInvalid("({any} | (int & any))","{(any | any), {int}}"); }
		@Test public void test_36693() { testInvalid("({any} | (int & any))","{(any & any), {int}}"); }
		@Test public void test_36694() { testInvalid("({any} | (int & any))","{(any & int), {int}}"); }
		@Test public void test_36695() { testInvalid("({any} | (int & any))","{{any, any}, !int}"); }
		@Test public void test_36696() { testInvalid("({any} | (int & any))","{{any, int}, !int}"); }
		@Test public void test_36697() { testInvalid("({any} | (int & any))","{(any | any), !int}"); }
		@Test public void test_36698() { testInvalid("({any} | (int & any))","{(int | any), !int}"); }
		@Test public void test_36699() { testInvalid("({any} | (int & any))","{(any & any), !int}"); }
		@Test public void test_36700() { testInvalid("({any} | (int & any))","{(int & any), !int}"); }
		@Test public void test_36701() { testInvalid("({any} | (int & any))","{(int & int), !int}"); }
		@Test public void test_36702() { testInvalid("({any} | (int & any))","{{any}, {any, any}}"); }
		@Test public void test_36703() { testInvalid("({any} | (int & any))","{{int}, {any, any}}"); }
		@Test public void test_36704() { testInvalid("({any} | (int & any))","{{int, int}, {any, any}}"); }
		@Test public void test_36705() { testInvalid("({any} | (int & any))","{(any | any), {any, any}}"); }
		@Test public void test_36706() { testInvalid("({any} | (int & any))","{(any | int), {any, any}}"); }
		@Test public void test_36707() { testInvalid("({any} | (int & any))","{!int, {int, any}}"); }
		@Test public void test_36708() { testInvalid("({any} | (int & any))","{{int, any}, {int, any}}"); }
		@Test public void test_36709() { testInvalid("({any} | (int & any))","{{any, int}, {int, any}}"); }
		@Test public void test_36710() { testInvalid("({any} | (int & any))","{(any & int), {int, any}}"); }
		@Test public void test_36711() { testInvalid("({any} | (int & any))","{{any}, {any, int}}"); }
		@Test public void test_36712() { testInvalid("({any} | (int & any))","{{int, int}, {any, int}}"); }
		@Test public void test_36713() { testInvalid("({any} | (int & any))","{(int | int), {any, int}}"); }
		@Test public void test_36714() { testInvalid("({any} | (int & any))","{(any & int), {any, int}}"); }
		@Test public void test_36715() { testInvalid("({any} | (int & any))","{!int, {int, int}}"); }
		@Test public void test_36716() { testInvalid("({any} | (int & any))","{{int, int}, {int, int}}"); }
		@Test public void test_36717() { testInvalid("({any} | (int & any))","{(any | any), {int, int}}"); }
		@Test public void test_36718() { testInvalid("({any} | (int & any))","{(int | any), {int, int}}"); }
		@Test public void test_36719() { testInvalid("({any} | (int & any))","{(int & any), {int, int}}"); }
		@Test public void test_36720() { testInvalid("({any} | (int & any))","{{int}, (any | any)}"); }
		@Test public void test_36721() { testInvalid("({any} | (int & any))","{{int, any}, (any | any)}"); }
		@Test public void test_36722() { testInvalid("({any} | (int & any))","{{any, int}, (any | any)}"); }
		@Test public void test_36723() { testInvalid("({any} | (int & any))","{(any | any), (any | any)}"); }
		@Test public void test_36724() { testInvalid("({any} | (int & any))","{(int | any), (any | any)}"); }
		@Test public void test_36725() { testInvalid("({any} | (int & any))","{(int & int), (any | any)}"); }
		@Test public void test_36726() { testInvalid("({any} | (int & any))","{!int, (int | any)}"); }
		@Test public void test_36727() { testInvalid("({any} | (int & any))","{{int, int}, (int | any)}"); }
		@Test public void test_36728() { testInvalid("({any} | (int & any))","{(any | any), (int | any)}"); }
		@Test public void test_36729() { testInvalid("({any} | (int & any))","{(int | int), (int | any)}"); }
		@Test public void test_36730() { testInvalid("({any} | (int & any))","{{any}, (any | int)}"); }
		@Test public void test_36731() { testInvalid("({any} | (int & any))","{!int, (any | int)}"); }
		@Test public void test_36732() { testInvalid("({any} | (int & any))","{(any | any), (any | int)}"); }
		@Test public void test_36733() { testInvalid("({any} | (int & any))","{(any | int), (any | int)}"); }
		@Test public void test_36734() { testInvalid("({any} | (int & any))","{(any & int), (any | int)}"); }
		@Test public void test_36735() { testInvalid("({any} | (int & any))","{{int}, (int | int)}"); }
		@Test public void test_36736() { testInvalid("({any} | (int & any))","{{any, any}, (int | int)}"); }
		@Test public void test_36737() { testInvalid("({any} | (int & any))","{{int, int}, (int | int)}"); }
		@Test public void test_36738() { testInvalid("({any} | (int & any))","{{int}, (any & any)}"); }
		@Test public void test_36739() { testInvalid("({any} | (int & any))","{{int, any}, (any & any)}"); }
		@Test public void test_36740() { testInvalid("({any} | (int & any))","{{any, int}, (any & any)}"); }
		@Test public void test_36741() { testInvalid("({any} | (int & any))","{(int | any), (any & any)}"); }
		@Test public void test_36742() { testInvalid("({any} | (int & any))","{(any & any), (any & any)}"); }
		@Test public void test_36743() { testInvalid("({any} | (int & any))","{(int & any), (any & any)}"); }
		@Test public void test_36744() { testInvalid("({any} | (int & any))","{{any}, (int & any)}"); }
		@Test public void test_36745() { testInvalid("({any} | (int & any))","{{int}, (int & any)}"); }
		@Test public void test_36746() { testInvalid("({any} | (int & any))","{{any, any}, (int & any)}"); }
		@Test public void test_36747() { testInvalid("({any} | (int & any))","{{int, any}, (int & any)}"); }
		@Test public void test_36748() { testInvalid("({any} | (int & any))","{(any | int), (int & any)}"); }
		@Test public void test_36749() { testInvalid("({any} | (int & any))","{(any & any), (int & any)}"); }
		@Test public void test_36750() { testInvalid("({any} | (int & any))","{(int & any), (int & any)}"); }
		@Test public void test_36751() { testInvalid("({any} | (int & any))","{(int & int), (int & any)}"); }
		@Test public void test_36752() { testInvalid("({any} | (int & any))","{{int, any}, (any & int)}"); }
		@Test public void test_36753() { testInvalid("({any} | (int & any))","{(any & any), (any & int)}"); }
		@Test public void test_36754() { testInvalid("({any} | (int & any))","{{any, int}, (int & int)}"); }
		@Test public void test_36755() { testInvalid("({any} | (int & any))","{(int | int), (int & int)}"); }
		@Test public void test_36756() { testInvalid("({any} | (int & any))","{(any & any), (int & int)}"); }
		@Test public void test_36757() { testInvalid("({any} | (int & any))","{(any & int), (int & int)}"); }
		@Test public void test_36758() { testInvalid("({any} | (int & any))","{(int & int), (int & int)}"); }
		@Test public void test_36759() { testInvalid("({any} | (int & any))","(!int | {any})"); }
		@Test public void test_36760() { testInvalid("({any} | (int & any))","({any, any} | {any})"); }
		@Test public void test_36761() { testInvalid("({any} | (int & any))","((any | any) | {any})"); }
		@Test public void test_36762() { testInvalid("({any} | (int & any))","((int | any) | {any})"); }
		@Test public void test_36763() { testInvalid("({any} | (int & any))","((any & any) | {any})"); }
		@Test public void test_36764() { testValid("({any} | (int & any))","((int & any) | {any})"); }
		@Test public void test_36765() { testValid("({any} | (int & any))","((any & int) | {any})"); }
		@Test public void test_36766() { testValid("({any} | (int & any))","({int} | {int})"); }
		@Test public void test_36767() { testValid("({any} | (int & any))","(!any | {int})"); }
		@Test public void test_36768() { testInvalid("({any} | (int & any))","(!int | {int})"); }
		@Test public void test_36769() { testInvalid("({any} | (int & any))","({any, int} | {int})"); }
		@Test public void test_36770() { testValid("({any} | (int & any))","((int & any) | {int})"); }
		@Test public void test_36771() { testValid("({any} | (int & any))","((any & int) | {int})"); }
		@Test public void test_36772() { testValid("({any} | (int & any))","((int & int) | {int})"); }
		@Test public void test_36773() { testValid("({any} | (int & any))","({any} | !any)"); }
		@Test public void test_36774() { testValid("({any} | (int & any))","({int} | !any)"); }
		@Test public void test_36775() { testInvalid("({any} | (int & any))","({any, any} | !any)"); }
		@Test public void test_36776() { testInvalid("({any} | (int & any))","({int, int} | !any)"); }
		@Test public void test_36777() { testInvalid("({any} | (int & any))","((any | any) | !any)"); }
		@Test public void test_36778() { testInvalid("({any} | (int & any))","((int | any) | !any)"); }
		@Test public void test_36779() { testValid("({any} | (int & any))","((int | int) | !any)"); }
		@Test public void test_36780() { testValid("({any} | (int & any))","((int & int) | !any)"); }
		@Test public void test_36781() { testInvalid("({any} | (int & any))","(!int | !int)"); }
		@Test public void test_36782() { testInvalid("({any} | (int & any))","({any, any} | !int)"); }
		@Test public void test_36783() { testInvalid("({any} | (int & any))","({int, int} | !int)"); }
		@Test public void test_36784() { testInvalid("({any} | (int & any))","((int | any) | !int)"); }
		@Test public void test_36785() { testInvalid("({any} | (int & any))","((any | int) | !int)"); }
		@Test public void test_36786() { testInvalid("({any} | (int & any))","((any & int) | !int)"); }
		@Test public void test_36787() { testInvalid("({any} | (int & any))","((int & int) | !int)"); }
		@Test public void test_36788() { testInvalid("({any} | (int & any))","({int} | {any, any})"); }
		@Test public void test_36789() { testInvalid("({any} | (int & any))","(!any | {any, any})"); }
		@Test public void test_36790() { testInvalid("({any} | (int & any))","(!int | {any, any})"); }
		@Test public void test_36791() { testInvalid("({any} | (int & any))","({any, int} | {any, any})"); }
		@Test public void test_36792() { testInvalid("({any} | (int & any))","((int | any) | {any, any})"); }
		@Test public void test_36793() { testInvalid("({any} | (int & any))","((any & any) | {any, any})"); }
		@Test public void test_36794() { testInvalid("({any} | (int & any))","((any & int) | {any, any})"); }
		@Test public void test_36795() { testInvalid("({any} | (int & any))","(!int | {int, any})"); }
		@Test public void test_36796() { testInvalid("({any} | (int & any))","({any, int} | {int, any})"); }
		@Test public void test_36797() { testInvalid("({any} | (int & any))","((any | any) | {int, any})"); }
		@Test public void test_36798() { testInvalid("({any} | (int & any))","((int | any) | {int, any})"); }
		@Test public void test_36799() { testInvalid("({any} | (int & any))","((any | int) | {int, any})"); }
		@Test public void test_36800() { testInvalid("({any} | (int & any))","((int & any) | {int, any})"); }
		@Test public void test_36801() { testInvalid("({any} | (int & any))","({any} | {any, int})"); }
		@Test public void test_36802() { testInvalid("({any} | (int & any))","(!int | {any, int})"); }
		@Test public void test_36803() { testInvalid("({any} | (int & any))","({any, int} | {any, int})"); }
		@Test public void test_36804() { testInvalid("({any} | (int & any))","((any | any) | {any, int})"); }
		@Test public void test_36805() { testInvalid("({any} | (int & any))","((any | int) | {any, int})"); }
		@Test public void test_36806() { testInvalid("({any} | (int & any))","((int | int) | {any, int})"); }
		@Test public void test_36807() { testInvalid("({any} | (int & any))","((int & any) | {any, int})"); }
		@Test public void test_36808() { testInvalid("({any} | (int & any))","(!any | {int, int})"); }
		@Test public void test_36809() { testInvalid("({any} | (int & any))","(!int | {int, int})"); }
		@Test public void test_36810() { testInvalid("({any} | (int & any))","({any, any} | {int, int})"); }
		@Test public void test_36811() { testInvalid("({any} | (int & any))","({any, int} | {int, int})"); }
		@Test public void test_36812() { testInvalid("({any} | (int & any))","((any | any) | {int, int})"); }
		@Test public void test_36813() { testInvalid("({any} | (int & any))","((int | int) | {int, int})"); }
		@Test public void test_36814() { testInvalid("({any} | (int & any))","((int & any) | {int, int})"); }
		@Test public void test_36815() { testInvalid("({any} | (int & any))","((any & int) | {int, int})"); }
		@Test public void test_36816() { testInvalid("({any} | (int & any))","((int & int) | {int, int})"); }
		@Test public void test_36817() { testInvalid("({any} | (int & any))","({any} | (any | any))"); }
		@Test public void test_36818() { testInvalid("({any} | (int & any))","(!any | (any | any))"); }
		@Test public void test_36819() { testInvalid("({any} | (int & any))","({any, any} | (any | any))"); }
		@Test public void test_36820() { testInvalid("({any} | (int & any))","({any, int} | (any | any))"); }
		@Test public void test_36821() { testInvalid("({any} | (int & any))","({int, int} | (any | any))"); }
		@Test public void test_36822() { testInvalid("({any} | (int & any))","((int | any) | (any | any))"); }
		@Test public void test_36823() { testInvalid("({any} | (int & any))","((any | int) | (any | any))"); }
		@Test public void test_36824() { testInvalid("({any} | (int & any))","((any & int) | (any | any))"); }
		@Test public void test_36825() { testInvalid("({any} | (int & any))","((int & int) | (any | any))"); }
		@Test public void test_36826() { testInvalid("({any} | (int & any))","({any} | (int | any))"); }
		@Test public void test_36827() { testInvalid("({any} | (int & any))","(!int | (int | any))"); }
		@Test public void test_36828() { testInvalid("({any} | (int & any))","({int, any} | (int | any))"); }
		@Test public void test_36829() { testInvalid("({any} | (int & any))","({any, int} | (int | any))"); }
		@Test public void test_36830() { testInvalid("({any} | (int & any))","((int & any) | (int | any))"); }
		@Test public void test_36831() { testInvalid("({any} | (int & any))","((any & int) | (int | any))"); }
		@Test public void test_36832() { testInvalid("({any} | (int & any))","({any} | (any | int))"); }
		@Test public void test_36833() { testInvalid("({any} | (int & any))","({int} | (any | int))"); }
		@Test public void test_36834() { testInvalid("({any} | (int & any))","(!any | (any | int))"); }
		@Test public void test_36835() { testInvalid("({any} | (int & any))","(!int | (any | int))"); }
		@Test public void test_36836() { testInvalid("({any} | (int & any))","({any, int} | (any | int))"); }
		@Test public void test_36837() { testInvalid("({any} | (int & any))","({int, int} | (any | int))"); }
		@Test public void test_36838() { testInvalid("({any} | (int & any))","((int | any) | (any | int))"); }
		@Test public void test_36839() { testInvalid("({any} | (int & any))","((any | int) | (any | int))"); }
		@Test public void test_36840() { testInvalid("({any} | (int & any))","((int | int) | (any | int))"); }
		@Test public void test_36841() { testInvalid("({any} | (int & any))","((any & any) | (any | int))"); }
		@Test public void test_36842() { testValid("({any} | (int & any))","({int} | (int | int))"); }
		@Test public void test_36843() { testValid("({any} | (int & any))","(!any | (int | int))"); }
		@Test public void test_36844() { testInvalid("({any} | (int & any))","(!int | (int | int))"); }
		@Test public void test_36845() { testInvalid("({any} | (int & any))","({int, any} | (int | int))"); }
		@Test public void test_36846() { testInvalid("({any} | (int & any))","({any, int} | (int | int))"); }
		@Test public void test_36847() { testInvalid("({any} | (int & any))","((any | int) | (int | int))"); }
		@Test public void test_36848() { testValid("({any} | (int & any))","((int | int) | (int | int))"); }
		@Test public void test_36849() { testInvalid("({any} | (int & any))","((any & any) | (int | int))"); }
		@Test public void test_36850() { testValid("({any} | (int & any))","((int & any) | (int | int))"); }
		@Test public void test_36851() { testValid("({any} | (int & any))","((int & int) | (int | int))"); }
		@Test public void test_36852() { testInvalid("({any} | (int & any))","(!any | (any & any))"); }
		@Test public void test_36853() { testInvalid("({any} | (int & any))","(!int | (any & any))"); }
		@Test public void test_36854() { testInvalid("({any} | (int & any))","({any, any} | (any & any))"); }
		@Test public void test_36855() { testInvalid("({any} | (int & any))","({int, any} | (any & any))"); }
		@Test public void test_36856() { testInvalid("({any} | (int & any))","({any, int} | (any & any))"); }
		@Test public void test_36857() { testInvalid("({any} | (int & any))","({int, int} | (any & any))"); }
		@Test public void test_36858() { testInvalid("({any} | (int & any))","((int | any) | (any & any))"); }
		@Test public void test_36859() { testInvalid("({any} | (int & any))","((int | int) | (any & any))"); }
		@Test public void test_36860() { testInvalid("({any} | (int & any))","((int & any) | (any & any))"); }
		@Test public void test_36861() { testInvalid("({any} | (int & any))","((any & int) | (any & any))"); }
		@Test public void test_36862() { testInvalid("({any} | (int & any))","((int & int) | (any & any))"); }
		@Test public void test_36863() { testValid("({any} | (int & any))","({any} | (int & any))"); }
	}
}
