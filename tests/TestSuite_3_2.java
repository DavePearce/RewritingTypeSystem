import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import org.junit.Test;
import types.testing.AbstractTestSuite;
import types.core.SyntacticType;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestSuite_3_2 extends AbstractTestSuite {
	public static class Part_0 {
		private static final SyntacticType test_0_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_0_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_0() { testValid(test_0_sup,test_0_sub); }

		private static final SyntacticType test_1_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_1_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1() { testValid(test_1_sup,test_1_sub); }

		private static final SyntacticType test_2_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_2_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2() { testInvalid(test_2_sup,test_2_sub); }

		private static final SyntacticType test_3_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_3_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3() { testInvalid(test_3_sup,test_3_sub); }

		private static final SyntacticType test_4_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_4_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4() { testInvalid(test_4_sup,test_4_sub); }

		private static final SyntacticType test_5_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_5_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5() { testInvalid(test_5_sup,test_5_sub); }

		private static final SyntacticType test_6_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_6_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6() { testInvalid(test_6_sup,test_6_sub); }

		private static final SyntacticType test_7_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_7_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7() { testInvalid(test_7_sup,test_7_sub); }

		private static final SyntacticType test_8_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_8_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8() { testInvalid(test_8_sup,test_8_sub); }

		private static final SyntacticType test_9_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_9_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_9() { testInvalid(test_9_sup,test_9_sub); }

		private static final SyntacticType test_10_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_10_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_10() { testInvalid(test_10_sup,test_10_sub); }

		private static final SyntacticType test_11_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_11_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_11() { testInvalid(test_11_sup,test_11_sub); }

		private static final SyntacticType test_12_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_12_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_12() { testInvalid(test_12_sup,test_12_sub); }

		private static final SyntacticType test_13_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_13_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_13() { testInvalid(test_13_sup,test_13_sub); }

		private static final SyntacticType test_14_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_14_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_14() { testInvalid(test_14_sup,test_14_sub); }

		private static final SyntacticType test_15_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_15_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_15() { testInvalid(test_15_sup,test_15_sub); }

		private static final SyntacticType test_16_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_16_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_16() { testInvalid(test_16_sup,test_16_sub); }

		private static final SyntacticType test_17_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_17_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_17() { testInvalid(test_17_sup,test_17_sub); }

		private static final SyntacticType test_18_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_18_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_18() { testInvalid(test_18_sup,test_18_sub); }

		private static final SyntacticType test_19_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_19_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_19() { testInvalid(test_19_sup,test_19_sub); }

		private static final SyntacticType test_20_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_20_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_20() { testInvalid(test_20_sup,test_20_sub); }

		private static final SyntacticType test_21_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_21_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_21() { testInvalid(test_21_sup,test_21_sub); }

		private static final SyntacticType test_22_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_22_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_22() { testValid(test_22_sup,test_22_sub); }

		private static final SyntacticType test_23_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_23_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_23() { testValid(test_23_sup,test_23_sub); }

		private static final SyntacticType test_24_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_24_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_24() { testInvalid(test_24_sup,test_24_sub); }

		private static final SyntacticType test_25_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_25_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_25() { testInvalid(test_25_sup,test_25_sub); }

		private static final SyntacticType test_26_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_26_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_26() { testInvalid(test_26_sup,test_26_sub); }

		private static final SyntacticType test_27_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_27_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_27() { testInvalid(test_27_sup,test_27_sub); }

		private static final SyntacticType test_28_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_28_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_28() { testInvalid(test_28_sup,test_28_sub); }

		private static final SyntacticType test_29_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_29_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_29() { testInvalid(test_29_sup,test_29_sub); }

		private static final SyntacticType test_30_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_30_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_30() { testInvalid(test_30_sup,test_30_sub); }

		private static final SyntacticType test_31_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_31_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_31() { testInvalid(test_31_sup,test_31_sub); }

		private static final SyntacticType test_32_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_32_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_32() { testInvalid(test_32_sup,test_32_sub); }

		private static final SyntacticType test_33_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_33_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_33() { testInvalid(test_33_sup,test_33_sub); }

		private static final SyntacticType test_34_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_34_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_34() { testInvalid(test_34_sup,test_34_sub); }

		private static final SyntacticType test_35_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_35_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_35() { testInvalid(test_35_sup,test_35_sub); }

		private static final SyntacticType test_36_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_36_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_36() { testInvalid(test_36_sup,test_36_sub); }

		private static final SyntacticType test_37_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_37_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_37() { testValid(test_37_sup,test_37_sub); }

		private static final SyntacticType test_38_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_38_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_38() { testValid(test_38_sup,test_38_sub); }

		private static final SyntacticType test_39_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_39_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_39() { testInvalid(test_39_sup,test_39_sub); }

		private static final SyntacticType test_40_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_40_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_40() { testInvalid(test_40_sup,test_40_sub); }

		private static final SyntacticType test_41_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_41_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_41() { testValid(test_41_sup,test_41_sub); }

		private static final SyntacticType test_42_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_42_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_42() { testInvalid(test_42_sup,test_42_sub); }

		private static final SyntacticType test_43_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_43_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_43() { testInvalid(test_43_sup,test_43_sub); }

		private static final SyntacticType test_44_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_44_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_44() { testInvalid(test_44_sup,test_44_sub); }

		private static final SyntacticType test_45_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_45_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_45() { testInvalid(test_45_sup,test_45_sub); }

		private static final SyntacticType test_46_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_46_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_46() { testInvalid(test_46_sup,test_46_sub); }

		private static final SyntacticType test_47_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_47_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_47() { testInvalid(test_47_sup,test_47_sub); }

		private static final SyntacticType test_48_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_48_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_48() { testInvalid(test_48_sup,test_48_sub); }

		private static final SyntacticType test_49_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_49_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_49() { testInvalid(test_49_sup,test_49_sub); }

		private static final SyntacticType test_50_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_50_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_50() { testInvalid(test_50_sup,test_50_sub); }

		private static final SyntacticType test_51_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_51_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_51() { testInvalid(test_51_sup,test_51_sub); }

		private static final SyntacticType test_52_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_52_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_52() { testInvalid(test_52_sup,test_52_sub); }

		private static final SyntacticType test_53_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_53_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_53() { testInvalid(test_53_sup,test_53_sub); }

		private static final SyntacticType test_54_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_54_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_54() { testInvalid(test_54_sup,test_54_sub); }

		private static final SyntacticType test_55_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_55_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_55() { testInvalid(test_55_sup,test_55_sub); }

		private static final SyntacticType test_56_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_56_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_56() { testValid(test_56_sup,test_56_sub); }

		private static final SyntacticType test_57_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_57_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_57() { testInvalid(test_57_sup,test_57_sub); }

		private static final SyntacticType test_58_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_58_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_58() { testInvalid(test_58_sup,test_58_sub); }

		private static final SyntacticType test_59_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_59_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_59() { testInvalid(test_59_sup,test_59_sub); }

		private static final SyntacticType test_60_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_60_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_60() { testInvalid(test_60_sup,test_60_sub); }

		private static final SyntacticType test_61_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_61_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_61() { testInvalid(test_61_sup,test_61_sub); }

		private static final SyntacticType test_62_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_62_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_62() { testInvalid(test_62_sup,test_62_sub); }

		private static final SyntacticType test_63_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_63_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_63() { testInvalid(test_63_sup,test_63_sub); }

		private static final SyntacticType test_64_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_64_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_64() { testInvalid(test_64_sup,test_64_sub); }

		private static final SyntacticType test_65_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_65_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_65() { testInvalid(test_65_sup,test_65_sub); }

		private static final SyntacticType test_66_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_66_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_66() { testInvalid(test_66_sup,test_66_sub); }

		private static final SyntacticType test_67_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_67_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_67() { testInvalid(test_67_sup,test_67_sub); }

		private static final SyntacticType test_68_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_68_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_68() { testInvalid(test_68_sup,test_68_sub); }

		private static final SyntacticType test_69_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_69_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_69() { testInvalid(test_69_sup,test_69_sub); }

		private static final SyntacticType test_70_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_70_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_70() { testInvalid(test_70_sup,test_70_sub); }

		private static final SyntacticType test_71_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_71_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_71() { testInvalid(test_71_sup,test_71_sub); }

		private static final SyntacticType test_72_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_72_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_72() { testInvalid(test_72_sup,test_72_sub); }

		private static final SyntacticType test_73_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_73_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_73() { testInvalid(test_73_sup,test_73_sub); }

		private static final SyntacticType test_74_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_74_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_74() { testInvalid(test_74_sup,test_74_sub); }

		private static final SyntacticType test_75_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_75_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_75() { testInvalid(test_75_sup,test_75_sub); }

		private static final SyntacticType test_76_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_76_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_76() { testInvalid(test_76_sup,test_76_sub); }

		private static final SyntacticType test_77_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_77_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_77() { testInvalid(test_77_sup,test_77_sub); }

		private static final SyntacticType test_78_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_78_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_78() { testInvalid(test_78_sup,test_78_sub); }

		private static final SyntacticType test_79_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_79_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_79() { testInvalid(test_79_sup,test_79_sub); }

		private static final SyntacticType test_80_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_80_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_80() { testInvalid(test_80_sup,test_80_sub); }

		private static final SyntacticType test_81_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_81_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_81() { testInvalid(test_81_sup,test_81_sub); }

		private static final SyntacticType test_82_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_82_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_82() { testInvalid(test_82_sup,test_82_sub); }

		private static final SyntacticType test_83_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_83_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_83() { testValid(test_83_sup,test_83_sub); }

		private static final SyntacticType test_84_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_84_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_84() { testInvalid(test_84_sup,test_84_sub); }

		private static final SyntacticType test_85_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_85_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_85() { testInvalid(test_85_sup,test_85_sub); }

		private static final SyntacticType test_86_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_86_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_86() { testValid(test_86_sup,test_86_sub); }

		private static final SyntacticType test_87_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_87_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_87() { testInvalid(test_87_sup,test_87_sub); }

		private static final SyntacticType test_88_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_88_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_88() { testInvalid(test_88_sup,test_88_sub); }

		private static final SyntacticType test_89_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_89_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_89() { testInvalid(test_89_sup,test_89_sub); }

		private static final SyntacticType test_90_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_90_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_90() { testInvalid(test_90_sup,test_90_sub); }

		private static final SyntacticType test_91_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_91_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_91() { testInvalid(test_91_sup,test_91_sub); }

		private static final SyntacticType test_92_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_92_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_92() { testInvalid(test_92_sup,test_92_sub); }

		private static final SyntacticType test_93_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_93_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_93() { testInvalid(test_93_sup,test_93_sub); }

		private static final SyntacticType test_94_sup = parse("{((any | any) | (any & int)), (any & int)}");
		private static final SyntacticType test_94_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_94() { testInvalid(test_94_sup,test_94_sub); }

		private static final SyntacticType test_95_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_95_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_95() { testValid(test_95_sup,test_95_sub); }

		private static final SyntacticType test_96_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_96_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_96() { testValid(test_96_sup,test_96_sub); }

		private static final SyntacticType test_97_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_97_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_97() { testInvalid(test_97_sup,test_97_sub); }

		private static final SyntacticType test_98_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_98_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_98() { testInvalid(test_98_sup,test_98_sub); }

		private static final SyntacticType test_99_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_99_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_99() { testInvalid(test_99_sup,test_99_sub); }

		private static final SyntacticType test_100_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_100_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_100() { testInvalid(test_100_sup,test_100_sub); }

		private static final SyntacticType test_101_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_101_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_101() { testInvalid(test_101_sup,test_101_sub); }

		private static final SyntacticType test_102_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_102_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_102() { testInvalid(test_102_sup,test_102_sub); }

		private static final SyntacticType test_103_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_103_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_103() { testInvalid(test_103_sup,test_103_sub); }

		private static final SyntacticType test_104_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_104_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_104() { testInvalid(test_104_sup,test_104_sub); }

		private static final SyntacticType test_105_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_105_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_105() { testInvalid(test_105_sup,test_105_sub); }

		private static final SyntacticType test_106_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_106_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_106() { testInvalid(test_106_sup,test_106_sub); }

		private static final SyntacticType test_107_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_107_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_107() { testInvalid(test_107_sup,test_107_sub); }

		private static final SyntacticType test_108_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_108_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_108() { testInvalid(test_108_sup,test_108_sub); }

		private static final SyntacticType test_109_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_109_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_109() { testInvalid(test_109_sup,test_109_sub); }

		private static final SyntacticType test_110_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_110_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_110() { testInvalid(test_110_sup,test_110_sub); }

		private static final SyntacticType test_111_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_111_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_111() { testInvalid(test_111_sup,test_111_sub); }

		private static final SyntacticType test_112_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_112_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_112() { testInvalid(test_112_sup,test_112_sub); }

		private static final SyntacticType test_113_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_113_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_113() { testInvalid(test_113_sup,test_113_sub); }

		private static final SyntacticType test_114_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_114_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_114() { testInvalid(test_114_sup,test_114_sub); }

		private static final SyntacticType test_115_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_115_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_115() { testInvalid(test_115_sup,test_115_sub); }

		private static final SyntacticType test_116_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_116_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_116() { testInvalid(test_116_sup,test_116_sub); }

		private static final SyntacticType test_117_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_117_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_117() { testValid(test_117_sup,test_117_sub); }

		private static final SyntacticType test_118_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_118_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_118() { testValid(test_118_sup,test_118_sub); }

		private static final SyntacticType test_119_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_119_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_119() { testInvalid(test_119_sup,test_119_sub); }

		private static final SyntacticType test_120_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_120_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_120() { testInvalid(test_120_sup,test_120_sub); }

		private static final SyntacticType test_121_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_121_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_121() { testInvalid(test_121_sup,test_121_sub); }

		private static final SyntacticType test_122_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_122_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_122() { testInvalid(test_122_sup,test_122_sub); }

		private static final SyntacticType test_123_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_123_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_123() { testInvalid(test_123_sup,test_123_sub); }

		private static final SyntacticType test_124_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_124_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_124() { testInvalid(test_124_sup,test_124_sub); }

		private static final SyntacticType test_125_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_125_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_125() { testInvalid(test_125_sup,test_125_sub); }

		private static final SyntacticType test_126_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_126_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_126() { testInvalid(test_126_sup,test_126_sub); }

		private static final SyntacticType test_127_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_127_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_127() { testInvalid(test_127_sup,test_127_sub); }

		private static final SyntacticType test_128_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_128_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_128() { testInvalid(test_128_sup,test_128_sub); }

		private static final SyntacticType test_129_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_129_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_129() { testInvalid(test_129_sup,test_129_sub); }

		private static final SyntacticType test_130_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_130_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_130() { testInvalid(test_130_sup,test_130_sub); }

		private static final SyntacticType test_131_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_131_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_131() { testInvalid(test_131_sup,test_131_sub); }

		private static final SyntacticType test_132_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_132_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_132() { testValid(test_132_sup,test_132_sub); }

		private static final SyntacticType test_133_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_133_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_133() { testValid(test_133_sup,test_133_sub); }

		private static final SyntacticType test_134_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_134_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_134() { testInvalid(test_134_sup,test_134_sub); }

		private static final SyntacticType test_135_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_135_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_135() { testInvalid(test_135_sup,test_135_sub); }

		private static final SyntacticType test_136_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_136_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_136() { testValid(test_136_sup,test_136_sub); }

		private static final SyntacticType test_137_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_137_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_137() { testInvalid(test_137_sup,test_137_sub); }

		private static final SyntacticType test_138_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_138_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_138() { testInvalid(test_138_sup,test_138_sub); }

		private static final SyntacticType test_139_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_139_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_139() { testInvalid(test_139_sup,test_139_sub); }

		private static final SyntacticType test_140_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_140_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_140() { testInvalid(test_140_sup,test_140_sub); }

		private static final SyntacticType test_141_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_141_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_141() { testInvalid(test_141_sup,test_141_sub); }

		private static final SyntacticType test_142_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_142_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_142() { testInvalid(test_142_sup,test_142_sub); }

		private static final SyntacticType test_143_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_143_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_143() { testInvalid(test_143_sup,test_143_sub); }

		private static final SyntacticType test_144_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_144_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_144() { testInvalid(test_144_sup,test_144_sub); }

		private static final SyntacticType test_145_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_145_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_145() { testInvalid(test_145_sup,test_145_sub); }

		private static final SyntacticType test_146_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_146_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_146() { testInvalid(test_146_sup,test_146_sub); }

		private static final SyntacticType test_147_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_147_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_147() { testInvalid(test_147_sup,test_147_sub); }

		private static final SyntacticType test_148_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_148_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_148() { testInvalid(test_148_sup,test_148_sub); }

		private static final SyntacticType test_149_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_149_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_149() { testInvalid(test_149_sup,test_149_sub); }

		private static final SyntacticType test_150_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_150_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_150() { testInvalid(test_150_sup,test_150_sub); }

		private static final SyntacticType test_151_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_151_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_151() { testValid(test_151_sup,test_151_sub); }

		private static final SyntacticType test_152_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_152_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_152() { testInvalid(test_152_sup,test_152_sub); }

		private static final SyntacticType test_153_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_153_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_153() { testInvalid(test_153_sup,test_153_sub); }

		private static final SyntacticType test_154_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_154_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_154() { testInvalid(test_154_sup,test_154_sub); }

		private static final SyntacticType test_155_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_155_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_155() { testInvalid(test_155_sup,test_155_sub); }

		private static final SyntacticType test_156_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_156_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_156() { testInvalid(test_156_sup,test_156_sub); }

		private static final SyntacticType test_157_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_157_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_157() { testInvalid(test_157_sup,test_157_sub); }

		private static final SyntacticType test_158_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_158_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_158() { testInvalid(test_158_sup,test_158_sub); }

		private static final SyntacticType test_159_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_159_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_159() { testInvalid(test_159_sup,test_159_sub); }

		private static final SyntacticType test_160_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_160_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_160() { testInvalid(test_160_sup,test_160_sub); }

		private static final SyntacticType test_161_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_161_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_161() { testInvalid(test_161_sup,test_161_sub); }

		private static final SyntacticType test_162_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_162_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_162() { testInvalid(test_162_sup,test_162_sub); }

		private static final SyntacticType test_163_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_163_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_163() { testInvalid(test_163_sup,test_163_sub); }

		private static final SyntacticType test_164_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_164_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_164() { testInvalid(test_164_sup,test_164_sub); }

		private static final SyntacticType test_165_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_165_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_165() { testInvalid(test_165_sup,test_165_sub); }

		private static final SyntacticType test_166_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_166_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_166() { testInvalid(test_166_sup,test_166_sub); }

		private static final SyntacticType test_167_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_167_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_167() { testInvalid(test_167_sup,test_167_sub); }

		private static final SyntacticType test_168_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_168_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_168() { testInvalid(test_168_sup,test_168_sub); }

		private static final SyntacticType test_169_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_169_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_169() { testInvalid(test_169_sup,test_169_sub); }

		private static final SyntacticType test_170_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_170_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_170() { testInvalid(test_170_sup,test_170_sub); }

		private static final SyntacticType test_171_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_171_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_171() { testInvalid(test_171_sup,test_171_sub); }

		private static final SyntacticType test_172_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_172_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_172() { testInvalid(test_172_sup,test_172_sub); }

		private static final SyntacticType test_173_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_173_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_173() { testInvalid(test_173_sup,test_173_sub); }

		private static final SyntacticType test_174_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_174_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_174() { testInvalid(test_174_sup,test_174_sub); }

		private static final SyntacticType test_175_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_175_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_175() { testInvalid(test_175_sup,test_175_sub); }

		private static final SyntacticType test_176_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_176_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_176() { testInvalid(test_176_sup,test_176_sub); }

		private static final SyntacticType test_177_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_177_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_177() { testInvalid(test_177_sup,test_177_sub); }

		private static final SyntacticType test_178_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_178_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_178() { testValid(test_178_sup,test_178_sub); }

		private static final SyntacticType test_179_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_179_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_179() { testInvalid(test_179_sup,test_179_sub); }

		private static final SyntacticType test_180_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_180_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_180() { testInvalid(test_180_sup,test_180_sub); }

		private static final SyntacticType test_181_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_181_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_181() { testValid(test_181_sup,test_181_sub); }

		private static final SyntacticType test_182_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_182_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_182() { testInvalid(test_182_sup,test_182_sub); }

		private static final SyntacticType test_183_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_183_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_183() { testInvalid(test_183_sup,test_183_sub); }

		private static final SyntacticType test_184_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_184_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_184() { testInvalid(test_184_sup,test_184_sub); }

		private static final SyntacticType test_185_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_185_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_185() { testInvalid(test_185_sup,test_185_sub); }

		private static final SyntacticType test_186_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_186_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_186() { testInvalid(test_186_sup,test_186_sub); }

		private static final SyntacticType test_187_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_187_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_187() { testInvalid(test_187_sup,test_187_sub); }

		private static final SyntacticType test_188_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_188_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_188() { testInvalid(test_188_sup,test_188_sub); }

		private static final SyntacticType test_189_sup = parse("{(!int | (int | any)), (int & int)}");
		private static final SyntacticType test_189_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_189() { testInvalid(test_189_sup,test_189_sub); }

		private static final SyntacticType test_190_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_190_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_190() { testInvalid(test_190_sup,test_190_sub); }

		private static final SyntacticType test_191_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_191_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_191() { testInvalid(test_191_sup,test_191_sub); }

		private static final SyntacticType test_192_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_192_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_192() { testValid(test_192_sup,test_192_sub); }

		private static final SyntacticType test_193_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_193_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_193() { testInvalid(test_193_sup,test_193_sub); }

		private static final SyntacticType test_194_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_194_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_194() { testInvalid(test_194_sup,test_194_sub); }

		private static final SyntacticType test_195_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_195_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_195() { testInvalid(test_195_sup,test_195_sub); }

		private static final SyntacticType test_196_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_196_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_196() { testInvalid(test_196_sup,test_196_sub); }

		private static final SyntacticType test_197_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_197_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_197() { testInvalid(test_197_sup,test_197_sub); }

		private static final SyntacticType test_198_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_198_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_198() { testInvalid(test_198_sup,test_198_sub); }

		private static final SyntacticType test_199_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_199_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_199() { testInvalid(test_199_sup,test_199_sub); }

		private static final SyntacticType test_200_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_200_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_200() { testInvalid(test_200_sup,test_200_sub); }

		private static final SyntacticType test_201_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_201_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_201() { testInvalid(test_201_sup,test_201_sub); }

		private static final SyntacticType test_202_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_202_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_202() { testInvalid(test_202_sup,test_202_sub); }

		private static final SyntacticType test_203_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_203_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_203() { testInvalid(test_203_sup,test_203_sub); }

		private static final SyntacticType test_204_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_204_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_204() { testInvalid(test_204_sup,test_204_sub); }

		private static final SyntacticType test_205_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_205_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_205() { testInvalid(test_205_sup,test_205_sub); }

		private static final SyntacticType test_206_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_206_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_206() { testInvalid(test_206_sup,test_206_sub); }

		private static final SyntacticType test_207_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_207_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_207() { testInvalid(test_207_sup,test_207_sub); }

		private static final SyntacticType test_208_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_208_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_208() { testInvalid(test_208_sup,test_208_sub); }

		private static final SyntacticType test_209_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_209_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_209() { testInvalid(test_209_sup,test_209_sub); }

		private static final SyntacticType test_210_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_210_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_210() { testInvalid(test_210_sup,test_210_sub); }

		private static final SyntacticType test_211_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_211_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_211() { testInvalid(test_211_sup,test_211_sub); }

		private static final SyntacticType test_212_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_212_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_212() { testInvalid(test_212_sup,test_212_sub); }

		private static final SyntacticType test_213_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_213_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_213() { testInvalid(test_213_sup,test_213_sub); }

		private static final SyntacticType test_214_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_214_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_214() { testInvalid(test_214_sup,test_214_sub); }

		private static final SyntacticType test_215_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_215_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_215() { testInvalid(test_215_sup,test_215_sub); }

		private static final SyntacticType test_216_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_216_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_216() { testInvalid(test_216_sup,test_216_sub); }

		private static final SyntacticType test_217_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_217_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_217() { testInvalid(test_217_sup,test_217_sub); }

		private static final SyntacticType test_218_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_218_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_218() { testInvalid(test_218_sup,test_218_sub); }

		private static final SyntacticType test_219_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_219_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_219() { testInvalid(test_219_sup,test_219_sub); }

		private static final SyntacticType test_220_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_220_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_220() { testInvalid(test_220_sup,test_220_sub); }

		private static final SyntacticType test_221_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_221_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_221() { testInvalid(test_221_sup,test_221_sub); }

		private static final SyntacticType test_222_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_222_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_222() { testInvalid(test_222_sup,test_222_sub); }

		private static final SyntacticType test_223_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_223_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_223() { testInvalid(test_223_sup,test_223_sub); }

		private static final SyntacticType test_224_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_224_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_224() { testInvalid(test_224_sup,test_224_sub); }

		private static final SyntacticType test_225_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_225_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_225() { testInvalid(test_225_sup,test_225_sub); }

		private static final SyntacticType test_226_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_226_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_226() { testInvalid(test_226_sup,test_226_sub); }

		private static final SyntacticType test_227_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_227_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_227() { testInvalid(test_227_sup,test_227_sub); }

		private static final SyntacticType test_228_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_228_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_228() { testInvalid(test_228_sup,test_228_sub); }

		private static final SyntacticType test_229_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_229_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_229() { testInvalid(test_229_sup,test_229_sub); }

		private static final SyntacticType test_230_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_230_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_230() { testInvalid(test_230_sup,test_230_sub); }

		private static final SyntacticType test_231_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_231_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_231() { testInvalid(test_231_sup,test_231_sub); }

		private static final SyntacticType test_232_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_232_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_232() { testInvalid(test_232_sup,test_232_sub); }

		private static final SyntacticType test_233_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_233_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_233() { testInvalid(test_233_sup,test_233_sub); }

		private static final SyntacticType test_234_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_234_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_234() { testInvalid(test_234_sup,test_234_sub); }

		private static final SyntacticType test_235_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_235_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_235() { testInvalid(test_235_sup,test_235_sub); }

		private static final SyntacticType test_236_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_236_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_236() { testInvalid(test_236_sup,test_236_sub); }

		private static final SyntacticType test_237_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_237_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_237() { testInvalid(test_237_sup,test_237_sub); }

		private static final SyntacticType test_238_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_238_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_238() { testInvalid(test_238_sup,test_238_sub); }

		private static final SyntacticType test_239_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_239_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_239() { testInvalid(test_239_sup,test_239_sub); }

		private static final SyntacticType test_240_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_240_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_240() { testInvalid(test_240_sup,test_240_sub); }

		private static final SyntacticType test_241_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_241_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_241() { testInvalid(test_241_sup,test_241_sub); }

		private static final SyntacticType test_242_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_242_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_242() { testInvalid(test_242_sup,test_242_sub); }

		private static final SyntacticType test_243_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_243_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_243() { testInvalid(test_243_sup,test_243_sub); }

		private static final SyntacticType test_244_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_244_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_244() { testInvalid(test_244_sup,test_244_sub); }

		private static final SyntacticType test_245_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_245_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_245() { testInvalid(test_245_sup,test_245_sub); }

		private static final SyntacticType test_246_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_246_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_246() { testInvalid(test_246_sup,test_246_sub); }

		private static final SyntacticType test_247_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_247_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_247() { testInvalid(test_247_sup,test_247_sub); }

		private static final SyntacticType test_248_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_248_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_248() { testInvalid(test_248_sup,test_248_sub); }

		private static final SyntacticType test_249_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_249_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_249() { testInvalid(test_249_sup,test_249_sub); }

		private static final SyntacticType test_250_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_250_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_250() { testInvalid(test_250_sup,test_250_sub); }

		private static final SyntacticType test_251_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_251_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_251() { testInvalid(test_251_sup,test_251_sub); }

		private static final SyntacticType test_252_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_252_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_252() { testInvalid(test_252_sup,test_252_sub); }

		private static final SyntacticType test_253_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_253_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_253() { testInvalid(test_253_sup,test_253_sub); }

		private static final SyntacticType test_254_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_254_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_254() { testInvalid(test_254_sup,test_254_sub); }

		private static final SyntacticType test_255_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_255_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_255() { testInvalid(test_255_sup,test_255_sub); }

		private static final SyntacticType test_256_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_256_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_256() { testInvalid(test_256_sup,test_256_sub); }

		private static final SyntacticType test_257_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_257_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_257() { testInvalid(test_257_sup,test_257_sub); }

		private static final SyntacticType test_258_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_258_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_258() { testInvalid(test_258_sup,test_258_sub); }

		private static final SyntacticType test_259_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_259_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_259() { testInvalid(test_259_sup,test_259_sub); }

		private static final SyntacticType test_260_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_260_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_260() { testInvalid(test_260_sup,test_260_sub); }

		private static final SyntacticType test_261_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_261_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_261() { testInvalid(test_261_sup,test_261_sub); }

		private static final SyntacticType test_262_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_262_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_262() { testInvalid(test_262_sup,test_262_sub); }

		private static final SyntacticType test_263_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_263_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_263() { testInvalid(test_263_sup,test_263_sub); }

		private static final SyntacticType test_264_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_264_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_264() { testInvalid(test_264_sup,test_264_sub); }

		private static final SyntacticType test_265_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_265_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_265() { testInvalid(test_265_sup,test_265_sub); }

		private static final SyntacticType test_266_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_266_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_266() { testInvalid(test_266_sup,test_266_sub); }

		private static final SyntacticType test_267_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_267_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_267() { testInvalid(test_267_sup,test_267_sub); }

		private static final SyntacticType test_268_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_268_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_268() { testInvalid(test_268_sup,test_268_sub); }

		private static final SyntacticType test_269_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_269_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_269() { testInvalid(test_269_sup,test_269_sub); }

		private static final SyntacticType test_270_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_270_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_270() { testInvalid(test_270_sup,test_270_sub); }

		private static final SyntacticType test_271_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_271_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_271() { testInvalid(test_271_sup,test_271_sub); }

		private static final SyntacticType test_272_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_272_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_272() { testInvalid(test_272_sup,test_272_sub); }

		private static final SyntacticType test_273_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_273_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_273() { testInvalid(test_273_sup,test_273_sub); }

		private static final SyntacticType test_274_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_274_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_274() { testInvalid(test_274_sup,test_274_sub); }

		private static final SyntacticType test_275_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_275_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_275() { testInvalid(test_275_sup,test_275_sub); }

		private static final SyntacticType test_276_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_276_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_276() { testInvalid(test_276_sup,test_276_sub); }

		private static final SyntacticType test_277_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_277_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_277() { testInvalid(test_277_sup,test_277_sub); }

		private static final SyntacticType test_278_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_278_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_278() { testInvalid(test_278_sup,test_278_sub); }

		private static final SyntacticType test_279_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_279_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_279() { testInvalid(test_279_sup,test_279_sub); }

		private static final SyntacticType test_280_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_280_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_280() { testInvalid(test_280_sup,test_280_sub); }

		private static final SyntacticType test_281_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_281_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_281() { testInvalid(test_281_sup,test_281_sub); }

		private static final SyntacticType test_282_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_282_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_282() { testInvalid(test_282_sup,test_282_sub); }

		private static final SyntacticType test_283_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_283_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_283() { testInvalid(test_283_sup,test_283_sub); }

		private static final SyntacticType test_284_sup = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		private static final SyntacticType test_284_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_284() { testInvalid(test_284_sup,test_284_sub); }

		private static final SyntacticType test_285_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_285_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_285() { testInvalid(test_285_sup,test_285_sub); }

		private static final SyntacticType test_286_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_286_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_286() { testInvalid(test_286_sup,test_286_sub); }

		private static final SyntacticType test_287_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_287_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_287() { testInvalid(test_287_sup,test_287_sub); }

		private static final SyntacticType test_288_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_288_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_288() { testValid(test_288_sup,test_288_sub); }

		private static final SyntacticType test_289_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_289_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_289() { testInvalid(test_289_sup,test_289_sub); }

		private static final SyntacticType test_290_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_290_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_290() { testInvalid(test_290_sup,test_290_sub); }

		private static final SyntacticType test_291_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_291_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_291() { testInvalid(test_291_sup,test_291_sub); }

		private static final SyntacticType test_292_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_292_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_292() { testInvalid(test_292_sup,test_292_sub); }

		private static final SyntacticType test_293_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_293_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_293() { testInvalid(test_293_sup,test_293_sub); }

		private static final SyntacticType test_294_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_294_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_294() { testInvalid(test_294_sup,test_294_sub); }

		private static final SyntacticType test_295_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_295_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_295() { testInvalid(test_295_sup,test_295_sub); }

		private static final SyntacticType test_296_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_296_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_296() { testInvalid(test_296_sup,test_296_sub); }

		private static final SyntacticType test_297_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_297_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_297() { testInvalid(test_297_sup,test_297_sub); }

		private static final SyntacticType test_298_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_298_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_298() { testInvalid(test_298_sup,test_298_sub); }

		private static final SyntacticType test_299_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_299_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_299() { testInvalid(test_299_sup,test_299_sub); }

		private static final SyntacticType test_300_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_300_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_300() { testInvalid(test_300_sup,test_300_sub); }

		private static final SyntacticType test_301_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_301_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_301() { testInvalid(test_301_sup,test_301_sub); }

		private static final SyntacticType test_302_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_302_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_302() { testInvalid(test_302_sup,test_302_sub); }

		private static final SyntacticType test_303_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_303_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_303() { testInvalid(test_303_sup,test_303_sub); }

		private static final SyntacticType test_304_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_304_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_304() { testInvalid(test_304_sup,test_304_sub); }

		private static final SyntacticType test_305_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_305_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_305() { testInvalid(test_305_sup,test_305_sub); }

		private static final SyntacticType test_306_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_306_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_306() { testInvalid(test_306_sup,test_306_sub); }

		private static final SyntacticType test_307_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_307_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_307() { testInvalid(test_307_sup,test_307_sub); }

		private static final SyntacticType test_308_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_308_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_308() { testInvalid(test_308_sup,test_308_sub); }

		private static final SyntacticType test_309_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_309_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_309() { testInvalid(test_309_sup,test_309_sub); }

		private static final SyntacticType test_310_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_310_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_310() { testInvalid(test_310_sup,test_310_sub); }

		private static final SyntacticType test_311_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_311_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_311() { testInvalid(test_311_sup,test_311_sub); }

		private static final SyntacticType test_312_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_312_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_312() { testInvalid(test_312_sup,test_312_sub); }

		private static final SyntacticType test_313_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_313_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_313() { testInvalid(test_313_sup,test_313_sub); }

		private static final SyntacticType test_314_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_314_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_314() { testInvalid(test_314_sup,test_314_sub); }

		private static final SyntacticType test_315_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_315_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_315() { testInvalid(test_315_sup,test_315_sub); }

		private static final SyntacticType test_316_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_316_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_316() { testInvalid(test_316_sup,test_316_sub); }

		private static final SyntacticType test_317_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_317_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_317() { testInvalid(test_317_sup,test_317_sub); }

		private static final SyntacticType test_318_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_318_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_318() { testInvalid(test_318_sup,test_318_sub); }

		private static final SyntacticType test_319_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_319_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_319() { testInvalid(test_319_sup,test_319_sub); }

		private static final SyntacticType test_320_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_320_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_320() { testInvalid(test_320_sup,test_320_sub); }

		private static final SyntacticType test_321_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_321_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_321() { testInvalid(test_321_sup,test_321_sub); }

		private static final SyntacticType test_322_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_322_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_322() { testInvalid(test_322_sup,test_322_sub); }

		private static final SyntacticType test_323_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_323_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_323() { testInvalid(test_323_sup,test_323_sub); }

		private static final SyntacticType test_324_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_324_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_324() { testInvalid(test_324_sup,test_324_sub); }

		private static final SyntacticType test_325_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_325_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_325() { testInvalid(test_325_sup,test_325_sub); }

		private static final SyntacticType test_326_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_326_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_326() { testInvalid(test_326_sup,test_326_sub); }

		private static final SyntacticType test_327_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_327_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_327() { testInvalid(test_327_sup,test_327_sub); }

		private static final SyntacticType test_328_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_328_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_328() { testInvalid(test_328_sup,test_328_sub); }

		private static final SyntacticType test_329_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_329_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_329() { testInvalid(test_329_sup,test_329_sub); }

		private static final SyntacticType test_330_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_330_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_330() { testInvalid(test_330_sup,test_330_sub); }

		private static final SyntacticType test_331_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_331_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_331() { testInvalid(test_331_sup,test_331_sub); }

		private static final SyntacticType test_332_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_332_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_332() { testInvalid(test_332_sup,test_332_sub); }

		private static final SyntacticType test_333_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_333_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_333() { testInvalid(test_333_sup,test_333_sub); }

		private static final SyntacticType test_334_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_334_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_334() { testInvalid(test_334_sup,test_334_sub); }

		private static final SyntacticType test_335_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_335_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_335() { testInvalid(test_335_sup,test_335_sub); }

		private static final SyntacticType test_336_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_336_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_336() { testInvalid(test_336_sup,test_336_sub); }

		private static final SyntacticType test_337_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_337_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_337() { testInvalid(test_337_sup,test_337_sub); }

		private static final SyntacticType test_338_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_338_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_338() { testInvalid(test_338_sup,test_338_sub); }

		private static final SyntacticType test_339_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_339_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_339() { testInvalid(test_339_sup,test_339_sub); }

		private static final SyntacticType test_340_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_340_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_340() { testInvalid(test_340_sup,test_340_sub); }

		private static final SyntacticType test_341_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_341_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_341() { testInvalid(test_341_sup,test_341_sub); }

		private static final SyntacticType test_342_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_342_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_342() { testInvalid(test_342_sup,test_342_sub); }

		private static final SyntacticType test_343_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_343_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_343() { testInvalid(test_343_sup,test_343_sub); }

		private static final SyntacticType test_344_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_344_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_344() { testInvalid(test_344_sup,test_344_sub); }

		private static final SyntacticType test_345_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_345_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_345() { testInvalid(test_345_sup,test_345_sub); }

		private static final SyntacticType test_346_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_346_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_346() { testInvalid(test_346_sup,test_346_sub); }

		private static final SyntacticType test_347_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_347_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_347() { testInvalid(test_347_sup,test_347_sub); }

		private static final SyntacticType test_348_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_348_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_348() { testInvalid(test_348_sup,test_348_sub); }

		private static final SyntacticType test_349_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_349_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_349() { testInvalid(test_349_sup,test_349_sub); }

		private static final SyntacticType test_350_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_350_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_350() { testInvalid(test_350_sup,test_350_sub); }

		private static final SyntacticType test_351_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_351_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_351() { testInvalid(test_351_sup,test_351_sub); }

		private static final SyntacticType test_352_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_352_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_352() { testInvalid(test_352_sup,test_352_sub); }

		private static final SyntacticType test_353_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_353_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_353() { testInvalid(test_353_sup,test_353_sub); }

		private static final SyntacticType test_354_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_354_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_354() { testInvalid(test_354_sup,test_354_sub); }

		private static final SyntacticType test_355_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_355_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_355() { testInvalid(test_355_sup,test_355_sub); }

		private static final SyntacticType test_356_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_356_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_356() { testInvalid(test_356_sup,test_356_sub); }

		private static final SyntacticType test_357_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_357_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_357() { testInvalid(test_357_sup,test_357_sub); }

		private static final SyntacticType test_358_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_358_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_358() { testInvalid(test_358_sup,test_358_sub); }

		private static final SyntacticType test_359_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_359_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_359() { testInvalid(test_359_sup,test_359_sub); }

		private static final SyntacticType test_360_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_360_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_360() { testInvalid(test_360_sup,test_360_sub); }

		private static final SyntacticType test_361_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_361_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_361() { testInvalid(test_361_sup,test_361_sub); }

		private static final SyntacticType test_362_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_362_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_362() { testInvalid(test_362_sup,test_362_sub); }

		private static final SyntacticType test_363_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_363_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_363() { testInvalid(test_363_sup,test_363_sub); }

		private static final SyntacticType test_364_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_364_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_364() { testInvalid(test_364_sup,test_364_sub); }

		private static final SyntacticType test_365_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_365_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_365() { testInvalid(test_365_sup,test_365_sub); }

		private static final SyntacticType test_366_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_366_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_366() { testInvalid(test_366_sup,test_366_sub); }

		private static final SyntacticType test_367_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_367_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_367() { testInvalid(test_367_sup,test_367_sub); }

		private static final SyntacticType test_368_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_368_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_368() { testInvalid(test_368_sup,test_368_sub); }

		private static final SyntacticType test_369_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_369_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_369() { testInvalid(test_369_sup,test_369_sub); }

		private static final SyntacticType test_370_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_370_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_370() { testInvalid(test_370_sup,test_370_sub); }

		private static final SyntacticType test_371_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_371_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_371() { testInvalid(test_371_sup,test_371_sub); }

		private static final SyntacticType test_372_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_372_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_372() { testInvalid(test_372_sup,test_372_sub); }

		private static final SyntacticType test_373_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_373_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_373() { testInvalid(test_373_sup,test_373_sub); }

		private static final SyntacticType test_374_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_374_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_374() { testInvalid(test_374_sup,test_374_sub); }

		private static final SyntacticType test_375_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_375_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_375() { testInvalid(test_375_sup,test_375_sub); }

		private static final SyntacticType test_376_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_376_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_376() { testInvalid(test_376_sup,test_376_sub); }

		private static final SyntacticType test_377_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_377_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_377() { testInvalid(test_377_sup,test_377_sub); }

		private static final SyntacticType test_378_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_378_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_378() { testInvalid(test_378_sup,test_378_sub); }

		private static final SyntacticType test_379_sup = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		private static final SyntacticType test_379_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_379() { testInvalid(test_379_sup,test_379_sub); }

		private static final SyntacticType test_380_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_380_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_380() { testInvalid(test_380_sup,test_380_sub); }

		private static final SyntacticType test_381_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_381_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_381() { testInvalid(test_381_sup,test_381_sub); }

		private static final SyntacticType test_382_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_382_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_382() { testInvalid(test_382_sup,test_382_sub); }

		private static final SyntacticType test_383_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_383_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_383() { testInvalid(test_383_sup,test_383_sub); }

		private static final SyntacticType test_384_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_384_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_384() { testValid(test_384_sup,test_384_sub); }

		private static final SyntacticType test_385_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_385_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_385() { testInvalid(test_385_sup,test_385_sub); }

		private static final SyntacticType test_386_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_386_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_386() { testInvalid(test_386_sup,test_386_sub); }

		private static final SyntacticType test_387_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_387_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_387() { testInvalid(test_387_sup,test_387_sub); }

		private static final SyntacticType test_388_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_388_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_388() { testInvalid(test_388_sup,test_388_sub); }

		private static final SyntacticType test_389_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_389_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_389() { testInvalid(test_389_sup,test_389_sub); }

		private static final SyntacticType test_390_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_390_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_390() { testInvalid(test_390_sup,test_390_sub); }

		private static final SyntacticType test_391_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_391_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_391() { testInvalid(test_391_sup,test_391_sub); }

		private static final SyntacticType test_392_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_392_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_392() { testInvalid(test_392_sup,test_392_sub); }

		private static final SyntacticType test_393_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_393_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_393() { testInvalid(test_393_sup,test_393_sub); }

		private static final SyntacticType test_394_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_394_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_394() { testInvalid(test_394_sup,test_394_sub); }

		private static final SyntacticType test_395_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_395_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_395() { testInvalid(test_395_sup,test_395_sub); }

		private static final SyntacticType test_396_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_396_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_396() { testInvalid(test_396_sup,test_396_sub); }

		private static final SyntacticType test_397_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_397_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_397() { testInvalid(test_397_sup,test_397_sub); }

		private static final SyntacticType test_398_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_398_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_398() { testInvalid(test_398_sup,test_398_sub); }

		private static final SyntacticType test_399_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_399_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_399() { testInvalid(test_399_sup,test_399_sub); }

		private static final SyntacticType test_400_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_400_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_400() { testInvalid(test_400_sup,test_400_sub); }

		private static final SyntacticType test_401_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_401_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_401() { testInvalid(test_401_sup,test_401_sub); }

		private static final SyntacticType test_402_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_402_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_402() { testInvalid(test_402_sup,test_402_sub); }

		private static final SyntacticType test_403_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_403_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_403() { testInvalid(test_403_sup,test_403_sub); }

		private static final SyntacticType test_404_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_404_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_404() { testInvalid(test_404_sup,test_404_sub); }

		private static final SyntacticType test_405_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_405_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_405() { testInvalid(test_405_sup,test_405_sub); }

		private static final SyntacticType test_406_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_406_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_406() { testInvalid(test_406_sup,test_406_sub); }

		private static final SyntacticType test_407_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_407_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_407() { testInvalid(test_407_sup,test_407_sub); }

		private static final SyntacticType test_408_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_408_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_408() { testInvalid(test_408_sup,test_408_sub); }

		private static final SyntacticType test_409_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_409_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_409() { testInvalid(test_409_sup,test_409_sub); }

		private static final SyntacticType test_410_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_410_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_410() { testInvalid(test_410_sup,test_410_sub); }

		private static final SyntacticType test_411_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_411_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_411() { testInvalid(test_411_sup,test_411_sub); }

		private static final SyntacticType test_412_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_412_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_412() { testInvalid(test_412_sup,test_412_sub); }

		private static final SyntacticType test_413_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_413_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_413() { testInvalid(test_413_sup,test_413_sub); }

		private static final SyntacticType test_414_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_414_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_414() { testInvalid(test_414_sup,test_414_sub); }

		private static final SyntacticType test_415_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_415_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_415() { testInvalid(test_415_sup,test_415_sub); }

		private static final SyntacticType test_416_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_416_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_416() { testInvalid(test_416_sup,test_416_sub); }

		private static final SyntacticType test_417_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_417_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_417() { testInvalid(test_417_sup,test_417_sub); }

		private static final SyntacticType test_418_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_418_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_418() { testInvalid(test_418_sup,test_418_sub); }

		private static final SyntacticType test_419_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_419_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_419() { testInvalid(test_419_sup,test_419_sub); }

		private static final SyntacticType test_420_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_420_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_420() { testInvalid(test_420_sup,test_420_sub); }

		private static final SyntacticType test_421_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_421_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_421() { testInvalid(test_421_sup,test_421_sub); }

		private static final SyntacticType test_422_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_422_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_422() { testInvalid(test_422_sup,test_422_sub); }

		private static final SyntacticType test_423_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_423_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_423() { testInvalid(test_423_sup,test_423_sub); }

		private static final SyntacticType test_424_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_424_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_424() { testInvalid(test_424_sup,test_424_sub); }

		private static final SyntacticType test_425_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_425_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_425() { testInvalid(test_425_sup,test_425_sub); }

		private static final SyntacticType test_426_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_426_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_426() { testInvalid(test_426_sup,test_426_sub); }

		private static final SyntacticType test_427_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_427_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_427() { testInvalid(test_427_sup,test_427_sub); }

		private static final SyntacticType test_428_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_428_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_428() { testInvalid(test_428_sup,test_428_sub); }

		private static final SyntacticType test_429_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_429_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_429() { testInvalid(test_429_sup,test_429_sub); }

		private static final SyntacticType test_430_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_430_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_430() { testInvalid(test_430_sup,test_430_sub); }

		private static final SyntacticType test_431_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_431_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_431() { testInvalid(test_431_sup,test_431_sub); }

		private static final SyntacticType test_432_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_432_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_432() { testInvalid(test_432_sup,test_432_sub); }

		private static final SyntacticType test_433_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_433_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_433() { testInvalid(test_433_sup,test_433_sub); }

		private static final SyntacticType test_434_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_434_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_434() { testInvalid(test_434_sup,test_434_sub); }

		private static final SyntacticType test_435_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_435_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_435() { testInvalid(test_435_sup,test_435_sub); }

		private static final SyntacticType test_436_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_436_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_436() { testInvalid(test_436_sup,test_436_sub); }

		private static final SyntacticType test_437_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_437_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_437() { testInvalid(test_437_sup,test_437_sub); }

		private static final SyntacticType test_438_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_438_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_438() { testInvalid(test_438_sup,test_438_sub); }

		private static final SyntacticType test_439_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_439_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_439() { testInvalid(test_439_sup,test_439_sub); }

		private static final SyntacticType test_440_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_440_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_440() { testInvalid(test_440_sup,test_440_sub); }

		private static final SyntacticType test_441_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_441_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_441() { testInvalid(test_441_sup,test_441_sub); }

		private static final SyntacticType test_442_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_442_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_442() { testInvalid(test_442_sup,test_442_sub); }

		private static final SyntacticType test_443_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_443_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_443() { testInvalid(test_443_sup,test_443_sub); }

		private static final SyntacticType test_444_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_444_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_444() { testInvalid(test_444_sup,test_444_sub); }

		private static final SyntacticType test_445_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_445_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_445() { testInvalid(test_445_sup,test_445_sub); }

		private static final SyntacticType test_446_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_446_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_446() { testInvalid(test_446_sup,test_446_sub); }

		private static final SyntacticType test_447_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_447_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_447() { testInvalid(test_447_sup,test_447_sub); }

		private static final SyntacticType test_448_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_448_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_448() { testInvalid(test_448_sup,test_448_sub); }

		private static final SyntacticType test_449_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_449_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_449() { testInvalid(test_449_sup,test_449_sub); }

		private static final SyntacticType test_450_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_450_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_450() { testInvalid(test_450_sup,test_450_sub); }

		private static final SyntacticType test_451_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_451_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_451() { testInvalid(test_451_sup,test_451_sub); }

		private static final SyntacticType test_452_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_452_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_452() { testInvalid(test_452_sup,test_452_sub); }

		private static final SyntacticType test_453_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_453_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_453() { testInvalid(test_453_sup,test_453_sub); }

		private static final SyntacticType test_454_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_454_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_454() { testInvalid(test_454_sup,test_454_sub); }

		private static final SyntacticType test_455_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_455_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_455() { testInvalid(test_455_sup,test_455_sub); }

		private static final SyntacticType test_456_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_456_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_456() { testInvalid(test_456_sup,test_456_sub); }

		private static final SyntacticType test_457_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_457_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_457() { testInvalid(test_457_sup,test_457_sub); }

		private static final SyntacticType test_458_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_458_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_458() { testInvalid(test_458_sup,test_458_sub); }

		private static final SyntacticType test_459_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_459_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_459() { testInvalid(test_459_sup,test_459_sub); }

		private static final SyntacticType test_460_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_460_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_460() { testInvalid(test_460_sup,test_460_sub); }

		private static final SyntacticType test_461_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_461_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_461() { testInvalid(test_461_sup,test_461_sub); }

		private static final SyntacticType test_462_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_462_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_462() { testInvalid(test_462_sup,test_462_sub); }

		private static final SyntacticType test_463_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_463_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_463() { testInvalid(test_463_sup,test_463_sub); }

		private static final SyntacticType test_464_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_464_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_464() { testInvalid(test_464_sup,test_464_sub); }

		private static final SyntacticType test_465_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_465_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_465() { testInvalid(test_465_sup,test_465_sub); }

		private static final SyntacticType test_466_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_466_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_466() { testInvalid(test_466_sup,test_466_sub); }

		private static final SyntacticType test_467_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_467_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_467() { testInvalid(test_467_sup,test_467_sub); }

		private static final SyntacticType test_468_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_468_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_468() { testInvalid(test_468_sup,test_468_sub); }

		private static final SyntacticType test_469_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_469_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_469() { testInvalid(test_469_sup,test_469_sub); }

		private static final SyntacticType test_470_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_470_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_470() { testInvalid(test_470_sup,test_470_sub); }

		private static final SyntacticType test_471_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_471_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_471() { testInvalid(test_471_sup,test_471_sub); }

		private static final SyntacticType test_472_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_472_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_472() { testInvalid(test_472_sup,test_472_sub); }

		private static final SyntacticType test_473_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_473_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_473() { testInvalid(test_473_sup,test_473_sub); }

		private static final SyntacticType test_474_sup = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		private static final SyntacticType test_474_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_474() { testInvalid(test_474_sup,test_474_sub); }

		private static final SyntacticType test_475_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_475_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_475() { testInvalid(test_475_sup,test_475_sub); }

		private static final SyntacticType test_476_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_476_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_476() { testInvalid(test_476_sup,test_476_sub); }

		private static final SyntacticType test_477_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_477_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_477() { testInvalid(test_477_sup,test_477_sub); }

		private static final SyntacticType test_478_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_478_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_478() { testInvalid(test_478_sup,test_478_sub); }

		private static final SyntacticType test_479_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_479_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_479() { testInvalid(test_479_sup,test_479_sub); }

		private static final SyntacticType test_480_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_480_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_480() { testValid(test_480_sup,test_480_sub); }

		private static final SyntacticType test_481_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_481_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_481() { testInvalid(test_481_sup,test_481_sub); }

		private static final SyntacticType test_482_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_482_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_482() { testInvalid(test_482_sup,test_482_sub); }

		private static final SyntacticType test_483_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_483_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_483() { testInvalid(test_483_sup,test_483_sub); }

		private static final SyntacticType test_484_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_484_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_484() { testInvalid(test_484_sup,test_484_sub); }

		private static final SyntacticType test_485_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_485_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_485() { testInvalid(test_485_sup,test_485_sub); }

		private static final SyntacticType test_486_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_486_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_486() { testInvalid(test_486_sup,test_486_sub); }

		private static final SyntacticType test_487_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_487_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_487() { testInvalid(test_487_sup,test_487_sub); }

		private static final SyntacticType test_488_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_488_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_488() { testInvalid(test_488_sup,test_488_sub); }

		private static final SyntacticType test_489_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_489_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_489() { testInvalid(test_489_sup,test_489_sub); }

		private static final SyntacticType test_490_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_490_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_490() { testInvalid(test_490_sup,test_490_sub); }

		private static final SyntacticType test_491_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_491_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_491() { testInvalid(test_491_sup,test_491_sub); }

		private static final SyntacticType test_492_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_492_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_492() { testInvalid(test_492_sup,test_492_sub); }

		private static final SyntacticType test_493_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_493_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_493() { testInvalid(test_493_sup,test_493_sub); }

		private static final SyntacticType test_494_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_494_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_494() { testInvalid(test_494_sup,test_494_sub); }

		private static final SyntacticType test_495_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_495_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_495() { testInvalid(test_495_sup,test_495_sub); }

		private static final SyntacticType test_496_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_496_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_496() { testInvalid(test_496_sup,test_496_sub); }

		private static final SyntacticType test_497_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_497_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_497() { testInvalid(test_497_sup,test_497_sub); }

		private static final SyntacticType test_498_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_498_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_498() { testInvalid(test_498_sup,test_498_sub); }

		private static final SyntacticType test_499_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_499_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_499() { testInvalid(test_499_sup,test_499_sub); }

		private static final SyntacticType test_500_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_500_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_500() { testInvalid(test_500_sup,test_500_sub); }

		private static final SyntacticType test_501_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_501_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_501() { testInvalid(test_501_sup,test_501_sub); }

		private static final SyntacticType test_502_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_502_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_502() { testInvalid(test_502_sup,test_502_sub); }

		private static final SyntacticType test_503_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_503_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_503() { testInvalid(test_503_sup,test_503_sub); }

		private static final SyntacticType test_504_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_504_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_504() { testInvalid(test_504_sup,test_504_sub); }

		private static final SyntacticType test_505_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_505_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_505() { testInvalid(test_505_sup,test_505_sub); }

		private static final SyntacticType test_506_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_506_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_506() { testInvalid(test_506_sup,test_506_sub); }

		private static final SyntacticType test_507_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_507_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_507() { testInvalid(test_507_sup,test_507_sub); }

		private static final SyntacticType test_508_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_508_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_508() { testInvalid(test_508_sup,test_508_sub); }

		private static final SyntacticType test_509_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_509_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_509() { testInvalid(test_509_sup,test_509_sub); }

		private static final SyntacticType test_510_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_510_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_510() { testInvalid(test_510_sup,test_510_sub); }

		private static final SyntacticType test_511_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_511_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_511() { testInvalid(test_511_sup,test_511_sub); }

		private static final SyntacticType test_512_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_512_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_512() { testInvalid(test_512_sup,test_512_sub); }

		private static final SyntacticType test_513_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_513_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_513() { testInvalid(test_513_sup,test_513_sub); }

		private static final SyntacticType test_514_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_514_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_514() { testInvalid(test_514_sup,test_514_sub); }

		private static final SyntacticType test_515_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_515_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_515() { testInvalid(test_515_sup,test_515_sub); }

		private static final SyntacticType test_516_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_516_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_516() { testInvalid(test_516_sup,test_516_sub); }

		private static final SyntacticType test_517_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_517_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_517() { testInvalid(test_517_sup,test_517_sub); }

		private static final SyntacticType test_518_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_518_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_518() { testInvalid(test_518_sup,test_518_sub); }

		private static final SyntacticType test_519_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_519_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_519() { testInvalid(test_519_sup,test_519_sub); }

		private static final SyntacticType test_520_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_520_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_520() { testInvalid(test_520_sup,test_520_sub); }

		private static final SyntacticType test_521_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_521_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_521() { testInvalid(test_521_sup,test_521_sub); }

		private static final SyntacticType test_522_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_522_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_522() { testInvalid(test_522_sup,test_522_sub); }

		private static final SyntacticType test_523_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_523_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_523() { testInvalid(test_523_sup,test_523_sub); }

		private static final SyntacticType test_524_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_524_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_524() { testInvalid(test_524_sup,test_524_sub); }

		private static final SyntacticType test_525_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_525_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_525() { testInvalid(test_525_sup,test_525_sub); }

		private static final SyntacticType test_526_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_526_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_526() { testInvalid(test_526_sup,test_526_sub); }

		private static final SyntacticType test_527_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_527_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_527() { testInvalid(test_527_sup,test_527_sub); }

		private static final SyntacticType test_528_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_528_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_528() { testInvalid(test_528_sup,test_528_sub); }

		private static final SyntacticType test_529_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_529_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_529() { testInvalid(test_529_sup,test_529_sub); }

		private static final SyntacticType test_530_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_530_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_530() { testInvalid(test_530_sup,test_530_sub); }

		private static final SyntacticType test_531_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_531_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_531() { testInvalid(test_531_sup,test_531_sub); }

		private static final SyntacticType test_532_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_532_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_532() { testInvalid(test_532_sup,test_532_sub); }

		private static final SyntacticType test_533_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_533_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_533() { testInvalid(test_533_sup,test_533_sub); }

		private static final SyntacticType test_534_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_534_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_534() { testInvalid(test_534_sup,test_534_sub); }

		private static final SyntacticType test_535_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_535_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_535() { testInvalid(test_535_sup,test_535_sub); }

		private static final SyntacticType test_536_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_536_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_536() { testInvalid(test_536_sup,test_536_sub); }

		private static final SyntacticType test_537_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_537_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_537() { testInvalid(test_537_sup,test_537_sub); }

		private static final SyntacticType test_538_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_538_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_538() { testInvalid(test_538_sup,test_538_sub); }

		private static final SyntacticType test_539_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_539_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_539() { testInvalid(test_539_sup,test_539_sub); }

		private static final SyntacticType test_540_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_540_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_540() { testInvalid(test_540_sup,test_540_sub); }

		private static final SyntacticType test_541_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_541_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_541() { testInvalid(test_541_sup,test_541_sub); }

		private static final SyntacticType test_542_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_542_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_542() { testInvalid(test_542_sup,test_542_sub); }

		private static final SyntacticType test_543_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_543_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_543() { testInvalid(test_543_sup,test_543_sub); }

		private static final SyntacticType test_544_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_544_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_544() { testInvalid(test_544_sup,test_544_sub); }

		private static final SyntacticType test_545_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_545_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_545() { testInvalid(test_545_sup,test_545_sub); }

		private static final SyntacticType test_546_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_546_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_546() { testInvalid(test_546_sup,test_546_sub); }

		private static final SyntacticType test_547_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_547_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_547() { testInvalid(test_547_sup,test_547_sub); }

		private static final SyntacticType test_548_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_548_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_548() { testInvalid(test_548_sup,test_548_sub); }

		private static final SyntacticType test_549_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_549_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_549() { testInvalid(test_549_sup,test_549_sub); }

		private static final SyntacticType test_550_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_550_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_550() { testInvalid(test_550_sup,test_550_sub); }

		private static final SyntacticType test_551_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_551_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_551() { testInvalid(test_551_sup,test_551_sub); }

		private static final SyntacticType test_552_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_552_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_552() { testInvalid(test_552_sup,test_552_sub); }

		private static final SyntacticType test_553_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_553_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_553() { testInvalid(test_553_sup,test_553_sub); }

		private static final SyntacticType test_554_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_554_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_554() { testInvalid(test_554_sup,test_554_sub); }

		private static final SyntacticType test_555_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_555_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_555() { testInvalid(test_555_sup,test_555_sub); }

		private static final SyntacticType test_556_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_556_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_556() { testInvalid(test_556_sup,test_556_sub); }

		private static final SyntacticType test_557_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_557_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_557() { testInvalid(test_557_sup,test_557_sub); }

		private static final SyntacticType test_558_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_558_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_558() { testInvalid(test_558_sup,test_558_sub); }

		private static final SyntacticType test_559_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_559_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_559() { testInvalid(test_559_sup,test_559_sub); }

		private static final SyntacticType test_560_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_560_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_560() { testInvalid(test_560_sup,test_560_sub); }

		private static final SyntacticType test_561_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_561_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_561() { testInvalid(test_561_sup,test_561_sub); }

		private static final SyntacticType test_562_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_562_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_562() { testInvalid(test_562_sup,test_562_sub); }

		private static final SyntacticType test_563_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_563_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_563() { testInvalid(test_563_sup,test_563_sub); }

		private static final SyntacticType test_564_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_564_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_564() { testInvalid(test_564_sup,test_564_sub); }

		private static final SyntacticType test_565_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_565_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_565() { testInvalid(test_565_sup,test_565_sub); }

		private static final SyntacticType test_566_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_566_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_566() { testInvalid(test_566_sup,test_566_sub); }

		private static final SyntacticType test_567_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_567_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_567() { testInvalid(test_567_sup,test_567_sub); }

		private static final SyntacticType test_568_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_568_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_568() { testInvalid(test_568_sup,test_568_sub); }

		private static final SyntacticType test_569_sup = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		private static final SyntacticType test_569_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_569() { testInvalid(test_569_sup,test_569_sub); }

		private static final SyntacticType test_570_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_570_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_570() { testInvalid(test_570_sup,test_570_sub); }

		private static final SyntacticType test_571_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_571_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_571() { testInvalid(test_571_sup,test_571_sub); }

		private static final SyntacticType test_572_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_572_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_572() { testValid(test_572_sup,test_572_sub); }

		private static final SyntacticType test_573_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_573_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_573() { testValid(test_573_sup,test_573_sub); }

		private static final SyntacticType test_574_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_574_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_574() { testInvalid(test_574_sup,test_574_sub); }

		private static final SyntacticType test_575_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_575_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_575() { testInvalid(test_575_sup,test_575_sub); }

		private static final SyntacticType test_576_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_576_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_576() { testValid(test_576_sup,test_576_sub); }

		private static final SyntacticType test_577_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_577_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_577() { testInvalid(test_577_sup,test_577_sub); }

		private static final SyntacticType test_578_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_578_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_578() { testInvalid(test_578_sup,test_578_sub); }

		private static final SyntacticType test_579_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_579_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_579() { testInvalid(test_579_sup,test_579_sub); }

		private static final SyntacticType test_580_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_580_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_580() { testInvalid(test_580_sup,test_580_sub); }

		private static final SyntacticType test_581_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_581_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_581() { testInvalid(test_581_sup,test_581_sub); }

		private static final SyntacticType test_582_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_582_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_582() { testInvalid(test_582_sup,test_582_sub); }

		private static final SyntacticType test_583_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_583_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_583() { testInvalid(test_583_sup,test_583_sub); }

		private static final SyntacticType test_584_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_584_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_584() { testInvalid(test_584_sup,test_584_sub); }

		private static final SyntacticType test_585_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_585_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_585() { testInvalid(test_585_sup,test_585_sub); }

		private static final SyntacticType test_586_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_586_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_586() { testInvalid(test_586_sup,test_586_sub); }

		private static final SyntacticType test_587_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_587_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_587() { testInvalid(test_587_sup,test_587_sub); }

		private static final SyntacticType test_588_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_588_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_588() { testInvalid(test_588_sup,test_588_sub); }

		private static final SyntacticType test_589_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_589_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_589() { testInvalid(test_589_sup,test_589_sub); }

		private static final SyntacticType test_590_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_590_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_590() { testInvalid(test_590_sup,test_590_sub); }

		private static final SyntacticType test_591_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_591_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_591() { testInvalid(test_591_sup,test_591_sub); }

		private static final SyntacticType test_592_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_592_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_592() { testInvalid(test_592_sup,test_592_sub); }

		private static final SyntacticType test_593_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_593_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_593() { testInvalid(test_593_sup,test_593_sub); }

		private static final SyntacticType test_594_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_594_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_594() { testInvalid(test_594_sup,test_594_sub); }

		private static final SyntacticType test_595_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_595_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_595() { testInvalid(test_595_sup,test_595_sub); }

		private static final SyntacticType test_596_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_596_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_596() { testInvalid(test_596_sup,test_596_sub); }

		private static final SyntacticType test_597_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_597_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_597() { testInvalid(test_597_sup,test_597_sub); }

		private static final SyntacticType test_598_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_598_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_598() { testInvalid(test_598_sup,test_598_sub); }

		private static final SyntacticType test_599_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_599_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_599() { testInvalid(test_599_sup,test_599_sub); }

		private static final SyntacticType test_600_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_600_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_600() { testInvalid(test_600_sup,test_600_sub); }

		private static final SyntacticType test_601_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_601_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_601() { testInvalid(test_601_sup,test_601_sub); }

		private static final SyntacticType test_602_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_602_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_602() { testInvalid(test_602_sup,test_602_sub); }

		private static final SyntacticType test_603_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_603_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_603() { testInvalid(test_603_sup,test_603_sub); }

		private static final SyntacticType test_604_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_604_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_604() { testInvalid(test_604_sup,test_604_sub); }

		private static final SyntacticType test_605_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_605_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_605() { testInvalid(test_605_sup,test_605_sub); }

		private static final SyntacticType test_606_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_606_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_606() { testInvalid(test_606_sup,test_606_sub); }

		private static final SyntacticType test_607_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_607_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_607() { testInvalid(test_607_sup,test_607_sub); }

		private static final SyntacticType test_608_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_608_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_608() { testInvalid(test_608_sup,test_608_sub); }

		private static final SyntacticType test_609_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_609_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_609() { testInvalid(test_609_sup,test_609_sub); }

		private static final SyntacticType test_610_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_610_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_610() { testInvalid(test_610_sup,test_610_sub); }

		private static final SyntacticType test_611_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_611_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_611() { testInvalid(test_611_sup,test_611_sub); }

		private static final SyntacticType test_612_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_612_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_612() { testInvalid(test_612_sup,test_612_sub); }

		private static final SyntacticType test_613_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_613_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_613() { testInvalid(test_613_sup,test_613_sub); }

		private static final SyntacticType test_614_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_614_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_614() { testInvalid(test_614_sup,test_614_sub); }

		private static final SyntacticType test_615_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_615_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_615() { testInvalid(test_615_sup,test_615_sub); }

		private static final SyntacticType test_616_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_616_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_616() { testInvalid(test_616_sup,test_616_sub); }

		private static final SyntacticType test_617_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_617_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_617() { testInvalid(test_617_sup,test_617_sub); }

		private static final SyntacticType test_618_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_618_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_618() { testInvalid(test_618_sup,test_618_sub); }

		private static final SyntacticType test_619_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_619_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_619() { testInvalid(test_619_sup,test_619_sub); }

		private static final SyntacticType test_620_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_620_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_620() { testInvalid(test_620_sup,test_620_sub); }

		private static final SyntacticType test_621_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_621_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_621() { testInvalid(test_621_sup,test_621_sub); }

		private static final SyntacticType test_622_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_622_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_622() { testInvalid(test_622_sup,test_622_sub); }

		private static final SyntacticType test_623_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_623_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_623() { testInvalid(test_623_sup,test_623_sub); }

		private static final SyntacticType test_624_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_624_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_624() { testInvalid(test_624_sup,test_624_sub); }

		private static final SyntacticType test_625_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_625_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_625() { testInvalid(test_625_sup,test_625_sub); }

		private static final SyntacticType test_626_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_626_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_626() { testInvalid(test_626_sup,test_626_sub); }

		private static final SyntacticType test_627_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_627_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_627() { testInvalid(test_627_sup,test_627_sub); }

		private static final SyntacticType test_628_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_628_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_628() { testInvalid(test_628_sup,test_628_sub); }

		private static final SyntacticType test_629_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_629_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_629() { testInvalid(test_629_sup,test_629_sub); }

		private static final SyntacticType test_630_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_630_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_630() { testInvalid(test_630_sup,test_630_sub); }

		private static final SyntacticType test_631_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_631_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_631() { testInvalid(test_631_sup,test_631_sub); }

		private static final SyntacticType test_632_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_632_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_632() { testInvalid(test_632_sup,test_632_sub); }

		private static final SyntacticType test_633_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_633_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_633() { testInvalid(test_633_sup,test_633_sub); }

		private static final SyntacticType test_634_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_634_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_634() { testInvalid(test_634_sup,test_634_sub); }

		private static final SyntacticType test_635_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_635_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_635() { testInvalid(test_635_sup,test_635_sub); }

		private static final SyntacticType test_636_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_636_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_636() { testInvalid(test_636_sup,test_636_sub); }

		private static final SyntacticType test_637_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_637_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_637() { testInvalid(test_637_sup,test_637_sub); }

		private static final SyntacticType test_638_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_638_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_638() { testInvalid(test_638_sup,test_638_sub); }

		private static final SyntacticType test_639_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_639_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_639() { testInvalid(test_639_sup,test_639_sub); }

		private static final SyntacticType test_640_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_640_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_640() { testInvalid(test_640_sup,test_640_sub); }

		private static final SyntacticType test_641_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_641_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_641() { testInvalid(test_641_sup,test_641_sub); }

		private static final SyntacticType test_642_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_642_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_642() { testInvalid(test_642_sup,test_642_sub); }

		private static final SyntacticType test_643_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_643_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_643() { testInvalid(test_643_sup,test_643_sub); }

		private static final SyntacticType test_644_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_644_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_644() { testInvalid(test_644_sup,test_644_sub); }

		private static final SyntacticType test_645_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_645_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_645() { testInvalid(test_645_sup,test_645_sub); }

		private static final SyntacticType test_646_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_646_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_646() { testInvalid(test_646_sup,test_646_sub); }

		private static final SyntacticType test_647_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_647_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_647() { testInvalid(test_647_sup,test_647_sub); }

		private static final SyntacticType test_648_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_648_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_648() { testInvalid(test_648_sup,test_648_sub); }

		private static final SyntacticType test_649_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_649_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_649() { testInvalid(test_649_sup,test_649_sub); }

		private static final SyntacticType test_650_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_650_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_650() { testInvalid(test_650_sup,test_650_sub); }

		private static final SyntacticType test_651_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_651_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_651() { testInvalid(test_651_sup,test_651_sub); }

		private static final SyntacticType test_652_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_652_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_652() { testInvalid(test_652_sup,test_652_sub); }

		private static final SyntacticType test_653_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_653_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_653() { testInvalid(test_653_sup,test_653_sub); }

		private static final SyntacticType test_654_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_654_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_654() { testInvalid(test_654_sup,test_654_sub); }

		private static final SyntacticType test_655_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_655_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_655() { testInvalid(test_655_sup,test_655_sub); }

		private static final SyntacticType test_656_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_656_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_656() { testInvalid(test_656_sup,test_656_sub); }

		private static final SyntacticType test_657_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_657_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_657() { testInvalid(test_657_sup,test_657_sub); }

		private static final SyntacticType test_658_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_658_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_658() { testInvalid(test_658_sup,test_658_sub); }

		private static final SyntacticType test_659_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_659_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_659() { testInvalid(test_659_sup,test_659_sub); }

		private static final SyntacticType test_660_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_660_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_660() { testInvalid(test_660_sup,test_660_sub); }

		private static final SyntacticType test_661_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_661_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_661() { testInvalid(test_661_sup,test_661_sub); }

		private static final SyntacticType test_662_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_662_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_662() { testInvalid(test_662_sup,test_662_sub); }

		private static final SyntacticType test_663_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_663_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_663() { testInvalid(test_663_sup,test_663_sub); }

		private static final SyntacticType test_664_sup = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		private static final SyntacticType test_664_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_664() { testInvalid(test_664_sup,test_664_sub); }

		private static final SyntacticType test_665_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_665_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_665() { testInvalid(test_665_sup,test_665_sub); }

		private static final SyntacticType test_666_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_666_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_666() { testInvalid(test_666_sup,test_666_sub); }

		private static final SyntacticType test_667_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_667_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_667() { testInvalid(test_667_sup,test_667_sub); }

		private static final SyntacticType test_668_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_668_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_668() { testInvalid(test_668_sup,test_668_sub); }

		private static final SyntacticType test_669_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_669_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_669() { testInvalid(test_669_sup,test_669_sub); }

		private static final SyntacticType test_670_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_670_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_670() { testInvalid(test_670_sup,test_670_sub); }

		private static final SyntacticType test_671_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_671_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_671() { testInvalid(test_671_sup,test_671_sub); }

		private static final SyntacticType test_672_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_672_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_672() { testValid(test_672_sup,test_672_sub); }

		private static final SyntacticType test_673_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_673_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_673() { testInvalid(test_673_sup,test_673_sub); }

		private static final SyntacticType test_674_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_674_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_674() { testInvalid(test_674_sup,test_674_sub); }

		private static final SyntacticType test_675_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_675_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_675() { testInvalid(test_675_sup,test_675_sub); }

		private static final SyntacticType test_676_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_676_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_676() { testInvalid(test_676_sup,test_676_sub); }

		private static final SyntacticType test_677_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_677_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_677() { testInvalid(test_677_sup,test_677_sub); }

		private static final SyntacticType test_678_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_678_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_678() { testInvalid(test_678_sup,test_678_sub); }

		private static final SyntacticType test_679_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_679_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_679() { testInvalid(test_679_sup,test_679_sub); }

		private static final SyntacticType test_680_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_680_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_680() { testInvalid(test_680_sup,test_680_sub); }

		private static final SyntacticType test_681_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_681_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_681() { testInvalid(test_681_sup,test_681_sub); }

		private static final SyntacticType test_682_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_682_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_682() { testInvalid(test_682_sup,test_682_sub); }

		private static final SyntacticType test_683_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_683_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_683() { testInvalid(test_683_sup,test_683_sub); }

		private static final SyntacticType test_684_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_684_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_684() { testInvalid(test_684_sup,test_684_sub); }

		private static final SyntacticType test_685_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_685_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_685() { testInvalid(test_685_sup,test_685_sub); }

		private static final SyntacticType test_686_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_686_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_686() { testInvalid(test_686_sup,test_686_sub); }

		private static final SyntacticType test_687_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_687_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_687() { testInvalid(test_687_sup,test_687_sub); }

		private static final SyntacticType test_688_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_688_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_688() { testInvalid(test_688_sup,test_688_sub); }

		private static final SyntacticType test_689_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_689_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_689() { testInvalid(test_689_sup,test_689_sub); }

		private static final SyntacticType test_690_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_690_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_690() { testInvalid(test_690_sup,test_690_sub); }

		private static final SyntacticType test_691_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_691_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_691() { testInvalid(test_691_sup,test_691_sub); }

		private static final SyntacticType test_692_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_692_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_692() { testInvalid(test_692_sup,test_692_sub); }

		private static final SyntacticType test_693_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_693_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_693() { testInvalid(test_693_sup,test_693_sub); }

		private static final SyntacticType test_694_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_694_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_694() { testInvalid(test_694_sup,test_694_sub); }

		private static final SyntacticType test_695_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_695_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_695() { testInvalid(test_695_sup,test_695_sub); }

		private static final SyntacticType test_696_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_696_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_696() { testInvalid(test_696_sup,test_696_sub); }

		private static final SyntacticType test_697_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_697_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_697() { testInvalid(test_697_sup,test_697_sub); }

		private static final SyntacticType test_698_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_698_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_698() { testInvalid(test_698_sup,test_698_sub); }

		private static final SyntacticType test_699_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_699_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_699() { testInvalid(test_699_sup,test_699_sub); }

		private static final SyntacticType test_700_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_700_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_700() { testInvalid(test_700_sup,test_700_sub); }

		private static final SyntacticType test_701_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_701_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_701() { testInvalid(test_701_sup,test_701_sub); }

		private static final SyntacticType test_702_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_702_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_702() { testInvalid(test_702_sup,test_702_sub); }

		private static final SyntacticType test_703_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_703_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_703() { testInvalid(test_703_sup,test_703_sub); }

		private static final SyntacticType test_704_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_704_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_704() { testInvalid(test_704_sup,test_704_sub); }

		private static final SyntacticType test_705_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_705_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_705() { testInvalid(test_705_sup,test_705_sub); }

		private static final SyntacticType test_706_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_706_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_706() { testInvalid(test_706_sup,test_706_sub); }

		private static final SyntacticType test_707_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_707_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_707() { testInvalid(test_707_sup,test_707_sub); }

		private static final SyntacticType test_708_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_708_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_708() { testInvalid(test_708_sup,test_708_sub); }

		private static final SyntacticType test_709_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_709_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_709() { testInvalid(test_709_sup,test_709_sub); }

		private static final SyntacticType test_710_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_710_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_710() { testInvalid(test_710_sup,test_710_sub); }

		private static final SyntacticType test_711_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_711_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_711() { testInvalid(test_711_sup,test_711_sub); }

		private static final SyntacticType test_712_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_712_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_712() { testInvalid(test_712_sup,test_712_sub); }

		private static final SyntacticType test_713_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_713_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_713() { testInvalid(test_713_sup,test_713_sub); }

		private static final SyntacticType test_714_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_714_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_714() { testInvalid(test_714_sup,test_714_sub); }

		private static final SyntacticType test_715_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_715_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_715() { testInvalid(test_715_sup,test_715_sub); }

		private static final SyntacticType test_716_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_716_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_716() { testInvalid(test_716_sup,test_716_sub); }

		private static final SyntacticType test_717_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_717_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_717() { testInvalid(test_717_sup,test_717_sub); }

		private static final SyntacticType test_718_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_718_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_718() { testInvalid(test_718_sup,test_718_sub); }

		private static final SyntacticType test_719_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_719_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_719() { testInvalid(test_719_sup,test_719_sub); }

		private static final SyntacticType test_720_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_720_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_720() { testInvalid(test_720_sup,test_720_sub); }

		private static final SyntacticType test_721_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_721_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_721() { testInvalid(test_721_sup,test_721_sub); }

		private static final SyntacticType test_722_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_722_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_722() { testInvalid(test_722_sup,test_722_sub); }

		private static final SyntacticType test_723_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_723_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_723() { testInvalid(test_723_sup,test_723_sub); }

		private static final SyntacticType test_724_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_724_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_724() { testInvalid(test_724_sup,test_724_sub); }

		private static final SyntacticType test_725_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_725_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_725() { testInvalid(test_725_sup,test_725_sub); }

		private static final SyntacticType test_726_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_726_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_726() { testInvalid(test_726_sup,test_726_sub); }

		private static final SyntacticType test_727_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_727_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_727() { testInvalid(test_727_sup,test_727_sub); }

		private static final SyntacticType test_728_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_728_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_728() { testInvalid(test_728_sup,test_728_sub); }

		private static final SyntacticType test_729_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_729_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_729() { testInvalid(test_729_sup,test_729_sub); }

		private static final SyntacticType test_730_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_730_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_730() { testInvalid(test_730_sup,test_730_sub); }

		private static final SyntacticType test_731_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_731_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_731() { testInvalid(test_731_sup,test_731_sub); }

		private static final SyntacticType test_732_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_732_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_732() { testInvalid(test_732_sup,test_732_sub); }

		private static final SyntacticType test_733_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_733_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_733() { testInvalid(test_733_sup,test_733_sub); }

		private static final SyntacticType test_734_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_734_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_734() { testInvalid(test_734_sup,test_734_sub); }

		private static final SyntacticType test_735_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_735_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_735() { testInvalid(test_735_sup,test_735_sub); }

		private static final SyntacticType test_736_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_736_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_736() { testInvalid(test_736_sup,test_736_sub); }

		private static final SyntacticType test_737_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_737_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_737() { testInvalid(test_737_sup,test_737_sub); }

		private static final SyntacticType test_738_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_738_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_738() { testInvalid(test_738_sup,test_738_sub); }

		private static final SyntacticType test_739_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_739_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_739() { testInvalid(test_739_sup,test_739_sub); }

		private static final SyntacticType test_740_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_740_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_740() { testInvalid(test_740_sup,test_740_sub); }

		private static final SyntacticType test_741_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_741_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_741() { testInvalid(test_741_sup,test_741_sub); }

		private static final SyntacticType test_742_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_742_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_742() { testInvalid(test_742_sup,test_742_sub); }

		private static final SyntacticType test_743_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_743_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_743() { testInvalid(test_743_sup,test_743_sub); }

		private static final SyntacticType test_744_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_744_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_744() { testInvalid(test_744_sup,test_744_sub); }

		private static final SyntacticType test_745_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_745_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_745() { testInvalid(test_745_sup,test_745_sub); }

		private static final SyntacticType test_746_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_746_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_746() { testInvalid(test_746_sup,test_746_sub); }

		private static final SyntacticType test_747_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_747_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_747() { testInvalid(test_747_sup,test_747_sub); }

		private static final SyntacticType test_748_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_748_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_748() { testInvalid(test_748_sup,test_748_sub); }

		private static final SyntacticType test_749_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_749_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_749() { testInvalid(test_749_sup,test_749_sub); }

		private static final SyntacticType test_750_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_750_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_750() { testInvalid(test_750_sup,test_750_sub); }

		private static final SyntacticType test_751_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_751_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_751() { testInvalid(test_751_sup,test_751_sub); }

		private static final SyntacticType test_752_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_752_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_752() { testInvalid(test_752_sup,test_752_sub); }

		private static final SyntacticType test_753_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_753_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_753() { testInvalid(test_753_sup,test_753_sub); }

		private static final SyntacticType test_754_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_754_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_754() { testInvalid(test_754_sup,test_754_sub); }

		private static final SyntacticType test_755_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_755_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_755() { testInvalid(test_755_sup,test_755_sub); }

		private static final SyntacticType test_756_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_756_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_756() { testInvalid(test_756_sup,test_756_sub); }

		private static final SyntacticType test_757_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_757_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_757() { testInvalid(test_757_sup,test_757_sub); }

		private static final SyntacticType test_758_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_758_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_758() { testInvalid(test_758_sup,test_758_sub); }

		private static final SyntacticType test_759_sup = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		private static final SyntacticType test_759_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_759() { testInvalid(test_759_sup,test_759_sub); }

		private static final SyntacticType test_760_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_760_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_760() { testInvalid(test_760_sup,test_760_sub); }

		private static final SyntacticType test_761_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_761_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_761() { testInvalid(test_761_sup,test_761_sub); }

		private static final SyntacticType test_762_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_762_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_762() { testValid(test_762_sup,test_762_sub); }

		private static final SyntacticType test_763_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_763_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_763() { testValid(test_763_sup,test_763_sub); }

		private static final SyntacticType test_764_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_764_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_764() { testInvalid(test_764_sup,test_764_sub); }

		private static final SyntacticType test_765_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_765_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_765() { testInvalid(test_765_sup,test_765_sub); }

		private static final SyntacticType test_766_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_766_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_766() { testInvalid(test_766_sup,test_766_sub); }

		private static final SyntacticType test_767_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_767_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_767() { testInvalid(test_767_sup,test_767_sub); }

		private static final SyntacticType test_768_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_768_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_768() { testValid(test_768_sup,test_768_sub); }

		private static final SyntacticType test_769_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_769_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_769() { testValid(test_769_sup,test_769_sub); }

		private static final SyntacticType test_770_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_770_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_770() { testValid(test_770_sup,test_770_sub); }

		private static final SyntacticType test_771_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_771_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_771() { testInvalid(test_771_sup,test_771_sub); }

		private static final SyntacticType test_772_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_772_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_772() { testInvalid(test_772_sup,test_772_sub); }

		private static final SyntacticType test_773_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_773_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_773() { testInvalid(test_773_sup,test_773_sub); }

		private static final SyntacticType test_774_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_774_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_774() { testInvalid(test_774_sup,test_774_sub); }

		private static final SyntacticType test_775_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_775_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_775() { testInvalid(test_775_sup,test_775_sub); }

		private static final SyntacticType test_776_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_776_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_776() { testValid(test_776_sup,test_776_sub); }

		private static final SyntacticType test_777_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_777_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_777() { testInvalid(test_777_sup,test_777_sub); }

		private static final SyntacticType test_778_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_778_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_778() { testInvalid(test_778_sup,test_778_sub); }

		private static final SyntacticType test_779_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_779_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_779() { testInvalid(test_779_sup,test_779_sub); }

		private static final SyntacticType test_780_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_780_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_780() { testInvalid(test_780_sup,test_780_sub); }

		private static final SyntacticType test_781_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_781_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_781() { testInvalid(test_781_sup,test_781_sub); }

		private static final SyntacticType test_782_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_782_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_782() { testValid(test_782_sup,test_782_sub); }

		private static final SyntacticType test_783_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_783_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_783() { testValid(test_783_sup,test_783_sub); }

		private static final SyntacticType test_784_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_784_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_784() { testValid(test_784_sup,test_784_sub); }

		private static final SyntacticType test_785_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_785_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_785() { testInvalid(test_785_sup,test_785_sub); }

		private static final SyntacticType test_786_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_786_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_786() { testInvalid(test_786_sup,test_786_sub); }

		private static final SyntacticType test_787_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_787_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_787() { testValid(test_787_sup,test_787_sub); }

		private static final SyntacticType test_788_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_788_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_788() { testValid(test_788_sup,test_788_sub); }

		private static final SyntacticType test_789_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_789_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_789() { testValid(test_789_sup,test_789_sub); }

		private static final SyntacticType test_790_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_790_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_790() { testInvalid(test_790_sup,test_790_sub); }

		private static final SyntacticType test_791_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_791_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_791() { testInvalid(test_791_sup,test_791_sub); }

		private static final SyntacticType test_792_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_792_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_792() { testInvalid(test_792_sup,test_792_sub); }

		private static final SyntacticType test_793_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_793_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_793() { testInvalid(test_793_sup,test_793_sub); }

		private static final SyntacticType test_794_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_794_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_794() { testInvalid(test_794_sup,test_794_sub); }

		private static final SyntacticType test_795_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_795_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_795() { testInvalid(test_795_sup,test_795_sub); }

		private static final SyntacticType test_796_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_796_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_796() { testInvalid(test_796_sup,test_796_sub); }

		private static final SyntacticType test_797_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_797_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_797() { testValid(test_797_sup,test_797_sub); }

		private static final SyntacticType test_798_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_798_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_798() { testInvalid(test_798_sup,test_798_sub); }

		private static final SyntacticType test_799_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_799_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_799() { testValid(test_799_sup,test_799_sub); }

		private static final SyntacticType test_800_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_800_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_800() { testInvalid(test_800_sup,test_800_sub); }

		private static final SyntacticType test_801_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_801_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_801() { testValid(test_801_sup,test_801_sub); }

		private static final SyntacticType test_802_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_802_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_802() { testInvalid(test_802_sup,test_802_sub); }

		private static final SyntacticType test_803_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_803_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_803() { testInvalid(test_803_sup,test_803_sub); }

		private static final SyntacticType test_804_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_804_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_804() { testInvalid(test_804_sup,test_804_sub); }

		private static final SyntacticType test_805_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_805_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_805() { testInvalid(test_805_sup,test_805_sub); }

		private static final SyntacticType test_806_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_806_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_806() { testInvalid(test_806_sup,test_806_sub); }

		private static final SyntacticType test_807_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_807_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_807() { testInvalid(test_807_sup,test_807_sub); }

		private static final SyntacticType test_808_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_808_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_808() { testInvalid(test_808_sup,test_808_sub); }

		private static final SyntacticType test_809_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_809_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_809() { testInvalid(test_809_sup,test_809_sub); }

		private static final SyntacticType test_810_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_810_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_810() { testInvalid(test_810_sup,test_810_sub); }

		private static final SyntacticType test_811_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_811_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_811() { testInvalid(test_811_sup,test_811_sub); }

		private static final SyntacticType test_812_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_812_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_812() { testInvalid(test_812_sup,test_812_sub); }

		private static final SyntacticType test_813_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_813_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_813() { testInvalid(test_813_sup,test_813_sub); }

		private static final SyntacticType test_814_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_814_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_814() { testInvalid(test_814_sup,test_814_sub); }

		private static final SyntacticType test_815_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_815_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_815() { testInvalid(test_815_sup,test_815_sub); }

		private static final SyntacticType test_816_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_816_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_816() { testInvalid(test_816_sup,test_816_sub); }

		private static final SyntacticType test_817_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_817_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_817() { testInvalid(test_817_sup,test_817_sub); }

		private static final SyntacticType test_818_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_818_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_818() { testInvalid(test_818_sup,test_818_sub); }

		private static final SyntacticType test_819_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_819_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_819() { testInvalid(test_819_sup,test_819_sub); }

		private static final SyntacticType test_820_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_820_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_820() { testInvalid(test_820_sup,test_820_sub); }

		private static final SyntacticType test_821_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_821_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_821() { testInvalid(test_821_sup,test_821_sub); }

		private static final SyntacticType test_822_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_822_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_822() { testInvalid(test_822_sup,test_822_sub); }

		private static final SyntacticType test_823_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_823_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_823() { testInvalid(test_823_sup,test_823_sub); }

		private static final SyntacticType test_824_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_824_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_824() { testInvalid(test_824_sup,test_824_sub); }

		private static final SyntacticType test_825_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_825_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_825() { testInvalid(test_825_sup,test_825_sub); }

		private static final SyntacticType test_826_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_826_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_826() { testInvalid(test_826_sup,test_826_sub); }

		private static final SyntacticType test_827_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_827_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_827() { testInvalid(test_827_sup,test_827_sub); }

		private static final SyntacticType test_828_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_828_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_828() { testInvalid(test_828_sup,test_828_sub); }

		private static final SyntacticType test_829_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_829_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_829() { testInvalid(test_829_sup,test_829_sub); }

		private static final SyntacticType test_830_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_830_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_830() { testInvalid(test_830_sup,test_830_sub); }

		private static final SyntacticType test_831_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_831_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_831() { testInvalid(test_831_sup,test_831_sub); }

		private static final SyntacticType test_832_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_832_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_832() { testInvalid(test_832_sup,test_832_sub); }

		private static final SyntacticType test_833_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_833_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_833() { testInvalid(test_833_sup,test_833_sub); }

		private static final SyntacticType test_834_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_834_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_834() { testInvalid(test_834_sup,test_834_sub); }

		private static final SyntacticType test_835_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_835_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_835() { testInvalid(test_835_sup,test_835_sub); }

		private static final SyntacticType test_836_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_836_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_836() { testInvalid(test_836_sup,test_836_sub); }

		private static final SyntacticType test_837_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_837_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_837() { testInvalid(test_837_sup,test_837_sub); }

		private static final SyntacticType test_838_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_838_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_838() { testInvalid(test_838_sup,test_838_sub); }

		private static final SyntacticType test_839_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_839_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_839() { testInvalid(test_839_sup,test_839_sub); }

		private static final SyntacticType test_840_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_840_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_840() { testInvalid(test_840_sup,test_840_sub); }

		private static final SyntacticType test_841_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_841_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_841() { testInvalid(test_841_sup,test_841_sub); }

		private static final SyntacticType test_842_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_842_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_842() { testInvalid(test_842_sup,test_842_sub); }

		private static final SyntacticType test_843_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_843_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_843() { testInvalid(test_843_sup,test_843_sub); }

		private static final SyntacticType test_844_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_844_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_844() { testInvalid(test_844_sup,test_844_sub); }

		private static final SyntacticType test_845_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_845_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_845() { testInvalid(test_845_sup,test_845_sub); }

		private static final SyntacticType test_846_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_846_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_846() { testInvalid(test_846_sup,test_846_sub); }

		private static final SyntacticType test_847_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_847_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_847() { testInvalid(test_847_sup,test_847_sub); }

		private static final SyntacticType test_848_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_848_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_848() { testInvalid(test_848_sup,test_848_sub); }

		private static final SyntacticType test_849_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_849_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_849() { testInvalid(test_849_sup,test_849_sub); }

		private static final SyntacticType test_850_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_850_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_850() { testInvalid(test_850_sup,test_850_sub); }

		private static final SyntacticType test_851_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_851_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_851() { testInvalid(test_851_sup,test_851_sub); }

		private static final SyntacticType test_852_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_852_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_852() { testInvalid(test_852_sup,test_852_sub); }

		private static final SyntacticType test_853_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_853_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_853() { testInvalid(test_853_sup,test_853_sub); }

		private static final SyntacticType test_854_sup = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		private static final SyntacticType test_854_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_854() { testInvalid(test_854_sup,test_854_sub); }

		private static final SyntacticType test_855_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_855_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_855() { testInvalid(test_855_sup,test_855_sub); }

		private static final SyntacticType test_856_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_856_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_856() { testInvalid(test_856_sup,test_856_sub); }

		private static final SyntacticType test_857_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_857_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_857() { testInvalid(test_857_sup,test_857_sub); }

		private static final SyntacticType test_858_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_858_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_858() { testInvalid(test_858_sup,test_858_sub); }

		private static final SyntacticType test_859_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_859_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_859() { testInvalid(test_859_sup,test_859_sub); }

		private static final SyntacticType test_860_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_860_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_860() { testInvalid(test_860_sup,test_860_sub); }

		private static final SyntacticType test_861_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_861_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_861() { testInvalid(test_861_sup,test_861_sub); }

		private static final SyntacticType test_862_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_862_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_862() { testInvalid(test_862_sup,test_862_sub); }

		private static final SyntacticType test_863_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_863_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_863() { testInvalid(test_863_sup,test_863_sub); }

		private static final SyntacticType test_864_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_864_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_864() { testValid(test_864_sup,test_864_sub); }

		private static final SyntacticType test_865_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_865_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_865() { testInvalid(test_865_sup,test_865_sub); }

		private static final SyntacticType test_866_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_866_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_866() { testInvalid(test_866_sup,test_866_sub); }

		private static final SyntacticType test_867_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_867_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_867() { testInvalid(test_867_sup,test_867_sub); }

		private static final SyntacticType test_868_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_868_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_868() { testInvalid(test_868_sup,test_868_sub); }

		private static final SyntacticType test_869_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_869_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_869() { testInvalid(test_869_sup,test_869_sub); }

		private static final SyntacticType test_870_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_870_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_870() { testInvalid(test_870_sup,test_870_sub); }

		private static final SyntacticType test_871_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_871_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_871() { testInvalid(test_871_sup,test_871_sub); }

		private static final SyntacticType test_872_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_872_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_872() { testInvalid(test_872_sup,test_872_sub); }

		private static final SyntacticType test_873_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_873_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_873() { testInvalid(test_873_sup,test_873_sub); }

		private static final SyntacticType test_874_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_874_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_874() { testInvalid(test_874_sup,test_874_sub); }

		private static final SyntacticType test_875_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_875_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_875() { testInvalid(test_875_sup,test_875_sub); }

		private static final SyntacticType test_876_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_876_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_876() { testInvalid(test_876_sup,test_876_sub); }

		private static final SyntacticType test_877_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_877_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_877() { testInvalid(test_877_sup,test_877_sub); }

		private static final SyntacticType test_878_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_878_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_878() { testInvalid(test_878_sup,test_878_sub); }

		private static final SyntacticType test_879_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_879_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_879() { testInvalid(test_879_sup,test_879_sub); }

		private static final SyntacticType test_880_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_880_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_880() { testInvalid(test_880_sup,test_880_sub); }

		private static final SyntacticType test_881_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_881_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_881() { testInvalid(test_881_sup,test_881_sub); }

		private static final SyntacticType test_882_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_882_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_882() { testInvalid(test_882_sup,test_882_sub); }

		private static final SyntacticType test_883_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_883_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_883() { testInvalid(test_883_sup,test_883_sub); }

		private static final SyntacticType test_884_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_884_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_884() { testInvalid(test_884_sup,test_884_sub); }

		private static final SyntacticType test_885_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_885_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_885() { testInvalid(test_885_sup,test_885_sub); }

		private static final SyntacticType test_886_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_886_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_886() { testInvalid(test_886_sup,test_886_sub); }

		private static final SyntacticType test_887_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_887_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_887() { testInvalid(test_887_sup,test_887_sub); }

		private static final SyntacticType test_888_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_888_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_888() { testInvalid(test_888_sup,test_888_sub); }

		private static final SyntacticType test_889_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_889_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_889() { testInvalid(test_889_sup,test_889_sub); }

		private static final SyntacticType test_890_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_890_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_890() { testInvalid(test_890_sup,test_890_sub); }

		private static final SyntacticType test_891_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_891_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_891() { testInvalid(test_891_sup,test_891_sub); }

		private static final SyntacticType test_892_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_892_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_892() { testInvalid(test_892_sup,test_892_sub); }

		private static final SyntacticType test_893_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_893_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_893() { testInvalid(test_893_sup,test_893_sub); }

		private static final SyntacticType test_894_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_894_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_894() { testInvalid(test_894_sup,test_894_sub); }

		private static final SyntacticType test_895_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_895_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_895() { testInvalid(test_895_sup,test_895_sub); }

		private static final SyntacticType test_896_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_896_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_896() { testInvalid(test_896_sup,test_896_sub); }

		private static final SyntacticType test_897_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_897_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_897() { testInvalid(test_897_sup,test_897_sub); }

		private static final SyntacticType test_898_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_898_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_898() { testInvalid(test_898_sup,test_898_sub); }

		private static final SyntacticType test_899_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_899_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_899() { testInvalid(test_899_sup,test_899_sub); }

		private static final SyntacticType test_900_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_900_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_900() { testInvalid(test_900_sup,test_900_sub); }

		private static final SyntacticType test_901_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_901_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_901() { testInvalid(test_901_sup,test_901_sub); }

		private static final SyntacticType test_902_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_902_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_902() { testInvalid(test_902_sup,test_902_sub); }

		private static final SyntacticType test_903_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_903_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_903() { testInvalid(test_903_sup,test_903_sub); }

		private static final SyntacticType test_904_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_904_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_904() { testInvalid(test_904_sup,test_904_sub); }

		private static final SyntacticType test_905_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_905_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_905() { testInvalid(test_905_sup,test_905_sub); }

		private static final SyntacticType test_906_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_906_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_906() { testInvalid(test_906_sup,test_906_sub); }

		private static final SyntacticType test_907_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_907_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_907() { testInvalid(test_907_sup,test_907_sub); }

		private static final SyntacticType test_908_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_908_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_908() { testInvalid(test_908_sup,test_908_sub); }

		private static final SyntacticType test_909_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_909_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_909() { testInvalid(test_909_sup,test_909_sub); }

		private static final SyntacticType test_910_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_910_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_910() { testInvalid(test_910_sup,test_910_sub); }

		private static final SyntacticType test_911_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_911_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_911() { testInvalid(test_911_sup,test_911_sub); }

		private static final SyntacticType test_912_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_912_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_912() { testInvalid(test_912_sup,test_912_sub); }

		private static final SyntacticType test_913_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_913_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_913() { testInvalid(test_913_sup,test_913_sub); }

		private static final SyntacticType test_914_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_914_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_914() { testInvalid(test_914_sup,test_914_sub); }

		private static final SyntacticType test_915_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_915_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_915() { testInvalid(test_915_sup,test_915_sub); }

		private static final SyntacticType test_916_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_916_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_916() { testInvalid(test_916_sup,test_916_sub); }

		private static final SyntacticType test_917_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_917_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_917() { testInvalid(test_917_sup,test_917_sub); }

		private static final SyntacticType test_918_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_918_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_918() { testInvalid(test_918_sup,test_918_sub); }

		private static final SyntacticType test_919_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_919_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_919() { testInvalid(test_919_sup,test_919_sub); }

		private static final SyntacticType test_920_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_920_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_920() { testInvalid(test_920_sup,test_920_sub); }

		private static final SyntacticType test_921_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_921_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_921() { testInvalid(test_921_sup,test_921_sub); }

		private static final SyntacticType test_922_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_922_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_922() { testInvalid(test_922_sup,test_922_sub); }

		private static final SyntacticType test_923_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_923_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_923() { testInvalid(test_923_sup,test_923_sub); }

		private static final SyntacticType test_924_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_924_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_924() { testInvalid(test_924_sup,test_924_sub); }

		private static final SyntacticType test_925_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_925_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_925() { testInvalid(test_925_sup,test_925_sub); }

		private static final SyntacticType test_926_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_926_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_926() { testInvalid(test_926_sup,test_926_sub); }

		private static final SyntacticType test_927_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_927_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_927() { testInvalid(test_927_sup,test_927_sub); }

		private static final SyntacticType test_928_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_928_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_928() { testInvalid(test_928_sup,test_928_sub); }

		private static final SyntacticType test_929_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_929_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_929() { testInvalid(test_929_sup,test_929_sub); }

		private static final SyntacticType test_930_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_930_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_930() { testInvalid(test_930_sup,test_930_sub); }

		private static final SyntacticType test_931_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_931_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_931() { testInvalid(test_931_sup,test_931_sub); }

		private static final SyntacticType test_932_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_932_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_932() { testInvalid(test_932_sup,test_932_sub); }

		private static final SyntacticType test_933_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_933_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_933() { testInvalid(test_933_sup,test_933_sub); }

		private static final SyntacticType test_934_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_934_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_934() { testInvalid(test_934_sup,test_934_sub); }

		private static final SyntacticType test_935_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_935_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_935() { testInvalid(test_935_sup,test_935_sub); }

		private static final SyntacticType test_936_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_936_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_936() { testInvalid(test_936_sup,test_936_sub); }

		private static final SyntacticType test_937_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_937_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_937() { testInvalid(test_937_sup,test_937_sub); }

		private static final SyntacticType test_938_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_938_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_938() { testInvalid(test_938_sup,test_938_sub); }

		private static final SyntacticType test_939_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_939_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_939() { testInvalid(test_939_sup,test_939_sub); }

		private static final SyntacticType test_940_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_940_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_940() { testInvalid(test_940_sup,test_940_sub); }

		private static final SyntacticType test_941_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_941_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_941() { testInvalid(test_941_sup,test_941_sub); }

		private static final SyntacticType test_942_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_942_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_942() { testInvalid(test_942_sup,test_942_sub); }

		private static final SyntacticType test_943_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_943_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_943() { testInvalid(test_943_sup,test_943_sub); }

		private static final SyntacticType test_944_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_944_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_944() { testInvalid(test_944_sup,test_944_sub); }

		private static final SyntacticType test_945_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_945_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_945() { testInvalid(test_945_sup,test_945_sub); }

		private static final SyntacticType test_946_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_946_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_946() { testInvalid(test_946_sup,test_946_sub); }

		private static final SyntacticType test_947_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_947_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_947() { testInvalid(test_947_sup,test_947_sub); }

		private static final SyntacticType test_948_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_948_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_948() { testInvalid(test_948_sup,test_948_sub); }

		private static final SyntacticType test_949_sup = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		private static final SyntacticType test_949_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_949() { testInvalid(test_949_sup,test_949_sub); }

		private static final SyntacticType test_950_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_950_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_950() { testInvalid(test_950_sup,test_950_sub); }

		private static final SyntacticType test_951_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_951_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_951() { testInvalid(test_951_sup,test_951_sub); }

		private static final SyntacticType test_952_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_952_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_952() { testInvalid(test_952_sup,test_952_sub); }

		private static final SyntacticType test_953_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_953_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_953() { testInvalid(test_953_sup,test_953_sub); }

		private static final SyntacticType test_954_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_954_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_954() { testInvalid(test_954_sup,test_954_sub); }

		private static final SyntacticType test_955_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_955_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_955() { testInvalid(test_955_sup,test_955_sub); }

		private static final SyntacticType test_956_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_956_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_956() { testInvalid(test_956_sup,test_956_sub); }

		private static final SyntacticType test_957_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_957_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_957() { testInvalid(test_957_sup,test_957_sub); }

		private static final SyntacticType test_958_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_958_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_958() { testInvalid(test_958_sup,test_958_sub); }

		private static final SyntacticType test_959_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_959_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_959() { testValid(test_959_sup,test_959_sub); }

		private static final SyntacticType test_960_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_960_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_960() { testValid(test_960_sup,test_960_sub); }

		private static final SyntacticType test_961_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_961_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_961() { testInvalid(test_961_sup,test_961_sub); }

		private static final SyntacticType test_962_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_962_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_962() { testInvalid(test_962_sup,test_962_sub); }

		private static final SyntacticType test_963_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_963_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_963() { testInvalid(test_963_sup,test_963_sub); }

		private static final SyntacticType test_964_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_964_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_964() { testInvalid(test_964_sup,test_964_sub); }

		private static final SyntacticType test_965_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_965_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_965() { testInvalid(test_965_sup,test_965_sub); }

		private static final SyntacticType test_966_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_966_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_966() { testInvalid(test_966_sup,test_966_sub); }

		private static final SyntacticType test_967_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_967_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_967() { testInvalid(test_967_sup,test_967_sub); }

		private static final SyntacticType test_968_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_968_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_968() { testInvalid(test_968_sup,test_968_sub); }

		private static final SyntacticType test_969_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_969_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_969() { testInvalid(test_969_sup,test_969_sub); }

		private static final SyntacticType test_970_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_970_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_970() { testInvalid(test_970_sup,test_970_sub); }

		private static final SyntacticType test_971_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_971_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_971() { testInvalid(test_971_sup,test_971_sub); }

		private static final SyntacticType test_972_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_972_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_972() { testInvalid(test_972_sup,test_972_sub); }

		private static final SyntacticType test_973_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_973_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_973() { testInvalid(test_973_sup,test_973_sub); }

		private static final SyntacticType test_974_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_974_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_974() { testInvalid(test_974_sup,test_974_sub); }

		private static final SyntacticType test_975_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_975_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_975() { testInvalid(test_975_sup,test_975_sub); }

		private static final SyntacticType test_976_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_976_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_976() { testInvalid(test_976_sup,test_976_sub); }

		private static final SyntacticType test_977_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_977_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_977() { testValid(test_977_sup,test_977_sub); }

		private static final SyntacticType test_978_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_978_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_978() { testInvalid(test_978_sup,test_978_sub); }

		private static final SyntacticType test_979_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_979_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_979() { testInvalid(test_979_sup,test_979_sub); }

		private static final SyntacticType test_980_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_980_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_980() { testInvalid(test_980_sup,test_980_sub); }

		private static final SyntacticType test_981_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_981_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_981() { testInvalid(test_981_sup,test_981_sub); }

		private static final SyntacticType test_982_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_982_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_982() { testInvalid(test_982_sup,test_982_sub); }

		private static final SyntacticType test_983_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_983_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_983() { testInvalid(test_983_sup,test_983_sub); }

		private static final SyntacticType test_984_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_984_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_984() { testInvalid(test_984_sup,test_984_sub); }

		private static final SyntacticType test_985_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_985_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_985() { testInvalid(test_985_sup,test_985_sub); }

		private static final SyntacticType test_986_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_986_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_986() { testInvalid(test_986_sup,test_986_sub); }

		private static final SyntacticType test_987_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_987_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_987() { testInvalid(test_987_sup,test_987_sub); }

		private static final SyntacticType test_988_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_988_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_988() { testInvalid(test_988_sup,test_988_sub); }

		private static final SyntacticType test_989_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_989_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_989() { testInvalid(test_989_sup,test_989_sub); }

		private static final SyntacticType test_990_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_990_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_990() { testInvalid(test_990_sup,test_990_sub); }

		private static final SyntacticType test_991_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_991_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_991() { testInvalid(test_991_sup,test_991_sub); }

		private static final SyntacticType test_992_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_992_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_992() { testInvalid(test_992_sup,test_992_sub); }

		private static final SyntacticType test_993_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_993_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_993() { testInvalid(test_993_sup,test_993_sub); }

		private static final SyntacticType test_994_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_994_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_994() { testInvalid(test_994_sup,test_994_sub); }

		private static final SyntacticType test_995_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_995_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_995() { testInvalid(test_995_sup,test_995_sub); }

		private static final SyntacticType test_996_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_996_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_996() { testInvalid(test_996_sup,test_996_sub); }

		private static final SyntacticType test_997_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_997_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_997() { testInvalid(test_997_sup,test_997_sub); }

		private static final SyntacticType test_998_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_998_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_998() { testInvalid(test_998_sup,test_998_sub); }

		private static final SyntacticType test_999_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_999_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_999() { testInvalid(test_999_sup,test_999_sub); }

	}
	public static class Part_1 {
		private static final SyntacticType test_1000_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1000_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1000() { testInvalid(test_1000_sup,test_1000_sub); }

		private static final SyntacticType test_1001_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1001_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1001() { testInvalid(test_1001_sup,test_1001_sub); }

		private static final SyntacticType test_1002_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1002_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1002() { testInvalid(test_1002_sup,test_1002_sub); }

		private static final SyntacticType test_1003_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1003_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1003() { testInvalid(test_1003_sup,test_1003_sub); }

		private static final SyntacticType test_1004_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1004_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1004() { testInvalid(test_1004_sup,test_1004_sub); }

		private static final SyntacticType test_1005_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1005_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1005() { testInvalid(test_1005_sup,test_1005_sub); }

		private static final SyntacticType test_1006_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1006_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1006() { testInvalid(test_1006_sup,test_1006_sub); }

		private static final SyntacticType test_1007_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1007_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1007() { testInvalid(test_1007_sup,test_1007_sub); }

		private static final SyntacticType test_1008_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1008_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1008() { testInvalid(test_1008_sup,test_1008_sub); }

		private static final SyntacticType test_1009_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1009_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1009() { testInvalid(test_1009_sup,test_1009_sub); }

		private static final SyntacticType test_1010_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1010_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1010() { testInvalid(test_1010_sup,test_1010_sub); }

		private static final SyntacticType test_1011_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1011_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1011() { testInvalid(test_1011_sup,test_1011_sub); }

		private static final SyntacticType test_1012_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1012_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1012() { testInvalid(test_1012_sup,test_1012_sub); }

		private static final SyntacticType test_1013_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1013_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1013() { testInvalid(test_1013_sup,test_1013_sub); }

		private static final SyntacticType test_1014_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1014_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1014() { testInvalid(test_1014_sup,test_1014_sub); }

		private static final SyntacticType test_1015_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1015_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1015() { testInvalid(test_1015_sup,test_1015_sub); }

		private static final SyntacticType test_1016_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1016_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1016() { testInvalid(test_1016_sup,test_1016_sub); }

		private static final SyntacticType test_1017_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1017_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1017() { testInvalid(test_1017_sup,test_1017_sub); }

		private static final SyntacticType test_1018_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1018_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1018() { testInvalid(test_1018_sup,test_1018_sub); }

		private static final SyntacticType test_1019_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1019_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1019() { testInvalid(test_1019_sup,test_1019_sub); }

		private static final SyntacticType test_1020_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1020_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1020() { testInvalid(test_1020_sup,test_1020_sub); }

		private static final SyntacticType test_1021_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1021_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1021() { testInvalid(test_1021_sup,test_1021_sub); }

		private static final SyntacticType test_1022_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1022_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1022() { testInvalid(test_1022_sup,test_1022_sub); }

		private static final SyntacticType test_1023_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1023_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1023() { testInvalid(test_1023_sup,test_1023_sub); }

		private static final SyntacticType test_1024_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1024_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1024() { testInvalid(test_1024_sup,test_1024_sub); }

		private static final SyntacticType test_1025_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1025_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1025() { testInvalid(test_1025_sup,test_1025_sub); }

		private static final SyntacticType test_1026_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1026_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1026() { testInvalid(test_1026_sup,test_1026_sub); }

		private static final SyntacticType test_1027_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1027_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1027() { testInvalid(test_1027_sup,test_1027_sub); }

		private static final SyntacticType test_1028_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1028_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1028() { testInvalid(test_1028_sup,test_1028_sub); }

		private static final SyntacticType test_1029_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1029_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1029() { testInvalid(test_1029_sup,test_1029_sub); }

		private static final SyntacticType test_1030_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1030_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1030() { testInvalid(test_1030_sup,test_1030_sub); }

		private static final SyntacticType test_1031_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1031_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1031() { testInvalid(test_1031_sup,test_1031_sub); }

		private static final SyntacticType test_1032_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1032_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1032() { testInvalid(test_1032_sup,test_1032_sub); }

		private static final SyntacticType test_1033_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1033_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1033() { testInvalid(test_1033_sup,test_1033_sub); }

		private static final SyntacticType test_1034_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1034_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1034() { testInvalid(test_1034_sup,test_1034_sub); }

		private static final SyntacticType test_1035_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1035_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1035() { testInvalid(test_1035_sup,test_1035_sub); }

		private static final SyntacticType test_1036_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1036_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1036() { testInvalid(test_1036_sup,test_1036_sub); }

		private static final SyntacticType test_1037_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1037_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1037() { testInvalid(test_1037_sup,test_1037_sub); }

		private static final SyntacticType test_1038_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1038_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1038() { testInvalid(test_1038_sup,test_1038_sub); }

		private static final SyntacticType test_1039_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1039_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1039() { testInvalid(test_1039_sup,test_1039_sub); }

		private static final SyntacticType test_1040_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1040_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1040() { testInvalid(test_1040_sup,test_1040_sub); }

		private static final SyntacticType test_1041_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1041_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1041() { testInvalid(test_1041_sup,test_1041_sub); }

		private static final SyntacticType test_1042_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1042_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1042() { testInvalid(test_1042_sup,test_1042_sub); }

		private static final SyntacticType test_1043_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1043_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1043() { testInvalid(test_1043_sup,test_1043_sub); }

		private static final SyntacticType test_1044_sup = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		private static final SyntacticType test_1044_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1044() { testInvalid(test_1044_sup,test_1044_sub); }

		private static final SyntacticType test_1045_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1045_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1045() { testInvalid(test_1045_sup,test_1045_sub); }

		private static final SyntacticType test_1046_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1046_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1046() { testInvalid(test_1046_sup,test_1046_sub); }

		private static final SyntacticType test_1047_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1047_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1047() { testValid(test_1047_sup,test_1047_sub); }

		private static final SyntacticType test_1048_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1048_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1048() { testValid(test_1048_sup,test_1048_sub); }

		private static final SyntacticType test_1049_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1049_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1049() { testInvalid(test_1049_sup,test_1049_sub); }

		private static final SyntacticType test_1050_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1050_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1050() { testInvalid(test_1050_sup,test_1050_sub); }

		private static final SyntacticType test_1051_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1051_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1051() { testInvalid(test_1051_sup,test_1051_sub); }

		private static final SyntacticType test_1052_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1052_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1052() { testInvalid(test_1052_sup,test_1052_sub); }

		private static final SyntacticType test_1053_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1053_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1053() { testInvalid(test_1053_sup,test_1053_sub); }

		private static final SyntacticType test_1054_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1054_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1054() { testValid(test_1054_sup,test_1054_sub); }

		private static final SyntacticType test_1055_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1055_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1055() { testValid(test_1055_sup,test_1055_sub); }

		private static final SyntacticType test_1056_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1056_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1056() { testValid(test_1056_sup,test_1056_sub); }

		private static final SyntacticType test_1057_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1057_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1057() { testInvalid(test_1057_sup,test_1057_sub); }

		private static final SyntacticType test_1058_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1058_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1058() { testValid(test_1058_sup,test_1058_sub); }

		private static final SyntacticType test_1059_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1059_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1059() { testInvalid(test_1059_sup,test_1059_sub); }

		private static final SyntacticType test_1060_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1060_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1060() { testInvalid(test_1060_sup,test_1060_sub); }

		private static final SyntacticType test_1061_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1061_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1061() { testValid(test_1061_sup,test_1061_sub); }

		private static final SyntacticType test_1062_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1062_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1062() { testInvalid(test_1062_sup,test_1062_sub); }

		private static final SyntacticType test_1063_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1063_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1063() { testInvalid(test_1063_sup,test_1063_sub); }

		private static final SyntacticType test_1064_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1064_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1064() { testInvalid(test_1064_sup,test_1064_sub); }

		private static final SyntacticType test_1065_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1065_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1065() { testInvalid(test_1065_sup,test_1065_sub); }

		private static final SyntacticType test_1066_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1066_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1066() { testInvalid(test_1066_sup,test_1066_sub); }

		private static final SyntacticType test_1067_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1067_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1067() { testValid(test_1067_sup,test_1067_sub); }

		private static final SyntacticType test_1068_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1068_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1068() { testValid(test_1068_sup,test_1068_sub); }

		private static final SyntacticType test_1069_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1069_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1069() { testValid(test_1069_sup,test_1069_sub); }

		private static final SyntacticType test_1070_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1070_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1070() { testInvalid(test_1070_sup,test_1070_sub); }

		private static final SyntacticType test_1071_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1071_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1071() { testInvalid(test_1071_sup,test_1071_sub); }

		private static final SyntacticType test_1072_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1072_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1072() { testValid(test_1072_sup,test_1072_sub); }

		private static final SyntacticType test_1073_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1073_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1073() { testValid(test_1073_sup,test_1073_sub); }

		private static final SyntacticType test_1074_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1074_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1074() { testInvalid(test_1074_sup,test_1074_sub); }

		private static final SyntacticType test_1075_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1075_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1075() { testInvalid(test_1075_sup,test_1075_sub); }

		private static final SyntacticType test_1076_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1076_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1076() { testValid(test_1076_sup,test_1076_sub); }

		private static final SyntacticType test_1077_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1077_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1077() { testInvalid(test_1077_sup,test_1077_sub); }

		private static final SyntacticType test_1078_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1078_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1078() { testInvalid(test_1078_sup,test_1078_sub); }

		private static final SyntacticType test_1079_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1079_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1079() { testValid(test_1079_sup,test_1079_sub); }

		private static final SyntacticType test_1080_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1080_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1080() { testInvalid(test_1080_sup,test_1080_sub); }

		private static final SyntacticType test_1081_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1081_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1081() { testValid(test_1081_sup,test_1081_sub); }

		private static final SyntacticType test_1082_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1082_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1082() { testValid(test_1082_sup,test_1082_sub); }

		private static final SyntacticType test_1083_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1083_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1083() { testValid(test_1083_sup,test_1083_sub); }

		private static final SyntacticType test_1084_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1084_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1084() { testValid(test_1084_sup,test_1084_sub); }

		private static final SyntacticType test_1085_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1085_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1085() { testInvalid(test_1085_sup,test_1085_sub); }

		private static final SyntacticType test_1086_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1086_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1086() { testValid(test_1086_sup,test_1086_sub); }

		private static final SyntacticType test_1087_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1087_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1087() { testInvalid(test_1087_sup,test_1087_sub); }

		private static final SyntacticType test_1088_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1088_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1088() { testInvalid(test_1088_sup,test_1088_sub); }

		private static final SyntacticType test_1089_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1089_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1089() { testInvalid(test_1089_sup,test_1089_sub); }

		private static final SyntacticType test_1090_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1090_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1090() { testInvalid(test_1090_sup,test_1090_sub); }

		private static final SyntacticType test_1091_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1091_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1091() { testInvalid(test_1091_sup,test_1091_sub); }

		private static final SyntacticType test_1092_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1092_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1092() { testValid(test_1092_sup,test_1092_sub); }

		private static final SyntacticType test_1093_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1093_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1093() { testInvalid(test_1093_sup,test_1093_sub); }

		private static final SyntacticType test_1094_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1094_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1094() { testInvalid(test_1094_sup,test_1094_sub); }

		private static final SyntacticType test_1095_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1095_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1095() { testInvalid(test_1095_sup,test_1095_sub); }

		private static final SyntacticType test_1096_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1096_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1096() { testInvalid(test_1096_sup,test_1096_sub); }

		private static final SyntacticType test_1097_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1097_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1097() { testInvalid(test_1097_sup,test_1097_sub); }

		private static final SyntacticType test_1098_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1098_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1098() { testInvalid(test_1098_sup,test_1098_sub); }

		private static final SyntacticType test_1099_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1099_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1099() { testInvalid(test_1099_sup,test_1099_sub); }

		private static final SyntacticType test_1100_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1100_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1100() { testInvalid(test_1100_sup,test_1100_sub); }

		private static final SyntacticType test_1101_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1101_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1101() { testInvalid(test_1101_sup,test_1101_sub); }

		private static final SyntacticType test_1102_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1102_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1102() { testInvalid(test_1102_sup,test_1102_sub); }

		private static final SyntacticType test_1103_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1103_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1103() { testInvalid(test_1103_sup,test_1103_sub); }

		private static final SyntacticType test_1104_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1104_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1104() { testInvalid(test_1104_sup,test_1104_sub); }

		private static final SyntacticType test_1105_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1105_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1105() { testInvalid(test_1105_sup,test_1105_sub); }

		private static final SyntacticType test_1106_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1106_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1106() { testInvalid(test_1106_sup,test_1106_sub); }

		private static final SyntacticType test_1107_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1107_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1107() { testInvalid(test_1107_sup,test_1107_sub); }

		private static final SyntacticType test_1108_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1108_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1108() { testInvalid(test_1108_sup,test_1108_sub); }

		private static final SyntacticType test_1109_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1109_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1109() { testInvalid(test_1109_sup,test_1109_sub); }

		private static final SyntacticType test_1110_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1110_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1110() { testInvalid(test_1110_sup,test_1110_sub); }

		private static final SyntacticType test_1111_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1111_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1111() { testInvalid(test_1111_sup,test_1111_sub); }

		private static final SyntacticType test_1112_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1112_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1112() { testInvalid(test_1112_sup,test_1112_sub); }

		private static final SyntacticType test_1113_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1113_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1113() { testInvalid(test_1113_sup,test_1113_sub); }

		private static final SyntacticType test_1114_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1114_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1114() { testInvalid(test_1114_sup,test_1114_sub); }

		private static final SyntacticType test_1115_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1115_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1115() { testInvalid(test_1115_sup,test_1115_sub); }

		private static final SyntacticType test_1116_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1116_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1116() { testInvalid(test_1116_sup,test_1116_sub); }

		private static final SyntacticType test_1117_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1117_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1117() { testInvalid(test_1117_sup,test_1117_sub); }

		private static final SyntacticType test_1118_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1118_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1118() { testInvalid(test_1118_sup,test_1118_sub); }

		private static final SyntacticType test_1119_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1119_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1119() { testInvalid(test_1119_sup,test_1119_sub); }

		private static final SyntacticType test_1120_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1120_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1120() { testInvalid(test_1120_sup,test_1120_sub); }

		private static final SyntacticType test_1121_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1121_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1121() { testInvalid(test_1121_sup,test_1121_sub); }

		private static final SyntacticType test_1122_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1122_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1122() { testInvalid(test_1122_sup,test_1122_sub); }

		private static final SyntacticType test_1123_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1123_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1123() { testInvalid(test_1123_sup,test_1123_sub); }

		private static final SyntacticType test_1124_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1124_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1124() { testInvalid(test_1124_sup,test_1124_sub); }

		private static final SyntacticType test_1125_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1125_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1125() { testInvalid(test_1125_sup,test_1125_sub); }

		private static final SyntacticType test_1126_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1126_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1126() { testInvalid(test_1126_sup,test_1126_sub); }

		private static final SyntacticType test_1127_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1127_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1127() { testInvalid(test_1127_sup,test_1127_sub); }

		private static final SyntacticType test_1128_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1128_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1128() { testInvalid(test_1128_sup,test_1128_sub); }

		private static final SyntacticType test_1129_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1129_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1129() { testInvalid(test_1129_sup,test_1129_sub); }

		private static final SyntacticType test_1130_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1130_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1130() { testInvalid(test_1130_sup,test_1130_sub); }

		private static final SyntacticType test_1131_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1131_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1131() { testInvalid(test_1131_sup,test_1131_sub); }

		private static final SyntacticType test_1132_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1132_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1132() { testInvalid(test_1132_sup,test_1132_sub); }

		private static final SyntacticType test_1133_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1133_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1133() { testInvalid(test_1133_sup,test_1133_sub); }

		private static final SyntacticType test_1134_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1134_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1134() { testInvalid(test_1134_sup,test_1134_sub); }

		private static final SyntacticType test_1135_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1135_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1135() { testInvalid(test_1135_sup,test_1135_sub); }

		private static final SyntacticType test_1136_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1136_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1136() { testInvalid(test_1136_sup,test_1136_sub); }

		private static final SyntacticType test_1137_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1137_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1137() { testInvalid(test_1137_sup,test_1137_sub); }

		private static final SyntacticType test_1138_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1138_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1138() { testInvalid(test_1138_sup,test_1138_sub); }

		private static final SyntacticType test_1139_sup = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		private static final SyntacticType test_1139_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1139() { testInvalid(test_1139_sup,test_1139_sub); }

		private static final SyntacticType test_1140_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1140_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1140() { testValid(test_1140_sup,test_1140_sub); }

		private static final SyntacticType test_1141_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1141_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1141() { testValid(test_1141_sup,test_1141_sub); }

		private static final SyntacticType test_1142_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1142_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1142() { testValid(test_1142_sup,test_1142_sub); }

		private static final SyntacticType test_1143_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1143_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1143() { testValid(test_1143_sup,test_1143_sub); }

		private static final SyntacticType test_1144_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1144_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1144() { testValid(test_1144_sup,test_1144_sub); }

		private static final SyntacticType test_1145_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1145_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1145() { testValid(test_1145_sup,test_1145_sub); }

		private static final SyntacticType test_1146_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1146_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1146() { testValid(test_1146_sup,test_1146_sub); }

		private static final SyntacticType test_1147_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1147_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1147() { testValid(test_1147_sup,test_1147_sub); }

		private static final SyntacticType test_1148_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1148_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1148() { testValid(test_1148_sup,test_1148_sub); }

		private static final SyntacticType test_1149_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1149_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1149() { testValid(test_1149_sup,test_1149_sub); }

		private static final SyntacticType test_1150_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1150_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1150() { testValid(test_1150_sup,test_1150_sub); }

		private static final SyntacticType test_1151_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1151_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1151() { testValid(test_1151_sup,test_1151_sub); }

		private static final SyntacticType test_1152_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1152_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1152() { testValid(test_1152_sup,test_1152_sub); }

		private static final SyntacticType test_1153_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1153_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1153() { testValid(test_1153_sup,test_1153_sub); }

		private static final SyntacticType test_1154_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1154_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1154() { testValid(test_1154_sup,test_1154_sub); }

		private static final SyntacticType test_1155_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1155_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1155() { testValid(test_1155_sup,test_1155_sub); }

		private static final SyntacticType test_1156_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1156_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1156() { testValid(test_1156_sup,test_1156_sub); }

		private static final SyntacticType test_1157_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1157_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1157() { testValid(test_1157_sup,test_1157_sub); }

		private static final SyntacticType test_1158_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1158_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1158() { testValid(test_1158_sup,test_1158_sub); }

		private static final SyntacticType test_1159_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1159_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1159() { testValid(test_1159_sup,test_1159_sub); }

		private static final SyntacticType test_1160_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1160_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1160() { testValid(test_1160_sup,test_1160_sub); }

		private static final SyntacticType test_1161_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1161_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1161() { testValid(test_1161_sup,test_1161_sub); }

		private static final SyntacticType test_1162_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1162_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1162() { testValid(test_1162_sup,test_1162_sub); }

		private static final SyntacticType test_1163_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1163_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1163() { testValid(test_1163_sup,test_1163_sub); }

		private static final SyntacticType test_1164_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1164_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1164() { testValid(test_1164_sup,test_1164_sub); }

		private static final SyntacticType test_1165_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1165_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1165() { testValid(test_1165_sup,test_1165_sub); }

		private static final SyntacticType test_1166_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1166_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1166() { testValid(test_1166_sup,test_1166_sub); }

		private static final SyntacticType test_1167_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1167_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1167() { testValid(test_1167_sup,test_1167_sub); }

		private static final SyntacticType test_1168_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1168_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1168() { testValid(test_1168_sup,test_1168_sub); }

		private static final SyntacticType test_1169_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1169_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1169() { testValid(test_1169_sup,test_1169_sub); }

		private static final SyntacticType test_1170_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1170_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1170() { testValid(test_1170_sup,test_1170_sub); }

		private static final SyntacticType test_1171_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1171_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1171() { testValid(test_1171_sup,test_1171_sub); }

		private static final SyntacticType test_1172_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1172_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1172() { testValid(test_1172_sup,test_1172_sub); }

		private static final SyntacticType test_1173_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1173_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1173() { testValid(test_1173_sup,test_1173_sub); }

		private static final SyntacticType test_1174_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1174_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1174() { testValid(test_1174_sup,test_1174_sub); }

		private static final SyntacticType test_1175_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1175_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1175() { testValid(test_1175_sup,test_1175_sub); }

		private static final SyntacticType test_1176_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1176_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1176() { testValid(test_1176_sup,test_1176_sub); }

		private static final SyntacticType test_1177_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1177_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1177() { testValid(test_1177_sup,test_1177_sub); }

		private static final SyntacticType test_1178_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1178_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1178() { testValid(test_1178_sup,test_1178_sub); }

		private static final SyntacticType test_1179_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1179_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1179() { testValid(test_1179_sup,test_1179_sub); }

		private static final SyntacticType test_1180_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1180_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1180() { testValid(test_1180_sup,test_1180_sub); }

		private static final SyntacticType test_1181_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1181_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1181() { testValid(test_1181_sup,test_1181_sub); }

		private static final SyntacticType test_1182_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1182_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1182() { testValid(test_1182_sup,test_1182_sub); }

		private static final SyntacticType test_1183_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1183_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1183() { testValid(test_1183_sup,test_1183_sub); }

		private static final SyntacticType test_1184_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1184_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1184() { testInvalid(test_1184_sup,test_1184_sub); }

		private static final SyntacticType test_1185_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1185_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1185() { testValid(test_1185_sup,test_1185_sub); }

		private static final SyntacticType test_1186_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1186_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1186() { testInvalid(test_1186_sup,test_1186_sub); }

		private static final SyntacticType test_1187_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1187_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1187() { testValid(test_1187_sup,test_1187_sub); }

		private static final SyntacticType test_1188_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1188_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1188() { testInvalid(test_1188_sup,test_1188_sub); }

		private static final SyntacticType test_1189_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1189_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1189() { testValid(test_1189_sup,test_1189_sub); }

		private static final SyntacticType test_1190_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1190_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1190() { testInvalid(test_1190_sup,test_1190_sub); }

		private static final SyntacticType test_1191_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1191_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1191() { testValid(test_1191_sup,test_1191_sub); }

		private static final SyntacticType test_1192_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1192_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1192() { testValid(test_1192_sup,test_1192_sub); }

		private static final SyntacticType test_1193_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1193_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1193() { testValid(test_1193_sup,test_1193_sub); }

		private static final SyntacticType test_1194_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1194_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1194() { testInvalid(test_1194_sup,test_1194_sub); }

		private static final SyntacticType test_1195_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1195_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1195() { testInvalid(test_1195_sup,test_1195_sub); }

		private static final SyntacticType test_1196_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1196_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1196() { testValid(test_1196_sup,test_1196_sub); }

		private static final SyntacticType test_1197_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1197_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1197() { testInvalid(test_1197_sup,test_1197_sub); }

		private static final SyntacticType test_1198_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1198_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1198() { testInvalid(test_1198_sup,test_1198_sub); }

		private static final SyntacticType test_1199_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1199_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1199() { testInvalid(test_1199_sup,test_1199_sub); }

		private static final SyntacticType test_1200_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1200_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1200() { testInvalid(test_1200_sup,test_1200_sub); }

		private static final SyntacticType test_1201_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1201_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1201() { testInvalid(test_1201_sup,test_1201_sub); }

		private static final SyntacticType test_1202_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1202_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1202() { testInvalid(test_1202_sup,test_1202_sub); }

		private static final SyntacticType test_1203_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1203_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1203() { testInvalid(test_1203_sup,test_1203_sub); }

		private static final SyntacticType test_1204_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1204_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1204() { testInvalid(test_1204_sup,test_1204_sub); }

		private static final SyntacticType test_1205_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1205_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1205() { testInvalid(test_1205_sup,test_1205_sub); }

		private static final SyntacticType test_1206_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1206_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1206() { testInvalid(test_1206_sup,test_1206_sub); }

		private static final SyntacticType test_1207_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1207_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1207() { testInvalid(test_1207_sup,test_1207_sub); }

		private static final SyntacticType test_1208_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1208_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1208() { testValid(test_1208_sup,test_1208_sub); }

		private static final SyntacticType test_1209_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1209_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1209() { testInvalid(test_1209_sup,test_1209_sub); }

		private static final SyntacticType test_1210_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1210_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1210() { testInvalid(test_1210_sup,test_1210_sub); }

		private static final SyntacticType test_1211_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1211_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1211() { testInvalid(test_1211_sup,test_1211_sub); }

		private static final SyntacticType test_1212_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1212_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1212() { testInvalid(test_1212_sup,test_1212_sub); }

		private static final SyntacticType test_1213_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1213_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1213() { testInvalid(test_1213_sup,test_1213_sub); }

		private static final SyntacticType test_1214_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1214_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1214() { testValid(test_1214_sup,test_1214_sub); }

		private static final SyntacticType test_1215_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1215_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1215() { testInvalid(test_1215_sup,test_1215_sub); }

		private static final SyntacticType test_1216_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1216_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1216() { testInvalid(test_1216_sup,test_1216_sub); }

		private static final SyntacticType test_1217_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1217_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1217() { testInvalid(test_1217_sup,test_1217_sub); }

		private static final SyntacticType test_1218_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1218_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1218() { testInvalid(test_1218_sup,test_1218_sub); }

		private static final SyntacticType test_1219_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1219_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1219() { testInvalid(test_1219_sup,test_1219_sub); }

		private static final SyntacticType test_1220_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1220_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1220() { testValid(test_1220_sup,test_1220_sub); }

		private static final SyntacticType test_1221_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1221_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1221() { testValid(test_1221_sup,test_1221_sub); }

		private static final SyntacticType test_1222_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1222_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1222() { testValid(test_1222_sup,test_1222_sub); }

		private static final SyntacticType test_1223_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1223_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1223() { testValid(test_1223_sup,test_1223_sub); }

		private static final SyntacticType test_1224_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1224_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1224() { testValid(test_1224_sup,test_1224_sub); }

		private static final SyntacticType test_1225_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1225_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1225() { testInvalid(test_1225_sup,test_1225_sub); }

		private static final SyntacticType test_1226_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1226_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1226() { testValid(test_1226_sup,test_1226_sub); }

		private static final SyntacticType test_1227_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1227_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1227() { testValid(test_1227_sup,test_1227_sub); }

		private static final SyntacticType test_1228_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1228_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1228() { testInvalid(test_1228_sup,test_1228_sub); }

		private static final SyntacticType test_1229_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1229_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1229() { testInvalid(test_1229_sup,test_1229_sub); }

		private static final SyntacticType test_1230_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1230_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1230() { testInvalid(test_1230_sup,test_1230_sub); }

		private static final SyntacticType test_1231_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1231_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1231() { testInvalid(test_1231_sup,test_1231_sub); }

		private static final SyntacticType test_1232_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1232_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1232() { testInvalid(test_1232_sup,test_1232_sub); }

		private static final SyntacticType test_1233_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1233_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1233() { testInvalid(test_1233_sup,test_1233_sub); }

		private static final SyntacticType test_1234_sup = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		private static final SyntacticType test_1234_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1234() { testInvalid(test_1234_sup,test_1234_sub); }

		private static final SyntacticType test_1235_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1235_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1235() { testInvalid(test_1235_sup,test_1235_sub); }

		private static final SyntacticType test_1236_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1236_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1236() { testInvalid(test_1236_sup,test_1236_sub); }

		private static final SyntacticType test_1237_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1237_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1237() { testInvalid(test_1237_sup,test_1237_sub); }

		private static final SyntacticType test_1238_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1238_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1238() { testInvalid(test_1238_sup,test_1238_sub); }

		private static final SyntacticType test_1239_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1239_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1239() { testInvalid(test_1239_sup,test_1239_sub); }

		private static final SyntacticType test_1240_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1240_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1240() { testInvalid(test_1240_sup,test_1240_sub); }

		private static final SyntacticType test_1241_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1241_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1241() { testInvalid(test_1241_sup,test_1241_sub); }

		private static final SyntacticType test_1242_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1242_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1242() { testInvalid(test_1242_sup,test_1242_sub); }

		private static final SyntacticType test_1243_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1243_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1243() { testInvalid(test_1243_sup,test_1243_sub); }

		private static final SyntacticType test_1244_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1244_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1244() { testValid(test_1244_sup,test_1244_sub); }

		private static final SyntacticType test_1245_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1245_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1245() { testValid(test_1245_sup,test_1245_sub); }

		private static final SyntacticType test_1246_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1246_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1246() { testInvalid(test_1246_sup,test_1246_sub); }

		private static final SyntacticType test_1247_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1247_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1247() { testInvalid(test_1247_sup,test_1247_sub); }

		private static final SyntacticType test_1248_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1248_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1248() { testValid(test_1248_sup,test_1248_sub); }

		private static final SyntacticType test_1249_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1249_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1249() { testInvalid(test_1249_sup,test_1249_sub); }

		private static final SyntacticType test_1250_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1250_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1250() { testInvalid(test_1250_sup,test_1250_sub); }

		private static final SyntacticType test_1251_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1251_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1251() { testValid(test_1251_sup,test_1251_sub); }

		private static final SyntacticType test_1252_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1252_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1252() { testInvalid(test_1252_sup,test_1252_sub); }

		private static final SyntacticType test_1253_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1253_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1253() { testInvalid(test_1253_sup,test_1253_sub); }

		private static final SyntacticType test_1254_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1254_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1254() { testInvalid(test_1254_sup,test_1254_sub); }

		private static final SyntacticType test_1255_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1255_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1255() { testInvalid(test_1255_sup,test_1255_sub); }

		private static final SyntacticType test_1256_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1256_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1256() { testInvalid(test_1256_sup,test_1256_sub); }

		private static final SyntacticType test_1257_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1257_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1257() { testValid(test_1257_sup,test_1257_sub); }

		private static final SyntacticType test_1258_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1258_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1258() { testValid(test_1258_sup,test_1258_sub); }

		private static final SyntacticType test_1259_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1259_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1259() { testInvalid(test_1259_sup,test_1259_sub); }

		private static final SyntacticType test_1260_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1260_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1260() { testInvalid(test_1260_sup,test_1260_sub); }

		private static final SyntacticType test_1261_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1261_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1261() { testInvalid(test_1261_sup,test_1261_sub); }

		private static final SyntacticType test_1262_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1262_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1262() { testValid(test_1262_sup,test_1262_sub); }

		private static final SyntacticType test_1263_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1263_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1263() { testInvalid(test_1263_sup,test_1263_sub); }

		private static final SyntacticType test_1264_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1264_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1264() { testInvalid(test_1264_sup,test_1264_sub); }

		private static final SyntacticType test_1265_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1265_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1265() { testInvalid(test_1265_sup,test_1265_sub); }

		private static final SyntacticType test_1266_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1266_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1266() { testInvalid(test_1266_sup,test_1266_sub); }

		private static final SyntacticType test_1267_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1267_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1267() { testInvalid(test_1267_sup,test_1267_sub); }

		private static final SyntacticType test_1268_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1268_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1268() { testInvalid(test_1268_sup,test_1268_sub); }

		private static final SyntacticType test_1269_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1269_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1269() { testInvalid(test_1269_sup,test_1269_sub); }

		private static final SyntacticType test_1270_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1270_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1270() { testInvalid(test_1270_sup,test_1270_sub); }

		private static final SyntacticType test_1271_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1271_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1271() { testInvalid(test_1271_sup,test_1271_sub); }

		private static final SyntacticType test_1272_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1272_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1272() { testValid(test_1272_sup,test_1272_sub); }

		private static final SyntacticType test_1273_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1273_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1273() { testValid(test_1273_sup,test_1273_sub); }

		private static final SyntacticType test_1274_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1274_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1274() { testInvalid(test_1274_sup,test_1274_sub); }

		private static final SyntacticType test_1275_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1275_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1275() { testInvalid(test_1275_sup,test_1275_sub); }

		private static final SyntacticType test_1276_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1276_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1276() { testValid(test_1276_sup,test_1276_sub); }

		private static final SyntacticType test_1277_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1277_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1277() { testInvalid(test_1277_sup,test_1277_sub); }

		private static final SyntacticType test_1278_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1278_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1278() { testInvalid(test_1278_sup,test_1278_sub); }

		private static final SyntacticType test_1279_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1279_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1279() { testInvalid(test_1279_sup,test_1279_sub); }

		private static final SyntacticType test_1280_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1280_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1280() { testInvalid(test_1280_sup,test_1280_sub); }

		private static final SyntacticType test_1281_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1281_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1281() { testInvalid(test_1281_sup,test_1281_sub); }

		private static final SyntacticType test_1282_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1282_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1282() { testInvalid(test_1282_sup,test_1282_sub); }

		private static final SyntacticType test_1283_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1283_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1283() { testInvalid(test_1283_sup,test_1283_sub); }

		private static final SyntacticType test_1284_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1284_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1284() { testInvalid(test_1284_sup,test_1284_sub); }

		private static final SyntacticType test_1285_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1285_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1285() { testInvalid(test_1285_sup,test_1285_sub); }

		private static final SyntacticType test_1286_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1286_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1286() { testInvalid(test_1286_sup,test_1286_sub); }

		private static final SyntacticType test_1287_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1287_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1287() { testInvalid(test_1287_sup,test_1287_sub); }

		private static final SyntacticType test_1288_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1288_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1288() { testInvalid(test_1288_sup,test_1288_sub); }

		private static final SyntacticType test_1289_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1289_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1289() { testInvalid(test_1289_sup,test_1289_sub); }

		private static final SyntacticType test_1290_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1290_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1290() { testInvalid(test_1290_sup,test_1290_sub); }

		private static final SyntacticType test_1291_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1291_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1291() { testInvalid(test_1291_sup,test_1291_sub); }

		private static final SyntacticType test_1292_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1292_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1292() { testInvalid(test_1292_sup,test_1292_sub); }

		private static final SyntacticType test_1293_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1293_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1293() { testInvalid(test_1293_sup,test_1293_sub); }

		private static final SyntacticType test_1294_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1294_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1294() { testInvalid(test_1294_sup,test_1294_sub); }

		private static final SyntacticType test_1295_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1295_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1295() { testInvalid(test_1295_sup,test_1295_sub); }

		private static final SyntacticType test_1296_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1296_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1296() { testInvalid(test_1296_sup,test_1296_sub); }

		private static final SyntacticType test_1297_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1297_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1297() { testInvalid(test_1297_sup,test_1297_sub); }

		private static final SyntacticType test_1298_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1298_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1298() { testInvalid(test_1298_sup,test_1298_sub); }

		private static final SyntacticType test_1299_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1299_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1299() { testInvalid(test_1299_sup,test_1299_sub); }

		private static final SyntacticType test_1300_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1300_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1300() { testInvalid(test_1300_sup,test_1300_sub); }

		private static final SyntacticType test_1301_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1301_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1301() { testInvalid(test_1301_sup,test_1301_sub); }

		private static final SyntacticType test_1302_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1302_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1302() { testInvalid(test_1302_sup,test_1302_sub); }

		private static final SyntacticType test_1303_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1303_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1303() { testInvalid(test_1303_sup,test_1303_sub); }

		private static final SyntacticType test_1304_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1304_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1304() { testInvalid(test_1304_sup,test_1304_sub); }

		private static final SyntacticType test_1305_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1305_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1305() { testInvalid(test_1305_sup,test_1305_sub); }

		private static final SyntacticType test_1306_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1306_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1306() { testInvalid(test_1306_sup,test_1306_sub); }

		private static final SyntacticType test_1307_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1307_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1307() { testInvalid(test_1307_sup,test_1307_sub); }

		private static final SyntacticType test_1308_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1308_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1308() { testInvalid(test_1308_sup,test_1308_sub); }

		private static final SyntacticType test_1309_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1309_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1309() { testInvalid(test_1309_sup,test_1309_sub); }

		private static final SyntacticType test_1310_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1310_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1310() { testInvalid(test_1310_sup,test_1310_sub); }

		private static final SyntacticType test_1311_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1311_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1311() { testInvalid(test_1311_sup,test_1311_sub); }

		private static final SyntacticType test_1312_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1312_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1312() { testInvalid(test_1312_sup,test_1312_sub); }

		private static final SyntacticType test_1313_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1313_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1313() { testInvalid(test_1313_sup,test_1313_sub); }

		private static final SyntacticType test_1314_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1314_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1314() { testInvalid(test_1314_sup,test_1314_sub); }

		private static final SyntacticType test_1315_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1315_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1315() { testInvalid(test_1315_sup,test_1315_sub); }

		private static final SyntacticType test_1316_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1316_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1316() { testInvalid(test_1316_sup,test_1316_sub); }

		private static final SyntacticType test_1317_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1317_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1317() { testInvalid(test_1317_sup,test_1317_sub); }

		private static final SyntacticType test_1318_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1318_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1318() { testInvalid(test_1318_sup,test_1318_sub); }

		private static final SyntacticType test_1319_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1319_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1319() { testInvalid(test_1319_sup,test_1319_sub); }

		private static final SyntacticType test_1320_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1320_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1320() { testInvalid(test_1320_sup,test_1320_sub); }

		private static final SyntacticType test_1321_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1321_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1321() { testInvalid(test_1321_sup,test_1321_sub); }

		private static final SyntacticType test_1322_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1322_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1322() { testInvalid(test_1322_sup,test_1322_sub); }

		private static final SyntacticType test_1323_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1323_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1323() { testInvalid(test_1323_sup,test_1323_sub); }

		private static final SyntacticType test_1324_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1324_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1324() { testInvalid(test_1324_sup,test_1324_sub); }

		private static final SyntacticType test_1325_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1325_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1325() { testInvalid(test_1325_sup,test_1325_sub); }

		private static final SyntacticType test_1326_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1326_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1326() { testInvalid(test_1326_sup,test_1326_sub); }

		private static final SyntacticType test_1327_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1327_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1327() { testInvalid(test_1327_sup,test_1327_sub); }

		private static final SyntacticType test_1328_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1328_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1328() { testInvalid(test_1328_sup,test_1328_sub); }

		private static final SyntacticType test_1329_sup = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		private static final SyntacticType test_1329_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1329() { testInvalid(test_1329_sup,test_1329_sub); }

		private static final SyntacticType test_1330_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1330_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1330() { testInvalid(test_1330_sup,test_1330_sub); }

		private static final SyntacticType test_1331_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1331_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1331() { testInvalid(test_1331_sup,test_1331_sub); }

		private static final SyntacticType test_1332_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1332_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1332() { testInvalid(test_1332_sup,test_1332_sub); }

		private static final SyntacticType test_1333_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1333_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1333() { testValid(test_1333_sup,test_1333_sub); }

		private static final SyntacticType test_1334_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1334_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1334() { testValid(test_1334_sup,test_1334_sub); }

		private static final SyntacticType test_1335_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1335_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1335() { testInvalid(test_1335_sup,test_1335_sub); }

		private static final SyntacticType test_1336_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1336_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1336() { testInvalid(test_1336_sup,test_1336_sub); }

		private static final SyntacticType test_1337_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1337_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1337() { testValid(test_1337_sup,test_1337_sub); }

		private static final SyntacticType test_1338_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1338_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1338() { testInvalid(test_1338_sup,test_1338_sub); }

		private static final SyntacticType test_1339_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1339_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1339() { testInvalid(test_1339_sup,test_1339_sub); }

		private static final SyntacticType test_1340_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1340_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1340() { testInvalid(test_1340_sup,test_1340_sub); }

		private static final SyntacticType test_1341_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1341_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1341() { testInvalid(test_1341_sup,test_1341_sub); }

		private static final SyntacticType test_1342_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1342_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1342() { testInvalid(test_1342_sup,test_1342_sub); }

		private static final SyntacticType test_1343_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1343_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1343() { testInvalid(test_1343_sup,test_1343_sub); }

		private static final SyntacticType test_1344_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1344_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1344() { testValid(test_1344_sup,test_1344_sub); }

		private static final SyntacticType test_1345_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1345_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1345() { testValid(test_1345_sup,test_1345_sub); }

		private static final SyntacticType test_1346_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1346_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1346() { testInvalid(test_1346_sup,test_1346_sub); }

		private static final SyntacticType test_1347_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1347_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1347() { testInvalid(test_1347_sup,test_1347_sub); }

		private static final SyntacticType test_1348_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1348_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1348() { testValid(test_1348_sup,test_1348_sub); }

		private static final SyntacticType test_1349_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1349_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1349() { testValid(test_1349_sup,test_1349_sub); }

		private static final SyntacticType test_1350_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1350_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1350() { testValid(test_1350_sup,test_1350_sub); }

		private static final SyntacticType test_1351_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1351_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1351() { testInvalid(test_1351_sup,test_1351_sub); }

		private static final SyntacticType test_1352_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1352_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1352() { testInvalid(test_1352_sup,test_1352_sub); }

		private static final SyntacticType test_1353_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1353_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1353() { testInvalid(test_1353_sup,test_1353_sub); }

		private static final SyntacticType test_1354_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1354_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1354() { testInvalid(test_1354_sup,test_1354_sub); }

		private static final SyntacticType test_1355_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1355_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1355() { testInvalid(test_1355_sup,test_1355_sub); }

		private static final SyntacticType test_1356_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1356_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1356() { testInvalid(test_1356_sup,test_1356_sub); }

		private static final SyntacticType test_1357_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1357_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1357() { testInvalid(test_1357_sup,test_1357_sub); }

		private static final SyntacticType test_1358_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1358_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1358() { testInvalid(test_1358_sup,test_1358_sub); }

		private static final SyntacticType test_1359_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1359_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1359() { testInvalid(test_1359_sup,test_1359_sub); }

		private static final SyntacticType test_1360_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1360_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1360() { testValid(test_1360_sup,test_1360_sub); }

		private static final SyntacticType test_1361_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1361_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1361() { testValid(test_1361_sup,test_1361_sub); }

		private static final SyntacticType test_1362_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1362_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1362() { testValid(test_1362_sup,test_1362_sub); }

		private static final SyntacticType test_1363_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1363_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1363() { testInvalid(test_1363_sup,test_1363_sub); }

		private static final SyntacticType test_1364_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1364_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1364() { testInvalid(test_1364_sup,test_1364_sub); }

		private static final SyntacticType test_1365_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1365_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1365() { testInvalid(test_1365_sup,test_1365_sub); }

		private static final SyntacticType test_1366_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1366_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1366() { testInvalid(test_1366_sup,test_1366_sub); }

		private static final SyntacticType test_1367_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1367_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1367() { testInvalid(test_1367_sup,test_1367_sub); }

		private static final SyntacticType test_1368_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1368_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1368() { testInvalid(test_1368_sup,test_1368_sub); }

		private static final SyntacticType test_1369_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1369_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1369() { testInvalid(test_1369_sup,test_1369_sub); }

		private static final SyntacticType test_1370_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1370_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1370() { testValid(test_1370_sup,test_1370_sub); }

		private static final SyntacticType test_1371_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1371_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1371() { testInvalid(test_1371_sup,test_1371_sub); }

		private static final SyntacticType test_1372_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1372_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1372() { testValid(test_1372_sup,test_1372_sub); }

		private static final SyntacticType test_1373_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1373_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1373() { testInvalid(test_1373_sup,test_1373_sub); }

		private static final SyntacticType test_1374_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1374_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1374() { testInvalid(test_1374_sup,test_1374_sub); }

		private static final SyntacticType test_1375_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1375_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1375() { testValid(test_1375_sup,test_1375_sub); }

		private static final SyntacticType test_1376_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1376_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1376() { testInvalid(test_1376_sup,test_1376_sub); }

		private static final SyntacticType test_1377_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1377_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1377() { testInvalid(test_1377_sup,test_1377_sub); }

		private static final SyntacticType test_1378_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1378_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1378() { testInvalid(test_1378_sup,test_1378_sub); }

		private static final SyntacticType test_1379_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1379_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1379() { testInvalid(test_1379_sup,test_1379_sub); }

		private static final SyntacticType test_1380_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1380_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1380() { testInvalid(test_1380_sup,test_1380_sub); }

		private static final SyntacticType test_1381_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1381_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1381() { testInvalid(test_1381_sup,test_1381_sub); }

		private static final SyntacticType test_1382_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1382_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1382() { testInvalid(test_1382_sup,test_1382_sub); }

		private static final SyntacticType test_1383_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1383_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1383() { testValid(test_1383_sup,test_1383_sub); }

		private static final SyntacticType test_1384_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1384_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1384() { testInvalid(test_1384_sup,test_1384_sub); }

		private static final SyntacticType test_1385_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1385_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1385() { testInvalid(test_1385_sup,test_1385_sub); }

		private static final SyntacticType test_1386_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1386_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1386() { testInvalid(test_1386_sup,test_1386_sub); }

		private static final SyntacticType test_1387_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1387_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1387() { testInvalid(test_1387_sup,test_1387_sub); }

		private static final SyntacticType test_1388_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1388_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1388() { testInvalid(test_1388_sup,test_1388_sub); }

		private static final SyntacticType test_1389_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1389_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1389() { testInvalid(test_1389_sup,test_1389_sub); }

		private static final SyntacticType test_1390_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1390_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1390() { testInvalid(test_1390_sup,test_1390_sub); }

		private static final SyntacticType test_1391_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1391_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1391() { testInvalid(test_1391_sup,test_1391_sub); }

		private static final SyntacticType test_1392_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1392_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1392() { testInvalid(test_1392_sup,test_1392_sub); }

		private static final SyntacticType test_1393_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1393_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1393() { testInvalid(test_1393_sup,test_1393_sub); }

		private static final SyntacticType test_1394_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1394_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1394() { testInvalid(test_1394_sup,test_1394_sub); }

		private static final SyntacticType test_1395_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1395_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1395() { testInvalid(test_1395_sup,test_1395_sub); }

		private static final SyntacticType test_1396_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1396_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1396() { testInvalid(test_1396_sup,test_1396_sub); }

		private static final SyntacticType test_1397_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1397_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1397() { testInvalid(test_1397_sup,test_1397_sub); }

		private static final SyntacticType test_1398_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1398_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1398() { testValid(test_1398_sup,test_1398_sub); }

		private static final SyntacticType test_1399_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1399_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1399() { testInvalid(test_1399_sup,test_1399_sub); }

		private static final SyntacticType test_1400_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1400_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1400() { testInvalid(test_1400_sup,test_1400_sub); }

		private static final SyntacticType test_1401_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1401_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1401() { testInvalid(test_1401_sup,test_1401_sub); }

		private static final SyntacticType test_1402_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1402_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1402() { testInvalid(test_1402_sup,test_1402_sub); }

		private static final SyntacticType test_1403_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1403_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1403() { testInvalid(test_1403_sup,test_1403_sub); }

		private static final SyntacticType test_1404_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1404_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1404() { testInvalid(test_1404_sup,test_1404_sub); }

		private static final SyntacticType test_1405_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1405_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1405() { testInvalid(test_1405_sup,test_1405_sub); }

		private static final SyntacticType test_1406_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1406_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1406() { testInvalid(test_1406_sup,test_1406_sub); }

		private static final SyntacticType test_1407_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1407_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1407() { testInvalid(test_1407_sup,test_1407_sub); }

		private static final SyntacticType test_1408_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1408_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1408() { testInvalid(test_1408_sup,test_1408_sub); }

		private static final SyntacticType test_1409_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1409_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1409() { testInvalid(test_1409_sup,test_1409_sub); }

		private static final SyntacticType test_1410_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1410_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1410() { testInvalid(test_1410_sup,test_1410_sub); }

		private static final SyntacticType test_1411_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1411_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1411() { testInvalid(test_1411_sup,test_1411_sub); }

		private static final SyntacticType test_1412_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1412_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1412() { testInvalid(test_1412_sup,test_1412_sub); }

		private static final SyntacticType test_1413_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1413_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1413() { testValid(test_1413_sup,test_1413_sub); }

		private static final SyntacticType test_1414_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1414_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1414() { testInvalid(test_1414_sup,test_1414_sub); }

		private static final SyntacticType test_1415_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1415_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1415() { testInvalid(test_1415_sup,test_1415_sub); }

		private static final SyntacticType test_1416_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1416_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1416() { testInvalid(test_1416_sup,test_1416_sub); }

		private static final SyntacticType test_1417_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1417_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1417() { testValid(test_1417_sup,test_1417_sub); }

		private static final SyntacticType test_1418_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1418_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1418() { testInvalid(test_1418_sup,test_1418_sub); }

		private static final SyntacticType test_1419_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1419_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1419() { testInvalid(test_1419_sup,test_1419_sub); }

		private static final SyntacticType test_1420_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1420_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1420() { testInvalid(test_1420_sup,test_1420_sub); }

		private static final SyntacticType test_1421_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1421_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1421() { testInvalid(test_1421_sup,test_1421_sub); }

		private static final SyntacticType test_1422_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1422_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1422() { testInvalid(test_1422_sup,test_1422_sub); }

		private static final SyntacticType test_1423_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1423_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1423() { testInvalid(test_1423_sup,test_1423_sub); }

		private static final SyntacticType test_1424_sup = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		private static final SyntacticType test_1424_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1424() { testInvalid(test_1424_sup,test_1424_sub); }

		private static final SyntacticType test_1425_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1425_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1425() { testInvalid(test_1425_sup,test_1425_sub); }

		private static final SyntacticType test_1426_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1426_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1426() { testInvalid(test_1426_sup,test_1426_sub); }

		private static final SyntacticType test_1427_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1427_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1427() { testInvalid(test_1427_sup,test_1427_sub); }

		private static final SyntacticType test_1428_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1428_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1428() { testInvalid(test_1428_sup,test_1428_sub); }

		private static final SyntacticType test_1429_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1429_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1429() { testInvalid(test_1429_sup,test_1429_sub); }

		private static final SyntacticType test_1430_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1430_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1430() { testInvalid(test_1430_sup,test_1430_sub); }

		private static final SyntacticType test_1431_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1431_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1431() { testInvalid(test_1431_sup,test_1431_sub); }

		private static final SyntacticType test_1432_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1432_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1432() { testInvalid(test_1432_sup,test_1432_sub); }

		private static final SyntacticType test_1433_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1433_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1433() { testInvalid(test_1433_sup,test_1433_sub); }

		private static final SyntacticType test_1434_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1434_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1434() { testInvalid(test_1434_sup,test_1434_sub); }

		private static final SyntacticType test_1435_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1435_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1435() { testInvalid(test_1435_sup,test_1435_sub); }

		private static final SyntacticType test_1436_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1436_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1436() { testInvalid(test_1436_sup,test_1436_sub); }

		private static final SyntacticType test_1437_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1437_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1437() { testInvalid(test_1437_sup,test_1437_sub); }

		private static final SyntacticType test_1438_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1438_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1438() { testInvalid(test_1438_sup,test_1438_sub); }

		private static final SyntacticType test_1439_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1439_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1439() { testInvalid(test_1439_sup,test_1439_sub); }

		private static final SyntacticType test_1440_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1440_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1440() { testValid(test_1440_sup,test_1440_sub); }

		private static final SyntacticType test_1441_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1441_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1441() { testInvalid(test_1441_sup,test_1441_sub); }

		private static final SyntacticType test_1442_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1442_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1442() { testInvalid(test_1442_sup,test_1442_sub); }

		private static final SyntacticType test_1443_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1443_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1443() { testInvalid(test_1443_sup,test_1443_sub); }

		private static final SyntacticType test_1444_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1444_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1444() { testInvalid(test_1444_sup,test_1444_sub); }

		private static final SyntacticType test_1445_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1445_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1445() { testInvalid(test_1445_sup,test_1445_sub); }

		private static final SyntacticType test_1446_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1446_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1446() { testInvalid(test_1446_sup,test_1446_sub); }

		private static final SyntacticType test_1447_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1447_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1447() { testInvalid(test_1447_sup,test_1447_sub); }

		private static final SyntacticType test_1448_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1448_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1448() { testInvalid(test_1448_sup,test_1448_sub); }

		private static final SyntacticType test_1449_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1449_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1449() { testInvalid(test_1449_sup,test_1449_sub); }

		private static final SyntacticType test_1450_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1450_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1450() { testInvalid(test_1450_sup,test_1450_sub); }

		private static final SyntacticType test_1451_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1451_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1451() { testInvalid(test_1451_sup,test_1451_sub); }

		private static final SyntacticType test_1452_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1452_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1452() { testInvalid(test_1452_sup,test_1452_sub); }

		private static final SyntacticType test_1453_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1453_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1453() { testInvalid(test_1453_sup,test_1453_sub); }

		private static final SyntacticType test_1454_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1454_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1454() { testInvalid(test_1454_sup,test_1454_sub); }

		private static final SyntacticType test_1455_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1455_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1455() { testInvalid(test_1455_sup,test_1455_sub); }

		private static final SyntacticType test_1456_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1456_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1456() { testInvalid(test_1456_sup,test_1456_sub); }

		private static final SyntacticType test_1457_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1457_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1457() { testInvalid(test_1457_sup,test_1457_sub); }

		private static final SyntacticType test_1458_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1458_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1458() { testInvalid(test_1458_sup,test_1458_sub); }

		private static final SyntacticType test_1459_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1459_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1459() { testInvalid(test_1459_sup,test_1459_sub); }

		private static final SyntacticType test_1460_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1460_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1460() { testInvalid(test_1460_sup,test_1460_sub); }

		private static final SyntacticType test_1461_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1461_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1461() { testInvalid(test_1461_sup,test_1461_sub); }

		private static final SyntacticType test_1462_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1462_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1462() { testInvalid(test_1462_sup,test_1462_sub); }

		private static final SyntacticType test_1463_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1463_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1463() { testInvalid(test_1463_sup,test_1463_sub); }

		private static final SyntacticType test_1464_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1464_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1464() { testInvalid(test_1464_sup,test_1464_sub); }

		private static final SyntacticType test_1465_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1465_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1465() { testInvalid(test_1465_sup,test_1465_sub); }

		private static final SyntacticType test_1466_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1466_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1466() { testInvalid(test_1466_sup,test_1466_sub); }

		private static final SyntacticType test_1467_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1467_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1467() { testInvalid(test_1467_sup,test_1467_sub); }

		private static final SyntacticType test_1468_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1468_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1468() { testInvalid(test_1468_sup,test_1468_sub); }

		private static final SyntacticType test_1469_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1469_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1469() { testInvalid(test_1469_sup,test_1469_sub); }

		private static final SyntacticType test_1470_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1470_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1470() { testInvalid(test_1470_sup,test_1470_sub); }

		private static final SyntacticType test_1471_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1471_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1471() { testInvalid(test_1471_sup,test_1471_sub); }

		private static final SyntacticType test_1472_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1472_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1472() { testInvalid(test_1472_sup,test_1472_sub); }

		private static final SyntacticType test_1473_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1473_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1473() { testInvalid(test_1473_sup,test_1473_sub); }

		private static final SyntacticType test_1474_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1474_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1474() { testInvalid(test_1474_sup,test_1474_sub); }

		private static final SyntacticType test_1475_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1475_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1475() { testInvalid(test_1475_sup,test_1475_sub); }

		private static final SyntacticType test_1476_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1476_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1476() { testInvalid(test_1476_sup,test_1476_sub); }

		private static final SyntacticType test_1477_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1477_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1477() { testInvalid(test_1477_sup,test_1477_sub); }

		private static final SyntacticType test_1478_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1478_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1478() { testInvalid(test_1478_sup,test_1478_sub); }

		private static final SyntacticType test_1479_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1479_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1479() { testInvalid(test_1479_sup,test_1479_sub); }

		private static final SyntacticType test_1480_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1480_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1480() { testInvalid(test_1480_sup,test_1480_sub); }

		private static final SyntacticType test_1481_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1481_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1481() { testInvalid(test_1481_sup,test_1481_sub); }

		private static final SyntacticType test_1482_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1482_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1482() { testInvalid(test_1482_sup,test_1482_sub); }

		private static final SyntacticType test_1483_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1483_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1483() { testInvalid(test_1483_sup,test_1483_sub); }

		private static final SyntacticType test_1484_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1484_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1484() { testInvalid(test_1484_sup,test_1484_sub); }

		private static final SyntacticType test_1485_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1485_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1485() { testInvalid(test_1485_sup,test_1485_sub); }

		private static final SyntacticType test_1486_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1486_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1486() { testInvalid(test_1486_sup,test_1486_sub); }

		private static final SyntacticType test_1487_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1487_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1487() { testInvalid(test_1487_sup,test_1487_sub); }

		private static final SyntacticType test_1488_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1488_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1488() { testInvalid(test_1488_sup,test_1488_sub); }

		private static final SyntacticType test_1489_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1489_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1489() { testInvalid(test_1489_sup,test_1489_sub); }

		private static final SyntacticType test_1490_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1490_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1490() { testInvalid(test_1490_sup,test_1490_sub); }

		private static final SyntacticType test_1491_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1491_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1491() { testInvalid(test_1491_sup,test_1491_sub); }

		private static final SyntacticType test_1492_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1492_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1492() { testInvalid(test_1492_sup,test_1492_sub); }

		private static final SyntacticType test_1493_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1493_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1493() { testInvalid(test_1493_sup,test_1493_sub); }

		private static final SyntacticType test_1494_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1494_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1494() { testInvalid(test_1494_sup,test_1494_sub); }

		private static final SyntacticType test_1495_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1495_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1495() { testInvalid(test_1495_sup,test_1495_sub); }

		private static final SyntacticType test_1496_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1496_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1496() { testInvalid(test_1496_sup,test_1496_sub); }

		private static final SyntacticType test_1497_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1497_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1497() { testInvalid(test_1497_sup,test_1497_sub); }

		private static final SyntacticType test_1498_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1498_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1498() { testInvalid(test_1498_sup,test_1498_sub); }

		private static final SyntacticType test_1499_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1499_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1499() { testInvalid(test_1499_sup,test_1499_sub); }

		private static final SyntacticType test_1500_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1500_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1500() { testInvalid(test_1500_sup,test_1500_sub); }

		private static final SyntacticType test_1501_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1501_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1501() { testInvalid(test_1501_sup,test_1501_sub); }

		private static final SyntacticType test_1502_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1502_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1502() { testInvalid(test_1502_sup,test_1502_sub); }

		private static final SyntacticType test_1503_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1503_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1503() { testInvalid(test_1503_sup,test_1503_sub); }

		private static final SyntacticType test_1504_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1504_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1504() { testInvalid(test_1504_sup,test_1504_sub); }

		private static final SyntacticType test_1505_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1505_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1505() { testInvalid(test_1505_sup,test_1505_sub); }

		private static final SyntacticType test_1506_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1506_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1506() { testInvalid(test_1506_sup,test_1506_sub); }

		private static final SyntacticType test_1507_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1507_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1507() { testInvalid(test_1507_sup,test_1507_sub); }

		private static final SyntacticType test_1508_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1508_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1508() { testInvalid(test_1508_sup,test_1508_sub); }

		private static final SyntacticType test_1509_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1509_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1509() { testInvalid(test_1509_sup,test_1509_sub); }

		private static final SyntacticType test_1510_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1510_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1510() { testInvalid(test_1510_sup,test_1510_sub); }

		private static final SyntacticType test_1511_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1511_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1511() { testInvalid(test_1511_sup,test_1511_sub); }

		private static final SyntacticType test_1512_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1512_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1512() { testInvalid(test_1512_sup,test_1512_sub); }

		private static final SyntacticType test_1513_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1513_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1513() { testInvalid(test_1513_sup,test_1513_sub); }

		private static final SyntacticType test_1514_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1514_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1514() { testInvalid(test_1514_sup,test_1514_sub); }

		private static final SyntacticType test_1515_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1515_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1515() { testInvalid(test_1515_sup,test_1515_sub); }

		private static final SyntacticType test_1516_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1516_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1516() { testInvalid(test_1516_sup,test_1516_sub); }

		private static final SyntacticType test_1517_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1517_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1517() { testInvalid(test_1517_sup,test_1517_sub); }

		private static final SyntacticType test_1518_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1518_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1518() { testInvalid(test_1518_sup,test_1518_sub); }

		private static final SyntacticType test_1519_sup = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		private static final SyntacticType test_1519_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1519() { testInvalid(test_1519_sup,test_1519_sub); }

		private static final SyntacticType test_1520_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1520_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1520() { testInvalid(test_1520_sup,test_1520_sub); }

		private static final SyntacticType test_1521_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1521_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1521() { testInvalid(test_1521_sup,test_1521_sub); }

		private static final SyntacticType test_1522_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1522_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1522() { testInvalid(test_1522_sup,test_1522_sub); }

		private static final SyntacticType test_1523_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1523_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1523() { testInvalid(test_1523_sup,test_1523_sub); }

		private static final SyntacticType test_1524_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1524_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1524() { testInvalid(test_1524_sup,test_1524_sub); }

		private static final SyntacticType test_1525_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1525_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1525() { testInvalid(test_1525_sup,test_1525_sub); }

		private static final SyntacticType test_1526_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1526_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1526() { testInvalid(test_1526_sup,test_1526_sub); }

		private static final SyntacticType test_1527_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1527_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1527() { testInvalid(test_1527_sup,test_1527_sub); }

		private static final SyntacticType test_1528_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1528_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1528() { testInvalid(test_1528_sup,test_1528_sub); }

		private static final SyntacticType test_1529_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1529_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1529() { testInvalid(test_1529_sup,test_1529_sub); }

		private static final SyntacticType test_1530_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1530_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1530() { testInvalid(test_1530_sup,test_1530_sub); }

		private static final SyntacticType test_1531_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1531_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1531() { testInvalid(test_1531_sup,test_1531_sub); }

		private static final SyntacticType test_1532_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1532_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1532() { testInvalid(test_1532_sup,test_1532_sub); }

		private static final SyntacticType test_1533_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1533_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1533() { testInvalid(test_1533_sup,test_1533_sub); }

		private static final SyntacticType test_1534_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1534_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1534() { testInvalid(test_1534_sup,test_1534_sub); }

		private static final SyntacticType test_1535_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1535_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1535() { testInvalid(test_1535_sup,test_1535_sub); }

		private static final SyntacticType test_1536_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1536_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1536() { testValid(test_1536_sup,test_1536_sub); }

		private static final SyntacticType test_1537_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1537_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1537() { testInvalid(test_1537_sup,test_1537_sub); }

		private static final SyntacticType test_1538_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1538_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1538() { testInvalid(test_1538_sup,test_1538_sub); }

		private static final SyntacticType test_1539_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1539_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1539() { testInvalid(test_1539_sup,test_1539_sub); }

		private static final SyntacticType test_1540_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1540_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1540() { testInvalid(test_1540_sup,test_1540_sub); }

		private static final SyntacticType test_1541_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1541_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1541() { testInvalid(test_1541_sup,test_1541_sub); }

		private static final SyntacticType test_1542_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1542_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1542() { testInvalid(test_1542_sup,test_1542_sub); }

		private static final SyntacticType test_1543_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1543_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1543() { testInvalid(test_1543_sup,test_1543_sub); }

		private static final SyntacticType test_1544_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1544_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1544() { testInvalid(test_1544_sup,test_1544_sub); }

		private static final SyntacticType test_1545_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1545_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1545() { testInvalid(test_1545_sup,test_1545_sub); }

		private static final SyntacticType test_1546_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1546_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1546() { testInvalid(test_1546_sup,test_1546_sub); }

		private static final SyntacticType test_1547_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1547_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1547() { testInvalid(test_1547_sup,test_1547_sub); }

		private static final SyntacticType test_1548_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1548_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1548() { testInvalid(test_1548_sup,test_1548_sub); }

		private static final SyntacticType test_1549_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1549_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1549() { testInvalid(test_1549_sup,test_1549_sub); }

		private static final SyntacticType test_1550_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1550_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1550() { testInvalid(test_1550_sup,test_1550_sub); }

		private static final SyntacticType test_1551_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1551_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1551() { testInvalid(test_1551_sup,test_1551_sub); }

		private static final SyntacticType test_1552_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1552_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1552() { testInvalid(test_1552_sup,test_1552_sub); }

		private static final SyntacticType test_1553_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1553_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1553() { testInvalid(test_1553_sup,test_1553_sub); }

		private static final SyntacticType test_1554_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1554_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1554() { testInvalid(test_1554_sup,test_1554_sub); }

		private static final SyntacticType test_1555_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1555_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1555() { testInvalid(test_1555_sup,test_1555_sub); }

		private static final SyntacticType test_1556_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1556_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1556() { testInvalid(test_1556_sup,test_1556_sub); }

		private static final SyntacticType test_1557_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1557_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1557() { testInvalid(test_1557_sup,test_1557_sub); }

		private static final SyntacticType test_1558_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1558_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1558() { testInvalid(test_1558_sup,test_1558_sub); }

		private static final SyntacticType test_1559_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1559_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1559() { testInvalid(test_1559_sup,test_1559_sub); }

		private static final SyntacticType test_1560_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1560_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1560() { testInvalid(test_1560_sup,test_1560_sub); }

		private static final SyntacticType test_1561_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1561_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1561() { testInvalid(test_1561_sup,test_1561_sub); }

		private static final SyntacticType test_1562_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1562_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1562() { testInvalid(test_1562_sup,test_1562_sub); }

		private static final SyntacticType test_1563_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1563_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1563() { testInvalid(test_1563_sup,test_1563_sub); }

		private static final SyntacticType test_1564_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1564_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1564() { testInvalid(test_1564_sup,test_1564_sub); }

		private static final SyntacticType test_1565_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1565_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1565() { testInvalid(test_1565_sup,test_1565_sub); }

		private static final SyntacticType test_1566_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1566_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1566() { testInvalid(test_1566_sup,test_1566_sub); }

		private static final SyntacticType test_1567_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1567_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1567() { testInvalid(test_1567_sup,test_1567_sub); }

		private static final SyntacticType test_1568_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1568_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1568() { testInvalid(test_1568_sup,test_1568_sub); }

		private static final SyntacticType test_1569_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1569_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1569() { testInvalid(test_1569_sup,test_1569_sub); }

		private static final SyntacticType test_1570_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1570_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1570() { testInvalid(test_1570_sup,test_1570_sub); }

		private static final SyntacticType test_1571_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1571_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1571() { testInvalid(test_1571_sup,test_1571_sub); }

		private static final SyntacticType test_1572_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1572_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1572() { testInvalid(test_1572_sup,test_1572_sub); }

		private static final SyntacticType test_1573_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1573_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1573() { testInvalid(test_1573_sup,test_1573_sub); }

		private static final SyntacticType test_1574_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1574_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1574() { testInvalid(test_1574_sup,test_1574_sub); }

		private static final SyntacticType test_1575_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1575_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1575() { testInvalid(test_1575_sup,test_1575_sub); }

		private static final SyntacticType test_1576_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1576_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1576() { testInvalid(test_1576_sup,test_1576_sub); }

		private static final SyntacticType test_1577_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1577_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1577() { testInvalid(test_1577_sup,test_1577_sub); }

		private static final SyntacticType test_1578_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1578_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1578() { testInvalid(test_1578_sup,test_1578_sub); }

		private static final SyntacticType test_1579_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1579_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1579() { testInvalid(test_1579_sup,test_1579_sub); }

		private static final SyntacticType test_1580_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1580_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1580() { testInvalid(test_1580_sup,test_1580_sub); }

		private static final SyntacticType test_1581_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1581_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1581() { testInvalid(test_1581_sup,test_1581_sub); }

		private static final SyntacticType test_1582_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1582_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1582() { testInvalid(test_1582_sup,test_1582_sub); }

		private static final SyntacticType test_1583_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1583_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1583() { testInvalid(test_1583_sup,test_1583_sub); }

		private static final SyntacticType test_1584_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1584_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1584() { testInvalid(test_1584_sup,test_1584_sub); }

		private static final SyntacticType test_1585_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1585_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1585() { testInvalid(test_1585_sup,test_1585_sub); }

		private static final SyntacticType test_1586_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1586_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1586() { testInvalid(test_1586_sup,test_1586_sub); }

		private static final SyntacticType test_1587_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1587_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1587() { testInvalid(test_1587_sup,test_1587_sub); }

		private static final SyntacticType test_1588_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1588_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1588() { testInvalid(test_1588_sup,test_1588_sub); }

		private static final SyntacticType test_1589_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1589_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1589() { testInvalid(test_1589_sup,test_1589_sub); }

		private static final SyntacticType test_1590_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1590_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1590() { testInvalid(test_1590_sup,test_1590_sub); }

		private static final SyntacticType test_1591_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1591_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1591() { testInvalid(test_1591_sup,test_1591_sub); }

		private static final SyntacticType test_1592_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1592_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1592() { testInvalid(test_1592_sup,test_1592_sub); }

		private static final SyntacticType test_1593_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1593_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1593() { testInvalid(test_1593_sup,test_1593_sub); }

		private static final SyntacticType test_1594_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1594_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1594() { testInvalid(test_1594_sup,test_1594_sub); }

		private static final SyntacticType test_1595_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1595_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1595() { testInvalid(test_1595_sup,test_1595_sub); }

		private static final SyntacticType test_1596_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1596_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1596() { testInvalid(test_1596_sup,test_1596_sub); }

		private static final SyntacticType test_1597_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1597_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1597() { testInvalid(test_1597_sup,test_1597_sub); }

		private static final SyntacticType test_1598_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1598_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1598() { testInvalid(test_1598_sup,test_1598_sub); }

		private static final SyntacticType test_1599_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1599_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1599() { testInvalid(test_1599_sup,test_1599_sub); }

		private static final SyntacticType test_1600_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1600_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1600() { testInvalid(test_1600_sup,test_1600_sub); }

		private static final SyntacticType test_1601_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1601_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1601() { testInvalid(test_1601_sup,test_1601_sub); }

		private static final SyntacticType test_1602_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1602_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1602() { testInvalid(test_1602_sup,test_1602_sub); }

		private static final SyntacticType test_1603_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1603_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1603() { testInvalid(test_1603_sup,test_1603_sub); }

		private static final SyntacticType test_1604_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1604_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1604() { testInvalid(test_1604_sup,test_1604_sub); }

		private static final SyntacticType test_1605_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1605_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1605() { testInvalid(test_1605_sup,test_1605_sub); }

		private static final SyntacticType test_1606_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1606_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1606() { testInvalid(test_1606_sup,test_1606_sub); }

		private static final SyntacticType test_1607_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1607_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1607() { testInvalid(test_1607_sup,test_1607_sub); }

		private static final SyntacticType test_1608_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1608_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1608() { testInvalid(test_1608_sup,test_1608_sub); }

		private static final SyntacticType test_1609_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1609_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1609() { testInvalid(test_1609_sup,test_1609_sub); }

		private static final SyntacticType test_1610_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1610_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1610() { testInvalid(test_1610_sup,test_1610_sub); }

		private static final SyntacticType test_1611_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1611_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1611() { testInvalid(test_1611_sup,test_1611_sub); }

		private static final SyntacticType test_1612_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1612_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1612() { testInvalid(test_1612_sup,test_1612_sub); }

		private static final SyntacticType test_1613_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1613_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1613() { testInvalid(test_1613_sup,test_1613_sub); }

		private static final SyntacticType test_1614_sup = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		private static final SyntacticType test_1614_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1614() { testInvalid(test_1614_sup,test_1614_sub); }

		private static final SyntacticType test_1615_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1615_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1615() { testInvalid(test_1615_sup,test_1615_sub); }

		private static final SyntacticType test_1616_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1616_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1616() { testInvalid(test_1616_sup,test_1616_sub); }

		private static final SyntacticType test_1617_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1617_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1617() { testValid(test_1617_sup,test_1617_sub); }

		private static final SyntacticType test_1618_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1618_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1618() { testValid(test_1618_sup,test_1618_sub); }

		private static final SyntacticType test_1619_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1619_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1619() { testValid(test_1619_sup,test_1619_sub); }

		private static final SyntacticType test_1620_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1620_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1620() { testValid(test_1620_sup,test_1620_sub); }

		private static final SyntacticType test_1621_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1621_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1621() { testValid(test_1621_sup,test_1621_sub); }

		private static final SyntacticType test_1622_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1622_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1622() { testValid(test_1622_sup,test_1622_sub); }

		private static final SyntacticType test_1623_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1623_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1623() { testValid(test_1623_sup,test_1623_sub); }

		private static final SyntacticType test_1624_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1624_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1624() { testValid(test_1624_sup,test_1624_sub); }

		private static final SyntacticType test_1625_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1625_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1625() { testValid(test_1625_sup,test_1625_sub); }

		private static final SyntacticType test_1626_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1626_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1626() { testInvalid(test_1626_sup,test_1626_sub); }

		private static final SyntacticType test_1627_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1627_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1627() { testInvalid(test_1627_sup,test_1627_sub); }

		private static final SyntacticType test_1628_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1628_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1628() { testInvalid(test_1628_sup,test_1628_sub); }

		private static final SyntacticType test_1629_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1629_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1629() { testInvalid(test_1629_sup,test_1629_sub); }

		private static final SyntacticType test_1630_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1630_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1630() { testInvalid(test_1630_sup,test_1630_sub); }

		private static final SyntacticType test_1631_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1631_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1631() { testValid(test_1631_sup,test_1631_sub); }

		private static final SyntacticType test_1632_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1632_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1632() { testValid(test_1632_sup,test_1632_sub); }

		private static final SyntacticType test_1633_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1633_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1633() { testValid(test_1633_sup,test_1633_sub); }

		private static final SyntacticType test_1634_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1634_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1634() { testInvalid(test_1634_sup,test_1634_sub); }

		private static final SyntacticType test_1635_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1635_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1635() { testInvalid(test_1635_sup,test_1635_sub); }

		private static final SyntacticType test_1636_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1636_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1636() { testValid(test_1636_sup,test_1636_sub); }

		private static final SyntacticType test_1637_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1637_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1637() { testValid(test_1637_sup,test_1637_sub); }

		private static final SyntacticType test_1638_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1638_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1638() { testValid(test_1638_sup,test_1638_sub); }

		private static final SyntacticType test_1639_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1639_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1639() { testValid(test_1639_sup,test_1639_sub); }

		private static final SyntacticType test_1640_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1640_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1640() { testValid(test_1640_sup,test_1640_sub); }

		private static final SyntacticType test_1641_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1641_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1641() { testValid(test_1641_sup,test_1641_sub); }

		private static final SyntacticType test_1642_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1642_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1642() { testValid(test_1642_sup,test_1642_sub); }

		private static final SyntacticType test_1643_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1643_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1643() { testValid(test_1643_sup,test_1643_sub); }

		private static final SyntacticType test_1644_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1644_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1644() { testValid(test_1644_sup,test_1644_sub); }

		private static final SyntacticType test_1645_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1645_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1645() { testInvalid(test_1645_sup,test_1645_sub); }

		private static final SyntacticType test_1646_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1646_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1646() { testInvalid(test_1646_sup,test_1646_sub); }

		private static final SyntacticType test_1647_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1647_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1647() { testInvalid(test_1647_sup,test_1647_sub); }

		private static final SyntacticType test_1648_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1648_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1648() { testInvalid(test_1648_sup,test_1648_sub); }

		private static final SyntacticType test_1649_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1649_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1649() { testInvalid(test_1649_sup,test_1649_sub); }

		private static final SyntacticType test_1650_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1650_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1650() { testInvalid(test_1650_sup,test_1650_sub); }

		private static final SyntacticType test_1651_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1651_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1651() { testInvalid(test_1651_sup,test_1651_sub); }

		private static final SyntacticType test_1652_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1652_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1652() { testValid(test_1652_sup,test_1652_sub); }

		private static final SyntacticType test_1653_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1653_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1653() { testInvalid(test_1653_sup,test_1653_sub); }

		private static final SyntacticType test_1654_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1654_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1654() { testValid(test_1654_sup,test_1654_sub); }

		private static final SyntacticType test_1655_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1655_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1655() { testInvalid(test_1655_sup,test_1655_sub); }

		private static final SyntacticType test_1656_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1656_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1656() { testValid(test_1656_sup,test_1656_sub); }

		private static final SyntacticType test_1657_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1657_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1657() { testInvalid(test_1657_sup,test_1657_sub); }

		private static final SyntacticType test_1658_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1658_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1658() { testValid(test_1658_sup,test_1658_sub); }

		private static final SyntacticType test_1659_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1659_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1659() { testInvalid(test_1659_sup,test_1659_sub); }

		private static final SyntacticType test_1660_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1660_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1660() { testInvalid(test_1660_sup,test_1660_sub); }

		private static final SyntacticType test_1661_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1661_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1661() { testInvalid(test_1661_sup,test_1661_sub); }

		private static final SyntacticType test_1662_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1662_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1662() { testInvalid(test_1662_sup,test_1662_sub); }

		private static final SyntacticType test_1663_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1663_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1663() { testInvalid(test_1663_sup,test_1663_sub); }

		private static final SyntacticType test_1664_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1664_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1664() { testInvalid(test_1664_sup,test_1664_sub); }

		private static final SyntacticType test_1665_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1665_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1665() { testInvalid(test_1665_sup,test_1665_sub); }

		private static final SyntacticType test_1666_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1666_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1666() { testInvalid(test_1666_sup,test_1666_sub); }

		private static final SyntacticType test_1667_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1667_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1667() { testInvalid(test_1667_sup,test_1667_sub); }

		private static final SyntacticType test_1668_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1668_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1668() { testInvalid(test_1668_sup,test_1668_sub); }

		private static final SyntacticType test_1669_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1669_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1669() { testInvalid(test_1669_sup,test_1669_sub); }

		private static final SyntacticType test_1670_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1670_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1670() { testInvalid(test_1670_sup,test_1670_sub); }

		private static final SyntacticType test_1671_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1671_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1671() { testInvalid(test_1671_sup,test_1671_sub); }

		private static final SyntacticType test_1672_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1672_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1672() { testInvalid(test_1672_sup,test_1672_sub); }

		private static final SyntacticType test_1673_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1673_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1673() { testInvalid(test_1673_sup,test_1673_sub); }

		private static final SyntacticType test_1674_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1674_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1674() { testInvalid(test_1674_sup,test_1674_sub); }

		private static final SyntacticType test_1675_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1675_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1675() { testInvalid(test_1675_sup,test_1675_sub); }

		private static final SyntacticType test_1676_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1676_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1676() { testInvalid(test_1676_sup,test_1676_sub); }

		private static final SyntacticType test_1677_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1677_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1677() { testInvalid(test_1677_sup,test_1677_sub); }

		private static final SyntacticType test_1678_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1678_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1678() { testInvalid(test_1678_sup,test_1678_sub); }

		private static final SyntacticType test_1679_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1679_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1679() { testInvalid(test_1679_sup,test_1679_sub); }

		private static final SyntacticType test_1680_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1680_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1680() { testInvalid(test_1680_sup,test_1680_sub); }

		private static final SyntacticType test_1681_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1681_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1681() { testInvalid(test_1681_sup,test_1681_sub); }

		private static final SyntacticType test_1682_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1682_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1682() { testInvalid(test_1682_sup,test_1682_sub); }

		private static final SyntacticType test_1683_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1683_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1683() { testInvalid(test_1683_sup,test_1683_sub); }

		private static final SyntacticType test_1684_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1684_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1684() { testInvalid(test_1684_sup,test_1684_sub); }

		private static final SyntacticType test_1685_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1685_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1685() { testInvalid(test_1685_sup,test_1685_sub); }

		private static final SyntacticType test_1686_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1686_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1686() { testInvalid(test_1686_sup,test_1686_sub); }

		private static final SyntacticType test_1687_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1687_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1687() { testInvalid(test_1687_sup,test_1687_sub); }

		private static final SyntacticType test_1688_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1688_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1688() { testInvalid(test_1688_sup,test_1688_sub); }

		private static final SyntacticType test_1689_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1689_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1689() { testInvalid(test_1689_sup,test_1689_sub); }

		private static final SyntacticType test_1690_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1690_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1690() { testInvalid(test_1690_sup,test_1690_sub); }

		private static final SyntacticType test_1691_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1691_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1691() { testInvalid(test_1691_sup,test_1691_sub); }

		private static final SyntacticType test_1692_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1692_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1692() { testInvalid(test_1692_sup,test_1692_sub); }

		private static final SyntacticType test_1693_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1693_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1693() { testInvalid(test_1693_sup,test_1693_sub); }

		private static final SyntacticType test_1694_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1694_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1694() { testInvalid(test_1694_sup,test_1694_sub); }

		private static final SyntacticType test_1695_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1695_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1695() { testInvalid(test_1695_sup,test_1695_sub); }

		private static final SyntacticType test_1696_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1696_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1696() { testInvalid(test_1696_sup,test_1696_sub); }

		private static final SyntacticType test_1697_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1697_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1697() { testInvalid(test_1697_sup,test_1697_sub); }

		private static final SyntacticType test_1698_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1698_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1698() { testInvalid(test_1698_sup,test_1698_sub); }

		private static final SyntacticType test_1699_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1699_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1699() { testInvalid(test_1699_sup,test_1699_sub); }

		private static final SyntacticType test_1700_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1700_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1700() { testInvalid(test_1700_sup,test_1700_sub); }

		private static final SyntacticType test_1701_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1701_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1701() { testInvalid(test_1701_sup,test_1701_sub); }

		private static final SyntacticType test_1702_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1702_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1702() { testInvalid(test_1702_sup,test_1702_sub); }

		private static final SyntacticType test_1703_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1703_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1703() { testInvalid(test_1703_sup,test_1703_sub); }

		private static final SyntacticType test_1704_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1704_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1704() { testInvalid(test_1704_sup,test_1704_sub); }

		private static final SyntacticType test_1705_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1705_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1705() { testInvalid(test_1705_sup,test_1705_sub); }

		private static final SyntacticType test_1706_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1706_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1706() { testInvalid(test_1706_sup,test_1706_sub); }

		private static final SyntacticType test_1707_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1707_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1707() { testInvalid(test_1707_sup,test_1707_sub); }

		private static final SyntacticType test_1708_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1708_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1708() { testInvalid(test_1708_sup,test_1708_sub); }

		private static final SyntacticType test_1709_sup = parse("{((any | any) | {any}), ((any | int) & !int)}");
		private static final SyntacticType test_1709_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1709() { testInvalid(test_1709_sup,test_1709_sub); }

		private static final SyntacticType test_1710_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1710_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1710() { testInvalid(test_1710_sup,test_1710_sub); }

		private static final SyntacticType test_1711_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1711_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1711() { testInvalid(test_1711_sup,test_1711_sub); }

		private static final SyntacticType test_1712_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1712_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1712() { testInvalid(test_1712_sup,test_1712_sub); }

		private static final SyntacticType test_1713_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1713_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1713() { testInvalid(test_1713_sup,test_1713_sub); }

		private static final SyntacticType test_1714_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1714_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1714() { testInvalid(test_1714_sup,test_1714_sub); }

		private static final SyntacticType test_1715_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1715_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1715() { testInvalid(test_1715_sup,test_1715_sub); }

		private static final SyntacticType test_1716_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1716_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1716() { testInvalid(test_1716_sup,test_1716_sub); }

		private static final SyntacticType test_1717_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1717_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1717() { testInvalid(test_1717_sup,test_1717_sub); }

		private static final SyntacticType test_1718_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1718_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1718() { testInvalid(test_1718_sup,test_1718_sub); }

		private static final SyntacticType test_1719_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1719_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1719() { testInvalid(test_1719_sup,test_1719_sub); }

		private static final SyntacticType test_1720_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1720_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1720() { testInvalid(test_1720_sup,test_1720_sub); }

		private static final SyntacticType test_1721_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1721_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1721() { testInvalid(test_1721_sup,test_1721_sub); }

		private static final SyntacticType test_1722_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1722_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1722() { testInvalid(test_1722_sup,test_1722_sub); }

		private static final SyntacticType test_1723_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1723_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1723() { testInvalid(test_1723_sup,test_1723_sub); }

		private static final SyntacticType test_1724_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1724_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1724() { testInvalid(test_1724_sup,test_1724_sub); }

		private static final SyntacticType test_1725_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1725_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1725() { testInvalid(test_1725_sup,test_1725_sub); }

		private static final SyntacticType test_1726_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1726_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1726() { testInvalid(test_1726_sup,test_1726_sub); }

		private static final SyntacticType test_1727_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1727_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1727() { testInvalid(test_1727_sup,test_1727_sub); }

		private static final SyntacticType test_1728_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1728_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1728() { testValid(test_1728_sup,test_1728_sub); }

		private static final SyntacticType test_1729_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1729_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1729() { testInvalid(test_1729_sup,test_1729_sub); }

		private static final SyntacticType test_1730_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1730_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1730() { testInvalid(test_1730_sup,test_1730_sub); }

		private static final SyntacticType test_1731_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1731_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1731() { testInvalid(test_1731_sup,test_1731_sub); }

		private static final SyntacticType test_1732_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1732_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1732() { testInvalid(test_1732_sup,test_1732_sub); }

		private static final SyntacticType test_1733_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1733_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1733() { testInvalid(test_1733_sup,test_1733_sub); }

		private static final SyntacticType test_1734_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1734_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1734() { testInvalid(test_1734_sup,test_1734_sub); }

		private static final SyntacticType test_1735_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1735_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1735() { testInvalid(test_1735_sup,test_1735_sub); }

		private static final SyntacticType test_1736_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1736_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1736() { testInvalid(test_1736_sup,test_1736_sub); }

		private static final SyntacticType test_1737_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1737_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1737() { testInvalid(test_1737_sup,test_1737_sub); }

		private static final SyntacticType test_1738_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1738_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1738() { testInvalid(test_1738_sup,test_1738_sub); }

		private static final SyntacticType test_1739_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1739_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1739() { testInvalid(test_1739_sup,test_1739_sub); }

		private static final SyntacticType test_1740_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1740_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1740() { testInvalid(test_1740_sup,test_1740_sub); }

		private static final SyntacticType test_1741_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1741_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1741() { testInvalid(test_1741_sup,test_1741_sub); }

		private static final SyntacticType test_1742_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1742_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1742() { testInvalid(test_1742_sup,test_1742_sub); }

		private static final SyntacticType test_1743_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1743_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1743() { testInvalid(test_1743_sup,test_1743_sub); }

		private static final SyntacticType test_1744_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1744_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1744() { testInvalid(test_1744_sup,test_1744_sub); }

		private static final SyntacticType test_1745_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1745_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1745() { testInvalid(test_1745_sup,test_1745_sub); }

		private static final SyntacticType test_1746_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1746_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1746() { testInvalid(test_1746_sup,test_1746_sub); }

		private static final SyntacticType test_1747_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1747_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1747() { testInvalid(test_1747_sup,test_1747_sub); }

		private static final SyntacticType test_1748_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1748_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1748() { testInvalid(test_1748_sup,test_1748_sub); }

		private static final SyntacticType test_1749_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1749_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1749() { testInvalid(test_1749_sup,test_1749_sub); }

		private static final SyntacticType test_1750_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1750_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1750() { testInvalid(test_1750_sup,test_1750_sub); }

		private static final SyntacticType test_1751_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1751_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1751() { testInvalid(test_1751_sup,test_1751_sub); }

		private static final SyntacticType test_1752_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1752_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1752() { testInvalid(test_1752_sup,test_1752_sub); }

		private static final SyntacticType test_1753_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1753_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1753() { testInvalid(test_1753_sup,test_1753_sub); }

		private static final SyntacticType test_1754_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1754_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1754() { testInvalid(test_1754_sup,test_1754_sub); }

		private static final SyntacticType test_1755_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1755_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1755() { testInvalid(test_1755_sup,test_1755_sub); }

		private static final SyntacticType test_1756_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1756_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1756() { testInvalid(test_1756_sup,test_1756_sub); }

		private static final SyntacticType test_1757_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1757_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1757() { testInvalid(test_1757_sup,test_1757_sub); }

		private static final SyntacticType test_1758_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1758_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1758() { testInvalid(test_1758_sup,test_1758_sub); }

		private static final SyntacticType test_1759_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1759_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1759() { testInvalid(test_1759_sup,test_1759_sub); }

		private static final SyntacticType test_1760_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1760_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1760() { testInvalid(test_1760_sup,test_1760_sub); }

		private static final SyntacticType test_1761_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1761_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1761() { testInvalid(test_1761_sup,test_1761_sub); }

		private static final SyntacticType test_1762_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1762_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1762() { testInvalid(test_1762_sup,test_1762_sub); }

		private static final SyntacticType test_1763_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1763_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1763() { testInvalid(test_1763_sup,test_1763_sub); }

		private static final SyntacticType test_1764_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1764_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1764() { testInvalid(test_1764_sup,test_1764_sub); }

		private static final SyntacticType test_1765_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1765_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1765() { testInvalid(test_1765_sup,test_1765_sub); }

		private static final SyntacticType test_1766_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1766_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1766() { testInvalid(test_1766_sup,test_1766_sub); }

		private static final SyntacticType test_1767_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1767_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1767() { testInvalid(test_1767_sup,test_1767_sub); }

		private static final SyntacticType test_1768_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1768_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1768() { testInvalid(test_1768_sup,test_1768_sub); }

		private static final SyntacticType test_1769_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1769_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1769() { testInvalid(test_1769_sup,test_1769_sub); }

		private static final SyntacticType test_1770_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1770_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1770() { testInvalid(test_1770_sup,test_1770_sub); }

		private static final SyntacticType test_1771_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1771_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1771() { testInvalid(test_1771_sup,test_1771_sub); }

		private static final SyntacticType test_1772_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1772_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1772() { testInvalid(test_1772_sup,test_1772_sub); }

		private static final SyntacticType test_1773_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1773_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1773() { testInvalid(test_1773_sup,test_1773_sub); }

		private static final SyntacticType test_1774_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1774_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1774() { testInvalid(test_1774_sup,test_1774_sub); }

		private static final SyntacticType test_1775_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1775_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1775() { testInvalid(test_1775_sup,test_1775_sub); }

		private static final SyntacticType test_1776_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1776_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1776() { testInvalid(test_1776_sup,test_1776_sub); }

		private static final SyntacticType test_1777_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1777_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1777() { testInvalid(test_1777_sup,test_1777_sub); }

		private static final SyntacticType test_1778_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1778_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1778() { testInvalid(test_1778_sup,test_1778_sub); }

		private static final SyntacticType test_1779_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1779_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1779() { testInvalid(test_1779_sup,test_1779_sub); }

		private static final SyntacticType test_1780_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1780_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1780() { testInvalid(test_1780_sup,test_1780_sub); }

		private static final SyntacticType test_1781_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1781_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1781() { testInvalid(test_1781_sup,test_1781_sub); }

		private static final SyntacticType test_1782_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1782_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1782() { testInvalid(test_1782_sup,test_1782_sub); }

		private static final SyntacticType test_1783_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1783_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1783() { testInvalid(test_1783_sup,test_1783_sub); }

		private static final SyntacticType test_1784_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1784_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1784() { testInvalid(test_1784_sup,test_1784_sub); }

		private static final SyntacticType test_1785_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1785_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1785() { testInvalid(test_1785_sup,test_1785_sub); }

		private static final SyntacticType test_1786_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1786_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1786() { testInvalid(test_1786_sup,test_1786_sub); }

		private static final SyntacticType test_1787_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1787_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1787() { testInvalid(test_1787_sup,test_1787_sub); }

		private static final SyntacticType test_1788_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1788_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1788() { testInvalid(test_1788_sup,test_1788_sub); }

		private static final SyntacticType test_1789_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1789_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1789() { testInvalid(test_1789_sup,test_1789_sub); }

		private static final SyntacticType test_1790_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1790_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1790() { testInvalid(test_1790_sup,test_1790_sub); }

		private static final SyntacticType test_1791_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1791_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1791() { testInvalid(test_1791_sup,test_1791_sub); }

		private static final SyntacticType test_1792_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1792_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1792() { testInvalid(test_1792_sup,test_1792_sub); }

		private static final SyntacticType test_1793_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1793_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1793() { testInvalid(test_1793_sup,test_1793_sub); }

		private static final SyntacticType test_1794_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1794_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1794() { testInvalid(test_1794_sup,test_1794_sub); }

		private static final SyntacticType test_1795_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1795_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1795() { testInvalid(test_1795_sup,test_1795_sub); }

		private static final SyntacticType test_1796_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1796_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1796() { testInvalid(test_1796_sup,test_1796_sub); }

		private static final SyntacticType test_1797_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1797_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1797() { testInvalid(test_1797_sup,test_1797_sub); }

		private static final SyntacticType test_1798_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1798_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1798() { testInvalid(test_1798_sup,test_1798_sub); }

		private static final SyntacticType test_1799_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1799_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1799() { testInvalid(test_1799_sup,test_1799_sub); }

		private static final SyntacticType test_1800_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1800_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1800() { testInvalid(test_1800_sup,test_1800_sub); }

		private static final SyntacticType test_1801_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1801_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1801() { testInvalid(test_1801_sup,test_1801_sub); }

		private static final SyntacticType test_1802_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1802_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1802() { testInvalid(test_1802_sup,test_1802_sub); }

		private static final SyntacticType test_1803_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1803_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1803() { testInvalid(test_1803_sup,test_1803_sub); }

		private static final SyntacticType test_1804_sup = parse("{((any & any) & int), ({any, int} & (int | any))}");
		private static final SyntacticType test_1804_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1804() { testInvalid(test_1804_sup,test_1804_sub); }

		private static final SyntacticType test_1805_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1805_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1805() { testInvalid(test_1805_sup,test_1805_sub); }

		private static final SyntacticType test_1806_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1806_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1806() { testInvalid(test_1806_sup,test_1806_sub); }

		private static final SyntacticType test_1807_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1807_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1807() { testInvalid(test_1807_sup,test_1807_sub); }

		private static final SyntacticType test_1808_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1808_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1808() { testValid(test_1808_sup,test_1808_sub); }

		private static final SyntacticType test_1809_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1809_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1809() { testValid(test_1809_sup,test_1809_sub); }

		private static final SyntacticType test_1810_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1810_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1810() { testInvalid(test_1810_sup,test_1810_sub); }

		private static final SyntacticType test_1811_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1811_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1811() { testInvalid(test_1811_sup,test_1811_sub); }

		private static final SyntacticType test_1812_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1812_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1812() { testValid(test_1812_sup,test_1812_sub); }

		private static final SyntacticType test_1813_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1813_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1813() { testInvalid(test_1813_sup,test_1813_sub); }

		private static final SyntacticType test_1814_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1814_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1814() { testInvalid(test_1814_sup,test_1814_sub); }

		private static final SyntacticType test_1815_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1815_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1815() { testInvalid(test_1815_sup,test_1815_sub); }

		private static final SyntacticType test_1816_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1816_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1816() { testInvalid(test_1816_sup,test_1816_sub); }

		private static final SyntacticType test_1817_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1817_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1817() { testInvalid(test_1817_sup,test_1817_sub); }

		private static final SyntacticType test_1818_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1818_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1818() { testInvalid(test_1818_sup,test_1818_sub); }

		private static final SyntacticType test_1819_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1819_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1819() { testInvalid(test_1819_sup,test_1819_sub); }

		private static final SyntacticType test_1820_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1820_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1820() { testValid(test_1820_sup,test_1820_sub); }

		private static final SyntacticType test_1821_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1821_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1821() { testInvalid(test_1821_sup,test_1821_sub); }

		private static final SyntacticType test_1822_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1822_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1822() { testInvalid(test_1822_sup,test_1822_sub); }

		private static final SyntacticType test_1823_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1823_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1823() { testValid(test_1823_sup,test_1823_sub); }

		private static final SyntacticType test_1824_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1824_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1824() { testValid(test_1824_sup,test_1824_sub); }

		private static final SyntacticType test_1825_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1825_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1825() { testValid(test_1825_sup,test_1825_sub); }

		private static final SyntacticType test_1826_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1826_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1826() { testInvalid(test_1826_sup,test_1826_sub); }

		private static final SyntacticType test_1827_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1827_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1827() { testInvalid(test_1827_sup,test_1827_sub); }

		private static final SyntacticType test_1828_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1828_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1828() { testInvalid(test_1828_sup,test_1828_sub); }

		private static final SyntacticType test_1829_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1829_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1829() { testInvalid(test_1829_sup,test_1829_sub); }

		private static final SyntacticType test_1830_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1830_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1830() { testInvalid(test_1830_sup,test_1830_sub); }

		private static final SyntacticType test_1831_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1831_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1831() { testInvalid(test_1831_sup,test_1831_sub); }

		private static final SyntacticType test_1832_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1832_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1832() { testInvalid(test_1832_sup,test_1832_sub); }

		private static final SyntacticType test_1833_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1833_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1833() { testInvalid(test_1833_sup,test_1833_sub); }

		private static final SyntacticType test_1834_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1834_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1834() { testInvalid(test_1834_sup,test_1834_sub); }

		private static final SyntacticType test_1835_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1835_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1835() { testValid(test_1835_sup,test_1835_sub); }

		private static final SyntacticType test_1836_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1836_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1836() { testValid(test_1836_sup,test_1836_sub); }

		private static final SyntacticType test_1837_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1837_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1837() { testValid(test_1837_sup,test_1837_sub); }

		private static final SyntacticType test_1838_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1838_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1838() { testInvalid(test_1838_sup,test_1838_sub); }

		private static final SyntacticType test_1839_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1839_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1839() { testInvalid(test_1839_sup,test_1839_sub); }

		private static final SyntacticType test_1840_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1840_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1840() { testInvalid(test_1840_sup,test_1840_sub); }

		private static final SyntacticType test_1841_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1841_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1841() { testInvalid(test_1841_sup,test_1841_sub); }

		private static final SyntacticType test_1842_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1842_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1842() { testInvalid(test_1842_sup,test_1842_sub); }

		private static final SyntacticType test_1843_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1843_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1843() { testInvalid(test_1843_sup,test_1843_sub); }

		private static final SyntacticType test_1844_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1844_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1844() { testInvalid(test_1844_sup,test_1844_sub); }

		private static final SyntacticType test_1845_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1845_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1845() { testInvalid(test_1845_sup,test_1845_sub); }

		private static final SyntacticType test_1846_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1846_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1846() { testInvalid(test_1846_sup,test_1846_sub); }

		private static final SyntacticType test_1847_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1847_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1847() { testInvalid(test_1847_sup,test_1847_sub); }

		private static final SyntacticType test_1848_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1848_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1848() { testInvalid(test_1848_sup,test_1848_sub); }

		private static final SyntacticType test_1849_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1849_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1849() { testInvalid(test_1849_sup,test_1849_sub); }

		private static final SyntacticType test_1850_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1850_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1850() { testValid(test_1850_sup,test_1850_sub); }

		private static final SyntacticType test_1851_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1851_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1851() { testInvalid(test_1851_sup,test_1851_sub); }

		private static final SyntacticType test_1852_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1852_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1852() { testInvalid(test_1852_sup,test_1852_sub); }

		private static final SyntacticType test_1853_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1853_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1853() { testInvalid(test_1853_sup,test_1853_sub); }

		private static final SyntacticType test_1854_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1854_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1854() { testInvalid(test_1854_sup,test_1854_sub); }

		private static final SyntacticType test_1855_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1855_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1855() { testInvalid(test_1855_sup,test_1855_sub); }

		private static final SyntacticType test_1856_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1856_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1856() { testInvalid(test_1856_sup,test_1856_sub); }

		private static final SyntacticType test_1857_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1857_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1857() { testInvalid(test_1857_sup,test_1857_sub); }

		private static final SyntacticType test_1858_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1858_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1858() { testValid(test_1858_sup,test_1858_sub); }

		private static final SyntacticType test_1859_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1859_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1859() { testInvalid(test_1859_sup,test_1859_sub); }

		private static final SyntacticType test_1860_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1860_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1860() { testInvalid(test_1860_sup,test_1860_sub); }

		private static final SyntacticType test_1861_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1861_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1861() { testInvalid(test_1861_sup,test_1861_sub); }

		private static final SyntacticType test_1862_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1862_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1862() { testInvalid(test_1862_sup,test_1862_sub); }

		private static final SyntacticType test_1863_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1863_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1863() { testInvalid(test_1863_sup,test_1863_sub); }

		private static final SyntacticType test_1864_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1864_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1864() { testInvalid(test_1864_sup,test_1864_sub); }

		private static final SyntacticType test_1865_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1865_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1865() { testInvalid(test_1865_sup,test_1865_sub); }

		private static final SyntacticType test_1866_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1866_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1866() { testInvalid(test_1866_sup,test_1866_sub); }

		private static final SyntacticType test_1867_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1867_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1867() { testInvalid(test_1867_sup,test_1867_sub); }

		private static final SyntacticType test_1868_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1868_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1868() { testInvalid(test_1868_sup,test_1868_sub); }

		private static final SyntacticType test_1869_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1869_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1869() { testInvalid(test_1869_sup,test_1869_sub); }

		private static final SyntacticType test_1870_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1870_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1870() { testInvalid(test_1870_sup,test_1870_sub); }

		private static final SyntacticType test_1871_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1871_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1871() { testInvalid(test_1871_sup,test_1871_sub); }

		private static final SyntacticType test_1872_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1872_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1872() { testInvalid(test_1872_sup,test_1872_sub); }

		private static final SyntacticType test_1873_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1873_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1873() { testValid(test_1873_sup,test_1873_sub); }

		private static final SyntacticType test_1874_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1874_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1874() { testInvalid(test_1874_sup,test_1874_sub); }

		private static final SyntacticType test_1875_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1875_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1875() { testInvalid(test_1875_sup,test_1875_sub); }

		private static final SyntacticType test_1876_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1876_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1876() { testInvalid(test_1876_sup,test_1876_sub); }

		private static final SyntacticType test_1877_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1877_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1877() { testInvalid(test_1877_sup,test_1877_sub); }

		private static final SyntacticType test_1878_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1878_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1878() { testInvalid(test_1878_sup,test_1878_sub); }

		private static final SyntacticType test_1879_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1879_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1879() { testInvalid(test_1879_sup,test_1879_sub); }

		private static final SyntacticType test_1880_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1880_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1880() { testInvalid(test_1880_sup,test_1880_sub); }

		private static final SyntacticType test_1881_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1881_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1881() { testInvalid(test_1881_sup,test_1881_sub); }

		private static final SyntacticType test_1882_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1882_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1882() { testInvalid(test_1882_sup,test_1882_sub); }

		private static final SyntacticType test_1883_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1883_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1883() { testInvalid(test_1883_sup,test_1883_sub); }

		private static final SyntacticType test_1884_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1884_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1884() { testInvalid(test_1884_sup,test_1884_sub); }

		private static final SyntacticType test_1885_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1885_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1885() { testInvalid(test_1885_sup,test_1885_sub); }

		private static final SyntacticType test_1886_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1886_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1886() { testInvalid(test_1886_sup,test_1886_sub); }

		private static final SyntacticType test_1887_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1887_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1887() { testInvalid(test_1887_sup,test_1887_sub); }

		private static final SyntacticType test_1888_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1888_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1888() { testValid(test_1888_sup,test_1888_sub); }

		private static final SyntacticType test_1889_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1889_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1889() { testInvalid(test_1889_sup,test_1889_sub); }

		private static final SyntacticType test_1890_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1890_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1890() { testInvalid(test_1890_sup,test_1890_sub); }

		private static final SyntacticType test_1891_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1891_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1891() { testInvalid(test_1891_sup,test_1891_sub); }

		private static final SyntacticType test_1892_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1892_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1892() { testValid(test_1892_sup,test_1892_sub); }

		private static final SyntacticType test_1893_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1893_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1893() { testInvalid(test_1893_sup,test_1893_sub); }

		private static final SyntacticType test_1894_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1894_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1894() { testInvalid(test_1894_sup,test_1894_sub); }

		private static final SyntacticType test_1895_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1895_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1895() { testInvalid(test_1895_sup,test_1895_sub); }

		private static final SyntacticType test_1896_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1896_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1896() { testInvalid(test_1896_sup,test_1896_sub); }

		private static final SyntacticType test_1897_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1897_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1897() { testInvalid(test_1897_sup,test_1897_sub); }

		private static final SyntacticType test_1898_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1898_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1898() { testInvalid(test_1898_sup,test_1898_sub); }

		private static final SyntacticType test_1899_sup = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		private static final SyntacticType test_1899_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1899() { testInvalid(test_1899_sup,test_1899_sub); }

		private static final SyntacticType test_1900_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1900_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1900() { testInvalid(test_1900_sup,test_1900_sub); }

		private static final SyntacticType test_1901_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1901_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1901() { testInvalid(test_1901_sup,test_1901_sub); }

		private static final SyntacticType test_1902_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1902_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1902() { testInvalid(test_1902_sup,test_1902_sub); }

		private static final SyntacticType test_1903_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1903_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1903() { testValid(test_1903_sup,test_1903_sub); }

		private static final SyntacticType test_1904_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1904_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1904() { testValid(test_1904_sup,test_1904_sub); }

		private static final SyntacticType test_1905_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1905_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_1905() { testInvalid(test_1905_sup,test_1905_sub); }

		private static final SyntacticType test_1906_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1906_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_1906() { testInvalid(test_1906_sup,test_1906_sub); }

		private static final SyntacticType test_1907_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1907_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_1907() { testValid(test_1907_sup,test_1907_sub); }

		private static final SyntacticType test_1908_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1908_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_1908() { testInvalid(test_1908_sup,test_1908_sub); }

		private static final SyntacticType test_1909_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1909_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_1909() { testInvalid(test_1909_sup,test_1909_sub); }

		private static final SyntacticType test_1910_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1910_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_1910() { testInvalid(test_1910_sup,test_1910_sub); }

		private static final SyntacticType test_1911_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1911_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_1911() { testInvalid(test_1911_sup,test_1911_sub); }

		private static final SyntacticType test_1912_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1912_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_1912() { testInvalid(test_1912_sup,test_1912_sub); }

		private static final SyntacticType test_1913_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1913_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_1913() { testInvalid(test_1913_sup,test_1913_sub); }

		private static final SyntacticType test_1914_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1914_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_1914() { testInvalid(test_1914_sup,test_1914_sub); }

		private static final SyntacticType test_1915_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1915_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_1915() { testValid(test_1915_sup,test_1915_sub); }

		private static final SyntacticType test_1916_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1916_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_1916() { testInvalid(test_1916_sup,test_1916_sub); }

		private static final SyntacticType test_1917_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1917_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_1917() { testInvalid(test_1917_sup,test_1917_sub); }

		private static final SyntacticType test_1918_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1918_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_1918() { testValid(test_1918_sup,test_1918_sub); }

		private static final SyntacticType test_1919_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1919_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_1919() { testValid(test_1919_sup,test_1919_sub); }

		private static final SyntacticType test_1920_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1920_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_1920() { testValid(test_1920_sup,test_1920_sub); }

		private static final SyntacticType test_1921_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1921_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_1921() { testInvalid(test_1921_sup,test_1921_sub); }

		private static final SyntacticType test_1922_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1922_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_1922() { testInvalid(test_1922_sup,test_1922_sub); }

		private static final SyntacticType test_1923_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1923_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_1923() { testInvalid(test_1923_sup,test_1923_sub); }

		private static final SyntacticType test_1924_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1924_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_1924() { testInvalid(test_1924_sup,test_1924_sub); }

		private static final SyntacticType test_1925_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1925_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_1925() { testInvalid(test_1925_sup,test_1925_sub); }

		private static final SyntacticType test_1926_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1926_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_1926() { testInvalid(test_1926_sup,test_1926_sub); }

		private static final SyntacticType test_1927_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1927_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_1927() { testInvalid(test_1927_sup,test_1927_sub); }

		private static final SyntacticType test_1928_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1928_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_1928() { testInvalid(test_1928_sup,test_1928_sub); }

		private static final SyntacticType test_1929_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1929_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_1929() { testInvalid(test_1929_sup,test_1929_sub); }

		private static final SyntacticType test_1930_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1930_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_1930() { testValid(test_1930_sup,test_1930_sub); }

		private static final SyntacticType test_1931_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1931_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_1931() { testValid(test_1931_sup,test_1931_sub); }

		private static final SyntacticType test_1932_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1932_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_1932() { testValid(test_1932_sup,test_1932_sub); }

		private static final SyntacticType test_1933_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1933_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_1933() { testInvalid(test_1933_sup,test_1933_sub); }

		private static final SyntacticType test_1934_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1934_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_1934() { testInvalid(test_1934_sup,test_1934_sub); }

		private static final SyntacticType test_1935_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1935_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_1935() { testInvalid(test_1935_sup,test_1935_sub); }

		private static final SyntacticType test_1936_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1936_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_1936() { testInvalid(test_1936_sup,test_1936_sub); }

		private static final SyntacticType test_1937_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1937_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_1937() { testInvalid(test_1937_sup,test_1937_sub); }

		private static final SyntacticType test_1938_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1938_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_1938() { testInvalid(test_1938_sup,test_1938_sub); }

		private static final SyntacticType test_1939_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1939_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_1939() { testInvalid(test_1939_sup,test_1939_sub); }

		private static final SyntacticType test_1940_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1940_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_1940() { testInvalid(test_1940_sup,test_1940_sub); }

		private static final SyntacticType test_1941_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1941_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_1941() { testInvalid(test_1941_sup,test_1941_sub); }

		private static final SyntacticType test_1942_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1942_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_1942() { testInvalid(test_1942_sup,test_1942_sub); }

		private static final SyntacticType test_1943_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1943_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_1943() { testInvalid(test_1943_sup,test_1943_sub); }

		private static final SyntacticType test_1944_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1944_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_1944() { testInvalid(test_1944_sup,test_1944_sub); }

		private static final SyntacticType test_1945_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1945_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_1945() { testValid(test_1945_sup,test_1945_sub); }

		private static final SyntacticType test_1946_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1946_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_1946() { testInvalid(test_1946_sup,test_1946_sub); }

		private static final SyntacticType test_1947_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1947_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_1947() { testInvalid(test_1947_sup,test_1947_sub); }

		private static final SyntacticType test_1948_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1948_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_1948() { testInvalid(test_1948_sup,test_1948_sub); }

		private static final SyntacticType test_1949_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1949_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_1949() { testInvalid(test_1949_sup,test_1949_sub); }

		private static final SyntacticType test_1950_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1950_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_1950() { testInvalid(test_1950_sup,test_1950_sub); }

		private static final SyntacticType test_1951_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1951_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_1951() { testInvalid(test_1951_sup,test_1951_sub); }

		private static final SyntacticType test_1952_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1952_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_1952() { testInvalid(test_1952_sup,test_1952_sub); }

		private static final SyntacticType test_1953_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1953_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_1953() { testValid(test_1953_sup,test_1953_sub); }

		private static final SyntacticType test_1954_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1954_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_1954() { testInvalid(test_1954_sup,test_1954_sub); }

		private static final SyntacticType test_1955_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1955_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_1955() { testInvalid(test_1955_sup,test_1955_sub); }

		private static final SyntacticType test_1956_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1956_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_1956() { testInvalid(test_1956_sup,test_1956_sub); }

		private static final SyntacticType test_1957_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1957_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_1957() { testInvalid(test_1957_sup,test_1957_sub); }

		private static final SyntacticType test_1958_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1958_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_1958() { testInvalid(test_1958_sup,test_1958_sub); }

		private static final SyntacticType test_1959_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1959_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_1959() { testInvalid(test_1959_sup,test_1959_sub); }

		private static final SyntacticType test_1960_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1960_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_1960() { testInvalid(test_1960_sup,test_1960_sub); }

		private static final SyntacticType test_1961_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1961_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_1961() { testInvalid(test_1961_sup,test_1961_sub); }

		private static final SyntacticType test_1962_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1962_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_1962() { testInvalid(test_1962_sup,test_1962_sub); }

		private static final SyntacticType test_1963_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1963_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_1963() { testInvalid(test_1963_sup,test_1963_sub); }

		private static final SyntacticType test_1964_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1964_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_1964() { testInvalid(test_1964_sup,test_1964_sub); }

		private static final SyntacticType test_1965_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1965_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_1965() { testInvalid(test_1965_sup,test_1965_sub); }

		private static final SyntacticType test_1966_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1966_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_1966() { testInvalid(test_1966_sup,test_1966_sub); }

		private static final SyntacticType test_1967_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1967_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_1967() { testInvalid(test_1967_sup,test_1967_sub); }

		private static final SyntacticType test_1968_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1968_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_1968() { testValid(test_1968_sup,test_1968_sub); }

		private static final SyntacticType test_1969_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1969_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_1969() { testInvalid(test_1969_sup,test_1969_sub); }

		private static final SyntacticType test_1970_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1970_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_1970() { testInvalid(test_1970_sup,test_1970_sub); }

		private static final SyntacticType test_1971_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1971_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_1971() { testInvalid(test_1971_sup,test_1971_sub); }

		private static final SyntacticType test_1972_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1972_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_1972() { testInvalid(test_1972_sup,test_1972_sub); }

		private static final SyntacticType test_1973_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1973_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_1973() { testInvalid(test_1973_sup,test_1973_sub); }

		private static final SyntacticType test_1974_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1974_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_1974() { testInvalid(test_1974_sup,test_1974_sub); }

		private static final SyntacticType test_1975_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1975_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_1975() { testInvalid(test_1975_sup,test_1975_sub); }

		private static final SyntacticType test_1976_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1976_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_1976() { testInvalid(test_1976_sup,test_1976_sub); }

		private static final SyntacticType test_1977_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1977_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_1977() { testInvalid(test_1977_sup,test_1977_sub); }

		private static final SyntacticType test_1978_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1978_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_1978() { testInvalid(test_1978_sup,test_1978_sub); }

		private static final SyntacticType test_1979_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1979_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_1979() { testInvalid(test_1979_sup,test_1979_sub); }

		private static final SyntacticType test_1980_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1980_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_1980() { testInvalid(test_1980_sup,test_1980_sub); }

		private static final SyntacticType test_1981_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1981_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_1981() { testInvalid(test_1981_sup,test_1981_sub); }

		private static final SyntacticType test_1982_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1982_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_1982() { testInvalid(test_1982_sup,test_1982_sub); }

		private static final SyntacticType test_1983_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1983_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_1983() { testValid(test_1983_sup,test_1983_sub); }

		private static final SyntacticType test_1984_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1984_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_1984() { testInvalid(test_1984_sup,test_1984_sub); }

		private static final SyntacticType test_1985_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1985_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_1985() { testInvalid(test_1985_sup,test_1985_sub); }

		private static final SyntacticType test_1986_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1986_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_1986() { testInvalid(test_1986_sup,test_1986_sub); }

		private static final SyntacticType test_1987_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1987_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_1987() { testValid(test_1987_sup,test_1987_sub); }

		private static final SyntacticType test_1988_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1988_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_1988() { testInvalid(test_1988_sup,test_1988_sub); }

		private static final SyntacticType test_1989_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1989_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_1989() { testInvalid(test_1989_sup,test_1989_sub); }

		private static final SyntacticType test_1990_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1990_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_1990() { testInvalid(test_1990_sup,test_1990_sub); }

		private static final SyntacticType test_1991_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1991_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_1991() { testInvalid(test_1991_sup,test_1991_sub); }

		private static final SyntacticType test_1992_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1992_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_1992() { testInvalid(test_1992_sup,test_1992_sub); }

		private static final SyntacticType test_1993_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1993_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_1993() { testInvalid(test_1993_sup,test_1993_sub); }

		private static final SyntacticType test_1994_sup = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		private static final SyntacticType test_1994_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_1994() { testInvalid(test_1994_sup,test_1994_sub); }

		private static final SyntacticType test_1995_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_1995_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_1995() { testInvalid(test_1995_sup,test_1995_sub); }

		private static final SyntacticType test_1996_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_1996_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_1996() { testInvalid(test_1996_sup,test_1996_sub); }

		private static final SyntacticType test_1997_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_1997_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_1997() { testInvalid(test_1997_sup,test_1997_sub); }

		private static final SyntacticType test_1998_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_1998_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_1998() { testValid(test_1998_sup,test_1998_sub); }

		private static final SyntacticType test_1999_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_1999_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_1999() { testValid(test_1999_sup,test_1999_sub); }

	}
	public static class Part_2 {
		private static final SyntacticType test_2000_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2000_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2000() { testInvalid(test_2000_sup,test_2000_sub); }

		private static final SyntacticType test_2001_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2001_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2001() { testInvalid(test_2001_sup,test_2001_sub); }

		private static final SyntacticType test_2002_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2002_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2002() { testValid(test_2002_sup,test_2002_sub); }

		private static final SyntacticType test_2003_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2003_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2003() { testInvalid(test_2003_sup,test_2003_sub); }

		private static final SyntacticType test_2004_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2004_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2004() { testValid(test_2004_sup,test_2004_sub); }

		private static final SyntacticType test_2005_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2005_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2005() { testInvalid(test_2005_sup,test_2005_sub); }

		private static final SyntacticType test_2006_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2006_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2006() { testInvalid(test_2006_sup,test_2006_sub); }

		private static final SyntacticType test_2007_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2007_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2007() { testInvalid(test_2007_sup,test_2007_sub); }

		private static final SyntacticType test_2008_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2008_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2008() { testInvalid(test_2008_sup,test_2008_sub); }

		private static final SyntacticType test_2009_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2009_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2009() { testInvalid(test_2009_sup,test_2009_sub); }

		private static final SyntacticType test_2010_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2010_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2010() { testInvalid(test_2010_sup,test_2010_sub); }

		private static final SyntacticType test_2011_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2011_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2011() { testInvalid(test_2011_sup,test_2011_sub); }

		private static final SyntacticType test_2012_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2012_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2012() { testInvalid(test_2012_sup,test_2012_sub); }

		private static final SyntacticType test_2013_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2013_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2013() { testValid(test_2013_sup,test_2013_sub); }

		private static final SyntacticType test_2014_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2014_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2014() { testInvalid(test_2014_sup,test_2014_sub); }

		private static final SyntacticType test_2015_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2015_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2015() { testInvalid(test_2015_sup,test_2015_sub); }

		private static final SyntacticType test_2016_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2016_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2016() { testValid(test_2016_sup,test_2016_sub); }

		private static final SyntacticType test_2017_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2017_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2017() { testInvalid(test_2017_sup,test_2017_sub); }

		private static final SyntacticType test_2018_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2018_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2018() { testValid(test_2018_sup,test_2018_sub); }

		private static final SyntacticType test_2019_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2019_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2019() { testValid(test_2019_sup,test_2019_sub); }

		private static final SyntacticType test_2020_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2020_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2020() { testInvalid(test_2020_sup,test_2020_sub); }

		private static final SyntacticType test_2021_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2021_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2021() { testValid(test_2021_sup,test_2021_sub); }

		private static final SyntacticType test_2022_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2022_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2022() { testValid(test_2022_sup,test_2022_sub); }

		private static final SyntacticType test_2023_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2023_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2023() { testValid(test_2023_sup,test_2023_sub); }

		private static final SyntacticType test_2024_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2024_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2024() { testInvalid(test_2024_sup,test_2024_sub); }

		private static final SyntacticType test_2025_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2025_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2025() { testInvalid(test_2025_sup,test_2025_sub); }

		private static final SyntacticType test_2026_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2026_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2026() { testInvalid(test_2026_sup,test_2026_sub); }

		private static final SyntacticType test_2027_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2027_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2027() { testInvalid(test_2027_sup,test_2027_sub); }

		private static final SyntacticType test_2028_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2028_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2028() { testInvalid(test_2028_sup,test_2028_sub); }

		private static final SyntacticType test_2029_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2029_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2029() { testInvalid(test_2029_sup,test_2029_sub); }

		private static final SyntacticType test_2030_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2030_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2030() { testInvalid(test_2030_sup,test_2030_sub); }

		private static final SyntacticType test_2031_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2031_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2031() { testInvalid(test_2031_sup,test_2031_sub); }

		private static final SyntacticType test_2032_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2032_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2032() { testValid(test_2032_sup,test_2032_sub); }

		private static final SyntacticType test_2033_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2033_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2033() { testInvalid(test_2033_sup,test_2033_sub); }

		private static final SyntacticType test_2034_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2034_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2034() { testValid(test_2034_sup,test_2034_sub); }

		private static final SyntacticType test_2035_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2035_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2035() { testInvalid(test_2035_sup,test_2035_sub); }

		private static final SyntacticType test_2036_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2036_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2036() { testInvalid(test_2036_sup,test_2036_sub); }

		private static final SyntacticType test_2037_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2037_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2037() { testInvalid(test_2037_sup,test_2037_sub); }

		private static final SyntacticType test_2038_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2038_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2038() { testInvalid(test_2038_sup,test_2038_sub); }

		private static final SyntacticType test_2039_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2039_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2039() { testInvalid(test_2039_sup,test_2039_sub); }

		private static final SyntacticType test_2040_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2040_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2040() { testInvalid(test_2040_sup,test_2040_sub); }

		private static final SyntacticType test_2041_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2041_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2041() { testInvalid(test_2041_sup,test_2041_sub); }

		private static final SyntacticType test_2042_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2042_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2042() { testInvalid(test_2042_sup,test_2042_sub); }

		private static final SyntacticType test_2043_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2043_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2043() { testInvalid(test_2043_sup,test_2043_sub); }

		private static final SyntacticType test_2044_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2044_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2044() { testInvalid(test_2044_sup,test_2044_sub); }

		private static final SyntacticType test_2045_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2045_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2045() { testInvalid(test_2045_sup,test_2045_sub); }

		private static final SyntacticType test_2046_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2046_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2046() { testInvalid(test_2046_sup,test_2046_sub); }

		private static final SyntacticType test_2047_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2047_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2047() { testInvalid(test_2047_sup,test_2047_sub); }

		private static final SyntacticType test_2048_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2048_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2048() { testInvalid(test_2048_sup,test_2048_sub); }

		private static final SyntacticType test_2049_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2049_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2049() { testInvalid(test_2049_sup,test_2049_sub); }

		private static final SyntacticType test_2050_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2050_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2050() { testInvalid(test_2050_sup,test_2050_sub); }

		private static final SyntacticType test_2051_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2051_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2051() { testInvalid(test_2051_sup,test_2051_sub); }

		private static final SyntacticType test_2052_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2052_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2052() { testInvalid(test_2052_sup,test_2052_sub); }

		private static final SyntacticType test_2053_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2053_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2053() { testInvalid(test_2053_sup,test_2053_sub); }

		private static final SyntacticType test_2054_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2054_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2054() { testInvalid(test_2054_sup,test_2054_sub); }

		private static final SyntacticType test_2055_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2055_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2055() { testInvalid(test_2055_sup,test_2055_sub); }

		private static final SyntacticType test_2056_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2056_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2056() { testInvalid(test_2056_sup,test_2056_sub); }

		private static final SyntacticType test_2057_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2057_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2057() { testInvalid(test_2057_sup,test_2057_sub); }

		private static final SyntacticType test_2058_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2058_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2058() { testInvalid(test_2058_sup,test_2058_sub); }

		private static final SyntacticType test_2059_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2059_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2059() { testInvalid(test_2059_sup,test_2059_sub); }

		private static final SyntacticType test_2060_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2060_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2060() { testInvalid(test_2060_sup,test_2060_sub); }

		private static final SyntacticType test_2061_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2061_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2061() { testInvalid(test_2061_sup,test_2061_sub); }

		private static final SyntacticType test_2062_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2062_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2062() { testInvalid(test_2062_sup,test_2062_sub); }

		private static final SyntacticType test_2063_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2063_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2063() { testInvalid(test_2063_sup,test_2063_sub); }

		private static final SyntacticType test_2064_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2064_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2064() { testInvalid(test_2064_sup,test_2064_sub); }

		private static final SyntacticType test_2065_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2065_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2065() { testInvalid(test_2065_sup,test_2065_sub); }

		private static final SyntacticType test_2066_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2066_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2066() { testInvalid(test_2066_sup,test_2066_sub); }

		private static final SyntacticType test_2067_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2067_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2067() { testInvalid(test_2067_sup,test_2067_sub); }

		private static final SyntacticType test_2068_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2068_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2068() { testInvalid(test_2068_sup,test_2068_sub); }

		private static final SyntacticType test_2069_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2069_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2069() { testInvalid(test_2069_sup,test_2069_sub); }

		private static final SyntacticType test_2070_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2070_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2070() { testInvalid(test_2070_sup,test_2070_sub); }

		private static final SyntacticType test_2071_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2071_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2071() { testInvalid(test_2071_sup,test_2071_sub); }

		private static final SyntacticType test_2072_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2072_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2072() { testInvalid(test_2072_sup,test_2072_sub); }

		private static final SyntacticType test_2073_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2073_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2073() { testInvalid(test_2073_sup,test_2073_sub); }

		private static final SyntacticType test_2074_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2074_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2074() { testInvalid(test_2074_sup,test_2074_sub); }

		private static final SyntacticType test_2075_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2075_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2075() { testInvalid(test_2075_sup,test_2075_sub); }

		private static final SyntacticType test_2076_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2076_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2076() { testInvalid(test_2076_sup,test_2076_sub); }

		private static final SyntacticType test_2077_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2077_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2077() { testInvalid(test_2077_sup,test_2077_sub); }

		private static final SyntacticType test_2078_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2078_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2078() { testInvalid(test_2078_sup,test_2078_sub); }

		private static final SyntacticType test_2079_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2079_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2079() { testInvalid(test_2079_sup,test_2079_sub); }

		private static final SyntacticType test_2080_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2080_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2080() { testInvalid(test_2080_sup,test_2080_sub); }

		private static final SyntacticType test_2081_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2081_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2081() { testInvalid(test_2081_sup,test_2081_sub); }

		private static final SyntacticType test_2082_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2082_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2082() { testInvalid(test_2082_sup,test_2082_sub); }

		private static final SyntacticType test_2083_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2083_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2083() { testInvalid(test_2083_sup,test_2083_sub); }

		private static final SyntacticType test_2084_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2084_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2084() { testInvalid(test_2084_sup,test_2084_sub); }

		private static final SyntacticType test_2085_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2085_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2085() { testInvalid(test_2085_sup,test_2085_sub); }

		private static final SyntacticType test_2086_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2086_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2086() { testInvalid(test_2086_sup,test_2086_sub); }

		private static final SyntacticType test_2087_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2087_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2087() { testInvalid(test_2087_sup,test_2087_sub); }

		private static final SyntacticType test_2088_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2088_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2088() { testInvalid(test_2088_sup,test_2088_sub); }

		private static final SyntacticType test_2089_sup = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		private static final SyntacticType test_2089_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2089() { testInvalid(test_2089_sup,test_2089_sub); }

		private static final SyntacticType test_2090_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2090_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2090() { testInvalid(test_2090_sup,test_2090_sub); }

		private static final SyntacticType test_2091_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2091_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2091() { testInvalid(test_2091_sup,test_2091_sub); }

		private static final SyntacticType test_2092_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2092_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2092() { testInvalid(test_2092_sup,test_2092_sub); }

		private static final SyntacticType test_2093_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2093_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2093() { testInvalid(test_2093_sup,test_2093_sub); }

		private static final SyntacticType test_2094_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2094_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2094() { testInvalid(test_2094_sup,test_2094_sub); }

		private static final SyntacticType test_2095_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2095_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2095() { testInvalid(test_2095_sup,test_2095_sub); }

		private static final SyntacticType test_2096_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2096_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2096() { testInvalid(test_2096_sup,test_2096_sub); }

		private static final SyntacticType test_2097_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2097_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2097() { testInvalid(test_2097_sup,test_2097_sub); }

		private static final SyntacticType test_2098_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2098_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2098() { testInvalid(test_2098_sup,test_2098_sub); }

		private static final SyntacticType test_2099_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2099_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2099() { testInvalid(test_2099_sup,test_2099_sub); }

		private static final SyntacticType test_2100_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2100_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2100() { testInvalid(test_2100_sup,test_2100_sub); }

		private static final SyntacticType test_2101_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2101_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2101() { testInvalid(test_2101_sup,test_2101_sub); }

		private static final SyntacticType test_2102_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2102_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2102() { testInvalid(test_2102_sup,test_2102_sub); }

		private static final SyntacticType test_2103_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2103_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2103() { testInvalid(test_2103_sup,test_2103_sub); }

		private static final SyntacticType test_2104_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2104_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2104() { testInvalid(test_2104_sup,test_2104_sub); }

		private static final SyntacticType test_2105_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2105_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2105() { testInvalid(test_2105_sup,test_2105_sub); }

		private static final SyntacticType test_2106_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2106_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2106() { testInvalid(test_2106_sup,test_2106_sub); }

		private static final SyntacticType test_2107_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2107_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2107() { testInvalid(test_2107_sup,test_2107_sub); }

		private static final SyntacticType test_2108_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2108_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2108() { testInvalid(test_2108_sup,test_2108_sub); }

		private static final SyntacticType test_2109_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2109_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2109() { testInvalid(test_2109_sup,test_2109_sub); }

		private static final SyntacticType test_2110_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2110_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2110() { testInvalid(test_2110_sup,test_2110_sub); }

		private static final SyntacticType test_2111_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2111_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2111() { testInvalid(test_2111_sup,test_2111_sub); }

		private static final SyntacticType test_2112_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2112_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2112() { testValid(test_2112_sup,test_2112_sub); }

		private static final SyntacticType test_2113_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2113_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2113() { testInvalid(test_2113_sup,test_2113_sub); }

		private static final SyntacticType test_2114_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2114_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2114() { testInvalid(test_2114_sup,test_2114_sub); }

		private static final SyntacticType test_2115_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2115_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2115() { testInvalid(test_2115_sup,test_2115_sub); }

		private static final SyntacticType test_2116_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2116_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2116() { testInvalid(test_2116_sup,test_2116_sub); }

		private static final SyntacticType test_2117_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2117_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2117() { testInvalid(test_2117_sup,test_2117_sub); }

		private static final SyntacticType test_2118_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2118_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2118() { testInvalid(test_2118_sup,test_2118_sub); }

		private static final SyntacticType test_2119_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2119_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2119() { testInvalid(test_2119_sup,test_2119_sub); }

		private static final SyntacticType test_2120_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2120_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2120() { testInvalid(test_2120_sup,test_2120_sub); }

		private static final SyntacticType test_2121_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2121_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2121() { testInvalid(test_2121_sup,test_2121_sub); }

		private static final SyntacticType test_2122_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2122_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2122() { testInvalid(test_2122_sup,test_2122_sub); }

		private static final SyntacticType test_2123_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2123_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2123() { testInvalid(test_2123_sup,test_2123_sub); }

		private static final SyntacticType test_2124_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2124_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2124() { testInvalid(test_2124_sup,test_2124_sub); }

		private static final SyntacticType test_2125_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2125_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2125() { testInvalid(test_2125_sup,test_2125_sub); }

		private static final SyntacticType test_2126_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2126_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2126() { testInvalid(test_2126_sup,test_2126_sub); }

		private static final SyntacticType test_2127_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2127_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2127() { testInvalid(test_2127_sup,test_2127_sub); }

		private static final SyntacticType test_2128_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2128_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2128() { testInvalid(test_2128_sup,test_2128_sub); }

		private static final SyntacticType test_2129_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2129_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2129() { testInvalid(test_2129_sup,test_2129_sub); }

		private static final SyntacticType test_2130_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2130_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2130() { testInvalid(test_2130_sup,test_2130_sub); }

		private static final SyntacticType test_2131_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2131_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2131() { testInvalid(test_2131_sup,test_2131_sub); }

		private static final SyntacticType test_2132_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2132_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2132() { testInvalid(test_2132_sup,test_2132_sub); }

		private static final SyntacticType test_2133_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2133_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2133() { testInvalid(test_2133_sup,test_2133_sub); }

		private static final SyntacticType test_2134_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2134_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2134() { testInvalid(test_2134_sup,test_2134_sub); }

		private static final SyntacticType test_2135_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2135_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2135() { testInvalid(test_2135_sup,test_2135_sub); }

		private static final SyntacticType test_2136_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2136_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2136() { testInvalid(test_2136_sup,test_2136_sub); }

		private static final SyntacticType test_2137_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2137_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2137() { testInvalid(test_2137_sup,test_2137_sub); }

		private static final SyntacticType test_2138_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2138_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2138() { testInvalid(test_2138_sup,test_2138_sub); }

		private static final SyntacticType test_2139_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2139_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2139() { testInvalid(test_2139_sup,test_2139_sub); }

		private static final SyntacticType test_2140_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2140_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2140() { testInvalid(test_2140_sup,test_2140_sub); }

		private static final SyntacticType test_2141_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2141_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2141() { testInvalid(test_2141_sup,test_2141_sub); }

		private static final SyntacticType test_2142_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2142_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2142() { testInvalid(test_2142_sup,test_2142_sub); }

		private static final SyntacticType test_2143_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2143_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2143() { testInvalid(test_2143_sup,test_2143_sub); }

		private static final SyntacticType test_2144_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2144_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2144() { testInvalid(test_2144_sup,test_2144_sub); }

		private static final SyntacticType test_2145_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2145_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2145() { testInvalid(test_2145_sup,test_2145_sub); }

		private static final SyntacticType test_2146_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2146_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2146() { testInvalid(test_2146_sup,test_2146_sub); }

		private static final SyntacticType test_2147_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2147_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2147() { testInvalid(test_2147_sup,test_2147_sub); }

		private static final SyntacticType test_2148_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2148_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2148() { testInvalid(test_2148_sup,test_2148_sub); }

		private static final SyntacticType test_2149_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2149_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2149() { testInvalid(test_2149_sup,test_2149_sub); }

		private static final SyntacticType test_2150_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2150_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2150() { testInvalid(test_2150_sup,test_2150_sub); }

		private static final SyntacticType test_2151_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2151_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2151() { testInvalid(test_2151_sup,test_2151_sub); }

		private static final SyntacticType test_2152_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2152_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2152() { testInvalid(test_2152_sup,test_2152_sub); }

		private static final SyntacticType test_2153_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2153_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2153() { testInvalid(test_2153_sup,test_2153_sub); }

		private static final SyntacticType test_2154_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2154_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2154() { testInvalid(test_2154_sup,test_2154_sub); }

		private static final SyntacticType test_2155_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2155_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2155() { testInvalid(test_2155_sup,test_2155_sub); }

		private static final SyntacticType test_2156_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2156_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2156() { testInvalid(test_2156_sup,test_2156_sub); }

		private static final SyntacticType test_2157_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2157_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2157() { testInvalid(test_2157_sup,test_2157_sub); }

		private static final SyntacticType test_2158_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2158_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2158() { testInvalid(test_2158_sup,test_2158_sub); }

		private static final SyntacticType test_2159_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2159_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2159() { testInvalid(test_2159_sup,test_2159_sub); }

		private static final SyntacticType test_2160_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2160_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2160() { testInvalid(test_2160_sup,test_2160_sub); }

		private static final SyntacticType test_2161_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2161_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2161() { testInvalid(test_2161_sup,test_2161_sub); }

		private static final SyntacticType test_2162_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2162_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2162() { testInvalid(test_2162_sup,test_2162_sub); }

		private static final SyntacticType test_2163_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2163_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2163() { testInvalid(test_2163_sup,test_2163_sub); }

		private static final SyntacticType test_2164_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2164_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2164() { testInvalid(test_2164_sup,test_2164_sub); }

		private static final SyntacticType test_2165_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2165_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2165() { testInvalid(test_2165_sup,test_2165_sub); }

		private static final SyntacticType test_2166_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2166_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2166() { testInvalid(test_2166_sup,test_2166_sub); }

		private static final SyntacticType test_2167_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2167_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2167() { testInvalid(test_2167_sup,test_2167_sub); }

		private static final SyntacticType test_2168_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2168_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2168() { testInvalid(test_2168_sup,test_2168_sub); }

		private static final SyntacticType test_2169_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2169_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2169() { testInvalid(test_2169_sup,test_2169_sub); }

		private static final SyntacticType test_2170_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2170_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2170() { testInvalid(test_2170_sup,test_2170_sub); }

		private static final SyntacticType test_2171_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2171_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2171() { testInvalid(test_2171_sup,test_2171_sub); }

		private static final SyntacticType test_2172_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2172_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2172() { testInvalid(test_2172_sup,test_2172_sub); }

		private static final SyntacticType test_2173_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2173_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2173() { testInvalid(test_2173_sup,test_2173_sub); }

		private static final SyntacticType test_2174_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2174_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2174() { testInvalid(test_2174_sup,test_2174_sub); }

		private static final SyntacticType test_2175_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2175_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2175() { testInvalid(test_2175_sup,test_2175_sub); }

		private static final SyntacticType test_2176_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2176_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2176() { testInvalid(test_2176_sup,test_2176_sub); }

		private static final SyntacticType test_2177_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2177_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2177() { testInvalid(test_2177_sup,test_2177_sub); }

		private static final SyntacticType test_2178_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2178_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2178() { testInvalid(test_2178_sup,test_2178_sub); }

		private static final SyntacticType test_2179_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2179_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2179() { testInvalid(test_2179_sup,test_2179_sub); }

		private static final SyntacticType test_2180_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2180_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2180() { testInvalid(test_2180_sup,test_2180_sub); }

		private static final SyntacticType test_2181_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2181_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2181() { testInvalid(test_2181_sup,test_2181_sub); }

		private static final SyntacticType test_2182_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2182_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2182() { testInvalid(test_2182_sup,test_2182_sub); }

		private static final SyntacticType test_2183_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2183_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2183() { testInvalid(test_2183_sup,test_2183_sub); }

		private static final SyntacticType test_2184_sup = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		private static final SyntacticType test_2184_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2184() { testInvalid(test_2184_sup,test_2184_sub); }

		private static final SyntacticType test_2185_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2185_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2185() { testInvalid(test_2185_sup,test_2185_sub); }

		private static final SyntacticType test_2186_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2186_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2186() { testInvalid(test_2186_sup,test_2186_sub); }

		private static final SyntacticType test_2187_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2187_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2187() { testInvalid(test_2187_sup,test_2187_sub); }

		private static final SyntacticType test_2188_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2188_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2188() { testInvalid(test_2188_sup,test_2188_sub); }

		private static final SyntacticType test_2189_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2189_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2189() { testInvalid(test_2189_sup,test_2189_sub); }

		private static final SyntacticType test_2190_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2190_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2190() { testInvalid(test_2190_sup,test_2190_sub); }

		private static final SyntacticType test_2191_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2191_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2191() { testInvalid(test_2191_sup,test_2191_sub); }

		private static final SyntacticType test_2192_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2192_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2192() { testInvalid(test_2192_sup,test_2192_sub); }

		private static final SyntacticType test_2193_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2193_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2193() { testInvalid(test_2193_sup,test_2193_sub); }

		private static final SyntacticType test_2194_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2194_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2194() { testInvalid(test_2194_sup,test_2194_sub); }

		private static final SyntacticType test_2195_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2195_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2195() { testInvalid(test_2195_sup,test_2195_sub); }

		private static final SyntacticType test_2196_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2196_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2196() { testInvalid(test_2196_sup,test_2196_sub); }

		private static final SyntacticType test_2197_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2197_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2197() { testInvalid(test_2197_sup,test_2197_sub); }

		private static final SyntacticType test_2198_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2198_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2198() { testInvalid(test_2198_sup,test_2198_sub); }

		private static final SyntacticType test_2199_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2199_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2199() { testInvalid(test_2199_sup,test_2199_sub); }

		private static final SyntacticType test_2200_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2200_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2200() { testInvalid(test_2200_sup,test_2200_sub); }

		private static final SyntacticType test_2201_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2201_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2201() { testInvalid(test_2201_sup,test_2201_sub); }

		private static final SyntacticType test_2202_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2202_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2202() { testInvalid(test_2202_sup,test_2202_sub); }

		private static final SyntacticType test_2203_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2203_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2203() { testInvalid(test_2203_sup,test_2203_sub); }

		private static final SyntacticType test_2204_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2204_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2204() { testInvalid(test_2204_sup,test_2204_sub); }

		private static final SyntacticType test_2205_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2205_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2205() { testInvalid(test_2205_sup,test_2205_sub); }

		private static final SyntacticType test_2206_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2206_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2206() { testInvalid(test_2206_sup,test_2206_sub); }

		private static final SyntacticType test_2207_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2207_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2207() { testInvalid(test_2207_sup,test_2207_sub); }

		private static final SyntacticType test_2208_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2208_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2208() { testValid(test_2208_sup,test_2208_sub); }

		private static final SyntacticType test_2209_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2209_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2209() { testInvalid(test_2209_sup,test_2209_sub); }

		private static final SyntacticType test_2210_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2210_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2210() { testInvalid(test_2210_sup,test_2210_sub); }

		private static final SyntacticType test_2211_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2211_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2211() { testInvalid(test_2211_sup,test_2211_sub); }

		private static final SyntacticType test_2212_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2212_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2212() { testInvalid(test_2212_sup,test_2212_sub); }

		private static final SyntacticType test_2213_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2213_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2213() { testInvalid(test_2213_sup,test_2213_sub); }

		private static final SyntacticType test_2214_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2214_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2214() { testInvalid(test_2214_sup,test_2214_sub); }

		private static final SyntacticType test_2215_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2215_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2215() { testInvalid(test_2215_sup,test_2215_sub); }

		private static final SyntacticType test_2216_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2216_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2216() { testInvalid(test_2216_sup,test_2216_sub); }

		private static final SyntacticType test_2217_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2217_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2217() { testInvalid(test_2217_sup,test_2217_sub); }

		private static final SyntacticType test_2218_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2218_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2218() { testInvalid(test_2218_sup,test_2218_sub); }

		private static final SyntacticType test_2219_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2219_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2219() { testInvalid(test_2219_sup,test_2219_sub); }

		private static final SyntacticType test_2220_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2220_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2220() { testInvalid(test_2220_sup,test_2220_sub); }

		private static final SyntacticType test_2221_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2221_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2221() { testInvalid(test_2221_sup,test_2221_sub); }

		private static final SyntacticType test_2222_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2222_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2222() { testValid(test_2222_sup,test_2222_sub); }

		private static final SyntacticType test_2223_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2223_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2223() { testInvalid(test_2223_sup,test_2223_sub); }

		private static final SyntacticType test_2224_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2224_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2224() { testInvalid(test_2224_sup,test_2224_sub); }

		private static final SyntacticType test_2225_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2225_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2225() { testInvalid(test_2225_sup,test_2225_sub); }

		private static final SyntacticType test_2226_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2226_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2226() { testInvalid(test_2226_sup,test_2226_sub); }

		private static final SyntacticType test_2227_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2227_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2227() { testInvalid(test_2227_sup,test_2227_sub); }

		private static final SyntacticType test_2228_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2228_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2228() { testInvalid(test_2228_sup,test_2228_sub); }

		private static final SyntacticType test_2229_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2229_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2229() { testInvalid(test_2229_sup,test_2229_sub); }

		private static final SyntacticType test_2230_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2230_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2230() { testInvalid(test_2230_sup,test_2230_sub); }

		private static final SyntacticType test_2231_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2231_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2231() { testInvalid(test_2231_sup,test_2231_sub); }

		private static final SyntacticType test_2232_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2232_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2232() { testInvalid(test_2232_sup,test_2232_sub); }

		private static final SyntacticType test_2233_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2233_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2233() { testInvalid(test_2233_sup,test_2233_sub); }

		private static final SyntacticType test_2234_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2234_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2234() { testInvalid(test_2234_sup,test_2234_sub); }

		private static final SyntacticType test_2235_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2235_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2235() { testInvalid(test_2235_sup,test_2235_sub); }

		private static final SyntacticType test_2236_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2236_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2236() { testInvalid(test_2236_sup,test_2236_sub); }

		private static final SyntacticType test_2237_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2237_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2237() { testInvalid(test_2237_sup,test_2237_sub); }

		private static final SyntacticType test_2238_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2238_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2238() { testInvalid(test_2238_sup,test_2238_sub); }

		private static final SyntacticType test_2239_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2239_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2239() { testInvalid(test_2239_sup,test_2239_sub); }

		private static final SyntacticType test_2240_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2240_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2240() { testInvalid(test_2240_sup,test_2240_sub); }

		private static final SyntacticType test_2241_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2241_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2241() { testInvalid(test_2241_sup,test_2241_sub); }

		private static final SyntacticType test_2242_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2242_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2242() { testInvalid(test_2242_sup,test_2242_sub); }

		private static final SyntacticType test_2243_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2243_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2243() { testInvalid(test_2243_sup,test_2243_sub); }

		private static final SyntacticType test_2244_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2244_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2244() { testInvalid(test_2244_sup,test_2244_sub); }

		private static final SyntacticType test_2245_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2245_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2245() { testInvalid(test_2245_sup,test_2245_sub); }

		private static final SyntacticType test_2246_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2246_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2246() { testInvalid(test_2246_sup,test_2246_sub); }

		private static final SyntacticType test_2247_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2247_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2247() { testInvalid(test_2247_sup,test_2247_sub); }

		private static final SyntacticType test_2248_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2248_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2248() { testInvalid(test_2248_sup,test_2248_sub); }

		private static final SyntacticType test_2249_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2249_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2249() { testInvalid(test_2249_sup,test_2249_sub); }

		private static final SyntacticType test_2250_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2250_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2250() { testInvalid(test_2250_sup,test_2250_sub); }

		private static final SyntacticType test_2251_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2251_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2251() { testInvalid(test_2251_sup,test_2251_sub); }

		private static final SyntacticType test_2252_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2252_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2252() { testInvalid(test_2252_sup,test_2252_sub); }

		private static final SyntacticType test_2253_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2253_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2253() { testInvalid(test_2253_sup,test_2253_sub); }

		private static final SyntacticType test_2254_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2254_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2254() { testInvalid(test_2254_sup,test_2254_sub); }

		private static final SyntacticType test_2255_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2255_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2255() { testInvalid(test_2255_sup,test_2255_sub); }

		private static final SyntacticType test_2256_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2256_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2256() { testInvalid(test_2256_sup,test_2256_sub); }

		private static final SyntacticType test_2257_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2257_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2257() { testInvalid(test_2257_sup,test_2257_sub); }

		private static final SyntacticType test_2258_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2258_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2258() { testInvalid(test_2258_sup,test_2258_sub); }

		private static final SyntacticType test_2259_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2259_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2259() { testInvalid(test_2259_sup,test_2259_sub); }

		private static final SyntacticType test_2260_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2260_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2260() { testInvalid(test_2260_sup,test_2260_sub); }

		private static final SyntacticType test_2261_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2261_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2261() { testInvalid(test_2261_sup,test_2261_sub); }

		private static final SyntacticType test_2262_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2262_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2262() { testInvalid(test_2262_sup,test_2262_sub); }

		private static final SyntacticType test_2263_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2263_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2263() { testInvalid(test_2263_sup,test_2263_sub); }

		private static final SyntacticType test_2264_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2264_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2264() { testInvalid(test_2264_sup,test_2264_sub); }

		private static final SyntacticType test_2265_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2265_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2265() { testInvalid(test_2265_sup,test_2265_sub); }

		private static final SyntacticType test_2266_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2266_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2266() { testInvalid(test_2266_sup,test_2266_sub); }

		private static final SyntacticType test_2267_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2267_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2267() { testInvalid(test_2267_sup,test_2267_sub); }

		private static final SyntacticType test_2268_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2268_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2268() { testInvalid(test_2268_sup,test_2268_sub); }

		private static final SyntacticType test_2269_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2269_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2269() { testInvalid(test_2269_sup,test_2269_sub); }

		private static final SyntacticType test_2270_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2270_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2270() { testInvalid(test_2270_sup,test_2270_sub); }

		private static final SyntacticType test_2271_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2271_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2271() { testInvalid(test_2271_sup,test_2271_sub); }

		private static final SyntacticType test_2272_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2272_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2272() { testInvalid(test_2272_sup,test_2272_sub); }

		private static final SyntacticType test_2273_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2273_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2273() { testInvalid(test_2273_sup,test_2273_sub); }

		private static final SyntacticType test_2274_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2274_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2274() { testInvalid(test_2274_sup,test_2274_sub); }

		private static final SyntacticType test_2275_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2275_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2275() { testInvalid(test_2275_sup,test_2275_sub); }

		private static final SyntacticType test_2276_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2276_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2276() { testInvalid(test_2276_sup,test_2276_sub); }

		private static final SyntacticType test_2277_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2277_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2277() { testInvalid(test_2277_sup,test_2277_sub); }

		private static final SyntacticType test_2278_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2278_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2278() { testInvalid(test_2278_sup,test_2278_sub); }

		private static final SyntacticType test_2279_sup = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		private static final SyntacticType test_2279_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2279() { testInvalid(test_2279_sup,test_2279_sub); }

		private static final SyntacticType test_2280_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2280_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2280() { testInvalid(test_2280_sup,test_2280_sub); }

		private static final SyntacticType test_2281_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2281_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2281() { testInvalid(test_2281_sup,test_2281_sub); }

		private static final SyntacticType test_2282_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2282_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2282() { testInvalid(test_2282_sup,test_2282_sub); }

		private static final SyntacticType test_2283_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2283_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2283() { testInvalid(test_2283_sup,test_2283_sub); }

		private static final SyntacticType test_2284_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2284_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2284() { testInvalid(test_2284_sup,test_2284_sub); }

		private static final SyntacticType test_2285_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2285_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2285() { testInvalid(test_2285_sup,test_2285_sub); }

		private static final SyntacticType test_2286_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2286_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2286() { testInvalid(test_2286_sup,test_2286_sub); }

		private static final SyntacticType test_2287_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2287_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2287() { testInvalid(test_2287_sup,test_2287_sub); }

		private static final SyntacticType test_2288_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2288_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2288() { testInvalid(test_2288_sup,test_2288_sub); }

		private static final SyntacticType test_2289_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2289_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2289() { testInvalid(test_2289_sup,test_2289_sub); }

		private static final SyntacticType test_2290_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2290_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2290() { testInvalid(test_2290_sup,test_2290_sub); }

		private static final SyntacticType test_2291_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2291_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2291() { testInvalid(test_2291_sup,test_2291_sub); }

		private static final SyntacticType test_2292_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2292_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2292() { testInvalid(test_2292_sup,test_2292_sub); }

		private static final SyntacticType test_2293_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2293_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2293() { testInvalid(test_2293_sup,test_2293_sub); }

		private static final SyntacticType test_2294_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2294_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2294() { testInvalid(test_2294_sup,test_2294_sub); }

		private static final SyntacticType test_2295_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2295_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2295() { testInvalid(test_2295_sup,test_2295_sub); }

		private static final SyntacticType test_2296_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2296_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2296() { testInvalid(test_2296_sup,test_2296_sub); }

		private static final SyntacticType test_2297_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2297_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2297() { testInvalid(test_2297_sup,test_2297_sub); }

		private static final SyntacticType test_2298_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2298_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2298() { testInvalid(test_2298_sup,test_2298_sub); }

		private static final SyntacticType test_2299_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2299_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2299() { testInvalid(test_2299_sup,test_2299_sub); }

		private static final SyntacticType test_2300_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2300_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2300() { testInvalid(test_2300_sup,test_2300_sub); }

		private static final SyntacticType test_2301_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2301_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2301() { testInvalid(test_2301_sup,test_2301_sub); }

		private static final SyntacticType test_2302_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2302_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2302() { testInvalid(test_2302_sup,test_2302_sub); }

		private static final SyntacticType test_2303_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2303_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2303() { testInvalid(test_2303_sup,test_2303_sub); }

		private static final SyntacticType test_2304_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2304_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2304() { testValid(test_2304_sup,test_2304_sub); }

		private static final SyntacticType test_2305_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2305_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2305() { testInvalid(test_2305_sup,test_2305_sub); }

		private static final SyntacticType test_2306_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2306_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2306() { testInvalid(test_2306_sup,test_2306_sub); }

		private static final SyntacticType test_2307_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2307_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2307() { testInvalid(test_2307_sup,test_2307_sub); }

		private static final SyntacticType test_2308_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2308_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2308() { testInvalid(test_2308_sup,test_2308_sub); }

		private static final SyntacticType test_2309_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2309_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2309() { testInvalid(test_2309_sup,test_2309_sub); }

		private static final SyntacticType test_2310_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2310_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2310() { testInvalid(test_2310_sup,test_2310_sub); }

		private static final SyntacticType test_2311_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2311_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2311() { testInvalid(test_2311_sup,test_2311_sub); }

		private static final SyntacticType test_2312_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2312_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2312() { testInvalid(test_2312_sup,test_2312_sub); }

		private static final SyntacticType test_2313_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2313_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2313() { testInvalid(test_2313_sup,test_2313_sub); }

		private static final SyntacticType test_2314_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2314_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2314() { testInvalid(test_2314_sup,test_2314_sub); }

		private static final SyntacticType test_2315_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2315_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2315() { testInvalid(test_2315_sup,test_2315_sub); }

		private static final SyntacticType test_2316_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2316_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2316() { testInvalid(test_2316_sup,test_2316_sub); }

		private static final SyntacticType test_2317_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2317_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2317() { testInvalid(test_2317_sup,test_2317_sub); }

		private static final SyntacticType test_2318_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2318_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2318() { testInvalid(test_2318_sup,test_2318_sub); }

		private static final SyntacticType test_2319_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2319_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2319() { testInvalid(test_2319_sup,test_2319_sub); }

		private static final SyntacticType test_2320_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2320_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2320() { testInvalid(test_2320_sup,test_2320_sub); }

		private static final SyntacticType test_2321_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2321_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2321() { testInvalid(test_2321_sup,test_2321_sub); }

		private static final SyntacticType test_2322_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2322_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2322() { testInvalid(test_2322_sup,test_2322_sub); }

		private static final SyntacticType test_2323_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2323_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2323() { testInvalid(test_2323_sup,test_2323_sub); }

		private static final SyntacticType test_2324_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2324_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2324() { testInvalid(test_2324_sup,test_2324_sub); }

		private static final SyntacticType test_2325_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2325_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2325() { testInvalid(test_2325_sup,test_2325_sub); }

		private static final SyntacticType test_2326_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2326_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2326() { testInvalid(test_2326_sup,test_2326_sub); }

		private static final SyntacticType test_2327_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2327_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2327() { testInvalid(test_2327_sup,test_2327_sub); }

		private static final SyntacticType test_2328_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2328_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2328() { testInvalid(test_2328_sup,test_2328_sub); }

		private static final SyntacticType test_2329_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2329_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2329() { testInvalid(test_2329_sup,test_2329_sub); }

		private static final SyntacticType test_2330_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2330_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2330() { testInvalid(test_2330_sup,test_2330_sub); }

		private static final SyntacticType test_2331_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2331_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2331() { testInvalid(test_2331_sup,test_2331_sub); }

		private static final SyntacticType test_2332_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2332_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2332() { testInvalid(test_2332_sup,test_2332_sub); }

		private static final SyntacticType test_2333_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2333_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2333() { testInvalid(test_2333_sup,test_2333_sub); }

		private static final SyntacticType test_2334_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2334_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2334() { testInvalid(test_2334_sup,test_2334_sub); }

		private static final SyntacticType test_2335_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2335_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2335() { testInvalid(test_2335_sup,test_2335_sub); }

		private static final SyntacticType test_2336_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2336_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2336() { testInvalid(test_2336_sup,test_2336_sub); }

		private static final SyntacticType test_2337_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2337_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2337() { testInvalid(test_2337_sup,test_2337_sub); }

		private static final SyntacticType test_2338_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2338_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2338() { testInvalid(test_2338_sup,test_2338_sub); }

		private static final SyntacticType test_2339_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2339_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2339() { testInvalid(test_2339_sup,test_2339_sub); }

		private static final SyntacticType test_2340_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2340_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2340() { testInvalid(test_2340_sup,test_2340_sub); }

		private static final SyntacticType test_2341_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2341_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2341() { testInvalid(test_2341_sup,test_2341_sub); }

		private static final SyntacticType test_2342_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2342_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2342() { testInvalid(test_2342_sup,test_2342_sub); }

		private static final SyntacticType test_2343_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2343_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2343() { testInvalid(test_2343_sup,test_2343_sub); }

		private static final SyntacticType test_2344_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2344_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2344() { testInvalid(test_2344_sup,test_2344_sub); }

		private static final SyntacticType test_2345_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2345_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2345() { testInvalid(test_2345_sup,test_2345_sub); }

		private static final SyntacticType test_2346_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2346_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2346() { testInvalid(test_2346_sup,test_2346_sub); }

		private static final SyntacticType test_2347_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2347_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2347() { testInvalid(test_2347_sup,test_2347_sub); }

		private static final SyntacticType test_2348_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2348_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2348() { testInvalid(test_2348_sup,test_2348_sub); }

		private static final SyntacticType test_2349_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2349_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2349() { testInvalid(test_2349_sup,test_2349_sub); }

		private static final SyntacticType test_2350_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2350_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2350() { testInvalid(test_2350_sup,test_2350_sub); }

		private static final SyntacticType test_2351_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2351_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2351() { testInvalid(test_2351_sup,test_2351_sub); }

		private static final SyntacticType test_2352_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2352_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2352() { testInvalid(test_2352_sup,test_2352_sub); }

		private static final SyntacticType test_2353_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2353_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2353() { testInvalid(test_2353_sup,test_2353_sub); }

		private static final SyntacticType test_2354_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2354_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2354() { testInvalid(test_2354_sup,test_2354_sub); }

		private static final SyntacticType test_2355_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2355_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2355() { testInvalid(test_2355_sup,test_2355_sub); }

		private static final SyntacticType test_2356_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2356_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2356() { testInvalid(test_2356_sup,test_2356_sub); }

		private static final SyntacticType test_2357_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2357_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2357() { testInvalid(test_2357_sup,test_2357_sub); }

		private static final SyntacticType test_2358_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2358_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2358() { testInvalid(test_2358_sup,test_2358_sub); }

		private static final SyntacticType test_2359_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2359_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2359() { testInvalid(test_2359_sup,test_2359_sub); }

		private static final SyntacticType test_2360_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2360_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2360() { testInvalid(test_2360_sup,test_2360_sub); }

		private static final SyntacticType test_2361_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2361_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2361() { testInvalid(test_2361_sup,test_2361_sub); }

		private static final SyntacticType test_2362_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2362_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2362() { testInvalid(test_2362_sup,test_2362_sub); }

		private static final SyntacticType test_2363_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2363_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2363() { testInvalid(test_2363_sup,test_2363_sub); }

		private static final SyntacticType test_2364_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2364_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2364() { testInvalid(test_2364_sup,test_2364_sub); }

		private static final SyntacticType test_2365_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2365_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2365() { testInvalid(test_2365_sup,test_2365_sub); }

		private static final SyntacticType test_2366_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2366_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2366() { testInvalid(test_2366_sup,test_2366_sub); }

		private static final SyntacticType test_2367_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2367_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2367() { testInvalid(test_2367_sup,test_2367_sub); }

		private static final SyntacticType test_2368_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2368_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2368() { testInvalid(test_2368_sup,test_2368_sub); }

		private static final SyntacticType test_2369_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2369_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2369() { testInvalid(test_2369_sup,test_2369_sub); }

		private static final SyntacticType test_2370_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2370_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2370() { testInvalid(test_2370_sup,test_2370_sub); }

		private static final SyntacticType test_2371_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2371_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2371() { testInvalid(test_2371_sup,test_2371_sub); }

		private static final SyntacticType test_2372_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2372_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2372() { testInvalid(test_2372_sup,test_2372_sub); }

		private static final SyntacticType test_2373_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2373_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2373() { testInvalid(test_2373_sup,test_2373_sub); }

		private static final SyntacticType test_2374_sup = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		private static final SyntacticType test_2374_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2374() { testInvalid(test_2374_sup,test_2374_sub); }

		private static final SyntacticType test_2375_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2375_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2375() { testInvalid(test_2375_sup,test_2375_sub); }

		private static final SyntacticType test_2376_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2376_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2376() { testInvalid(test_2376_sup,test_2376_sub); }

		private static final SyntacticType test_2377_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2377_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2377() { testValid(test_2377_sup,test_2377_sub); }

		private static final SyntacticType test_2378_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2378_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2378() { testInvalid(test_2378_sup,test_2378_sub); }

		private static final SyntacticType test_2379_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2379_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2379() { testInvalid(test_2379_sup,test_2379_sub); }

		private static final SyntacticType test_2380_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2380_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2380() { testInvalid(test_2380_sup,test_2380_sub); }

		private static final SyntacticType test_2381_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2381_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2381() { testInvalid(test_2381_sup,test_2381_sub); }

		private static final SyntacticType test_2382_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2382_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2382() { testInvalid(test_2382_sup,test_2382_sub); }

		private static final SyntacticType test_2383_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2383_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2383() { testInvalid(test_2383_sup,test_2383_sub); }

		private static final SyntacticType test_2384_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2384_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2384() { testInvalid(test_2384_sup,test_2384_sub); }

		private static final SyntacticType test_2385_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2385_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2385() { testInvalid(test_2385_sup,test_2385_sub); }

		private static final SyntacticType test_2386_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2386_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2386() { testInvalid(test_2386_sup,test_2386_sub); }

		private static final SyntacticType test_2387_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2387_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2387() { testInvalid(test_2387_sup,test_2387_sub); }

		private static final SyntacticType test_2388_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2388_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2388() { testInvalid(test_2388_sup,test_2388_sub); }

		private static final SyntacticType test_2389_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2389_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2389() { testInvalid(test_2389_sup,test_2389_sub); }

		private static final SyntacticType test_2390_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2390_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2390() { testInvalid(test_2390_sup,test_2390_sub); }

		private static final SyntacticType test_2391_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2391_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2391() { testInvalid(test_2391_sup,test_2391_sub); }

		private static final SyntacticType test_2392_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2392_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2392() { testInvalid(test_2392_sup,test_2392_sub); }

		private static final SyntacticType test_2393_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2393_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2393() { testInvalid(test_2393_sup,test_2393_sub); }

		private static final SyntacticType test_2394_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2394_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2394() { testInvalid(test_2394_sup,test_2394_sub); }

		private static final SyntacticType test_2395_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2395_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2395() { testInvalid(test_2395_sup,test_2395_sub); }

		private static final SyntacticType test_2396_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2396_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2396() { testInvalid(test_2396_sup,test_2396_sub); }

		private static final SyntacticType test_2397_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2397_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2397() { testInvalid(test_2397_sup,test_2397_sub); }

		private static final SyntacticType test_2398_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2398_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2398() { testInvalid(test_2398_sup,test_2398_sub); }

		private static final SyntacticType test_2399_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2399_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2399() { testInvalid(test_2399_sup,test_2399_sub); }

		private static final SyntacticType test_2400_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2400_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2400() { testValid(test_2400_sup,test_2400_sub); }

		private static final SyntacticType test_2401_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2401_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2401() { testInvalid(test_2401_sup,test_2401_sub); }

		private static final SyntacticType test_2402_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2402_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2402() { testInvalid(test_2402_sup,test_2402_sub); }

		private static final SyntacticType test_2403_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2403_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2403() { testInvalid(test_2403_sup,test_2403_sub); }

		private static final SyntacticType test_2404_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2404_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2404() { testInvalid(test_2404_sup,test_2404_sub); }

		private static final SyntacticType test_2405_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2405_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2405() { testInvalid(test_2405_sup,test_2405_sub); }

		private static final SyntacticType test_2406_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2406_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2406() { testInvalid(test_2406_sup,test_2406_sub); }

		private static final SyntacticType test_2407_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2407_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2407() { testInvalid(test_2407_sup,test_2407_sub); }

		private static final SyntacticType test_2408_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2408_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2408() { testInvalid(test_2408_sup,test_2408_sub); }

		private static final SyntacticType test_2409_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2409_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2409() { testInvalid(test_2409_sup,test_2409_sub); }

		private static final SyntacticType test_2410_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2410_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2410() { testInvalid(test_2410_sup,test_2410_sub); }

		private static final SyntacticType test_2411_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2411_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2411() { testInvalid(test_2411_sup,test_2411_sub); }

		private static final SyntacticType test_2412_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2412_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2412() { testInvalid(test_2412_sup,test_2412_sub); }

		private static final SyntacticType test_2413_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2413_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2413() { testInvalid(test_2413_sup,test_2413_sub); }

		private static final SyntacticType test_2414_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2414_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2414() { testInvalid(test_2414_sup,test_2414_sub); }

		private static final SyntacticType test_2415_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2415_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2415() { testInvalid(test_2415_sup,test_2415_sub); }

		private static final SyntacticType test_2416_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2416_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2416() { testInvalid(test_2416_sup,test_2416_sub); }

		private static final SyntacticType test_2417_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2417_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2417() { testInvalid(test_2417_sup,test_2417_sub); }

		private static final SyntacticType test_2418_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2418_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2418() { testInvalid(test_2418_sup,test_2418_sub); }

		private static final SyntacticType test_2419_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2419_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2419() { testInvalid(test_2419_sup,test_2419_sub); }

		private static final SyntacticType test_2420_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2420_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2420() { testInvalid(test_2420_sup,test_2420_sub); }

		private static final SyntacticType test_2421_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2421_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2421() { testInvalid(test_2421_sup,test_2421_sub); }

		private static final SyntacticType test_2422_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2422_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2422() { testInvalid(test_2422_sup,test_2422_sub); }

		private static final SyntacticType test_2423_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2423_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2423() { testInvalid(test_2423_sup,test_2423_sub); }

		private static final SyntacticType test_2424_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2424_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2424() { testInvalid(test_2424_sup,test_2424_sub); }

		private static final SyntacticType test_2425_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2425_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2425() { testInvalid(test_2425_sup,test_2425_sub); }

		private static final SyntacticType test_2426_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2426_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2426() { testInvalid(test_2426_sup,test_2426_sub); }

		private static final SyntacticType test_2427_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2427_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2427() { testInvalid(test_2427_sup,test_2427_sub); }

		private static final SyntacticType test_2428_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2428_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2428() { testInvalid(test_2428_sup,test_2428_sub); }

		private static final SyntacticType test_2429_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2429_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2429() { testInvalid(test_2429_sup,test_2429_sub); }

		private static final SyntacticType test_2430_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2430_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2430() { testInvalid(test_2430_sup,test_2430_sub); }

		private static final SyntacticType test_2431_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2431_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2431() { testInvalid(test_2431_sup,test_2431_sub); }

		private static final SyntacticType test_2432_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2432_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2432() { testInvalid(test_2432_sup,test_2432_sub); }

		private static final SyntacticType test_2433_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2433_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2433() { testInvalid(test_2433_sup,test_2433_sub); }

		private static final SyntacticType test_2434_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2434_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2434() { testInvalid(test_2434_sup,test_2434_sub); }

		private static final SyntacticType test_2435_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2435_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2435() { testInvalid(test_2435_sup,test_2435_sub); }

		private static final SyntacticType test_2436_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2436_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2436() { testInvalid(test_2436_sup,test_2436_sub); }

		private static final SyntacticType test_2437_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2437_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2437() { testInvalid(test_2437_sup,test_2437_sub); }

		private static final SyntacticType test_2438_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2438_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2438() { testInvalid(test_2438_sup,test_2438_sub); }

		private static final SyntacticType test_2439_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2439_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2439() { testInvalid(test_2439_sup,test_2439_sub); }

		private static final SyntacticType test_2440_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2440_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2440() { testInvalid(test_2440_sup,test_2440_sub); }

		private static final SyntacticType test_2441_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2441_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2441() { testInvalid(test_2441_sup,test_2441_sub); }

		private static final SyntacticType test_2442_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2442_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2442() { testInvalid(test_2442_sup,test_2442_sub); }

		private static final SyntacticType test_2443_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2443_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2443() { testInvalid(test_2443_sup,test_2443_sub); }

		private static final SyntacticType test_2444_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2444_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2444() { testInvalid(test_2444_sup,test_2444_sub); }

		private static final SyntacticType test_2445_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2445_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2445() { testInvalid(test_2445_sup,test_2445_sub); }

		private static final SyntacticType test_2446_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2446_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2446() { testInvalid(test_2446_sup,test_2446_sub); }

		private static final SyntacticType test_2447_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2447_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2447() { testInvalid(test_2447_sup,test_2447_sub); }

		private static final SyntacticType test_2448_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2448_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2448() { testInvalid(test_2448_sup,test_2448_sub); }

		private static final SyntacticType test_2449_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2449_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2449() { testInvalid(test_2449_sup,test_2449_sub); }

		private static final SyntacticType test_2450_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2450_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2450() { testInvalid(test_2450_sup,test_2450_sub); }

		private static final SyntacticType test_2451_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2451_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2451() { testInvalid(test_2451_sup,test_2451_sub); }

		private static final SyntacticType test_2452_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2452_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2452() { testInvalid(test_2452_sup,test_2452_sub); }

		private static final SyntacticType test_2453_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2453_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2453() { testInvalid(test_2453_sup,test_2453_sub); }

		private static final SyntacticType test_2454_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2454_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2454() { testInvalid(test_2454_sup,test_2454_sub); }

		private static final SyntacticType test_2455_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2455_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2455() { testInvalid(test_2455_sup,test_2455_sub); }

		private static final SyntacticType test_2456_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2456_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2456() { testInvalid(test_2456_sup,test_2456_sub); }

		private static final SyntacticType test_2457_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2457_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2457() { testInvalid(test_2457_sup,test_2457_sub); }

		private static final SyntacticType test_2458_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2458_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2458() { testInvalid(test_2458_sup,test_2458_sub); }

		private static final SyntacticType test_2459_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2459_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2459() { testInvalid(test_2459_sup,test_2459_sub); }

		private static final SyntacticType test_2460_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2460_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2460() { testInvalid(test_2460_sup,test_2460_sub); }

		private static final SyntacticType test_2461_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2461_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2461() { testInvalid(test_2461_sup,test_2461_sub); }

		private static final SyntacticType test_2462_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2462_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2462() { testInvalid(test_2462_sup,test_2462_sub); }

		private static final SyntacticType test_2463_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2463_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2463() { testInvalid(test_2463_sup,test_2463_sub); }

		private static final SyntacticType test_2464_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2464_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2464() { testInvalid(test_2464_sup,test_2464_sub); }

		private static final SyntacticType test_2465_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2465_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2465() { testInvalid(test_2465_sup,test_2465_sub); }

		private static final SyntacticType test_2466_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2466_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2466() { testInvalid(test_2466_sup,test_2466_sub); }

		private static final SyntacticType test_2467_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2467_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2467() { testInvalid(test_2467_sup,test_2467_sub); }

		private static final SyntacticType test_2468_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2468_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2468() { testInvalid(test_2468_sup,test_2468_sub); }

		private static final SyntacticType test_2469_sup = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		private static final SyntacticType test_2469_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2469() { testInvalid(test_2469_sup,test_2469_sub); }

		private static final SyntacticType test_2470_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2470_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2470() { testInvalid(test_2470_sup,test_2470_sub); }

		private static final SyntacticType test_2471_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2471_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2471() { testInvalid(test_2471_sup,test_2471_sub); }

		private static final SyntacticType test_2472_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2472_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2472() { testInvalid(test_2472_sup,test_2472_sub); }

		private static final SyntacticType test_2473_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2473_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2473() { testValid(test_2473_sup,test_2473_sub); }

		private static final SyntacticType test_2474_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2474_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2474() { testValid(test_2474_sup,test_2474_sub); }

		private static final SyntacticType test_2475_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2475_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2475() { testInvalid(test_2475_sup,test_2475_sub); }

		private static final SyntacticType test_2476_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2476_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2476() { testInvalid(test_2476_sup,test_2476_sub); }

		private static final SyntacticType test_2477_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2477_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2477() { testValid(test_2477_sup,test_2477_sub); }

		private static final SyntacticType test_2478_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2478_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2478() { testInvalid(test_2478_sup,test_2478_sub); }

		private static final SyntacticType test_2479_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2479_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2479() { testValid(test_2479_sup,test_2479_sub); }

		private static final SyntacticType test_2480_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2480_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2480() { testInvalid(test_2480_sup,test_2480_sub); }

		private static final SyntacticType test_2481_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2481_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2481() { testInvalid(test_2481_sup,test_2481_sub); }

		private static final SyntacticType test_2482_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2482_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2482() { testInvalid(test_2482_sup,test_2482_sub); }

		private static final SyntacticType test_2483_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2483_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2483() { testInvalid(test_2483_sup,test_2483_sub); }

		private static final SyntacticType test_2484_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2484_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2484() { testInvalid(test_2484_sup,test_2484_sub); }

		private static final SyntacticType test_2485_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2485_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2485() { testInvalid(test_2485_sup,test_2485_sub); }

		private static final SyntacticType test_2486_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2486_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2486() { testInvalid(test_2486_sup,test_2486_sub); }

		private static final SyntacticType test_2487_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2487_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2487() { testInvalid(test_2487_sup,test_2487_sub); }

		private static final SyntacticType test_2488_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2488_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2488() { testValid(test_2488_sup,test_2488_sub); }

		private static final SyntacticType test_2489_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2489_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2489() { testInvalid(test_2489_sup,test_2489_sub); }

		private static final SyntacticType test_2490_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2490_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2490() { testInvalid(test_2490_sup,test_2490_sub); }

		private static final SyntacticType test_2491_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2491_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2491() { testValid(test_2491_sup,test_2491_sub); }

		private static final SyntacticType test_2492_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2492_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2492() { testInvalid(test_2492_sup,test_2492_sub); }

		private static final SyntacticType test_2493_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2493_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2493() { testValid(test_2493_sup,test_2493_sub); }

		private static final SyntacticType test_2494_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2494_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2494() { testValid(test_2494_sup,test_2494_sub); }

		private static final SyntacticType test_2495_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2495_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2495() { testInvalid(test_2495_sup,test_2495_sub); }

		private static final SyntacticType test_2496_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2496_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2496() { testValid(test_2496_sup,test_2496_sub); }

		private static final SyntacticType test_2497_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2497_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2497() { testValid(test_2497_sup,test_2497_sub); }

		private static final SyntacticType test_2498_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2498_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2498() { testValid(test_2498_sup,test_2498_sub); }

		private static final SyntacticType test_2499_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2499_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2499() { testInvalid(test_2499_sup,test_2499_sub); }

		private static final SyntacticType test_2500_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2500_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2500() { testInvalid(test_2500_sup,test_2500_sub); }

		private static final SyntacticType test_2501_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2501_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2501() { testInvalid(test_2501_sup,test_2501_sub); }

		private static final SyntacticType test_2502_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2502_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2502() { testInvalid(test_2502_sup,test_2502_sub); }

		private static final SyntacticType test_2503_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2503_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2503() { testInvalid(test_2503_sup,test_2503_sub); }

		private static final SyntacticType test_2504_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2504_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2504() { testInvalid(test_2504_sup,test_2504_sub); }

		private static final SyntacticType test_2505_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2505_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2505() { testInvalid(test_2505_sup,test_2505_sub); }

		private static final SyntacticType test_2506_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2506_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2506() { testInvalid(test_2506_sup,test_2506_sub); }

		private static final SyntacticType test_2507_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2507_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2507() { testValid(test_2507_sup,test_2507_sub); }

		private static final SyntacticType test_2508_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2508_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2508() { testInvalid(test_2508_sup,test_2508_sub); }

		private static final SyntacticType test_2509_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2509_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2509() { testValid(test_2509_sup,test_2509_sub); }

		private static final SyntacticType test_2510_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2510_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2510() { testInvalid(test_2510_sup,test_2510_sub); }

		private static final SyntacticType test_2511_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2511_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2511() { testInvalid(test_2511_sup,test_2511_sub); }

		private static final SyntacticType test_2512_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2512_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2512() { testInvalid(test_2512_sup,test_2512_sub); }

		private static final SyntacticType test_2513_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2513_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2513() { testInvalid(test_2513_sup,test_2513_sub); }

		private static final SyntacticType test_2514_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2514_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2514() { testInvalid(test_2514_sup,test_2514_sub); }

		private static final SyntacticType test_2515_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2515_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2515() { testInvalid(test_2515_sup,test_2515_sub); }

		private static final SyntacticType test_2516_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2516_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2516() { testInvalid(test_2516_sup,test_2516_sub); }

		private static final SyntacticType test_2517_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2517_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2517() { testInvalid(test_2517_sup,test_2517_sub); }

		private static final SyntacticType test_2518_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2518_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2518() { testInvalid(test_2518_sup,test_2518_sub); }

		private static final SyntacticType test_2519_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2519_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2519() { testInvalid(test_2519_sup,test_2519_sub); }

		private static final SyntacticType test_2520_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2520_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2520() { testInvalid(test_2520_sup,test_2520_sub); }

		private static final SyntacticType test_2521_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2521_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2521() { testInvalid(test_2521_sup,test_2521_sub); }

		private static final SyntacticType test_2522_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2522_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2522() { testInvalid(test_2522_sup,test_2522_sub); }

		private static final SyntacticType test_2523_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2523_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2523() { testInvalid(test_2523_sup,test_2523_sub); }

		private static final SyntacticType test_2524_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2524_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2524() { testInvalid(test_2524_sup,test_2524_sub); }

		private static final SyntacticType test_2525_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2525_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2525() { testInvalid(test_2525_sup,test_2525_sub); }

		private static final SyntacticType test_2526_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2526_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2526() { testInvalid(test_2526_sup,test_2526_sub); }

		private static final SyntacticType test_2527_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2527_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2527() { testInvalid(test_2527_sup,test_2527_sub); }

		private static final SyntacticType test_2528_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2528_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2528() { testInvalid(test_2528_sup,test_2528_sub); }

		private static final SyntacticType test_2529_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2529_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2529() { testInvalid(test_2529_sup,test_2529_sub); }

		private static final SyntacticType test_2530_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2530_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2530() { testInvalid(test_2530_sup,test_2530_sub); }

		private static final SyntacticType test_2531_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2531_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2531() { testInvalid(test_2531_sup,test_2531_sub); }

		private static final SyntacticType test_2532_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2532_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2532() { testInvalid(test_2532_sup,test_2532_sub); }

		private static final SyntacticType test_2533_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2533_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2533() { testInvalid(test_2533_sup,test_2533_sub); }

		private static final SyntacticType test_2534_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2534_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2534() { testInvalid(test_2534_sup,test_2534_sub); }

		private static final SyntacticType test_2535_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2535_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2535() { testInvalid(test_2535_sup,test_2535_sub); }

		private static final SyntacticType test_2536_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2536_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2536() { testInvalid(test_2536_sup,test_2536_sub); }

		private static final SyntacticType test_2537_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2537_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2537() { testInvalid(test_2537_sup,test_2537_sub); }

		private static final SyntacticType test_2538_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2538_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2538() { testInvalid(test_2538_sup,test_2538_sub); }

		private static final SyntacticType test_2539_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2539_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2539() { testInvalid(test_2539_sup,test_2539_sub); }

		private static final SyntacticType test_2540_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2540_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2540() { testInvalid(test_2540_sup,test_2540_sub); }

		private static final SyntacticType test_2541_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2541_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2541() { testInvalid(test_2541_sup,test_2541_sub); }

		private static final SyntacticType test_2542_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2542_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2542() { testInvalid(test_2542_sup,test_2542_sub); }

		private static final SyntacticType test_2543_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2543_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2543() { testInvalid(test_2543_sup,test_2543_sub); }

		private static final SyntacticType test_2544_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2544_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2544() { testInvalid(test_2544_sup,test_2544_sub); }

		private static final SyntacticType test_2545_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2545_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2545() { testInvalid(test_2545_sup,test_2545_sub); }

		private static final SyntacticType test_2546_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2546_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2546() { testInvalid(test_2546_sup,test_2546_sub); }

		private static final SyntacticType test_2547_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2547_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2547() { testInvalid(test_2547_sup,test_2547_sub); }

		private static final SyntacticType test_2548_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2548_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2548() { testInvalid(test_2548_sup,test_2548_sub); }

		private static final SyntacticType test_2549_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2549_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2549() { testInvalid(test_2549_sup,test_2549_sub); }

		private static final SyntacticType test_2550_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2550_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2550() { testInvalid(test_2550_sup,test_2550_sub); }

		private static final SyntacticType test_2551_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2551_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2551() { testInvalid(test_2551_sup,test_2551_sub); }

		private static final SyntacticType test_2552_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2552_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2552() { testInvalid(test_2552_sup,test_2552_sub); }

		private static final SyntacticType test_2553_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2553_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2553() { testInvalid(test_2553_sup,test_2553_sub); }

		private static final SyntacticType test_2554_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2554_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2554() { testInvalid(test_2554_sup,test_2554_sub); }

		private static final SyntacticType test_2555_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2555_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2555() { testInvalid(test_2555_sup,test_2555_sub); }

		private static final SyntacticType test_2556_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2556_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2556() { testInvalid(test_2556_sup,test_2556_sub); }

		private static final SyntacticType test_2557_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2557_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2557() { testInvalid(test_2557_sup,test_2557_sub); }

		private static final SyntacticType test_2558_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2558_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2558() { testInvalid(test_2558_sup,test_2558_sub); }

		private static final SyntacticType test_2559_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2559_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2559() { testInvalid(test_2559_sup,test_2559_sub); }

		private static final SyntacticType test_2560_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2560_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2560() { testInvalid(test_2560_sup,test_2560_sub); }

		private static final SyntacticType test_2561_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2561_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2561() { testInvalid(test_2561_sup,test_2561_sub); }

		private static final SyntacticType test_2562_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2562_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2562() { testInvalid(test_2562_sup,test_2562_sub); }

		private static final SyntacticType test_2563_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2563_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2563() { testInvalid(test_2563_sup,test_2563_sub); }

		private static final SyntacticType test_2564_sup = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		private static final SyntacticType test_2564_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2564() { testInvalid(test_2564_sup,test_2564_sub); }

		private static final SyntacticType test_2565_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2565_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2565() { testInvalid(test_2565_sup,test_2565_sub); }

		private static final SyntacticType test_2566_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2566_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2566() { testInvalid(test_2566_sup,test_2566_sub); }

		private static final SyntacticType test_2567_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2567_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2567() { testInvalid(test_2567_sup,test_2567_sub); }

		private static final SyntacticType test_2568_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2568_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2568() { testInvalid(test_2568_sup,test_2568_sub); }

		private static final SyntacticType test_2569_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2569_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2569() { testInvalid(test_2569_sup,test_2569_sub); }

		private static final SyntacticType test_2570_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2570_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2570() { testInvalid(test_2570_sup,test_2570_sub); }

		private static final SyntacticType test_2571_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2571_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2571() { testInvalid(test_2571_sup,test_2571_sub); }

		private static final SyntacticType test_2572_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2572_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2572() { testInvalid(test_2572_sup,test_2572_sub); }

		private static final SyntacticType test_2573_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2573_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2573() { testInvalid(test_2573_sup,test_2573_sub); }

		private static final SyntacticType test_2574_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2574_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2574() { testValid(test_2574_sup,test_2574_sub); }

		private static final SyntacticType test_2575_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2575_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2575() { testInvalid(test_2575_sup,test_2575_sub); }

		private static final SyntacticType test_2576_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2576_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2576() { testInvalid(test_2576_sup,test_2576_sub); }

		private static final SyntacticType test_2577_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2577_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2577() { testInvalid(test_2577_sup,test_2577_sub); }

		private static final SyntacticType test_2578_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2578_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2578() { testInvalid(test_2578_sup,test_2578_sub); }

		private static final SyntacticType test_2579_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2579_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2579() { testInvalid(test_2579_sup,test_2579_sub); }

		private static final SyntacticType test_2580_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2580_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2580() { testInvalid(test_2580_sup,test_2580_sub); }

		private static final SyntacticType test_2581_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2581_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2581() { testInvalid(test_2581_sup,test_2581_sub); }

		private static final SyntacticType test_2582_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2582_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2582() { testInvalid(test_2582_sup,test_2582_sub); }

		private static final SyntacticType test_2583_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2583_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2583() { testInvalid(test_2583_sup,test_2583_sub); }

		private static final SyntacticType test_2584_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2584_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2584() { testInvalid(test_2584_sup,test_2584_sub); }

		private static final SyntacticType test_2585_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2585_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2585() { testInvalid(test_2585_sup,test_2585_sub); }

		private static final SyntacticType test_2586_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2586_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2586() { testInvalid(test_2586_sup,test_2586_sub); }

		private static final SyntacticType test_2587_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2587_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2587() { testInvalid(test_2587_sup,test_2587_sub); }

		private static final SyntacticType test_2588_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2588_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2588() { testInvalid(test_2588_sup,test_2588_sub); }

		private static final SyntacticType test_2589_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2589_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2589() { testInvalid(test_2589_sup,test_2589_sub); }

		private static final SyntacticType test_2590_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2590_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2590() { testInvalid(test_2590_sup,test_2590_sub); }

		private static final SyntacticType test_2591_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2591_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2591() { testInvalid(test_2591_sup,test_2591_sub); }

		private static final SyntacticType test_2592_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2592_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2592() { testValid(test_2592_sup,test_2592_sub); }

		private static final SyntacticType test_2593_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2593_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2593() { testInvalid(test_2593_sup,test_2593_sub); }

		private static final SyntacticType test_2594_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2594_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2594() { testInvalid(test_2594_sup,test_2594_sub); }

		private static final SyntacticType test_2595_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2595_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2595() { testInvalid(test_2595_sup,test_2595_sub); }

		private static final SyntacticType test_2596_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2596_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2596() { testInvalid(test_2596_sup,test_2596_sub); }

		private static final SyntacticType test_2597_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2597_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2597() { testInvalid(test_2597_sup,test_2597_sub); }

		private static final SyntacticType test_2598_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2598_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2598() { testInvalid(test_2598_sup,test_2598_sub); }

		private static final SyntacticType test_2599_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2599_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2599() { testInvalid(test_2599_sup,test_2599_sub); }

		private static final SyntacticType test_2600_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2600_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2600() { testInvalid(test_2600_sup,test_2600_sub); }

		private static final SyntacticType test_2601_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2601_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2601() { testInvalid(test_2601_sup,test_2601_sub); }

		private static final SyntacticType test_2602_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2602_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2602() { testInvalid(test_2602_sup,test_2602_sub); }

		private static final SyntacticType test_2603_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2603_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2603() { testInvalid(test_2603_sup,test_2603_sub); }

		private static final SyntacticType test_2604_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2604_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2604() { testInvalid(test_2604_sup,test_2604_sub); }

		private static final SyntacticType test_2605_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2605_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2605() { testInvalid(test_2605_sup,test_2605_sub); }

		private static final SyntacticType test_2606_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2606_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2606() { testInvalid(test_2606_sup,test_2606_sub); }

		private static final SyntacticType test_2607_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2607_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2607() { testInvalid(test_2607_sup,test_2607_sub); }

		private static final SyntacticType test_2608_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2608_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2608() { testInvalid(test_2608_sup,test_2608_sub); }

		private static final SyntacticType test_2609_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2609_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2609() { testInvalid(test_2609_sup,test_2609_sub); }

		private static final SyntacticType test_2610_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2610_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2610() { testInvalid(test_2610_sup,test_2610_sub); }

		private static final SyntacticType test_2611_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2611_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2611() { testInvalid(test_2611_sup,test_2611_sub); }

		private static final SyntacticType test_2612_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2612_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2612() { testInvalid(test_2612_sup,test_2612_sub); }

		private static final SyntacticType test_2613_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2613_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2613() { testInvalid(test_2613_sup,test_2613_sub); }

		private static final SyntacticType test_2614_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2614_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2614() { testInvalid(test_2614_sup,test_2614_sub); }

		private static final SyntacticType test_2615_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2615_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2615() { testInvalid(test_2615_sup,test_2615_sub); }

		private static final SyntacticType test_2616_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2616_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2616() { testInvalid(test_2616_sup,test_2616_sub); }

		private static final SyntacticType test_2617_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2617_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2617() { testInvalid(test_2617_sup,test_2617_sub); }

		private static final SyntacticType test_2618_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2618_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2618() { testInvalid(test_2618_sup,test_2618_sub); }

		private static final SyntacticType test_2619_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2619_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2619() { testInvalid(test_2619_sup,test_2619_sub); }

		private static final SyntacticType test_2620_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2620_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2620() { testInvalid(test_2620_sup,test_2620_sub); }

		private static final SyntacticType test_2621_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2621_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2621() { testInvalid(test_2621_sup,test_2621_sub); }

		private static final SyntacticType test_2622_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2622_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2622() { testInvalid(test_2622_sup,test_2622_sub); }

		private static final SyntacticType test_2623_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2623_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2623() { testInvalid(test_2623_sup,test_2623_sub); }

		private static final SyntacticType test_2624_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2624_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2624() { testInvalid(test_2624_sup,test_2624_sub); }

		private static final SyntacticType test_2625_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2625_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2625() { testInvalid(test_2625_sup,test_2625_sub); }

		private static final SyntacticType test_2626_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2626_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2626() { testInvalid(test_2626_sup,test_2626_sub); }

		private static final SyntacticType test_2627_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2627_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2627() { testInvalid(test_2627_sup,test_2627_sub); }

		private static final SyntacticType test_2628_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2628_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2628() { testInvalid(test_2628_sup,test_2628_sub); }

		private static final SyntacticType test_2629_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2629_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2629() { testInvalid(test_2629_sup,test_2629_sub); }

		private static final SyntacticType test_2630_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2630_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2630() { testInvalid(test_2630_sup,test_2630_sub); }

		private static final SyntacticType test_2631_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2631_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2631() { testInvalid(test_2631_sup,test_2631_sub); }

		private static final SyntacticType test_2632_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2632_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2632() { testInvalid(test_2632_sup,test_2632_sub); }

		private static final SyntacticType test_2633_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2633_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2633() { testInvalid(test_2633_sup,test_2633_sub); }

		private static final SyntacticType test_2634_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2634_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2634() { testInvalid(test_2634_sup,test_2634_sub); }

		private static final SyntacticType test_2635_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2635_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2635() { testInvalid(test_2635_sup,test_2635_sub); }

		private static final SyntacticType test_2636_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2636_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2636() { testInvalid(test_2636_sup,test_2636_sub); }

		private static final SyntacticType test_2637_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2637_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2637() { testInvalid(test_2637_sup,test_2637_sub); }

		private static final SyntacticType test_2638_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2638_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2638() { testInvalid(test_2638_sup,test_2638_sub); }

		private static final SyntacticType test_2639_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2639_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2639() { testInvalid(test_2639_sup,test_2639_sub); }

		private static final SyntacticType test_2640_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2640_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2640() { testInvalid(test_2640_sup,test_2640_sub); }

		private static final SyntacticType test_2641_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2641_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2641() { testInvalid(test_2641_sup,test_2641_sub); }

		private static final SyntacticType test_2642_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2642_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2642() { testInvalid(test_2642_sup,test_2642_sub); }

		private static final SyntacticType test_2643_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2643_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2643() { testInvalid(test_2643_sup,test_2643_sub); }

		private static final SyntacticType test_2644_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2644_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2644() { testInvalid(test_2644_sup,test_2644_sub); }

		private static final SyntacticType test_2645_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2645_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2645() { testInvalid(test_2645_sup,test_2645_sub); }

		private static final SyntacticType test_2646_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2646_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2646() { testInvalid(test_2646_sup,test_2646_sub); }

		private static final SyntacticType test_2647_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2647_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2647() { testInvalid(test_2647_sup,test_2647_sub); }

		private static final SyntacticType test_2648_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2648_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2648() { testInvalid(test_2648_sup,test_2648_sub); }

		private static final SyntacticType test_2649_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2649_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2649() { testInvalid(test_2649_sup,test_2649_sub); }

		private static final SyntacticType test_2650_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2650_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2650() { testInvalid(test_2650_sup,test_2650_sub); }

		private static final SyntacticType test_2651_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2651_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2651() { testInvalid(test_2651_sup,test_2651_sub); }

		private static final SyntacticType test_2652_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2652_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2652() { testInvalid(test_2652_sup,test_2652_sub); }

		private static final SyntacticType test_2653_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2653_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2653() { testInvalid(test_2653_sup,test_2653_sub); }

		private static final SyntacticType test_2654_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2654_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2654() { testInvalid(test_2654_sup,test_2654_sub); }

		private static final SyntacticType test_2655_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2655_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2655() { testInvalid(test_2655_sup,test_2655_sub); }

		private static final SyntacticType test_2656_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2656_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2656() { testInvalid(test_2656_sup,test_2656_sub); }

		private static final SyntacticType test_2657_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2657_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2657() { testInvalid(test_2657_sup,test_2657_sub); }

		private static final SyntacticType test_2658_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2658_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2658() { testInvalid(test_2658_sup,test_2658_sub); }

		private static final SyntacticType test_2659_sup = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		private static final SyntacticType test_2659_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2659() { testInvalid(test_2659_sup,test_2659_sub); }

		private static final SyntacticType test_2660_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2660_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2660() { testInvalid(test_2660_sup,test_2660_sub); }

		private static final SyntacticType test_2661_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2661_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2661() { testInvalid(test_2661_sup,test_2661_sub); }

		private static final SyntacticType test_2662_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2662_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2662() { testInvalid(test_2662_sup,test_2662_sub); }

		private static final SyntacticType test_2663_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2663_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2663() { testInvalid(test_2663_sup,test_2663_sub); }

		private static final SyntacticType test_2664_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2664_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2664() { testInvalid(test_2664_sup,test_2664_sub); }

		private static final SyntacticType test_2665_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2665_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2665() { testInvalid(test_2665_sup,test_2665_sub); }

		private static final SyntacticType test_2666_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2666_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2666() { testInvalid(test_2666_sup,test_2666_sub); }

		private static final SyntacticType test_2667_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2667_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2667() { testInvalid(test_2667_sup,test_2667_sub); }

		private static final SyntacticType test_2668_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2668_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2668() { testInvalid(test_2668_sup,test_2668_sub); }

		private static final SyntacticType test_2669_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2669_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2669() { testInvalid(test_2669_sup,test_2669_sub); }

		private static final SyntacticType test_2670_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2670_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2670() { testInvalid(test_2670_sup,test_2670_sub); }

		private static final SyntacticType test_2671_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2671_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2671() { testInvalid(test_2671_sup,test_2671_sub); }

		private static final SyntacticType test_2672_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2672_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2672() { testInvalid(test_2672_sup,test_2672_sub); }

		private static final SyntacticType test_2673_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2673_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2673() { testInvalid(test_2673_sup,test_2673_sub); }

		private static final SyntacticType test_2674_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2674_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2674() { testInvalid(test_2674_sup,test_2674_sub); }

		private static final SyntacticType test_2675_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2675_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2675() { testInvalid(test_2675_sup,test_2675_sub); }

		private static final SyntacticType test_2676_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2676_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2676() { testInvalid(test_2676_sup,test_2676_sub); }

		private static final SyntacticType test_2677_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2677_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2677() { testInvalid(test_2677_sup,test_2677_sub); }

		private static final SyntacticType test_2678_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2678_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2678() { testInvalid(test_2678_sup,test_2678_sub); }

		private static final SyntacticType test_2679_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2679_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2679() { testInvalid(test_2679_sup,test_2679_sub); }

		private static final SyntacticType test_2680_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2680_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2680() { testInvalid(test_2680_sup,test_2680_sub); }

		private static final SyntacticType test_2681_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2681_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2681() { testInvalid(test_2681_sup,test_2681_sub); }

		private static final SyntacticType test_2682_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2682_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2682() { testInvalid(test_2682_sup,test_2682_sub); }

		private static final SyntacticType test_2683_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2683_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2683() { testInvalid(test_2683_sup,test_2683_sub); }

		private static final SyntacticType test_2684_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2684_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2684() { testInvalid(test_2684_sup,test_2684_sub); }

		private static final SyntacticType test_2685_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2685_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2685() { testInvalid(test_2685_sup,test_2685_sub); }

		private static final SyntacticType test_2686_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2686_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2686() { testInvalid(test_2686_sup,test_2686_sub); }

		private static final SyntacticType test_2687_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2687_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2687() { testInvalid(test_2687_sup,test_2687_sub); }

		private static final SyntacticType test_2688_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2688_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2688() { testValid(test_2688_sup,test_2688_sub); }

		private static final SyntacticType test_2689_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2689_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2689() { testInvalid(test_2689_sup,test_2689_sub); }

		private static final SyntacticType test_2690_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2690_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2690() { testInvalid(test_2690_sup,test_2690_sub); }

		private static final SyntacticType test_2691_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2691_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2691() { testInvalid(test_2691_sup,test_2691_sub); }

		private static final SyntacticType test_2692_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2692_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2692() { testInvalid(test_2692_sup,test_2692_sub); }

		private static final SyntacticType test_2693_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2693_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2693() { testInvalid(test_2693_sup,test_2693_sub); }

		private static final SyntacticType test_2694_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2694_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2694() { testInvalid(test_2694_sup,test_2694_sub); }

		private static final SyntacticType test_2695_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2695_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2695() { testInvalid(test_2695_sup,test_2695_sub); }

		private static final SyntacticType test_2696_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2696_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2696() { testInvalid(test_2696_sup,test_2696_sub); }

		private static final SyntacticType test_2697_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2697_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2697() { testInvalid(test_2697_sup,test_2697_sub); }

		private static final SyntacticType test_2698_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2698_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2698() { testInvalid(test_2698_sup,test_2698_sub); }

		private static final SyntacticType test_2699_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2699_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2699() { testInvalid(test_2699_sup,test_2699_sub); }

		private static final SyntacticType test_2700_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2700_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2700() { testInvalid(test_2700_sup,test_2700_sub); }

		private static final SyntacticType test_2701_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2701_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2701() { testInvalid(test_2701_sup,test_2701_sub); }

		private static final SyntacticType test_2702_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2702_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2702() { testInvalid(test_2702_sup,test_2702_sub); }

		private static final SyntacticType test_2703_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2703_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2703() { testInvalid(test_2703_sup,test_2703_sub); }

		private static final SyntacticType test_2704_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2704_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2704() { testInvalid(test_2704_sup,test_2704_sub); }

		private static final SyntacticType test_2705_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2705_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2705() { testInvalid(test_2705_sup,test_2705_sub); }

		private static final SyntacticType test_2706_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2706_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2706() { testInvalid(test_2706_sup,test_2706_sub); }

		private static final SyntacticType test_2707_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2707_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2707() { testInvalid(test_2707_sup,test_2707_sub); }

		private static final SyntacticType test_2708_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2708_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2708() { testInvalid(test_2708_sup,test_2708_sub); }

		private static final SyntacticType test_2709_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2709_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2709() { testInvalid(test_2709_sup,test_2709_sub); }

		private static final SyntacticType test_2710_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2710_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2710() { testInvalid(test_2710_sup,test_2710_sub); }

		private static final SyntacticType test_2711_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2711_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2711() { testInvalid(test_2711_sup,test_2711_sub); }

		private static final SyntacticType test_2712_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2712_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2712() { testInvalid(test_2712_sup,test_2712_sub); }

		private static final SyntacticType test_2713_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2713_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2713() { testInvalid(test_2713_sup,test_2713_sub); }

		private static final SyntacticType test_2714_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2714_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2714() { testInvalid(test_2714_sup,test_2714_sub); }

		private static final SyntacticType test_2715_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2715_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2715() { testInvalid(test_2715_sup,test_2715_sub); }

		private static final SyntacticType test_2716_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2716_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2716() { testInvalid(test_2716_sup,test_2716_sub); }

		private static final SyntacticType test_2717_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2717_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2717() { testInvalid(test_2717_sup,test_2717_sub); }

		private static final SyntacticType test_2718_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2718_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2718() { testInvalid(test_2718_sup,test_2718_sub); }

		private static final SyntacticType test_2719_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2719_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2719() { testInvalid(test_2719_sup,test_2719_sub); }

		private static final SyntacticType test_2720_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2720_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2720() { testInvalid(test_2720_sup,test_2720_sub); }

		private static final SyntacticType test_2721_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2721_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2721() { testInvalid(test_2721_sup,test_2721_sub); }

		private static final SyntacticType test_2722_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2722_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2722() { testInvalid(test_2722_sup,test_2722_sub); }

		private static final SyntacticType test_2723_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2723_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2723() { testInvalid(test_2723_sup,test_2723_sub); }

		private static final SyntacticType test_2724_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2724_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2724() { testInvalid(test_2724_sup,test_2724_sub); }

		private static final SyntacticType test_2725_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2725_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2725() { testInvalid(test_2725_sup,test_2725_sub); }

		private static final SyntacticType test_2726_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2726_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2726() { testInvalid(test_2726_sup,test_2726_sub); }

		private static final SyntacticType test_2727_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2727_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2727() { testInvalid(test_2727_sup,test_2727_sub); }

		private static final SyntacticType test_2728_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2728_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2728() { testInvalid(test_2728_sup,test_2728_sub); }

		private static final SyntacticType test_2729_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2729_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2729() { testInvalid(test_2729_sup,test_2729_sub); }

		private static final SyntacticType test_2730_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2730_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2730() { testInvalid(test_2730_sup,test_2730_sub); }

		private static final SyntacticType test_2731_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2731_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2731() { testInvalid(test_2731_sup,test_2731_sub); }

		private static final SyntacticType test_2732_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2732_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2732() { testInvalid(test_2732_sup,test_2732_sub); }

		private static final SyntacticType test_2733_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2733_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2733() { testInvalid(test_2733_sup,test_2733_sub); }

		private static final SyntacticType test_2734_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2734_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2734() { testInvalid(test_2734_sup,test_2734_sub); }

		private static final SyntacticType test_2735_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2735_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2735() { testInvalid(test_2735_sup,test_2735_sub); }

		private static final SyntacticType test_2736_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2736_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2736() { testInvalid(test_2736_sup,test_2736_sub); }

		private static final SyntacticType test_2737_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2737_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2737() { testInvalid(test_2737_sup,test_2737_sub); }

		private static final SyntacticType test_2738_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2738_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2738() { testInvalid(test_2738_sup,test_2738_sub); }

		private static final SyntacticType test_2739_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2739_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2739() { testInvalid(test_2739_sup,test_2739_sub); }

		private static final SyntacticType test_2740_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2740_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2740() { testInvalid(test_2740_sup,test_2740_sub); }

		private static final SyntacticType test_2741_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2741_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2741() { testInvalid(test_2741_sup,test_2741_sub); }

		private static final SyntacticType test_2742_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2742_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2742() { testInvalid(test_2742_sup,test_2742_sub); }

		private static final SyntacticType test_2743_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2743_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2743() { testInvalid(test_2743_sup,test_2743_sub); }

		private static final SyntacticType test_2744_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2744_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2744() { testInvalid(test_2744_sup,test_2744_sub); }

		private static final SyntacticType test_2745_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2745_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2745() { testInvalid(test_2745_sup,test_2745_sub); }

		private static final SyntacticType test_2746_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2746_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2746() { testInvalid(test_2746_sup,test_2746_sub); }

		private static final SyntacticType test_2747_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2747_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2747() { testInvalid(test_2747_sup,test_2747_sub); }

		private static final SyntacticType test_2748_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2748_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2748() { testInvalid(test_2748_sup,test_2748_sub); }

		private static final SyntacticType test_2749_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2749_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2749() { testInvalid(test_2749_sup,test_2749_sub); }

		private static final SyntacticType test_2750_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2750_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2750() { testInvalid(test_2750_sup,test_2750_sub); }

		private static final SyntacticType test_2751_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2751_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2751() { testInvalid(test_2751_sup,test_2751_sub); }

		private static final SyntacticType test_2752_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2752_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2752() { testInvalid(test_2752_sup,test_2752_sub); }

		private static final SyntacticType test_2753_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2753_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2753() { testInvalid(test_2753_sup,test_2753_sub); }

		private static final SyntacticType test_2754_sup = parse("{((int | any) & {int, int}), {!int, {int}}}");
		private static final SyntacticType test_2754_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2754() { testInvalid(test_2754_sup,test_2754_sub); }

		private static final SyntacticType test_2755_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2755_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2755() { testInvalid(test_2755_sup,test_2755_sub); }

		private static final SyntacticType test_2756_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2756_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2756() { testInvalid(test_2756_sup,test_2756_sub); }

		private static final SyntacticType test_2757_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2757_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2757() { testInvalid(test_2757_sup,test_2757_sub); }

		private static final SyntacticType test_2758_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2758_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2758() { testInvalid(test_2758_sup,test_2758_sub); }

		private static final SyntacticType test_2759_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2759_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2759() { testInvalid(test_2759_sup,test_2759_sub); }

		private static final SyntacticType test_2760_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2760_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2760() { testInvalid(test_2760_sup,test_2760_sub); }

		private static final SyntacticType test_2761_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2761_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2761() { testInvalid(test_2761_sup,test_2761_sub); }

		private static final SyntacticType test_2762_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2762_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2762() { testInvalid(test_2762_sup,test_2762_sub); }

		private static final SyntacticType test_2763_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2763_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2763() { testInvalid(test_2763_sup,test_2763_sub); }

		private static final SyntacticType test_2764_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2764_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2764() { testInvalid(test_2764_sup,test_2764_sub); }

		private static final SyntacticType test_2765_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2765_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2765() { testInvalid(test_2765_sup,test_2765_sub); }

		private static final SyntacticType test_2766_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2766_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2766() { testInvalid(test_2766_sup,test_2766_sub); }

		private static final SyntacticType test_2767_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2767_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2767() { testInvalid(test_2767_sup,test_2767_sub); }

		private static final SyntacticType test_2768_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2768_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2768() { testInvalid(test_2768_sup,test_2768_sub); }

		private static final SyntacticType test_2769_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2769_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2769() { testInvalid(test_2769_sup,test_2769_sub); }

		private static final SyntacticType test_2770_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2770_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2770() { testInvalid(test_2770_sup,test_2770_sub); }

		private static final SyntacticType test_2771_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2771_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2771() { testValid(test_2771_sup,test_2771_sub); }

		private static final SyntacticType test_2772_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2772_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2772() { testInvalid(test_2772_sup,test_2772_sub); }

		private static final SyntacticType test_2773_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2773_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2773() { testInvalid(test_2773_sup,test_2773_sub); }

		private static final SyntacticType test_2774_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2774_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2774() { testInvalid(test_2774_sup,test_2774_sub); }

		private static final SyntacticType test_2775_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2775_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2775() { testInvalid(test_2775_sup,test_2775_sub); }

		private static final SyntacticType test_2776_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2776_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2776() { testInvalid(test_2776_sup,test_2776_sub); }

		private static final SyntacticType test_2777_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2777_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2777() { testValid(test_2777_sup,test_2777_sub); }

		private static final SyntacticType test_2778_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2778_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2778() { testInvalid(test_2778_sup,test_2778_sub); }

		private static final SyntacticType test_2779_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2779_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2779() { testInvalid(test_2779_sup,test_2779_sub); }

		private static final SyntacticType test_2780_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2780_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2780() { testInvalid(test_2780_sup,test_2780_sub); }

		private static final SyntacticType test_2781_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2781_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2781() { testInvalid(test_2781_sup,test_2781_sub); }

		private static final SyntacticType test_2782_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2782_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2782() { testInvalid(test_2782_sup,test_2782_sub); }

		private static final SyntacticType test_2783_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2783_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2783() { testInvalid(test_2783_sup,test_2783_sub); }

		private static final SyntacticType test_2784_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2784_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2784() { testValid(test_2784_sup,test_2784_sub); }

		private static final SyntacticType test_2785_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2785_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2785() { testInvalid(test_2785_sup,test_2785_sub); }

		private static final SyntacticType test_2786_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2786_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2786() { testInvalid(test_2786_sup,test_2786_sub); }

		private static final SyntacticType test_2787_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2787_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2787() { testInvalid(test_2787_sup,test_2787_sub); }

		private static final SyntacticType test_2788_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2788_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2788() { testInvalid(test_2788_sup,test_2788_sub); }

		private static final SyntacticType test_2789_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2789_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2789() { testInvalid(test_2789_sup,test_2789_sub); }

		private static final SyntacticType test_2790_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2790_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2790() { testInvalid(test_2790_sup,test_2790_sub); }

		private static final SyntacticType test_2791_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2791_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2791() { testInvalid(test_2791_sup,test_2791_sub); }

		private static final SyntacticType test_2792_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2792_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2792() { testInvalid(test_2792_sup,test_2792_sub); }

		private static final SyntacticType test_2793_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2793_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2793() { testInvalid(test_2793_sup,test_2793_sub); }

		private static final SyntacticType test_2794_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2794_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2794() { testInvalid(test_2794_sup,test_2794_sub); }

		private static final SyntacticType test_2795_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2795_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2795() { testInvalid(test_2795_sup,test_2795_sub); }

		private static final SyntacticType test_2796_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2796_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2796() { testInvalid(test_2796_sup,test_2796_sub); }

		private static final SyntacticType test_2797_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2797_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2797() { testInvalid(test_2797_sup,test_2797_sub); }

		private static final SyntacticType test_2798_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2798_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2798() { testInvalid(test_2798_sup,test_2798_sub); }

		private static final SyntacticType test_2799_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2799_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2799() { testInvalid(test_2799_sup,test_2799_sub); }

		private static final SyntacticType test_2800_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2800_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2800() { testInvalid(test_2800_sup,test_2800_sub); }

		private static final SyntacticType test_2801_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2801_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2801() { testInvalid(test_2801_sup,test_2801_sub); }

		private static final SyntacticType test_2802_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2802_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2802() { testInvalid(test_2802_sup,test_2802_sub); }

		private static final SyntacticType test_2803_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2803_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2803() { testInvalid(test_2803_sup,test_2803_sub); }

		private static final SyntacticType test_2804_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2804_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2804() { testInvalid(test_2804_sup,test_2804_sub); }

		private static final SyntacticType test_2805_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2805_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2805() { testInvalid(test_2805_sup,test_2805_sub); }

		private static final SyntacticType test_2806_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2806_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2806() { testInvalid(test_2806_sup,test_2806_sub); }

		private static final SyntacticType test_2807_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2807_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2807() { testInvalid(test_2807_sup,test_2807_sub); }

		private static final SyntacticType test_2808_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2808_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2808() { testInvalid(test_2808_sup,test_2808_sub); }

		private static final SyntacticType test_2809_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2809_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2809() { testInvalid(test_2809_sup,test_2809_sub); }

		private static final SyntacticType test_2810_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2810_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2810() { testInvalid(test_2810_sup,test_2810_sub); }

		private static final SyntacticType test_2811_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2811_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2811() { testInvalid(test_2811_sup,test_2811_sub); }

		private static final SyntacticType test_2812_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2812_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2812() { testInvalid(test_2812_sup,test_2812_sub); }

		private static final SyntacticType test_2813_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2813_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2813() { testInvalid(test_2813_sup,test_2813_sub); }

		private static final SyntacticType test_2814_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2814_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2814() { testInvalid(test_2814_sup,test_2814_sub); }

		private static final SyntacticType test_2815_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2815_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2815() { testInvalid(test_2815_sup,test_2815_sub); }

		private static final SyntacticType test_2816_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2816_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2816() { testInvalid(test_2816_sup,test_2816_sub); }

		private static final SyntacticType test_2817_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2817_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2817() { testInvalid(test_2817_sup,test_2817_sub); }

		private static final SyntacticType test_2818_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2818_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2818() { testInvalid(test_2818_sup,test_2818_sub); }

		private static final SyntacticType test_2819_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2819_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2819() { testInvalid(test_2819_sup,test_2819_sub); }

		private static final SyntacticType test_2820_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2820_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2820() { testInvalid(test_2820_sup,test_2820_sub); }

		private static final SyntacticType test_2821_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2821_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2821() { testInvalid(test_2821_sup,test_2821_sub); }

		private static final SyntacticType test_2822_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2822_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2822() { testInvalid(test_2822_sup,test_2822_sub); }

		private static final SyntacticType test_2823_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2823_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2823() { testInvalid(test_2823_sup,test_2823_sub); }

		private static final SyntacticType test_2824_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2824_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2824() { testInvalid(test_2824_sup,test_2824_sub); }

		private static final SyntacticType test_2825_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2825_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2825() { testInvalid(test_2825_sup,test_2825_sub); }

		private static final SyntacticType test_2826_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2826_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2826() { testInvalid(test_2826_sup,test_2826_sub); }

		private static final SyntacticType test_2827_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2827_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2827() { testInvalid(test_2827_sup,test_2827_sub); }

		private static final SyntacticType test_2828_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2828_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2828() { testInvalid(test_2828_sup,test_2828_sub); }

		private static final SyntacticType test_2829_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2829_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2829() { testInvalid(test_2829_sup,test_2829_sub); }

		private static final SyntacticType test_2830_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2830_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2830() { testInvalid(test_2830_sup,test_2830_sub); }

		private static final SyntacticType test_2831_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2831_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2831() { testInvalid(test_2831_sup,test_2831_sub); }

		private static final SyntacticType test_2832_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2832_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2832() { testInvalid(test_2832_sup,test_2832_sub); }

		private static final SyntacticType test_2833_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2833_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2833() { testInvalid(test_2833_sup,test_2833_sub); }

		private static final SyntacticType test_2834_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2834_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2834() { testInvalid(test_2834_sup,test_2834_sub); }

		private static final SyntacticType test_2835_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2835_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2835() { testInvalid(test_2835_sup,test_2835_sub); }

		private static final SyntacticType test_2836_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2836_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2836() { testInvalid(test_2836_sup,test_2836_sub); }

		private static final SyntacticType test_2837_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2837_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2837() { testInvalid(test_2837_sup,test_2837_sub); }

		private static final SyntacticType test_2838_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2838_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2838() { testInvalid(test_2838_sup,test_2838_sub); }

		private static final SyntacticType test_2839_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2839_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2839() { testInvalid(test_2839_sup,test_2839_sub); }

		private static final SyntacticType test_2840_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2840_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2840() { testInvalid(test_2840_sup,test_2840_sub); }

		private static final SyntacticType test_2841_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2841_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2841() { testInvalid(test_2841_sup,test_2841_sub); }

		private static final SyntacticType test_2842_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2842_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2842() { testInvalid(test_2842_sup,test_2842_sub); }

		private static final SyntacticType test_2843_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2843_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2843() { testInvalid(test_2843_sup,test_2843_sub); }

		private static final SyntacticType test_2844_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2844_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2844() { testInvalid(test_2844_sup,test_2844_sub); }

		private static final SyntacticType test_2845_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2845_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2845() { testInvalid(test_2845_sup,test_2845_sub); }

		private static final SyntacticType test_2846_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2846_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2846() { testInvalid(test_2846_sup,test_2846_sub); }

		private static final SyntacticType test_2847_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2847_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2847() { testInvalid(test_2847_sup,test_2847_sub); }

		private static final SyntacticType test_2848_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2848_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2848() { testInvalid(test_2848_sup,test_2848_sub); }

		private static final SyntacticType test_2849_sup = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		private static final SyntacticType test_2849_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2849() { testInvalid(test_2849_sup,test_2849_sub); }

		private static final SyntacticType test_2850_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2850_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2850() { testInvalid(test_2850_sup,test_2850_sub); }

		private static final SyntacticType test_2851_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2851_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2851() { testInvalid(test_2851_sup,test_2851_sub); }

		private static final SyntacticType test_2852_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2852_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2852() { testInvalid(test_2852_sup,test_2852_sub); }

		private static final SyntacticType test_2853_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2853_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2853() { testValid(test_2853_sup,test_2853_sub); }

		private static final SyntacticType test_2854_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2854_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2854() { testValid(test_2854_sup,test_2854_sub); }

		private static final SyntacticType test_2855_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2855_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2855() { testInvalid(test_2855_sup,test_2855_sub); }

		private static final SyntacticType test_2856_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2856_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2856() { testInvalid(test_2856_sup,test_2856_sub); }

		private static final SyntacticType test_2857_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2857_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2857() { testValid(test_2857_sup,test_2857_sub); }

		private static final SyntacticType test_2858_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2858_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2858() { testInvalid(test_2858_sup,test_2858_sub); }

		private static final SyntacticType test_2859_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2859_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2859() { testInvalid(test_2859_sup,test_2859_sub); }

		private static final SyntacticType test_2860_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2860_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2860() { testInvalid(test_2860_sup,test_2860_sub); }

		private static final SyntacticType test_2861_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2861_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2861() { testInvalid(test_2861_sup,test_2861_sub); }

		private static final SyntacticType test_2862_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2862_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2862() { testInvalid(test_2862_sup,test_2862_sub); }

		private static final SyntacticType test_2863_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2863_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2863() { testInvalid(test_2863_sup,test_2863_sub); }

		private static final SyntacticType test_2864_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2864_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2864() { testInvalid(test_2864_sup,test_2864_sub); }

		private static final SyntacticType test_2865_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2865_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2865() { testValid(test_2865_sup,test_2865_sub); }

		private static final SyntacticType test_2866_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2866_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2866() { testInvalid(test_2866_sup,test_2866_sub); }

		private static final SyntacticType test_2867_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2867_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2867() { testInvalid(test_2867_sup,test_2867_sub); }

		private static final SyntacticType test_2868_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2868_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2868() { testValid(test_2868_sup,test_2868_sub); }

		private static final SyntacticType test_2869_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2869_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2869() { testValid(test_2869_sup,test_2869_sub); }

		private static final SyntacticType test_2870_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2870_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2870() { testValid(test_2870_sup,test_2870_sub); }

		private static final SyntacticType test_2871_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2871_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2871() { testInvalid(test_2871_sup,test_2871_sub); }

		private static final SyntacticType test_2872_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2872_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2872() { testInvalid(test_2872_sup,test_2872_sub); }

		private static final SyntacticType test_2873_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2873_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2873() { testInvalid(test_2873_sup,test_2873_sub); }

		private static final SyntacticType test_2874_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2874_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2874() { testInvalid(test_2874_sup,test_2874_sub); }

		private static final SyntacticType test_2875_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2875_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2875() { testInvalid(test_2875_sup,test_2875_sub); }

		private static final SyntacticType test_2876_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2876_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2876() { testInvalid(test_2876_sup,test_2876_sub); }

		private static final SyntacticType test_2877_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2877_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2877() { testInvalid(test_2877_sup,test_2877_sub); }

		private static final SyntacticType test_2878_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2878_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2878() { testInvalid(test_2878_sup,test_2878_sub); }

		private static final SyntacticType test_2879_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2879_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2879() { testInvalid(test_2879_sup,test_2879_sub); }

		private static final SyntacticType test_2880_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2880_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2880() { testValid(test_2880_sup,test_2880_sub); }

		private static final SyntacticType test_2881_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2881_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2881() { testValid(test_2881_sup,test_2881_sub); }

		private static final SyntacticType test_2882_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2882_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2882() { testValid(test_2882_sup,test_2882_sub); }

		private static final SyntacticType test_2883_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2883_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2883() { testInvalid(test_2883_sup,test_2883_sub); }

		private static final SyntacticType test_2884_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2884_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2884() { testInvalid(test_2884_sup,test_2884_sub); }

		private static final SyntacticType test_2885_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2885_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2885() { testInvalid(test_2885_sup,test_2885_sub); }

		private static final SyntacticType test_2886_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2886_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2886() { testInvalid(test_2886_sup,test_2886_sub); }

		private static final SyntacticType test_2887_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2887_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2887() { testInvalid(test_2887_sup,test_2887_sub); }

		private static final SyntacticType test_2888_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2888_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2888() { testInvalid(test_2888_sup,test_2888_sub); }

		private static final SyntacticType test_2889_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2889_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2889() { testInvalid(test_2889_sup,test_2889_sub); }

		private static final SyntacticType test_2890_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2890_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2890() { testInvalid(test_2890_sup,test_2890_sub); }

		private static final SyntacticType test_2891_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2891_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2891() { testInvalid(test_2891_sup,test_2891_sub); }

		private static final SyntacticType test_2892_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2892_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2892() { testInvalid(test_2892_sup,test_2892_sub); }

		private static final SyntacticType test_2893_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2893_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2893() { testInvalid(test_2893_sup,test_2893_sub); }

		private static final SyntacticType test_2894_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2894_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2894() { testInvalid(test_2894_sup,test_2894_sub); }

		private static final SyntacticType test_2895_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2895_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2895() { testValid(test_2895_sup,test_2895_sub); }

		private static final SyntacticType test_2896_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2896_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2896() { testInvalid(test_2896_sup,test_2896_sub); }

		private static final SyntacticType test_2897_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2897_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2897() { testInvalid(test_2897_sup,test_2897_sub); }

		private static final SyntacticType test_2898_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2898_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2898() { testInvalid(test_2898_sup,test_2898_sub); }

		private static final SyntacticType test_2899_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2899_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2899() { testInvalid(test_2899_sup,test_2899_sub); }

		private static final SyntacticType test_2900_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2900_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2900() { testInvalid(test_2900_sup,test_2900_sub); }

		private static final SyntacticType test_2901_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2901_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2901() { testInvalid(test_2901_sup,test_2901_sub); }

		private static final SyntacticType test_2902_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2902_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2902() { testInvalid(test_2902_sup,test_2902_sub); }

		private static final SyntacticType test_2903_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2903_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2903() { testValid(test_2903_sup,test_2903_sub); }

		private static final SyntacticType test_2904_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2904_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2904() { testInvalid(test_2904_sup,test_2904_sub); }

		private static final SyntacticType test_2905_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2905_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_2905() { testInvalid(test_2905_sup,test_2905_sub); }

		private static final SyntacticType test_2906_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2906_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_2906() { testInvalid(test_2906_sup,test_2906_sub); }

		private static final SyntacticType test_2907_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2907_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_2907() { testInvalid(test_2907_sup,test_2907_sub); }

		private static final SyntacticType test_2908_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2908_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_2908() { testInvalid(test_2908_sup,test_2908_sub); }

		private static final SyntacticType test_2909_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2909_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_2909() { testInvalid(test_2909_sup,test_2909_sub); }

		private static final SyntacticType test_2910_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2910_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_2910() { testInvalid(test_2910_sup,test_2910_sub); }

		private static final SyntacticType test_2911_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2911_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_2911() { testInvalid(test_2911_sup,test_2911_sub); }

		private static final SyntacticType test_2912_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2912_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_2912() { testInvalid(test_2912_sup,test_2912_sub); }

		private static final SyntacticType test_2913_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2913_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_2913() { testInvalid(test_2913_sup,test_2913_sub); }

		private static final SyntacticType test_2914_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2914_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_2914() { testInvalid(test_2914_sup,test_2914_sub); }

		private static final SyntacticType test_2915_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2915_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_2915() { testInvalid(test_2915_sup,test_2915_sub); }

		private static final SyntacticType test_2916_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2916_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_2916() { testInvalid(test_2916_sup,test_2916_sub); }

		private static final SyntacticType test_2917_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2917_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_2917() { testInvalid(test_2917_sup,test_2917_sub); }

		private static final SyntacticType test_2918_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2918_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_2918() { testValid(test_2918_sup,test_2918_sub); }

		private static final SyntacticType test_2919_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2919_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_2919() { testInvalid(test_2919_sup,test_2919_sub); }

		private static final SyntacticType test_2920_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2920_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_2920() { testInvalid(test_2920_sup,test_2920_sub); }

		private static final SyntacticType test_2921_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2921_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_2921() { testInvalid(test_2921_sup,test_2921_sub); }

		private static final SyntacticType test_2922_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2922_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_2922() { testInvalid(test_2922_sup,test_2922_sub); }

		private static final SyntacticType test_2923_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2923_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_2923() { testInvalid(test_2923_sup,test_2923_sub); }

		private static final SyntacticType test_2924_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2924_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_2924() { testInvalid(test_2924_sup,test_2924_sub); }

		private static final SyntacticType test_2925_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2925_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_2925() { testInvalid(test_2925_sup,test_2925_sub); }

		private static final SyntacticType test_2926_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2926_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_2926() { testInvalid(test_2926_sup,test_2926_sub); }

		private static final SyntacticType test_2927_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2927_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_2927() { testInvalid(test_2927_sup,test_2927_sub); }

		private static final SyntacticType test_2928_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2928_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_2928() { testInvalid(test_2928_sup,test_2928_sub); }

		private static final SyntacticType test_2929_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2929_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_2929() { testInvalid(test_2929_sup,test_2929_sub); }

		private static final SyntacticType test_2930_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2930_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_2930() { testInvalid(test_2930_sup,test_2930_sub); }

		private static final SyntacticType test_2931_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2931_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_2931() { testInvalid(test_2931_sup,test_2931_sub); }

		private static final SyntacticType test_2932_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2932_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_2932() { testInvalid(test_2932_sup,test_2932_sub); }

		private static final SyntacticType test_2933_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2933_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_2933() { testValid(test_2933_sup,test_2933_sub); }

		private static final SyntacticType test_2934_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2934_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_2934() { testInvalid(test_2934_sup,test_2934_sub); }

		private static final SyntacticType test_2935_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2935_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_2935() { testInvalid(test_2935_sup,test_2935_sub); }

		private static final SyntacticType test_2936_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2936_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_2936() { testInvalid(test_2936_sup,test_2936_sub); }

		private static final SyntacticType test_2937_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2937_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_2937() { testValid(test_2937_sup,test_2937_sub); }

		private static final SyntacticType test_2938_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2938_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_2938() { testInvalid(test_2938_sup,test_2938_sub); }

		private static final SyntacticType test_2939_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2939_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_2939() { testInvalid(test_2939_sup,test_2939_sub); }

		private static final SyntacticType test_2940_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2940_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_2940() { testInvalid(test_2940_sup,test_2940_sub); }

		private static final SyntacticType test_2941_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2941_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_2941() { testInvalid(test_2941_sup,test_2941_sub); }

		private static final SyntacticType test_2942_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2942_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_2942() { testInvalid(test_2942_sup,test_2942_sub); }

		private static final SyntacticType test_2943_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2943_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_2943() { testInvalid(test_2943_sup,test_2943_sub); }

		private static final SyntacticType test_2944_sup = parse("{((int | int) & (int & int)), ({int} | any)}");
		private static final SyntacticType test_2944_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_2944() { testInvalid(test_2944_sup,test_2944_sub); }

		private static final SyntacticType test_2945_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2945_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_2945() { testInvalid(test_2945_sup,test_2945_sub); }

		private static final SyntacticType test_2946_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2946_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_2946() { testInvalid(test_2946_sup,test_2946_sub); }

		private static final SyntacticType test_2947_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2947_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_2947() { testInvalid(test_2947_sup,test_2947_sub); }

		private static final SyntacticType test_2948_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2948_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_2948() { testInvalid(test_2948_sup,test_2948_sub); }

		private static final SyntacticType test_2949_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2949_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_2949() { testInvalid(test_2949_sup,test_2949_sub); }

		private static final SyntacticType test_2950_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2950_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_2950() { testInvalid(test_2950_sup,test_2950_sub); }

		private static final SyntacticType test_2951_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2951_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_2951() { testInvalid(test_2951_sup,test_2951_sub); }

		private static final SyntacticType test_2952_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2952_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_2952() { testInvalid(test_2952_sup,test_2952_sub); }

		private static final SyntacticType test_2953_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2953_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_2953() { testInvalid(test_2953_sup,test_2953_sub); }

		private static final SyntacticType test_2954_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2954_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_2954() { testInvalid(test_2954_sup,test_2954_sub); }

		private static final SyntacticType test_2955_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2955_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_2955() { testInvalid(test_2955_sup,test_2955_sub); }

		private static final SyntacticType test_2956_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2956_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_2956() { testInvalid(test_2956_sup,test_2956_sub); }

		private static final SyntacticType test_2957_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2957_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_2957() { testInvalid(test_2957_sup,test_2957_sub); }

		private static final SyntacticType test_2958_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2958_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_2958() { testInvalid(test_2958_sup,test_2958_sub); }

		private static final SyntacticType test_2959_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2959_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_2959() { testInvalid(test_2959_sup,test_2959_sub); }

		private static final SyntacticType test_2960_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2960_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_2960() { testInvalid(test_2960_sup,test_2960_sub); }

		private static final SyntacticType test_2961_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2961_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_2961() { testInvalid(test_2961_sup,test_2961_sub); }

		private static final SyntacticType test_2962_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2962_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_2962() { testInvalid(test_2962_sup,test_2962_sub); }

		private static final SyntacticType test_2963_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2963_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_2963() { testInvalid(test_2963_sup,test_2963_sub); }

		private static final SyntacticType test_2964_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2964_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_2964() { testInvalid(test_2964_sup,test_2964_sub); }

		private static final SyntacticType test_2965_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2965_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_2965() { testInvalid(test_2965_sup,test_2965_sub); }

		private static final SyntacticType test_2966_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2966_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_2966() { testInvalid(test_2966_sup,test_2966_sub); }

		private static final SyntacticType test_2967_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2967_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_2967() { testInvalid(test_2967_sup,test_2967_sub); }

		private static final SyntacticType test_2968_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2968_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_2968() { testInvalid(test_2968_sup,test_2968_sub); }

		private static final SyntacticType test_2969_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2969_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_2969() { testInvalid(test_2969_sup,test_2969_sub); }

		private static final SyntacticType test_2970_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2970_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_2970() { testInvalid(test_2970_sup,test_2970_sub); }

		private static final SyntacticType test_2971_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2971_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_2971() { testInvalid(test_2971_sup,test_2971_sub); }

		private static final SyntacticType test_2972_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2972_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_2972() { testInvalid(test_2972_sup,test_2972_sub); }

		private static final SyntacticType test_2973_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2973_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_2973() { testInvalid(test_2973_sup,test_2973_sub); }

		private static final SyntacticType test_2974_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2974_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_2974() { testInvalid(test_2974_sup,test_2974_sub); }

		private static final SyntacticType test_2975_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2975_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_2975() { testInvalid(test_2975_sup,test_2975_sub); }

		private static final SyntacticType test_2976_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2976_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_2976() { testValid(test_2976_sup,test_2976_sub); }

		private static final SyntacticType test_2977_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2977_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_2977() { testInvalid(test_2977_sup,test_2977_sub); }

		private static final SyntacticType test_2978_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2978_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_2978() { testInvalid(test_2978_sup,test_2978_sub); }

		private static final SyntacticType test_2979_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2979_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_2979() { testInvalid(test_2979_sup,test_2979_sub); }

		private static final SyntacticType test_2980_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2980_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_2980() { testInvalid(test_2980_sup,test_2980_sub); }

		private static final SyntacticType test_2981_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2981_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_2981() { testInvalid(test_2981_sup,test_2981_sub); }

		private static final SyntacticType test_2982_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2982_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_2982() { testInvalid(test_2982_sup,test_2982_sub); }

		private static final SyntacticType test_2983_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2983_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_2983() { testInvalid(test_2983_sup,test_2983_sub); }

		private static final SyntacticType test_2984_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2984_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_2984() { testInvalid(test_2984_sup,test_2984_sub); }

		private static final SyntacticType test_2985_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2985_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_2985() { testInvalid(test_2985_sup,test_2985_sub); }

		private static final SyntacticType test_2986_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2986_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_2986() { testInvalid(test_2986_sup,test_2986_sub); }

		private static final SyntacticType test_2987_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2987_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_2987() { testInvalid(test_2987_sup,test_2987_sub); }

		private static final SyntacticType test_2988_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2988_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_2988() { testInvalid(test_2988_sup,test_2988_sub); }

		private static final SyntacticType test_2989_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2989_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_2989() { testInvalid(test_2989_sup,test_2989_sub); }

		private static final SyntacticType test_2990_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2990_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_2990() { testInvalid(test_2990_sup,test_2990_sub); }

		private static final SyntacticType test_2991_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2991_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_2991() { testInvalid(test_2991_sup,test_2991_sub); }

		private static final SyntacticType test_2992_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2992_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_2992() { testInvalid(test_2992_sup,test_2992_sub); }

		private static final SyntacticType test_2993_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2993_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_2993() { testInvalid(test_2993_sup,test_2993_sub); }

		private static final SyntacticType test_2994_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2994_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_2994() { testInvalid(test_2994_sup,test_2994_sub); }

		private static final SyntacticType test_2995_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2995_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_2995() { testInvalid(test_2995_sup,test_2995_sub); }

		private static final SyntacticType test_2996_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2996_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_2996() { testInvalid(test_2996_sup,test_2996_sub); }

		private static final SyntacticType test_2997_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2997_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_2997() { testInvalid(test_2997_sup,test_2997_sub); }

		private static final SyntacticType test_2998_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2998_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_2998() { testInvalid(test_2998_sup,test_2998_sub); }

		private static final SyntacticType test_2999_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_2999_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_2999() { testInvalid(test_2999_sup,test_2999_sub); }

	}
	public static class Part_3 {
		private static final SyntacticType test_3000_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3000_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3000() { testInvalid(test_3000_sup,test_3000_sub); }

		private static final SyntacticType test_3001_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3001_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3001() { testInvalid(test_3001_sup,test_3001_sub); }

		private static final SyntacticType test_3002_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3002_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3002() { testInvalid(test_3002_sup,test_3002_sub); }

		private static final SyntacticType test_3003_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3003_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3003() { testInvalid(test_3003_sup,test_3003_sub); }

		private static final SyntacticType test_3004_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3004_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3004() { testInvalid(test_3004_sup,test_3004_sub); }

		private static final SyntacticType test_3005_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3005_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3005() { testInvalid(test_3005_sup,test_3005_sub); }

		private static final SyntacticType test_3006_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3006_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3006() { testInvalid(test_3006_sup,test_3006_sub); }

		private static final SyntacticType test_3007_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3007_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3007() { testInvalid(test_3007_sup,test_3007_sub); }

		private static final SyntacticType test_3008_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3008_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3008() { testInvalid(test_3008_sup,test_3008_sub); }

		private static final SyntacticType test_3009_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3009_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3009() { testInvalid(test_3009_sup,test_3009_sub); }

		private static final SyntacticType test_3010_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3010_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3010() { testInvalid(test_3010_sup,test_3010_sub); }

		private static final SyntacticType test_3011_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3011_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3011() { testInvalid(test_3011_sup,test_3011_sub); }

		private static final SyntacticType test_3012_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3012_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3012() { testInvalid(test_3012_sup,test_3012_sub); }

		private static final SyntacticType test_3013_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3013_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3013() { testInvalid(test_3013_sup,test_3013_sub); }

		private static final SyntacticType test_3014_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3014_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3014() { testInvalid(test_3014_sup,test_3014_sub); }

		private static final SyntacticType test_3015_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3015_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3015() { testInvalid(test_3015_sup,test_3015_sub); }

		private static final SyntacticType test_3016_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3016_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3016() { testInvalid(test_3016_sup,test_3016_sub); }

		private static final SyntacticType test_3017_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3017_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3017() { testInvalid(test_3017_sup,test_3017_sub); }

		private static final SyntacticType test_3018_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3018_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3018() { testInvalid(test_3018_sup,test_3018_sub); }

		private static final SyntacticType test_3019_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3019_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3019() { testInvalid(test_3019_sup,test_3019_sub); }

		private static final SyntacticType test_3020_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3020_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3020() { testInvalid(test_3020_sup,test_3020_sub); }

		private static final SyntacticType test_3021_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3021_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3021() { testInvalid(test_3021_sup,test_3021_sub); }

		private static final SyntacticType test_3022_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3022_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3022() { testInvalid(test_3022_sup,test_3022_sub); }

		private static final SyntacticType test_3023_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3023_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3023() { testInvalid(test_3023_sup,test_3023_sub); }

		private static final SyntacticType test_3024_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3024_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3024() { testInvalid(test_3024_sup,test_3024_sub); }

		private static final SyntacticType test_3025_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3025_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3025() { testInvalid(test_3025_sup,test_3025_sub); }

		private static final SyntacticType test_3026_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3026_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3026() { testInvalid(test_3026_sup,test_3026_sub); }

		private static final SyntacticType test_3027_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3027_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3027() { testInvalid(test_3027_sup,test_3027_sub); }

		private static final SyntacticType test_3028_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3028_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3028() { testInvalid(test_3028_sup,test_3028_sub); }

		private static final SyntacticType test_3029_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3029_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3029() { testInvalid(test_3029_sup,test_3029_sub); }

		private static final SyntacticType test_3030_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3030_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3030() { testInvalid(test_3030_sup,test_3030_sub); }

		private static final SyntacticType test_3031_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3031_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3031() { testInvalid(test_3031_sup,test_3031_sub); }

		private static final SyntacticType test_3032_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3032_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3032() { testInvalid(test_3032_sup,test_3032_sub); }

		private static final SyntacticType test_3033_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3033_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3033() { testInvalid(test_3033_sup,test_3033_sub); }

		private static final SyntacticType test_3034_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3034_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3034() { testInvalid(test_3034_sup,test_3034_sub); }

		private static final SyntacticType test_3035_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3035_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3035() { testInvalid(test_3035_sup,test_3035_sub); }

		private static final SyntacticType test_3036_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3036_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3036() { testInvalid(test_3036_sup,test_3036_sub); }

		private static final SyntacticType test_3037_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3037_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3037() { testInvalid(test_3037_sup,test_3037_sub); }

		private static final SyntacticType test_3038_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3038_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3038() { testInvalid(test_3038_sup,test_3038_sub); }

		private static final SyntacticType test_3039_sup = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		private static final SyntacticType test_3039_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3039() { testInvalid(test_3039_sup,test_3039_sub); }

		private static final SyntacticType test_3040_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3040_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3040() { testInvalid(test_3040_sup,test_3040_sub); }

		private static final SyntacticType test_3041_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3041_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3041() { testInvalid(test_3041_sup,test_3041_sub); }

		private static final SyntacticType test_3042_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3042_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3042() { testInvalid(test_3042_sup,test_3042_sub); }

		private static final SyntacticType test_3043_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3043_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3043() { testValid(test_3043_sup,test_3043_sub); }

		private static final SyntacticType test_3044_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3044_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3044() { testValid(test_3044_sup,test_3044_sub); }

		private static final SyntacticType test_3045_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3045_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3045() { testInvalid(test_3045_sup,test_3045_sub); }

		private static final SyntacticType test_3046_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3046_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3046() { testInvalid(test_3046_sup,test_3046_sub); }

		private static final SyntacticType test_3047_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3047_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3047() { testValid(test_3047_sup,test_3047_sub); }

		private static final SyntacticType test_3048_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3048_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3048() { testInvalid(test_3048_sup,test_3048_sub); }

		private static final SyntacticType test_3049_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3049_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3049() { testInvalid(test_3049_sup,test_3049_sub); }

		private static final SyntacticType test_3050_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3050_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3050() { testInvalid(test_3050_sup,test_3050_sub); }

		private static final SyntacticType test_3051_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3051_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3051() { testInvalid(test_3051_sup,test_3051_sub); }

		private static final SyntacticType test_3052_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3052_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3052() { testInvalid(test_3052_sup,test_3052_sub); }

		private static final SyntacticType test_3053_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3053_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3053() { testInvalid(test_3053_sup,test_3053_sub); }

		private static final SyntacticType test_3054_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3054_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3054() { testInvalid(test_3054_sup,test_3054_sub); }

		private static final SyntacticType test_3055_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3055_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3055() { testValid(test_3055_sup,test_3055_sub); }

		private static final SyntacticType test_3056_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3056_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3056() { testInvalid(test_3056_sup,test_3056_sub); }

		private static final SyntacticType test_3057_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3057_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3057() { testInvalid(test_3057_sup,test_3057_sub); }

		private static final SyntacticType test_3058_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3058_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3058() { testValid(test_3058_sup,test_3058_sub); }

		private static final SyntacticType test_3059_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3059_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3059() { testValid(test_3059_sup,test_3059_sub); }

		private static final SyntacticType test_3060_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3060_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3060() { testValid(test_3060_sup,test_3060_sub); }

		private static final SyntacticType test_3061_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3061_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3061() { testInvalid(test_3061_sup,test_3061_sub); }

		private static final SyntacticType test_3062_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3062_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3062() { testInvalid(test_3062_sup,test_3062_sub); }

		private static final SyntacticType test_3063_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3063_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3063() { testInvalid(test_3063_sup,test_3063_sub); }

		private static final SyntacticType test_3064_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3064_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3064() { testInvalid(test_3064_sup,test_3064_sub); }

		private static final SyntacticType test_3065_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3065_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3065() { testInvalid(test_3065_sup,test_3065_sub); }

		private static final SyntacticType test_3066_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3066_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3066() { testInvalid(test_3066_sup,test_3066_sub); }

		private static final SyntacticType test_3067_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3067_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3067() { testInvalid(test_3067_sup,test_3067_sub); }

		private static final SyntacticType test_3068_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3068_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3068() { testInvalid(test_3068_sup,test_3068_sub); }

		private static final SyntacticType test_3069_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3069_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3069() { testInvalid(test_3069_sup,test_3069_sub); }

		private static final SyntacticType test_3070_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3070_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3070() { testValid(test_3070_sup,test_3070_sub); }

		private static final SyntacticType test_3071_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3071_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3071() { testValid(test_3071_sup,test_3071_sub); }

		private static final SyntacticType test_3072_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3072_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3072() { testValid(test_3072_sup,test_3072_sub); }

		private static final SyntacticType test_3073_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3073_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3073() { testInvalid(test_3073_sup,test_3073_sub); }

		private static final SyntacticType test_3074_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3074_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3074() { testInvalid(test_3074_sup,test_3074_sub); }

		private static final SyntacticType test_3075_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3075_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3075() { testInvalid(test_3075_sup,test_3075_sub); }

		private static final SyntacticType test_3076_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3076_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3076() { testInvalid(test_3076_sup,test_3076_sub); }

		private static final SyntacticType test_3077_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3077_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3077() { testInvalid(test_3077_sup,test_3077_sub); }

		private static final SyntacticType test_3078_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3078_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3078() { testInvalid(test_3078_sup,test_3078_sub); }

		private static final SyntacticType test_3079_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3079_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3079() { testInvalid(test_3079_sup,test_3079_sub); }

		private static final SyntacticType test_3080_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3080_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3080() { testInvalid(test_3080_sup,test_3080_sub); }

		private static final SyntacticType test_3081_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3081_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3081() { testInvalid(test_3081_sup,test_3081_sub); }

		private static final SyntacticType test_3082_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3082_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3082() { testInvalid(test_3082_sup,test_3082_sub); }

		private static final SyntacticType test_3083_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3083_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3083() { testInvalid(test_3083_sup,test_3083_sub); }

		private static final SyntacticType test_3084_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3084_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3084() { testInvalid(test_3084_sup,test_3084_sub); }

		private static final SyntacticType test_3085_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3085_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3085() { testValid(test_3085_sup,test_3085_sub); }

		private static final SyntacticType test_3086_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3086_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3086() { testInvalid(test_3086_sup,test_3086_sub); }

		private static final SyntacticType test_3087_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3087_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3087() { testInvalid(test_3087_sup,test_3087_sub); }

		private static final SyntacticType test_3088_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3088_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3088() { testInvalid(test_3088_sup,test_3088_sub); }

		private static final SyntacticType test_3089_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3089_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3089() { testInvalid(test_3089_sup,test_3089_sub); }

		private static final SyntacticType test_3090_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3090_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3090() { testInvalid(test_3090_sup,test_3090_sub); }

		private static final SyntacticType test_3091_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3091_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3091() { testInvalid(test_3091_sup,test_3091_sub); }

		private static final SyntacticType test_3092_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3092_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3092() { testInvalid(test_3092_sup,test_3092_sub); }

		private static final SyntacticType test_3093_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3093_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3093() { testValid(test_3093_sup,test_3093_sub); }

		private static final SyntacticType test_3094_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3094_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3094() { testInvalid(test_3094_sup,test_3094_sub); }

		private static final SyntacticType test_3095_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3095_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3095() { testInvalid(test_3095_sup,test_3095_sub); }

		private static final SyntacticType test_3096_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3096_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3096() { testInvalid(test_3096_sup,test_3096_sub); }

		private static final SyntacticType test_3097_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3097_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3097() { testInvalid(test_3097_sup,test_3097_sub); }

		private static final SyntacticType test_3098_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3098_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3098() { testInvalid(test_3098_sup,test_3098_sub); }

		private static final SyntacticType test_3099_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3099_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3099() { testInvalid(test_3099_sup,test_3099_sub); }

		private static final SyntacticType test_3100_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3100_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3100() { testInvalid(test_3100_sup,test_3100_sub); }

		private static final SyntacticType test_3101_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3101_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3101() { testInvalid(test_3101_sup,test_3101_sub); }

		private static final SyntacticType test_3102_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3102_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3102() { testInvalid(test_3102_sup,test_3102_sub); }

		private static final SyntacticType test_3103_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3103_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3103() { testInvalid(test_3103_sup,test_3103_sub); }

		private static final SyntacticType test_3104_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3104_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3104() { testInvalid(test_3104_sup,test_3104_sub); }

		private static final SyntacticType test_3105_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3105_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3105() { testInvalid(test_3105_sup,test_3105_sub); }

		private static final SyntacticType test_3106_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3106_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3106() { testInvalid(test_3106_sup,test_3106_sub); }

		private static final SyntacticType test_3107_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3107_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3107() { testInvalid(test_3107_sup,test_3107_sub); }

		private static final SyntacticType test_3108_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3108_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3108() { testValid(test_3108_sup,test_3108_sub); }

		private static final SyntacticType test_3109_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3109_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3109() { testInvalid(test_3109_sup,test_3109_sub); }

		private static final SyntacticType test_3110_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3110_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3110() { testInvalid(test_3110_sup,test_3110_sub); }

		private static final SyntacticType test_3111_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3111_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3111() { testInvalid(test_3111_sup,test_3111_sub); }

		private static final SyntacticType test_3112_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3112_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3112() { testInvalid(test_3112_sup,test_3112_sub); }

		private static final SyntacticType test_3113_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3113_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3113() { testInvalid(test_3113_sup,test_3113_sub); }

		private static final SyntacticType test_3114_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3114_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3114() { testInvalid(test_3114_sup,test_3114_sub); }

		private static final SyntacticType test_3115_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3115_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3115() { testInvalid(test_3115_sup,test_3115_sub); }

		private static final SyntacticType test_3116_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3116_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3116() { testInvalid(test_3116_sup,test_3116_sub); }

		private static final SyntacticType test_3117_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3117_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3117() { testInvalid(test_3117_sup,test_3117_sub); }

		private static final SyntacticType test_3118_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3118_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3118() { testInvalid(test_3118_sup,test_3118_sub); }

		private static final SyntacticType test_3119_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3119_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3119() { testInvalid(test_3119_sup,test_3119_sub); }

		private static final SyntacticType test_3120_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3120_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3120() { testInvalid(test_3120_sup,test_3120_sub); }

		private static final SyntacticType test_3121_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3121_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3121() { testInvalid(test_3121_sup,test_3121_sub); }

		private static final SyntacticType test_3122_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3122_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3122() { testInvalid(test_3122_sup,test_3122_sub); }

		private static final SyntacticType test_3123_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3123_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3123() { testValid(test_3123_sup,test_3123_sub); }

		private static final SyntacticType test_3124_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3124_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3124() { testInvalid(test_3124_sup,test_3124_sub); }

		private static final SyntacticType test_3125_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3125_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3125() { testInvalid(test_3125_sup,test_3125_sub); }

		private static final SyntacticType test_3126_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3126_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3126() { testInvalid(test_3126_sup,test_3126_sub); }

		private static final SyntacticType test_3127_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3127_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3127() { testValid(test_3127_sup,test_3127_sub); }

		private static final SyntacticType test_3128_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3128_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3128() { testInvalid(test_3128_sup,test_3128_sub); }

		private static final SyntacticType test_3129_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3129_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3129() { testInvalid(test_3129_sup,test_3129_sub); }

		private static final SyntacticType test_3130_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3130_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3130() { testInvalid(test_3130_sup,test_3130_sub); }

		private static final SyntacticType test_3131_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3131_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3131() { testInvalid(test_3131_sup,test_3131_sub); }

		private static final SyntacticType test_3132_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3132_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3132() { testInvalid(test_3132_sup,test_3132_sub); }

		private static final SyntacticType test_3133_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3133_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3133() { testInvalid(test_3133_sup,test_3133_sub); }

		private static final SyntacticType test_3134_sup = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		private static final SyntacticType test_3134_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3134() { testInvalid(test_3134_sup,test_3134_sub); }

		private static final SyntacticType test_3135_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3135_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3135() { testValid(test_3135_sup,test_3135_sub); }

		private static final SyntacticType test_3136_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3136_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3136() { testValid(test_3136_sup,test_3136_sub); }

		private static final SyntacticType test_3137_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3137_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3137() { testValid(test_3137_sup,test_3137_sub); }

		private static final SyntacticType test_3138_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3138_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3138() { testValid(test_3138_sup,test_3138_sub); }

		private static final SyntacticType test_3139_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3139_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3139() { testValid(test_3139_sup,test_3139_sub); }

		private static final SyntacticType test_3140_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3140_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3140() { testValid(test_3140_sup,test_3140_sub); }

		private static final SyntacticType test_3141_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3141_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3141() { testValid(test_3141_sup,test_3141_sub); }

		private static final SyntacticType test_3142_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3142_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3142() { testValid(test_3142_sup,test_3142_sub); }

		private static final SyntacticType test_3143_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3143_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3143() { testValid(test_3143_sup,test_3143_sub); }

		private static final SyntacticType test_3144_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3144_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3144() { testValid(test_3144_sup,test_3144_sub); }

		private static final SyntacticType test_3145_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3145_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3145() { testValid(test_3145_sup,test_3145_sub); }

		private static final SyntacticType test_3146_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3146_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3146() { testValid(test_3146_sup,test_3146_sub); }

		private static final SyntacticType test_3147_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3147_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3147() { testValid(test_3147_sup,test_3147_sub); }

		private static final SyntacticType test_3148_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3148_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3148() { testValid(test_3148_sup,test_3148_sub); }

		private static final SyntacticType test_3149_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3149_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3149() { testValid(test_3149_sup,test_3149_sub); }

		private static final SyntacticType test_3150_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3150_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3150() { testValid(test_3150_sup,test_3150_sub); }

		private static final SyntacticType test_3151_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3151_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3151() { testValid(test_3151_sup,test_3151_sub); }

		private static final SyntacticType test_3152_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3152_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3152() { testValid(test_3152_sup,test_3152_sub); }

		private static final SyntacticType test_3153_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3153_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3153() { testValid(test_3153_sup,test_3153_sub); }

		private static final SyntacticType test_3154_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3154_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3154() { testValid(test_3154_sup,test_3154_sub); }

		private static final SyntacticType test_3155_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3155_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3155() { testValid(test_3155_sup,test_3155_sub); }

		private static final SyntacticType test_3156_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3156_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3156() { testValid(test_3156_sup,test_3156_sub); }

		private static final SyntacticType test_3157_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3157_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3157() { testValid(test_3157_sup,test_3157_sub); }

		private static final SyntacticType test_3158_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3158_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3158() { testValid(test_3158_sup,test_3158_sub); }

		private static final SyntacticType test_3159_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3159_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3159() { testValid(test_3159_sup,test_3159_sub); }

		private static final SyntacticType test_3160_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3160_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3160() { testValid(test_3160_sup,test_3160_sub); }

		private static final SyntacticType test_3161_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3161_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3161() { testValid(test_3161_sup,test_3161_sub); }

		private static final SyntacticType test_3162_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3162_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3162() { testValid(test_3162_sup,test_3162_sub); }

		private static final SyntacticType test_3163_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3163_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3163() { testValid(test_3163_sup,test_3163_sub); }

		private static final SyntacticType test_3164_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3164_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3164() { testValid(test_3164_sup,test_3164_sub); }

		private static final SyntacticType test_3165_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3165_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3165() { testValid(test_3165_sup,test_3165_sub); }

		private static final SyntacticType test_3166_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3166_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3166() { testValid(test_3166_sup,test_3166_sub); }

		private static final SyntacticType test_3167_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3167_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3167() { testValid(test_3167_sup,test_3167_sub); }

		private static final SyntacticType test_3168_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3168_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3168() { testValid(test_3168_sup,test_3168_sub); }

		private static final SyntacticType test_3169_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3169_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3169() { testValid(test_3169_sup,test_3169_sub); }

		private static final SyntacticType test_3170_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3170_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3170() { testValid(test_3170_sup,test_3170_sub); }

		private static final SyntacticType test_3171_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3171_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3171() { testValid(test_3171_sup,test_3171_sub); }

		private static final SyntacticType test_3172_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3172_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3172() { testValid(test_3172_sup,test_3172_sub); }

		private static final SyntacticType test_3173_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3173_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3173() { testValid(test_3173_sup,test_3173_sub); }

		private static final SyntacticType test_3174_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3174_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3174() { testValid(test_3174_sup,test_3174_sub); }

		private static final SyntacticType test_3175_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3175_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3175() { testValid(test_3175_sup,test_3175_sub); }

		private static final SyntacticType test_3176_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3176_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3176() { testValid(test_3176_sup,test_3176_sub); }

		private static final SyntacticType test_3177_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3177_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3177() { testValid(test_3177_sup,test_3177_sub); }

		private static final SyntacticType test_3178_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3178_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3178() { testValid(test_3178_sup,test_3178_sub); }

		private static final SyntacticType test_3179_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3179_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3179() { testInvalid(test_3179_sup,test_3179_sub); }

		private static final SyntacticType test_3180_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3180_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3180() { testValid(test_3180_sup,test_3180_sub); }

		private static final SyntacticType test_3181_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3181_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3181() { testInvalid(test_3181_sup,test_3181_sub); }

		private static final SyntacticType test_3182_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3182_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3182() { testValid(test_3182_sup,test_3182_sub); }

		private static final SyntacticType test_3183_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3183_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3183() { testInvalid(test_3183_sup,test_3183_sub); }

		private static final SyntacticType test_3184_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3184_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3184() { testValid(test_3184_sup,test_3184_sub); }

		private static final SyntacticType test_3185_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3185_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3185() { testInvalid(test_3185_sup,test_3185_sub); }

		private static final SyntacticType test_3186_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3186_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3186() { testValid(test_3186_sup,test_3186_sub); }

		private static final SyntacticType test_3187_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3187_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3187() { testValid(test_3187_sup,test_3187_sub); }

		private static final SyntacticType test_3188_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3188_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3188() { testValid(test_3188_sup,test_3188_sub); }

		private static final SyntacticType test_3189_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3189_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3189() { testInvalid(test_3189_sup,test_3189_sub); }

		private static final SyntacticType test_3190_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3190_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3190() { testInvalid(test_3190_sup,test_3190_sub); }

		private static final SyntacticType test_3191_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3191_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3191() { testValid(test_3191_sup,test_3191_sub); }

		private static final SyntacticType test_3192_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3192_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3192() { testInvalid(test_3192_sup,test_3192_sub); }

		private static final SyntacticType test_3193_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3193_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3193() { testInvalid(test_3193_sup,test_3193_sub); }

		private static final SyntacticType test_3194_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3194_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3194() { testInvalid(test_3194_sup,test_3194_sub); }

		private static final SyntacticType test_3195_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3195_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3195() { testInvalid(test_3195_sup,test_3195_sub); }

		private static final SyntacticType test_3196_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3196_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3196() { testInvalid(test_3196_sup,test_3196_sub); }

		private static final SyntacticType test_3197_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3197_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3197() { testInvalid(test_3197_sup,test_3197_sub); }

		private static final SyntacticType test_3198_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3198_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3198() { testInvalid(test_3198_sup,test_3198_sub); }

		private static final SyntacticType test_3199_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3199_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3199() { testInvalid(test_3199_sup,test_3199_sub); }

		private static final SyntacticType test_3200_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3200_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3200() { testInvalid(test_3200_sup,test_3200_sub); }

		private static final SyntacticType test_3201_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3201_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3201() { testInvalid(test_3201_sup,test_3201_sub); }

		private static final SyntacticType test_3202_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3202_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3202() { testInvalid(test_3202_sup,test_3202_sub); }

		private static final SyntacticType test_3203_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3203_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3203() { testValid(test_3203_sup,test_3203_sub); }

		private static final SyntacticType test_3204_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3204_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3204() { testInvalid(test_3204_sup,test_3204_sub); }

		private static final SyntacticType test_3205_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3205_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3205() { testInvalid(test_3205_sup,test_3205_sub); }

		private static final SyntacticType test_3206_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3206_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3206() { testInvalid(test_3206_sup,test_3206_sub); }

		private static final SyntacticType test_3207_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3207_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3207() { testInvalid(test_3207_sup,test_3207_sub); }

		private static final SyntacticType test_3208_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3208_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3208() { testInvalid(test_3208_sup,test_3208_sub); }

		private static final SyntacticType test_3209_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3209_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3209() { testValid(test_3209_sup,test_3209_sub); }

		private static final SyntacticType test_3210_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3210_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3210() { testInvalid(test_3210_sup,test_3210_sub); }

		private static final SyntacticType test_3211_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3211_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3211() { testInvalid(test_3211_sup,test_3211_sub); }

		private static final SyntacticType test_3212_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3212_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3212() { testInvalid(test_3212_sup,test_3212_sub); }

		private static final SyntacticType test_3213_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3213_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3213() { testInvalid(test_3213_sup,test_3213_sub); }

		private static final SyntacticType test_3214_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3214_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3214() { testInvalid(test_3214_sup,test_3214_sub); }

		private static final SyntacticType test_3215_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3215_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3215() { testValid(test_3215_sup,test_3215_sub); }

		private static final SyntacticType test_3216_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3216_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3216() { testValid(test_3216_sup,test_3216_sub); }

		private static final SyntacticType test_3217_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3217_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3217() { testValid(test_3217_sup,test_3217_sub); }

		private static final SyntacticType test_3218_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3218_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3218() { testValid(test_3218_sup,test_3218_sub); }

		private static final SyntacticType test_3219_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3219_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3219() { testValid(test_3219_sup,test_3219_sub); }

		private static final SyntacticType test_3220_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3220_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3220() { testInvalid(test_3220_sup,test_3220_sub); }

		private static final SyntacticType test_3221_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3221_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3221() { testValid(test_3221_sup,test_3221_sub); }

		private static final SyntacticType test_3222_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3222_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3222() { testValid(test_3222_sup,test_3222_sub); }

		private static final SyntacticType test_3223_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3223_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3223() { testInvalid(test_3223_sup,test_3223_sub); }

		private static final SyntacticType test_3224_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3224_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3224() { testInvalid(test_3224_sup,test_3224_sub); }

		private static final SyntacticType test_3225_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3225_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3225() { testInvalid(test_3225_sup,test_3225_sub); }

		private static final SyntacticType test_3226_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3226_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3226() { testInvalid(test_3226_sup,test_3226_sub); }

		private static final SyntacticType test_3227_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3227_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3227() { testInvalid(test_3227_sup,test_3227_sub); }

		private static final SyntacticType test_3228_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3228_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3228() { testInvalid(test_3228_sup,test_3228_sub); }

		private static final SyntacticType test_3229_sup = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		private static final SyntacticType test_3229_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3229() { testInvalid(test_3229_sup,test_3229_sub); }

		private static final SyntacticType test_3230_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3230_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3230() { testInvalid(test_3230_sup,test_3230_sub); }

		private static final SyntacticType test_3231_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3231_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3231() { testInvalid(test_3231_sup,test_3231_sub); }

		private static final SyntacticType test_3232_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3232_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3232() { testValid(test_3232_sup,test_3232_sub); }

		private static final SyntacticType test_3233_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3233_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3233() { testInvalid(test_3233_sup,test_3233_sub); }

		private static final SyntacticType test_3234_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3234_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3234() { testInvalid(test_3234_sup,test_3234_sub); }

		private static final SyntacticType test_3235_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3235_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3235() { testInvalid(test_3235_sup,test_3235_sub); }

		private static final SyntacticType test_3236_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3236_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3236() { testInvalid(test_3236_sup,test_3236_sub); }

		private static final SyntacticType test_3237_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3237_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3237() { testInvalid(test_3237_sup,test_3237_sub); }

		private static final SyntacticType test_3238_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3238_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3238() { testInvalid(test_3238_sup,test_3238_sub); }

		private static final SyntacticType test_3239_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3239_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3239() { testInvalid(test_3239_sup,test_3239_sub); }

		private static final SyntacticType test_3240_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3240_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3240() { testInvalid(test_3240_sup,test_3240_sub); }

		private static final SyntacticType test_3241_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3241_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3241() { testInvalid(test_3241_sup,test_3241_sub); }

		private static final SyntacticType test_3242_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3242_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3242() { testInvalid(test_3242_sup,test_3242_sub); }

		private static final SyntacticType test_3243_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3243_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3243() { testInvalid(test_3243_sup,test_3243_sub); }

		private static final SyntacticType test_3244_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3244_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3244() { testInvalid(test_3244_sup,test_3244_sub); }

		private static final SyntacticType test_3245_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3245_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3245() { testInvalid(test_3245_sup,test_3245_sub); }

		private static final SyntacticType test_3246_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3246_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3246() { testInvalid(test_3246_sup,test_3246_sub); }

		private static final SyntacticType test_3247_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3247_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3247() { testInvalid(test_3247_sup,test_3247_sub); }

		private static final SyntacticType test_3248_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3248_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3248() { testInvalid(test_3248_sup,test_3248_sub); }

		private static final SyntacticType test_3249_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3249_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3249() { testInvalid(test_3249_sup,test_3249_sub); }

		private static final SyntacticType test_3250_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3250_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3250() { testInvalid(test_3250_sup,test_3250_sub); }

		private static final SyntacticType test_3251_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3251_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3251() { testInvalid(test_3251_sup,test_3251_sub); }

		private static final SyntacticType test_3252_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3252_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3252() { testInvalid(test_3252_sup,test_3252_sub); }

		private static final SyntacticType test_3253_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3253_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3253() { testInvalid(test_3253_sup,test_3253_sub); }

		private static final SyntacticType test_3254_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3254_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3254() { testInvalid(test_3254_sup,test_3254_sub); }

		private static final SyntacticType test_3255_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3255_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3255() { testInvalid(test_3255_sup,test_3255_sub); }

		private static final SyntacticType test_3256_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3256_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3256() { testInvalid(test_3256_sup,test_3256_sub); }

		private static final SyntacticType test_3257_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3257_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3257() { testInvalid(test_3257_sup,test_3257_sub); }

		private static final SyntacticType test_3258_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3258_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3258() { testInvalid(test_3258_sup,test_3258_sub); }

		private static final SyntacticType test_3259_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3259_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3259() { testInvalid(test_3259_sup,test_3259_sub); }

		private static final SyntacticType test_3260_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3260_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3260() { testInvalid(test_3260_sup,test_3260_sub); }

		private static final SyntacticType test_3261_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3261_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3261() { testInvalid(test_3261_sup,test_3261_sub); }

		private static final SyntacticType test_3262_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3262_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3262() { testInvalid(test_3262_sup,test_3262_sub); }

		private static final SyntacticType test_3263_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3263_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3263() { testInvalid(test_3263_sup,test_3263_sub); }

		private static final SyntacticType test_3264_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3264_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3264() { testValid(test_3264_sup,test_3264_sub); }

		private static final SyntacticType test_3265_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3265_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3265() { testInvalid(test_3265_sup,test_3265_sub); }

		private static final SyntacticType test_3266_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3266_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3266() { testInvalid(test_3266_sup,test_3266_sub); }

		private static final SyntacticType test_3267_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3267_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3267() { testInvalid(test_3267_sup,test_3267_sub); }

		private static final SyntacticType test_3268_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3268_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3268() { testInvalid(test_3268_sup,test_3268_sub); }

		private static final SyntacticType test_3269_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3269_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3269() { testInvalid(test_3269_sup,test_3269_sub); }

		private static final SyntacticType test_3270_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3270_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3270() { testInvalid(test_3270_sup,test_3270_sub); }

		private static final SyntacticType test_3271_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3271_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3271() { testInvalid(test_3271_sup,test_3271_sub); }

		private static final SyntacticType test_3272_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3272_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3272() { testInvalid(test_3272_sup,test_3272_sub); }

		private static final SyntacticType test_3273_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3273_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3273() { testInvalid(test_3273_sup,test_3273_sub); }

		private static final SyntacticType test_3274_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3274_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3274() { testInvalid(test_3274_sup,test_3274_sub); }

		private static final SyntacticType test_3275_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3275_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3275() { testInvalid(test_3275_sup,test_3275_sub); }

		private static final SyntacticType test_3276_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3276_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3276() { testInvalid(test_3276_sup,test_3276_sub); }

		private static final SyntacticType test_3277_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3277_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3277() { testInvalid(test_3277_sup,test_3277_sub); }

		private static final SyntacticType test_3278_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3278_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3278() { testInvalid(test_3278_sup,test_3278_sub); }

		private static final SyntacticType test_3279_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3279_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3279() { testInvalid(test_3279_sup,test_3279_sub); }

		private static final SyntacticType test_3280_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3280_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3280() { testInvalid(test_3280_sup,test_3280_sub); }

		private static final SyntacticType test_3281_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3281_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3281() { testInvalid(test_3281_sup,test_3281_sub); }

		private static final SyntacticType test_3282_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3282_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3282() { testInvalid(test_3282_sup,test_3282_sub); }

		private static final SyntacticType test_3283_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3283_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3283() { testInvalid(test_3283_sup,test_3283_sub); }

		private static final SyntacticType test_3284_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3284_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3284() { testInvalid(test_3284_sup,test_3284_sub); }

		private static final SyntacticType test_3285_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3285_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3285() { testInvalid(test_3285_sup,test_3285_sub); }

		private static final SyntacticType test_3286_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3286_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3286() { testInvalid(test_3286_sup,test_3286_sub); }

		private static final SyntacticType test_3287_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3287_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3287() { testInvalid(test_3287_sup,test_3287_sub); }

		private static final SyntacticType test_3288_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3288_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3288() { testInvalid(test_3288_sup,test_3288_sub); }

		private static final SyntacticType test_3289_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3289_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3289() { testInvalid(test_3289_sup,test_3289_sub); }

		private static final SyntacticType test_3290_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3290_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3290() { testInvalid(test_3290_sup,test_3290_sub); }

		private static final SyntacticType test_3291_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3291_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3291() { testInvalid(test_3291_sup,test_3291_sub); }

		private static final SyntacticType test_3292_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3292_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3292() { testInvalid(test_3292_sup,test_3292_sub); }

		private static final SyntacticType test_3293_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3293_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3293() { testInvalid(test_3293_sup,test_3293_sub); }

		private static final SyntacticType test_3294_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3294_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3294() { testInvalid(test_3294_sup,test_3294_sub); }

		private static final SyntacticType test_3295_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3295_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3295() { testInvalid(test_3295_sup,test_3295_sub); }

		private static final SyntacticType test_3296_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3296_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3296() { testInvalid(test_3296_sup,test_3296_sub); }

		private static final SyntacticType test_3297_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3297_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3297() { testInvalid(test_3297_sup,test_3297_sub); }

		private static final SyntacticType test_3298_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3298_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3298() { testInvalid(test_3298_sup,test_3298_sub); }

		private static final SyntacticType test_3299_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3299_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3299() { testInvalid(test_3299_sup,test_3299_sub); }

		private static final SyntacticType test_3300_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3300_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3300() { testInvalid(test_3300_sup,test_3300_sub); }

		private static final SyntacticType test_3301_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3301_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3301() { testInvalid(test_3301_sup,test_3301_sub); }

		private static final SyntacticType test_3302_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3302_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3302() { testInvalid(test_3302_sup,test_3302_sub); }

		private static final SyntacticType test_3303_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3303_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3303() { testInvalid(test_3303_sup,test_3303_sub); }

		private static final SyntacticType test_3304_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3304_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3304() { testInvalid(test_3304_sup,test_3304_sub); }

		private static final SyntacticType test_3305_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3305_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3305() { testInvalid(test_3305_sup,test_3305_sub); }

		private static final SyntacticType test_3306_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3306_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3306() { testInvalid(test_3306_sup,test_3306_sub); }

		private static final SyntacticType test_3307_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3307_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3307() { testInvalid(test_3307_sup,test_3307_sub); }

		private static final SyntacticType test_3308_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3308_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3308() { testInvalid(test_3308_sup,test_3308_sub); }

		private static final SyntacticType test_3309_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3309_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3309() { testInvalid(test_3309_sup,test_3309_sub); }

		private static final SyntacticType test_3310_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3310_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3310() { testInvalid(test_3310_sup,test_3310_sub); }

		private static final SyntacticType test_3311_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3311_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3311() { testInvalid(test_3311_sup,test_3311_sub); }

		private static final SyntacticType test_3312_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3312_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3312() { testInvalid(test_3312_sup,test_3312_sub); }

		private static final SyntacticType test_3313_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3313_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3313() { testInvalid(test_3313_sup,test_3313_sub); }

		private static final SyntacticType test_3314_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3314_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3314() { testInvalid(test_3314_sup,test_3314_sub); }

		private static final SyntacticType test_3315_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3315_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3315() { testInvalid(test_3315_sup,test_3315_sub); }

		private static final SyntacticType test_3316_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3316_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3316() { testInvalid(test_3316_sup,test_3316_sub); }

		private static final SyntacticType test_3317_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3317_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3317() { testInvalid(test_3317_sup,test_3317_sub); }

		private static final SyntacticType test_3318_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3318_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3318() { testInvalid(test_3318_sup,test_3318_sub); }

		private static final SyntacticType test_3319_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3319_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3319() { testInvalid(test_3319_sup,test_3319_sub); }

		private static final SyntacticType test_3320_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3320_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3320() { testInvalid(test_3320_sup,test_3320_sub); }

		private static final SyntacticType test_3321_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3321_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3321() { testInvalid(test_3321_sup,test_3321_sub); }

		private static final SyntacticType test_3322_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3322_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3322() { testInvalid(test_3322_sup,test_3322_sub); }

		private static final SyntacticType test_3323_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3323_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3323() { testInvalid(test_3323_sup,test_3323_sub); }

		private static final SyntacticType test_3324_sup = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		private static final SyntacticType test_3324_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3324() { testInvalid(test_3324_sup,test_3324_sub); }

		private static final SyntacticType test_3325_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3325_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3325() { testValid(test_3325_sup,test_3325_sub); }

		private static final SyntacticType test_3326_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3326_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3326() { testValid(test_3326_sup,test_3326_sub); }

		private static final SyntacticType test_3327_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3327_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3327() { testValid(test_3327_sup,test_3327_sub); }

		private static final SyntacticType test_3328_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3328_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3328() { testValid(test_3328_sup,test_3328_sub); }

		private static final SyntacticType test_3329_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3329_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3329() { testValid(test_3329_sup,test_3329_sub); }

		private static final SyntacticType test_3330_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3330_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3330() { testValid(test_3330_sup,test_3330_sub); }

		private static final SyntacticType test_3331_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3331_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3331() { testValid(test_3331_sup,test_3331_sub); }

		private static final SyntacticType test_3332_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3332_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3332() { testValid(test_3332_sup,test_3332_sub); }

		private static final SyntacticType test_3333_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3333_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3333() { testValid(test_3333_sup,test_3333_sub); }

		private static final SyntacticType test_3334_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3334_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3334() { testValid(test_3334_sup,test_3334_sub); }

		private static final SyntacticType test_3335_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3335_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3335() { testValid(test_3335_sup,test_3335_sub); }

		private static final SyntacticType test_3336_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3336_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3336() { testValid(test_3336_sup,test_3336_sub); }

		private static final SyntacticType test_3337_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3337_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3337() { testValid(test_3337_sup,test_3337_sub); }

		private static final SyntacticType test_3338_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3338_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3338() { testValid(test_3338_sup,test_3338_sub); }

		private static final SyntacticType test_3339_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3339_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3339() { testValid(test_3339_sup,test_3339_sub); }

		private static final SyntacticType test_3340_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3340_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3340() { testValid(test_3340_sup,test_3340_sub); }

		private static final SyntacticType test_3341_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3341_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3341() { testValid(test_3341_sup,test_3341_sub); }

		private static final SyntacticType test_3342_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3342_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3342() { testValid(test_3342_sup,test_3342_sub); }

		private static final SyntacticType test_3343_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3343_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3343() { testValid(test_3343_sup,test_3343_sub); }

		private static final SyntacticType test_3344_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3344_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3344() { testValid(test_3344_sup,test_3344_sub); }

		private static final SyntacticType test_3345_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3345_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3345() { testValid(test_3345_sup,test_3345_sub); }

		private static final SyntacticType test_3346_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3346_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3346() { testValid(test_3346_sup,test_3346_sub); }

		private static final SyntacticType test_3347_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3347_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3347() { testValid(test_3347_sup,test_3347_sub); }

		private static final SyntacticType test_3348_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3348_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3348() { testValid(test_3348_sup,test_3348_sub); }

		private static final SyntacticType test_3349_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3349_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3349() { testValid(test_3349_sup,test_3349_sub); }

		private static final SyntacticType test_3350_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3350_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3350() { testValid(test_3350_sup,test_3350_sub); }

		private static final SyntacticType test_3351_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3351_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3351() { testValid(test_3351_sup,test_3351_sub); }

		private static final SyntacticType test_3352_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3352_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3352() { testValid(test_3352_sup,test_3352_sub); }

		private static final SyntacticType test_3353_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3353_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3353() { testValid(test_3353_sup,test_3353_sub); }

		private static final SyntacticType test_3354_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3354_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3354() { testValid(test_3354_sup,test_3354_sub); }

		private static final SyntacticType test_3355_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3355_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3355() { testValid(test_3355_sup,test_3355_sub); }

		private static final SyntacticType test_3356_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3356_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3356() { testValid(test_3356_sup,test_3356_sub); }

		private static final SyntacticType test_3357_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3357_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3357() { testValid(test_3357_sup,test_3357_sub); }

		private static final SyntacticType test_3358_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3358_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3358() { testValid(test_3358_sup,test_3358_sub); }

		private static final SyntacticType test_3359_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3359_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3359() { testValid(test_3359_sup,test_3359_sub); }

		private static final SyntacticType test_3360_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3360_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3360() { testValid(test_3360_sup,test_3360_sub); }

		private static final SyntacticType test_3361_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3361_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3361() { testValid(test_3361_sup,test_3361_sub); }

		private static final SyntacticType test_3362_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3362_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3362() { testValid(test_3362_sup,test_3362_sub); }

		private static final SyntacticType test_3363_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3363_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3363() { testValid(test_3363_sup,test_3363_sub); }

		private static final SyntacticType test_3364_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3364_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3364() { testValid(test_3364_sup,test_3364_sub); }

		private static final SyntacticType test_3365_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3365_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3365() { testValid(test_3365_sup,test_3365_sub); }

		private static final SyntacticType test_3366_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3366_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3366() { testValid(test_3366_sup,test_3366_sub); }

		private static final SyntacticType test_3367_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3367_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3367() { testValid(test_3367_sup,test_3367_sub); }

		private static final SyntacticType test_3368_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3368_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3368() { testValid(test_3368_sup,test_3368_sub); }

		private static final SyntacticType test_3369_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3369_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3369() { testInvalid(test_3369_sup,test_3369_sub); }

		private static final SyntacticType test_3370_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3370_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3370() { testValid(test_3370_sup,test_3370_sub); }

		private static final SyntacticType test_3371_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3371_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3371() { testInvalid(test_3371_sup,test_3371_sub); }

		private static final SyntacticType test_3372_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3372_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3372() { testValid(test_3372_sup,test_3372_sub); }

		private static final SyntacticType test_3373_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3373_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3373() { testInvalid(test_3373_sup,test_3373_sub); }

		private static final SyntacticType test_3374_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3374_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3374() { testValid(test_3374_sup,test_3374_sub); }

		private static final SyntacticType test_3375_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3375_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3375() { testInvalid(test_3375_sup,test_3375_sub); }

		private static final SyntacticType test_3376_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3376_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3376() { testValid(test_3376_sup,test_3376_sub); }

		private static final SyntacticType test_3377_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3377_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3377() { testValid(test_3377_sup,test_3377_sub); }

		private static final SyntacticType test_3378_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3378_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3378() { testValid(test_3378_sup,test_3378_sub); }

		private static final SyntacticType test_3379_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3379_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3379() { testInvalid(test_3379_sup,test_3379_sub); }

		private static final SyntacticType test_3380_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3380_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3380() { testInvalid(test_3380_sup,test_3380_sub); }

		private static final SyntacticType test_3381_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3381_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3381() { testValid(test_3381_sup,test_3381_sub); }

		private static final SyntacticType test_3382_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3382_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3382() { testInvalid(test_3382_sup,test_3382_sub); }

		private static final SyntacticType test_3383_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3383_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3383() { testInvalid(test_3383_sup,test_3383_sub); }

		private static final SyntacticType test_3384_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3384_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3384() { testInvalid(test_3384_sup,test_3384_sub); }

		private static final SyntacticType test_3385_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3385_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3385() { testInvalid(test_3385_sup,test_3385_sub); }

		private static final SyntacticType test_3386_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3386_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3386() { testInvalid(test_3386_sup,test_3386_sub); }

		private static final SyntacticType test_3387_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3387_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3387() { testInvalid(test_3387_sup,test_3387_sub); }

		private static final SyntacticType test_3388_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3388_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3388() { testInvalid(test_3388_sup,test_3388_sub); }

		private static final SyntacticType test_3389_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3389_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3389() { testInvalid(test_3389_sup,test_3389_sub); }

		private static final SyntacticType test_3390_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3390_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3390() { testInvalid(test_3390_sup,test_3390_sub); }

		private static final SyntacticType test_3391_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3391_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3391() { testInvalid(test_3391_sup,test_3391_sub); }

		private static final SyntacticType test_3392_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3392_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3392() { testInvalid(test_3392_sup,test_3392_sub); }

		private static final SyntacticType test_3393_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3393_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3393() { testValid(test_3393_sup,test_3393_sub); }

		private static final SyntacticType test_3394_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3394_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3394() { testInvalid(test_3394_sup,test_3394_sub); }

		private static final SyntacticType test_3395_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3395_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3395() { testInvalid(test_3395_sup,test_3395_sub); }

		private static final SyntacticType test_3396_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3396_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3396() { testInvalid(test_3396_sup,test_3396_sub); }

		private static final SyntacticType test_3397_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3397_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3397() { testInvalid(test_3397_sup,test_3397_sub); }

		private static final SyntacticType test_3398_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3398_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3398() { testInvalid(test_3398_sup,test_3398_sub); }

		private static final SyntacticType test_3399_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3399_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3399() { testValid(test_3399_sup,test_3399_sub); }

		private static final SyntacticType test_3400_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3400_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3400() { testInvalid(test_3400_sup,test_3400_sub); }

		private static final SyntacticType test_3401_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3401_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3401() { testInvalid(test_3401_sup,test_3401_sub); }

		private static final SyntacticType test_3402_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3402_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3402() { testInvalid(test_3402_sup,test_3402_sub); }

		private static final SyntacticType test_3403_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3403_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3403() { testInvalid(test_3403_sup,test_3403_sub); }

		private static final SyntacticType test_3404_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3404_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3404() { testInvalid(test_3404_sup,test_3404_sub); }

		private static final SyntacticType test_3405_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3405_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3405() { testValid(test_3405_sup,test_3405_sub); }

		private static final SyntacticType test_3406_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3406_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3406() { testValid(test_3406_sup,test_3406_sub); }

		private static final SyntacticType test_3407_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3407_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3407() { testValid(test_3407_sup,test_3407_sub); }

		private static final SyntacticType test_3408_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3408_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3408() { testValid(test_3408_sup,test_3408_sub); }

		private static final SyntacticType test_3409_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3409_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3409() { testValid(test_3409_sup,test_3409_sub); }

		private static final SyntacticType test_3410_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3410_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3410() { testInvalid(test_3410_sup,test_3410_sub); }

		private static final SyntacticType test_3411_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3411_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3411() { testValid(test_3411_sup,test_3411_sub); }

		private static final SyntacticType test_3412_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3412_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3412() { testValid(test_3412_sup,test_3412_sub); }

		private static final SyntacticType test_3413_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3413_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3413() { testInvalid(test_3413_sup,test_3413_sub); }

		private static final SyntacticType test_3414_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3414_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3414() { testInvalid(test_3414_sup,test_3414_sub); }

		private static final SyntacticType test_3415_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3415_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3415() { testInvalid(test_3415_sup,test_3415_sub); }

		private static final SyntacticType test_3416_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3416_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3416() { testInvalid(test_3416_sup,test_3416_sub); }

		private static final SyntacticType test_3417_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3417_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3417() { testInvalid(test_3417_sup,test_3417_sub); }

		private static final SyntacticType test_3418_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3418_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3418() { testInvalid(test_3418_sup,test_3418_sub); }

		private static final SyntacticType test_3419_sup = parse("{(!any | (any | int)), ({any} | (any | int))}");
		private static final SyntacticType test_3419_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3419() { testInvalid(test_3419_sup,test_3419_sub); }

		private static final SyntacticType test_3420_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3420_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3420() { testInvalid(test_3420_sup,test_3420_sub); }

		private static final SyntacticType test_3421_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3421_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3421() { testInvalid(test_3421_sup,test_3421_sub); }

		private static final SyntacticType test_3422_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3422_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3422() { testValid(test_3422_sup,test_3422_sub); }

		private static final SyntacticType test_3423_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3423_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3423() { testInvalid(test_3423_sup,test_3423_sub); }

		private static final SyntacticType test_3424_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3424_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3424() { testInvalid(test_3424_sup,test_3424_sub); }

		private static final SyntacticType test_3425_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3425_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3425() { testInvalid(test_3425_sup,test_3425_sub); }

		private static final SyntacticType test_3426_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3426_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3426() { testInvalid(test_3426_sup,test_3426_sub); }

		private static final SyntacticType test_3427_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3427_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3427() { testInvalid(test_3427_sup,test_3427_sub); }

		private static final SyntacticType test_3428_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3428_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3428() { testInvalid(test_3428_sup,test_3428_sub); }

		private static final SyntacticType test_3429_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3429_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3429() { testValid(test_3429_sup,test_3429_sub); }

		private static final SyntacticType test_3430_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3430_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3430() { testValid(test_3430_sup,test_3430_sub); }

		private static final SyntacticType test_3431_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3431_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3431() { testInvalid(test_3431_sup,test_3431_sub); }

		private static final SyntacticType test_3432_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3432_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3432() { testInvalid(test_3432_sup,test_3432_sub); }

		private static final SyntacticType test_3433_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3433_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3433() { testInvalid(test_3433_sup,test_3433_sub); }

		private static final SyntacticType test_3434_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3434_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3434() { testInvalid(test_3434_sup,test_3434_sub); }

		private static final SyntacticType test_3435_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3435_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3435() { testInvalid(test_3435_sup,test_3435_sub); }

		private static final SyntacticType test_3436_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3436_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3436() { testInvalid(test_3436_sup,test_3436_sub); }

		private static final SyntacticType test_3437_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3437_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3437() { testInvalid(test_3437_sup,test_3437_sub); }

		private static final SyntacticType test_3438_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3438_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3438() { testInvalid(test_3438_sup,test_3438_sub); }

		private static final SyntacticType test_3439_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3439_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3439() { testInvalid(test_3439_sup,test_3439_sub); }

		private static final SyntacticType test_3440_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3440_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3440() { testInvalid(test_3440_sup,test_3440_sub); }

		private static final SyntacticType test_3441_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3441_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3441() { testInvalid(test_3441_sup,test_3441_sub); }

		private static final SyntacticType test_3442_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3442_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3442() { testInvalid(test_3442_sup,test_3442_sub); }

		private static final SyntacticType test_3443_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3443_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3443() { testInvalid(test_3443_sup,test_3443_sub); }

		private static final SyntacticType test_3444_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3444_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3444() { testValid(test_3444_sup,test_3444_sub); }

		private static final SyntacticType test_3445_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3445_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3445() { testInvalid(test_3445_sup,test_3445_sub); }

		private static final SyntacticType test_3446_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3446_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3446() { testInvalid(test_3446_sup,test_3446_sub); }

		private static final SyntacticType test_3447_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3447_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3447() { testValid(test_3447_sup,test_3447_sub); }

		private static final SyntacticType test_3448_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3448_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3448() { testValid(test_3448_sup,test_3448_sub); }

		private static final SyntacticType test_3449_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3449_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3449() { testInvalid(test_3449_sup,test_3449_sub); }

		private static final SyntacticType test_3450_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3450_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3450() { testInvalid(test_3450_sup,test_3450_sub); }

		private static final SyntacticType test_3451_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3451_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3451() { testInvalid(test_3451_sup,test_3451_sub); }

		private static final SyntacticType test_3452_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3452_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3452() { testInvalid(test_3452_sup,test_3452_sub); }

		private static final SyntacticType test_3453_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3453_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3453() { testInvalid(test_3453_sup,test_3453_sub); }

		private static final SyntacticType test_3454_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3454_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3454() { testInvalid(test_3454_sup,test_3454_sub); }

		private static final SyntacticType test_3455_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3455_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3455() { testInvalid(test_3455_sup,test_3455_sub); }

		private static final SyntacticType test_3456_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3456_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3456() { testValid(test_3456_sup,test_3456_sub); }

		private static final SyntacticType test_3457_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3457_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3457() { testValid(test_3457_sup,test_3457_sub); }

		private static final SyntacticType test_3458_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3458_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3458() { testInvalid(test_3458_sup,test_3458_sub); }

		private static final SyntacticType test_3459_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3459_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3459() { testInvalid(test_3459_sup,test_3459_sub); }

		private static final SyntacticType test_3460_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3460_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3460() { testInvalid(test_3460_sup,test_3460_sub); }

		private static final SyntacticType test_3461_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3461_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3461() { testInvalid(test_3461_sup,test_3461_sub); }

		private static final SyntacticType test_3462_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3462_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3462() { testInvalid(test_3462_sup,test_3462_sub); }

		private static final SyntacticType test_3463_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3463_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3463() { testInvalid(test_3463_sup,test_3463_sub); }

		private static final SyntacticType test_3464_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3464_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3464() { testInvalid(test_3464_sup,test_3464_sub); }

		private static final SyntacticType test_3465_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3465_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3465() { testInvalid(test_3465_sup,test_3465_sub); }

		private static final SyntacticType test_3466_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3466_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3466() { testInvalid(test_3466_sup,test_3466_sub); }

		private static final SyntacticType test_3467_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3467_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3467() { testInvalid(test_3467_sup,test_3467_sub); }

		private static final SyntacticType test_3468_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3468_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3468() { testInvalid(test_3468_sup,test_3468_sub); }

		private static final SyntacticType test_3469_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3469_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3469() { testInvalid(test_3469_sup,test_3469_sub); }

		private static final SyntacticType test_3470_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3470_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3470() { testInvalid(test_3470_sup,test_3470_sub); }

		private static final SyntacticType test_3471_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3471_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3471() { testInvalid(test_3471_sup,test_3471_sub); }

		private static final SyntacticType test_3472_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3472_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3472() { testInvalid(test_3472_sup,test_3472_sub); }

		private static final SyntacticType test_3473_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3473_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3473() { testInvalid(test_3473_sup,test_3473_sub); }

		private static final SyntacticType test_3474_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3474_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3474() { testInvalid(test_3474_sup,test_3474_sub); }

		private static final SyntacticType test_3475_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3475_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3475() { testInvalid(test_3475_sup,test_3475_sub); }

		private static final SyntacticType test_3476_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3476_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3476() { testInvalid(test_3476_sup,test_3476_sub); }

		private static final SyntacticType test_3477_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3477_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3477() { testInvalid(test_3477_sup,test_3477_sub); }

		private static final SyntacticType test_3478_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3478_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3478() { testInvalid(test_3478_sup,test_3478_sub); }

		private static final SyntacticType test_3479_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3479_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3479() { testInvalid(test_3479_sup,test_3479_sub); }

		private static final SyntacticType test_3480_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3480_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3480() { testInvalid(test_3480_sup,test_3480_sub); }

		private static final SyntacticType test_3481_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3481_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3481() { testInvalid(test_3481_sup,test_3481_sub); }

		private static final SyntacticType test_3482_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3482_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3482() { testInvalid(test_3482_sup,test_3482_sub); }

		private static final SyntacticType test_3483_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3483_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3483() { testInvalid(test_3483_sup,test_3483_sub); }

		private static final SyntacticType test_3484_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3484_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3484() { testInvalid(test_3484_sup,test_3484_sub); }

		private static final SyntacticType test_3485_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3485_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3485() { testInvalid(test_3485_sup,test_3485_sub); }

		private static final SyntacticType test_3486_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3486_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3486() { testInvalid(test_3486_sup,test_3486_sub); }

		private static final SyntacticType test_3487_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3487_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3487() { testInvalid(test_3487_sup,test_3487_sub); }

		private static final SyntacticType test_3488_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3488_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3488() { testInvalid(test_3488_sup,test_3488_sub); }

		private static final SyntacticType test_3489_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3489_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3489() { testInvalid(test_3489_sup,test_3489_sub); }

		private static final SyntacticType test_3490_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3490_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3490() { testInvalid(test_3490_sup,test_3490_sub); }

		private static final SyntacticType test_3491_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3491_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3491() { testInvalid(test_3491_sup,test_3491_sub); }

		private static final SyntacticType test_3492_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3492_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3492() { testInvalid(test_3492_sup,test_3492_sub); }

		private static final SyntacticType test_3493_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3493_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3493() { testInvalid(test_3493_sup,test_3493_sub); }

		private static final SyntacticType test_3494_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3494_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3494() { testInvalid(test_3494_sup,test_3494_sub); }

		private static final SyntacticType test_3495_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3495_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3495() { testInvalid(test_3495_sup,test_3495_sub); }

		private static final SyntacticType test_3496_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3496_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3496() { testInvalid(test_3496_sup,test_3496_sub); }

		private static final SyntacticType test_3497_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3497_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3497() { testInvalid(test_3497_sup,test_3497_sub); }

		private static final SyntacticType test_3498_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3498_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3498() { testInvalid(test_3498_sup,test_3498_sub); }

		private static final SyntacticType test_3499_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3499_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3499() { testInvalid(test_3499_sup,test_3499_sub); }

		private static final SyntacticType test_3500_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3500_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3500() { testInvalid(test_3500_sup,test_3500_sub); }

		private static final SyntacticType test_3501_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3501_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3501() { testInvalid(test_3501_sup,test_3501_sub); }

		private static final SyntacticType test_3502_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3502_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3502() { testInvalid(test_3502_sup,test_3502_sub); }

		private static final SyntacticType test_3503_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3503_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3503() { testInvalid(test_3503_sup,test_3503_sub); }

		private static final SyntacticType test_3504_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3504_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3504() { testInvalid(test_3504_sup,test_3504_sub); }

		private static final SyntacticType test_3505_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3505_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3505() { testInvalid(test_3505_sup,test_3505_sub); }

		private static final SyntacticType test_3506_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3506_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3506() { testInvalid(test_3506_sup,test_3506_sub); }

		private static final SyntacticType test_3507_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3507_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3507() { testInvalid(test_3507_sup,test_3507_sub); }

		private static final SyntacticType test_3508_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3508_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3508() { testInvalid(test_3508_sup,test_3508_sub); }

		private static final SyntacticType test_3509_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3509_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3509() { testInvalid(test_3509_sup,test_3509_sub); }

		private static final SyntacticType test_3510_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3510_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3510() { testInvalid(test_3510_sup,test_3510_sub); }

		private static final SyntacticType test_3511_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3511_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3511() { testInvalid(test_3511_sup,test_3511_sub); }

		private static final SyntacticType test_3512_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3512_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3512() { testInvalid(test_3512_sup,test_3512_sub); }

		private static final SyntacticType test_3513_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3513_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3513() { testInvalid(test_3513_sup,test_3513_sub); }

		private static final SyntacticType test_3514_sup = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		private static final SyntacticType test_3514_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3514() { testInvalid(test_3514_sup,test_3514_sub); }

		private static final SyntacticType test_3515_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3515_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3515() { testInvalid(test_3515_sup,test_3515_sub); }

		private static final SyntacticType test_3516_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3516_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3516() { testInvalid(test_3516_sup,test_3516_sub); }

		private static final SyntacticType test_3517_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3517_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3517() { testInvalid(test_3517_sup,test_3517_sub); }

		private static final SyntacticType test_3518_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3518_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3518() { testInvalid(test_3518_sup,test_3518_sub); }

		private static final SyntacticType test_3519_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3519_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3519() { testInvalid(test_3519_sup,test_3519_sub); }

		private static final SyntacticType test_3520_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3520_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3520() { testInvalid(test_3520_sup,test_3520_sub); }

		private static final SyntacticType test_3521_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3521_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3521() { testInvalid(test_3521_sup,test_3521_sub); }

		private static final SyntacticType test_3522_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3522_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3522() { testInvalid(test_3522_sup,test_3522_sub); }

		private static final SyntacticType test_3523_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3523_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3523() { testInvalid(test_3523_sup,test_3523_sub); }

		private static final SyntacticType test_3524_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3524_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3524() { testInvalid(test_3524_sup,test_3524_sub); }

		private static final SyntacticType test_3525_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3525_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3525() { testInvalid(test_3525_sup,test_3525_sub); }

		private static final SyntacticType test_3526_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3526_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3526() { testInvalid(test_3526_sup,test_3526_sub); }

		private static final SyntacticType test_3527_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3527_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3527() { testInvalid(test_3527_sup,test_3527_sub); }

		private static final SyntacticType test_3528_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3528_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3528() { testInvalid(test_3528_sup,test_3528_sub); }

		private static final SyntacticType test_3529_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3529_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3529() { testInvalid(test_3529_sup,test_3529_sub); }

		private static final SyntacticType test_3530_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3530_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3530() { testInvalid(test_3530_sup,test_3530_sub); }

		private static final SyntacticType test_3531_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3531_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3531() { testInvalid(test_3531_sup,test_3531_sub); }

		private static final SyntacticType test_3532_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3532_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3532() { testInvalid(test_3532_sup,test_3532_sub); }

		private static final SyntacticType test_3533_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3533_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3533() { testInvalid(test_3533_sup,test_3533_sub); }

		private static final SyntacticType test_3534_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3534_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3534() { testInvalid(test_3534_sup,test_3534_sub); }

		private static final SyntacticType test_3535_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3535_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3535() { testInvalid(test_3535_sup,test_3535_sub); }

		private static final SyntacticType test_3536_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3536_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3536() { testInvalid(test_3536_sup,test_3536_sub); }

		private static final SyntacticType test_3537_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3537_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3537() { testInvalid(test_3537_sup,test_3537_sub); }

		private static final SyntacticType test_3538_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3538_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3538() { testInvalid(test_3538_sup,test_3538_sub); }

		private static final SyntacticType test_3539_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3539_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3539() { testInvalid(test_3539_sup,test_3539_sub); }

		private static final SyntacticType test_3540_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3540_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3540() { testInvalid(test_3540_sup,test_3540_sub); }

		private static final SyntacticType test_3541_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3541_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3541() { testInvalid(test_3541_sup,test_3541_sub); }

		private static final SyntacticType test_3542_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3542_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3542() { testInvalid(test_3542_sup,test_3542_sub); }

		private static final SyntacticType test_3543_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3543_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3543() { testInvalid(test_3543_sup,test_3543_sub); }

		private static final SyntacticType test_3544_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3544_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3544() { testInvalid(test_3544_sup,test_3544_sub); }

		private static final SyntacticType test_3545_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3545_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3545() { testInvalid(test_3545_sup,test_3545_sub); }

		private static final SyntacticType test_3546_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3546_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3546() { testInvalid(test_3546_sup,test_3546_sub); }

		private static final SyntacticType test_3547_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3547_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3547() { testInvalid(test_3547_sup,test_3547_sub); }

		private static final SyntacticType test_3548_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3548_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3548() { testInvalid(test_3548_sup,test_3548_sub); }

		private static final SyntacticType test_3549_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3549_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3549() { testInvalid(test_3549_sup,test_3549_sub); }

		private static final SyntacticType test_3550_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3550_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3550() { testInvalid(test_3550_sup,test_3550_sub); }

		private static final SyntacticType test_3551_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3551_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3551() { testInvalid(test_3551_sup,test_3551_sub); }

		private static final SyntacticType test_3552_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3552_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3552() { testValid(test_3552_sup,test_3552_sub); }

		private static final SyntacticType test_3553_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3553_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3553() { testInvalid(test_3553_sup,test_3553_sub); }

		private static final SyntacticType test_3554_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3554_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3554() { testInvalid(test_3554_sup,test_3554_sub); }

		private static final SyntacticType test_3555_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3555_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3555() { testInvalid(test_3555_sup,test_3555_sub); }

		private static final SyntacticType test_3556_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3556_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3556() { testInvalid(test_3556_sup,test_3556_sub); }

		private static final SyntacticType test_3557_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3557_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3557() { testInvalid(test_3557_sup,test_3557_sub); }

		private static final SyntacticType test_3558_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3558_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3558() { testInvalid(test_3558_sup,test_3558_sub); }

		private static final SyntacticType test_3559_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3559_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3559() { testInvalid(test_3559_sup,test_3559_sub); }

		private static final SyntacticType test_3560_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3560_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3560() { testInvalid(test_3560_sup,test_3560_sub); }

		private static final SyntacticType test_3561_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3561_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3561() { testInvalid(test_3561_sup,test_3561_sub); }

		private static final SyntacticType test_3562_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3562_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3562() { testInvalid(test_3562_sup,test_3562_sub); }

		private static final SyntacticType test_3563_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3563_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3563() { testInvalid(test_3563_sup,test_3563_sub); }

		private static final SyntacticType test_3564_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3564_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3564() { testInvalid(test_3564_sup,test_3564_sub); }

		private static final SyntacticType test_3565_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3565_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3565() { testInvalid(test_3565_sup,test_3565_sub); }

		private static final SyntacticType test_3566_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3566_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3566() { testInvalid(test_3566_sup,test_3566_sub); }

		private static final SyntacticType test_3567_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3567_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3567() { testInvalid(test_3567_sup,test_3567_sub); }

		private static final SyntacticType test_3568_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3568_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3568() { testInvalid(test_3568_sup,test_3568_sub); }

		private static final SyntacticType test_3569_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3569_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3569() { testInvalid(test_3569_sup,test_3569_sub); }

		private static final SyntacticType test_3570_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3570_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3570() { testInvalid(test_3570_sup,test_3570_sub); }

		private static final SyntacticType test_3571_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3571_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3571() { testInvalid(test_3571_sup,test_3571_sub); }

		private static final SyntacticType test_3572_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3572_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3572() { testInvalid(test_3572_sup,test_3572_sub); }

		private static final SyntacticType test_3573_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3573_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3573() { testInvalid(test_3573_sup,test_3573_sub); }

		private static final SyntacticType test_3574_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3574_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3574() { testInvalid(test_3574_sup,test_3574_sub); }

		private static final SyntacticType test_3575_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3575_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3575() { testInvalid(test_3575_sup,test_3575_sub); }

		private static final SyntacticType test_3576_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3576_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3576() { testInvalid(test_3576_sup,test_3576_sub); }

		private static final SyntacticType test_3577_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3577_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3577() { testInvalid(test_3577_sup,test_3577_sub); }

		private static final SyntacticType test_3578_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3578_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3578() { testInvalid(test_3578_sup,test_3578_sub); }

		private static final SyntacticType test_3579_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3579_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3579() { testInvalid(test_3579_sup,test_3579_sub); }

		private static final SyntacticType test_3580_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3580_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3580() { testInvalid(test_3580_sup,test_3580_sub); }

		private static final SyntacticType test_3581_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3581_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3581() { testInvalid(test_3581_sup,test_3581_sub); }

		private static final SyntacticType test_3582_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3582_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3582() { testInvalid(test_3582_sup,test_3582_sub); }

		private static final SyntacticType test_3583_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3583_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3583() { testInvalid(test_3583_sup,test_3583_sub); }

		private static final SyntacticType test_3584_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3584_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3584() { testInvalid(test_3584_sup,test_3584_sub); }

		private static final SyntacticType test_3585_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3585_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3585() { testInvalid(test_3585_sup,test_3585_sub); }

		private static final SyntacticType test_3586_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3586_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3586() { testInvalid(test_3586_sup,test_3586_sub); }

		private static final SyntacticType test_3587_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3587_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3587() { testInvalid(test_3587_sup,test_3587_sub); }

		private static final SyntacticType test_3588_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3588_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3588() { testInvalid(test_3588_sup,test_3588_sub); }

		private static final SyntacticType test_3589_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3589_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3589() { testInvalid(test_3589_sup,test_3589_sub); }

		private static final SyntacticType test_3590_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3590_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3590() { testInvalid(test_3590_sup,test_3590_sub); }

		private static final SyntacticType test_3591_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3591_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3591() { testInvalid(test_3591_sup,test_3591_sub); }

		private static final SyntacticType test_3592_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3592_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3592() { testInvalid(test_3592_sup,test_3592_sub); }

		private static final SyntacticType test_3593_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3593_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3593() { testInvalid(test_3593_sup,test_3593_sub); }

		private static final SyntacticType test_3594_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3594_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3594() { testInvalid(test_3594_sup,test_3594_sub); }

		private static final SyntacticType test_3595_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3595_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3595() { testInvalid(test_3595_sup,test_3595_sub); }

		private static final SyntacticType test_3596_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3596_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3596() { testInvalid(test_3596_sup,test_3596_sub); }

		private static final SyntacticType test_3597_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3597_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3597() { testInvalid(test_3597_sup,test_3597_sub); }

		private static final SyntacticType test_3598_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3598_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3598() { testInvalid(test_3598_sup,test_3598_sub); }

		private static final SyntacticType test_3599_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3599_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3599() { testInvalid(test_3599_sup,test_3599_sub); }

		private static final SyntacticType test_3600_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3600_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3600() { testInvalid(test_3600_sup,test_3600_sub); }

		private static final SyntacticType test_3601_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3601_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3601() { testInvalid(test_3601_sup,test_3601_sub); }

		private static final SyntacticType test_3602_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3602_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3602() { testInvalid(test_3602_sup,test_3602_sub); }

		private static final SyntacticType test_3603_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3603_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3603() { testInvalid(test_3603_sup,test_3603_sub); }

		private static final SyntacticType test_3604_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3604_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3604() { testInvalid(test_3604_sup,test_3604_sub); }

		private static final SyntacticType test_3605_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3605_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3605() { testInvalid(test_3605_sup,test_3605_sub); }

		private static final SyntacticType test_3606_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3606_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3606() { testInvalid(test_3606_sup,test_3606_sub); }

		private static final SyntacticType test_3607_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3607_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3607() { testInvalid(test_3607_sup,test_3607_sub); }

		private static final SyntacticType test_3608_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3608_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3608() { testInvalid(test_3608_sup,test_3608_sub); }

		private static final SyntacticType test_3609_sup = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		private static final SyntacticType test_3609_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3609() { testInvalid(test_3609_sup,test_3609_sub); }

		private static final SyntacticType test_3610_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3610_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3610() { testInvalid(test_3610_sup,test_3610_sub); }

		private static final SyntacticType test_3611_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3611_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3611() { testInvalid(test_3611_sup,test_3611_sub); }

		private static final SyntacticType test_3612_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3612_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3612() { testInvalid(test_3612_sup,test_3612_sub); }

		private static final SyntacticType test_3613_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3613_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3613() { testInvalid(test_3613_sup,test_3613_sub); }

		private static final SyntacticType test_3614_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3614_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3614() { testInvalid(test_3614_sup,test_3614_sub); }

		private static final SyntacticType test_3615_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3615_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3615() { testInvalid(test_3615_sup,test_3615_sub); }

		private static final SyntacticType test_3616_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3616_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3616() { testInvalid(test_3616_sup,test_3616_sub); }

		private static final SyntacticType test_3617_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3617_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3617() { testInvalid(test_3617_sup,test_3617_sub); }

		private static final SyntacticType test_3618_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3618_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3618() { testInvalid(test_3618_sup,test_3618_sub); }

		private static final SyntacticType test_3619_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3619_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3619() { testInvalid(test_3619_sup,test_3619_sub); }

		private static final SyntacticType test_3620_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3620_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3620() { testInvalid(test_3620_sup,test_3620_sub); }

		private static final SyntacticType test_3621_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3621_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3621() { testInvalid(test_3621_sup,test_3621_sub); }

		private static final SyntacticType test_3622_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3622_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3622() { testInvalid(test_3622_sup,test_3622_sub); }

		private static final SyntacticType test_3623_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3623_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3623() { testInvalid(test_3623_sup,test_3623_sub); }

		private static final SyntacticType test_3624_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3624_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3624() { testInvalid(test_3624_sup,test_3624_sub); }

		private static final SyntacticType test_3625_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3625_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3625() { testInvalid(test_3625_sup,test_3625_sub); }

		private static final SyntacticType test_3626_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3626_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3626() { testInvalid(test_3626_sup,test_3626_sub); }

		private static final SyntacticType test_3627_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3627_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3627() { testInvalid(test_3627_sup,test_3627_sub); }

		private static final SyntacticType test_3628_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3628_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3628() { testInvalid(test_3628_sup,test_3628_sub); }

		private static final SyntacticType test_3629_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3629_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3629() { testInvalid(test_3629_sup,test_3629_sub); }

		private static final SyntacticType test_3630_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3630_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3630() { testInvalid(test_3630_sup,test_3630_sub); }

		private static final SyntacticType test_3631_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3631_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3631() { testInvalid(test_3631_sup,test_3631_sub); }

		private static final SyntacticType test_3632_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3632_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3632() { testInvalid(test_3632_sup,test_3632_sub); }

		private static final SyntacticType test_3633_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3633_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3633() { testValid(test_3633_sup,test_3633_sub); }

		private static final SyntacticType test_3634_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3634_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3634() { testInvalid(test_3634_sup,test_3634_sub); }

		private static final SyntacticType test_3635_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3635_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3635() { testInvalid(test_3635_sup,test_3635_sub); }

		private static final SyntacticType test_3636_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3636_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3636() { testInvalid(test_3636_sup,test_3636_sub); }

		private static final SyntacticType test_3637_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3637_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3637() { testInvalid(test_3637_sup,test_3637_sub); }

		private static final SyntacticType test_3638_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3638_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3638() { testInvalid(test_3638_sup,test_3638_sub); }

		private static final SyntacticType test_3639_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3639_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3639() { testInvalid(test_3639_sup,test_3639_sub); }

		private static final SyntacticType test_3640_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3640_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3640() { testInvalid(test_3640_sup,test_3640_sub); }

		private static final SyntacticType test_3641_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3641_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3641() { testInvalid(test_3641_sup,test_3641_sub); }

		private static final SyntacticType test_3642_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3642_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3642() { testInvalid(test_3642_sup,test_3642_sub); }

		private static final SyntacticType test_3643_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3643_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3643() { testInvalid(test_3643_sup,test_3643_sub); }

		private static final SyntacticType test_3644_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3644_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3644() { testInvalid(test_3644_sup,test_3644_sub); }

		private static final SyntacticType test_3645_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3645_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3645() { testInvalid(test_3645_sup,test_3645_sub); }

		private static final SyntacticType test_3646_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3646_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3646() { testInvalid(test_3646_sup,test_3646_sub); }

		private static final SyntacticType test_3647_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3647_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3647() { testValid(test_3647_sup,test_3647_sub); }

		private static final SyntacticType test_3648_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3648_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3648() { testValid(test_3648_sup,test_3648_sub); }

		private static final SyntacticType test_3649_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3649_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3649() { testInvalid(test_3649_sup,test_3649_sub); }

		private static final SyntacticType test_3650_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3650_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3650() { testInvalid(test_3650_sup,test_3650_sub); }

		private static final SyntacticType test_3651_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3651_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3651() { testInvalid(test_3651_sup,test_3651_sub); }

		private static final SyntacticType test_3652_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3652_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3652() { testInvalid(test_3652_sup,test_3652_sub); }

		private static final SyntacticType test_3653_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3653_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3653() { testInvalid(test_3653_sup,test_3653_sub); }

		private static final SyntacticType test_3654_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3654_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3654() { testInvalid(test_3654_sup,test_3654_sub); }

		private static final SyntacticType test_3655_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3655_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3655() { testInvalid(test_3655_sup,test_3655_sub); }

		private static final SyntacticType test_3656_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3656_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3656() { testInvalid(test_3656_sup,test_3656_sub); }

		private static final SyntacticType test_3657_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3657_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3657() { testInvalid(test_3657_sup,test_3657_sub); }

		private static final SyntacticType test_3658_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3658_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3658() { testInvalid(test_3658_sup,test_3658_sub); }

		private static final SyntacticType test_3659_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3659_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3659() { testInvalid(test_3659_sup,test_3659_sub); }

		private static final SyntacticType test_3660_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3660_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3660() { testInvalid(test_3660_sup,test_3660_sub); }

		private static final SyntacticType test_3661_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3661_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3661() { testInvalid(test_3661_sup,test_3661_sub); }

		private static final SyntacticType test_3662_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3662_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3662() { testInvalid(test_3662_sup,test_3662_sub); }

		private static final SyntacticType test_3663_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3663_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3663() { testInvalid(test_3663_sup,test_3663_sub); }

		private static final SyntacticType test_3664_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3664_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3664() { testInvalid(test_3664_sup,test_3664_sub); }

		private static final SyntacticType test_3665_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3665_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3665() { testInvalid(test_3665_sup,test_3665_sub); }

		private static final SyntacticType test_3666_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3666_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3666() { testInvalid(test_3666_sup,test_3666_sub); }

		private static final SyntacticType test_3667_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3667_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3667() { testInvalid(test_3667_sup,test_3667_sub); }

		private static final SyntacticType test_3668_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3668_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3668() { testInvalid(test_3668_sup,test_3668_sub); }

		private static final SyntacticType test_3669_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3669_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3669() { testInvalid(test_3669_sup,test_3669_sub); }

		private static final SyntacticType test_3670_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3670_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3670() { testInvalid(test_3670_sup,test_3670_sub); }

		private static final SyntacticType test_3671_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3671_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3671() { testInvalid(test_3671_sup,test_3671_sub); }

		private static final SyntacticType test_3672_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3672_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3672() { testInvalid(test_3672_sup,test_3672_sub); }

		private static final SyntacticType test_3673_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3673_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3673() { testInvalid(test_3673_sup,test_3673_sub); }

		private static final SyntacticType test_3674_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3674_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3674() { testInvalid(test_3674_sup,test_3674_sub); }

		private static final SyntacticType test_3675_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3675_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3675() { testInvalid(test_3675_sup,test_3675_sub); }

		private static final SyntacticType test_3676_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3676_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3676() { testInvalid(test_3676_sup,test_3676_sub); }

		private static final SyntacticType test_3677_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3677_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3677() { testInvalid(test_3677_sup,test_3677_sub); }

		private static final SyntacticType test_3678_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3678_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3678() { testInvalid(test_3678_sup,test_3678_sub); }

		private static final SyntacticType test_3679_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3679_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3679() { testInvalid(test_3679_sup,test_3679_sub); }

		private static final SyntacticType test_3680_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3680_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3680() { testInvalid(test_3680_sup,test_3680_sub); }

		private static final SyntacticType test_3681_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3681_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3681() { testInvalid(test_3681_sup,test_3681_sub); }

		private static final SyntacticType test_3682_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3682_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3682() { testInvalid(test_3682_sup,test_3682_sub); }

		private static final SyntacticType test_3683_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3683_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3683() { testInvalid(test_3683_sup,test_3683_sub); }

		private static final SyntacticType test_3684_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3684_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3684() { testInvalid(test_3684_sup,test_3684_sub); }

		private static final SyntacticType test_3685_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3685_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3685() { testInvalid(test_3685_sup,test_3685_sub); }

		private static final SyntacticType test_3686_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3686_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3686() { testInvalid(test_3686_sup,test_3686_sub); }

		private static final SyntacticType test_3687_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3687_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3687() { testInvalid(test_3687_sup,test_3687_sub); }

		private static final SyntacticType test_3688_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3688_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3688() { testInvalid(test_3688_sup,test_3688_sub); }

		private static final SyntacticType test_3689_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3689_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3689() { testInvalid(test_3689_sup,test_3689_sub); }

		private static final SyntacticType test_3690_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3690_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3690() { testInvalid(test_3690_sup,test_3690_sub); }

		private static final SyntacticType test_3691_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3691_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3691() { testInvalid(test_3691_sup,test_3691_sub); }

		private static final SyntacticType test_3692_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3692_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3692() { testInvalid(test_3692_sup,test_3692_sub); }

		private static final SyntacticType test_3693_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3693_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3693() { testInvalid(test_3693_sup,test_3693_sub); }

		private static final SyntacticType test_3694_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3694_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3694() { testInvalid(test_3694_sup,test_3694_sub); }

		private static final SyntacticType test_3695_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3695_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3695() { testInvalid(test_3695_sup,test_3695_sub); }

		private static final SyntacticType test_3696_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3696_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3696() { testInvalid(test_3696_sup,test_3696_sub); }

		private static final SyntacticType test_3697_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3697_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3697() { testInvalid(test_3697_sup,test_3697_sub); }

		private static final SyntacticType test_3698_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3698_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3698() { testInvalid(test_3698_sup,test_3698_sub); }

		private static final SyntacticType test_3699_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3699_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3699() { testInvalid(test_3699_sup,test_3699_sub); }

		private static final SyntacticType test_3700_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3700_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3700() { testInvalid(test_3700_sup,test_3700_sub); }

		private static final SyntacticType test_3701_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3701_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3701() { testInvalid(test_3701_sup,test_3701_sub); }

		private static final SyntacticType test_3702_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3702_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3702() { testInvalid(test_3702_sup,test_3702_sub); }

		private static final SyntacticType test_3703_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3703_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3703() { testInvalid(test_3703_sup,test_3703_sub); }

		private static final SyntacticType test_3704_sup = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		private static final SyntacticType test_3704_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3704() { testInvalid(test_3704_sup,test_3704_sub); }

		private static final SyntacticType test_3705_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3705_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3705() { testInvalid(test_3705_sup,test_3705_sub); }

		private static final SyntacticType test_3706_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3706_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3706() { testInvalid(test_3706_sup,test_3706_sub); }

		private static final SyntacticType test_3707_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3707_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3707() { testInvalid(test_3707_sup,test_3707_sub); }

		private static final SyntacticType test_3708_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3708_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3708() { testInvalid(test_3708_sup,test_3708_sub); }

		private static final SyntacticType test_3709_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3709_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3709() { testInvalid(test_3709_sup,test_3709_sub); }

		private static final SyntacticType test_3710_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3710_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3710() { testInvalid(test_3710_sup,test_3710_sub); }

		private static final SyntacticType test_3711_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3711_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3711() { testInvalid(test_3711_sup,test_3711_sub); }

		private static final SyntacticType test_3712_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3712_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3712() { testInvalid(test_3712_sup,test_3712_sub); }

		private static final SyntacticType test_3713_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3713_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3713() { testInvalid(test_3713_sup,test_3713_sub); }

		private static final SyntacticType test_3714_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3714_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3714() { testValid(test_3714_sup,test_3714_sub); }

		private static final SyntacticType test_3715_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3715_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3715() { testInvalid(test_3715_sup,test_3715_sub); }

		private static final SyntacticType test_3716_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3716_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3716() { testInvalid(test_3716_sup,test_3716_sub); }

		private static final SyntacticType test_3717_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3717_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3717() { testInvalid(test_3717_sup,test_3717_sub); }

		private static final SyntacticType test_3718_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3718_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3718() { testInvalid(test_3718_sup,test_3718_sub); }

		private static final SyntacticType test_3719_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3719_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3719() { testInvalid(test_3719_sup,test_3719_sub); }

		private static final SyntacticType test_3720_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3720_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3720() { testInvalid(test_3720_sup,test_3720_sub); }

		private static final SyntacticType test_3721_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3721_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3721() { testInvalid(test_3721_sup,test_3721_sub); }

		private static final SyntacticType test_3722_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3722_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3722() { testInvalid(test_3722_sup,test_3722_sub); }

		private static final SyntacticType test_3723_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3723_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3723() { testInvalid(test_3723_sup,test_3723_sub); }

		private static final SyntacticType test_3724_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3724_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3724() { testInvalid(test_3724_sup,test_3724_sub); }

		private static final SyntacticType test_3725_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3725_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3725() { testInvalid(test_3725_sup,test_3725_sub); }

		private static final SyntacticType test_3726_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3726_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3726() { testInvalid(test_3726_sup,test_3726_sub); }

		private static final SyntacticType test_3727_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3727_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3727() { testInvalid(test_3727_sup,test_3727_sub); }

		private static final SyntacticType test_3728_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3728_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3728() { testValid(test_3728_sup,test_3728_sub); }

		private static final SyntacticType test_3729_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3729_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3729() { testValid(test_3729_sup,test_3729_sub); }

		private static final SyntacticType test_3730_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3730_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3730() { testInvalid(test_3730_sup,test_3730_sub); }

		private static final SyntacticType test_3731_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3731_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3731() { testInvalid(test_3731_sup,test_3731_sub); }

		private static final SyntacticType test_3732_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3732_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3732() { testValid(test_3732_sup,test_3732_sub); }

		private static final SyntacticType test_3733_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3733_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3733() { testValid(test_3733_sup,test_3733_sub); }

		private static final SyntacticType test_3734_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3734_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3734() { testInvalid(test_3734_sup,test_3734_sub); }

		private static final SyntacticType test_3735_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3735_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3735() { testInvalid(test_3735_sup,test_3735_sub); }

		private static final SyntacticType test_3736_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3736_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3736() { testInvalid(test_3736_sup,test_3736_sub); }

		private static final SyntacticType test_3737_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3737_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3737() { testInvalid(test_3737_sup,test_3737_sub); }

		private static final SyntacticType test_3738_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3738_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3738() { testInvalid(test_3738_sup,test_3738_sub); }

		private static final SyntacticType test_3739_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3739_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3739() { testInvalid(test_3739_sup,test_3739_sub); }

		private static final SyntacticType test_3740_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3740_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3740() { testInvalid(test_3740_sup,test_3740_sub); }

		private static final SyntacticType test_3741_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3741_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3741() { testInvalid(test_3741_sup,test_3741_sub); }

		private static final SyntacticType test_3742_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3742_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3742() { testValid(test_3742_sup,test_3742_sub); }

		private static final SyntacticType test_3743_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3743_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3743() { testInvalid(test_3743_sup,test_3743_sub); }

		private static final SyntacticType test_3744_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3744_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3744() { testValid(test_3744_sup,test_3744_sub); }

		private static final SyntacticType test_3745_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3745_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3745() { testInvalid(test_3745_sup,test_3745_sub); }

		private static final SyntacticType test_3746_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3746_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3746() { testInvalid(test_3746_sup,test_3746_sub); }

		private static final SyntacticType test_3747_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3747_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3747() { testInvalid(test_3747_sup,test_3747_sub); }

		private static final SyntacticType test_3748_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3748_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3748() { testInvalid(test_3748_sup,test_3748_sub); }

		private static final SyntacticType test_3749_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3749_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3749() { testInvalid(test_3749_sup,test_3749_sub); }

		private static final SyntacticType test_3750_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3750_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3750() { testInvalid(test_3750_sup,test_3750_sub); }

		private static final SyntacticType test_3751_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3751_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3751() { testInvalid(test_3751_sup,test_3751_sub); }

		private static final SyntacticType test_3752_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3752_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3752() { testInvalid(test_3752_sup,test_3752_sub); }

		private static final SyntacticType test_3753_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3753_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3753() { testInvalid(test_3753_sup,test_3753_sub); }

		private static final SyntacticType test_3754_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3754_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3754() { testInvalid(test_3754_sup,test_3754_sub); }

		private static final SyntacticType test_3755_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3755_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3755() { testInvalid(test_3755_sup,test_3755_sub); }

		private static final SyntacticType test_3756_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3756_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3756() { testInvalid(test_3756_sup,test_3756_sub); }

		private static final SyntacticType test_3757_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3757_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3757() { testInvalid(test_3757_sup,test_3757_sub); }

		private static final SyntacticType test_3758_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3758_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3758() { testInvalid(test_3758_sup,test_3758_sub); }

		private static final SyntacticType test_3759_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3759_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3759() { testInvalid(test_3759_sup,test_3759_sub); }

		private static final SyntacticType test_3760_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3760_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3760() { testInvalid(test_3760_sup,test_3760_sub); }

		private static final SyntacticType test_3761_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3761_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3761() { testInvalid(test_3761_sup,test_3761_sub); }

		private static final SyntacticType test_3762_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3762_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3762() { testInvalid(test_3762_sup,test_3762_sub); }

		private static final SyntacticType test_3763_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3763_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3763() { testInvalid(test_3763_sup,test_3763_sub); }

		private static final SyntacticType test_3764_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3764_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3764() { testInvalid(test_3764_sup,test_3764_sub); }

		private static final SyntacticType test_3765_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3765_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3765() { testInvalid(test_3765_sup,test_3765_sub); }

		private static final SyntacticType test_3766_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3766_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3766() { testInvalid(test_3766_sup,test_3766_sub); }

		private static final SyntacticType test_3767_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3767_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3767() { testInvalid(test_3767_sup,test_3767_sub); }

		private static final SyntacticType test_3768_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3768_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3768() { testInvalid(test_3768_sup,test_3768_sub); }

		private static final SyntacticType test_3769_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3769_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3769() { testInvalid(test_3769_sup,test_3769_sub); }

		private static final SyntacticType test_3770_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3770_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3770() { testInvalid(test_3770_sup,test_3770_sub); }

		private static final SyntacticType test_3771_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3771_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3771() { testInvalid(test_3771_sup,test_3771_sub); }

		private static final SyntacticType test_3772_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3772_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3772() { testInvalid(test_3772_sup,test_3772_sub); }

		private static final SyntacticType test_3773_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3773_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3773() { testInvalid(test_3773_sup,test_3773_sub); }

		private static final SyntacticType test_3774_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3774_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3774() { testInvalid(test_3774_sup,test_3774_sub); }

		private static final SyntacticType test_3775_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3775_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3775() { testInvalid(test_3775_sup,test_3775_sub); }

		private static final SyntacticType test_3776_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3776_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3776() { testInvalid(test_3776_sup,test_3776_sub); }

		private static final SyntacticType test_3777_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3777_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3777() { testInvalid(test_3777_sup,test_3777_sub); }

		private static final SyntacticType test_3778_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3778_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3778() { testInvalid(test_3778_sup,test_3778_sub); }

		private static final SyntacticType test_3779_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3779_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3779() { testInvalid(test_3779_sup,test_3779_sub); }

		private static final SyntacticType test_3780_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3780_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3780() { testInvalid(test_3780_sup,test_3780_sub); }

		private static final SyntacticType test_3781_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3781_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3781() { testInvalid(test_3781_sup,test_3781_sub); }

		private static final SyntacticType test_3782_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3782_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3782() { testInvalid(test_3782_sup,test_3782_sub); }

		private static final SyntacticType test_3783_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3783_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3783() { testInvalid(test_3783_sup,test_3783_sub); }

		private static final SyntacticType test_3784_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3784_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3784() { testInvalid(test_3784_sup,test_3784_sub); }

		private static final SyntacticType test_3785_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3785_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3785() { testInvalid(test_3785_sup,test_3785_sub); }

		private static final SyntacticType test_3786_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3786_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3786() { testInvalid(test_3786_sup,test_3786_sub); }

		private static final SyntacticType test_3787_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3787_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3787() { testInvalid(test_3787_sup,test_3787_sub); }

		private static final SyntacticType test_3788_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3788_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3788() { testInvalid(test_3788_sup,test_3788_sub); }

		private static final SyntacticType test_3789_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3789_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3789() { testInvalid(test_3789_sup,test_3789_sub); }

		private static final SyntacticType test_3790_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3790_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3790() { testInvalid(test_3790_sup,test_3790_sub); }

		private static final SyntacticType test_3791_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3791_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3791() { testInvalid(test_3791_sup,test_3791_sub); }

		private static final SyntacticType test_3792_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3792_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3792() { testInvalid(test_3792_sup,test_3792_sub); }

		private static final SyntacticType test_3793_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3793_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3793() { testInvalid(test_3793_sup,test_3793_sub); }

		private static final SyntacticType test_3794_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3794_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3794() { testInvalid(test_3794_sup,test_3794_sub); }

		private static final SyntacticType test_3795_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3795_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3795() { testInvalid(test_3795_sup,test_3795_sub); }

		private static final SyntacticType test_3796_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3796_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3796() { testInvalid(test_3796_sup,test_3796_sub); }

		private static final SyntacticType test_3797_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3797_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3797() { testInvalid(test_3797_sup,test_3797_sub); }

		private static final SyntacticType test_3798_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3798_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3798() { testInvalid(test_3798_sup,test_3798_sub); }

		private static final SyntacticType test_3799_sup = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		private static final SyntacticType test_3799_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3799() { testInvalid(test_3799_sup,test_3799_sub); }

		private static final SyntacticType test_3800_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3800_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3800() { testInvalid(test_3800_sup,test_3800_sub); }

		private static final SyntacticType test_3801_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3801_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3801() { testInvalid(test_3801_sup,test_3801_sub); }

		private static final SyntacticType test_3802_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3802_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3802() { testInvalid(test_3802_sup,test_3802_sub); }

		private static final SyntacticType test_3803_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3803_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3803() { testInvalid(test_3803_sup,test_3803_sub); }

		private static final SyntacticType test_3804_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3804_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3804() { testInvalid(test_3804_sup,test_3804_sub); }

		private static final SyntacticType test_3805_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3805_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3805() { testInvalid(test_3805_sup,test_3805_sub); }

		private static final SyntacticType test_3806_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3806_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3806() { testInvalid(test_3806_sup,test_3806_sub); }

		private static final SyntacticType test_3807_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3807_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3807() { testInvalid(test_3807_sup,test_3807_sub); }

		private static final SyntacticType test_3808_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3808_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3808() { testInvalid(test_3808_sup,test_3808_sub); }

		private static final SyntacticType test_3809_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3809_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3809() { testInvalid(test_3809_sup,test_3809_sub); }

		private static final SyntacticType test_3810_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3810_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3810() { testInvalid(test_3810_sup,test_3810_sub); }

		private static final SyntacticType test_3811_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3811_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3811() { testInvalid(test_3811_sup,test_3811_sub); }

		private static final SyntacticType test_3812_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3812_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3812() { testInvalid(test_3812_sup,test_3812_sub); }

		private static final SyntacticType test_3813_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3813_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3813() { testInvalid(test_3813_sup,test_3813_sub); }

		private static final SyntacticType test_3814_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3814_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3814() { testInvalid(test_3814_sup,test_3814_sub); }

		private static final SyntacticType test_3815_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3815_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3815() { testInvalid(test_3815_sup,test_3815_sub); }

		private static final SyntacticType test_3816_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3816_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3816() { testInvalid(test_3816_sup,test_3816_sub); }

		private static final SyntacticType test_3817_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3817_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3817() { testInvalid(test_3817_sup,test_3817_sub); }

		private static final SyntacticType test_3818_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3818_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3818() { testInvalid(test_3818_sup,test_3818_sub); }

		private static final SyntacticType test_3819_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3819_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3819() { testInvalid(test_3819_sup,test_3819_sub); }

		private static final SyntacticType test_3820_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3820_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3820() { testInvalid(test_3820_sup,test_3820_sub); }

		private static final SyntacticType test_3821_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3821_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3821() { testInvalid(test_3821_sup,test_3821_sub); }

		private static final SyntacticType test_3822_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3822_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3822() { testInvalid(test_3822_sup,test_3822_sub); }

		private static final SyntacticType test_3823_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3823_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3823() { testInvalid(test_3823_sup,test_3823_sub); }

		private static final SyntacticType test_3824_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3824_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3824() { testInvalid(test_3824_sup,test_3824_sub); }

		private static final SyntacticType test_3825_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3825_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3825() { testInvalid(test_3825_sup,test_3825_sub); }

		private static final SyntacticType test_3826_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3826_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3826() { testInvalid(test_3826_sup,test_3826_sub); }

		private static final SyntacticType test_3827_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3827_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3827() { testInvalid(test_3827_sup,test_3827_sub); }

		private static final SyntacticType test_3828_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3828_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3828() { testInvalid(test_3828_sup,test_3828_sub); }

		private static final SyntacticType test_3829_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3829_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3829() { testInvalid(test_3829_sup,test_3829_sub); }

		private static final SyntacticType test_3830_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3830_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3830() { testInvalid(test_3830_sup,test_3830_sub); }

		private static final SyntacticType test_3831_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3831_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3831() { testInvalid(test_3831_sup,test_3831_sub); }

		private static final SyntacticType test_3832_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3832_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3832() { testInvalid(test_3832_sup,test_3832_sub); }

		private static final SyntacticType test_3833_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3833_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3833() { testInvalid(test_3833_sup,test_3833_sub); }

		private static final SyntacticType test_3834_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3834_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3834() { testInvalid(test_3834_sup,test_3834_sub); }

		private static final SyntacticType test_3835_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3835_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3835() { testInvalid(test_3835_sup,test_3835_sub); }

		private static final SyntacticType test_3836_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3836_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3836() { testInvalid(test_3836_sup,test_3836_sub); }

		private static final SyntacticType test_3837_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3837_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3837() { testInvalid(test_3837_sup,test_3837_sub); }

		private static final SyntacticType test_3838_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3838_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3838() { testInvalid(test_3838_sup,test_3838_sub); }

		private static final SyntacticType test_3839_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3839_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3839() { testInvalid(test_3839_sup,test_3839_sub); }

		private static final SyntacticType test_3840_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3840_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3840() { testValid(test_3840_sup,test_3840_sub); }

		private static final SyntacticType test_3841_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3841_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3841() { testInvalid(test_3841_sup,test_3841_sub); }

		private static final SyntacticType test_3842_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3842_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3842() { testInvalid(test_3842_sup,test_3842_sub); }

		private static final SyntacticType test_3843_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3843_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3843() { testInvalid(test_3843_sup,test_3843_sub); }

		private static final SyntacticType test_3844_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3844_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3844() { testInvalid(test_3844_sup,test_3844_sub); }

		private static final SyntacticType test_3845_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3845_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3845() { testInvalid(test_3845_sup,test_3845_sub); }

		private static final SyntacticType test_3846_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3846_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3846() { testInvalid(test_3846_sup,test_3846_sub); }

		private static final SyntacticType test_3847_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3847_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3847() { testInvalid(test_3847_sup,test_3847_sub); }

		private static final SyntacticType test_3848_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3848_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3848() { testInvalid(test_3848_sup,test_3848_sub); }

		private static final SyntacticType test_3849_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3849_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3849() { testInvalid(test_3849_sup,test_3849_sub); }

		private static final SyntacticType test_3850_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3850_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3850() { testInvalid(test_3850_sup,test_3850_sub); }

		private static final SyntacticType test_3851_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3851_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3851() { testInvalid(test_3851_sup,test_3851_sub); }

		private static final SyntacticType test_3852_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3852_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3852() { testInvalid(test_3852_sup,test_3852_sub); }

		private static final SyntacticType test_3853_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3853_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3853() { testInvalid(test_3853_sup,test_3853_sub); }

		private static final SyntacticType test_3854_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3854_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3854() { testInvalid(test_3854_sup,test_3854_sub); }

		private static final SyntacticType test_3855_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3855_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3855() { testInvalid(test_3855_sup,test_3855_sub); }

		private static final SyntacticType test_3856_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3856_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3856() { testInvalid(test_3856_sup,test_3856_sub); }

		private static final SyntacticType test_3857_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3857_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3857() { testInvalid(test_3857_sup,test_3857_sub); }

		private static final SyntacticType test_3858_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3858_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3858() { testInvalid(test_3858_sup,test_3858_sub); }

		private static final SyntacticType test_3859_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3859_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3859() { testInvalid(test_3859_sup,test_3859_sub); }

		private static final SyntacticType test_3860_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3860_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3860() { testInvalid(test_3860_sup,test_3860_sub); }

		private static final SyntacticType test_3861_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3861_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3861() { testInvalid(test_3861_sup,test_3861_sub); }

		private static final SyntacticType test_3862_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3862_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3862() { testInvalid(test_3862_sup,test_3862_sub); }

		private static final SyntacticType test_3863_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3863_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3863() { testInvalid(test_3863_sup,test_3863_sub); }

		private static final SyntacticType test_3864_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3864_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3864() { testInvalid(test_3864_sup,test_3864_sub); }

		private static final SyntacticType test_3865_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3865_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3865() { testInvalid(test_3865_sup,test_3865_sub); }

		private static final SyntacticType test_3866_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3866_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3866() { testInvalid(test_3866_sup,test_3866_sub); }

		private static final SyntacticType test_3867_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3867_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3867() { testInvalid(test_3867_sup,test_3867_sub); }

		private static final SyntacticType test_3868_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3868_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3868() { testInvalid(test_3868_sup,test_3868_sub); }

		private static final SyntacticType test_3869_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3869_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3869() { testInvalid(test_3869_sup,test_3869_sub); }

		private static final SyntacticType test_3870_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3870_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3870() { testInvalid(test_3870_sup,test_3870_sub); }

		private static final SyntacticType test_3871_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3871_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3871() { testInvalid(test_3871_sup,test_3871_sub); }

		private static final SyntacticType test_3872_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3872_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3872() { testInvalid(test_3872_sup,test_3872_sub); }

		private static final SyntacticType test_3873_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3873_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3873() { testInvalid(test_3873_sup,test_3873_sub); }

		private static final SyntacticType test_3874_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3874_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3874() { testInvalid(test_3874_sup,test_3874_sub); }

		private static final SyntacticType test_3875_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3875_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3875() { testInvalid(test_3875_sup,test_3875_sub); }

		private static final SyntacticType test_3876_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3876_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3876() { testInvalid(test_3876_sup,test_3876_sub); }

		private static final SyntacticType test_3877_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3877_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3877() { testInvalid(test_3877_sup,test_3877_sub); }

		private static final SyntacticType test_3878_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3878_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3878() { testInvalid(test_3878_sup,test_3878_sub); }

		private static final SyntacticType test_3879_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3879_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3879() { testInvalid(test_3879_sup,test_3879_sub); }

		private static final SyntacticType test_3880_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3880_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3880() { testInvalid(test_3880_sup,test_3880_sub); }

		private static final SyntacticType test_3881_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3881_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3881() { testInvalid(test_3881_sup,test_3881_sub); }

		private static final SyntacticType test_3882_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3882_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3882() { testInvalid(test_3882_sup,test_3882_sub); }

		private static final SyntacticType test_3883_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3883_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3883() { testInvalid(test_3883_sup,test_3883_sub); }

		private static final SyntacticType test_3884_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3884_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3884() { testInvalid(test_3884_sup,test_3884_sub); }

		private static final SyntacticType test_3885_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3885_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3885() { testInvalid(test_3885_sup,test_3885_sub); }

		private static final SyntacticType test_3886_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3886_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3886() { testInvalid(test_3886_sup,test_3886_sub); }

		private static final SyntacticType test_3887_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3887_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3887() { testInvalid(test_3887_sup,test_3887_sub); }

		private static final SyntacticType test_3888_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3888_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3888() { testInvalid(test_3888_sup,test_3888_sub); }

		private static final SyntacticType test_3889_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3889_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3889() { testInvalid(test_3889_sup,test_3889_sub); }

		private static final SyntacticType test_3890_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3890_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3890() { testInvalid(test_3890_sup,test_3890_sub); }

		private static final SyntacticType test_3891_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3891_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3891() { testInvalid(test_3891_sup,test_3891_sub); }

		private static final SyntacticType test_3892_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3892_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3892() { testInvalid(test_3892_sup,test_3892_sub); }

		private static final SyntacticType test_3893_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3893_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3893() { testInvalid(test_3893_sup,test_3893_sub); }

		private static final SyntacticType test_3894_sup = parse("{({int} & !int), ((any | any) & (any | int))}");
		private static final SyntacticType test_3894_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3894() { testInvalid(test_3894_sup,test_3894_sub); }

		private static final SyntacticType test_3895_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3895_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3895() { testInvalid(test_3895_sup,test_3895_sub); }

		private static final SyntacticType test_3896_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3896_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3896() { testInvalid(test_3896_sup,test_3896_sub); }

		private static final SyntacticType test_3897_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3897_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3897() { testInvalid(test_3897_sup,test_3897_sub); }

		private static final SyntacticType test_3898_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3898_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3898() { testInvalid(test_3898_sup,test_3898_sub); }

		private static final SyntacticType test_3899_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3899_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3899() { testInvalid(test_3899_sup,test_3899_sub); }

		private static final SyntacticType test_3900_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3900_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3900() { testInvalid(test_3900_sup,test_3900_sub); }

		private static final SyntacticType test_3901_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3901_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3901() { testInvalid(test_3901_sup,test_3901_sub); }

		private static final SyntacticType test_3902_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3902_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3902() { testInvalid(test_3902_sup,test_3902_sub); }

		private static final SyntacticType test_3903_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3903_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3903() { testInvalid(test_3903_sup,test_3903_sub); }

		private static final SyntacticType test_3904_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3904_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3904() { testInvalid(test_3904_sup,test_3904_sub); }

		private static final SyntacticType test_3905_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3905_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_3905() { testInvalid(test_3905_sup,test_3905_sub); }

		private static final SyntacticType test_3906_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3906_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_3906() { testInvalid(test_3906_sup,test_3906_sub); }

		private static final SyntacticType test_3907_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3907_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_3907() { testInvalid(test_3907_sup,test_3907_sub); }

		private static final SyntacticType test_3908_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3908_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_3908() { testInvalid(test_3908_sup,test_3908_sub); }

		private static final SyntacticType test_3909_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3909_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_3909() { testInvalid(test_3909_sup,test_3909_sub); }

		private static final SyntacticType test_3910_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3910_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_3910() { testInvalid(test_3910_sup,test_3910_sub); }

		private static final SyntacticType test_3911_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3911_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_3911() { testInvalid(test_3911_sup,test_3911_sub); }

		private static final SyntacticType test_3912_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3912_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_3912() { testInvalid(test_3912_sup,test_3912_sub); }

		private static final SyntacticType test_3913_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3913_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_3913() { testInvalid(test_3913_sup,test_3913_sub); }

		private static final SyntacticType test_3914_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3914_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_3914() { testInvalid(test_3914_sup,test_3914_sub); }

		private static final SyntacticType test_3915_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3915_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_3915() { testInvalid(test_3915_sup,test_3915_sub); }

		private static final SyntacticType test_3916_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3916_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_3916() { testInvalid(test_3916_sup,test_3916_sub); }

		private static final SyntacticType test_3917_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3917_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_3917() { testInvalid(test_3917_sup,test_3917_sub); }

		private static final SyntacticType test_3918_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3918_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_3918() { testInvalid(test_3918_sup,test_3918_sub); }

		private static final SyntacticType test_3919_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3919_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_3919() { testInvalid(test_3919_sup,test_3919_sub); }

		private static final SyntacticType test_3920_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3920_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_3920() { testInvalid(test_3920_sup,test_3920_sub); }

		private static final SyntacticType test_3921_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3921_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_3921() { testInvalid(test_3921_sup,test_3921_sub); }

		private static final SyntacticType test_3922_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3922_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_3922() { testInvalid(test_3922_sup,test_3922_sub); }

		private static final SyntacticType test_3923_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3923_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_3923() { testInvalid(test_3923_sup,test_3923_sub); }

		private static final SyntacticType test_3924_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3924_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_3924() { testInvalid(test_3924_sup,test_3924_sub); }

		private static final SyntacticType test_3925_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3925_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_3925() { testInvalid(test_3925_sup,test_3925_sub); }

		private static final SyntacticType test_3926_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3926_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_3926() { testInvalid(test_3926_sup,test_3926_sub); }

		private static final SyntacticType test_3927_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3927_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_3927() { testInvalid(test_3927_sup,test_3927_sub); }

		private static final SyntacticType test_3928_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3928_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_3928() { testInvalid(test_3928_sup,test_3928_sub); }

		private static final SyntacticType test_3929_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3929_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_3929() { testInvalid(test_3929_sup,test_3929_sub); }

		private static final SyntacticType test_3930_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3930_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_3930() { testInvalid(test_3930_sup,test_3930_sub); }

		private static final SyntacticType test_3931_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3931_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_3931() { testInvalid(test_3931_sup,test_3931_sub); }

		private static final SyntacticType test_3932_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3932_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_3932() { testInvalid(test_3932_sup,test_3932_sub); }

		private static final SyntacticType test_3933_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3933_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_3933() { testInvalid(test_3933_sup,test_3933_sub); }

		private static final SyntacticType test_3934_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3934_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_3934() { testInvalid(test_3934_sup,test_3934_sub); }

		private static final SyntacticType test_3935_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3935_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_3935() { testInvalid(test_3935_sup,test_3935_sub); }

		private static final SyntacticType test_3936_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3936_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_3936() { testValid(test_3936_sup,test_3936_sub); }

		private static final SyntacticType test_3937_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3937_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_3937() { testInvalid(test_3937_sup,test_3937_sub); }

		private static final SyntacticType test_3938_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3938_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_3938() { testInvalid(test_3938_sup,test_3938_sub); }

		private static final SyntacticType test_3939_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3939_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_3939() { testInvalid(test_3939_sup,test_3939_sub); }

		private static final SyntacticType test_3940_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3940_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_3940() { testInvalid(test_3940_sup,test_3940_sub); }

		private static final SyntacticType test_3941_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3941_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_3941() { testInvalid(test_3941_sup,test_3941_sub); }

		private static final SyntacticType test_3942_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3942_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_3942() { testInvalid(test_3942_sup,test_3942_sub); }

		private static final SyntacticType test_3943_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3943_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_3943() { testInvalid(test_3943_sup,test_3943_sub); }

		private static final SyntacticType test_3944_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3944_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_3944() { testInvalid(test_3944_sup,test_3944_sub); }

		private static final SyntacticType test_3945_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3945_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_3945() { testInvalid(test_3945_sup,test_3945_sub); }

		private static final SyntacticType test_3946_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3946_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_3946() { testInvalid(test_3946_sup,test_3946_sub); }

		private static final SyntacticType test_3947_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3947_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_3947() { testInvalid(test_3947_sup,test_3947_sub); }

		private static final SyntacticType test_3948_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3948_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_3948() { testInvalid(test_3948_sup,test_3948_sub); }

		private static final SyntacticType test_3949_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3949_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_3949() { testInvalid(test_3949_sup,test_3949_sub); }

		private static final SyntacticType test_3950_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3950_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_3950() { testInvalid(test_3950_sup,test_3950_sub); }

		private static final SyntacticType test_3951_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3951_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_3951() { testInvalid(test_3951_sup,test_3951_sub); }

		private static final SyntacticType test_3952_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3952_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_3952() { testInvalid(test_3952_sup,test_3952_sub); }

		private static final SyntacticType test_3953_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3953_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_3953() { testInvalid(test_3953_sup,test_3953_sub); }

		private static final SyntacticType test_3954_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3954_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_3954() { testInvalid(test_3954_sup,test_3954_sub); }

		private static final SyntacticType test_3955_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3955_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_3955() { testInvalid(test_3955_sup,test_3955_sub); }

		private static final SyntacticType test_3956_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3956_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_3956() { testInvalid(test_3956_sup,test_3956_sub); }

		private static final SyntacticType test_3957_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3957_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_3957() { testInvalid(test_3957_sup,test_3957_sub); }

		private static final SyntacticType test_3958_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3958_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_3958() { testInvalid(test_3958_sup,test_3958_sub); }

		private static final SyntacticType test_3959_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3959_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_3959() { testInvalid(test_3959_sup,test_3959_sub); }

		private static final SyntacticType test_3960_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3960_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_3960() { testInvalid(test_3960_sup,test_3960_sub); }

		private static final SyntacticType test_3961_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3961_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_3961() { testInvalid(test_3961_sup,test_3961_sub); }

		private static final SyntacticType test_3962_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3962_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_3962() { testInvalid(test_3962_sup,test_3962_sub); }

		private static final SyntacticType test_3963_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3963_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_3963() { testInvalid(test_3963_sup,test_3963_sub); }

		private static final SyntacticType test_3964_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3964_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_3964() { testInvalid(test_3964_sup,test_3964_sub); }

		private static final SyntacticType test_3965_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3965_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_3965() { testInvalid(test_3965_sup,test_3965_sub); }

		private static final SyntacticType test_3966_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3966_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_3966() { testInvalid(test_3966_sup,test_3966_sub); }

		private static final SyntacticType test_3967_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3967_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_3967() { testInvalid(test_3967_sup,test_3967_sub); }

		private static final SyntacticType test_3968_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3968_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_3968() { testInvalid(test_3968_sup,test_3968_sub); }

		private static final SyntacticType test_3969_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3969_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_3969() { testInvalid(test_3969_sup,test_3969_sub); }

		private static final SyntacticType test_3970_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3970_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_3970() { testInvalid(test_3970_sup,test_3970_sub); }

		private static final SyntacticType test_3971_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3971_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_3971() { testInvalid(test_3971_sup,test_3971_sub); }

		private static final SyntacticType test_3972_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3972_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_3972() { testInvalid(test_3972_sup,test_3972_sub); }

		private static final SyntacticType test_3973_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3973_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_3973() { testInvalid(test_3973_sup,test_3973_sub); }

		private static final SyntacticType test_3974_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3974_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_3974() { testInvalid(test_3974_sup,test_3974_sub); }

		private static final SyntacticType test_3975_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3975_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_3975() { testInvalid(test_3975_sup,test_3975_sub); }

		private static final SyntacticType test_3976_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3976_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_3976() { testInvalid(test_3976_sup,test_3976_sub); }

		private static final SyntacticType test_3977_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3977_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_3977() { testInvalid(test_3977_sup,test_3977_sub); }

		private static final SyntacticType test_3978_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3978_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_3978() { testInvalid(test_3978_sup,test_3978_sub); }

		private static final SyntacticType test_3979_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3979_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_3979() { testInvalid(test_3979_sup,test_3979_sub); }

		private static final SyntacticType test_3980_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3980_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_3980() { testInvalid(test_3980_sup,test_3980_sub); }

		private static final SyntacticType test_3981_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3981_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_3981() { testInvalid(test_3981_sup,test_3981_sub); }

		private static final SyntacticType test_3982_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3982_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_3982() { testInvalid(test_3982_sup,test_3982_sub); }

		private static final SyntacticType test_3983_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3983_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_3983() { testInvalid(test_3983_sup,test_3983_sub); }

		private static final SyntacticType test_3984_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3984_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_3984() { testInvalid(test_3984_sup,test_3984_sub); }

		private static final SyntacticType test_3985_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3985_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_3985() { testInvalid(test_3985_sup,test_3985_sub); }

		private static final SyntacticType test_3986_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3986_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_3986() { testInvalid(test_3986_sup,test_3986_sub); }

		private static final SyntacticType test_3987_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3987_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_3987() { testInvalid(test_3987_sup,test_3987_sub); }

		private static final SyntacticType test_3988_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3988_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_3988() { testInvalid(test_3988_sup,test_3988_sub); }

		private static final SyntacticType test_3989_sup = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		private static final SyntacticType test_3989_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_3989() { testInvalid(test_3989_sup,test_3989_sub); }

		private static final SyntacticType test_3990_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3990_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_3990() { testInvalid(test_3990_sup,test_3990_sub); }

		private static final SyntacticType test_3991_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3991_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_3991() { testInvalid(test_3991_sup,test_3991_sub); }

		private static final SyntacticType test_3992_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3992_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_3992() { testInvalid(test_3992_sup,test_3992_sub); }

		private static final SyntacticType test_3993_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3993_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_3993() { testInvalid(test_3993_sup,test_3993_sub); }

		private static final SyntacticType test_3994_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3994_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_3994() { testInvalid(test_3994_sup,test_3994_sub); }

		private static final SyntacticType test_3995_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3995_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_3995() { testInvalid(test_3995_sup,test_3995_sub); }

		private static final SyntacticType test_3996_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3996_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_3996() { testInvalid(test_3996_sup,test_3996_sub); }

		private static final SyntacticType test_3997_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3997_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_3997() { testInvalid(test_3997_sup,test_3997_sub); }

		private static final SyntacticType test_3998_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3998_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_3998() { testInvalid(test_3998_sup,test_3998_sub); }

		private static final SyntacticType test_3999_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_3999_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_3999() { testInvalid(test_3999_sup,test_3999_sub); }

	}
	public static class Part_4 {
		private static final SyntacticType test_4000_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4000_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4000() { testInvalid(test_4000_sup,test_4000_sub); }

		private static final SyntacticType test_4001_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4001_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4001() { testInvalid(test_4001_sup,test_4001_sub); }

		private static final SyntacticType test_4002_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4002_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4002() { testInvalid(test_4002_sup,test_4002_sub); }

		private static final SyntacticType test_4003_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4003_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4003() { testInvalid(test_4003_sup,test_4003_sub); }

		private static final SyntacticType test_4004_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4004_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4004() { testInvalid(test_4004_sup,test_4004_sub); }

		private static final SyntacticType test_4005_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4005_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4005() { testInvalid(test_4005_sup,test_4005_sub); }

		private static final SyntacticType test_4006_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4006_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4006() { testInvalid(test_4006_sup,test_4006_sub); }

		private static final SyntacticType test_4007_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4007_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4007() { testInvalid(test_4007_sup,test_4007_sub); }

		private static final SyntacticType test_4008_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4008_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4008() { testInvalid(test_4008_sup,test_4008_sub); }

		private static final SyntacticType test_4009_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4009_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4009() { testInvalid(test_4009_sup,test_4009_sub); }

		private static final SyntacticType test_4010_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4010_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4010() { testInvalid(test_4010_sup,test_4010_sub); }

		private static final SyntacticType test_4011_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4011_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4011() { testInvalid(test_4011_sup,test_4011_sub); }

		private static final SyntacticType test_4012_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4012_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4012() { testInvalid(test_4012_sup,test_4012_sub); }

		private static final SyntacticType test_4013_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4013_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4013() { testInvalid(test_4013_sup,test_4013_sub); }

		private static final SyntacticType test_4014_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4014_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4014() { testInvalid(test_4014_sup,test_4014_sub); }

		private static final SyntacticType test_4015_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4015_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4015() { testInvalid(test_4015_sup,test_4015_sub); }

		private static final SyntacticType test_4016_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4016_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4016() { testInvalid(test_4016_sup,test_4016_sub); }

		private static final SyntacticType test_4017_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4017_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4017() { testInvalid(test_4017_sup,test_4017_sub); }

		private static final SyntacticType test_4018_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4018_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4018() { testInvalid(test_4018_sup,test_4018_sub); }

		private static final SyntacticType test_4019_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4019_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4019() { testInvalid(test_4019_sup,test_4019_sub); }

		private static final SyntacticType test_4020_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4020_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4020() { testInvalid(test_4020_sup,test_4020_sub); }

		private static final SyntacticType test_4021_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4021_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4021() { testInvalid(test_4021_sup,test_4021_sub); }

		private static final SyntacticType test_4022_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4022_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4022() { testInvalid(test_4022_sup,test_4022_sub); }

		private static final SyntacticType test_4023_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4023_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4023() { testInvalid(test_4023_sup,test_4023_sub); }

		private static final SyntacticType test_4024_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4024_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4024() { testInvalid(test_4024_sup,test_4024_sub); }

		private static final SyntacticType test_4025_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4025_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4025() { testInvalid(test_4025_sup,test_4025_sub); }

		private static final SyntacticType test_4026_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4026_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4026() { testInvalid(test_4026_sup,test_4026_sub); }

		private static final SyntacticType test_4027_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4027_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4027() { testInvalid(test_4027_sup,test_4027_sub); }

		private static final SyntacticType test_4028_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4028_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4028() { testInvalid(test_4028_sup,test_4028_sub); }

		private static final SyntacticType test_4029_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4029_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4029() { testInvalid(test_4029_sup,test_4029_sub); }

		private static final SyntacticType test_4030_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4030_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4030() { testValid(test_4030_sup,test_4030_sub); }

		private static final SyntacticType test_4031_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4031_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4031() { testInvalid(test_4031_sup,test_4031_sub); }

		private static final SyntacticType test_4032_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4032_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4032() { testValid(test_4032_sup,test_4032_sub); }

		private static final SyntacticType test_4033_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4033_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4033() { testInvalid(test_4033_sup,test_4033_sub); }

		private static final SyntacticType test_4034_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4034_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4034() { testInvalid(test_4034_sup,test_4034_sub); }

		private static final SyntacticType test_4035_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4035_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4035() { testInvalid(test_4035_sup,test_4035_sub); }

		private static final SyntacticType test_4036_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4036_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4036() { testInvalid(test_4036_sup,test_4036_sub); }

		private static final SyntacticType test_4037_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4037_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4037() { testInvalid(test_4037_sup,test_4037_sub); }

		private static final SyntacticType test_4038_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4038_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4038() { testInvalid(test_4038_sup,test_4038_sub); }

		private static final SyntacticType test_4039_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4039_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4039() { testInvalid(test_4039_sup,test_4039_sub); }

		private static final SyntacticType test_4040_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4040_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4040() { testInvalid(test_4040_sup,test_4040_sub); }

		private static final SyntacticType test_4041_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4041_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4041() { testInvalid(test_4041_sup,test_4041_sub); }

		private static final SyntacticType test_4042_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4042_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4042() { testInvalid(test_4042_sup,test_4042_sub); }

		private static final SyntacticType test_4043_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4043_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4043() { testInvalid(test_4043_sup,test_4043_sub); }

		private static final SyntacticType test_4044_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4044_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4044() { testInvalid(test_4044_sup,test_4044_sub); }

		private static final SyntacticType test_4045_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4045_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4045() { testInvalid(test_4045_sup,test_4045_sub); }

		private static final SyntacticType test_4046_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4046_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4046() { testInvalid(test_4046_sup,test_4046_sub); }

		private static final SyntacticType test_4047_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4047_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4047() { testInvalid(test_4047_sup,test_4047_sub); }

		private static final SyntacticType test_4048_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4048_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4048() { testInvalid(test_4048_sup,test_4048_sub); }

		private static final SyntacticType test_4049_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4049_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4049() { testInvalid(test_4049_sup,test_4049_sub); }

		private static final SyntacticType test_4050_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4050_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4050() { testInvalid(test_4050_sup,test_4050_sub); }

		private static final SyntacticType test_4051_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4051_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4051() { testInvalid(test_4051_sup,test_4051_sub); }

		private static final SyntacticType test_4052_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4052_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4052() { testInvalid(test_4052_sup,test_4052_sub); }

		private static final SyntacticType test_4053_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4053_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4053() { testInvalid(test_4053_sup,test_4053_sub); }

		private static final SyntacticType test_4054_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4054_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4054() { testInvalid(test_4054_sup,test_4054_sub); }

		private static final SyntacticType test_4055_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4055_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4055() { testInvalid(test_4055_sup,test_4055_sub); }

		private static final SyntacticType test_4056_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4056_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4056() { testInvalid(test_4056_sup,test_4056_sub); }

		private static final SyntacticType test_4057_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4057_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4057() { testInvalid(test_4057_sup,test_4057_sub); }

		private static final SyntacticType test_4058_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4058_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4058() { testInvalid(test_4058_sup,test_4058_sub); }

		private static final SyntacticType test_4059_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4059_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4059() { testInvalid(test_4059_sup,test_4059_sub); }

		private static final SyntacticType test_4060_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4060_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4060() { testInvalid(test_4060_sup,test_4060_sub); }

		private static final SyntacticType test_4061_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4061_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4061() { testInvalid(test_4061_sup,test_4061_sub); }

		private static final SyntacticType test_4062_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4062_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4062() { testInvalid(test_4062_sup,test_4062_sub); }

		private static final SyntacticType test_4063_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4063_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4063() { testInvalid(test_4063_sup,test_4063_sub); }

		private static final SyntacticType test_4064_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4064_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4064() { testInvalid(test_4064_sup,test_4064_sub); }

		private static final SyntacticType test_4065_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4065_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4065() { testInvalid(test_4065_sup,test_4065_sub); }

		private static final SyntacticType test_4066_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4066_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4066() { testInvalid(test_4066_sup,test_4066_sub); }

		private static final SyntacticType test_4067_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4067_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4067() { testInvalid(test_4067_sup,test_4067_sub); }

		private static final SyntacticType test_4068_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4068_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4068() { testInvalid(test_4068_sup,test_4068_sub); }

		private static final SyntacticType test_4069_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4069_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4069() { testInvalid(test_4069_sup,test_4069_sub); }

		private static final SyntacticType test_4070_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4070_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4070() { testInvalid(test_4070_sup,test_4070_sub); }

		private static final SyntacticType test_4071_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4071_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4071() { testInvalid(test_4071_sup,test_4071_sub); }

		private static final SyntacticType test_4072_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4072_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4072() { testInvalid(test_4072_sup,test_4072_sub); }

		private static final SyntacticType test_4073_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4073_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4073() { testInvalid(test_4073_sup,test_4073_sub); }

		private static final SyntacticType test_4074_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4074_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4074() { testInvalid(test_4074_sup,test_4074_sub); }

		private static final SyntacticType test_4075_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4075_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4075() { testInvalid(test_4075_sup,test_4075_sub); }

		private static final SyntacticType test_4076_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4076_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4076() { testInvalid(test_4076_sup,test_4076_sub); }

		private static final SyntacticType test_4077_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4077_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4077() { testInvalid(test_4077_sup,test_4077_sub); }

		private static final SyntacticType test_4078_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4078_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4078() { testInvalid(test_4078_sup,test_4078_sub); }

		private static final SyntacticType test_4079_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4079_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4079() { testInvalid(test_4079_sup,test_4079_sub); }

		private static final SyntacticType test_4080_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4080_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4080() { testInvalid(test_4080_sup,test_4080_sub); }

		private static final SyntacticType test_4081_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4081_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4081() { testInvalid(test_4081_sup,test_4081_sub); }

		private static final SyntacticType test_4082_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4082_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4082() { testInvalid(test_4082_sup,test_4082_sub); }

		private static final SyntacticType test_4083_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4083_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4083() { testInvalid(test_4083_sup,test_4083_sub); }

		private static final SyntacticType test_4084_sup = parse("(((int | int) & {int, any}) | {{int}, any})");
		private static final SyntacticType test_4084_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4084() { testInvalid(test_4084_sup,test_4084_sub); }

		private static final SyntacticType test_4085_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4085_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4085() { testInvalid(test_4085_sup,test_4085_sub); }

		private static final SyntacticType test_4086_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4086_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4086() { testInvalid(test_4086_sup,test_4086_sub); }

		private static final SyntacticType test_4087_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4087_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4087() { testInvalid(test_4087_sup,test_4087_sub); }

		private static final SyntacticType test_4088_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4088_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4088() { testInvalid(test_4088_sup,test_4088_sub); }

		private static final SyntacticType test_4089_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4089_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4089() { testInvalid(test_4089_sup,test_4089_sub); }

		private static final SyntacticType test_4090_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4090_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4090() { testInvalid(test_4090_sup,test_4090_sub); }

		private static final SyntacticType test_4091_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4091_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4091() { testInvalid(test_4091_sup,test_4091_sub); }

		private static final SyntacticType test_4092_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4092_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4092() { testInvalid(test_4092_sup,test_4092_sub); }

		private static final SyntacticType test_4093_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4093_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4093() { testInvalid(test_4093_sup,test_4093_sub); }

		private static final SyntacticType test_4094_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4094_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4094() { testValid(test_4094_sup,test_4094_sub); }

		private static final SyntacticType test_4095_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4095_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4095() { testInvalid(test_4095_sup,test_4095_sub); }

		private static final SyntacticType test_4096_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4096_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4096() { testInvalid(test_4096_sup,test_4096_sub); }

		private static final SyntacticType test_4097_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4097_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4097() { testInvalid(test_4097_sup,test_4097_sub); }

		private static final SyntacticType test_4098_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4098_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4098() { testInvalid(test_4098_sup,test_4098_sub); }

		private static final SyntacticType test_4099_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4099_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4099() { testInvalid(test_4099_sup,test_4099_sub); }

		private static final SyntacticType test_4100_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4100_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4100() { testInvalid(test_4100_sup,test_4100_sub); }

		private static final SyntacticType test_4101_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4101_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4101() { testInvalid(test_4101_sup,test_4101_sub); }

		private static final SyntacticType test_4102_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4102_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4102() { testInvalid(test_4102_sup,test_4102_sub); }

		private static final SyntacticType test_4103_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4103_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4103() { testInvalid(test_4103_sup,test_4103_sub); }

		private static final SyntacticType test_4104_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4104_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4104() { testInvalid(test_4104_sup,test_4104_sub); }

		private static final SyntacticType test_4105_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4105_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4105() { testInvalid(test_4105_sup,test_4105_sub); }

		private static final SyntacticType test_4106_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4106_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4106() { testInvalid(test_4106_sup,test_4106_sub); }

		private static final SyntacticType test_4107_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4107_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4107() { testInvalid(test_4107_sup,test_4107_sub); }

		private static final SyntacticType test_4108_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4108_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4108() { testValid(test_4108_sup,test_4108_sub); }

		private static final SyntacticType test_4109_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4109_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4109() { testValid(test_4109_sup,test_4109_sub); }

		private static final SyntacticType test_4110_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4110_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4110() { testInvalid(test_4110_sup,test_4110_sub); }

		private static final SyntacticType test_4111_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4111_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4111() { testInvalid(test_4111_sup,test_4111_sub); }

		private static final SyntacticType test_4112_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4112_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4112() { testValid(test_4112_sup,test_4112_sub); }

		private static final SyntacticType test_4113_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4113_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4113() { testValid(test_4113_sup,test_4113_sub); }

		private static final SyntacticType test_4114_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4114_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4114() { testInvalid(test_4114_sup,test_4114_sub); }

		private static final SyntacticType test_4115_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4115_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4115() { testInvalid(test_4115_sup,test_4115_sub); }

		private static final SyntacticType test_4116_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4116_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4116() { testInvalid(test_4116_sup,test_4116_sub); }

		private static final SyntacticType test_4117_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4117_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4117() { testInvalid(test_4117_sup,test_4117_sub); }

		private static final SyntacticType test_4118_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4118_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4118() { testInvalid(test_4118_sup,test_4118_sub); }

		private static final SyntacticType test_4119_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4119_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4119() { testInvalid(test_4119_sup,test_4119_sub); }

		private static final SyntacticType test_4120_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4120_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4120() { testInvalid(test_4120_sup,test_4120_sub); }

		private static final SyntacticType test_4121_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4121_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4121() { testInvalid(test_4121_sup,test_4121_sub); }

		private static final SyntacticType test_4122_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4122_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4122() { testValid(test_4122_sup,test_4122_sub); }

		private static final SyntacticType test_4123_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4123_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4123() { testInvalid(test_4123_sup,test_4123_sub); }

		private static final SyntacticType test_4124_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4124_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4124() { testValid(test_4124_sup,test_4124_sub); }

		private static final SyntacticType test_4125_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4125_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4125() { testInvalid(test_4125_sup,test_4125_sub); }

		private static final SyntacticType test_4126_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4126_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4126() { testInvalid(test_4126_sup,test_4126_sub); }

		private static final SyntacticType test_4127_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4127_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4127() { testInvalid(test_4127_sup,test_4127_sub); }

		private static final SyntacticType test_4128_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4128_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4128() { testValid(test_4128_sup,test_4128_sub); }

		private static final SyntacticType test_4129_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4129_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4129() { testInvalid(test_4129_sup,test_4129_sub); }

		private static final SyntacticType test_4130_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4130_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4130() { testInvalid(test_4130_sup,test_4130_sub); }

		private static final SyntacticType test_4131_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4131_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4131() { testInvalid(test_4131_sup,test_4131_sub); }

		private static final SyntacticType test_4132_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4132_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4132() { testInvalid(test_4132_sup,test_4132_sub); }

		private static final SyntacticType test_4133_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4133_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4133() { testInvalid(test_4133_sup,test_4133_sub); }

		private static final SyntacticType test_4134_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4134_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4134() { testInvalid(test_4134_sup,test_4134_sub); }

		private static final SyntacticType test_4135_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4135_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4135() { testInvalid(test_4135_sup,test_4135_sub); }

		private static final SyntacticType test_4136_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4136_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4136() { testInvalid(test_4136_sup,test_4136_sub); }

		private static final SyntacticType test_4137_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4137_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4137() { testInvalid(test_4137_sup,test_4137_sub); }

		private static final SyntacticType test_4138_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4138_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4138() { testInvalid(test_4138_sup,test_4138_sub); }

		private static final SyntacticType test_4139_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4139_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4139() { testInvalid(test_4139_sup,test_4139_sub); }

		private static final SyntacticType test_4140_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4140_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4140() { testInvalid(test_4140_sup,test_4140_sub); }

		private static final SyntacticType test_4141_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4141_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4141() { testInvalid(test_4141_sup,test_4141_sub); }

		private static final SyntacticType test_4142_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4142_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4142() { testInvalid(test_4142_sup,test_4142_sub); }

		private static final SyntacticType test_4143_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4143_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4143() { testInvalid(test_4143_sup,test_4143_sub); }

		private static final SyntacticType test_4144_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4144_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4144() { testInvalid(test_4144_sup,test_4144_sub); }

		private static final SyntacticType test_4145_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4145_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4145() { testInvalid(test_4145_sup,test_4145_sub); }

		private static final SyntacticType test_4146_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4146_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4146() { testInvalid(test_4146_sup,test_4146_sub); }

		private static final SyntacticType test_4147_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4147_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4147() { testInvalid(test_4147_sup,test_4147_sub); }

		private static final SyntacticType test_4148_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4148_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4148() { testInvalid(test_4148_sup,test_4148_sub); }

		private static final SyntacticType test_4149_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4149_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4149() { testInvalid(test_4149_sup,test_4149_sub); }

		private static final SyntacticType test_4150_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4150_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4150() { testInvalid(test_4150_sup,test_4150_sub); }

		private static final SyntacticType test_4151_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4151_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4151() { testInvalid(test_4151_sup,test_4151_sub); }

		private static final SyntacticType test_4152_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4152_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4152() { testInvalid(test_4152_sup,test_4152_sub); }

		private static final SyntacticType test_4153_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4153_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4153() { testInvalid(test_4153_sup,test_4153_sub); }

		private static final SyntacticType test_4154_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4154_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4154() { testInvalid(test_4154_sup,test_4154_sub); }

		private static final SyntacticType test_4155_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4155_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4155() { testInvalid(test_4155_sup,test_4155_sub); }

		private static final SyntacticType test_4156_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4156_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4156() { testInvalid(test_4156_sup,test_4156_sub); }

		private static final SyntacticType test_4157_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4157_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4157() { testInvalid(test_4157_sup,test_4157_sub); }

		private static final SyntacticType test_4158_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4158_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4158() { testInvalid(test_4158_sup,test_4158_sub); }

		private static final SyntacticType test_4159_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4159_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4159() { testInvalid(test_4159_sup,test_4159_sub); }

		private static final SyntacticType test_4160_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4160_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4160() { testInvalid(test_4160_sup,test_4160_sub); }

		private static final SyntacticType test_4161_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4161_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4161() { testInvalid(test_4161_sup,test_4161_sub); }

		private static final SyntacticType test_4162_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4162_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4162() { testInvalid(test_4162_sup,test_4162_sub); }

		private static final SyntacticType test_4163_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4163_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4163() { testInvalid(test_4163_sup,test_4163_sub); }

		private static final SyntacticType test_4164_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4164_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4164() { testInvalid(test_4164_sup,test_4164_sub); }

		private static final SyntacticType test_4165_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4165_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4165() { testInvalid(test_4165_sup,test_4165_sub); }

		private static final SyntacticType test_4166_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4166_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4166() { testInvalid(test_4166_sup,test_4166_sub); }

		private static final SyntacticType test_4167_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4167_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4167() { testInvalid(test_4167_sup,test_4167_sub); }

		private static final SyntacticType test_4168_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4168_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4168() { testInvalid(test_4168_sup,test_4168_sub); }

		private static final SyntacticType test_4169_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4169_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4169() { testInvalid(test_4169_sup,test_4169_sub); }

		private static final SyntacticType test_4170_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4170_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4170() { testInvalid(test_4170_sup,test_4170_sub); }

		private static final SyntacticType test_4171_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4171_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4171() { testInvalid(test_4171_sup,test_4171_sub); }

		private static final SyntacticType test_4172_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4172_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4172() { testInvalid(test_4172_sup,test_4172_sub); }

		private static final SyntacticType test_4173_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4173_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4173() { testInvalid(test_4173_sup,test_4173_sub); }

		private static final SyntacticType test_4174_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4174_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4174() { testInvalid(test_4174_sup,test_4174_sub); }

		private static final SyntacticType test_4175_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4175_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4175() { testInvalid(test_4175_sup,test_4175_sub); }

		private static final SyntacticType test_4176_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4176_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4176() { testInvalid(test_4176_sup,test_4176_sub); }

		private static final SyntacticType test_4177_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4177_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4177() { testInvalid(test_4177_sup,test_4177_sub); }

		private static final SyntacticType test_4178_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4178_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4178() { testInvalid(test_4178_sup,test_4178_sub); }

		private static final SyntacticType test_4179_sup = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		private static final SyntacticType test_4179_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4179() { testInvalid(test_4179_sup,test_4179_sub); }

		private static final SyntacticType test_4180_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4180_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4180() { testInvalid(test_4180_sup,test_4180_sub); }

		private static final SyntacticType test_4181_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4181_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4181() { testInvalid(test_4181_sup,test_4181_sub); }

		private static final SyntacticType test_4182_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4182_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4182() { testValid(test_4182_sup,test_4182_sub); }

		private static final SyntacticType test_4183_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4183_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4183() { testValid(test_4183_sup,test_4183_sub); }

		private static final SyntacticType test_4184_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4184_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4184() { testInvalid(test_4184_sup,test_4184_sub); }

		private static final SyntacticType test_4185_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4185_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4185() { testInvalid(test_4185_sup,test_4185_sub); }

		private static final SyntacticType test_4186_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4186_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4186() { testInvalid(test_4186_sup,test_4186_sub); }

		private static final SyntacticType test_4187_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4187_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4187() { testInvalid(test_4187_sup,test_4187_sub); }

		private static final SyntacticType test_4188_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4188_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4188() { testInvalid(test_4188_sup,test_4188_sub); }

		private static final SyntacticType test_4189_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4189_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4189() { testValid(test_4189_sup,test_4189_sub); }

		private static final SyntacticType test_4190_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4190_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4190() { testValid(test_4190_sup,test_4190_sub); }

		private static final SyntacticType test_4191_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4191_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4191() { testInvalid(test_4191_sup,test_4191_sub); }

		private static final SyntacticType test_4192_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4192_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4192() { testInvalid(test_4192_sup,test_4192_sub); }

		private static final SyntacticType test_4193_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4193_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4193() { testInvalid(test_4193_sup,test_4193_sub); }

		private static final SyntacticType test_4194_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4194_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4194() { testInvalid(test_4194_sup,test_4194_sub); }

		private static final SyntacticType test_4195_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4195_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4195() { testInvalid(test_4195_sup,test_4195_sub); }

		private static final SyntacticType test_4196_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4196_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4196() { testValid(test_4196_sup,test_4196_sub); }

		private static final SyntacticType test_4197_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4197_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4197() { testInvalid(test_4197_sup,test_4197_sub); }

		private static final SyntacticType test_4198_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4198_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4198() { testInvalid(test_4198_sup,test_4198_sub); }

		private static final SyntacticType test_4199_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4199_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4199() { testInvalid(test_4199_sup,test_4199_sub); }

		private static final SyntacticType test_4200_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4200_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4200() { testInvalid(test_4200_sup,test_4200_sub); }

		private static final SyntacticType test_4201_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4201_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4201() { testInvalid(test_4201_sup,test_4201_sub); }

		private static final SyntacticType test_4202_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4202_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4202() { testValid(test_4202_sup,test_4202_sub); }

		private static final SyntacticType test_4203_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4203_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4203() { testValid(test_4203_sup,test_4203_sub); }

		private static final SyntacticType test_4204_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4204_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4204() { testValid(test_4204_sup,test_4204_sub); }

		private static final SyntacticType test_4205_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4205_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4205() { testInvalid(test_4205_sup,test_4205_sub); }

		private static final SyntacticType test_4206_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4206_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4206() { testInvalid(test_4206_sup,test_4206_sub); }

		private static final SyntacticType test_4207_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4207_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4207() { testValid(test_4207_sup,test_4207_sub); }

		private static final SyntacticType test_4208_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4208_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4208() { testValid(test_4208_sup,test_4208_sub); }

		private static final SyntacticType test_4209_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4209_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4209() { testInvalid(test_4209_sup,test_4209_sub); }

		private static final SyntacticType test_4210_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4210_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4210() { testInvalid(test_4210_sup,test_4210_sub); }

		private static final SyntacticType test_4211_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4211_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4211() { testInvalid(test_4211_sup,test_4211_sub); }

		private static final SyntacticType test_4212_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4212_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4212() { testInvalid(test_4212_sup,test_4212_sub); }

		private static final SyntacticType test_4213_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4213_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4213() { testInvalid(test_4213_sup,test_4213_sub); }

		private static final SyntacticType test_4214_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4214_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4214() { testInvalid(test_4214_sup,test_4214_sub); }

		private static final SyntacticType test_4215_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4215_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4215() { testInvalid(test_4215_sup,test_4215_sub); }

		private static final SyntacticType test_4216_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4216_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4216() { testInvalid(test_4216_sup,test_4216_sub); }

		private static final SyntacticType test_4217_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4217_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4217() { testValid(test_4217_sup,test_4217_sub); }

		private static final SyntacticType test_4218_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4218_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4218() { testInvalid(test_4218_sup,test_4218_sub); }

		private static final SyntacticType test_4219_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4219_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4219() { testValid(test_4219_sup,test_4219_sub); }

		private static final SyntacticType test_4220_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4220_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4220() { testInvalid(test_4220_sup,test_4220_sub); }

		private static final SyntacticType test_4221_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4221_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4221() { testValid(test_4221_sup,test_4221_sub); }

		private static final SyntacticType test_4222_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4222_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4222() { testInvalid(test_4222_sup,test_4222_sub); }

		private static final SyntacticType test_4223_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4223_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4223() { testInvalid(test_4223_sup,test_4223_sub); }

		private static final SyntacticType test_4224_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4224_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4224() { testValid(test_4224_sup,test_4224_sub); }

		private static final SyntacticType test_4225_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4225_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4225() { testInvalid(test_4225_sup,test_4225_sub); }

		private static final SyntacticType test_4226_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4226_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4226() { testInvalid(test_4226_sup,test_4226_sub); }

		private static final SyntacticType test_4227_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4227_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4227() { testInvalid(test_4227_sup,test_4227_sub); }

		private static final SyntacticType test_4228_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4228_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4228() { testInvalid(test_4228_sup,test_4228_sub); }

		private static final SyntacticType test_4229_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4229_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4229() { testInvalid(test_4229_sup,test_4229_sub); }

		private static final SyntacticType test_4230_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4230_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4230() { testInvalid(test_4230_sup,test_4230_sub); }

		private static final SyntacticType test_4231_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4231_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4231() { testInvalid(test_4231_sup,test_4231_sub); }

		private static final SyntacticType test_4232_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4232_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4232() { testInvalid(test_4232_sup,test_4232_sub); }

		private static final SyntacticType test_4233_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4233_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4233() { testInvalid(test_4233_sup,test_4233_sub); }

		private static final SyntacticType test_4234_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4234_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4234() { testInvalid(test_4234_sup,test_4234_sub); }

		private static final SyntacticType test_4235_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4235_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4235() { testInvalid(test_4235_sup,test_4235_sub); }

		private static final SyntacticType test_4236_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4236_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4236() { testInvalid(test_4236_sup,test_4236_sub); }

		private static final SyntacticType test_4237_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4237_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4237() { testInvalid(test_4237_sup,test_4237_sub); }

		private static final SyntacticType test_4238_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4238_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4238() { testInvalid(test_4238_sup,test_4238_sub); }

		private static final SyntacticType test_4239_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4239_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4239() { testInvalid(test_4239_sup,test_4239_sub); }

		private static final SyntacticType test_4240_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4240_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4240() { testInvalid(test_4240_sup,test_4240_sub); }

		private static final SyntacticType test_4241_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4241_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4241() { testInvalid(test_4241_sup,test_4241_sub); }

		private static final SyntacticType test_4242_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4242_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4242() { testInvalid(test_4242_sup,test_4242_sub); }

		private static final SyntacticType test_4243_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4243_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4243() { testInvalid(test_4243_sup,test_4243_sub); }

		private static final SyntacticType test_4244_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4244_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4244() { testInvalid(test_4244_sup,test_4244_sub); }

		private static final SyntacticType test_4245_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4245_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4245() { testInvalid(test_4245_sup,test_4245_sub); }

		private static final SyntacticType test_4246_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4246_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4246() { testInvalid(test_4246_sup,test_4246_sub); }

		private static final SyntacticType test_4247_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4247_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4247() { testInvalid(test_4247_sup,test_4247_sub); }

		private static final SyntacticType test_4248_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4248_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4248() { testInvalid(test_4248_sup,test_4248_sub); }

		private static final SyntacticType test_4249_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4249_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4249() { testInvalid(test_4249_sup,test_4249_sub); }

		private static final SyntacticType test_4250_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4250_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4250() { testInvalid(test_4250_sup,test_4250_sub); }

		private static final SyntacticType test_4251_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4251_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4251() { testInvalid(test_4251_sup,test_4251_sub); }

		private static final SyntacticType test_4252_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4252_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4252() { testInvalid(test_4252_sup,test_4252_sub); }

		private static final SyntacticType test_4253_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4253_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4253() { testValid(test_4253_sup,test_4253_sub); }

		private static final SyntacticType test_4254_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4254_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4254() { testInvalid(test_4254_sup,test_4254_sub); }

		private static final SyntacticType test_4255_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4255_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4255() { testInvalid(test_4255_sup,test_4255_sub); }

		private static final SyntacticType test_4256_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4256_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4256() { testValid(test_4256_sup,test_4256_sub); }

		private static final SyntacticType test_4257_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4257_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4257() { testInvalid(test_4257_sup,test_4257_sub); }

		private static final SyntacticType test_4258_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4258_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4258() { testInvalid(test_4258_sup,test_4258_sub); }

		private static final SyntacticType test_4259_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4259_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4259() { testInvalid(test_4259_sup,test_4259_sub); }

		private static final SyntacticType test_4260_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4260_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4260() { testInvalid(test_4260_sup,test_4260_sub); }

		private static final SyntacticType test_4261_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4261_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4261() { testInvalid(test_4261_sup,test_4261_sub); }

		private static final SyntacticType test_4262_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4262_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4262() { testInvalid(test_4262_sup,test_4262_sub); }

		private static final SyntacticType test_4263_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4263_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4263() { testInvalid(test_4263_sup,test_4263_sub); }

		private static final SyntacticType test_4264_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4264_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4264() { testInvalid(test_4264_sup,test_4264_sub); }

		private static final SyntacticType test_4265_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4265_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4265() { testInvalid(test_4265_sup,test_4265_sub); }

		private static final SyntacticType test_4266_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4266_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4266() { testInvalid(test_4266_sup,test_4266_sub); }

		private static final SyntacticType test_4267_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4267_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4267() { testInvalid(test_4267_sup,test_4267_sub); }

		private static final SyntacticType test_4268_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4268_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4268() { testInvalid(test_4268_sup,test_4268_sub); }

		private static final SyntacticType test_4269_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4269_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4269() { testInvalid(test_4269_sup,test_4269_sub); }

		private static final SyntacticType test_4270_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4270_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4270() { testInvalid(test_4270_sup,test_4270_sub); }

		private static final SyntacticType test_4271_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4271_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4271() { testInvalid(test_4271_sup,test_4271_sub); }

		private static final SyntacticType test_4272_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4272_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4272() { testInvalid(test_4272_sup,test_4272_sub); }

		private static final SyntacticType test_4273_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4273_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4273() { testInvalid(test_4273_sup,test_4273_sub); }

		private static final SyntacticType test_4274_sup = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		private static final SyntacticType test_4274_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4274() { testInvalid(test_4274_sup,test_4274_sub); }

		private static final SyntacticType test_4275_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4275_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4275() { testInvalid(test_4275_sup,test_4275_sub); }

		private static final SyntacticType test_4276_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4276_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4276() { testInvalid(test_4276_sup,test_4276_sub); }

		private static final SyntacticType test_4277_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4277_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4277() { testInvalid(test_4277_sup,test_4277_sub); }

		private static final SyntacticType test_4278_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4278_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4278() { testValid(test_4278_sup,test_4278_sub); }

		private static final SyntacticType test_4279_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4279_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4279() { testValid(test_4279_sup,test_4279_sub); }

		private static final SyntacticType test_4280_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4280_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4280() { testInvalid(test_4280_sup,test_4280_sub); }

		private static final SyntacticType test_4281_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4281_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4281() { testInvalid(test_4281_sup,test_4281_sub); }

		private static final SyntacticType test_4282_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4282_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4282() { testValid(test_4282_sup,test_4282_sub); }

		private static final SyntacticType test_4283_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4283_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4283() { testInvalid(test_4283_sup,test_4283_sub); }

		private static final SyntacticType test_4284_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4284_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4284() { testInvalid(test_4284_sup,test_4284_sub); }

		private static final SyntacticType test_4285_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4285_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4285() { testInvalid(test_4285_sup,test_4285_sub); }

		private static final SyntacticType test_4286_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4286_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4286() { testInvalid(test_4286_sup,test_4286_sub); }

		private static final SyntacticType test_4287_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4287_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4287() { testInvalid(test_4287_sup,test_4287_sub); }

		private static final SyntacticType test_4288_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4288_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4288() { testInvalid(test_4288_sup,test_4288_sub); }

		private static final SyntacticType test_4289_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4289_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4289() { testInvalid(test_4289_sup,test_4289_sub); }

		private static final SyntacticType test_4290_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4290_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4290() { testValid(test_4290_sup,test_4290_sub); }

		private static final SyntacticType test_4291_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4291_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4291() { testInvalid(test_4291_sup,test_4291_sub); }

		private static final SyntacticType test_4292_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4292_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4292() { testInvalid(test_4292_sup,test_4292_sub); }

		private static final SyntacticType test_4293_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4293_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4293() { testValid(test_4293_sup,test_4293_sub); }

		private static final SyntacticType test_4294_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4294_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4294() { testValid(test_4294_sup,test_4294_sub); }

		private static final SyntacticType test_4295_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4295_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4295() { testValid(test_4295_sup,test_4295_sub); }

		private static final SyntacticType test_4296_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4296_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4296() { testInvalid(test_4296_sup,test_4296_sub); }

		private static final SyntacticType test_4297_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4297_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4297() { testInvalid(test_4297_sup,test_4297_sub); }

		private static final SyntacticType test_4298_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4298_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4298() { testInvalid(test_4298_sup,test_4298_sub); }

		private static final SyntacticType test_4299_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4299_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4299() { testInvalid(test_4299_sup,test_4299_sub); }

		private static final SyntacticType test_4300_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4300_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4300() { testInvalid(test_4300_sup,test_4300_sub); }

		private static final SyntacticType test_4301_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4301_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4301() { testInvalid(test_4301_sup,test_4301_sub); }

		private static final SyntacticType test_4302_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4302_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4302() { testInvalid(test_4302_sup,test_4302_sub); }

		private static final SyntacticType test_4303_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4303_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4303() { testInvalid(test_4303_sup,test_4303_sub); }

		private static final SyntacticType test_4304_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4304_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4304() { testInvalid(test_4304_sup,test_4304_sub); }

		private static final SyntacticType test_4305_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4305_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4305() { testValid(test_4305_sup,test_4305_sub); }

		private static final SyntacticType test_4306_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4306_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4306() { testValid(test_4306_sup,test_4306_sub); }

		private static final SyntacticType test_4307_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4307_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4307() { testValid(test_4307_sup,test_4307_sub); }

		private static final SyntacticType test_4308_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4308_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4308() { testInvalid(test_4308_sup,test_4308_sub); }

		private static final SyntacticType test_4309_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4309_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4309() { testInvalid(test_4309_sup,test_4309_sub); }

		private static final SyntacticType test_4310_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4310_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4310() { testInvalid(test_4310_sup,test_4310_sub); }

		private static final SyntacticType test_4311_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4311_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4311() { testInvalid(test_4311_sup,test_4311_sub); }

		private static final SyntacticType test_4312_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4312_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4312() { testInvalid(test_4312_sup,test_4312_sub); }

		private static final SyntacticType test_4313_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4313_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4313() { testInvalid(test_4313_sup,test_4313_sub); }

		private static final SyntacticType test_4314_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4314_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4314() { testInvalid(test_4314_sup,test_4314_sub); }

		private static final SyntacticType test_4315_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4315_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4315() { testInvalid(test_4315_sup,test_4315_sub); }

		private static final SyntacticType test_4316_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4316_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4316() { testInvalid(test_4316_sup,test_4316_sub); }

		private static final SyntacticType test_4317_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4317_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4317() { testInvalid(test_4317_sup,test_4317_sub); }

		private static final SyntacticType test_4318_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4318_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4318() { testInvalid(test_4318_sup,test_4318_sub); }

		private static final SyntacticType test_4319_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4319_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4319() { testInvalid(test_4319_sup,test_4319_sub); }

		private static final SyntacticType test_4320_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4320_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4320() { testValid(test_4320_sup,test_4320_sub); }

		private static final SyntacticType test_4321_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4321_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4321() { testInvalid(test_4321_sup,test_4321_sub); }

		private static final SyntacticType test_4322_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4322_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4322() { testInvalid(test_4322_sup,test_4322_sub); }

		private static final SyntacticType test_4323_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4323_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4323() { testInvalid(test_4323_sup,test_4323_sub); }

		private static final SyntacticType test_4324_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4324_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4324() { testInvalid(test_4324_sup,test_4324_sub); }

		private static final SyntacticType test_4325_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4325_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4325() { testInvalid(test_4325_sup,test_4325_sub); }

		private static final SyntacticType test_4326_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4326_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4326() { testInvalid(test_4326_sup,test_4326_sub); }

		private static final SyntacticType test_4327_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4327_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4327() { testInvalid(test_4327_sup,test_4327_sub); }

		private static final SyntacticType test_4328_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4328_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4328() { testValid(test_4328_sup,test_4328_sub); }

		private static final SyntacticType test_4329_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4329_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4329() { testInvalid(test_4329_sup,test_4329_sub); }

		private static final SyntacticType test_4330_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4330_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4330() { testInvalid(test_4330_sup,test_4330_sub); }

		private static final SyntacticType test_4331_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4331_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4331() { testInvalid(test_4331_sup,test_4331_sub); }

		private static final SyntacticType test_4332_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4332_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4332() { testInvalid(test_4332_sup,test_4332_sub); }

		private static final SyntacticType test_4333_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4333_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4333() { testInvalid(test_4333_sup,test_4333_sub); }

		private static final SyntacticType test_4334_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4334_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4334() { testInvalid(test_4334_sup,test_4334_sub); }

		private static final SyntacticType test_4335_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4335_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4335() { testInvalid(test_4335_sup,test_4335_sub); }

		private static final SyntacticType test_4336_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4336_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4336() { testInvalid(test_4336_sup,test_4336_sub); }

		private static final SyntacticType test_4337_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4337_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4337() { testInvalid(test_4337_sup,test_4337_sub); }

		private static final SyntacticType test_4338_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4338_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4338() { testInvalid(test_4338_sup,test_4338_sub); }

		private static final SyntacticType test_4339_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4339_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4339() { testInvalid(test_4339_sup,test_4339_sub); }

		private static final SyntacticType test_4340_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4340_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4340() { testInvalid(test_4340_sup,test_4340_sub); }

		private static final SyntacticType test_4341_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4341_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4341() { testInvalid(test_4341_sup,test_4341_sub); }

		private static final SyntacticType test_4342_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4342_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4342() { testInvalid(test_4342_sup,test_4342_sub); }

		private static final SyntacticType test_4343_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4343_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4343() { testValid(test_4343_sup,test_4343_sub); }

		private static final SyntacticType test_4344_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4344_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4344() { testInvalid(test_4344_sup,test_4344_sub); }

		private static final SyntacticType test_4345_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4345_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4345() { testInvalid(test_4345_sup,test_4345_sub); }

		private static final SyntacticType test_4346_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4346_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4346() { testInvalid(test_4346_sup,test_4346_sub); }

		private static final SyntacticType test_4347_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4347_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4347() { testInvalid(test_4347_sup,test_4347_sub); }

		private static final SyntacticType test_4348_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4348_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4348() { testInvalid(test_4348_sup,test_4348_sub); }

		private static final SyntacticType test_4349_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4349_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4349() { testInvalid(test_4349_sup,test_4349_sub); }

		private static final SyntacticType test_4350_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4350_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4350() { testInvalid(test_4350_sup,test_4350_sub); }

		private static final SyntacticType test_4351_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4351_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4351() { testInvalid(test_4351_sup,test_4351_sub); }

		private static final SyntacticType test_4352_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4352_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4352() { testInvalid(test_4352_sup,test_4352_sub); }

		private static final SyntacticType test_4353_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4353_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4353() { testInvalid(test_4353_sup,test_4353_sub); }

		private static final SyntacticType test_4354_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4354_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4354() { testInvalid(test_4354_sup,test_4354_sub); }

		private static final SyntacticType test_4355_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4355_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4355() { testInvalid(test_4355_sup,test_4355_sub); }

		private static final SyntacticType test_4356_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4356_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4356() { testInvalid(test_4356_sup,test_4356_sub); }

		private static final SyntacticType test_4357_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4357_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4357() { testInvalid(test_4357_sup,test_4357_sub); }

		private static final SyntacticType test_4358_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4358_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4358() { testValid(test_4358_sup,test_4358_sub); }

		private static final SyntacticType test_4359_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4359_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4359() { testInvalid(test_4359_sup,test_4359_sub); }

		private static final SyntacticType test_4360_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4360_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4360() { testInvalid(test_4360_sup,test_4360_sub); }

		private static final SyntacticType test_4361_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4361_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4361() { testInvalid(test_4361_sup,test_4361_sub); }

		private static final SyntacticType test_4362_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4362_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4362() { testValid(test_4362_sup,test_4362_sub); }

		private static final SyntacticType test_4363_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4363_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4363() { testInvalid(test_4363_sup,test_4363_sub); }

		private static final SyntacticType test_4364_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4364_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4364() { testInvalid(test_4364_sup,test_4364_sub); }

		private static final SyntacticType test_4365_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4365_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4365() { testInvalid(test_4365_sup,test_4365_sub); }

		private static final SyntacticType test_4366_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4366_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4366() { testInvalid(test_4366_sup,test_4366_sub); }

		private static final SyntacticType test_4367_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4367_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4367() { testInvalid(test_4367_sup,test_4367_sub); }

		private static final SyntacticType test_4368_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4368_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4368() { testInvalid(test_4368_sup,test_4368_sub); }

		private static final SyntacticType test_4369_sup = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		private static final SyntacticType test_4369_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4369() { testInvalid(test_4369_sup,test_4369_sub); }

		private static final SyntacticType test_4370_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4370_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4370() { testValid(test_4370_sup,test_4370_sub); }

		private static final SyntacticType test_4371_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4371_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4371() { testValid(test_4371_sup,test_4371_sub); }

		private static final SyntacticType test_4372_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4372_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4372() { testValid(test_4372_sup,test_4372_sub); }

		private static final SyntacticType test_4373_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4373_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4373() { testValid(test_4373_sup,test_4373_sub); }

		private static final SyntacticType test_4374_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4374_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4374() { testValid(test_4374_sup,test_4374_sub); }

		private static final SyntacticType test_4375_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4375_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4375() { testValid(test_4375_sup,test_4375_sub); }

		private static final SyntacticType test_4376_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4376_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4376() { testValid(test_4376_sup,test_4376_sub); }

		private static final SyntacticType test_4377_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4377_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4377() { testValid(test_4377_sup,test_4377_sub); }

		private static final SyntacticType test_4378_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4378_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4378() { testValid(test_4378_sup,test_4378_sub); }

		private static final SyntacticType test_4379_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4379_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4379() { testValid(test_4379_sup,test_4379_sub); }

		private static final SyntacticType test_4380_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4380_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4380() { testValid(test_4380_sup,test_4380_sub); }

		private static final SyntacticType test_4381_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4381_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4381() { testValid(test_4381_sup,test_4381_sub); }

		private static final SyntacticType test_4382_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4382_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4382() { testValid(test_4382_sup,test_4382_sub); }

		private static final SyntacticType test_4383_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4383_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4383() { testValid(test_4383_sup,test_4383_sub); }

		private static final SyntacticType test_4384_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4384_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4384() { testValid(test_4384_sup,test_4384_sub); }

		private static final SyntacticType test_4385_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4385_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4385() { testValid(test_4385_sup,test_4385_sub); }

		private static final SyntacticType test_4386_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4386_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4386() { testValid(test_4386_sup,test_4386_sub); }

		private static final SyntacticType test_4387_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4387_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4387() { testValid(test_4387_sup,test_4387_sub); }

		private static final SyntacticType test_4388_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4388_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4388() { testValid(test_4388_sup,test_4388_sub); }

		private static final SyntacticType test_4389_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4389_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4389() { testValid(test_4389_sup,test_4389_sub); }

		private static final SyntacticType test_4390_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4390_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4390() { testValid(test_4390_sup,test_4390_sub); }

		private static final SyntacticType test_4391_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4391_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4391() { testValid(test_4391_sup,test_4391_sub); }

		private static final SyntacticType test_4392_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4392_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4392() { testValid(test_4392_sup,test_4392_sub); }

		private static final SyntacticType test_4393_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4393_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4393() { testValid(test_4393_sup,test_4393_sub); }

		private static final SyntacticType test_4394_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4394_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4394() { testValid(test_4394_sup,test_4394_sub); }

		private static final SyntacticType test_4395_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4395_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4395() { testValid(test_4395_sup,test_4395_sub); }

		private static final SyntacticType test_4396_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4396_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4396() { testValid(test_4396_sup,test_4396_sub); }

		private static final SyntacticType test_4397_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4397_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4397() { testValid(test_4397_sup,test_4397_sub); }

		private static final SyntacticType test_4398_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4398_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4398() { testValid(test_4398_sup,test_4398_sub); }

		private static final SyntacticType test_4399_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4399_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4399() { testValid(test_4399_sup,test_4399_sub); }

		private static final SyntacticType test_4400_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4400_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4400() { testValid(test_4400_sup,test_4400_sub); }

		private static final SyntacticType test_4401_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4401_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4401() { testValid(test_4401_sup,test_4401_sub); }

		private static final SyntacticType test_4402_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4402_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4402() { testValid(test_4402_sup,test_4402_sub); }

		private static final SyntacticType test_4403_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4403_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4403() { testValid(test_4403_sup,test_4403_sub); }

		private static final SyntacticType test_4404_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4404_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4404() { testValid(test_4404_sup,test_4404_sub); }

		private static final SyntacticType test_4405_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4405_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4405() { testValid(test_4405_sup,test_4405_sub); }

		private static final SyntacticType test_4406_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4406_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4406() { testValid(test_4406_sup,test_4406_sub); }

		private static final SyntacticType test_4407_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4407_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4407() { testValid(test_4407_sup,test_4407_sub); }

		private static final SyntacticType test_4408_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4408_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4408() { testValid(test_4408_sup,test_4408_sub); }

		private static final SyntacticType test_4409_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4409_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4409() { testValid(test_4409_sup,test_4409_sub); }

		private static final SyntacticType test_4410_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4410_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4410() { testValid(test_4410_sup,test_4410_sub); }

		private static final SyntacticType test_4411_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4411_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4411() { testValid(test_4411_sup,test_4411_sub); }

		private static final SyntacticType test_4412_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4412_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4412() { testValid(test_4412_sup,test_4412_sub); }

		private static final SyntacticType test_4413_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4413_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4413() { testValid(test_4413_sup,test_4413_sub); }

		private static final SyntacticType test_4414_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4414_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4414() { testValid(test_4414_sup,test_4414_sub); }

		private static final SyntacticType test_4415_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4415_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4415() { testValid(test_4415_sup,test_4415_sub); }

		private static final SyntacticType test_4416_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4416_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4416() { testValid(test_4416_sup,test_4416_sub); }

		private static final SyntacticType test_4417_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4417_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4417() { testValid(test_4417_sup,test_4417_sub); }

		private static final SyntacticType test_4418_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4418_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4418() { testValid(test_4418_sup,test_4418_sub); }

		private static final SyntacticType test_4419_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4419_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4419() { testValid(test_4419_sup,test_4419_sub); }

		private static final SyntacticType test_4420_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4420_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4420() { testValid(test_4420_sup,test_4420_sub); }

		private static final SyntacticType test_4421_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4421_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4421() { testValid(test_4421_sup,test_4421_sub); }

		private static final SyntacticType test_4422_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4422_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4422() { testValid(test_4422_sup,test_4422_sub); }

		private static final SyntacticType test_4423_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4423_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4423() { testValid(test_4423_sup,test_4423_sub); }

		private static final SyntacticType test_4424_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4424_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4424() { testValid(test_4424_sup,test_4424_sub); }

		private static final SyntacticType test_4425_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4425_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4425() { testValid(test_4425_sup,test_4425_sub); }

		private static final SyntacticType test_4426_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4426_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4426() { testValid(test_4426_sup,test_4426_sub); }

		private static final SyntacticType test_4427_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4427_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4427() { testValid(test_4427_sup,test_4427_sub); }

		private static final SyntacticType test_4428_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4428_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4428() { testValid(test_4428_sup,test_4428_sub); }

		private static final SyntacticType test_4429_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4429_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4429() { testValid(test_4429_sup,test_4429_sub); }

		private static final SyntacticType test_4430_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4430_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4430() { testValid(test_4430_sup,test_4430_sub); }

		private static final SyntacticType test_4431_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4431_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4431() { testValid(test_4431_sup,test_4431_sub); }

		private static final SyntacticType test_4432_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4432_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4432() { testValid(test_4432_sup,test_4432_sub); }

		private static final SyntacticType test_4433_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4433_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4433() { testValid(test_4433_sup,test_4433_sub); }

		private static final SyntacticType test_4434_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4434_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4434() { testValid(test_4434_sup,test_4434_sub); }

		private static final SyntacticType test_4435_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4435_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4435() { testValid(test_4435_sup,test_4435_sub); }

		private static final SyntacticType test_4436_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4436_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4436() { testValid(test_4436_sup,test_4436_sub); }

		private static final SyntacticType test_4437_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4437_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4437() { testValid(test_4437_sup,test_4437_sub); }

		private static final SyntacticType test_4438_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4438_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4438() { testValid(test_4438_sup,test_4438_sub); }

		private static final SyntacticType test_4439_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4439_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4439() { testValid(test_4439_sup,test_4439_sub); }

		private static final SyntacticType test_4440_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4440_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4440() { testValid(test_4440_sup,test_4440_sub); }

		private static final SyntacticType test_4441_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4441_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4441() { testValid(test_4441_sup,test_4441_sub); }

		private static final SyntacticType test_4442_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4442_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4442() { testValid(test_4442_sup,test_4442_sub); }

		private static final SyntacticType test_4443_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4443_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4443() { testValid(test_4443_sup,test_4443_sub); }

		private static final SyntacticType test_4444_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4444_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4444() { testValid(test_4444_sup,test_4444_sub); }

		private static final SyntacticType test_4445_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4445_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4445() { testValid(test_4445_sup,test_4445_sub); }

		private static final SyntacticType test_4446_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4446_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4446() { testValid(test_4446_sup,test_4446_sub); }

		private static final SyntacticType test_4447_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4447_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4447() { testValid(test_4447_sup,test_4447_sub); }

		private static final SyntacticType test_4448_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4448_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4448() { testValid(test_4448_sup,test_4448_sub); }

		private static final SyntacticType test_4449_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4449_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4449() { testValid(test_4449_sup,test_4449_sub); }

		private static final SyntacticType test_4450_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4450_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4450() { testValid(test_4450_sup,test_4450_sub); }

		private static final SyntacticType test_4451_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4451_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4451() { testValid(test_4451_sup,test_4451_sub); }

		private static final SyntacticType test_4452_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4452_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4452() { testValid(test_4452_sup,test_4452_sub); }

		private static final SyntacticType test_4453_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4453_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4453() { testValid(test_4453_sup,test_4453_sub); }

		private static final SyntacticType test_4454_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4454_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4454() { testValid(test_4454_sup,test_4454_sub); }

		private static final SyntacticType test_4455_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4455_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4455() { testValid(test_4455_sup,test_4455_sub); }

		private static final SyntacticType test_4456_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4456_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4456() { testValid(test_4456_sup,test_4456_sub); }

		private static final SyntacticType test_4457_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4457_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4457() { testValid(test_4457_sup,test_4457_sub); }

		private static final SyntacticType test_4458_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4458_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4458() { testValid(test_4458_sup,test_4458_sub); }

		private static final SyntacticType test_4459_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4459_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4459() { testValid(test_4459_sup,test_4459_sub); }

		private static final SyntacticType test_4460_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4460_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4460() { testValid(test_4460_sup,test_4460_sub); }

		private static final SyntacticType test_4461_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4461_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4461() { testValid(test_4461_sup,test_4461_sub); }

		private static final SyntacticType test_4462_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4462_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4462() { testValid(test_4462_sup,test_4462_sub); }

		private static final SyntacticType test_4463_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4463_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4463() { testValid(test_4463_sup,test_4463_sub); }

		private static final SyntacticType test_4464_sup = parse("(((int & int) | any) | {(int | any), {int, int}})");
		private static final SyntacticType test_4464_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4464() { testValid(test_4464_sup,test_4464_sub); }

		private static final SyntacticType test_4465_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4465_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4465() { testInvalid(test_4465_sup,test_4465_sub); }

		private static final SyntacticType test_4466_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4466_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4466() { testInvalid(test_4466_sup,test_4466_sub); }

		private static final SyntacticType test_4467_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4467_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4467() { testValid(test_4467_sup,test_4467_sub); }

		private static final SyntacticType test_4468_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4468_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4468() { testValid(test_4468_sup,test_4468_sub); }

		private static final SyntacticType test_4469_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4469_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4469() { testInvalid(test_4469_sup,test_4469_sub); }

		private static final SyntacticType test_4470_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4470_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4470() { testInvalid(test_4470_sup,test_4470_sub); }

		private static final SyntacticType test_4471_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4471_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4471() { testInvalid(test_4471_sup,test_4471_sub); }

		private static final SyntacticType test_4472_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4472_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4472() { testInvalid(test_4472_sup,test_4472_sub); }

		private static final SyntacticType test_4473_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4473_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4473() { testInvalid(test_4473_sup,test_4473_sub); }

		private static final SyntacticType test_4474_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4474_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4474() { testValid(test_4474_sup,test_4474_sub); }

		private static final SyntacticType test_4475_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4475_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4475() { testValid(test_4475_sup,test_4475_sub); }

		private static final SyntacticType test_4476_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4476_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4476() { testValid(test_4476_sup,test_4476_sub); }

		private static final SyntacticType test_4477_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4477_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4477() { testInvalid(test_4477_sup,test_4477_sub); }

		private static final SyntacticType test_4478_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4478_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4478() { testValid(test_4478_sup,test_4478_sub); }

		private static final SyntacticType test_4479_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4479_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4479() { testInvalid(test_4479_sup,test_4479_sub); }

		private static final SyntacticType test_4480_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4480_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4480() { testInvalid(test_4480_sup,test_4480_sub); }

		private static final SyntacticType test_4481_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4481_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4481() { testValid(test_4481_sup,test_4481_sub); }

		private static final SyntacticType test_4482_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4482_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4482() { testInvalid(test_4482_sup,test_4482_sub); }

		private static final SyntacticType test_4483_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4483_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4483() { testInvalid(test_4483_sup,test_4483_sub); }

		private static final SyntacticType test_4484_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4484_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4484() { testInvalid(test_4484_sup,test_4484_sub); }

		private static final SyntacticType test_4485_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4485_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4485() { testInvalid(test_4485_sup,test_4485_sub); }

		private static final SyntacticType test_4486_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4486_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4486() { testInvalid(test_4486_sup,test_4486_sub); }

		private static final SyntacticType test_4487_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4487_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4487() { testValid(test_4487_sup,test_4487_sub); }

		private static final SyntacticType test_4488_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4488_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4488() { testValid(test_4488_sup,test_4488_sub); }

		private static final SyntacticType test_4489_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4489_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4489() { testValid(test_4489_sup,test_4489_sub); }

		private static final SyntacticType test_4490_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4490_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4490() { testInvalid(test_4490_sup,test_4490_sub); }

		private static final SyntacticType test_4491_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4491_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4491() { testInvalid(test_4491_sup,test_4491_sub); }

		private static final SyntacticType test_4492_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4492_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4492() { testValid(test_4492_sup,test_4492_sub); }

		private static final SyntacticType test_4493_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4493_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4493() { testValid(test_4493_sup,test_4493_sub); }

		private static final SyntacticType test_4494_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4494_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4494() { testInvalid(test_4494_sup,test_4494_sub); }

		private static final SyntacticType test_4495_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4495_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4495() { testInvalid(test_4495_sup,test_4495_sub); }

		private static final SyntacticType test_4496_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4496_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4496() { testValid(test_4496_sup,test_4496_sub); }

		private static final SyntacticType test_4497_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4497_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4497() { testInvalid(test_4497_sup,test_4497_sub); }

		private static final SyntacticType test_4498_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4498_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4498() { testInvalid(test_4498_sup,test_4498_sub); }

		private static final SyntacticType test_4499_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4499_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4499() { testValid(test_4499_sup,test_4499_sub); }

		private static final SyntacticType test_4500_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4500_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4500() { testInvalid(test_4500_sup,test_4500_sub); }

		private static final SyntacticType test_4501_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4501_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4501() { testValid(test_4501_sup,test_4501_sub); }

		private static final SyntacticType test_4502_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4502_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4502() { testValid(test_4502_sup,test_4502_sub); }

		private static final SyntacticType test_4503_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4503_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4503() { testValid(test_4503_sup,test_4503_sub); }

		private static final SyntacticType test_4504_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4504_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4504() { testValid(test_4504_sup,test_4504_sub); }

		private static final SyntacticType test_4505_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4505_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4505() { testInvalid(test_4505_sup,test_4505_sub); }

		private static final SyntacticType test_4506_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4506_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4506() { testValid(test_4506_sup,test_4506_sub); }

		private static final SyntacticType test_4507_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4507_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4507() { testInvalid(test_4507_sup,test_4507_sub); }

		private static final SyntacticType test_4508_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4508_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4508() { testInvalid(test_4508_sup,test_4508_sub); }

		private static final SyntacticType test_4509_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4509_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4509() { testInvalid(test_4509_sup,test_4509_sub); }

		private static final SyntacticType test_4510_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4510_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4510() { testInvalid(test_4510_sup,test_4510_sub); }

		private static final SyntacticType test_4511_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4511_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4511() { testInvalid(test_4511_sup,test_4511_sub); }

		private static final SyntacticType test_4512_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4512_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4512() { testValid(test_4512_sup,test_4512_sub); }

		private static final SyntacticType test_4513_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4513_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4513() { testInvalid(test_4513_sup,test_4513_sub); }

		private static final SyntacticType test_4514_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4514_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4514() { testInvalid(test_4514_sup,test_4514_sub); }

		private static final SyntacticType test_4515_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4515_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4515() { testInvalid(test_4515_sup,test_4515_sub); }

		private static final SyntacticType test_4516_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4516_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4516() { testInvalid(test_4516_sup,test_4516_sub); }

		private static final SyntacticType test_4517_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4517_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4517() { testInvalid(test_4517_sup,test_4517_sub); }

		private static final SyntacticType test_4518_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4518_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4518() { testInvalid(test_4518_sup,test_4518_sub); }

		private static final SyntacticType test_4519_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4519_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4519() { testInvalid(test_4519_sup,test_4519_sub); }

		private static final SyntacticType test_4520_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4520_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4520() { testInvalid(test_4520_sup,test_4520_sub); }

		private static final SyntacticType test_4521_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4521_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4521() { testInvalid(test_4521_sup,test_4521_sub); }

		private static final SyntacticType test_4522_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4522_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4522() { testInvalid(test_4522_sup,test_4522_sub); }

		private static final SyntacticType test_4523_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4523_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4523() { testInvalid(test_4523_sup,test_4523_sub); }

		private static final SyntacticType test_4524_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4524_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4524() { testInvalid(test_4524_sup,test_4524_sub); }

		private static final SyntacticType test_4525_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4525_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4525() { testInvalid(test_4525_sup,test_4525_sub); }

		private static final SyntacticType test_4526_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4526_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4526() { testInvalid(test_4526_sup,test_4526_sub); }

		private static final SyntacticType test_4527_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4527_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4527() { testInvalid(test_4527_sup,test_4527_sub); }

		private static final SyntacticType test_4528_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4528_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4528() { testInvalid(test_4528_sup,test_4528_sub); }

		private static final SyntacticType test_4529_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4529_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4529() { testInvalid(test_4529_sup,test_4529_sub); }

		private static final SyntacticType test_4530_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4530_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4530() { testInvalid(test_4530_sup,test_4530_sub); }

		private static final SyntacticType test_4531_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4531_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4531() { testInvalid(test_4531_sup,test_4531_sub); }

		private static final SyntacticType test_4532_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4532_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4532() { testInvalid(test_4532_sup,test_4532_sub); }

		private static final SyntacticType test_4533_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4533_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4533() { testInvalid(test_4533_sup,test_4533_sub); }

		private static final SyntacticType test_4534_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4534_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4534() { testInvalid(test_4534_sup,test_4534_sub); }

		private static final SyntacticType test_4535_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4535_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4535() { testInvalid(test_4535_sup,test_4535_sub); }

		private static final SyntacticType test_4536_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4536_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4536() { testInvalid(test_4536_sup,test_4536_sub); }

		private static final SyntacticType test_4537_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4537_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4537() { testInvalid(test_4537_sup,test_4537_sub); }

		private static final SyntacticType test_4538_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4538_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4538() { testInvalid(test_4538_sup,test_4538_sub); }

		private static final SyntacticType test_4539_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4539_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4539() { testInvalid(test_4539_sup,test_4539_sub); }

		private static final SyntacticType test_4540_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4540_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4540() { testInvalid(test_4540_sup,test_4540_sub); }

		private static final SyntacticType test_4541_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4541_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4541() { testInvalid(test_4541_sup,test_4541_sub); }

		private static final SyntacticType test_4542_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4542_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4542() { testInvalid(test_4542_sup,test_4542_sub); }

		private static final SyntacticType test_4543_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4543_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4543() { testInvalid(test_4543_sup,test_4543_sub); }

		private static final SyntacticType test_4544_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4544_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4544() { testInvalid(test_4544_sup,test_4544_sub); }

		private static final SyntacticType test_4545_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4545_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4545() { testInvalid(test_4545_sup,test_4545_sub); }

		private static final SyntacticType test_4546_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4546_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4546() { testInvalid(test_4546_sup,test_4546_sub); }

		private static final SyntacticType test_4547_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4547_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4547() { testInvalid(test_4547_sup,test_4547_sub); }

		private static final SyntacticType test_4548_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4548_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4548() { testInvalid(test_4548_sup,test_4548_sub); }

		private static final SyntacticType test_4549_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4549_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4549() { testInvalid(test_4549_sup,test_4549_sub); }

		private static final SyntacticType test_4550_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4550_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4550() { testInvalid(test_4550_sup,test_4550_sub); }

		private static final SyntacticType test_4551_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4551_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4551() { testInvalid(test_4551_sup,test_4551_sub); }

		private static final SyntacticType test_4552_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4552_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4552() { testInvalid(test_4552_sup,test_4552_sub); }

		private static final SyntacticType test_4553_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4553_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4553() { testInvalid(test_4553_sup,test_4553_sub); }

		private static final SyntacticType test_4554_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4554_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4554() { testInvalid(test_4554_sup,test_4554_sub); }

		private static final SyntacticType test_4555_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4555_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4555() { testInvalid(test_4555_sup,test_4555_sub); }

		private static final SyntacticType test_4556_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4556_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4556() { testInvalid(test_4556_sup,test_4556_sub); }

		private static final SyntacticType test_4557_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4557_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4557() { testInvalid(test_4557_sup,test_4557_sub); }

		private static final SyntacticType test_4558_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4558_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4558() { testInvalid(test_4558_sup,test_4558_sub); }

		private static final SyntacticType test_4559_sup = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		private static final SyntacticType test_4559_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4559() { testInvalid(test_4559_sup,test_4559_sub); }

		private static final SyntacticType test_4560_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4560_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4560() { testInvalid(test_4560_sup,test_4560_sub); }

		private static final SyntacticType test_4561_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4561_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4561() { testInvalid(test_4561_sup,test_4561_sub); }

		private static final SyntacticType test_4562_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4562_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4562() { testValid(test_4562_sup,test_4562_sub); }

		private static final SyntacticType test_4563_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4563_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4563() { testValid(test_4563_sup,test_4563_sub); }

		private static final SyntacticType test_4564_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4564_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4564() { testValid(test_4564_sup,test_4564_sub); }

		private static final SyntacticType test_4565_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4565_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4565() { testValid(test_4565_sup,test_4565_sub); }

		private static final SyntacticType test_4566_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4566_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4566() { testValid(test_4566_sup,test_4566_sub); }

		private static final SyntacticType test_4567_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4567_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4567() { testValid(test_4567_sup,test_4567_sub); }

		private static final SyntacticType test_4568_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4568_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4568() { testValid(test_4568_sup,test_4568_sub); }

		private static final SyntacticType test_4569_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4569_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4569() { testValid(test_4569_sup,test_4569_sub); }

		private static final SyntacticType test_4570_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4570_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4570() { testValid(test_4570_sup,test_4570_sub); }

		private static final SyntacticType test_4571_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4571_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4571() { testInvalid(test_4571_sup,test_4571_sub); }

		private static final SyntacticType test_4572_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4572_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4572() { testInvalid(test_4572_sup,test_4572_sub); }

		private static final SyntacticType test_4573_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4573_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4573() { testInvalid(test_4573_sup,test_4573_sub); }

		private static final SyntacticType test_4574_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4574_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4574() { testInvalid(test_4574_sup,test_4574_sub); }

		private static final SyntacticType test_4575_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4575_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4575() { testInvalid(test_4575_sup,test_4575_sub); }

		private static final SyntacticType test_4576_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4576_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4576() { testValid(test_4576_sup,test_4576_sub); }

		private static final SyntacticType test_4577_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4577_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4577() { testInvalid(test_4577_sup,test_4577_sub); }

		private static final SyntacticType test_4578_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4578_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4578() { testValid(test_4578_sup,test_4578_sub); }

		private static final SyntacticType test_4579_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4579_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4579() { testInvalid(test_4579_sup,test_4579_sub); }

		private static final SyntacticType test_4580_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4580_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4580() { testInvalid(test_4580_sup,test_4580_sub); }

		private static final SyntacticType test_4581_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4581_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4581() { testValid(test_4581_sup,test_4581_sub); }

		private static final SyntacticType test_4582_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4582_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4582() { testValid(test_4582_sup,test_4582_sub); }

		private static final SyntacticType test_4583_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4583_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4583() { testValid(test_4583_sup,test_4583_sub); }

		private static final SyntacticType test_4584_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4584_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4584() { testValid(test_4584_sup,test_4584_sub); }

		private static final SyntacticType test_4585_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4585_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4585() { testValid(test_4585_sup,test_4585_sub); }

		private static final SyntacticType test_4586_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4586_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4586() { testValid(test_4586_sup,test_4586_sub); }

		private static final SyntacticType test_4587_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4587_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4587() { testValid(test_4587_sup,test_4587_sub); }

		private static final SyntacticType test_4588_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4588_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4588() { testValid(test_4588_sup,test_4588_sub); }

		private static final SyntacticType test_4589_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4589_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4589() { testValid(test_4589_sup,test_4589_sub); }

		private static final SyntacticType test_4590_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4590_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4590() { testInvalid(test_4590_sup,test_4590_sub); }

		private static final SyntacticType test_4591_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4591_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4591() { testInvalid(test_4591_sup,test_4591_sub); }

		private static final SyntacticType test_4592_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4592_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4592() { testInvalid(test_4592_sup,test_4592_sub); }

		private static final SyntacticType test_4593_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4593_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4593() { testInvalid(test_4593_sup,test_4593_sub); }

		private static final SyntacticType test_4594_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4594_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4594() { testInvalid(test_4594_sup,test_4594_sub); }

		private static final SyntacticType test_4595_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4595_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4595() { testInvalid(test_4595_sup,test_4595_sub); }

		private static final SyntacticType test_4596_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4596_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4596() { testInvalid(test_4596_sup,test_4596_sub); }

		private static final SyntacticType test_4597_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4597_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4597() { testValid(test_4597_sup,test_4597_sub); }

		private static final SyntacticType test_4598_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4598_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4598() { testInvalid(test_4598_sup,test_4598_sub); }

		private static final SyntacticType test_4599_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4599_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4599() { testValid(test_4599_sup,test_4599_sub); }

		private static final SyntacticType test_4600_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4600_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4600() { testInvalid(test_4600_sup,test_4600_sub); }

		private static final SyntacticType test_4601_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4601_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4601() { testValid(test_4601_sup,test_4601_sub); }

		private static final SyntacticType test_4602_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4602_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4602() { testInvalid(test_4602_sup,test_4602_sub); }

		private static final SyntacticType test_4603_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4603_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4603() { testInvalid(test_4603_sup,test_4603_sub); }

		private static final SyntacticType test_4604_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4604_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4604() { testValid(test_4604_sup,test_4604_sub); }

		private static final SyntacticType test_4605_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4605_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4605() { testInvalid(test_4605_sup,test_4605_sub); }

		private static final SyntacticType test_4606_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4606_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4606() { testInvalid(test_4606_sup,test_4606_sub); }

		private static final SyntacticType test_4607_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4607_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4607() { testInvalid(test_4607_sup,test_4607_sub); }

		private static final SyntacticType test_4608_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4608_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4608() { testValid(test_4608_sup,test_4608_sub); }

		private static final SyntacticType test_4609_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4609_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4609() { testInvalid(test_4609_sup,test_4609_sub); }

		private static final SyntacticType test_4610_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4610_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4610() { testInvalid(test_4610_sup,test_4610_sub); }

		private static final SyntacticType test_4611_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4611_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4611() { testInvalid(test_4611_sup,test_4611_sub); }

		private static final SyntacticType test_4612_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4612_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4612() { testInvalid(test_4612_sup,test_4612_sub); }

		private static final SyntacticType test_4613_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4613_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4613() { testInvalid(test_4613_sup,test_4613_sub); }

		private static final SyntacticType test_4614_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4614_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4614() { testInvalid(test_4614_sup,test_4614_sub); }

		private static final SyntacticType test_4615_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4615_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4615() { testInvalid(test_4615_sup,test_4615_sub); }

		private static final SyntacticType test_4616_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4616_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4616() { testInvalid(test_4616_sup,test_4616_sub); }

		private static final SyntacticType test_4617_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4617_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4617() { testInvalid(test_4617_sup,test_4617_sub); }

		private static final SyntacticType test_4618_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4618_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4618() { testInvalid(test_4618_sup,test_4618_sub); }

		private static final SyntacticType test_4619_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4619_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4619() { testInvalid(test_4619_sup,test_4619_sub); }

		private static final SyntacticType test_4620_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4620_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4620() { testInvalid(test_4620_sup,test_4620_sub); }

		private static final SyntacticType test_4621_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4621_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4621() { testInvalid(test_4621_sup,test_4621_sub); }

		private static final SyntacticType test_4622_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4622_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4622() { testValid(test_4622_sup,test_4622_sub); }

		private static final SyntacticType test_4623_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4623_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4623() { testInvalid(test_4623_sup,test_4623_sub); }

		private static final SyntacticType test_4624_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4624_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4624() { testInvalid(test_4624_sup,test_4624_sub); }

		private static final SyntacticType test_4625_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4625_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4625() { testInvalid(test_4625_sup,test_4625_sub); }

		private static final SyntacticType test_4626_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4626_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4626() { testInvalid(test_4626_sup,test_4626_sub); }

		private static final SyntacticType test_4627_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4627_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4627() { testValid(test_4627_sup,test_4627_sub); }

		private static final SyntacticType test_4628_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4628_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4628() { testValid(test_4628_sup,test_4628_sub); }

		private static final SyntacticType test_4629_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4629_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4629() { testInvalid(test_4629_sup,test_4629_sub); }

		private static final SyntacticType test_4630_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4630_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4630() { testInvalid(test_4630_sup,test_4630_sub); }

		private static final SyntacticType test_4631_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4631_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4631() { testInvalid(test_4631_sup,test_4631_sub); }

		private static final SyntacticType test_4632_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4632_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4632() { testInvalid(test_4632_sup,test_4632_sub); }

		private static final SyntacticType test_4633_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4633_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4633() { testValid(test_4633_sup,test_4633_sub); }

		private static final SyntacticType test_4634_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4634_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4634() { testInvalid(test_4634_sup,test_4634_sub); }

		private static final SyntacticType test_4635_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4635_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4635() { testInvalid(test_4635_sup,test_4635_sub); }

		private static final SyntacticType test_4636_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4636_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4636() { testValid(test_4636_sup,test_4636_sub); }

		private static final SyntacticType test_4637_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4637_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4637() { testInvalid(test_4637_sup,test_4637_sub); }

		private static final SyntacticType test_4638_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4638_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4638() { testInvalid(test_4638_sup,test_4638_sub); }

		private static final SyntacticType test_4639_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4639_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4639() { testInvalid(test_4639_sup,test_4639_sub); }

		private static final SyntacticType test_4640_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4640_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4640() { testInvalid(test_4640_sup,test_4640_sub); }

		private static final SyntacticType test_4641_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4641_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4641() { testInvalid(test_4641_sup,test_4641_sub); }

		private static final SyntacticType test_4642_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4642_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4642() { testInvalid(test_4642_sup,test_4642_sub); }

		private static final SyntacticType test_4643_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4643_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4643() { testInvalid(test_4643_sup,test_4643_sub); }

		private static final SyntacticType test_4644_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4644_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4644() { testInvalid(test_4644_sup,test_4644_sub); }

		private static final SyntacticType test_4645_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4645_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4645() { testInvalid(test_4645_sup,test_4645_sub); }

		private static final SyntacticType test_4646_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4646_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4646() { testInvalid(test_4646_sup,test_4646_sub); }

		private static final SyntacticType test_4647_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4647_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4647() { testInvalid(test_4647_sup,test_4647_sub); }

		private static final SyntacticType test_4648_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4648_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4648() { testInvalid(test_4648_sup,test_4648_sub); }

		private static final SyntacticType test_4649_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4649_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4649() { testInvalid(test_4649_sup,test_4649_sub); }

		private static final SyntacticType test_4650_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4650_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4650() { testInvalid(test_4650_sup,test_4650_sub); }

		private static final SyntacticType test_4651_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4651_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4651() { testInvalid(test_4651_sup,test_4651_sub); }

		private static final SyntacticType test_4652_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4652_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4652() { testInvalid(test_4652_sup,test_4652_sub); }

		private static final SyntacticType test_4653_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4653_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4653() { testInvalid(test_4653_sup,test_4653_sub); }

		private static final SyntacticType test_4654_sup = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		private static final SyntacticType test_4654_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4654() { testInvalid(test_4654_sup,test_4654_sub); }

		private static final SyntacticType test_4655_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4655_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4655() { testValid(test_4655_sup,test_4655_sub); }

		private static final SyntacticType test_4656_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4656_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4656() { testValid(test_4656_sup,test_4656_sub); }

		private static final SyntacticType test_4657_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4657_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4657() { testValid(test_4657_sup,test_4657_sub); }

		private static final SyntacticType test_4658_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4658_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4658() { testValid(test_4658_sup,test_4658_sub); }

		private static final SyntacticType test_4659_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4659_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4659() { testValid(test_4659_sup,test_4659_sub); }

		private static final SyntacticType test_4660_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4660_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4660() { testValid(test_4660_sup,test_4660_sub); }

		private static final SyntacticType test_4661_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4661_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4661() { testValid(test_4661_sup,test_4661_sub); }

		private static final SyntacticType test_4662_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4662_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4662() { testValid(test_4662_sup,test_4662_sub); }

		private static final SyntacticType test_4663_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4663_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4663() { testValid(test_4663_sup,test_4663_sub); }

		private static final SyntacticType test_4664_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4664_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4664() { testValid(test_4664_sup,test_4664_sub); }

		private static final SyntacticType test_4665_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4665_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4665() { testValid(test_4665_sup,test_4665_sub); }

		private static final SyntacticType test_4666_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4666_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4666() { testValid(test_4666_sup,test_4666_sub); }

		private static final SyntacticType test_4667_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4667_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4667() { testValid(test_4667_sup,test_4667_sub); }

		private static final SyntacticType test_4668_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4668_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4668() { testValid(test_4668_sup,test_4668_sub); }

		private static final SyntacticType test_4669_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4669_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4669() { testValid(test_4669_sup,test_4669_sub); }

		private static final SyntacticType test_4670_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4670_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4670() { testValid(test_4670_sup,test_4670_sub); }

		private static final SyntacticType test_4671_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4671_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4671() { testValid(test_4671_sup,test_4671_sub); }

		private static final SyntacticType test_4672_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4672_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4672() { testValid(test_4672_sup,test_4672_sub); }

		private static final SyntacticType test_4673_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4673_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4673() { testValid(test_4673_sup,test_4673_sub); }

		private static final SyntacticType test_4674_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4674_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4674() { testValid(test_4674_sup,test_4674_sub); }

		private static final SyntacticType test_4675_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4675_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4675() { testValid(test_4675_sup,test_4675_sub); }

		private static final SyntacticType test_4676_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4676_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4676() { testValid(test_4676_sup,test_4676_sub); }

		private static final SyntacticType test_4677_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4677_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4677() { testValid(test_4677_sup,test_4677_sub); }

		private static final SyntacticType test_4678_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4678_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4678() { testValid(test_4678_sup,test_4678_sub); }

		private static final SyntacticType test_4679_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4679_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4679() { testValid(test_4679_sup,test_4679_sub); }

		private static final SyntacticType test_4680_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4680_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4680() { testValid(test_4680_sup,test_4680_sub); }

		private static final SyntacticType test_4681_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4681_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4681() { testValid(test_4681_sup,test_4681_sub); }

		private static final SyntacticType test_4682_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4682_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4682() { testValid(test_4682_sup,test_4682_sub); }

		private static final SyntacticType test_4683_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4683_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4683() { testValid(test_4683_sup,test_4683_sub); }

		private static final SyntacticType test_4684_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4684_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4684() { testValid(test_4684_sup,test_4684_sub); }

		private static final SyntacticType test_4685_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4685_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4685() { testValid(test_4685_sup,test_4685_sub); }

		private static final SyntacticType test_4686_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4686_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4686() { testValid(test_4686_sup,test_4686_sub); }

		private static final SyntacticType test_4687_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4687_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4687() { testValid(test_4687_sup,test_4687_sub); }

		private static final SyntacticType test_4688_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4688_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4688() { testValid(test_4688_sup,test_4688_sub); }

		private static final SyntacticType test_4689_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4689_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4689() { testValid(test_4689_sup,test_4689_sub); }

		private static final SyntacticType test_4690_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4690_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4690() { testValid(test_4690_sup,test_4690_sub); }

		private static final SyntacticType test_4691_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4691_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4691() { testValid(test_4691_sup,test_4691_sub); }

		private static final SyntacticType test_4692_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4692_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4692() { testValid(test_4692_sup,test_4692_sub); }

		private static final SyntacticType test_4693_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4693_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4693() { testValid(test_4693_sup,test_4693_sub); }

		private static final SyntacticType test_4694_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4694_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4694() { testValid(test_4694_sup,test_4694_sub); }

		private static final SyntacticType test_4695_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4695_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4695() { testValid(test_4695_sup,test_4695_sub); }

		private static final SyntacticType test_4696_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4696_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4696() { testValid(test_4696_sup,test_4696_sub); }

		private static final SyntacticType test_4697_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4697_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4697() { testValid(test_4697_sup,test_4697_sub); }

		private static final SyntacticType test_4698_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4698_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4698() { testValid(test_4698_sup,test_4698_sub); }

		private static final SyntacticType test_4699_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4699_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4699() { testInvalid(test_4699_sup,test_4699_sub); }

		private static final SyntacticType test_4700_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4700_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4700() { testValid(test_4700_sup,test_4700_sub); }

		private static final SyntacticType test_4701_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4701_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4701() { testInvalid(test_4701_sup,test_4701_sub); }

		private static final SyntacticType test_4702_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4702_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4702() { testValid(test_4702_sup,test_4702_sub); }

		private static final SyntacticType test_4703_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4703_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4703() { testInvalid(test_4703_sup,test_4703_sub); }

		private static final SyntacticType test_4704_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4704_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4704() { testValid(test_4704_sup,test_4704_sub); }

		private static final SyntacticType test_4705_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4705_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4705() { testInvalid(test_4705_sup,test_4705_sub); }

		private static final SyntacticType test_4706_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4706_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4706() { testValid(test_4706_sup,test_4706_sub); }

		private static final SyntacticType test_4707_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4707_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4707() { testValid(test_4707_sup,test_4707_sub); }

		private static final SyntacticType test_4708_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4708_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4708() { testValid(test_4708_sup,test_4708_sub); }

		private static final SyntacticType test_4709_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4709_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4709() { testInvalid(test_4709_sup,test_4709_sub); }

		private static final SyntacticType test_4710_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4710_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4710() { testInvalid(test_4710_sup,test_4710_sub); }

		private static final SyntacticType test_4711_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4711_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4711() { testValid(test_4711_sup,test_4711_sub); }

		private static final SyntacticType test_4712_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4712_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4712() { testInvalid(test_4712_sup,test_4712_sub); }

		private static final SyntacticType test_4713_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4713_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4713() { testInvalid(test_4713_sup,test_4713_sub); }

		private static final SyntacticType test_4714_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4714_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4714() { testInvalid(test_4714_sup,test_4714_sub); }

		private static final SyntacticType test_4715_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4715_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4715() { testInvalid(test_4715_sup,test_4715_sub); }

		private static final SyntacticType test_4716_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4716_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4716() { testInvalid(test_4716_sup,test_4716_sub); }

		private static final SyntacticType test_4717_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4717_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4717() { testInvalid(test_4717_sup,test_4717_sub); }

		private static final SyntacticType test_4718_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4718_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4718() { testInvalid(test_4718_sup,test_4718_sub); }

		private static final SyntacticType test_4719_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4719_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4719() { testInvalid(test_4719_sup,test_4719_sub); }

		private static final SyntacticType test_4720_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4720_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4720() { testInvalid(test_4720_sup,test_4720_sub); }

		private static final SyntacticType test_4721_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4721_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4721() { testInvalid(test_4721_sup,test_4721_sub); }

		private static final SyntacticType test_4722_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4722_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4722() { testInvalid(test_4722_sup,test_4722_sub); }

		private static final SyntacticType test_4723_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4723_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4723() { testValid(test_4723_sup,test_4723_sub); }

		private static final SyntacticType test_4724_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4724_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4724() { testInvalid(test_4724_sup,test_4724_sub); }

		private static final SyntacticType test_4725_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4725_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4725() { testInvalid(test_4725_sup,test_4725_sub); }

		private static final SyntacticType test_4726_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4726_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4726() { testInvalid(test_4726_sup,test_4726_sub); }

		private static final SyntacticType test_4727_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4727_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4727() { testInvalid(test_4727_sup,test_4727_sub); }

		private static final SyntacticType test_4728_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4728_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4728() { testInvalid(test_4728_sup,test_4728_sub); }

		private static final SyntacticType test_4729_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4729_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4729() { testValid(test_4729_sup,test_4729_sub); }

		private static final SyntacticType test_4730_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4730_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4730() { testInvalid(test_4730_sup,test_4730_sub); }

		private static final SyntacticType test_4731_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4731_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4731() { testInvalid(test_4731_sup,test_4731_sub); }

		private static final SyntacticType test_4732_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4732_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4732() { testInvalid(test_4732_sup,test_4732_sub); }

		private static final SyntacticType test_4733_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4733_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4733() { testInvalid(test_4733_sup,test_4733_sub); }

		private static final SyntacticType test_4734_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4734_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4734() { testInvalid(test_4734_sup,test_4734_sub); }

		private static final SyntacticType test_4735_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4735_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4735() { testValid(test_4735_sup,test_4735_sub); }

		private static final SyntacticType test_4736_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4736_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4736() { testValid(test_4736_sup,test_4736_sub); }

		private static final SyntacticType test_4737_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4737_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4737() { testValid(test_4737_sup,test_4737_sub); }

		private static final SyntacticType test_4738_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4738_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4738() { testValid(test_4738_sup,test_4738_sub); }

		private static final SyntacticType test_4739_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4739_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4739() { testValid(test_4739_sup,test_4739_sub); }

		private static final SyntacticType test_4740_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4740_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4740() { testInvalid(test_4740_sup,test_4740_sub); }

		private static final SyntacticType test_4741_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4741_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4741() { testValid(test_4741_sup,test_4741_sub); }

		private static final SyntacticType test_4742_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4742_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4742() { testValid(test_4742_sup,test_4742_sub); }

		private static final SyntacticType test_4743_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4743_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4743() { testInvalid(test_4743_sup,test_4743_sub); }

		private static final SyntacticType test_4744_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4744_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4744() { testInvalid(test_4744_sup,test_4744_sub); }

		private static final SyntacticType test_4745_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4745_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4745() { testInvalid(test_4745_sup,test_4745_sub); }

		private static final SyntacticType test_4746_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4746_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4746() { testInvalid(test_4746_sup,test_4746_sub); }

		private static final SyntacticType test_4747_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4747_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4747() { testInvalid(test_4747_sup,test_4747_sub); }

		private static final SyntacticType test_4748_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4748_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4748() { testInvalid(test_4748_sup,test_4748_sub); }

		private static final SyntacticType test_4749_sup = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		private static final SyntacticType test_4749_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4749() { testInvalid(test_4749_sup,test_4749_sub); }

		private static final SyntacticType test_4750_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4750_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4750() { testValid(test_4750_sup,test_4750_sub); }

		private static final SyntacticType test_4751_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4751_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4751() { testValid(test_4751_sup,test_4751_sub); }

		private static final SyntacticType test_4752_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4752_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4752() { testValid(test_4752_sup,test_4752_sub); }

		private static final SyntacticType test_4753_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4753_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4753() { testValid(test_4753_sup,test_4753_sub); }

		private static final SyntacticType test_4754_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4754_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4754() { testValid(test_4754_sup,test_4754_sub); }

		private static final SyntacticType test_4755_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4755_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4755() { testValid(test_4755_sup,test_4755_sub); }

		private static final SyntacticType test_4756_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4756_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4756() { testValid(test_4756_sup,test_4756_sub); }

		private static final SyntacticType test_4757_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4757_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4757() { testValid(test_4757_sup,test_4757_sub); }

		private static final SyntacticType test_4758_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4758_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4758() { testValid(test_4758_sup,test_4758_sub); }

		private static final SyntacticType test_4759_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4759_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4759() { testValid(test_4759_sup,test_4759_sub); }

		private static final SyntacticType test_4760_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4760_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4760() { testValid(test_4760_sup,test_4760_sub); }

		private static final SyntacticType test_4761_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4761_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4761() { testValid(test_4761_sup,test_4761_sub); }

		private static final SyntacticType test_4762_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4762_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4762() { testValid(test_4762_sup,test_4762_sub); }

		private static final SyntacticType test_4763_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4763_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4763() { testValid(test_4763_sup,test_4763_sub); }

		private static final SyntacticType test_4764_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4764_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4764() { testValid(test_4764_sup,test_4764_sub); }

		private static final SyntacticType test_4765_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4765_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4765() { testValid(test_4765_sup,test_4765_sub); }

		private static final SyntacticType test_4766_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4766_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4766() { testValid(test_4766_sup,test_4766_sub); }

		private static final SyntacticType test_4767_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4767_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4767() { testValid(test_4767_sup,test_4767_sub); }

		private static final SyntacticType test_4768_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4768_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4768() { testValid(test_4768_sup,test_4768_sub); }

		private static final SyntacticType test_4769_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4769_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4769() { testValid(test_4769_sup,test_4769_sub); }

		private static final SyntacticType test_4770_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4770_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4770() { testValid(test_4770_sup,test_4770_sub); }

		private static final SyntacticType test_4771_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4771_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4771() { testValid(test_4771_sup,test_4771_sub); }

		private static final SyntacticType test_4772_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4772_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4772() { testValid(test_4772_sup,test_4772_sub); }

		private static final SyntacticType test_4773_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4773_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4773() { testValid(test_4773_sup,test_4773_sub); }

		private static final SyntacticType test_4774_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4774_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4774() { testValid(test_4774_sup,test_4774_sub); }

		private static final SyntacticType test_4775_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4775_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4775() { testValid(test_4775_sup,test_4775_sub); }

		private static final SyntacticType test_4776_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4776_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4776() { testValid(test_4776_sup,test_4776_sub); }

		private static final SyntacticType test_4777_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4777_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4777() { testValid(test_4777_sup,test_4777_sub); }

		private static final SyntacticType test_4778_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4778_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4778() { testValid(test_4778_sup,test_4778_sub); }

		private static final SyntacticType test_4779_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4779_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4779() { testValid(test_4779_sup,test_4779_sub); }

		private static final SyntacticType test_4780_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4780_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4780() { testValid(test_4780_sup,test_4780_sub); }

		private static final SyntacticType test_4781_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4781_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4781() { testValid(test_4781_sup,test_4781_sub); }

		private static final SyntacticType test_4782_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4782_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4782() { testValid(test_4782_sup,test_4782_sub); }

		private static final SyntacticType test_4783_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4783_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4783() { testValid(test_4783_sup,test_4783_sub); }

		private static final SyntacticType test_4784_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4784_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4784() { testValid(test_4784_sup,test_4784_sub); }

		private static final SyntacticType test_4785_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4785_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4785() { testValid(test_4785_sup,test_4785_sub); }

		private static final SyntacticType test_4786_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4786_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4786() { testValid(test_4786_sup,test_4786_sub); }

		private static final SyntacticType test_4787_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4787_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4787() { testValid(test_4787_sup,test_4787_sub); }

		private static final SyntacticType test_4788_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4788_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4788() { testValid(test_4788_sup,test_4788_sub); }

		private static final SyntacticType test_4789_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4789_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4789() { testValid(test_4789_sup,test_4789_sub); }

		private static final SyntacticType test_4790_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4790_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4790() { testValid(test_4790_sup,test_4790_sub); }

		private static final SyntacticType test_4791_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4791_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4791() { testValid(test_4791_sup,test_4791_sub); }

		private static final SyntacticType test_4792_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4792_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4792() { testValid(test_4792_sup,test_4792_sub); }

		private static final SyntacticType test_4793_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4793_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4793() { testValid(test_4793_sup,test_4793_sub); }

		private static final SyntacticType test_4794_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4794_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4794() { testValid(test_4794_sup,test_4794_sub); }

		private static final SyntacticType test_4795_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4795_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4795() { testValid(test_4795_sup,test_4795_sub); }

		private static final SyntacticType test_4796_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4796_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4796() { testValid(test_4796_sup,test_4796_sub); }

		private static final SyntacticType test_4797_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4797_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4797() { testValid(test_4797_sup,test_4797_sub); }

		private static final SyntacticType test_4798_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4798_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4798() { testValid(test_4798_sup,test_4798_sub); }

		private static final SyntacticType test_4799_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4799_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4799() { testValid(test_4799_sup,test_4799_sub); }

		private static final SyntacticType test_4800_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4800_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4800() { testValid(test_4800_sup,test_4800_sub); }

		private static final SyntacticType test_4801_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4801_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4801() { testValid(test_4801_sup,test_4801_sub); }

		private static final SyntacticType test_4802_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4802_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4802() { testValid(test_4802_sup,test_4802_sub); }

		private static final SyntacticType test_4803_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4803_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4803() { testValid(test_4803_sup,test_4803_sub); }

		private static final SyntacticType test_4804_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4804_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4804() { testValid(test_4804_sup,test_4804_sub); }

		private static final SyntacticType test_4805_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4805_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4805() { testValid(test_4805_sup,test_4805_sub); }

		private static final SyntacticType test_4806_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4806_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4806() { testValid(test_4806_sup,test_4806_sub); }

		private static final SyntacticType test_4807_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4807_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4807() { testValid(test_4807_sup,test_4807_sub); }

		private static final SyntacticType test_4808_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4808_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4808() { testValid(test_4808_sup,test_4808_sub); }

		private static final SyntacticType test_4809_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4809_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4809() { testValid(test_4809_sup,test_4809_sub); }

		private static final SyntacticType test_4810_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4810_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4810() { testValid(test_4810_sup,test_4810_sub); }

		private static final SyntacticType test_4811_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4811_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4811() { testValid(test_4811_sup,test_4811_sub); }

		private static final SyntacticType test_4812_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4812_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4812() { testValid(test_4812_sup,test_4812_sub); }

		private static final SyntacticType test_4813_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4813_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4813() { testValid(test_4813_sup,test_4813_sub); }

		private static final SyntacticType test_4814_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4814_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4814() { testValid(test_4814_sup,test_4814_sub); }

		private static final SyntacticType test_4815_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4815_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4815() { testValid(test_4815_sup,test_4815_sub); }

		private static final SyntacticType test_4816_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4816_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4816() { testValid(test_4816_sup,test_4816_sub); }

		private static final SyntacticType test_4817_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4817_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4817() { testValid(test_4817_sup,test_4817_sub); }

		private static final SyntacticType test_4818_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4818_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4818() { testValid(test_4818_sup,test_4818_sub); }

		private static final SyntacticType test_4819_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4819_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4819() { testValid(test_4819_sup,test_4819_sub); }

		private static final SyntacticType test_4820_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4820_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4820() { testValid(test_4820_sup,test_4820_sub); }

		private static final SyntacticType test_4821_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4821_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4821() { testValid(test_4821_sup,test_4821_sub); }

		private static final SyntacticType test_4822_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4822_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4822() { testValid(test_4822_sup,test_4822_sub); }

		private static final SyntacticType test_4823_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4823_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4823() { testValid(test_4823_sup,test_4823_sub); }

		private static final SyntacticType test_4824_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4824_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4824() { testValid(test_4824_sup,test_4824_sub); }

		private static final SyntacticType test_4825_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4825_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4825() { testValid(test_4825_sup,test_4825_sub); }

		private static final SyntacticType test_4826_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4826_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4826() { testValid(test_4826_sup,test_4826_sub); }

		private static final SyntacticType test_4827_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4827_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4827() { testValid(test_4827_sup,test_4827_sub); }

		private static final SyntacticType test_4828_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4828_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4828() { testValid(test_4828_sup,test_4828_sub); }

		private static final SyntacticType test_4829_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4829_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4829() { testValid(test_4829_sup,test_4829_sub); }

		private static final SyntacticType test_4830_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4830_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4830() { testValid(test_4830_sup,test_4830_sub); }

		private static final SyntacticType test_4831_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4831_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4831() { testValid(test_4831_sup,test_4831_sub); }

		private static final SyntacticType test_4832_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4832_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4832() { testValid(test_4832_sup,test_4832_sub); }

		private static final SyntacticType test_4833_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4833_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4833() { testValid(test_4833_sup,test_4833_sub); }

		private static final SyntacticType test_4834_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4834_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4834() { testValid(test_4834_sup,test_4834_sub); }

		private static final SyntacticType test_4835_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4835_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4835() { testValid(test_4835_sup,test_4835_sub); }

		private static final SyntacticType test_4836_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4836_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4836() { testValid(test_4836_sup,test_4836_sub); }

		private static final SyntacticType test_4837_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4837_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4837() { testValid(test_4837_sup,test_4837_sub); }

		private static final SyntacticType test_4838_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4838_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4838() { testValid(test_4838_sup,test_4838_sub); }

		private static final SyntacticType test_4839_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4839_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4839() { testValid(test_4839_sup,test_4839_sub); }

		private static final SyntacticType test_4840_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4840_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4840() { testValid(test_4840_sup,test_4840_sub); }

		private static final SyntacticType test_4841_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4841_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4841() { testValid(test_4841_sup,test_4841_sub); }

		private static final SyntacticType test_4842_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4842_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4842() { testValid(test_4842_sup,test_4842_sub); }

		private static final SyntacticType test_4843_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4843_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4843() { testValid(test_4843_sup,test_4843_sub); }

		private static final SyntacticType test_4844_sup = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		private static final SyntacticType test_4844_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4844() { testValid(test_4844_sup,test_4844_sub); }

		private static final SyntacticType test_4845_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4845_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4845() { testValid(test_4845_sup,test_4845_sub); }

		private static final SyntacticType test_4846_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4846_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4846() { testValid(test_4846_sup,test_4846_sub); }

		private static final SyntacticType test_4847_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4847_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4847() { testValid(test_4847_sup,test_4847_sub); }

		private static final SyntacticType test_4848_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4848_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4848() { testValid(test_4848_sup,test_4848_sub); }

		private static final SyntacticType test_4849_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4849_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4849() { testValid(test_4849_sup,test_4849_sub); }

		private static final SyntacticType test_4850_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4850_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4850() { testValid(test_4850_sup,test_4850_sub); }

		private static final SyntacticType test_4851_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4851_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4851() { testValid(test_4851_sup,test_4851_sub); }

		private static final SyntacticType test_4852_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4852_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4852() { testValid(test_4852_sup,test_4852_sub); }

		private static final SyntacticType test_4853_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4853_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4853() { testValid(test_4853_sup,test_4853_sub); }

		private static final SyntacticType test_4854_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4854_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4854() { testValid(test_4854_sup,test_4854_sub); }

		private static final SyntacticType test_4855_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4855_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4855() { testValid(test_4855_sup,test_4855_sub); }

		private static final SyntacticType test_4856_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4856_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4856() { testValid(test_4856_sup,test_4856_sub); }

		private static final SyntacticType test_4857_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4857_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4857() { testValid(test_4857_sup,test_4857_sub); }

		private static final SyntacticType test_4858_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4858_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4858() { testValid(test_4858_sup,test_4858_sub); }

		private static final SyntacticType test_4859_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4859_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4859() { testValid(test_4859_sup,test_4859_sub); }

		private static final SyntacticType test_4860_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4860_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4860() { testValid(test_4860_sup,test_4860_sub); }

		private static final SyntacticType test_4861_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4861_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4861() { testValid(test_4861_sup,test_4861_sub); }

		private static final SyntacticType test_4862_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4862_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4862() { testValid(test_4862_sup,test_4862_sub); }

		private static final SyntacticType test_4863_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4863_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4863() { testValid(test_4863_sup,test_4863_sub); }

		private static final SyntacticType test_4864_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4864_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4864() { testValid(test_4864_sup,test_4864_sub); }

		private static final SyntacticType test_4865_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4865_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4865() { testValid(test_4865_sup,test_4865_sub); }

		private static final SyntacticType test_4866_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4866_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4866() { testValid(test_4866_sup,test_4866_sub); }

		private static final SyntacticType test_4867_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4867_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4867() { testValid(test_4867_sup,test_4867_sub); }

		private static final SyntacticType test_4868_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4868_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4868() { testValid(test_4868_sup,test_4868_sub); }

		private static final SyntacticType test_4869_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4869_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4869() { testValid(test_4869_sup,test_4869_sub); }

		private static final SyntacticType test_4870_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4870_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4870() { testValid(test_4870_sup,test_4870_sub); }

		private static final SyntacticType test_4871_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4871_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4871() { testValid(test_4871_sup,test_4871_sub); }

		private static final SyntacticType test_4872_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4872_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4872() { testValid(test_4872_sup,test_4872_sub); }

		private static final SyntacticType test_4873_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4873_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4873() { testValid(test_4873_sup,test_4873_sub); }

		private static final SyntacticType test_4874_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4874_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4874() { testValid(test_4874_sup,test_4874_sub); }

		private static final SyntacticType test_4875_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4875_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4875() { testValid(test_4875_sup,test_4875_sub); }

		private static final SyntacticType test_4876_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4876_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4876() { testValid(test_4876_sup,test_4876_sub); }

		private static final SyntacticType test_4877_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4877_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4877() { testValid(test_4877_sup,test_4877_sub); }

		private static final SyntacticType test_4878_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4878_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4878() { testValid(test_4878_sup,test_4878_sub); }

		private static final SyntacticType test_4879_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4879_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4879() { testValid(test_4879_sup,test_4879_sub); }

		private static final SyntacticType test_4880_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4880_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4880() { testValid(test_4880_sup,test_4880_sub); }

		private static final SyntacticType test_4881_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4881_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4881() { testValid(test_4881_sup,test_4881_sub); }

		private static final SyntacticType test_4882_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4882_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4882() { testValid(test_4882_sup,test_4882_sub); }

		private static final SyntacticType test_4883_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4883_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4883() { testValid(test_4883_sup,test_4883_sub); }

		private static final SyntacticType test_4884_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4884_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4884() { testValid(test_4884_sup,test_4884_sub); }

		private static final SyntacticType test_4885_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4885_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4885() { testValid(test_4885_sup,test_4885_sub); }

		private static final SyntacticType test_4886_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4886_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4886() { testValid(test_4886_sup,test_4886_sub); }

		private static final SyntacticType test_4887_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4887_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4887() { testValid(test_4887_sup,test_4887_sub); }

		private static final SyntacticType test_4888_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4888_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4888() { testValid(test_4888_sup,test_4888_sub); }

		private static final SyntacticType test_4889_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4889_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4889() { testInvalid(test_4889_sup,test_4889_sub); }

		private static final SyntacticType test_4890_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4890_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4890() { testValid(test_4890_sup,test_4890_sub); }

		private static final SyntacticType test_4891_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4891_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4891() { testInvalid(test_4891_sup,test_4891_sub); }

		private static final SyntacticType test_4892_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4892_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4892() { testValid(test_4892_sup,test_4892_sub); }

		private static final SyntacticType test_4893_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4893_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4893() { testInvalid(test_4893_sup,test_4893_sub); }

		private static final SyntacticType test_4894_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4894_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4894() { testValid(test_4894_sup,test_4894_sub); }

		private static final SyntacticType test_4895_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4895_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4895() { testInvalid(test_4895_sup,test_4895_sub); }

		private static final SyntacticType test_4896_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4896_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4896() { testValid(test_4896_sup,test_4896_sub); }

		private static final SyntacticType test_4897_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4897_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4897() { testValid(test_4897_sup,test_4897_sub); }

		private static final SyntacticType test_4898_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4898_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4898() { testValid(test_4898_sup,test_4898_sub); }

		private static final SyntacticType test_4899_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4899_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4899() { testInvalid(test_4899_sup,test_4899_sub); }

		private static final SyntacticType test_4900_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4900_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4900() { testInvalid(test_4900_sup,test_4900_sub); }

		private static final SyntacticType test_4901_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4901_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4901() { testValid(test_4901_sup,test_4901_sub); }

		private static final SyntacticType test_4902_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4902_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4902() { testInvalid(test_4902_sup,test_4902_sub); }

		private static final SyntacticType test_4903_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4903_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4903() { testInvalid(test_4903_sup,test_4903_sub); }

		private static final SyntacticType test_4904_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4904_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4904() { testInvalid(test_4904_sup,test_4904_sub); }

		private static final SyntacticType test_4905_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4905_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_4905() { testInvalid(test_4905_sup,test_4905_sub); }

		private static final SyntacticType test_4906_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4906_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_4906() { testInvalid(test_4906_sup,test_4906_sub); }

		private static final SyntacticType test_4907_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4907_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_4907() { testInvalid(test_4907_sup,test_4907_sub); }

		private static final SyntacticType test_4908_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4908_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_4908() { testInvalid(test_4908_sup,test_4908_sub); }

		private static final SyntacticType test_4909_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4909_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_4909() { testInvalid(test_4909_sup,test_4909_sub); }

		private static final SyntacticType test_4910_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4910_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_4910() { testInvalid(test_4910_sup,test_4910_sub); }

		private static final SyntacticType test_4911_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4911_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_4911() { testInvalid(test_4911_sup,test_4911_sub); }

		private static final SyntacticType test_4912_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4912_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_4912() { testInvalid(test_4912_sup,test_4912_sub); }

		private static final SyntacticType test_4913_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4913_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_4913() { testValid(test_4913_sup,test_4913_sub); }

		private static final SyntacticType test_4914_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4914_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_4914() { testInvalid(test_4914_sup,test_4914_sub); }

		private static final SyntacticType test_4915_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4915_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_4915() { testInvalid(test_4915_sup,test_4915_sub); }

		private static final SyntacticType test_4916_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4916_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_4916() { testInvalid(test_4916_sup,test_4916_sub); }

		private static final SyntacticType test_4917_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4917_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_4917() { testInvalid(test_4917_sup,test_4917_sub); }

		private static final SyntacticType test_4918_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4918_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_4918() { testInvalid(test_4918_sup,test_4918_sub); }

		private static final SyntacticType test_4919_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4919_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_4919() { testValid(test_4919_sup,test_4919_sub); }

		private static final SyntacticType test_4920_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4920_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_4920() { testInvalid(test_4920_sup,test_4920_sub); }

		private static final SyntacticType test_4921_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4921_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_4921() { testInvalid(test_4921_sup,test_4921_sub); }

		private static final SyntacticType test_4922_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4922_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_4922() { testInvalid(test_4922_sup,test_4922_sub); }

		private static final SyntacticType test_4923_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4923_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_4923() { testInvalid(test_4923_sup,test_4923_sub); }

		private static final SyntacticType test_4924_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4924_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_4924() { testInvalid(test_4924_sup,test_4924_sub); }

		private static final SyntacticType test_4925_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4925_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_4925() { testValid(test_4925_sup,test_4925_sub); }

		private static final SyntacticType test_4926_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4926_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_4926() { testValid(test_4926_sup,test_4926_sub); }

		private static final SyntacticType test_4927_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4927_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_4927() { testValid(test_4927_sup,test_4927_sub); }

		private static final SyntacticType test_4928_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4928_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_4928() { testValid(test_4928_sup,test_4928_sub); }

		private static final SyntacticType test_4929_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4929_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_4929() { testValid(test_4929_sup,test_4929_sub); }

		private static final SyntacticType test_4930_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4930_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_4930() { testInvalid(test_4930_sup,test_4930_sub); }

		private static final SyntacticType test_4931_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4931_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_4931() { testValid(test_4931_sup,test_4931_sub); }

		private static final SyntacticType test_4932_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4932_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_4932() { testValid(test_4932_sup,test_4932_sub); }

		private static final SyntacticType test_4933_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4933_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_4933() { testInvalid(test_4933_sup,test_4933_sub); }

		private static final SyntacticType test_4934_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4934_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_4934() { testInvalid(test_4934_sup,test_4934_sub); }

		private static final SyntacticType test_4935_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4935_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_4935() { testInvalid(test_4935_sup,test_4935_sub); }

		private static final SyntacticType test_4936_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4936_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_4936() { testInvalid(test_4936_sup,test_4936_sub); }

		private static final SyntacticType test_4937_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4937_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_4937() { testInvalid(test_4937_sup,test_4937_sub); }

		private static final SyntacticType test_4938_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4938_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_4938() { testInvalid(test_4938_sup,test_4938_sub); }

		private static final SyntacticType test_4939_sup = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		private static final SyntacticType test_4939_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_4939() { testInvalid(test_4939_sup,test_4939_sub); }

		private static final SyntacticType test_4940_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4940_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_4940() { testInvalid(test_4940_sup,test_4940_sub); }

		private static final SyntacticType test_4941_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4941_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_4941() { testInvalid(test_4941_sup,test_4941_sub); }

		private static final SyntacticType test_4942_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4942_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_4942() { testInvalid(test_4942_sup,test_4942_sub); }

		private static final SyntacticType test_4943_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4943_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_4943() { testInvalid(test_4943_sup,test_4943_sub); }

		private static final SyntacticType test_4944_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4944_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_4944() { testInvalid(test_4944_sup,test_4944_sub); }

		private static final SyntacticType test_4945_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4945_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_4945() { testInvalid(test_4945_sup,test_4945_sub); }

		private static final SyntacticType test_4946_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4946_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_4946() { testInvalid(test_4946_sup,test_4946_sub); }

		private static final SyntacticType test_4947_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4947_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_4947() { testInvalid(test_4947_sup,test_4947_sub); }

		private static final SyntacticType test_4948_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4948_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_4948() { testInvalid(test_4948_sup,test_4948_sub); }

		private static final SyntacticType test_4949_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4949_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_4949() { testInvalid(test_4949_sup,test_4949_sub); }

		private static final SyntacticType test_4950_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4950_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_4950() { testInvalid(test_4950_sup,test_4950_sub); }

		private static final SyntacticType test_4951_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4951_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_4951() { testInvalid(test_4951_sup,test_4951_sub); }

		private static final SyntacticType test_4952_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4952_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_4952() { testInvalid(test_4952_sup,test_4952_sub); }

		private static final SyntacticType test_4953_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4953_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_4953() { testInvalid(test_4953_sup,test_4953_sub); }

		private static final SyntacticType test_4954_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4954_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_4954() { testInvalid(test_4954_sup,test_4954_sub); }

		private static final SyntacticType test_4955_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4955_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_4955() { testInvalid(test_4955_sup,test_4955_sub); }

		private static final SyntacticType test_4956_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4956_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_4956() { testInvalid(test_4956_sup,test_4956_sub); }

		private static final SyntacticType test_4957_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4957_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_4957() { testInvalid(test_4957_sup,test_4957_sub); }

		private static final SyntacticType test_4958_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4958_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_4958() { testValid(test_4958_sup,test_4958_sub); }

		private static final SyntacticType test_4959_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4959_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_4959() { testInvalid(test_4959_sup,test_4959_sub); }

		private static final SyntacticType test_4960_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4960_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_4960() { testInvalid(test_4960_sup,test_4960_sub); }

		private static final SyntacticType test_4961_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4961_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_4961() { testInvalid(test_4961_sup,test_4961_sub); }

		private static final SyntacticType test_4962_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4962_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_4962() { testInvalid(test_4962_sup,test_4962_sub); }

		private static final SyntacticType test_4963_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4963_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_4963() { testInvalid(test_4963_sup,test_4963_sub); }

		private static final SyntacticType test_4964_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4964_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_4964() { testInvalid(test_4964_sup,test_4964_sub); }

		private static final SyntacticType test_4965_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4965_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_4965() { testInvalid(test_4965_sup,test_4965_sub); }

		private static final SyntacticType test_4966_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4966_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_4966() { testInvalid(test_4966_sup,test_4966_sub); }

		private static final SyntacticType test_4967_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4967_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_4967() { testInvalid(test_4967_sup,test_4967_sub); }

		private static final SyntacticType test_4968_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4968_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_4968() { testInvalid(test_4968_sup,test_4968_sub); }

		private static final SyntacticType test_4969_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4969_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_4969() { testInvalid(test_4969_sup,test_4969_sub); }

		private static final SyntacticType test_4970_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4970_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_4970() { testInvalid(test_4970_sup,test_4970_sub); }

		private static final SyntacticType test_4971_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4971_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_4971() { testInvalid(test_4971_sup,test_4971_sub); }

		private static final SyntacticType test_4972_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4972_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_4972() { testInvalid(test_4972_sup,test_4972_sub); }

		private static final SyntacticType test_4973_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4973_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_4973() { testInvalid(test_4973_sup,test_4973_sub); }

		private static final SyntacticType test_4974_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4974_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_4974() { testInvalid(test_4974_sup,test_4974_sub); }

		private static final SyntacticType test_4975_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4975_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_4975() { testInvalid(test_4975_sup,test_4975_sub); }

		private static final SyntacticType test_4976_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4976_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_4976() { testInvalid(test_4976_sup,test_4976_sub); }

		private static final SyntacticType test_4977_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4977_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_4977() { testValid(test_4977_sup,test_4977_sub); }

		private static final SyntacticType test_4978_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4978_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_4978() { testInvalid(test_4978_sup,test_4978_sub); }

		private static final SyntacticType test_4979_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4979_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_4979() { testInvalid(test_4979_sup,test_4979_sub); }

		private static final SyntacticType test_4980_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4980_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_4980() { testInvalid(test_4980_sup,test_4980_sub); }

		private static final SyntacticType test_4981_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4981_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_4981() { testInvalid(test_4981_sup,test_4981_sub); }

		private static final SyntacticType test_4982_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4982_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_4982() { testInvalid(test_4982_sup,test_4982_sub); }

		private static final SyntacticType test_4983_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4983_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_4983() { testInvalid(test_4983_sup,test_4983_sub); }

		private static final SyntacticType test_4984_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4984_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_4984() { testInvalid(test_4984_sup,test_4984_sub); }

		private static final SyntacticType test_4985_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4985_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_4985() { testInvalid(test_4985_sup,test_4985_sub); }

		private static final SyntacticType test_4986_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4986_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_4986() { testInvalid(test_4986_sup,test_4986_sub); }

		private static final SyntacticType test_4987_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4987_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_4987() { testInvalid(test_4987_sup,test_4987_sub); }

		private static final SyntacticType test_4988_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4988_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_4988() { testInvalid(test_4988_sup,test_4988_sub); }

		private static final SyntacticType test_4989_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4989_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_4989() { testInvalid(test_4989_sup,test_4989_sub); }

		private static final SyntacticType test_4990_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4990_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_4990() { testInvalid(test_4990_sup,test_4990_sub); }

		private static final SyntacticType test_4991_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4991_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_4991() { testInvalid(test_4991_sup,test_4991_sub); }

		private static final SyntacticType test_4992_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4992_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_4992() { testValid(test_4992_sup,test_4992_sub); }

		private static final SyntacticType test_4993_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4993_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_4993() { testInvalid(test_4993_sup,test_4993_sub); }

		private static final SyntacticType test_4994_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4994_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_4994() { testInvalid(test_4994_sup,test_4994_sub); }

		private static final SyntacticType test_4995_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4995_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_4995() { testInvalid(test_4995_sup,test_4995_sub); }

		private static final SyntacticType test_4996_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4996_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_4996() { testInvalid(test_4996_sup,test_4996_sub); }

		private static final SyntacticType test_4997_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4997_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_4997() { testInvalid(test_4997_sup,test_4997_sub); }

		private static final SyntacticType test_4998_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4998_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_4998() { testInvalid(test_4998_sup,test_4998_sub); }

		private static final SyntacticType test_4999_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_4999_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_4999() { testInvalid(test_4999_sup,test_4999_sub); }

	}
	public static class Part_5 {
		private static final SyntacticType test_5000_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5000_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5000() { testInvalid(test_5000_sup,test_5000_sub); }

		private static final SyntacticType test_5001_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5001_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5001() { testInvalid(test_5001_sup,test_5001_sub); }

		private static final SyntacticType test_5002_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5002_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5002() { testInvalid(test_5002_sup,test_5002_sub); }

		private static final SyntacticType test_5003_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5003_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5003() { testInvalid(test_5003_sup,test_5003_sub); }

		private static final SyntacticType test_5004_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5004_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5004() { testInvalid(test_5004_sup,test_5004_sub); }

		private static final SyntacticType test_5005_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5005_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5005() { testInvalid(test_5005_sup,test_5005_sub); }

		private static final SyntacticType test_5006_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5006_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5006() { testInvalid(test_5006_sup,test_5006_sub); }

		private static final SyntacticType test_5007_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5007_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5007() { testInvalid(test_5007_sup,test_5007_sub); }

		private static final SyntacticType test_5008_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5008_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5008() { testInvalid(test_5008_sup,test_5008_sub); }

		private static final SyntacticType test_5009_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5009_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5009() { testInvalid(test_5009_sup,test_5009_sub); }

		private static final SyntacticType test_5010_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5010_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5010() { testInvalid(test_5010_sup,test_5010_sub); }

		private static final SyntacticType test_5011_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5011_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5011() { testInvalid(test_5011_sup,test_5011_sub); }

		private static final SyntacticType test_5012_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5012_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5012() { testInvalid(test_5012_sup,test_5012_sub); }

		private static final SyntacticType test_5013_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5013_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5013() { testInvalid(test_5013_sup,test_5013_sub); }

		private static final SyntacticType test_5014_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5014_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5014() { testInvalid(test_5014_sup,test_5014_sub); }

		private static final SyntacticType test_5015_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5015_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5015() { testInvalid(test_5015_sup,test_5015_sub); }

		private static final SyntacticType test_5016_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5016_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5016() { testInvalid(test_5016_sup,test_5016_sub); }

		private static final SyntacticType test_5017_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5017_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5017() { testInvalid(test_5017_sup,test_5017_sub); }

		private static final SyntacticType test_5018_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5018_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5018() { testInvalid(test_5018_sup,test_5018_sub); }

		private static final SyntacticType test_5019_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5019_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5019() { testInvalid(test_5019_sup,test_5019_sub); }

		private static final SyntacticType test_5020_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5020_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5020() { testInvalid(test_5020_sup,test_5020_sub); }

		private static final SyntacticType test_5021_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5021_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5021() { testInvalid(test_5021_sup,test_5021_sub); }

		private static final SyntacticType test_5022_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5022_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5022() { testInvalid(test_5022_sup,test_5022_sub); }

		private static final SyntacticType test_5023_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5023_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5023() { testInvalid(test_5023_sup,test_5023_sub); }

		private static final SyntacticType test_5024_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5024_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5024() { testInvalid(test_5024_sup,test_5024_sub); }

		private static final SyntacticType test_5025_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5025_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5025() { testInvalid(test_5025_sup,test_5025_sub); }

		private static final SyntacticType test_5026_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5026_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5026() { testInvalid(test_5026_sup,test_5026_sub); }

		private static final SyntacticType test_5027_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5027_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5027() { testInvalid(test_5027_sup,test_5027_sub); }

		private static final SyntacticType test_5028_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5028_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5028() { testInvalid(test_5028_sup,test_5028_sub); }

		private static final SyntacticType test_5029_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5029_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5029() { testInvalid(test_5029_sup,test_5029_sub); }

		private static final SyntacticType test_5030_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5030_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5030() { testInvalid(test_5030_sup,test_5030_sub); }

		private static final SyntacticType test_5031_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5031_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5031() { testInvalid(test_5031_sup,test_5031_sub); }

		private static final SyntacticType test_5032_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5032_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5032() { testInvalid(test_5032_sup,test_5032_sub); }

		private static final SyntacticType test_5033_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5033_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5033() { testInvalid(test_5033_sup,test_5033_sub); }

		private static final SyntacticType test_5034_sup = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		private static final SyntacticType test_5034_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5034() { testInvalid(test_5034_sup,test_5034_sub); }

		private static final SyntacticType test_5035_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5035_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5035() { testInvalid(test_5035_sup,test_5035_sub); }

		private static final SyntacticType test_5036_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5036_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5036() { testInvalid(test_5036_sup,test_5036_sub); }

		private static final SyntacticType test_5037_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5037_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5037() { testInvalid(test_5037_sup,test_5037_sub); }

		private static final SyntacticType test_5038_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5038_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5038() { testValid(test_5038_sup,test_5038_sub); }

		private static final SyntacticType test_5039_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5039_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5039() { testValid(test_5039_sup,test_5039_sub); }

		private static final SyntacticType test_5040_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5040_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5040() { testInvalid(test_5040_sup,test_5040_sub); }

		private static final SyntacticType test_5041_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5041_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5041() { testInvalid(test_5041_sup,test_5041_sub); }

		private static final SyntacticType test_5042_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5042_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5042() { testValid(test_5042_sup,test_5042_sub); }

		private static final SyntacticType test_5043_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5043_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5043() { testInvalid(test_5043_sup,test_5043_sub); }

		private static final SyntacticType test_5044_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5044_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5044() { testInvalid(test_5044_sup,test_5044_sub); }

		private static final SyntacticType test_5045_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5045_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5045() { testInvalid(test_5045_sup,test_5045_sub); }

		private static final SyntacticType test_5046_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5046_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5046() { testInvalid(test_5046_sup,test_5046_sub); }

		private static final SyntacticType test_5047_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5047_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5047() { testInvalid(test_5047_sup,test_5047_sub); }

		private static final SyntacticType test_5048_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5048_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5048() { testInvalid(test_5048_sup,test_5048_sub); }

		private static final SyntacticType test_5049_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5049_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5049() { testInvalid(test_5049_sup,test_5049_sub); }

		private static final SyntacticType test_5050_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5050_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5050() { testValid(test_5050_sup,test_5050_sub); }

		private static final SyntacticType test_5051_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5051_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5051() { testInvalid(test_5051_sup,test_5051_sub); }

		private static final SyntacticType test_5052_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5052_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5052() { testInvalid(test_5052_sup,test_5052_sub); }

		private static final SyntacticType test_5053_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5053_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5053() { testValid(test_5053_sup,test_5053_sub); }

		private static final SyntacticType test_5054_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5054_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5054() { testValid(test_5054_sup,test_5054_sub); }

		private static final SyntacticType test_5055_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5055_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5055() { testValid(test_5055_sup,test_5055_sub); }

		private static final SyntacticType test_5056_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5056_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5056() { testInvalid(test_5056_sup,test_5056_sub); }

		private static final SyntacticType test_5057_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5057_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5057() { testInvalid(test_5057_sup,test_5057_sub); }

		private static final SyntacticType test_5058_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5058_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5058() { testInvalid(test_5058_sup,test_5058_sub); }

		private static final SyntacticType test_5059_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5059_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5059() { testInvalid(test_5059_sup,test_5059_sub); }

		private static final SyntacticType test_5060_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5060_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5060() { testInvalid(test_5060_sup,test_5060_sub); }

		private static final SyntacticType test_5061_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5061_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5061() { testInvalid(test_5061_sup,test_5061_sub); }

		private static final SyntacticType test_5062_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5062_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5062() { testInvalid(test_5062_sup,test_5062_sub); }

		private static final SyntacticType test_5063_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5063_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5063() { testInvalid(test_5063_sup,test_5063_sub); }

		private static final SyntacticType test_5064_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5064_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5064() { testInvalid(test_5064_sup,test_5064_sub); }

		private static final SyntacticType test_5065_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5065_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5065() { testValid(test_5065_sup,test_5065_sub); }

		private static final SyntacticType test_5066_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5066_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5066() { testValid(test_5066_sup,test_5066_sub); }

		private static final SyntacticType test_5067_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5067_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5067() { testValid(test_5067_sup,test_5067_sub); }

		private static final SyntacticType test_5068_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5068_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5068() { testInvalid(test_5068_sup,test_5068_sub); }

		private static final SyntacticType test_5069_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5069_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5069() { testInvalid(test_5069_sup,test_5069_sub); }

		private static final SyntacticType test_5070_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5070_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5070() { testInvalid(test_5070_sup,test_5070_sub); }

		private static final SyntacticType test_5071_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5071_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5071() { testInvalid(test_5071_sup,test_5071_sub); }

		private static final SyntacticType test_5072_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5072_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5072() { testInvalid(test_5072_sup,test_5072_sub); }

		private static final SyntacticType test_5073_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5073_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5073() { testInvalid(test_5073_sup,test_5073_sub); }

		private static final SyntacticType test_5074_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5074_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5074() { testInvalid(test_5074_sup,test_5074_sub); }

		private static final SyntacticType test_5075_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5075_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5075() { testInvalid(test_5075_sup,test_5075_sub); }

		private static final SyntacticType test_5076_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5076_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5076() { testInvalid(test_5076_sup,test_5076_sub); }

		private static final SyntacticType test_5077_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5077_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5077() { testInvalid(test_5077_sup,test_5077_sub); }

		private static final SyntacticType test_5078_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5078_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5078() { testInvalid(test_5078_sup,test_5078_sub); }

		private static final SyntacticType test_5079_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5079_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5079() { testInvalid(test_5079_sup,test_5079_sub); }

		private static final SyntacticType test_5080_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5080_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5080() { testValid(test_5080_sup,test_5080_sub); }

		private static final SyntacticType test_5081_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5081_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5081() { testInvalid(test_5081_sup,test_5081_sub); }

		private static final SyntacticType test_5082_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5082_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5082() { testInvalid(test_5082_sup,test_5082_sub); }

		private static final SyntacticType test_5083_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5083_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5083() { testInvalid(test_5083_sup,test_5083_sub); }

		private static final SyntacticType test_5084_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5084_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5084() { testInvalid(test_5084_sup,test_5084_sub); }

		private static final SyntacticType test_5085_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5085_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5085() { testInvalid(test_5085_sup,test_5085_sub); }

		private static final SyntacticType test_5086_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5086_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5086() { testInvalid(test_5086_sup,test_5086_sub); }

		private static final SyntacticType test_5087_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5087_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5087() { testInvalid(test_5087_sup,test_5087_sub); }

		private static final SyntacticType test_5088_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5088_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5088() { testValid(test_5088_sup,test_5088_sub); }

		private static final SyntacticType test_5089_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5089_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5089() { testInvalid(test_5089_sup,test_5089_sub); }

		private static final SyntacticType test_5090_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5090_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5090() { testInvalid(test_5090_sup,test_5090_sub); }

		private static final SyntacticType test_5091_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5091_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5091() { testInvalid(test_5091_sup,test_5091_sub); }

		private static final SyntacticType test_5092_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5092_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5092() { testInvalid(test_5092_sup,test_5092_sub); }

		private static final SyntacticType test_5093_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5093_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5093() { testInvalid(test_5093_sup,test_5093_sub); }

		private static final SyntacticType test_5094_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5094_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5094() { testInvalid(test_5094_sup,test_5094_sub); }

		private static final SyntacticType test_5095_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5095_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5095() { testInvalid(test_5095_sup,test_5095_sub); }

		private static final SyntacticType test_5096_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5096_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5096() { testInvalid(test_5096_sup,test_5096_sub); }

		private static final SyntacticType test_5097_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5097_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5097() { testInvalid(test_5097_sup,test_5097_sub); }

		private static final SyntacticType test_5098_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5098_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5098() { testInvalid(test_5098_sup,test_5098_sub); }

		private static final SyntacticType test_5099_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5099_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5099() { testInvalid(test_5099_sup,test_5099_sub); }

		private static final SyntacticType test_5100_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5100_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5100() { testInvalid(test_5100_sup,test_5100_sub); }

		private static final SyntacticType test_5101_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5101_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5101() { testInvalid(test_5101_sup,test_5101_sub); }

		private static final SyntacticType test_5102_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5102_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5102() { testInvalid(test_5102_sup,test_5102_sub); }

		private static final SyntacticType test_5103_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5103_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5103() { testValid(test_5103_sup,test_5103_sub); }

		private static final SyntacticType test_5104_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5104_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5104() { testInvalid(test_5104_sup,test_5104_sub); }

		private static final SyntacticType test_5105_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5105_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5105() { testInvalid(test_5105_sup,test_5105_sub); }

		private static final SyntacticType test_5106_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5106_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5106() { testInvalid(test_5106_sup,test_5106_sub); }

		private static final SyntacticType test_5107_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5107_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5107() { testInvalid(test_5107_sup,test_5107_sub); }

		private static final SyntacticType test_5108_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5108_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5108() { testInvalid(test_5108_sup,test_5108_sub); }

		private static final SyntacticType test_5109_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5109_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5109() { testInvalid(test_5109_sup,test_5109_sub); }

		private static final SyntacticType test_5110_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5110_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5110() { testInvalid(test_5110_sup,test_5110_sub); }

		private static final SyntacticType test_5111_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5111_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5111() { testInvalid(test_5111_sup,test_5111_sub); }

		private static final SyntacticType test_5112_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5112_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5112() { testInvalid(test_5112_sup,test_5112_sub); }

		private static final SyntacticType test_5113_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5113_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5113() { testInvalid(test_5113_sup,test_5113_sub); }

		private static final SyntacticType test_5114_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5114_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5114() { testInvalid(test_5114_sup,test_5114_sub); }

		private static final SyntacticType test_5115_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5115_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5115() { testInvalid(test_5115_sup,test_5115_sub); }

		private static final SyntacticType test_5116_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5116_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5116() { testInvalid(test_5116_sup,test_5116_sub); }

		private static final SyntacticType test_5117_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5117_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5117() { testInvalid(test_5117_sup,test_5117_sub); }

		private static final SyntacticType test_5118_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5118_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5118() { testValid(test_5118_sup,test_5118_sub); }

		private static final SyntacticType test_5119_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5119_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5119() { testInvalid(test_5119_sup,test_5119_sub); }

		private static final SyntacticType test_5120_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5120_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5120() { testInvalid(test_5120_sup,test_5120_sub); }

		private static final SyntacticType test_5121_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5121_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5121() { testInvalid(test_5121_sup,test_5121_sub); }

		private static final SyntacticType test_5122_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5122_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5122() { testValid(test_5122_sup,test_5122_sub); }

		private static final SyntacticType test_5123_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5123_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5123() { testInvalid(test_5123_sup,test_5123_sub); }

		private static final SyntacticType test_5124_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5124_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5124() { testInvalid(test_5124_sup,test_5124_sub); }

		private static final SyntacticType test_5125_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5125_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5125() { testInvalid(test_5125_sup,test_5125_sub); }

		private static final SyntacticType test_5126_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5126_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5126() { testInvalid(test_5126_sup,test_5126_sub); }

		private static final SyntacticType test_5127_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5127_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5127() { testInvalid(test_5127_sup,test_5127_sub); }

		private static final SyntacticType test_5128_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5128_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5128() { testInvalid(test_5128_sup,test_5128_sub); }

		private static final SyntacticType test_5129_sup = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		private static final SyntacticType test_5129_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5129() { testInvalid(test_5129_sup,test_5129_sub); }

		private static final SyntacticType test_5130_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5130_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5130() { testValid(test_5130_sup,test_5130_sub); }

		private static final SyntacticType test_5131_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5131_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5131() { testValid(test_5131_sup,test_5131_sub); }

		private static final SyntacticType test_5132_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5132_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5132() { testValid(test_5132_sup,test_5132_sub); }

		private static final SyntacticType test_5133_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5133_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5133() { testValid(test_5133_sup,test_5133_sub); }

		private static final SyntacticType test_5134_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5134_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5134() { testValid(test_5134_sup,test_5134_sub); }

		private static final SyntacticType test_5135_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5135_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5135() { testValid(test_5135_sup,test_5135_sub); }

		private static final SyntacticType test_5136_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5136_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5136() { testValid(test_5136_sup,test_5136_sub); }

		private static final SyntacticType test_5137_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5137_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5137() { testValid(test_5137_sup,test_5137_sub); }

		private static final SyntacticType test_5138_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5138_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5138() { testValid(test_5138_sup,test_5138_sub); }

		private static final SyntacticType test_5139_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5139_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5139() { testValid(test_5139_sup,test_5139_sub); }

		private static final SyntacticType test_5140_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5140_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5140() { testValid(test_5140_sup,test_5140_sub); }

		private static final SyntacticType test_5141_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5141_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5141() { testValid(test_5141_sup,test_5141_sub); }

		private static final SyntacticType test_5142_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5142_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5142() { testValid(test_5142_sup,test_5142_sub); }

		private static final SyntacticType test_5143_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5143_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5143() { testValid(test_5143_sup,test_5143_sub); }

		private static final SyntacticType test_5144_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5144_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5144() { testValid(test_5144_sup,test_5144_sub); }

		private static final SyntacticType test_5145_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5145_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5145() { testValid(test_5145_sup,test_5145_sub); }

		private static final SyntacticType test_5146_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5146_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5146() { testValid(test_5146_sup,test_5146_sub); }

		private static final SyntacticType test_5147_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5147_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5147() { testValid(test_5147_sup,test_5147_sub); }

		private static final SyntacticType test_5148_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5148_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5148() { testValid(test_5148_sup,test_5148_sub); }

		private static final SyntacticType test_5149_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5149_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5149() { testValid(test_5149_sup,test_5149_sub); }

		private static final SyntacticType test_5150_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5150_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5150() { testValid(test_5150_sup,test_5150_sub); }

		private static final SyntacticType test_5151_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5151_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5151() { testValid(test_5151_sup,test_5151_sub); }

		private static final SyntacticType test_5152_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5152_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5152() { testValid(test_5152_sup,test_5152_sub); }

		private static final SyntacticType test_5153_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5153_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5153() { testValid(test_5153_sup,test_5153_sub); }

		private static final SyntacticType test_5154_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5154_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5154() { testValid(test_5154_sup,test_5154_sub); }

		private static final SyntacticType test_5155_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5155_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5155() { testValid(test_5155_sup,test_5155_sub); }

		private static final SyntacticType test_5156_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5156_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5156() { testValid(test_5156_sup,test_5156_sub); }

		private static final SyntacticType test_5157_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5157_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5157() { testValid(test_5157_sup,test_5157_sub); }

		private static final SyntacticType test_5158_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5158_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5158() { testValid(test_5158_sup,test_5158_sub); }

		private static final SyntacticType test_5159_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5159_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5159() { testValid(test_5159_sup,test_5159_sub); }

		private static final SyntacticType test_5160_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5160_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5160() { testValid(test_5160_sup,test_5160_sub); }

		private static final SyntacticType test_5161_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5161_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5161() { testValid(test_5161_sup,test_5161_sub); }

		private static final SyntacticType test_5162_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5162_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5162() { testValid(test_5162_sup,test_5162_sub); }

		private static final SyntacticType test_5163_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5163_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5163() { testValid(test_5163_sup,test_5163_sub); }

		private static final SyntacticType test_5164_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5164_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5164() { testValid(test_5164_sup,test_5164_sub); }

		private static final SyntacticType test_5165_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5165_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5165() { testValid(test_5165_sup,test_5165_sub); }

		private static final SyntacticType test_5166_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5166_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5166() { testValid(test_5166_sup,test_5166_sub); }

		private static final SyntacticType test_5167_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5167_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5167() { testValid(test_5167_sup,test_5167_sub); }

		private static final SyntacticType test_5168_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5168_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5168() { testValid(test_5168_sup,test_5168_sub); }

		private static final SyntacticType test_5169_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5169_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5169() { testValid(test_5169_sup,test_5169_sub); }

		private static final SyntacticType test_5170_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5170_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5170() { testValid(test_5170_sup,test_5170_sub); }

		private static final SyntacticType test_5171_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5171_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5171() { testValid(test_5171_sup,test_5171_sub); }

		private static final SyntacticType test_5172_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5172_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5172() { testValid(test_5172_sup,test_5172_sub); }

		private static final SyntacticType test_5173_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5173_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5173() { testValid(test_5173_sup,test_5173_sub); }

		private static final SyntacticType test_5174_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5174_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5174() { testValid(test_5174_sup,test_5174_sub); }

		private static final SyntacticType test_5175_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5175_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5175() { testValid(test_5175_sup,test_5175_sub); }

		private static final SyntacticType test_5176_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5176_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5176() { testValid(test_5176_sup,test_5176_sub); }

		private static final SyntacticType test_5177_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5177_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5177() { testValid(test_5177_sup,test_5177_sub); }

		private static final SyntacticType test_5178_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5178_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5178() { testValid(test_5178_sup,test_5178_sub); }

		private static final SyntacticType test_5179_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5179_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5179() { testValid(test_5179_sup,test_5179_sub); }

		private static final SyntacticType test_5180_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5180_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5180() { testValid(test_5180_sup,test_5180_sub); }

		private static final SyntacticType test_5181_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5181_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5181() { testValid(test_5181_sup,test_5181_sub); }

		private static final SyntacticType test_5182_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5182_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5182() { testValid(test_5182_sup,test_5182_sub); }

		private static final SyntacticType test_5183_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5183_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5183() { testValid(test_5183_sup,test_5183_sub); }

		private static final SyntacticType test_5184_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5184_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5184() { testValid(test_5184_sup,test_5184_sub); }

		private static final SyntacticType test_5185_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5185_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5185() { testValid(test_5185_sup,test_5185_sub); }

		private static final SyntacticType test_5186_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5186_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5186() { testValid(test_5186_sup,test_5186_sub); }

		private static final SyntacticType test_5187_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5187_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5187() { testValid(test_5187_sup,test_5187_sub); }

		private static final SyntacticType test_5188_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5188_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5188() { testValid(test_5188_sup,test_5188_sub); }

		private static final SyntacticType test_5189_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5189_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5189() { testValid(test_5189_sup,test_5189_sub); }

		private static final SyntacticType test_5190_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5190_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5190() { testValid(test_5190_sup,test_5190_sub); }

		private static final SyntacticType test_5191_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5191_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5191() { testValid(test_5191_sup,test_5191_sub); }

		private static final SyntacticType test_5192_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5192_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5192() { testValid(test_5192_sup,test_5192_sub); }

		private static final SyntacticType test_5193_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5193_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5193() { testValid(test_5193_sup,test_5193_sub); }

		private static final SyntacticType test_5194_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5194_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5194() { testValid(test_5194_sup,test_5194_sub); }

		private static final SyntacticType test_5195_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5195_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5195() { testValid(test_5195_sup,test_5195_sub); }

		private static final SyntacticType test_5196_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5196_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5196() { testValid(test_5196_sup,test_5196_sub); }

		private static final SyntacticType test_5197_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5197_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5197() { testValid(test_5197_sup,test_5197_sub); }

		private static final SyntacticType test_5198_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5198_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5198() { testValid(test_5198_sup,test_5198_sub); }

		private static final SyntacticType test_5199_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5199_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5199() { testValid(test_5199_sup,test_5199_sub); }

		private static final SyntacticType test_5200_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5200_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5200() { testValid(test_5200_sup,test_5200_sub); }

		private static final SyntacticType test_5201_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5201_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5201() { testValid(test_5201_sup,test_5201_sub); }

		private static final SyntacticType test_5202_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5202_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5202() { testValid(test_5202_sup,test_5202_sub); }

		private static final SyntacticType test_5203_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5203_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5203() { testValid(test_5203_sup,test_5203_sub); }

		private static final SyntacticType test_5204_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5204_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5204() { testValid(test_5204_sup,test_5204_sub); }

		private static final SyntacticType test_5205_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5205_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5205() { testValid(test_5205_sup,test_5205_sub); }

		private static final SyntacticType test_5206_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5206_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5206() { testValid(test_5206_sup,test_5206_sub); }

		private static final SyntacticType test_5207_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5207_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5207() { testValid(test_5207_sup,test_5207_sub); }

		private static final SyntacticType test_5208_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5208_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5208() { testValid(test_5208_sup,test_5208_sub); }

		private static final SyntacticType test_5209_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5209_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5209() { testValid(test_5209_sup,test_5209_sub); }

		private static final SyntacticType test_5210_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5210_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5210() { testValid(test_5210_sup,test_5210_sub); }

		private static final SyntacticType test_5211_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5211_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5211() { testValid(test_5211_sup,test_5211_sub); }

		private static final SyntacticType test_5212_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5212_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5212() { testValid(test_5212_sup,test_5212_sub); }

		private static final SyntacticType test_5213_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5213_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5213() { testValid(test_5213_sup,test_5213_sub); }

		private static final SyntacticType test_5214_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5214_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5214() { testValid(test_5214_sup,test_5214_sub); }

		private static final SyntacticType test_5215_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5215_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5215() { testValid(test_5215_sup,test_5215_sub); }

		private static final SyntacticType test_5216_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5216_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5216() { testValid(test_5216_sup,test_5216_sub); }

		private static final SyntacticType test_5217_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5217_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5217() { testValid(test_5217_sup,test_5217_sub); }

		private static final SyntacticType test_5218_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5218_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5218() { testValid(test_5218_sup,test_5218_sub); }

		private static final SyntacticType test_5219_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5219_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5219() { testValid(test_5219_sup,test_5219_sub); }

		private static final SyntacticType test_5220_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5220_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5220() { testValid(test_5220_sup,test_5220_sub); }

		private static final SyntacticType test_5221_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5221_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5221() { testValid(test_5221_sup,test_5221_sub); }

		private static final SyntacticType test_5222_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5222_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5222() { testValid(test_5222_sup,test_5222_sub); }

		private static final SyntacticType test_5223_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5223_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5223() { testValid(test_5223_sup,test_5223_sub); }

		private static final SyntacticType test_5224_sup = parse("({(int & any)} | ((int | any) | !int))");
		private static final SyntacticType test_5224_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5224() { testValid(test_5224_sup,test_5224_sub); }

		private static final SyntacticType test_5225_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5225_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5225() { testValid(test_5225_sup,test_5225_sub); }

		private static final SyntacticType test_5226_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5226_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5226() { testValid(test_5226_sup,test_5226_sub); }

		private static final SyntacticType test_5227_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5227_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5227() { testValid(test_5227_sup,test_5227_sub); }

		private static final SyntacticType test_5228_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5228_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5228() { testValid(test_5228_sup,test_5228_sub); }

		private static final SyntacticType test_5229_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5229_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5229() { testValid(test_5229_sup,test_5229_sub); }

		private static final SyntacticType test_5230_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5230_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5230() { testValid(test_5230_sup,test_5230_sub); }

		private static final SyntacticType test_5231_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5231_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5231() { testValid(test_5231_sup,test_5231_sub); }

		private static final SyntacticType test_5232_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5232_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5232() { testValid(test_5232_sup,test_5232_sub); }

		private static final SyntacticType test_5233_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5233_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5233() { testValid(test_5233_sup,test_5233_sub); }

		private static final SyntacticType test_5234_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5234_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5234() { testValid(test_5234_sup,test_5234_sub); }

		private static final SyntacticType test_5235_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5235_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5235() { testValid(test_5235_sup,test_5235_sub); }

		private static final SyntacticType test_5236_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5236_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5236() { testValid(test_5236_sup,test_5236_sub); }

		private static final SyntacticType test_5237_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5237_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5237() { testValid(test_5237_sup,test_5237_sub); }

		private static final SyntacticType test_5238_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5238_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5238() { testValid(test_5238_sup,test_5238_sub); }

		private static final SyntacticType test_5239_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5239_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5239() { testValid(test_5239_sup,test_5239_sub); }

		private static final SyntacticType test_5240_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5240_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5240() { testValid(test_5240_sup,test_5240_sub); }

		private static final SyntacticType test_5241_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5241_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5241() { testValid(test_5241_sup,test_5241_sub); }

		private static final SyntacticType test_5242_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5242_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5242() { testValid(test_5242_sup,test_5242_sub); }

		private static final SyntacticType test_5243_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5243_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5243() { testValid(test_5243_sup,test_5243_sub); }

		private static final SyntacticType test_5244_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5244_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5244() { testValid(test_5244_sup,test_5244_sub); }

		private static final SyntacticType test_5245_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5245_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5245() { testValid(test_5245_sup,test_5245_sub); }

		private static final SyntacticType test_5246_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5246_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5246() { testValid(test_5246_sup,test_5246_sub); }

		private static final SyntacticType test_5247_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5247_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5247() { testValid(test_5247_sup,test_5247_sub); }

		private static final SyntacticType test_5248_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5248_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5248() { testValid(test_5248_sup,test_5248_sub); }

		private static final SyntacticType test_5249_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5249_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5249() { testValid(test_5249_sup,test_5249_sub); }

		private static final SyntacticType test_5250_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5250_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5250() { testValid(test_5250_sup,test_5250_sub); }

		private static final SyntacticType test_5251_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5251_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5251() { testValid(test_5251_sup,test_5251_sub); }

		private static final SyntacticType test_5252_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5252_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5252() { testValid(test_5252_sup,test_5252_sub); }

		private static final SyntacticType test_5253_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5253_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5253() { testValid(test_5253_sup,test_5253_sub); }

		private static final SyntacticType test_5254_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5254_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5254() { testValid(test_5254_sup,test_5254_sub); }

		private static final SyntacticType test_5255_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5255_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5255() { testValid(test_5255_sup,test_5255_sub); }

		private static final SyntacticType test_5256_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5256_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5256() { testValid(test_5256_sup,test_5256_sub); }

		private static final SyntacticType test_5257_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5257_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5257() { testValid(test_5257_sup,test_5257_sub); }

		private static final SyntacticType test_5258_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5258_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5258() { testValid(test_5258_sup,test_5258_sub); }

		private static final SyntacticType test_5259_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5259_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5259() { testValid(test_5259_sup,test_5259_sub); }

		private static final SyntacticType test_5260_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5260_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5260() { testValid(test_5260_sup,test_5260_sub); }

		private static final SyntacticType test_5261_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5261_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5261() { testValid(test_5261_sup,test_5261_sub); }

		private static final SyntacticType test_5262_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5262_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5262() { testValid(test_5262_sup,test_5262_sub); }

		private static final SyntacticType test_5263_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5263_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5263() { testValid(test_5263_sup,test_5263_sub); }

		private static final SyntacticType test_5264_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5264_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5264() { testValid(test_5264_sup,test_5264_sub); }

		private static final SyntacticType test_5265_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5265_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5265() { testValid(test_5265_sup,test_5265_sub); }

		private static final SyntacticType test_5266_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5266_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5266() { testValid(test_5266_sup,test_5266_sub); }

		private static final SyntacticType test_5267_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5267_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5267() { testValid(test_5267_sup,test_5267_sub); }

		private static final SyntacticType test_5268_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5268_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5268() { testValid(test_5268_sup,test_5268_sub); }

		private static final SyntacticType test_5269_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5269_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5269() { testValid(test_5269_sup,test_5269_sub); }

		private static final SyntacticType test_5270_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5270_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5270() { testValid(test_5270_sup,test_5270_sub); }

		private static final SyntacticType test_5271_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5271_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5271() { testValid(test_5271_sup,test_5271_sub); }

		private static final SyntacticType test_5272_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5272_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5272() { testValid(test_5272_sup,test_5272_sub); }

		private static final SyntacticType test_5273_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5273_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5273() { testValid(test_5273_sup,test_5273_sub); }

		private static final SyntacticType test_5274_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5274_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5274() { testValid(test_5274_sup,test_5274_sub); }

		private static final SyntacticType test_5275_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5275_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5275() { testValid(test_5275_sup,test_5275_sub); }

		private static final SyntacticType test_5276_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5276_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5276() { testValid(test_5276_sup,test_5276_sub); }

		private static final SyntacticType test_5277_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5277_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5277() { testValid(test_5277_sup,test_5277_sub); }

		private static final SyntacticType test_5278_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5278_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5278() { testValid(test_5278_sup,test_5278_sub); }

		private static final SyntacticType test_5279_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5279_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5279() { testValid(test_5279_sup,test_5279_sub); }

		private static final SyntacticType test_5280_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5280_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5280() { testValid(test_5280_sup,test_5280_sub); }

		private static final SyntacticType test_5281_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5281_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5281() { testValid(test_5281_sup,test_5281_sub); }

		private static final SyntacticType test_5282_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5282_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5282() { testValid(test_5282_sup,test_5282_sub); }

		private static final SyntacticType test_5283_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5283_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5283() { testValid(test_5283_sup,test_5283_sub); }

		private static final SyntacticType test_5284_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5284_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5284() { testValid(test_5284_sup,test_5284_sub); }

		private static final SyntacticType test_5285_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5285_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5285() { testValid(test_5285_sup,test_5285_sub); }

		private static final SyntacticType test_5286_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5286_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5286() { testValid(test_5286_sup,test_5286_sub); }

		private static final SyntacticType test_5287_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5287_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5287() { testValid(test_5287_sup,test_5287_sub); }

		private static final SyntacticType test_5288_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5288_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5288() { testValid(test_5288_sup,test_5288_sub); }

		private static final SyntacticType test_5289_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5289_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5289() { testValid(test_5289_sup,test_5289_sub); }

		private static final SyntacticType test_5290_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5290_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5290() { testValid(test_5290_sup,test_5290_sub); }

		private static final SyntacticType test_5291_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5291_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5291() { testValid(test_5291_sup,test_5291_sub); }

		private static final SyntacticType test_5292_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5292_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5292() { testValid(test_5292_sup,test_5292_sub); }

		private static final SyntacticType test_5293_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5293_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5293() { testValid(test_5293_sup,test_5293_sub); }

		private static final SyntacticType test_5294_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5294_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5294() { testValid(test_5294_sup,test_5294_sub); }

		private static final SyntacticType test_5295_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5295_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5295() { testValid(test_5295_sup,test_5295_sub); }

		private static final SyntacticType test_5296_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5296_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5296() { testValid(test_5296_sup,test_5296_sub); }

		private static final SyntacticType test_5297_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5297_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5297() { testValid(test_5297_sup,test_5297_sub); }

		private static final SyntacticType test_5298_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5298_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5298() { testValid(test_5298_sup,test_5298_sub); }

		private static final SyntacticType test_5299_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5299_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5299() { testValid(test_5299_sup,test_5299_sub); }

		private static final SyntacticType test_5300_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5300_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5300() { testValid(test_5300_sup,test_5300_sub); }

		private static final SyntacticType test_5301_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5301_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5301() { testValid(test_5301_sup,test_5301_sub); }

		private static final SyntacticType test_5302_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5302_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5302() { testValid(test_5302_sup,test_5302_sub); }

		private static final SyntacticType test_5303_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5303_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5303() { testValid(test_5303_sup,test_5303_sub); }

		private static final SyntacticType test_5304_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5304_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5304() { testValid(test_5304_sup,test_5304_sub); }

		private static final SyntacticType test_5305_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5305_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5305() { testValid(test_5305_sup,test_5305_sub); }

		private static final SyntacticType test_5306_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5306_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5306() { testValid(test_5306_sup,test_5306_sub); }

		private static final SyntacticType test_5307_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5307_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5307() { testValid(test_5307_sup,test_5307_sub); }

		private static final SyntacticType test_5308_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5308_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5308() { testValid(test_5308_sup,test_5308_sub); }

		private static final SyntacticType test_5309_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5309_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5309() { testValid(test_5309_sup,test_5309_sub); }

		private static final SyntacticType test_5310_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5310_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5310() { testValid(test_5310_sup,test_5310_sub); }

		private static final SyntacticType test_5311_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5311_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5311() { testValid(test_5311_sup,test_5311_sub); }

		private static final SyntacticType test_5312_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5312_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5312() { testValid(test_5312_sup,test_5312_sub); }

		private static final SyntacticType test_5313_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5313_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5313() { testValid(test_5313_sup,test_5313_sub); }

		private static final SyntacticType test_5314_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5314_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5314() { testValid(test_5314_sup,test_5314_sub); }

		private static final SyntacticType test_5315_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5315_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5315() { testValid(test_5315_sup,test_5315_sub); }

		private static final SyntacticType test_5316_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5316_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5316() { testValid(test_5316_sup,test_5316_sub); }

		private static final SyntacticType test_5317_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5317_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5317() { testValid(test_5317_sup,test_5317_sub); }

		private static final SyntacticType test_5318_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5318_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5318() { testValid(test_5318_sup,test_5318_sub); }

		private static final SyntacticType test_5319_sup = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		private static final SyntacticType test_5319_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5319() { testValid(test_5319_sup,test_5319_sub); }

		private static final SyntacticType test_5320_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5320_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5320() { testValid(test_5320_sup,test_5320_sub); }

		private static final SyntacticType test_5321_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5321_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5321() { testValid(test_5321_sup,test_5321_sub); }

		private static final SyntacticType test_5322_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5322_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5322() { testInvalid(test_5322_sup,test_5322_sub); }

		private static final SyntacticType test_5323_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5323_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5323() { testInvalid(test_5323_sup,test_5323_sub); }

		private static final SyntacticType test_5324_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5324_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5324() { testInvalid(test_5324_sup,test_5324_sub); }

		private static final SyntacticType test_5325_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5325_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5325() { testInvalid(test_5325_sup,test_5325_sub); }

		private static final SyntacticType test_5326_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5326_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5326() { testInvalid(test_5326_sup,test_5326_sub); }

		private static final SyntacticType test_5327_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5327_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5327() { testInvalid(test_5327_sup,test_5327_sub); }

		private static final SyntacticType test_5328_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5328_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5328() { testInvalid(test_5328_sup,test_5328_sub); }

		private static final SyntacticType test_5329_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5329_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5329() { testInvalid(test_5329_sup,test_5329_sub); }

		private static final SyntacticType test_5330_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5330_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5330() { testInvalid(test_5330_sup,test_5330_sub); }

		private static final SyntacticType test_5331_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5331_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5331() { testInvalid(test_5331_sup,test_5331_sub); }

		private static final SyntacticType test_5332_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5332_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5332() { testInvalid(test_5332_sup,test_5332_sub); }

		private static final SyntacticType test_5333_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5333_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5333() { testInvalid(test_5333_sup,test_5333_sub); }

		private static final SyntacticType test_5334_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5334_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5334() { testInvalid(test_5334_sup,test_5334_sub); }

		private static final SyntacticType test_5335_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5335_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5335() { testInvalid(test_5335_sup,test_5335_sub); }

		private static final SyntacticType test_5336_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5336_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5336() { testInvalid(test_5336_sup,test_5336_sub); }

		private static final SyntacticType test_5337_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5337_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5337() { testInvalid(test_5337_sup,test_5337_sub); }

		private static final SyntacticType test_5338_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5338_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5338() { testInvalid(test_5338_sup,test_5338_sub); }

		private static final SyntacticType test_5339_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5339_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5339() { testInvalid(test_5339_sup,test_5339_sub); }

		private static final SyntacticType test_5340_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5340_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5340() { testInvalid(test_5340_sup,test_5340_sub); }

		private static final SyntacticType test_5341_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5341_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5341() { testInvalid(test_5341_sup,test_5341_sub); }

		private static final SyntacticType test_5342_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5342_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5342() { testValid(test_5342_sup,test_5342_sub); }

		private static final SyntacticType test_5343_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5343_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5343() { testValid(test_5343_sup,test_5343_sub); }

		private static final SyntacticType test_5344_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5344_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5344() { testInvalid(test_5344_sup,test_5344_sub); }

		private static final SyntacticType test_5345_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5345_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5345() { testInvalid(test_5345_sup,test_5345_sub); }

		private static final SyntacticType test_5346_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5346_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5346() { testInvalid(test_5346_sup,test_5346_sub); }

		private static final SyntacticType test_5347_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5347_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5347() { testInvalid(test_5347_sup,test_5347_sub); }

		private static final SyntacticType test_5348_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5348_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5348() { testInvalid(test_5348_sup,test_5348_sub); }

		private static final SyntacticType test_5349_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5349_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5349() { testInvalid(test_5349_sup,test_5349_sub); }

		private static final SyntacticType test_5350_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5350_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5350() { testInvalid(test_5350_sup,test_5350_sub); }

		private static final SyntacticType test_5351_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5351_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5351() { testInvalid(test_5351_sup,test_5351_sub); }

		private static final SyntacticType test_5352_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5352_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5352() { testInvalid(test_5352_sup,test_5352_sub); }

		private static final SyntacticType test_5353_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5353_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5353() { testInvalid(test_5353_sup,test_5353_sub); }

		private static final SyntacticType test_5354_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5354_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5354() { testInvalid(test_5354_sup,test_5354_sub); }

		private static final SyntacticType test_5355_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5355_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5355() { testInvalid(test_5355_sup,test_5355_sub); }

		private static final SyntacticType test_5356_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5356_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5356() { testInvalid(test_5356_sup,test_5356_sub); }

		private static final SyntacticType test_5357_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5357_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5357() { testValid(test_5357_sup,test_5357_sub); }

		private static final SyntacticType test_5358_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5358_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5358() { testValid(test_5358_sup,test_5358_sub); }

		private static final SyntacticType test_5359_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5359_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5359() { testInvalid(test_5359_sup,test_5359_sub); }

		private static final SyntacticType test_5360_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5360_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5360() { testInvalid(test_5360_sup,test_5360_sub); }

		private static final SyntacticType test_5361_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5361_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5361() { testValid(test_5361_sup,test_5361_sub); }

		private static final SyntacticType test_5362_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5362_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5362() { testInvalid(test_5362_sup,test_5362_sub); }

		private static final SyntacticType test_5363_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5363_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5363() { testInvalid(test_5363_sup,test_5363_sub); }

		private static final SyntacticType test_5364_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5364_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5364() { testInvalid(test_5364_sup,test_5364_sub); }

		private static final SyntacticType test_5365_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5365_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5365() { testInvalid(test_5365_sup,test_5365_sub); }

		private static final SyntacticType test_5366_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5366_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5366() { testInvalid(test_5366_sup,test_5366_sub); }

		private static final SyntacticType test_5367_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5367_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5367() { testInvalid(test_5367_sup,test_5367_sub); }

		private static final SyntacticType test_5368_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5368_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5368() { testInvalid(test_5368_sup,test_5368_sub); }

		private static final SyntacticType test_5369_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5369_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5369() { testInvalid(test_5369_sup,test_5369_sub); }

		private static final SyntacticType test_5370_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5370_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5370() { testInvalid(test_5370_sup,test_5370_sub); }

		private static final SyntacticType test_5371_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5371_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5371() { testInvalid(test_5371_sup,test_5371_sub); }

		private static final SyntacticType test_5372_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5372_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5372() { testInvalid(test_5372_sup,test_5372_sub); }

		private static final SyntacticType test_5373_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5373_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5373() { testInvalid(test_5373_sup,test_5373_sub); }

		private static final SyntacticType test_5374_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5374_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5374() { testInvalid(test_5374_sup,test_5374_sub); }

		private static final SyntacticType test_5375_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5375_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5375() { testInvalid(test_5375_sup,test_5375_sub); }

		private static final SyntacticType test_5376_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5376_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5376() { testValid(test_5376_sup,test_5376_sub); }

		private static final SyntacticType test_5377_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5377_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5377() { testInvalid(test_5377_sup,test_5377_sub); }

		private static final SyntacticType test_5378_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5378_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5378() { testInvalid(test_5378_sup,test_5378_sub); }

		private static final SyntacticType test_5379_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5379_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5379() { testInvalid(test_5379_sup,test_5379_sub); }

		private static final SyntacticType test_5380_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5380_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5380() { testInvalid(test_5380_sup,test_5380_sub); }

		private static final SyntacticType test_5381_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5381_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5381() { testInvalid(test_5381_sup,test_5381_sub); }

		private static final SyntacticType test_5382_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5382_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5382() { testInvalid(test_5382_sup,test_5382_sub); }

		private static final SyntacticType test_5383_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5383_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5383() { testInvalid(test_5383_sup,test_5383_sub); }

		private static final SyntacticType test_5384_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5384_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5384() { testInvalid(test_5384_sup,test_5384_sub); }

		private static final SyntacticType test_5385_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5385_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5385() { testInvalid(test_5385_sup,test_5385_sub); }

		private static final SyntacticType test_5386_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5386_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5386() { testInvalid(test_5386_sup,test_5386_sub); }

		private static final SyntacticType test_5387_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5387_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5387() { testInvalid(test_5387_sup,test_5387_sub); }

		private static final SyntacticType test_5388_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5388_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5388() { testInvalid(test_5388_sup,test_5388_sub); }

		private static final SyntacticType test_5389_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5389_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5389() { testInvalid(test_5389_sup,test_5389_sub); }

		private static final SyntacticType test_5390_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5390_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5390() { testInvalid(test_5390_sup,test_5390_sub); }

		private static final SyntacticType test_5391_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5391_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5391() { testInvalid(test_5391_sup,test_5391_sub); }

		private static final SyntacticType test_5392_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5392_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5392() { testInvalid(test_5392_sup,test_5392_sub); }

		private static final SyntacticType test_5393_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5393_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5393() { testInvalid(test_5393_sup,test_5393_sub); }

		private static final SyntacticType test_5394_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5394_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5394() { testInvalid(test_5394_sup,test_5394_sub); }

		private static final SyntacticType test_5395_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5395_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5395() { testInvalid(test_5395_sup,test_5395_sub); }

		private static final SyntacticType test_5396_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5396_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5396() { testInvalid(test_5396_sup,test_5396_sub); }

		private static final SyntacticType test_5397_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5397_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5397() { testInvalid(test_5397_sup,test_5397_sub); }

		private static final SyntacticType test_5398_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5398_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5398() { testInvalid(test_5398_sup,test_5398_sub); }

		private static final SyntacticType test_5399_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5399_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5399() { testInvalid(test_5399_sup,test_5399_sub); }

		private static final SyntacticType test_5400_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5400_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5400() { testInvalid(test_5400_sup,test_5400_sub); }

		private static final SyntacticType test_5401_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5401_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5401() { testInvalid(test_5401_sup,test_5401_sub); }

		private static final SyntacticType test_5402_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5402_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5402() { testInvalid(test_5402_sup,test_5402_sub); }

		private static final SyntacticType test_5403_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5403_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5403() { testValid(test_5403_sup,test_5403_sub); }

		private static final SyntacticType test_5404_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5404_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5404() { testInvalid(test_5404_sup,test_5404_sub); }

		private static final SyntacticType test_5405_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5405_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5405() { testInvalid(test_5405_sup,test_5405_sub); }

		private static final SyntacticType test_5406_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5406_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5406() { testValid(test_5406_sup,test_5406_sub); }

		private static final SyntacticType test_5407_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5407_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5407() { testInvalid(test_5407_sup,test_5407_sub); }

		private static final SyntacticType test_5408_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5408_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5408() { testInvalid(test_5408_sup,test_5408_sub); }

		private static final SyntacticType test_5409_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5409_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5409() { testInvalid(test_5409_sup,test_5409_sub); }

		private static final SyntacticType test_5410_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5410_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5410() { testInvalid(test_5410_sup,test_5410_sub); }

		private static final SyntacticType test_5411_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5411_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5411() { testInvalid(test_5411_sup,test_5411_sub); }

		private static final SyntacticType test_5412_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5412_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5412() { testInvalid(test_5412_sup,test_5412_sub); }

		private static final SyntacticType test_5413_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5413_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5413() { testInvalid(test_5413_sup,test_5413_sub); }

		private static final SyntacticType test_5414_sup = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		private static final SyntacticType test_5414_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5414() { testInvalid(test_5414_sup,test_5414_sub); }

		private static final SyntacticType test_5415_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5415_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5415() { testValid(test_5415_sup,test_5415_sub); }

		private static final SyntacticType test_5416_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5416_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5416() { testValid(test_5416_sup,test_5416_sub); }

		private static final SyntacticType test_5417_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5417_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5417() { testValid(test_5417_sup,test_5417_sub); }

		private static final SyntacticType test_5418_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5418_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5418() { testValid(test_5418_sup,test_5418_sub); }

		private static final SyntacticType test_5419_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5419_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5419() { testValid(test_5419_sup,test_5419_sub); }

		private static final SyntacticType test_5420_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5420_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5420() { testValid(test_5420_sup,test_5420_sub); }

		private static final SyntacticType test_5421_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5421_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5421() { testValid(test_5421_sup,test_5421_sub); }

		private static final SyntacticType test_5422_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5422_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5422() { testValid(test_5422_sup,test_5422_sub); }

		private static final SyntacticType test_5423_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5423_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5423() { testValid(test_5423_sup,test_5423_sub); }

		private static final SyntacticType test_5424_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5424_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5424() { testValid(test_5424_sup,test_5424_sub); }

		private static final SyntacticType test_5425_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5425_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5425() { testValid(test_5425_sup,test_5425_sub); }

		private static final SyntacticType test_5426_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5426_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5426() { testValid(test_5426_sup,test_5426_sub); }

		private static final SyntacticType test_5427_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5427_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5427() { testValid(test_5427_sup,test_5427_sub); }

		private static final SyntacticType test_5428_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5428_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5428() { testValid(test_5428_sup,test_5428_sub); }

		private static final SyntacticType test_5429_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5429_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5429() { testValid(test_5429_sup,test_5429_sub); }

		private static final SyntacticType test_5430_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5430_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5430() { testValid(test_5430_sup,test_5430_sub); }

		private static final SyntacticType test_5431_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5431_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5431() { testValid(test_5431_sup,test_5431_sub); }

		private static final SyntacticType test_5432_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5432_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5432() { testValid(test_5432_sup,test_5432_sub); }

		private static final SyntacticType test_5433_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5433_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5433() { testValid(test_5433_sup,test_5433_sub); }

		private static final SyntacticType test_5434_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5434_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5434() { testValid(test_5434_sup,test_5434_sub); }

		private static final SyntacticType test_5435_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5435_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5435() { testValid(test_5435_sup,test_5435_sub); }

		private static final SyntacticType test_5436_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5436_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5436() { testValid(test_5436_sup,test_5436_sub); }

		private static final SyntacticType test_5437_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5437_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5437() { testValid(test_5437_sup,test_5437_sub); }

		private static final SyntacticType test_5438_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5438_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5438() { testValid(test_5438_sup,test_5438_sub); }

		private static final SyntacticType test_5439_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5439_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5439() { testValid(test_5439_sup,test_5439_sub); }

		private static final SyntacticType test_5440_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5440_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5440() { testValid(test_5440_sup,test_5440_sub); }

		private static final SyntacticType test_5441_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5441_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5441() { testValid(test_5441_sup,test_5441_sub); }

		private static final SyntacticType test_5442_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5442_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5442() { testValid(test_5442_sup,test_5442_sub); }

		private static final SyntacticType test_5443_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5443_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5443() { testValid(test_5443_sup,test_5443_sub); }

		private static final SyntacticType test_5444_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5444_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5444() { testValid(test_5444_sup,test_5444_sub); }

		private static final SyntacticType test_5445_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5445_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5445() { testValid(test_5445_sup,test_5445_sub); }

		private static final SyntacticType test_5446_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5446_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5446() { testValid(test_5446_sup,test_5446_sub); }

		private static final SyntacticType test_5447_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5447_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5447() { testValid(test_5447_sup,test_5447_sub); }

		private static final SyntacticType test_5448_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5448_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5448() { testValid(test_5448_sup,test_5448_sub); }

		private static final SyntacticType test_5449_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5449_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5449() { testValid(test_5449_sup,test_5449_sub); }

		private static final SyntacticType test_5450_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5450_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5450() { testValid(test_5450_sup,test_5450_sub); }

		private static final SyntacticType test_5451_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5451_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5451() { testValid(test_5451_sup,test_5451_sub); }

		private static final SyntacticType test_5452_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5452_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5452() { testValid(test_5452_sup,test_5452_sub); }

		private static final SyntacticType test_5453_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5453_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5453() { testValid(test_5453_sup,test_5453_sub); }

		private static final SyntacticType test_5454_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5454_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5454() { testValid(test_5454_sup,test_5454_sub); }

		private static final SyntacticType test_5455_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5455_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5455() { testValid(test_5455_sup,test_5455_sub); }

		private static final SyntacticType test_5456_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5456_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5456() { testValid(test_5456_sup,test_5456_sub); }

		private static final SyntacticType test_5457_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5457_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5457() { testValid(test_5457_sup,test_5457_sub); }

		private static final SyntacticType test_5458_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5458_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5458() { testValid(test_5458_sup,test_5458_sub); }

		private static final SyntacticType test_5459_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5459_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5459() { testValid(test_5459_sup,test_5459_sub); }

		private static final SyntacticType test_5460_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5460_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5460() { testValid(test_5460_sup,test_5460_sub); }

		private static final SyntacticType test_5461_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5461_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5461() { testValid(test_5461_sup,test_5461_sub); }

		private static final SyntacticType test_5462_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5462_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5462() { testValid(test_5462_sup,test_5462_sub); }

		private static final SyntacticType test_5463_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5463_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5463() { testValid(test_5463_sup,test_5463_sub); }

		private static final SyntacticType test_5464_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5464_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5464() { testValid(test_5464_sup,test_5464_sub); }

		private static final SyntacticType test_5465_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5465_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5465() { testValid(test_5465_sup,test_5465_sub); }

		private static final SyntacticType test_5466_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5466_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5466() { testValid(test_5466_sup,test_5466_sub); }

		private static final SyntacticType test_5467_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5467_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5467() { testValid(test_5467_sup,test_5467_sub); }

		private static final SyntacticType test_5468_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5468_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5468() { testValid(test_5468_sup,test_5468_sub); }

		private static final SyntacticType test_5469_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5469_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5469() { testValid(test_5469_sup,test_5469_sub); }

		private static final SyntacticType test_5470_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5470_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5470() { testValid(test_5470_sup,test_5470_sub); }

		private static final SyntacticType test_5471_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5471_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5471() { testValid(test_5471_sup,test_5471_sub); }

		private static final SyntacticType test_5472_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5472_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5472() { testValid(test_5472_sup,test_5472_sub); }

		private static final SyntacticType test_5473_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5473_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5473() { testValid(test_5473_sup,test_5473_sub); }

		private static final SyntacticType test_5474_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5474_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5474() { testValid(test_5474_sup,test_5474_sub); }

		private static final SyntacticType test_5475_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5475_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5475() { testValid(test_5475_sup,test_5475_sub); }

		private static final SyntacticType test_5476_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5476_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5476() { testValid(test_5476_sup,test_5476_sub); }

		private static final SyntacticType test_5477_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5477_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5477() { testValid(test_5477_sup,test_5477_sub); }

		private static final SyntacticType test_5478_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5478_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5478() { testValid(test_5478_sup,test_5478_sub); }

		private static final SyntacticType test_5479_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5479_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5479() { testValid(test_5479_sup,test_5479_sub); }

		private static final SyntacticType test_5480_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5480_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5480() { testValid(test_5480_sup,test_5480_sub); }

		private static final SyntacticType test_5481_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5481_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5481() { testValid(test_5481_sup,test_5481_sub); }

		private static final SyntacticType test_5482_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5482_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5482() { testValid(test_5482_sup,test_5482_sub); }

		private static final SyntacticType test_5483_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5483_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5483() { testValid(test_5483_sup,test_5483_sub); }

		private static final SyntacticType test_5484_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5484_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5484() { testValid(test_5484_sup,test_5484_sub); }

		private static final SyntacticType test_5485_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5485_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5485() { testValid(test_5485_sup,test_5485_sub); }

		private static final SyntacticType test_5486_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5486_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5486() { testValid(test_5486_sup,test_5486_sub); }

		private static final SyntacticType test_5487_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5487_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5487() { testValid(test_5487_sup,test_5487_sub); }

		private static final SyntacticType test_5488_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5488_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5488() { testValid(test_5488_sup,test_5488_sub); }

		private static final SyntacticType test_5489_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5489_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5489() { testValid(test_5489_sup,test_5489_sub); }

		private static final SyntacticType test_5490_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5490_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5490() { testValid(test_5490_sup,test_5490_sub); }

		private static final SyntacticType test_5491_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5491_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5491() { testValid(test_5491_sup,test_5491_sub); }

		private static final SyntacticType test_5492_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5492_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5492() { testValid(test_5492_sup,test_5492_sub); }

		private static final SyntacticType test_5493_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5493_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5493() { testValid(test_5493_sup,test_5493_sub); }

		private static final SyntacticType test_5494_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5494_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5494() { testValid(test_5494_sup,test_5494_sub); }

		private static final SyntacticType test_5495_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5495_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5495() { testValid(test_5495_sup,test_5495_sub); }

		private static final SyntacticType test_5496_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5496_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5496() { testValid(test_5496_sup,test_5496_sub); }

		private static final SyntacticType test_5497_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5497_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5497() { testValid(test_5497_sup,test_5497_sub); }

		private static final SyntacticType test_5498_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5498_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5498() { testValid(test_5498_sup,test_5498_sub); }

		private static final SyntacticType test_5499_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5499_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5499() { testValid(test_5499_sup,test_5499_sub); }

		private static final SyntacticType test_5500_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5500_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5500() { testValid(test_5500_sup,test_5500_sub); }

		private static final SyntacticType test_5501_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5501_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5501() { testValid(test_5501_sup,test_5501_sub); }

		private static final SyntacticType test_5502_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5502_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5502() { testValid(test_5502_sup,test_5502_sub); }

		private static final SyntacticType test_5503_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5503_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5503() { testValid(test_5503_sup,test_5503_sub); }

		private static final SyntacticType test_5504_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5504_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5504() { testValid(test_5504_sup,test_5504_sub); }

		private static final SyntacticType test_5505_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5505_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5505() { testValid(test_5505_sup,test_5505_sub); }

		private static final SyntacticType test_5506_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5506_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5506() { testValid(test_5506_sup,test_5506_sub); }

		private static final SyntacticType test_5507_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5507_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5507() { testValid(test_5507_sup,test_5507_sub); }

		private static final SyntacticType test_5508_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5508_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5508() { testValid(test_5508_sup,test_5508_sub); }

		private static final SyntacticType test_5509_sup = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		private static final SyntacticType test_5509_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5509() { testValid(test_5509_sup,test_5509_sub); }

		private static final SyntacticType test_5510_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5510_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5510() { testValid(test_5510_sup,test_5510_sub); }

		private static final SyntacticType test_5511_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5511_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5511() { testValid(test_5511_sup,test_5511_sub); }

		private static final SyntacticType test_5512_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5512_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5512() { testValid(test_5512_sup,test_5512_sub); }

		private static final SyntacticType test_5513_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5513_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5513() { testValid(test_5513_sup,test_5513_sub); }

		private static final SyntacticType test_5514_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5514_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5514() { testValid(test_5514_sup,test_5514_sub); }

		private static final SyntacticType test_5515_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5515_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5515() { testValid(test_5515_sup,test_5515_sub); }

		private static final SyntacticType test_5516_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5516_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5516() { testValid(test_5516_sup,test_5516_sub); }

		private static final SyntacticType test_5517_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5517_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5517() { testValid(test_5517_sup,test_5517_sub); }

		private static final SyntacticType test_5518_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5518_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5518() { testValid(test_5518_sup,test_5518_sub); }

		private static final SyntacticType test_5519_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5519_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5519() { testValid(test_5519_sup,test_5519_sub); }

		private static final SyntacticType test_5520_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5520_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5520() { testValid(test_5520_sup,test_5520_sub); }

		private static final SyntacticType test_5521_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5521_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5521() { testValid(test_5521_sup,test_5521_sub); }

		private static final SyntacticType test_5522_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5522_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5522() { testValid(test_5522_sup,test_5522_sub); }

		private static final SyntacticType test_5523_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5523_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5523() { testValid(test_5523_sup,test_5523_sub); }

		private static final SyntacticType test_5524_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5524_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5524() { testValid(test_5524_sup,test_5524_sub); }

		private static final SyntacticType test_5525_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5525_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5525() { testValid(test_5525_sup,test_5525_sub); }

		private static final SyntacticType test_5526_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5526_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5526() { testValid(test_5526_sup,test_5526_sub); }

		private static final SyntacticType test_5527_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5527_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5527() { testValid(test_5527_sup,test_5527_sub); }

		private static final SyntacticType test_5528_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5528_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5528() { testValid(test_5528_sup,test_5528_sub); }

		private static final SyntacticType test_5529_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5529_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5529() { testValid(test_5529_sup,test_5529_sub); }

		private static final SyntacticType test_5530_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5530_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5530() { testValid(test_5530_sup,test_5530_sub); }

		private static final SyntacticType test_5531_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5531_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5531() { testValid(test_5531_sup,test_5531_sub); }

		private static final SyntacticType test_5532_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5532_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5532() { testValid(test_5532_sup,test_5532_sub); }

		private static final SyntacticType test_5533_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5533_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5533() { testValid(test_5533_sup,test_5533_sub); }

		private static final SyntacticType test_5534_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5534_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5534() { testValid(test_5534_sup,test_5534_sub); }

		private static final SyntacticType test_5535_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5535_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5535() { testValid(test_5535_sup,test_5535_sub); }

		private static final SyntacticType test_5536_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5536_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5536() { testValid(test_5536_sup,test_5536_sub); }

		private static final SyntacticType test_5537_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5537_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5537() { testValid(test_5537_sup,test_5537_sub); }

		private static final SyntacticType test_5538_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5538_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5538() { testValid(test_5538_sup,test_5538_sub); }

		private static final SyntacticType test_5539_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5539_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5539() { testValid(test_5539_sup,test_5539_sub); }

		private static final SyntacticType test_5540_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5540_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5540() { testValid(test_5540_sup,test_5540_sub); }

		private static final SyntacticType test_5541_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5541_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5541() { testValid(test_5541_sup,test_5541_sub); }

		private static final SyntacticType test_5542_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5542_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5542() { testValid(test_5542_sup,test_5542_sub); }

		private static final SyntacticType test_5543_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5543_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5543() { testValid(test_5543_sup,test_5543_sub); }

		private static final SyntacticType test_5544_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5544_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5544() { testValid(test_5544_sup,test_5544_sub); }

		private static final SyntacticType test_5545_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5545_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5545() { testValid(test_5545_sup,test_5545_sub); }

		private static final SyntacticType test_5546_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5546_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5546() { testValid(test_5546_sup,test_5546_sub); }

		private static final SyntacticType test_5547_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5547_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5547() { testValid(test_5547_sup,test_5547_sub); }

		private static final SyntacticType test_5548_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5548_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5548() { testValid(test_5548_sup,test_5548_sub); }

		private static final SyntacticType test_5549_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5549_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5549() { testValid(test_5549_sup,test_5549_sub); }

		private static final SyntacticType test_5550_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5550_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5550() { testValid(test_5550_sup,test_5550_sub); }

		private static final SyntacticType test_5551_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5551_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5551() { testValid(test_5551_sup,test_5551_sub); }

		private static final SyntacticType test_5552_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5552_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5552() { testValid(test_5552_sup,test_5552_sub); }

		private static final SyntacticType test_5553_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5553_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5553() { testValid(test_5553_sup,test_5553_sub); }

		private static final SyntacticType test_5554_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5554_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5554() { testValid(test_5554_sup,test_5554_sub); }

		private static final SyntacticType test_5555_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5555_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5555() { testValid(test_5555_sup,test_5555_sub); }

		private static final SyntacticType test_5556_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5556_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5556() { testValid(test_5556_sup,test_5556_sub); }

		private static final SyntacticType test_5557_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5557_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5557() { testValid(test_5557_sup,test_5557_sub); }

		private static final SyntacticType test_5558_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5558_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5558() { testValid(test_5558_sup,test_5558_sub); }

		private static final SyntacticType test_5559_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5559_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5559() { testValid(test_5559_sup,test_5559_sub); }

		private static final SyntacticType test_5560_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5560_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5560() { testValid(test_5560_sup,test_5560_sub); }

		private static final SyntacticType test_5561_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5561_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5561() { testValid(test_5561_sup,test_5561_sub); }

		private static final SyntacticType test_5562_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5562_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5562() { testValid(test_5562_sup,test_5562_sub); }

		private static final SyntacticType test_5563_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5563_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5563() { testValid(test_5563_sup,test_5563_sub); }

		private static final SyntacticType test_5564_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5564_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5564() { testValid(test_5564_sup,test_5564_sub); }

		private static final SyntacticType test_5565_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5565_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5565() { testValid(test_5565_sup,test_5565_sub); }

		private static final SyntacticType test_5566_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5566_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5566() { testValid(test_5566_sup,test_5566_sub); }

		private static final SyntacticType test_5567_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5567_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5567() { testValid(test_5567_sup,test_5567_sub); }

		private static final SyntacticType test_5568_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5568_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5568() { testValid(test_5568_sup,test_5568_sub); }

		private static final SyntacticType test_5569_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5569_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5569() { testValid(test_5569_sup,test_5569_sub); }

		private static final SyntacticType test_5570_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5570_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5570() { testValid(test_5570_sup,test_5570_sub); }

		private static final SyntacticType test_5571_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5571_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5571() { testValid(test_5571_sup,test_5571_sub); }

		private static final SyntacticType test_5572_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5572_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5572() { testValid(test_5572_sup,test_5572_sub); }

		private static final SyntacticType test_5573_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5573_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5573() { testValid(test_5573_sup,test_5573_sub); }

		private static final SyntacticType test_5574_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5574_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5574() { testValid(test_5574_sup,test_5574_sub); }

		private static final SyntacticType test_5575_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5575_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5575() { testValid(test_5575_sup,test_5575_sub); }

		private static final SyntacticType test_5576_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5576_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5576() { testValid(test_5576_sup,test_5576_sub); }

		private static final SyntacticType test_5577_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5577_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5577() { testValid(test_5577_sup,test_5577_sub); }

		private static final SyntacticType test_5578_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5578_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5578() { testValid(test_5578_sup,test_5578_sub); }

		private static final SyntacticType test_5579_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5579_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5579() { testValid(test_5579_sup,test_5579_sub); }

		private static final SyntacticType test_5580_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5580_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5580() { testValid(test_5580_sup,test_5580_sub); }

		private static final SyntacticType test_5581_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5581_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5581() { testValid(test_5581_sup,test_5581_sub); }

		private static final SyntacticType test_5582_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5582_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5582() { testValid(test_5582_sup,test_5582_sub); }

		private static final SyntacticType test_5583_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5583_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5583() { testValid(test_5583_sup,test_5583_sub); }

		private static final SyntacticType test_5584_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5584_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5584() { testValid(test_5584_sup,test_5584_sub); }

		private static final SyntacticType test_5585_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5585_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5585() { testValid(test_5585_sup,test_5585_sub); }

		private static final SyntacticType test_5586_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5586_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5586() { testValid(test_5586_sup,test_5586_sub); }

		private static final SyntacticType test_5587_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5587_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5587() { testValid(test_5587_sup,test_5587_sub); }

		private static final SyntacticType test_5588_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5588_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5588() { testValid(test_5588_sup,test_5588_sub); }

		private static final SyntacticType test_5589_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5589_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5589() { testValid(test_5589_sup,test_5589_sub); }

		private static final SyntacticType test_5590_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5590_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5590() { testValid(test_5590_sup,test_5590_sub); }

		private static final SyntacticType test_5591_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5591_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5591() { testValid(test_5591_sup,test_5591_sub); }

		private static final SyntacticType test_5592_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5592_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5592() { testValid(test_5592_sup,test_5592_sub); }

		private static final SyntacticType test_5593_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5593_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5593() { testValid(test_5593_sup,test_5593_sub); }

		private static final SyntacticType test_5594_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5594_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5594() { testValid(test_5594_sup,test_5594_sub); }

		private static final SyntacticType test_5595_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5595_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5595() { testValid(test_5595_sup,test_5595_sub); }

		private static final SyntacticType test_5596_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5596_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5596() { testValid(test_5596_sup,test_5596_sub); }

		private static final SyntacticType test_5597_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5597_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5597() { testValid(test_5597_sup,test_5597_sub); }

		private static final SyntacticType test_5598_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5598_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5598() { testValid(test_5598_sup,test_5598_sub); }

		private static final SyntacticType test_5599_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5599_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5599() { testValid(test_5599_sup,test_5599_sub); }

		private static final SyntacticType test_5600_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5600_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5600() { testValid(test_5600_sup,test_5600_sub); }

		private static final SyntacticType test_5601_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5601_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5601() { testValid(test_5601_sup,test_5601_sub); }

		private static final SyntacticType test_5602_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5602_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5602() { testValid(test_5602_sup,test_5602_sub); }

		private static final SyntacticType test_5603_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5603_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5603() { testValid(test_5603_sup,test_5603_sub); }

		private static final SyntacticType test_5604_sup = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		private static final SyntacticType test_5604_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5604() { testValid(test_5604_sup,test_5604_sub); }

		private static final SyntacticType test_5605_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5605_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5605() { testInvalid(test_5605_sup,test_5605_sub); }

		private static final SyntacticType test_5606_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5606_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5606() { testInvalid(test_5606_sup,test_5606_sub); }

		private static final SyntacticType test_5607_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5607_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5607() { testInvalid(test_5607_sup,test_5607_sub); }

		private static final SyntacticType test_5608_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5608_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5608() { testValid(test_5608_sup,test_5608_sub); }

		private static final SyntacticType test_5609_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5609_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5609() { testValid(test_5609_sup,test_5609_sub); }

		private static final SyntacticType test_5610_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5610_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5610() { testInvalid(test_5610_sup,test_5610_sub); }

		private static final SyntacticType test_5611_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5611_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5611() { testInvalid(test_5611_sup,test_5611_sub); }

		private static final SyntacticType test_5612_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5612_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5612() { testValid(test_5612_sup,test_5612_sub); }

		private static final SyntacticType test_5613_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5613_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5613() { testInvalid(test_5613_sup,test_5613_sub); }

		private static final SyntacticType test_5614_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5614_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5614() { testInvalid(test_5614_sup,test_5614_sub); }

		private static final SyntacticType test_5615_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5615_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5615() { testInvalid(test_5615_sup,test_5615_sub); }

		private static final SyntacticType test_5616_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5616_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5616() { testInvalid(test_5616_sup,test_5616_sub); }

		private static final SyntacticType test_5617_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5617_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5617() { testInvalid(test_5617_sup,test_5617_sub); }

		private static final SyntacticType test_5618_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5618_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5618() { testInvalid(test_5618_sup,test_5618_sub); }

		private static final SyntacticType test_5619_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5619_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5619() { testInvalid(test_5619_sup,test_5619_sub); }

		private static final SyntacticType test_5620_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5620_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5620() { testValid(test_5620_sup,test_5620_sub); }

		private static final SyntacticType test_5621_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5621_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5621() { testInvalid(test_5621_sup,test_5621_sub); }

		private static final SyntacticType test_5622_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5622_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5622() { testInvalid(test_5622_sup,test_5622_sub); }

		private static final SyntacticType test_5623_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5623_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5623() { testValid(test_5623_sup,test_5623_sub); }

		private static final SyntacticType test_5624_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5624_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5624() { testValid(test_5624_sup,test_5624_sub); }

		private static final SyntacticType test_5625_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5625_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5625() { testValid(test_5625_sup,test_5625_sub); }

		private static final SyntacticType test_5626_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5626_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5626() { testInvalid(test_5626_sup,test_5626_sub); }

		private static final SyntacticType test_5627_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5627_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5627() { testInvalid(test_5627_sup,test_5627_sub); }

		private static final SyntacticType test_5628_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5628_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5628() { testInvalid(test_5628_sup,test_5628_sub); }

		private static final SyntacticType test_5629_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5629_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5629() { testInvalid(test_5629_sup,test_5629_sub); }

		private static final SyntacticType test_5630_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5630_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5630() { testInvalid(test_5630_sup,test_5630_sub); }

		private static final SyntacticType test_5631_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5631_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5631() { testInvalid(test_5631_sup,test_5631_sub); }

		private static final SyntacticType test_5632_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5632_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5632() { testInvalid(test_5632_sup,test_5632_sub); }

		private static final SyntacticType test_5633_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5633_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5633() { testInvalid(test_5633_sup,test_5633_sub); }

		private static final SyntacticType test_5634_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5634_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5634() { testInvalid(test_5634_sup,test_5634_sub); }

		private static final SyntacticType test_5635_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5635_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5635() { testValid(test_5635_sup,test_5635_sub); }

		private static final SyntacticType test_5636_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5636_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5636() { testValid(test_5636_sup,test_5636_sub); }

		private static final SyntacticType test_5637_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5637_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5637() { testValid(test_5637_sup,test_5637_sub); }

		private static final SyntacticType test_5638_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5638_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5638() { testInvalid(test_5638_sup,test_5638_sub); }

		private static final SyntacticType test_5639_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5639_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5639() { testInvalid(test_5639_sup,test_5639_sub); }

		private static final SyntacticType test_5640_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5640_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5640() { testInvalid(test_5640_sup,test_5640_sub); }

		private static final SyntacticType test_5641_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5641_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5641() { testInvalid(test_5641_sup,test_5641_sub); }

		private static final SyntacticType test_5642_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5642_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5642() { testInvalid(test_5642_sup,test_5642_sub); }

		private static final SyntacticType test_5643_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5643_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5643() { testInvalid(test_5643_sup,test_5643_sub); }

		private static final SyntacticType test_5644_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5644_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5644() { testInvalid(test_5644_sup,test_5644_sub); }

		private static final SyntacticType test_5645_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5645_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5645() { testInvalid(test_5645_sup,test_5645_sub); }

		private static final SyntacticType test_5646_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5646_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5646() { testInvalid(test_5646_sup,test_5646_sub); }

		private static final SyntacticType test_5647_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5647_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5647() { testInvalid(test_5647_sup,test_5647_sub); }

		private static final SyntacticType test_5648_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5648_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5648() { testInvalid(test_5648_sup,test_5648_sub); }

		private static final SyntacticType test_5649_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5649_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5649() { testInvalid(test_5649_sup,test_5649_sub); }

		private static final SyntacticType test_5650_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5650_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5650() { testValid(test_5650_sup,test_5650_sub); }

		private static final SyntacticType test_5651_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5651_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5651() { testInvalid(test_5651_sup,test_5651_sub); }

		private static final SyntacticType test_5652_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5652_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5652() { testInvalid(test_5652_sup,test_5652_sub); }

		private static final SyntacticType test_5653_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5653_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5653() { testInvalid(test_5653_sup,test_5653_sub); }

		private static final SyntacticType test_5654_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5654_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5654() { testInvalid(test_5654_sup,test_5654_sub); }

		private static final SyntacticType test_5655_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5655_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5655() { testInvalid(test_5655_sup,test_5655_sub); }

		private static final SyntacticType test_5656_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5656_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5656() { testInvalid(test_5656_sup,test_5656_sub); }

		private static final SyntacticType test_5657_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5657_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5657() { testInvalid(test_5657_sup,test_5657_sub); }

		private static final SyntacticType test_5658_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5658_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5658() { testValid(test_5658_sup,test_5658_sub); }

		private static final SyntacticType test_5659_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5659_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5659() { testInvalid(test_5659_sup,test_5659_sub); }

		private static final SyntacticType test_5660_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5660_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5660() { testInvalid(test_5660_sup,test_5660_sub); }

		private static final SyntacticType test_5661_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5661_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5661() { testInvalid(test_5661_sup,test_5661_sub); }

		private static final SyntacticType test_5662_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5662_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5662() { testInvalid(test_5662_sup,test_5662_sub); }

		private static final SyntacticType test_5663_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5663_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5663() { testInvalid(test_5663_sup,test_5663_sub); }

		private static final SyntacticType test_5664_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5664_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5664() { testValid(test_5664_sup,test_5664_sub); }

		private static final SyntacticType test_5665_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5665_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5665() { testInvalid(test_5665_sup,test_5665_sub); }

		private static final SyntacticType test_5666_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5666_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5666() { testInvalid(test_5666_sup,test_5666_sub); }

		private static final SyntacticType test_5667_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5667_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5667() { testInvalid(test_5667_sup,test_5667_sub); }

		private static final SyntacticType test_5668_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5668_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5668() { testInvalid(test_5668_sup,test_5668_sub); }

		private static final SyntacticType test_5669_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5669_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5669() { testInvalid(test_5669_sup,test_5669_sub); }

		private static final SyntacticType test_5670_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5670_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5670() { testInvalid(test_5670_sup,test_5670_sub); }

		private static final SyntacticType test_5671_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5671_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5671() { testInvalid(test_5671_sup,test_5671_sub); }

		private static final SyntacticType test_5672_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5672_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5672() { testValid(test_5672_sup,test_5672_sub); }

		private static final SyntacticType test_5673_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5673_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5673() { testValid(test_5673_sup,test_5673_sub); }

		private static final SyntacticType test_5674_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5674_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5674() { testInvalid(test_5674_sup,test_5674_sub); }

		private static final SyntacticType test_5675_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5675_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5675() { testInvalid(test_5675_sup,test_5675_sub); }

		private static final SyntacticType test_5676_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5676_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5676() { testInvalid(test_5676_sup,test_5676_sub); }

		private static final SyntacticType test_5677_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5677_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5677() { testInvalid(test_5677_sup,test_5677_sub); }

		private static final SyntacticType test_5678_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5678_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5678() { testValid(test_5678_sup,test_5678_sub); }

		private static final SyntacticType test_5679_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5679_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5679() { testInvalid(test_5679_sup,test_5679_sub); }

		private static final SyntacticType test_5680_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5680_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5680() { testValid(test_5680_sup,test_5680_sub); }

		private static final SyntacticType test_5681_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5681_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5681() { testValid(test_5681_sup,test_5681_sub); }

		private static final SyntacticType test_5682_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5682_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5682() { testInvalid(test_5682_sup,test_5682_sub); }

		private static final SyntacticType test_5683_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5683_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5683() { testValid(test_5683_sup,test_5683_sub); }

		private static final SyntacticType test_5684_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5684_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5684() { testInvalid(test_5684_sup,test_5684_sub); }

		private static final SyntacticType test_5685_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5685_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5685() { testInvalid(test_5685_sup,test_5685_sub); }

		private static final SyntacticType test_5686_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5686_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5686() { testInvalid(test_5686_sup,test_5686_sub); }

		private static final SyntacticType test_5687_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5687_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5687() { testInvalid(test_5687_sup,test_5687_sub); }

		private static final SyntacticType test_5688_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5688_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5688() { testValid(test_5688_sup,test_5688_sub); }

		private static final SyntacticType test_5689_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5689_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5689() { testInvalid(test_5689_sup,test_5689_sub); }

		private static final SyntacticType test_5690_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5690_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5690() { testInvalid(test_5690_sup,test_5690_sub); }

		private static final SyntacticType test_5691_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5691_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5691() { testInvalid(test_5691_sup,test_5691_sub); }

		private static final SyntacticType test_5692_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5692_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5692() { testValid(test_5692_sup,test_5692_sub); }

		private static final SyntacticType test_5693_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5693_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5693() { testInvalid(test_5693_sup,test_5693_sub); }

		private static final SyntacticType test_5694_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5694_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5694() { testInvalid(test_5694_sup,test_5694_sub); }

		private static final SyntacticType test_5695_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5695_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5695() { testInvalid(test_5695_sup,test_5695_sub); }

		private static final SyntacticType test_5696_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5696_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5696() { testInvalid(test_5696_sup,test_5696_sub); }

		private static final SyntacticType test_5697_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5697_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5697() { testInvalid(test_5697_sup,test_5697_sub); }

		private static final SyntacticType test_5698_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5698_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5698() { testInvalid(test_5698_sup,test_5698_sub); }

		private static final SyntacticType test_5699_sup = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		private static final SyntacticType test_5699_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5699() { testInvalid(test_5699_sup,test_5699_sub); }

		private static final SyntacticType test_5700_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5700_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5700() { testValid(test_5700_sup,test_5700_sub); }

		private static final SyntacticType test_5701_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5701_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5701() { testValid(test_5701_sup,test_5701_sub); }

		private static final SyntacticType test_5702_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5702_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5702() { testValid(test_5702_sup,test_5702_sub); }

		private static final SyntacticType test_5703_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5703_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5703() { testValid(test_5703_sup,test_5703_sub); }

		private static final SyntacticType test_5704_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5704_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5704() { testValid(test_5704_sup,test_5704_sub); }

		private static final SyntacticType test_5705_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5705_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5705() { testValid(test_5705_sup,test_5705_sub); }

		private static final SyntacticType test_5706_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5706_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5706() { testValid(test_5706_sup,test_5706_sub); }

		private static final SyntacticType test_5707_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5707_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5707() { testValid(test_5707_sup,test_5707_sub); }

		private static final SyntacticType test_5708_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5708_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5708() { testValid(test_5708_sup,test_5708_sub); }

		private static final SyntacticType test_5709_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5709_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5709() { testValid(test_5709_sup,test_5709_sub); }

		private static final SyntacticType test_5710_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5710_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5710() { testValid(test_5710_sup,test_5710_sub); }

		private static final SyntacticType test_5711_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5711_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5711() { testValid(test_5711_sup,test_5711_sub); }

		private static final SyntacticType test_5712_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5712_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5712() { testValid(test_5712_sup,test_5712_sub); }

		private static final SyntacticType test_5713_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5713_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5713() { testValid(test_5713_sup,test_5713_sub); }

		private static final SyntacticType test_5714_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5714_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5714() { testValid(test_5714_sup,test_5714_sub); }

		private static final SyntacticType test_5715_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5715_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5715() { testValid(test_5715_sup,test_5715_sub); }

		private static final SyntacticType test_5716_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5716_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5716() { testValid(test_5716_sup,test_5716_sub); }

		private static final SyntacticType test_5717_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5717_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5717() { testValid(test_5717_sup,test_5717_sub); }

		private static final SyntacticType test_5718_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5718_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5718() { testValid(test_5718_sup,test_5718_sub); }

		private static final SyntacticType test_5719_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5719_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5719() { testValid(test_5719_sup,test_5719_sub); }

		private static final SyntacticType test_5720_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5720_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5720() { testValid(test_5720_sup,test_5720_sub); }

		private static final SyntacticType test_5721_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5721_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5721() { testValid(test_5721_sup,test_5721_sub); }

		private static final SyntacticType test_5722_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5722_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5722() { testValid(test_5722_sup,test_5722_sub); }

		private static final SyntacticType test_5723_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5723_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5723() { testValid(test_5723_sup,test_5723_sub); }

		private static final SyntacticType test_5724_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5724_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5724() { testValid(test_5724_sup,test_5724_sub); }

		private static final SyntacticType test_5725_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5725_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5725() { testValid(test_5725_sup,test_5725_sub); }

		private static final SyntacticType test_5726_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5726_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5726() { testValid(test_5726_sup,test_5726_sub); }

		private static final SyntacticType test_5727_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5727_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5727() { testValid(test_5727_sup,test_5727_sub); }

		private static final SyntacticType test_5728_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5728_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5728() { testValid(test_5728_sup,test_5728_sub); }

		private static final SyntacticType test_5729_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5729_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5729() { testValid(test_5729_sup,test_5729_sub); }

		private static final SyntacticType test_5730_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5730_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5730() { testValid(test_5730_sup,test_5730_sub); }

		private static final SyntacticType test_5731_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5731_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5731() { testValid(test_5731_sup,test_5731_sub); }

		private static final SyntacticType test_5732_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5732_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5732() { testValid(test_5732_sup,test_5732_sub); }

		private static final SyntacticType test_5733_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5733_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5733() { testValid(test_5733_sup,test_5733_sub); }

		private static final SyntacticType test_5734_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5734_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5734() { testValid(test_5734_sup,test_5734_sub); }

		private static final SyntacticType test_5735_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5735_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5735() { testValid(test_5735_sup,test_5735_sub); }

		private static final SyntacticType test_5736_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5736_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5736() { testValid(test_5736_sup,test_5736_sub); }

		private static final SyntacticType test_5737_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5737_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5737() { testValid(test_5737_sup,test_5737_sub); }

		private static final SyntacticType test_5738_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5738_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5738() { testValid(test_5738_sup,test_5738_sub); }

		private static final SyntacticType test_5739_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5739_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5739() { testValid(test_5739_sup,test_5739_sub); }

		private static final SyntacticType test_5740_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5740_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5740() { testValid(test_5740_sup,test_5740_sub); }

		private static final SyntacticType test_5741_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5741_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5741() { testValid(test_5741_sup,test_5741_sub); }

		private static final SyntacticType test_5742_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5742_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5742() { testValid(test_5742_sup,test_5742_sub); }

		private static final SyntacticType test_5743_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5743_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5743() { testValid(test_5743_sup,test_5743_sub); }

		private static final SyntacticType test_5744_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5744_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5744() { testValid(test_5744_sup,test_5744_sub); }

		private static final SyntacticType test_5745_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5745_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5745() { testValid(test_5745_sup,test_5745_sub); }

		private static final SyntacticType test_5746_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5746_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5746() { testInvalid(test_5746_sup,test_5746_sub); }

		private static final SyntacticType test_5747_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5747_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5747() { testValid(test_5747_sup,test_5747_sub); }

		private static final SyntacticType test_5748_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5748_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5748() { testInvalid(test_5748_sup,test_5748_sub); }

		private static final SyntacticType test_5749_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5749_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5749() { testValid(test_5749_sup,test_5749_sub); }

		private static final SyntacticType test_5750_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5750_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5750() { testInvalid(test_5750_sup,test_5750_sub); }

		private static final SyntacticType test_5751_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5751_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5751() { testValid(test_5751_sup,test_5751_sub); }

		private static final SyntacticType test_5752_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5752_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5752() { testValid(test_5752_sup,test_5752_sub); }

		private static final SyntacticType test_5753_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5753_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5753() { testValid(test_5753_sup,test_5753_sub); }

		private static final SyntacticType test_5754_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5754_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5754() { testInvalid(test_5754_sup,test_5754_sub); }

		private static final SyntacticType test_5755_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5755_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5755() { testInvalid(test_5755_sup,test_5755_sub); }

		private static final SyntacticType test_5756_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5756_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5756() { testValid(test_5756_sup,test_5756_sub); }

		private static final SyntacticType test_5757_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5757_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5757() { testInvalid(test_5757_sup,test_5757_sub); }

		private static final SyntacticType test_5758_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5758_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5758() { testInvalid(test_5758_sup,test_5758_sub); }

		private static final SyntacticType test_5759_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5759_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5759() { testValid(test_5759_sup,test_5759_sub); }

		private static final SyntacticType test_5760_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5760_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5760() { testValid(test_5760_sup,test_5760_sub); }

		private static final SyntacticType test_5761_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5761_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5761() { testInvalid(test_5761_sup,test_5761_sub); }

		private static final SyntacticType test_5762_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5762_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5762() { testInvalid(test_5762_sup,test_5762_sub); }

		private static final SyntacticType test_5763_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5763_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5763() { testValid(test_5763_sup,test_5763_sub); }

		private static final SyntacticType test_5764_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5764_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5764() { testInvalid(test_5764_sup,test_5764_sub); }

		private static final SyntacticType test_5765_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5765_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5765() { testValid(test_5765_sup,test_5765_sub); }

		private static final SyntacticType test_5766_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5766_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5766() { testValid(test_5766_sup,test_5766_sub); }

		private static final SyntacticType test_5767_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5767_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5767() { testValid(test_5767_sup,test_5767_sub); }

		private static final SyntacticType test_5768_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5768_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5768() { testValid(test_5768_sup,test_5768_sub); }

		private static final SyntacticType test_5769_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5769_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5769() { testInvalid(test_5769_sup,test_5769_sub); }

		private static final SyntacticType test_5770_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5770_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5770() { testValid(test_5770_sup,test_5770_sub); }

		private static final SyntacticType test_5771_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5771_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5771() { testValid(test_5771_sup,test_5771_sub); }

		private static final SyntacticType test_5772_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5772_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5772() { testInvalid(test_5772_sup,test_5772_sub); }

		private static final SyntacticType test_5773_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5773_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5773() { testValid(test_5773_sup,test_5773_sub); }

		private static final SyntacticType test_5774_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5774_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5774() { testValid(test_5774_sup,test_5774_sub); }

		private static final SyntacticType test_5775_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5775_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5775() { testValid(test_5775_sup,test_5775_sub); }

		private static final SyntacticType test_5776_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5776_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5776() { testValid(test_5776_sup,test_5776_sub); }

		private static final SyntacticType test_5777_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5777_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5777() { testInvalid(test_5777_sup,test_5777_sub); }

		private static final SyntacticType test_5778_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5778_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5778() { testValid(test_5778_sup,test_5778_sub); }

		private static final SyntacticType test_5779_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5779_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5779() { testValid(test_5779_sup,test_5779_sub); }

		private static final SyntacticType test_5780_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5780_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5780() { testValid(test_5780_sup,test_5780_sub); }

		private static final SyntacticType test_5781_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5781_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5781() { testValid(test_5781_sup,test_5781_sub); }

		private static final SyntacticType test_5782_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5782_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5782() { testValid(test_5782_sup,test_5782_sub); }

		private static final SyntacticType test_5783_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5783_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5783() { testValid(test_5783_sup,test_5783_sub); }

		private static final SyntacticType test_5784_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5784_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5784() { testValid(test_5784_sup,test_5784_sub); }

		private static final SyntacticType test_5785_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5785_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5785() { testInvalid(test_5785_sup,test_5785_sub); }

		private static final SyntacticType test_5786_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5786_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5786() { testValid(test_5786_sup,test_5786_sub); }

		private static final SyntacticType test_5787_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5787_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5787() { testValid(test_5787_sup,test_5787_sub); }

		private static final SyntacticType test_5788_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5788_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5788() { testInvalid(test_5788_sup,test_5788_sub); }

		private static final SyntacticType test_5789_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5789_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5789() { testInvalid(test_5789_sup,test_5789_sub); }

		private static final SyntacticType test_5790_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5790_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5790() { testInvalid(test_5790_sup,test_5790_sub); }

		private static final SyntacticType test_5791_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5791_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5791() { testInvalid(test_5791_sup,test_5791_sub); }

		private static final SyntacticType test_5792_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5792_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5792() { testInvalid(test_5792_sup,test_5792_sub); }

		private static final SyntacticType test_5793_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5793_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5793() { testInvalid(test_5793_sup,test_5793_sub); }

		private static final SyntacticType test_5794_sup = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5794_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5794() { testInvalid(test_5794_sup,test_5794_sub); }

		private static final SyntacticType test_5795_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5795_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5795() { testValid(test_5795_sup,test_5795_sub); }

		private static final SyntacticType test_5796_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5796_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5796() { testValid(test_5796_sup,test_5796_sub); }

		private static final SyntacticType test_5797_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5797_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5797() { testValid(test_5797_sup,test_5797_sub); }

		private static final SyntacticType test_5798_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5798_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5798() { testValid(test_5798_sup,test_5798_sub); }

		private static final SyntacticType test_5799_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5799_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5799() { testValid(test_5799_sup,test_5799_sub); }

		private static final SyntacticType test_5800_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5800_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5800() { testValid(test_5800_sup,test_5800_sub); }

		private static final SyntacticType test_5801_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5801_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5801() { testValid(test_5801_sup,test_5801_sub); }

		private static final SyntacticType test_5802_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5802_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5802() { testValid(test_5802_sup,test_5802_sub); }

		private static final SyntacticType test_5803_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5803_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5803() { testValid(test_5803_sup,test_5803_sub); }

		private static final SyntacticType test_5804_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5804_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5804() { testValid(test_5804_sup,test_5804_sub); }

		private static final SyntacticType test_5805_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5805_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5805() { testValid(test_5805_sup,test_5805_sub); }

		private static final SyntacticType test_5806_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5806_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5806() { testValid(test_5806_sup,test_5806_sub); }

		private static final SyntacticType test_5807_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5807_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5807() { testValid(test_5807_sup,test_5807_sub); }

		private static final SyntacticType test_5808_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5808_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5808() { testValid(test_5808_sup,test_5808_sub); }

		private static final SyntacticType test_5809_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5809_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5809() { testValid(test_5809_sup,test_5809_sub); }

		private static final SyntacticType test_5810_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5810_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5810() { testValid(test_5810_sup,test_5810_sub); }

		private static final SyntacticType test_5811_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5811_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5811() { testValid(test_5811_sup,test_5811_sub); }

		private static final SyntacticType test_5812_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5812_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5812() { testValid(test_5812_sup,test_5812_sub); }

		private static final SyntacticType test_5813_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5813_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5813() { testValid(test_5813_sup,test_5813_sub); }

		private static final SyntacticType test_5814_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5814_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5814() { testValid(test_5814_sup,test_5814_sub); }

		private static final SyntacticType test_5815_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5815_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5815() { testValid(test_5815_sup,test_5815_sub); }

		private static final SyntacticType test_5816_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5816_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5816() { testValid(test_5816_sup,test_5816_sub); }

		private static final SyntacticType test_5817_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5817_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5817() { testValid(test_5817_sup,test_5817_sub); }

		private static final SyntacticType test_5818_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5818_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5818() { testValid(test_5818_sup,test_5818_sub); }

		private static final SyntacticType test_5819_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5819_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5819() { testValid(test_5819_sup,test_5819_sub); }

		private static final SyntacticType test_5820_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5820_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5820() { testValid(test_5820_sup,test_5820_sub); }

		private static final SyntacticType test_5821_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5821_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5821() { testValid(test_5821_sup,test_5821_sub); }

		private static final SyntacticType test_5822_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5822_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5822() { testValid(test_5822_sup,test_5822_sub); }

		private static final SyntacticType test_5823_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5823_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5823() { testValid(test_5823_sup,test_5823_sub); }

		private static final SyntacticType test_5824_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5824_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5824() { testValid(test_5824_sup,test_5824_sub); }

		private static final SyntacticType test_5825_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5825_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5825() { testValid(test_5825_sup,test_5825_sub); }

		private static final SyntacticType test_5826_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5826_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5826() { testValid(test_5826_sup,test_5826_sub); }

		private static final SyntacticType test_5827_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5827_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5827() { testValid(test_5827_sup,test_5827_sub); }

		private static final SyntacticType test_5828_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5828_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5828() { testValid(test_5828_sup,test_5828_sub); }

		private static final SyntacticType test_5829_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5829_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5829() { testValid(test_5829_sup,test_5829_sub); }

		private static final SyntacticType test_5830_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5830_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5830() { testValid(test_5830_sup,test_5830_sub); }

		private static final SyntacticType test_5831_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5831_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5831() { testValid(test_5831_sup,test_5831_sub); }

		private static final SyntacticType test_5832_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5832_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5832() { testValid(test_5832_sup,test_5832_sub); }

		private static final SyntacticType test_5833_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5833_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5833() { testValid(test_5833_sup,test_5833_sub); }

		private static final SyntacticType test_5834_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5834_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5834() { testValid(test_5834_sup,test_5834_sub); }

		private static final SyntacticType test_5835_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5835_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5835() { testValid(test_5835_sup,test_5835_sub); }

		private static final SyntacticType test_5836_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5836_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5836() { testValid(test_5836_sup,test_5836_sub); }

		private static final SyntacticType test_5837_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5837_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5837() { testValid(test_5837_sup,test_5837_sub); }

		private static final SyntacticType test_5838_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5838_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5838() { testValid(test_5838_sup,test_5838_sub); }

		private static final SyntacticType test_5839_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5839_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5839() { testValid(test_5839_sup,test_5839_sub); }

		private static final SyntacticType test_5840_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5840_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5840() { testValid(test_5840_sup,test_5840_sub); }

		private static final SyntacticType test_5841_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5841_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5841() { testValid(test_5841_sup,test_5841_sub); }

		private static final SyntacticType test_5842_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5842_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5842() { testValid(test_5842_sup,test_5842_sub); }

		private static final SyntacticType test_5843_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5843_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5843() { testValid(test_5843_sup,test_5843_sub); }

		private static final SyntacticType test_5844_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5844_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5844() { testValid(test_5844_sup,test_5844_sub); }

		private static final SyntacticType test_5845_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5845_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5845() { testValid(test_5845_sup,test_5845_sub); }

		private static final SyntacticType test_5846_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5846_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5846() { testValid(test_5846_sup,test_5846_sub); }

		private static final SyntacticType test_5847_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5847_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5847() { testValid(test_5847_sup,test_5847_sub); }

		private static final SyntacticType test_5848_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5848_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5848() { testValid(test_5848_sup,test_5848_sub); }

		private static final SyntacticType test_5849_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5849_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5849() { testValid(test_5849_sup,test_5849_sub); }

		private static final SyntacticType test_5850_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5850_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5850() { testValid(test_5850_sup,test_5850_sub); }

		private static final SyntacticType test_5851_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5851_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5851() { testValid(test_5851_sup,test_5851_sub); }

		private static final SyntacticType test_5852_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5852_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5852() { testValid(test_5852_sup,test_5852_sub); }

		private static final SyntacticType test_5853_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5853_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5853() { testValid(test_5853_sup,test_5853_sub); }

		private static final SyntacticType test_5854_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5854_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5854() { testValid(test_5854_sup,test_5854_sub); }

		private static final SyntacticType test_5855_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5855_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5855() { testValid(test_5855_sup,test_5855_sub); }

		private static final SyntacticType test_5856_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5856_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5856() { testValid(test_5856_sup,test_5856_sub); }

		private static final SyntacticType test_5857_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5857_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5857() { testValid(test_5857_sup,test_5857_sub); }

		private static final SyntacticType test_5858_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5858_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5858() { testValid(test_5858_sup,test_5858_sub); }

		private static final SyntacticType test_5859_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5859_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5859() { testValid(test_5859_sup,test_5859_sub); }

		private static final SyntacticType test_5860_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5860_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5860() { testValid(test_5860_sup,test_5860_sub); }

		private static final SyntacticType test_5861_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5861_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5861() { testValid(test_5861_sup,test_5861_sub); }

		private static final SyntacticType test_5862_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5862_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5862() { testValid(test_5862_sup,test_5862_sub); }

		private static final SyntacticType test_5863_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5863_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5863() { testValid(test_5863_sup,test_5863_sub); }

		private static final SyntacticType test_5864_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5864_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5864() { testValid(test_5864_sup,test_5864_sub); }

		private static final SyntacticType test_5865_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5865_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5865() { testValid(test_5865_sup,test_5865_sub); }

		private static final SyntacticType test_5866_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5866_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5866() { testValid(test_5866_sup,test_5866_sub); }

		private static final SyntacticType test_5867_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5867_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5867() { testValid(test_5867_sup,test_5867_sub); }

		private static final SyntacticType test_5868_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5868_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5868() { testValid(test_5868_sup,test_5868_sub); }

		private static final SyntacticType test_5869_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5869_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5869() { testValid(test_5869_sup,test_5869_sub); }

		private static final SyntacticType test_5870_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5870_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5870() { testValid(test_5870_sup,test_5870_sub); }

		private static final SyntacticType test_5871_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5871_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5871() { testValid(test_5871_sup,test_5871_sub); }

		private static final SyntacticType test_5872_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5872_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5872() { testValid(test_5872_sup,test_5872_sub); }

		private static final SyntacticType test_5873_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5873_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5873() { testValid(test_5873_sup,test_5873_sub); }

		private static final SyntacticType test_5874_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5874_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5874() { testValid(test_5874_sup,test_5874_sub); }

		private static final SyntacticType test_5875_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5875_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5875() { testValid(test_5875_sup,test_5875_sub); }

		private static final SyntacticType test_5876_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5876_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5876() { testValid(test_5876_sup,test_5876_sub); }

		private static final SyntacticType test_5877_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5877_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5877() { testValid(test_5877_sup,test_5877_sub); }

		private static final SyntacticType test_5878_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5878_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5878() { testValid(test_5878_sup,test_5878_sub); }

		private static final SyntacticType test_5879_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5879_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5879() { testValid(test_5879_sup,test_5879_sub); }

		private static final SyntacticType test_5880_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5880_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5880() { testValid(test_5880_sup,test_5880_sub); }

		private static final SyntacticType test_5881_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5881_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5881() { testValid(test_5881_sup,test_5881_sub); }

		private static final SyntacticType test_5882_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5882_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5882() { testValid(test_5882_sup,test_5882_sub); }

		private static final SyntacticType test_5883_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5883_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5883() { testValid(test_5883_sup,test_5883_sub); }

		private static final SyntacticType test_5884_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5884_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5884() { testValid(test_5884_sup,test_5884_sub); }

		private static final SyntacticType test_5885_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5885_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5885() { testValid(test_5885_sup,test_5885_sub); }

		private static final SyntacticType test_5886_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5886_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5886() { testValid(test_5886_sup,test_5886_sub); }

		private static final SyntacticType test_5887_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5887_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5887() { testValid(test_5887_sup,test_5887_sub); }

		private static final SyntacticType test_5888_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5888_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5888() { testValid(test_5888_sup,test_5888_sub); }

		private static final SyntacticType test_5889_sup = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		private static final SyntacticType test_5889_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5889() { testValid(test_5889_sup,test_5889_sub); }

		private static final SyntacticType test_5890_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5890_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5890() { testInvalid(test_5890_sup,test_5890_sub); }

		private static final SyntacticType test_5891_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5891_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5891() { testInvalid(test_5891_sup,test_5891_sub); }

		private static final SyntacticType test_5892_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5892_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5892() { testInvalid(test_5892_sup,test_5892_sub); }

		private static final SyntacticType test_5893_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5893_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5893() { testInvalid(test_5893_sup,test_5893_sub); }

		private static final SyntacticType test_5894_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5894_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5894() { testInvalid(test_5894_sup,test_5894_sub); }

		private static final SyntacticType test_5895_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5895_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5895() { testInvalid(test_5895_sup,test_5895_sub); }

		private static final SyntacticType test_5896_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5896_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5896() { testInvalid(test_5896_sup,test_5896_sub); }

		private static final SyntacticType test_5897_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5897_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5897() { testInvalid(test_5897_sup,test_5897_sub); }

		private static final SyntacticType test_5898_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5898_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5898() { testInvalid(test_5898_sup,test_5898_sub); }

		private static final SyntacticType test_5899_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5899_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5899() { testInvalid(test_5899_sup,test_5899_sub); }

		private static final SyntacticType test_5900_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5900_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5900() { testInvalid(test_5900_sup,test_5900_sub); }

		private static final SyntacticType test_5901_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5901_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5901() { testInvalid(test_5901_sup,test_5901_sub); }

		private static final SyntacticType test_5902_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5902_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5902() { testInvalid(test_5902_sup,test_5902_sub); }

		private static final SyntacticType test_5903_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5903_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5903() { testInvalid(test_5903_sup,test_5903_sub); }

		private static final SyntacticType test_5904_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5904_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5904() { testInvalid(test_5904_sup,test_5904_sub); }

		private static final SyntacticType test_5905_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5905_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_5905() { testInvalid(test_5905_sup,test_5905_sub); }

		private static final SyntacticType test_5906_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5906_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_5906() { testInvalid(test_5906_sup,test_5906_sub); }

		private static final SyntacticType test_5907_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5907_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_5907() { testInvalid(test_5907_sup,test_5907_sub); }

		private static final SyntacticType test_5908_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5908_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_5908() { testInvalid(test_5908_sup,test_5908_sub); }

		private static final SyntacticType test_5909_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5909_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_5909() { testInvalid(test_5909_sup,test_5909_sub); }

		private static final SyntacticType test_5910_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5910_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_5910() { testInvalid(test_5910_sup,test_5910_sub); }

		private static final SyntacticType test_5911_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5911_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_5911() { testInvalid(test_5911_sup,test_5911_sub); }

		private static final SyntacticType test_5912_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5912_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_5912() { testInvalid(test_5912_sup,test_5912_sub); }

		private static final SyntacticType test_5913_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5913_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_5913() { testInvalid(test_5913_sup,test_5913_sub); }

		private static final SyntacticType test_5914_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5914_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_5914() { testInvalid(test_5914_sup,test_5914_sub); }

		private static final SyntacticType test_5915_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5915_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_5915() { testInvalid(test_5915_sup,test_5915_sub); }

		private static final SyntacticType test_5916_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5916_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_5916() { testInvalid(test_5916_sup,test_5916_sub); }

		private static final SyntacticType test_5917_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5917_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_5917() { testInvalid(test_5917_sup,test_5917_sub); }

		private static final SyntacticType test_5918_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5918_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_5918() { testInvalid(test_5918_sup,test_5918_sub); }

		private static final SyntacticType test_5919_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5919_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_5919() { testInvalid(test_5919_sup,test_5919_sub); }

		private static final SyntacticType test_5920_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5920_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_5920() { testInvalid(test_5920_sup,test_5920_sub); }

		private static final SyntacticType test_5921_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5921_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_5921() { testInvalid(test_5921_sup,test_5921_sub); }

		private static final SyntacticType test_5922_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5922_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_5922() { testInvalid(test_5922_sup,test_5922_sub); }

		private static final SyntacticType test_5923_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5923_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_5923() { testInvalid(test_5923_sup,test_5923_sub); }

		private static final SyntacticType test_5924_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5924_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_5924() { testInvalid(test_5924_sup,test_5924_sub); }

		private static final SyntacticType test_5925_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5925_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_5925() { testInvalid(test_5925_sup,test_5925_sub); }

		private static final SyntacticType test_5926_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5926_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_5926() { testInvalid(test_5926_sup,test_5926_sub); }

		private static final SyntacticType test_5927_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5927_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_5927() { testInvalid(test_5927_sup,test_5927_sub); }

		private static final SyntacticType test_5928_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5928_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_5928() { testInvalid(test_5928_sup,test_5928_sub); }

		private static final SyntacticType test_5929_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5929_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_5929() { testInvalid(test_5929_sup,test_5929_sub); }

		private static final SyntacticType test_5930_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5930_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_5930() { testInvalid(test_5930_sup,test_5930_sub); }

		private static final SyntacticType test_5931_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5931_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_5931() { testInvalid(test_5931_sup,test_5931_sub); }

		private static final SyntacticType test_5932_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5932_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_5932() { testInvalid(test_5932_sup,test_5932_sub); }

		private static final SyntacticType test_5933_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5933_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_5933() { testInvalid(test_5933_sup,test_5933_sub); }

		private static final SyntacticType test_5934_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5934_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_5934() { testInvalid(test_5934_sup,test_5934_sub); }

		private static final SyntacticType test_5935_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5935_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_5935() { testInvalid(test_5935_sup,test_5935_sub); }

		private static final SyntacticType test_5936_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5936_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_5936() { testInvalid(test_5936_sup,test_5936_sub); }

		private static final SyntacticType test_5937_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5937_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_5937() { testInvalid(test_5937_sup,test_5937_sub); }

		private static final SyntacticType test_5938_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5938_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_5938() { testInvalid(test_5938_sup,test_5938_sub); }

		private static final SyntacticType test_5939_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5939_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_5939() { testInvalid(test_5939_sup,test_5939_sub); }

		private static final SyntacticType test_5940_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5940_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_5940() { testInvalid(test_5940_sup,test_5940_sub); }

		private static final SyntacticType test_5941_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5941_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_5941() { testInvalid(test_5941_sup,test_5941_sub); }

		private static final SyntacticType test_5942_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5942_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_5942() { testInvalid(test_5942_sup,test_5942_sub); }

		private static final SyntacticType test_5943_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5943_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_5943() { testInvalid(test_5943_sup,test_5943_sub); }

		private static final SyntacticType test_5944_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5944_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_5944() { testInvalid(test_5944_sup,test_5944_sub); }

		private static final SyntacticType test_5945_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5945_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_5945() { testInvalid(test_5945_sup,test_5945_sub); }

		private static final SyntacticType test_5946_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5946_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_5946() { testInvalid(test_5946_sup,test_5946_sub); }

		private static final SyntacticType test_5947_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5947_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_5947() { testInvalid(test_5947_sup,test_5947_sub); }

		private static final SyntacticType test_5948_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5948_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_5948() { testInvalid(test_5948_sup,test_5948_sub); }

		private static final SyntacticType test_5949_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5949_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_5949() { testInvalid(test_5949_sup,test_5949_sub); }

		private static final SyntacticType test_5950_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5950_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_5950() { testInvalid(test_5950_sup,test_5950_sub); }

		private static final SyntacticType test_5951_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5951_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_5951() { testInvalid(test_5951_sup,test_5951_sub); }

		private static final SyntacticType test_5952_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5952_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_5952() { testValid(test_5952_sup,test_5952_sub); }

		private static final SyntacticType test_5953_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5953_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_5953() { testInvalid(test_5953_sup,test_5953_sub); }

		private static final SyntacticType test_5954_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5954_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_5954() { testInvalid(test_5954_sup,test_5954_sub); }

		private static final SyntacticType test_5955_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5955_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_5955() { testInvalid(test_5955_sup,test_5955_sub); }

		private static final SyntacticType test_5956_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5956_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_5956() { testInvalid(test_5956_sup,test_5956_sub); }

		private static final SyntacticType test_5957_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5957_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_5957() { testInvalid(test_5957_sup,test_5957_sub); }

		private static final SyntacticType test_5958_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5958_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_5958() { testInvalid(test_5958_sup,test_5958_sub); }

		private static final SyntacticType test_5959_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5959_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_5959() { testInvalid(test_5959_sup,test_5959_sub); }

		private static final SyntacticType test_5960_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5960_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_5960() { testInvalid(test_5960_sup,test_5960_sub); }

		private static final SyntacticType test_5961_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5961_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_5961() { testInvalid(test_5961_sup,test_5961_sub); }

		private static final SyntacticType test_5962_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5962_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_5962() { testInvalid(test_5962_sup,test_5962_sub); }

		private static final SyntacticType test_5963_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5963_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_5963() { testValid(test_5963_sup,test_5963_sub); }

		private static final SyntacticType test_5964_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5964_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_5964() { testInvalid(test_5964_sup,test_5964_sub); }

		private static final SyntacticType test_5965_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5965_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_5965() { testInvalid(test_5965_sup,test_5965_sub); }

		private static final SyntacticType test_5966_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5966_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_5966() { testValid(test_5966_sup,test_5966_sub); }

		private static final SyntacticType test_5967_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5967_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_5967() { testInvalid(test_5967_sup,test_5967_sub); }

		private static final SyntacticType test_5968_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5968_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_5968() { testInvalid(test_5968_sup,test_5968_sub); }

		private static final SyntacticType test_5969_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5969_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_5969() { testInvalid(test_5969_sup,test_5969_sub); }

		private static final SyntacticType test_5970_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5970_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_5970() { testInvalid(test_5970_sup,test_5970_sub); }

		private static final SyntacticType test_5971_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5971_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_5971() { testInvalid(test_5971_sup,test_5971_sub); }

		private static final SyntacticType test_5972_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5972_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_5972() { testInvalid(test_5972_sup,test_5972_sub); }

		private static final SyntacticType test_5973_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5973_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_5973() { testInvalid(test_5973_sup,test_5973_sub); }

		private static final SyntacticType test_5974_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5974_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_5974() { testInvalid(test_5974_sup,test_5974_sub); }

		private static final SyntacticType test_5975_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5975_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_5975() { testInvalid(test_5975_sup,test_5975_sub); }

		private static final SyntacticType test_5976_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5976_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_5976() { testInvalid(test_5976_sup,test_5976_sub); }

		private static final SyntacticType test_5977_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5977_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_5977() { testInvalid(test_5977_sup,test_5977_sub); }

		private static final SyntacticType test_5978_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5978_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_5978() { testInvalid(test_5978_sup,test_5978_sub); }

		private static final SyntacticType test_5979_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5979_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_5979() { testInvalid(test_5979_sup,test_5979_sub); }

		private static final SyntacticType test_5980_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5980_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_5980() { testInvalid(test_5980_sup,test_5980_sub); }

		private static final SyntacticType test_5981_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5981_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_5981() { testInvalid(test_5981_sup,test_5981_sub); }

		private static final SyntacticType test_5982_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5982_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_5982() { testInvalid(test_5982_sup,test_5982_sub); }

		private static final SyntacticType test_5983_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5983_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_5983() { testInvalid(test_5983_sup,test_5983_sub); }

		private static final SyntacticType test_5984_sup = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		private static final SyntacticType test_5984_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_5984() { testInvalid(test_5984_sup,test_5984_sub); }

		private static final SyntacticType test_5985_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5985_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_5985() { testValid(test_5985_sup,test_5985_sub); }

		private static final SyntacticType test_5986_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5986_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_5986() { testValid(test_5986_sup,test_5986_sub); }

		private static final SyntacticType test_5987_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5987_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_5987() { testValid(test_5987_sup,test_5987_sub); }

		private static final SyntacticType test_5988_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5988_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_5988() { testValid(test_5988_sup,test_5988_sub); }

		private static final SyntacticType test_5989_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5989_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_5989() { testValid(test_5989_sup,test_5989_sub); }

		private static final SyntacticType test_5990_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5990_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_5990() { testValid(test_5990_sup,test_5990_sub); }

		private static final SyntacticType test_5991_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5991_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_5991() { testValid(test_5991_sup,test_5991_sub); }

		private static final SyntacticType test_5992_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5992_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_5992() { testValid(test_5992_sup,test_5992_sub); }

		private static final SyntacticType test_5993_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5993_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_5993() { testValid(test_5993_sup,test_5993_sub); }

		private static final SyntacticType test_5994_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5994_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_5994() { testValid(test_5994_sup,test_5994_sub); }

		private static final SyntacticType test_5995_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5995_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_5995() { testValid(test_5995_sup,test_5995_sub); }

		private static final SyntacticType test_5996_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5996_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_5996() { testValid(test_5996_sup,test_5996_sub); }

		private static final SyntacticType test_5997_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5997_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_5997() { testValid(test_5997_sup,test_5997_sub); }

		private static final SyntacticType test_5998_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5998_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_5998() { testValid(test_5998_sup,test_5998_sub); }

		private static final SyntacticType test_5999_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_5999_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_5999() { testValid(test_5999_sup,test_5999_sub); }

	}
	public static class Part_6 {
		private static final SyntacticType test_6000_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6000_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6000() { testValid(test_6000_sup,test_6000_sub); }

		private static final SyntacticType test_6001_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6001_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6001() { testValid(test_6001_sup,test_6001_sub); }

		private static final SyntacticType test_6002_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6002_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6002() { testValid(test_6002_sup,test_6002_sub); }

		private static final SyntacticType test_6003_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6003_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6003() { testValid(test_6003_sup,test_6003_sub); }

		private static final SyntacticType test_6004_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6004_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6004() { testValid(test_6004_sup,test_6004_sub); }

		private static final SyntacticType test_6005_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6005_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6005() { testValid(test_6005_sup,test_6005_sub); }

		private static final SyntacticType test_6006_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6006_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6006() { testValid(test_6006_sup,test_6006_sub); }

		private static final SyntacticType test_6007_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6007_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6007() { testValid(test_6007_sup,test_6007_sub); }

		private static final SyntacticType test_6008_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6008_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6008() { testValid(test_6008_sup,test_6008_sub); }

		private static final SyntacticType test_6009_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6009_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6009() { testValid(test_6009_sup,test_6009_sub); }

		private static final SyntacticType test_6010_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6010_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6010() { testValid(test_6010_sup,test_6010_sub); }

		private static final SyntacticType test_6011_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6011_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6011() { testValid(test_6011_sup,test_6011_sub); }

		private static final SyntacticType test_6012_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6012_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6012() { testValid(test_6012_sup,test_6012_sub); }

		private static final SyntacticType test_6013_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6013_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6013() { testValid(test_6013_sup,test_6013_sub); }

		private static final SyntacticType test_6014_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6014_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6014() { testValid(test_6014_sup,test_6014_sub); }

		private static final SyntacticType test_6015_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6015_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6015() { testValid(test_6015_sup,test_6015_sub); }

		private static final SyntacticType test_6016_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6016_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6016() { testValid(test_6016_sup,test_6016_sub); }

		private static final SyntacticType test_6017_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6017_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6017() { testValid(test_6017_sup,test_6017_sub); }

		private static final SyntacticType test_6018_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6018_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6018() { testValid(test_6018_sup,test_6018_sub); }

		private static final SyntacticType test_6019_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6019_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6019() { testValid(test_6019_sup,test_6019_sub); }

		private static final SyntacticType test_6020_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6020_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6020() { testValid(test_6020_sup,test_6020_sub); }

		private static final SyntacticType test_6021_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6021_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6021() { testValid(test_6021_sup,test_6021_sub); }

		private static final SyntacticType test_6022_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6022_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6022() { testValid(test_6022_sup,test_6022_sub); }

		private static final SyntacticType test_6023_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6023_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6023() { testValid(test_6023_sup,test_6023_sub); }

		private static final SyntacticType test_6024_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6024_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6024() { testValid(test_6024_sup,test_6024_sub); }

		private static final SyntacticType test_6025_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6025_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6025() { testValid(test_6025_sup,test_6025_sub); }

		private static final SyntacticType test_6026_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6026_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6026() { testValid(test_6026_sup,test_6026_sub); }

		private static final SyntacticType test_6027_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6027_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6027() { testValid(test_6027_sup,test_6027_sub); }

		private static final SyntacticType test_6028_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6028_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6028() { testValid(test_6028_sup,test_6028_sub); }

		private static final SyntacticType test_6029_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6029_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6029() { testValid(test_6029_sup,test_6029_sub); }

		private static final SyntacticType test_6030_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6030_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6030() { testValid(test_6030_sup,test_6030_sub); }

		private static final SyntacticType test_6031_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6031_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6031() { testInvalid(test_6031_sup,test_6031_sub); }

		private static final SyntacticType test_6032_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6032_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6032() { testValid(test_6032_sup,test_6032_sub); }

		private static final SyntacticType test_6033_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6033_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6033() { testInvalid(test_6033_sup,test_6033_sub); }

		private static final SyntacticType test_6034_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6034_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6034() { testValid(test_6034_sup,test_6034_sub); }

		private static final SyntacticType test_6035_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6035_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6035() { testInvalid(test_6035_sup,test_6035_sub); }

		private static final SyntacticType test_6036_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6036_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6036() { testValid(test_6036_sup,test_6036_sub); }

		private static final SyntacticType test_6037_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6037_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6037() { testValid(test_6037_sup,test_6037_sub); }

		private static final SyntacticType test_6038_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6038_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6038() { testValid(test_6038_sup,test_6038_sub); }

		private static final SyntacticType test_6039_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6039_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6039() { testInvalid(test_6039_sup,test_6039_sub); }

		private static final SyntacticType test_6040_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6040_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6040() { testInvalid(test_6040_sup,test_6040_sub); }

		private static final SyntacticType test_6041_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6041_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6041() { testValid(test_6041_sup,test_6041_sub); }

		private static final SyntacticType test_6042_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6042_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6042() { testInvalid(test_6042_sup,test_6042_sub); }

		private static final SyntacticType test_6043_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6043_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6043() { testInvalid(test_6043_sup,test_6043_sub); }

		private static final SyntacticType test_6044_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6044_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6044() { testValid(test_6044_sup,test_6044_sub); }

		private static final SyntacticType test_6045_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6045_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6045() { testValid(test_6045_sup,test_6045_sub); }

		private static final SyntacticType test_6046_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6046_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6046() { testInvalid(test_6046_sup,test_6046_sub); }

		private static final SyntacticType test_6047_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6047_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6047() { testInvalid(test_6047_sup,test_6047_sub); }

		private static final SyntacticType test_6048_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6048_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6048() { testValid(test_6048_sup,test_6048_sub); }

		private static final SyntacticType test_6049_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6049_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6049() { testInvalid(test_6049_sup,test_6049_sub); }

		private static final SyntacticType test_6050_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6050_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6050() { testValid(test_6050_sup,test_6050_sub); }

		private static final SyntacticType test_6051_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6051_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6051() { testValid(test_6051_sup,test_6051_sub); }

		private static final SyntacticType test_6052_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6052_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6052() { testValid(test_6052_sup,test_6052_sub); }

		private static final SyntacticType test_6053_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6053_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6053() { testValid(test_6053_sup,test_6053_sub); }

		private static final SyntacticType test_6054_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6054_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6054() { testInvalid(test_6054_sup,test_6054_sub); }

		private static final SyntacticType test_6055_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6055_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6055() { testValid(test_6055_sup,test_6055_sub); }

		private static final SyntacticType test_6056_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6056_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6056() { testValid(test_6056_sup,test_6056_sub); }

		private static final SyntacticType test_6057_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6057_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6057() { testInvalid(test_6057_sup,test_6057_sub); }

		private static final SyntacticType test_6058_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6058_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6058() { testValid(test_6058_sup,test_6058_sub); }

		private static final SyntacticType test_6059_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6059_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6059() { testValid(test_6059_sup,test_6059_sub); }

		private static final SyntacticType test_6060_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6060_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6060() { testValid(test_6060_sup,test_6060_sub); }

		private static final SyntacticType test_6061_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6061_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6061() { testValid(test_6061_sup,test_6061_sub); }

		private static final SyntacticType test_6062_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6062_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6062() { testInvalid(test_6062_sup,test_6062_sub); }

		private static final SyntacticType test_6063_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6063_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6063() { testValid(test_6063_sup,test_6063_sub); }

		private static final SyntacticType test_6064_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6064_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6064() { testValid(test_6064_sup,test_6064_sub); }

		private static final SyntacticType test_6065_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6065_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6065() { testValid(test_6065_sup,test_6065_sub); }

		private static final SyntacticType test_6066_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6066_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6066() { testValid(test_6066_sup,test_6066_sub); }

		private static final SyntacticType test_6067_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6067_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6067() { testValid(test_6067_sup,test_6067_sub); }

		private static final SyntacticType test_6068_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6068_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6068() { testValid(test_6068_sup,test_6068_sub); }

		private static final SyntacticType test_6069_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6069_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6069() { testValid(test_6069_sup,test_6069_sub); }

		private static final SyntacticType test_6070_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6070_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6070() { testInvalid(test_6070_sup,test_6070_sub); }

		private static final SyntacticType test_6071_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6071_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6071() { testValid(test_6071_sup,test_6071_sub); }

		private static final SyntacticType test_6072_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6072_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6072() { testValid(test_6072_sup,test_6072_sub); }

		private static final SyntacticType test_6073_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6073_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6073() { testInvalid(test_6073_sup,test_6073_sub); }

		private static final SyntacticType test_6074_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6074_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6074() { testInvalid(test_6074_sup,test_6074_sub); }

		private static final SyntacticType test_6075_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6075_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6075() { testInvalid(test_6075_sup,test_6075_sub); }

		private static final SyntacticType test_6076_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6076_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6076() { testInvalid(test_6076_sup,test_6076_sub); }

		private static final SyntacticType test_6077_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6077_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6077() { testInvalid(test_6077_sup,test_6077_sub); }

		private static final SyntacticType test_6078_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6078_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6078() { testInvalid(test_6078_sup,test_6078_sub); }

		private static final SyntacticType test_6079_sup = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		private static final SyntacticType test_6079_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6079() { testInvalid(test_6079_sup,test_6079_sub); }

		private static final SyntacticType test_6080_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6080_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6080() { testValid(test_6080_sup,test_6080_sub); }

		private static final SyntacticType test_6081_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6081_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6081() { testValid(test_6081_sup,test_6081_sub); }

		private static final SyntacticType test_6082_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6082_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6082() { testValid(test_6082_sup,test_6082_sub); }

		private static final SyntacticType test_6083_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6083_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6083() { testValid(test_6083_sup,test_6083_sub); }

		private static final SyntacticType test_6084_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6084_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6084() { testValid(test_6084_sup,test_6084_sub); }

		private static final SyntacticType test_6085_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6085_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6085() { testValid(test_6085_sup,test_6085_sub); }

		private static final SyntacticType test_6086_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6086_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6086() { testValid(test_6086_sup,test_6086_sub); }

		private static final SyntacticType test_6087_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6087_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6087() { testValid(test_6087_sup,test_6087_sub); }

		private static final SyntacticType test_6088_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6088_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6088() { testValid(test_6088_sup,test_6088_sub); }

		private static final SyntacticType test_6089_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6089_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6089() { testValid(test_6089_sup,test_6089_sub); }

		private static final SyntacticType test_6090_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6090_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6090() { testValid(test_6090_sup,test_6090_sub); }

		private static final SyntacticType test_6091_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6091_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6091() { testValid(test_6091_sup,test_6091_sub); }

		private static final SyntacticType test_6092_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6092_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6092() { testValid(test_6092_sup,test_6092_sub); }

		private static final SyntacticType test_6093_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6093_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6093() { testValid(test_6093_sup,test_6093_sub); }

		private static final SyntacticType test_6094_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6094_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6094() { testValid(test_6094_sup,test_6094_sub); }

		private static final SyntacticType test_6095_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6095_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6095() { testValid(test_6095_sup,test_6095_sub); }

		private static final SyntacticType test_6096_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6096_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6096() { testValid(test_6096_sup,test_6096_sub); }

		private static final SyntacticType test_6097_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6097_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6097() { testValid(test_6097_sup,test_6097_sub); }

		private static final SyntacticType test_6098_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6098_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6098() { testValid(test_6098_sup,test_6098_sub); }

		private static final SyntacticType test_6099_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6099_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6099() { testValid(test_6099_sup,test_6099_sub); }

		private static final SyntacticType test_6100_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6100_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6100() { testValid(test_6100_sup,test_6100_sub); }

		private static final SyntacticType test_6101_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6101_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6101() { testValid(test_6101_sup,test_6101_sub); }

		private static final SyntacticType test_6102_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6102_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6102() { testValid(test_6102_sup,test_6102_sub); }

		private static final SyntacticType test_6103_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6103_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6103() { testValid(test_6103_sup,test_6103_sub); }

		private static final SyntacticType test_6104_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6104_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6104() { testValid(test_6104_sup,test_6104_sub); }

		private static final SyntacticType test_6105_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6105_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6105() { testValid(test_6105_sup,test_6105_sub); }

		private static final SyntacticType test_6106_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6106_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6106() { testValid(test_6106_sup,test_6106_sub); }

		private static final SyntacticType test_6107_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6107_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6107() { testValid(test_6107_sup,test_6107_sub); }

		private static final SyntacticType test_6108_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6108_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6108() { testValid(test_6108_sup,test_6108_sub); }

		private static final SyntacticType test_6109_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6109_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6109() { testValid(test_6109_sup,test_6109_sub); }

		private static final SyntacticType test_6110_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6110_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6110() { testValid(test_6110_sup,test_6110_sub); }

		private static final SyntacticType test_6111_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6111_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6111() { testValid(test_6111_sup,test_6111_sub); }

		private static final SyntacticType test_6112_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6112_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6112() { testValid(test_6112_sup,test_6112_sub); }

		private static final SyntacticType test_6113_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6113_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6113() { testValid(test_6113_sup,test_6113_sub); }

		private static final SyntacticType test_6114_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6114_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6114() { testValid(test_6114_sup,test_6114_sub); }

		private static final SyntacticType test_6115_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6115_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6115() { testValid(test_6115_sup,test_6115_sub); }

		private static final SyntacticType test_6116_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6116_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6116() { testValid(test_6116_sup,test_6116_sub); }

		private static final SyntacticType test_6117_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6117_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6117() { testValid(test_6117_sup,test_6117_sub); }

		private static final SyntacticType test_6118_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6118_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6118() { testValid(test_6118_sup,test_6118_sub); }

		private static final SyntacticType test_6119_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6119_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6119() { testValid(test_6119_sup,test_6119_sub); }

		private static final SyntacticType test_6120_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6120_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6120() { testValid(test_6120_sup,test_6120_sub); }

		private static final SyntacticType test_6121_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6121_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6121() { testValid(test_6121_sup,test_6121_sub); }

		private static final SyntacticType test_6122_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6122_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6122() { testValid(test_6122_sup,test_6122_sub); }

		private static final SyntacticType test_6123_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6123_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6123() { testValid(test_6123_sup,test_6123_sub); }

		private static final SyntacticType test_6124_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6124_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6124() { testInvalid(test_6124_sup,test_6124_sub); }

		private static final SyntacticType test_6125_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6125_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6125() { testValid(test_6125_sup,test_6125_sub); }

		private static final SyntacticType test_6126_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6126_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6126() { testInvalid(test_6126_sup,test_6126_sub); }

		private static final SyntacticType test_6127_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6127_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6127() { testValid(test_6127_sup,test_6127_sub); }

		private static final SyntacticType test_6128_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6128_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6128() { testInvalid(test_6128_sup,test_6128_sub); }

		private static final SyntacticType test_6129_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6129_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6129() { testValid(test_6129_sup,test_6129_sub); }

		private static final SyntacticType test_6130_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6130_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6130() { testInvalid(test_6130_sup,test_6130_sub); }

		private static final SyntacticType test_6131_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6131_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6131() { testValid(test_6131_sup,test_6131_sub); }

		private static final SyntacticType test_6132_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6132_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6132() { testValid(test_6132_sup,test_6132_sub); }

		private static final SyntacticType test_6133_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6133_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6133() { testValid(test_6133_sup,test_6133_sub); }

		private static final SyntacticType test_6134_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6134_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6134() { testInvalid(test_6134_sup,test_6134_sub); }

		private static final SyntacticType test_6135_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6135_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6135() { testInvalid(test_6135_sup,test_6135_sub); }

		private static final SyntacticType test_6136_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6136_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6136() { testValid(test_6136_sup,test_6136_sub); }

		private static final SyntacticType test_6137_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6137_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6137() { testInvalid(test_6137_sup,test_6137_sub); }

		private static final SyntacticType test_6138_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6138_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6138() { testInvalid(test_6138_sup,test_6138_sub); }

		private static final SyntacticType test_6139_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6139_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6139() { testInvalid(test_6139_sup,test_6139_sub); }

		private static final SyntacticType test_6140_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6140_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6140() { testInvalid(test_6140_sup,test_6140_sub); }

		private static final SyntacticType test_6141_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6141_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6141() { testInvalid(test_6141_sup,test_6141_sub); }

		private static final SyntacticType test_6142_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6142_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6142() { testInvalid(test_6142_sup,test_6142_sub); }

		private static final SyntacticType test_6143_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6143_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6143() { testInvalid(test_6143_sup,test_6143_sub); }

		private static final SyntacticType test_6144_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6144_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6144() { testValid(test_6144_sup,test_6144_sub); }

		private static final SyntacticType test_6145_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6145_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6145() { testInvalid(test_6145_sup,test_6145_sub); }

		private static final SyntacticType test_6146_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6146_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6146() { testInvalid(test_6146_sup,test_6146_sub); }

		private static final SyntacticType test_6147_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6147_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6147() { testInvalid(test_6147_sup,test_6147_sub); }

		private static final SyntacticType test_6148_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6148_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6148() { testValid(test_6148_sup,test_6148_sub); }

		private static final SyntacticType test_6149_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6149_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6149() { testInvalid(test_6149_sup,test_6149_sub); }

		private static final SyntacticType test_6150_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6150_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6150() { testInvalid(test_6150_sup,test_6150_sub); }

		private static final SyntacticType test_6151_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6151_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6151() { testInvalid(test_6151_sup,test_6151_sub); }

		private static final SyntacticType test_6152_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6152_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6152() { testInvalid(test_6152_sup,test_6152_sub); }

		private static final SyntacticType test_6153_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6153_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6153() { testValid(test_6153_sup,test_6153_sub); }

		private static final SyntacticType test_6154_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6154_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6154() { testValid(test_6154_sup,test_6154_sub); }

		private static final SyntacticType test_6155_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6155_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6155() { testInvalid(test_6155_sup,test_6155_sub); }

		private static final SyntacticType test_6156_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6156_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6156() { testInvalid(test_6156_sup,test_6156_sub); }

		private static final SyntacticType test_6157_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6157_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6157() { testInvalid(test_6157_sup,test_6157_sub); }

		private static final SyntacticType test_6158_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6158_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6158() { testInvalid(test_6158_sup,test_6158_sub); }

		private static final SyntacticType test_6159_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6159_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6159() { testInvalid(test_6159_sup,test_6159_sub); }

		private static final SyntacticType test_6160_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6160_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6160() { testValid(test_6160_sup,test_6160_sub); }

		private static final SyntacticType test_6161_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6161_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6161() { testValid(test_6161_sup,test_6161_sub); }

		private static final SyntacticType test_6162_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6162_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6162() { testValid(test_6162_sup,test_6162_sub); }

		private static final SyntacticType test_6163_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6163_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6163() { testValid(test_6163_sup,test_6163_sub); }

		private static final SyntacticType test_6164_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6164_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6164() { testValid(test_6164_sup,test_6164_sub); }

		private static final SyntacticType test_6165_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6165_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6165() { testInvalid(test_6165_sup,test_6165_sub); }

		private static final SyntacticType test_6166_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6166_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6166() { testValid(test_6166_sup,test_6166_sub); }

		private static final SyntacticType test_6167_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6167_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6167() { testValid(test_6167_sup,test_6167_sub); }

		private static final SyntacticType test_6168_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6168_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6168() { testInvalid(test_6168_sup,test_6168_sub); }

		private static final SyntacticType test_6169_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6169_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6169() { testInvalid(test_6169_sup,test_6169_sub); }

		private static final SyntacticType test_6170_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6170_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6170() { testInvalid(test_6170_sup,test_6170_sub); }

		private static final SyntacticType test_6171_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6171_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6171() { testInvalid(test_6171_sup,test_6171_sub); }

		private static final SyntacticType test_6172_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6172_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6172() { testInvalid(test_6172_sup,test_6172_sub); }

		private static final SyntacticType test_6173_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6173_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6173() { testInvalid(test_6173_sup,test_6173_sub); }

		private static final SyntacticType test_6174_sup = parse("(({int} & (any & any)) | ({any, any} & any))");
		private static final SyntacticType test_6174_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6174() { testInvalid(test_6174_sup,test_6174_sub); }

		private static final SyntacticType test_6175_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6175_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6175() { testValid(test_6175_sup,test_6175_sub); }

		private static final SyntacticType test_6176_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6176_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6176() { testValid(test_6176_sup,test_6176_sub); }

		private static final SyntacticType test_6177_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6177_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6177() { testValid(test_6177_sup,test_6177_sub); }

		private static final SyntacticType test_6178_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6178_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6178() { testValid(test_6178_sup,test_6178_sub); }

		private static final SyntacticType test_6179_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6179_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6179() { testValid(test_6179_sup,test_6179_sub); }

		private static final SyntacticType test_6180_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6180_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6180() { testValid(test_6180_sup,test_6180_sub); }

		private static final SyntacticType test_6181_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6181_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6181() { testValid(test_6181_sup,test_6181_sub); }

		private static final SyntacticType test_6182_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6182_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6182() { testValid(test_6182_sup,test_6182_sub); }

		private static final SyntacticType test_6183_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6183_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6183() { testValid(test_6183_sup,test_6183_sub); }

		private static final SyntacticType test_6184_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6184_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6184() { testValid(test_6184_sup,test_6184_sub); }

		private static final SyntacticType test_6185_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6185_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6185() { testValid(test_6185_sup,test_6185_sub); }

		private static final SyntacticType test_6186_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6186_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6186() { testValid(test_6186_sup,test_6186_sub); }

		private static final SyntacticType test_6187_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6187_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6187() { testValid(test_6187_sup,test_6187_sub); }

		private static final SyntacticType test_6188_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6188_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6188() { testValid(test_6188_sup,test_6188_sub); }

		private static final SyntacticType test_6189_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6189_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6189() { testValid(test_6189_sup,test_6189_sub); }

		private static final SyntacticType test_6190_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6190_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6190() { testValid(test_6190_sup,test_6190_sub); }

		private static final SyntacticType test_6191_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6191_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6191() { testValid(test_6191_sup,test_6191_sub); }

		private static final SyntacticType test_6192_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6192_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6192() { testValid(test_6192_sup,test_6192_sub); }

		private static final SyntacticType test_6193_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6193_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6193() { testValid(test_6193_sup,test_6193_sub); }

		private static final SyntacticType test_6194_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6194_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6194() { testValid(test_6194_sup,test_6194_sub); }

		private static final SyntacticType test_6195_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6195_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6195() { testValid(test_6195_sup,test_6195_sub); }

		private static final SyntacticType test_6196_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6196_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6196() { testValid(test_6196_sup,test_6196_sub); }

		private static final SyntacticType test_6197_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6197_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6197() { testValid(test_6197_sup,test_6197_sub); }

		private static final SyntacticType test_6198_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6198_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6198() { testValid(test_6198_sup,test_6198_sub); }

		private static final SyntacticType test_6199_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6199_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6199() { testValid(test_6199_sup,test_6199_sub); }

		private static final SyntacticType test_6200_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6200_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6200() { testValid(test_6200_sup,test_6200_sub); }

		private static final SyntacticType test_6201_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6201_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6201() { testValid(test_6201_sup,test_6201_sub); }

		private static final SyntacticType test_6202_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6202_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6202() { testValid(test_6202_sup,test_6202_sub); }

		private static final SyntacticType test_6203_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6203_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6203() { testValid(test_6203_sup,test_6203_sub); }

		private static final SyntacticType test_6204_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6204_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6204() { testValid(test_6204_sup,test_6204_sub); }

		private static final SyntacticType test_6205_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6205_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6205() { testValid(test_6205_sup,test_6205_sub); }

		private static final SyntacticType test_6206_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6206_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6206() { testValid(test_6206_sup,test_6206_sub); }

		private static final SyntacticType test_6207_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6207_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6207() { testValid(test_6207_sup,test_6207_sub); }

		private static final SyntacticType test_6208_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6208_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6208() { testValid(test_6208_sup,test_6208_sub); }

		private static final SyntacticType test_6209_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6209_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6209() { testValid(test_6209_sup,test_6209_sub); }

		private static final SyntacticType test_6210_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6210_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6210() { testValid(test_6210_sup,test_6210_sub); }

		private static final SyntacticType test_6211_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6211_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6211() { testValid(test_6211_sup,test_6211_sub); }

		private static final SyntacticType test_6212_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6212_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6212() { testValid(test_6212_sup,test_6212_sub); }

		private static final SyntacticType test_6213_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6213_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6213() { testValid(test_6213_sup,test_6213_sub); }

		private static final SyntacticType test_6214_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6214_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6214() { testValid(test_6214_sup,test_6214_sub); }

		private static final SyntacticType test_6215_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6215_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6215() { testValid(test_6215_sup,test_6215_sub); }

		private static final SyntacticType test_6216_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6216_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6216() { testValid(test_6216_sup,test_6216_sub); }

		private static final SyntacticType test_6217_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6217_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6217() { testValid(test_6217_sup,test_6217_sub); }

		private static final SyntacticType test_6218_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6218_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6218() { testValid(test_6218_sup,test_6218_sub); }

		private static final SyntacticType test_6219_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6219_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6219() { testValid(test_6219_sup,test_6219_sub); }

		private static final SyntacticType test_6220_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6220_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6220() { testValid(test_6220_sup,test_6220_sub); }

		private static final SyntacticType test_6221_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6221_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6221() { testInvalid(test_6221_sup,test_6221_sub); }

		private static final SyntacticType test_6222_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6222_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6222() { testValid(test_6222_sup,test_6222_sub); }

		private static final SyntacticType test_6223_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6223_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6223() { testInvalid(test_6223_sup,test_6223_sub); }

		private static final SyntacticType test_6224_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6224_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6224() { testValid(test_6224_sup,test_6224_sub); }

		private static final SyntacticType test_6225_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6225_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6225() { testInvalid(test_6225_sup,test_6225_sub); }

		private static final SyntacticType test_6226_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6226_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6226() { testValid(test_6226_sup,test_6226_sub); }

		private static final SyntacticType test_6227_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6227_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6227() { testValid(test_6227_sup,test_6227_sub); }

		private static final SyntacticType test_6228_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6228_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6228() { testValid(test_6228_sup,test_6228_sub); }

		private static final SyntacticType test_6229_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6229_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6229() { testInvalid(test_6229_sup,test_6229_sub); }

		private static final SyntacticType test_6230_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6230_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6230() { testInvalid(test_6230_sup,test_6230_sub); }

		private static final SyntacticType test_6231_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6231_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6231() { testValid(test_6231_sup,test_6231_sub); }

		private static final SyntacticType test_6232_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6232_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6232() { testInvalid(test_6232_sup,test_6232_sub); }

		private static final SyntacticType test_6233_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6233_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6233() { testInvalid(test_6233_sup,test_6233_sub); }

		private static final SyntacticType test_6234_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6234_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6234() { testValid(test_6234_sup,test_6234_sub); }

		private static final SyntacticType test_6235_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6235_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6235() { testValid(test_6235_sup,test_6235_sub); }

		private static final SyntacticType test_6236_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6236_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6236() { testInvalid(test_6236_sup,test_6236_sub); }

		private static final SyntacticType test_6237_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6237_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6237() { testInvalid(test_6237_sup,test_6237_sub); }

		private static final SyntacticType test_6238_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6238_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6238() { testValid(test_6238_sup,test_6238_sub); }

		private static final SyntacticType test_6239_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6239_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6239() { testInvalid(test_6239_sup,test_6239_sub); }

		private static final SyntacticType test_6240_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6240_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6240() { testValid(test_6240_sup,test_6240_sub); }

		private static final SyntacticType test_6241_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6241_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6241() { testValid(test_6241_sup,test_6241_sub); }

		private static final SyntacticType test_6242_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6242_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6242() { testValid(test_6242_sup,test_6242_sub); }

		private static final SyntacticType test_6243_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6243_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6243() { testValid(test_6243_sup,test_6243_sub); }

		private static final SyntacticType test_6244_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6244_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6244() { testInvalid(test_6244_sup,test_6244_sub); }

		private static final SyntacticType test_6245_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6245_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6245() { testValid(test_6245_sup,test_6245_sub); }

		private static final SyntacticType test_6246_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6246_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6246() { testValid(test_6246_sup,test_6246_sub); }

		private static final SyntacticType test_6247_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6247_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6247() { testInvalid(test_6247_sup,test_6247_sub); }

		private static final SyntacticType test_6248_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6248_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6248() { testValid(test_6248_sup,test_6248_sub); }

		private static final SyntacticType test_6249_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6249_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6249() { testValid(test_6249_sup,test_6249_sub); }

		private static final SyntacticType test_6250_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6250_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6250() { testValid(test_6250_sup,test_6250_sub); }

		private static final SyntacticType test_6251_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6251_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6251() { testValid(test_6251_sup,test_6251_sub); }

		private static final SyntacticType test_6252_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6252_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6252() { testInvalid(test_6252_sup,test_6252_sub); }

		private static final SyntacticType test_6253_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6253_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6253() { testValid(test_6253_sup,test_6253_sub); }

		private static final SyntacticType test_6254_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6254_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6254() { testValid(test_6254_sup,test_6254_sub); }

		private static final SyntacticType test_6255_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6255_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6255() { testValid(test_6255_sup,test_6255_sub); }

		private static final SyntacticType test_6256_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6256_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6256() { testValid(test_6256_sup,test_6256_sub); }

		private static final SyntacticType test_6257_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6257_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6257() { testValid(test_6257_sup,test_6257_sub); }

		private static final SyntacticType test_6258_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6258_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6258() { testValid(test_6258_sup,test_6258_sub); }

		private static final SyntacticType test_6259_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6259_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6259() { testValid(test_6259_sup,test_6259_sub); }

		private static final SyntacticType test_6260_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6260_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6260() { testInvalid(test_6260_sup,test_6260_sub); }

		private static final SyntacticType test_6261_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6261_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6261() { testValid(test_6261_sup,test_6261_sub); }

		private static final SyntacticType test_6262_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6262_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6262() { testValid(test_6262_sup,test_6262_sub); }

		private static final SyntacticType test_6263_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6263_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6263() { testInvalid(test_6263_sup,test_6263_sub); }

		private static final SyntacticType test_6264_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6264_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6264() { testInvalid(test_6264_sup,test_6264_sub); }

		private static final SyntacticType test_6265_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6265_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6265() { testInvalid(test_6265_sup,test_6265_sub); }

		private static final SyntacticType test_6266_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6266_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6266() { testInvalid(test_6266_sup,test_6266_sub); }

		private static final SyntacticType test_6267_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6267_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6267() { testInvalid(test_6267_sup,test_6267_sub); }

		private static final SyntacticType test_6268_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6268_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6268() { testInvalid(test_6268_sup,test_6268_sub); }

		private static final SyntacticType test_6269_sup = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		private static final SyntacticType test_6269_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6269() { testInvalid(test_6269_sup,test_6269_sub); }

		private static final SyntacticType test_6270_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6270_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6270() { testValid(test_6270_sup,test_6270_sub); }

		private static final SyntacticType test_6271_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6271_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6271() { testValid(test_6271_sup,test_6271_sub); }

		private static final SyntacticType test_6272_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6272_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6272() { testInvalid(test_6272_sup,test_6272_sub); }

		private static final SyntacticType test_6273_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6273_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6273() { testInvalid(test_6273_sup,test_6273_sub); }

		private static final SyntacticType test_6274_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6274_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6274() { testInvalid(test_6274_sup,test_6274_sub); }

		private static final SyntacticType test_6275_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6275_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6275() { testInvalid(test_6275_sup,test_6275_sub); }

		private static final SyntacticType test_6276_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6276_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6276() { testInvalid(test_6276_sup,test_6276_sub); }

		private static final SyntacticType test_6277_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6277_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6277() { testInvalid(test_6277_sup,test_6277_sub); }

		private static final SyntacticType test_6278_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6278_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6278() { testInvalid(test_6278_sup,test_6278_sub); }

		private static final SyntacticType test_6279_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6279_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6279() { testInvalid(test_6279_sup,test_6279_sub); }

		private static final SyntacticType test_6280_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6280_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6280() { testInvalid(test_6280_sup,test_6280_sub); }

		private static final SyntacticType test_6281_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6281_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6281() { testInvalid(test_6281_sup,test_6281_sub); }

		private static final SyntacticType test_6282_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6282_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6282() { testInvalid(test_6282_sup,test_6282_sub); }

		private static final SyntacticType test_6283_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6283_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6283() { testInvalid(test_6283_sup,test_6283_sub); }

		private static final SyntacticType test_6284_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6284_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6284() { testInvalid(test_6284_sup,test_6284_sub); }

		private static final SyntacticType test_6285_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6285_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6285() { testInvalid(test_6285_sup,test_6285_sub); }

		private static final SyntacticType test_6286_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6286_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6286() { testInvalid(test_6286_sup,test_6286_sub); }

		private static final SyntacticType test_6287_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6287_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6287() { testInvalid(test_6287_sup,test_6287_sub); }

		private static final SyntacticType test_6288_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6288_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6288() { testInvalid(test_6288_sup,test_6288_sub); }

		private static final SyntacticType test_6289_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6289_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6289() { testInvalid(test_6289_sup,test_6289_sub); }

		private static final SyntacticType test_6290_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6290_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6290() { testInvalid(test_6290_sup,test_6290_sub); }

		private static final SyntacticType test_6291_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6291_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6291() { testInvalid(test_6291_sup,test_6291_sub); }

		private static final SyntacticType test_6292_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6292_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6292() { testValid(test_6292_sup,test_6292_sub); }

		private static final SyntacticType test_6293_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6293_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6293() { testValid(test_6293_sup,test_6293_sub); }

		private static final SyntacticType test_6294_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6294_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6294() { testInvalid(test_6294_sup,test_6294_sub); }

		private static final SyntacticType test_6295_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6295_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6295() { testInvalid(test_6295_sup,test_6295_sub); }

		private static final SyntacticType test_6296_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6296_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6296() { testInvalid(test_6296_sup,test_6296_sub); }

		private static final SyntacticType test_6297_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6297_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6297() { testInvalid(test_6297_sup,test_6297_sub); }

		private static final SyntacticType test_6298_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6298_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6298() { testInvalid(test_6298_sup,test_6298_sub); }

		private static final SyntacticType test_6299_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6299_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6299() { testInvalid(test_6299_sup,test_6299_sub); }

		private static final SyntacticType test_6300_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6300_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6300() { testInvalid(test_6300_sup,test_6300_sub); }

		private static final SyntacticType test_6301_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6301_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6301() { testInvalid(test_6301_sup,test_6301_sub); }

		private static final SyntacticType test_6302_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6302_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6302() { testInvalid(test_6302_sup,test_6302_sub); }

		private static final SyntacticType test_6303_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6303_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6303() { testInvalid(test_6303_sup,test_6303_sub); }

		private static final SyntacticType test_6304_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6304_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6304() { testInvalid(test_6304_sup,test_6304_sub); }

		private static final SyntacticType test_6305_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6305_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6305() { testInvalid(test_6305_sup,test_6305_sub); }

		private static final SyntacticType test_6306_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6306_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6306() { testInvalid(test_6306_sup,test_6306_sub); }

		private static final SyntacticType test_6307_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6307_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6307() { testValid(test_6307_sup,test_6307_sub); }

		private static final SyntacticType test_6308_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6308_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6308() { testValid(test_6308_sup,test_6308_sub); }

		private static final SyntacticType test_6309_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6309_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6309() { testInvalid(test_6309_sup,test_6309_sub); }

		private static final SyntacticType test_6310_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6310_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6310() { testInvalid(test_6310_sup,test_6310_sub); }

		private static final SyntacticType test_6311_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6311_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6311() { testValid(test_6311_sup,test_6311_sub); }

		private static final SyntacticType test_6312_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6312_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6312() { testInvalid(test_6312_sup,test_6312_sub); }

		private static final SyntacticType test_6313_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6313_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6313() { testInvalid(test_6313_sup,test_6313_sub); }

		private static final SyntacticType test_6314_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6314_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6314() { testInvalid(test_6314_sup,test_6314_sub); }

		private static final SyntacticType test_6315_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6315_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6315() { testInvalid(test_6315_sup,test_6315_sub); }

		private static final SyntacticType test_6316_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6316_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6316() { testInvalid(test_6316_sup,test_6316_sub); }

		private static final SyntacticType test_6317_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6317_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6317() { testInvalid(test_6317_sup,test_6317_sub); }

		private static final SyntacticType test_6318_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6318_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6318() { testInvalid(test_6318_sup,test_6318_sub); }

		private static final SyntacticType test_6319_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6319_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6319() { testInvalid(test_6319_sup,test_6319_sub); }

		private static final SyntacticType test_6320_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6320_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6320() { testInvalid(test_6320_sup,test_6320_sub); }

		private static final SyntacticType test_6321_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6321_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6321() { testInvalid(test_6321_sup,test_6321_sub); }

		private static final SyntacticType test_6322_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6322_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6322() { testInvalid(test_6322_sup,test_6322_sub); }

		private static final SyntacticType test_6323_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6323_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6323() { testInvalid(test_6323_sup,test_6323_sub); }

		private static final SyntacticType test_6324_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6324_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6324() { testInvalid(test_6324_sup,test_6324_sub); }

		private static final SyntacticType test_6325_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6325_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6325() { testInvalid(test_6325_sup,test_6325_sub); }

		private static final SyntacticType test_6326_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6326_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6326() { testValid(test_6326_sup,test_6326_sub); }

		private static final SyntacticType test_6327_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6327_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6327() { testInvalid(test_6327_sup,test_6327_sub); }

		private static final SyntacticType test_6328_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6328_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6328() { testInvalid(test_6328_sup,test_6328_sub); }

		private static final SyntacticType test_6329_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6329_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6329() { testInvalid(test_6329_sup,test_6329_sub); }

		private static final SyntacticType test_6330_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6330_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6330() { testInvalid(test_6330_sup,test_6330_sub); }

		private static final SyntacticType test_6331_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6331_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6331() { testInvalid(test_6331_sup,test_6331_sub); }

		private static final SyntacticType test_6332_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6332_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6332() { testInvalid(test_6332_sup,test_6332_sub); }

		private static final SyntacticType test_6333_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6333_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6333() { testInvalid(test_6333_sup,test_6333_sub); }

		private static final SyntacticType test_6334_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6334_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6334() { testInvalid(test_6334_sup,test_6334_sub); }

		private static final SyntacticType test_6335_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6335_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6335() { testInvalid(test_6335_sup,test_6335_sub); }

		private static final SyntacticType test_6336_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6336_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6336() { testValid(test_6336_sup,test_6336_sub); }

		private static final SyntacticType test_6337_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6337_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6337() { testInvalid(test_6337_sup,test_6337_sub); }

		private static final SyntacticType test_6338_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6338_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6338() { testInvalid(test_6338_sup,test_6338_sub); }

		private static final SyntacticType test_6339_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6339_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6339() { testInvalid(test_6339_sup,test_6339_sub); }

		private static final SyntacticType test_6340_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6340_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6340() { testInvalid(test_6340_sup,test_6340_sub); }

		private static final SyntacticType test_6341_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6341_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6341() { testInvalid(test_6341_sup,test_6341_sub); }

		private static final SyntacticType test_6342_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6342_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6342() { testInvalid(test_6342_sup,test_6342_sub); }

		private static final SyntacticType test_6343_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6343_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6343() { testValid(test_6343_sup,test_6343_sub); }

		private static final SyntacticType test_6344_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6344_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6344() { testValid(test_6344_sup,test_6344_sub); }

		private static final SyntacticType test_6345_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6345_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6345() { testValid(test_6345_sup,test_6345_sub); }

		private static final SyntacticType test_6346_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6346_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6346() { testValid(test_6346_sup,test_6346_sub); }

		private static final SyntacticType test_6347_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6347_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6347() { testInvalid(test_6347_sup,test_6347_sub); }

		private static final SyntacticType test_6348_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6348_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6348() { testValid(test_6348_sup,test_6348_sub); }

		private static final SyntacticType test_6349_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6349_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6349() { testInvalid(test_6349_sup,test_6349_sub); }

		private static final SyntacticType test_6350_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6350_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6350() { testInvalid(test_6350_sup,test_6350_sub); }

		private static final SyntacticType test_6351_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6351_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6351() { testInvalid(test_6351_sup,test_6351_sub); }

		private static final SyntacticType test_6352_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6352_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6352() { testInvalid(test_6352_sup,test_6352_sub); }

		private static final SyntacticType test_6353_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6353_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6353() { testValid(test_6353_sup,test_6353_sub); }

		private static final SyntacticType test_6354_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6354_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6354() { testInvalid(test_6354_sup,test_6354_sub); }

		private static final SyntacticType test_6355_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6355_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6355() { testInvalid(test_6355_sup,test_6355_sub); }

		private static final SyntacticType test_6356_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6356_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6356() { testValid(test_6356_sup,test_6356_sub); }

		private static final SyntacticType test_6357_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6357_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6357() { testInvalid(test_6357_sup,test_6357_sub); }

		private static final SyntacticType test_6358_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6358_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6358() { testInvalid(test_6358_sup,test_6358_sub); }

		private static final SyntacticType test_6359_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6359_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6359() { testInvalid(test_6359_sup,test_6359_sub); }

		private static final SyntacticType test_6360_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6360_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6360() { testInvalid(test_6360_sup,test_6360_sub); }

		private static final SyntacticType test_6361_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6361_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6361() { testInvalid(test_6361_sup,test_6361_sub); }

		private static final SyntacticType test_6362_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6362_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6362() { testInvalid(test_6362_sup,test_6362_sub); }

		private static final SyntacticType test_6363_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6363_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6363() { testInvalid(test_6363_sup,test_6363_sub); }

		private static final SyntacticType test_6364_sup = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		private static final SyntacticType test_6364_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6364() { testInvalid(test_6364_sup,test_6364_sub); }

		private static final SyntacticType test_6365_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6365_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6365() { testInvalid(test_6365_sup,test_6365_sub); }

		private static final SyntacticType test_6366_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6366_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6366() { testInvalid(test_6366_sup,test_6366_sub); }

		private static final SyntacticType test_6367_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6367_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6367() { testInvalid(test_6367_sup,test_6367_sub); }

		private static final SyntacticType test_6368_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6368_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6368() { testInvalid(test_6368_sup,test_6368_sub); }

		private static final SyntacticType test_6369_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6369_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6369() { testInvalid(test_6369_sup,test_6369_sub); }

		private static final SyntacticType test_6370_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6370_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6370() { testInvalid(test_6370_sup,test_6370_sub); }

		private static final SyntacticType test_6371_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6371_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6371() { testInvalid(test_6371_sup,test_6371_sub); }

		private static final SyntacticType test_6372_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6372_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6372() { testInvalid(test_6372_sup,test_6372_sub); }

		private static final SyntacticType test_6373_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6373_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6373() { testInvalid(test_6373_sup,test_6373_sub); }

		private static final SyntacticType test_6374_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6374_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6374() { testInvalid(test_6374_sup,test_6374_sub); }

		private static final SyntacticType test_6375_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6375_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6375() { testInvalid(test_6375_sup,test_6375_sub); }

		private static final SyntacticType test_6376_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6376_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6376() { testInvalid(test_6376_sup,test_6376_sub); }

		private static final SyntacticType test_6377_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6377_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6377() { testInvalid(test_6377_sup,test_6377_sub); }

		private static final SyntacticType test_6378_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6378_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6378() { testInvalid(test_6378_sup,test_6378_sub); }

		private static final SyntacticType test_6379_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6379_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6379() { testInvalid(test_6379_sup,test_6379_sub); }

		private static final SyntacticType test_6380_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6380_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6380() { testInvalid(test_6380_sup,test_6380_sub); }

		private static final SyntacticType test_6381_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6381_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6381() { testInvalid(test_6381_sup,test_6381_sub); }

		private static final SyntacticType test_6382_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6382_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6382() { testInvalid(test_6382_sup,test_6382_sub); }

		private static final SyntacticType test_6383_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6383_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6383() { testValid(test_6383_sup,test_6383_sub); }

		private static final SyntacticType test_6384_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6384_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6384() { testInvalid(test_6384_sup,test_6384_sub); }

		private static final SyntacticType test_6385_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6385_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6385() { testInvalid(test_6385_sup,test_6385_sub); }

		private static final SyntacticType test_6386_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6386_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6386() { testInvalid(test_6386_sup,test_6386_sub); }

		private static final SyntacticType test_6387_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6387_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6387() { testInvalid(test_6387_sup,test_6387_sub); }

		private static final SyntacticType test_6388_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6388_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6388() { testInvalid(test_6388_sup,test_6388_sub); }

		private static final SyntacticType test_6389_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6389_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6389() { testInvalid(test_6389_sup,test_6389_sub); }

		private static final SyntacticType test_6390_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6390_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6390() { testInvalid(test_6390_sup,test_6390_sub); }

		private static final SyntacticType test_6391_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6391_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6391() { testInvalid(test_6391_sup,test_6391_sub); }

		private static final SyntacticType test_6392_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6392_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6392() { testInvalid(test_6392_sup,test_6392_sub); }

		private static final SyntacticType test_6393_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6393_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6393() { testInvalid(test_6393_sup,test_6393_sub); }

		private static final SyntacticType test_6394_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6394_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6394() { testInvalid(test_6394_sup,test_6394_sub); }

		private static final SyntacticType test_6395_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6395_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6395() { testInvalid(test_6395_sup,test_6395_sub); }

		private static final SyntacticType test_6396_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6396_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6396() { testInvalid(test_6396_sup,test_6396_sub); }

		private static final SyntacticType test_6397_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6397_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6397() { testInvalid(test_6397_sup,test_6397_sub); }

		private static final SyntacticType test_6398_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6398_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6398() { testInvalid(test_6398_sup,test_6398_sub); }

		private static final SyntacticType test_6399_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6399_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6399() { testInvalid(test_6399_sup,test_6399_sub); }

		private static final SyntacticType test_6400_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6400_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6400() { testInvalid(test_6400_sup,test_6400_sub); }

		private static final SyntacticType test_6401_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6401_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6401() { testInvalid(test_6401_sup,test_6401_sub); }

		private static final SyntacticType test_6402_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6402_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6402() { testInvalid(test_6402_sup,test_6402_sub); }

		private static final SyntacticType test_6403_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6403_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6403() { testInvalid(test_6403_sup,test_6403_sub); }

		private static final SyntacticType test_6404_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6404_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6404() { testInvalid(test_6404_sup,test_6404_sub); }

		private static final SyntacticType test_6405_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6405_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6405() { testInvalid(test_6405_sup,test_6405_sub); }

		private static final SyntacticType test_6406_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6406_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6406() { testInvalid(test_6406_sup,test_6406_sub); }

		private static final SyntacticType test_6407_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6407_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6407() { testInvalid(test_6407_sup,test_6407_sub); }

		private static final SyntacticType test_6408_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6408_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6408() { testInvalid(test_6408_sup,test_6408_sub); }

		private static final SyntacticType test_6409_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6409_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6409() { testInvalid(test_6409_sup,test_6409_sub); }

		private static final SyntacticType test_6410_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6410_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6410() { testInvalid(test_6410_sup,test_6410_sub); }

		private static final SyntacticType test_6411_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6411_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6411() { testInvalid(test_6411_sup,test_6411_sub); }

		private static final SyntacticType test_6412_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6412_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6412() { testInvalid(test_6412_sup,test_6412_sub); }

		private static final SyntacticType test_6413_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6413_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6413() { testInvalid(test_6413_sup,test_6413_sub); }

		private static final SyntacticType test_6414_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6414_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6414() { testInvalid(test_6414_sup,test_6414_sub); }

		private static final SyntacticType test_6415_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6415_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6415() { testInvalid(test_6415_sup,test_6415_sub); }

		private static final SyntacticType test_6416_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6416_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6416() { testInvalid(test_6416_sup,test_6416_sub); }

		private static final SyntacticType test_6417_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6417_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6417() { testInvalid(test_6417_sup,test_6417_sub); }

		private static final SyntacticType test_6418_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6418_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6418() { testInvalid(test_6418_sup,test_6418_sub); }

		private static final SyntacticType test_6419_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6419_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6419() { testInvalid(test_6419_sup,test_6419_sub); }

		private static final SyntacticType test_6420_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6420_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6420() { testInvalid(test_6420_sup,test_6420_sub); }

		private static final SyntacticType test_6421_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6421_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6421() { testInvalid(test_6421_sup,test_6421_sub); }

		private static final SyntacticType test_6422_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6422_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6422() { testInvalid(test_6422_sup,test_6422_sub); }

		private static final SyntacticType test_6423_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6423_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6423() { testInvalid(test_6423_sup,test_6423_sub); }

		private static final SyntacticType test_6424_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6424_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6424() { testInvalid(test_6424_sup,test_6424_sub); }

		private static final SyntacticType test_6425_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6425_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6425() { testInvalid(test_6425_sup,test_6425_sub); }

		private static final SyntacticType test_6426_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6426_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6426() { testInvalid(test_6426_sup,test_6426_sub); }

		private static final SyntacticType test_6427_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6427_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6427() { testInvalid(test_6427_sup,test_6427_sub); }

		private static final SyntacticType test_6428_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6428_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6428() { testInvalid(test_6428_sup,test_6428_sub); }

		private static final SyntacticType test_6429_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6429_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6429() { testInvalid(test_6429_sup,test_6429_sub); }

		private static final SyntacticType test_6430_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6430_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6430() { testInvalid(test_6430_sup,test_6430_sub); }

		private static final SyntacticType test_6431_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6431_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6431() { testInvalid(test_6431_sup,test_6431_sub); }

		private static final SyntacticType test_6432_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6432_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6432() { testValid(test_6432_sup,test_6432_sub); }

		private static final SyntacticType test_6433_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6433_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6433() { testInvalid(test_6433_sup,test_6433_sub); }

		private static final SyntacticType test_6434_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6434_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6434() { testInvalid(test_6434_sup,test_6434_sub); }

		private static final SyntacticType test_6435_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6435_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6435() { testInvalid(test_6435_sup,test_6435_sub); }

		private static final SyntacticType test_6436_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6436_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6436() { testInvalid(test_6436_sup,test_6436_sub); }

		private static final SyntacticType test_6437_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6437_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6437() { testInvalid(test_6437_sup,test_6437_sub); }

		private static final SyntacticType test_6438_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6438_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6438() { testValid(test_6438_sup,test_6438_sub); }

		private static final SyntacticType test_6439_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6439_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6439() { testInvalid(test_6439_sup,test_6439_sub); }

		private static final SyntacticType test_6440_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6440_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6440() { testInvalid(test_6440_sup,test_6440_sub); }

		private static final SyntacticType test_6441_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6441_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6441() { testValid(test_6441_sup,test_6441_sub); }

		private static final SyntacticType test_6442_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6442_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6442() { testInvalid(test_6442_sup,test_6442_sub); }

		private static final SyntacticType test_6443_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6443_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6443() { testInvalid(test_6443_sup,test_6443_sub); }

		private static final SyntacticType test_6444_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6444_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6444() { testInvalid(test_6444_sup,test_6444_sub); }

		private static final SyntacticType test_6445_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6445_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6445() { testInvalid(test_6445_sup,test_6445_sub); }

		private static final SyntacticType test_6446_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6446_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6446() { testInvalid(test_6446_sup,test_6446_sub); }

		private static final SyntacticType test_6447_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6447_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6447() { testInvalid(test_6447_sup,test_6447_sub); }

		private static final SyntacticType test_6448_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6448_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6448() { testInvalid(test_6448_sup,test_6448_sub); }

		private static final SyntacticType test_6449_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6449_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6449() { testInvalid(test_6449_sup,test_6449_sub); }

		private static final SyntacticType test_6450_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6450_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6450() { testInvalid(test_6450_sup,test_6450_sub); }

		private static final SyntacticType test_6451_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6451_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6451() { testInvalid(test_6451_sup,test_6451_sub); }

		private static final SyntacticType test_6452_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6452_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6452() { testInvalid(test_6452_sup,test_6452_sub); }

		private static final SyntacticType test_6453_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6453_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6453() { testInvalid(test_6453_sup,test_6453_sub); }

		private static final SyntacticType test_6454_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6454_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6454() { testInvalid(test_6454_sup,test_6454_sub); }

		private static final SyntacticType test_6455_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6455_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6455() { testInvalid(test_6455_sup,test_6455_sub); }

		private static final SyntacticType test_6456_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6456_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6456() { testInvalid(test_6456_sup,test_6456_sub); }

		private static final SyntacticType test_6457_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6457_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6457() { testInvalid(test_6457_sup,test_6457_sub); }

		private static final SyntacticType test_6458_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6458_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6458() { testInvalid(test_6458_sup,test_6458_sub); }

		private static final SyntacticType test_6459_sup = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		private static final SyntacticType test_6459_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6459() { testInvalid(test_6459_sup,test_6459_sub); }

		private static final SyntacticType test_6460_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6460_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6460() { testInvalid(test_6460_sup,test_6460_sub); }

		private static final SyntacticType test_6461_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6461_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6461() { testInvalid(test_6461_sup,test_6461_sub); }

		private static final SyntacticType test_6462_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6462_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6462() { testInvalid(test_6462_sup,test_6462_sub); }

		private static final SyntacticType test_6463_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6463_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6463() { testInvalid(test_6463_sup,test_6463_sub); }

		private static final SyntacticType test_6464_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6464_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6464() { testValid(test_6464_sup,test_6464_sub); }

		private static final SyntacticType test_6465_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6465_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6465() { testInvalid(test_6465_sup,test_6465_sub); }

		private static final SyntacticType test_6466_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6466_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6466() { testInvalid(test_6466_sup,test_6466_sub); }

		private static final SyntacticType test_6467_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6467_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6467() { testInvalid(test_6467_sup,test_6467_sub); }

		private static final SyntacticType test_6468_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6468_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6468() { testInvalid(test_6468_sup,test_6468_sub); }

		private static final SyntacticType test_6469_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6469_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6469() { testInvalid(test_6469_sup,test_6469_sub); }

		private static final SyntacticType test_6470_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6470_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6470() { testInvalid(test_6470_sup,test_6470_sub); }

		private static final SyntacticType test_6471_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6471_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6471() { testInvalid(test_6471_sup,test_6471_sub); }

		private static final SyntacticType test_6472_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6472_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6472() { testInvalid(test_6472_sup,test_6472_sub); }

		private static final SyntacticType test_6473_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6473_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6473() { testInvalid(test_6473_sup,test_6473_sub); }

		private static final SyntacticType test_6474_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6474_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6474() { testInvalid(test_6474_sup,test_6474_sub); }

		private static final SyntacticType test_6475_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6475_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6475() { testInvalid(test_6475_sup,test_6475_sub); }

		private static final SyntacticType test_6476_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6476_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6476() { testInvalid(test_6476_sup,test_6476_sub); }

		private static final SyntacticType test_6477_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6477_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6477() { testInvalid(test_6477_sup,test_6477_sub); }

		private static final SyntacticType test_6478_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6478_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6478() { testInvalid(test_6478_sup,test_6478_sub); }

		private static final SyntacticType test_6479_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6479_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6479() { testInvalid(test_6479_sup,test_6479_sub); }

		private static final SyntacticType test_6480_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6480_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6480() { testInvalid(test_6480_sup,test_6480_sub); }

		private static final SyntacticType test_6481_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6481_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6481() { testInvalid(test_6481_sup,test_6481_sub); }

		private static final SyntacticType test_6482_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6482_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6482() { testInvalid(test_6482_sup,test_6482_sub); }

		private static final SyntacticType test_6483_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6483_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6483() { testInvalid(test_6483_sup,test_6483_sub); }

		private static final SyntacticType test_6484_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6484_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6484() { testInvalid(test_6484_sup,test_6484_sub); }

		private static final SyntacticType test_6485_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6485_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6485() { testInvalid(test_6485_sup,test_6485_sub); }

		private static final SyntacticType test_6486_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6486_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6486() { testInvalid(test_6486_sup,test_6486_sub); }

		private static final SyntacticType test_6487_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6487_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6487() { testInvalid(test_6487_sup,test_6487_sub); }

		private static final SyntacticType test_6488_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6488_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6488() { testInvalid(test_6488_sup,test_6488_sub); }

		private static final SyntacticType test_6489_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6489_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6489() { testInvalid(test_6489_sup,test_6489_sub); }

		private static final SyntacticType test_6490_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6490_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6490() { testInvalid(test_6490_sup,test_6490_sub); }

		private static final SyntacticType test_6491_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6491_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6491() { testInvalid(test_6491_sup,test_6491_sub); }

		private static final SyntacticType test_6492_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6492_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6492() { testInvalid(test_6492_sup,test_6492_sub); }

		private static final SyntacticType test_6493_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6493_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6493() { testInvalid(test_6493_sup,test_6493_sub); }

		private static final SyntacticType test_6494_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6494_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6494() { testInvalid(test_6494_sup,test_6494_sub); }

		private static final SyntacticType test_6495_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6495_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6495() { testInvalid(test_6495_sup,test_6495_sub); }

		private static final SyntacticType test_6496_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6496_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6496() { testInvalid(test_6496_sup,test_6496_sub); }

		private static final SyntacticType test_6497_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6497_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6497() { testInvalid(test_6497_sup,test_6497_sub); }

		private static final SyntacticType test_6498_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6498_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6498() { testInvalid(test_6498_sup,test_6498_sub); }

		private static final SyntacticType test_6499_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6499_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6499() { testInvalid(test_6499_sup,test_6499_sub); }

		private static final SyntacticType test_6500_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6500_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6500() { testInvalid(test_6500_sup,test_6500_sub); }

		private static final SyntacticType test_6501_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6501_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6501() { testInvalid(test_6501_sup,test_6501_sub); }

		private static final SyntacticType test_6502_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6502_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6502() { testInvalid(test_6502_sup,test_6502_sub); }

		private static final SyntacticType test_6503_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6503_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6503() { testInvalid(test_6503_sup,test_6503_sub); }

		private static final SyntacticType test_6504_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6504_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6504() { testInvalid(test_6504_sup,test_6504_sub); }

		private static final SyntacticType test_6505_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6505_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6505() { testInvalid(test_6505_sup,test_6505_sub); }

		private static final SyntacticType test_6506_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6506_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6506() { testInvalid(test_6506_sup,test_6506_sub); }

		private static final SyntacticType test_6507_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6507_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6507() { testInvalid(test_6507_sup,test_6507_sub); }

		private static final SyntacticType test_6508_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6508_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6508() { testInvalid(test_6508_sup,test_6508_sub); }

		private static final SyntacticType test_6509_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6509_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6509() { testInvalid(test_6509_sup,test_6509_sub); }

		private static final SyntacticType test_6510_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6510_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6510() { testInvalid(test_6510_sup,test_6510_sub); }

		private static final SyntacticType test_6511_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6511_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6511() { testInvalid(test_6511_sup,test_6511_sub); }

		private static final SyntacticType test_6512_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6512_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6512() { testInvalid(test_6512_sup,test_6512_sub); }

		private static final SyntacticType test_6513_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6513_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6513() { testInvalid(test_6513_sup,test_6513_sub); }

		private static final SyntacticType test_6514_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6514_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6514() { testInvalid(test_6514_sup,test_6514_sub); }

		private static final SyntacticType test_6515_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6515_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6515() { testInvalid(test_6515_sup,test_6515_sub); }

		private static final SyntacticType test_6516_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6516_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6516() { testInvalid(test_6516_sup,test_6516_sub); }

		private static final SyntacticType test_6517_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6517_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6517() { testInvalid(test_6517_sup,test_6517_sub); }

		private static final SyntacticType test_6518_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6518_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6518() { testInvalid(test_6518_sup,test_6518_sub); }

		private static final SyntacticType test_6519_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6519_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6519() { testInvalid(test_6519_sup,test_6519_sub); }

		private static final SyntacticType test_6520_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6520_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6520() { testInvalid(test_6520_sup,test_6520_sub); }

		private static final SyntacticType test_6521_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6521_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6521() { testInvalid(test_6521_sup,test_6521_sub); }

		private static final SyntacticType test_6522_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6522_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6522() { testInvalid(test_6522_sup,test_6522_sub); }

		private static final SyntacticType test_6523_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6523_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6523() { testInvalid(test_6523_sup,test_6523_sub); }

		private static final SyntacticType test_6524_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6524_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6524() { testInvalid(test_6524_sup,test_6524_sub); }

		private static final SyntacticType test_6525_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6525_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6525() { testInvalid(test_6525_sup,test_6525_sub); }

		private static final SyntacticType test_6526_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6526_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6526() { testInvalid(test_6526_sup,test_6526_sub); }

		private static final SyntacticType test_6527_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6527_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6527() { testInvalid(test_6527_sup,test_6527_sub); }

		private static final SyntacticType test_6528_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6528_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6528() { testValid(test_6528_sup,test_6528_sub); }

		private static final SyntacticType test_6529_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6529_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6529() { testInvalid(test_6529_sup,test_6529_sub); }

		private static final SyntacticType test_6530_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6530_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6530() { testInvalid(test_6530_sup,test_6530_sub); }

		private static final SyntacticType test_6531_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6531_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6531() { testInvalid(test_6531_sup,test_6531_sub); }

		private static final SyntacticType test_6532_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6532_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6532() { testInvalid(test_6532_sup,test_6532_sub); }

		private static final SyntacticType test_6533_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6533_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6533() { testInvalid(test_6533_sup,test_6533_sub); }

		private static final SyntacticType test_6534_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6534_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6534() { testInvalid(test_6534_sup,test_6534_sub); }

		private static final SyntacticType test_6535_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6535_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6535() { testInvalid(test_6535_sup,test_6535_sub); }

		private static final SyntacticType test_6536_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6536_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6536() { testInvalid(test_6536_sup,test_6536_sub); }

		private static final SyntacticType test_6537_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6537_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6537() { testInvalid(test_6537_sup,test_6537_sub); }

		private static final SyntacticType test_6538_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6538_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6538() { testInvalid(test_6538_sup,test_6538_sub); }

		private static final SyntacticType test_6539_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6539_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6539() { testInvalid(test_6539_sup,test_6539_sub); }

		private static final SyntacticType test_6540_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6540_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6540() { testInvalid(test_6540_sup,test_6540_sub); }

		private static final SyntacticType test_6541_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6541_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6541() { testInvalid(test_6541_sup,test_6541_sub); }

		private static final SyntacticType test_6542_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6542_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6542() { testInvalid(test_6542_sup,test_6542_sub); }

		private static final SyntacticType test_6543_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6543_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6543() { testInvalid(test_6543_sup,test_6543_sub); }

		private static final SyntacticType test_6544_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6544_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6544() { testInvalid(test_6544_sup,test_6544_sub); }

		private static final SyntacticType test_6545_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6545_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6545() { testInvalid(test_6545_sup,test_6545_sub); }

		private static final SyntacticType test_6546_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6546_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6546() { testInvalid(test_6546_sup,test_6546_sub); }

		private static final SyntacticType test_6547_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6547_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6547() { testInvalid(test_6547_sup,test_6547_sub); }

		private static final SyntacticType test_6548_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6548_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6548() { testInvalid(test_6548_sup,test_6548_sub); }

		private static final SyntacticType test_6549_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6549_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6549() { testInvalid(test_6549_sup,test_6549_sub); }

		private static final SyntacticType test_6550_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6550_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6550() { testInvalid(test_6550_sup,test_6550_sub); }

		private static final SyntacticType test_6551_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6551_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6551() { testInvalid(test_6551_sup,test_6551_sub); }

		private static final SyntacticType test_6552_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6552_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6552() { testInvalid(test_6552_sup,test_6552_sub); }

		private static final SyntacticType test_6553_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6553_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6553() { testInvalid(test_6553_sup,test_6553_sub); }

		private static final SyntacticType test_6554_sup = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		private static final SyntacticType test_6554_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6554() { testInvalid(test_6554_sup,test_6554_sub); }

		private static final SyntacticType test_6555_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6555_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6555() { testInvalid(test_6555_sup,test_6555_sub); }

		private static final SyntacticType test_6556_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6556_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6556() { testInvalid(test_6556_sup,test_6556_sub); }

		private static final SyntacticType test_6557_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6557_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6557() { testInvalid(test_6557_sup,test_6557_sub); }

		private static final SyntacticType test_6558_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6558_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6558() { testInvalid(test_6558_sup,test_6558_sub); }

		private static final SyntacticType test_6559_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6559_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6559() { testInvalid(test_6559_sup,test_6559_sub); }

		private static final SyntacticType test_6560_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6560_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6560() { testInvalid(test_6560_sup,test_6560_sub); }

		private static final SyntacticType test_6561_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6561_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6561() { testInvalid(test_6561_sup,test_6561_sub); }

		private static final SyntacticType test_6562_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6562_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6562() { testInvalid(test_6562_sup,test_6562_sub); }

		private static final SyntacticType test_6563_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6563_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6563() { testInvalid(test_6563_sup,test_6563_sub); }

		private static final SyntacticType test_6564_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6564_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6564() { testInvalid(test_6564_sup,test_6564_sub); }

		private static final SyntacticType test_6565_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6565_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6565() { testInvalid(test_6565_sup,test_6565_sub); }

		private static final SyntacticType test_6566_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6566_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6566() { testInvalid(test_6566_sup,test_6566_sub); }

		private static final SyntacticType test_6567_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6567_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6567() { testInvalid(test_6567_sup,test_6567_sub); }

		private static final SyntacticType test_6568_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6568_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6568() { testInvalid(test_6568_sup,test_6568_sub); }

		private static final SyntacticType test_6569_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6569_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6569() { testInvalid(test_6569_sup,test_6569_sub); }

		private static final SyntacticType test_6570_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6570_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6570() { testInvalid(test_6570_sup,test_6570_sub); }

		private static final SyntacticType test_6571_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6571_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6571() { testInvalid(test_6571_sup,test_6571_sub); }

		private static final SyntacticType test_6572_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6572_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6572() { testInvalid(test_6572_sup,test_6572_sub); }

		private static final SyntacticType test_6573_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6573_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6573() { testInvalid(test_6573_sup,test_6573_sub); }

		private static final SyntacticType test_6574_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6574_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6574() { testInvalid(test_6574_sup,test_6574_sub); }

		private static final SyntacticType test_6575_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6575_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6575() { testInvalid(test_6575_sup,test_6575_sub); }

		private static final SyntacticType test_6576_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6576_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6576() { testInvalid(test_6576_sup,test_6576_sub); }

		private static final SyntacticType test_6577_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6577_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6577() { testInvalid(test_6577_sup,test_6577_sub); }

		private static final SyntacticType test_6578_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6578_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6578() { testInvalid(test_6578_sup,test_6578_sub); }

		private static final SyntacticType test_6579_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6579_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6579() { testInvalid(test_6579_sup,test_6579_sub); }

		private static final SyntacticType test_6580_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6580_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6580() { testInvalid(test_6580_sup,test_6580_sub); }

		private static final SyntacticType test_6581_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6581_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6581() { testInvalid(test_6581_sup,test_6581_sub); }

		private static final SyntacticType test_6582_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6582_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6582() { testInvalid(test_6582_sup,test_6582_sub); }

		private static final SyntacticType test_6583_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6583_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6583() { testInvalid(test_6583_sup,test_6583_sub); }

		private static final SyntacticType test_6584_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6584_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6584() { testInvalid(test_6584_sup,test_6584_sub); }

		private static final SyntacticType test_6585_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6585_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6585() { testInvalid(test_6585_sup,test_6585_sub); }

		private static final SyntacticType test_6586_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6586_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6586() { testInvalid(test_6586_sup,test_6586_sub); }

		private static final SyntacticType test_6587_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6587_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6587() { testInvalid(test_6587_sup,test_6587_sub); }

		private static final SyntacticType test_6588_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6588_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6588() { testInvalid(test_6588_sup,test_6588_sub); }

		private static final SyntacticType test_6589_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6589_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6589() { testInvalid(test_6589_sup,test_6589_sub); }

		private static final SyntacticType test_6590_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6590_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6590() { testInvalid(test_6590_sup,test_6590_sub); }

		private static final SyntacticType test_6591_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6591_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6591() { testInvalid(test_6591_sup,test_6591_sub); }

		private static final SyntacticType test_6592_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6592_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6592() { testInvalid(test_6592_sup,test_6592_sub); }

		private static final SyntacticType test_6593_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6593_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6593() { testInvalid(test_6593_sup,test_6593_sub); }

		private static final SyntacticType test_6594_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6594_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6594() { testInvalid(test_6594_sup,test_6594_sub); }

		private static final SyntacticType test_6595_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6595_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6595() { testInvalid(test_6595_sup,test_6595_sub); }

		private static final SyntacticType test_6596_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6596_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6596() { testInvalid(test_6596_sup,test_6596_sub); }

		private static final SyntacticType test_6597_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6597_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6597() { testInvalid(test_6597_sup,test_6597_sub); }

		private static final SyntacticType test_6598_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6598_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6598() { testInvalid(test_6598_sup,test_6598_sub); }

		private static final SyntacticType test_6599_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6599_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6599() { testInvalid(test_6599_sup,test_6599_sub); }

		private static final SyntacticType test_6600_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6600_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6600() { testInvalid(test_6600_sup,test_6600_sub); }

		private static final SyntacticType test_6601_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6601_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6601() { testInvalid(test_6601_sup,test_6601_sub); }

		private static final SyntacticType test_6602_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6602_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6602() { testInvalid(test_6602_sup,test_6602_sub); }

		private static final SyntacticType test_6603_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6603_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6603() { testInvalid(test_6603_sup,test_6603_sub); }

		private static final SyntacticType test_6604_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6604_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6604() { testInvalid(test_6604_sup,test_6604_sub); }

		private static final SyntacticType test_6605_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6605_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6605() { testInvalid(test_6605_sup,test_6605_sub); }

		private static final SyntacticType test_6606_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6606_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6606() { testInvalid(test_6606_sup,test_6606_sub); }

		private static final SyntacticType test_6607_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6607_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6607() { testInvalid(test_6607_sup,test_6607_sub); }

		private static final SyntacticType test_6608_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6608_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6608() { testInvalid(test_6608_sup,test_6608_sub); }

		private static final SyntacticType test_6609_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6609_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6609() { testInvalid(test_6609_sup,test_6609_sub); }

		private static final SyntacticType test_6610_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6610_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6610() { testInvalid(test_6610_sup,test_6610_sub); }

		private static final SyntacticType test_6611_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6611_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6611() { testInvalid(test_6611_sup,test_6611_sub); }

		private static final SyntacticType test_6612_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6612_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6612() { testInvalid(test_6612_sup,test_6612_sub); }

		private static final SyntacticType test_6613_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6613_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6613() { testInvalid(test_6613_sup,test_6613_sub); }

		private static final SyntacticType test_6614_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6614_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6614() { testInvalid(test_6614_sup,test_6614_sub); }

		private static final SyntacticType test_6615_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6615_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6615() { testInvalid(test_6615_sup,test_6615_sub); }

		private static final SyntacticType test_6616_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6616_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6616() { testInvalid(test_6616_sup,test_6616_sub); }

		private static final SyntacticType test_6617_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6617_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6617() { testValid(test_6617_sup,test_6617_sub); }

		private static final SyntacticType test_6618_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6618_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6618() { testInvalid(test_6618_sup,test_6618_sub); }

		private static final SyntacticType test_6619_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6619_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6619() { testInvalid(test_6619_sup,test_6619_sub); }

		private static final SyntacticType test_6620_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6620_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6620() { testInvalid(test_6620_sup,test_6620_sub); }

		private static final SyntacticType test_6621_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6621_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6621() { testInvalid(test_6621_sup,test_6621_sub); }

		private static final SyntacticType test_6622_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6622_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6622() { testInvalid(test_6622_sup,test_6622_sub); }

		private static final SyntacticType test_6623_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6623_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6623() { testInvalid(test_6623_sup,test_6623_sub); }

		private static final SyntacticType test_6624_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6624_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6624() { testValid(test_6624_sup,test_6624_sub); }

		private static final SyntacticType test_6625_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6625_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6625() { testInvalid(test_6625_sup,test_6625_sub); }

		private static final SyntacticType test_6626_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6626_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6626() { testInvalid(test_6626_sup,test_6626_sub); }

		private static final SyntacticType test_6627_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6627_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6627() { testInvalid(test_6627_sup,test_6627_sub); }

		private static final SyntacticType test_6628_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6628_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6628() { testValid(test_6628_sup,test_6628_sub); }

		private static final SyntacticType test_6629_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6629_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6629() { testInvalid(test_6629_sup,test_6629_sub); }

		private static final SyntacticType test_6630_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6630_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6630() { testValid(test_6630_sup,test_6630_sub); }

		private static final SyntacticType test_6631_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6631_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6631() { testValid(test_6631_sup,test_6631_sub); }

		private static final SyntacticType test_6632_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6632_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6632() { testInvalid(test_6632_sup,test_6632_sub); }

		private static final SyntacticType test_6633_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6633_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6633() { testValid(test_6633_sup,test_6633_sub); }

		private static final SyntacticType test_6634_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6634_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6634() { testInvalid(test_6634_sup,test_6634_sub); }

		private static final SyntacticType test_6635_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6635_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6635() { testInvalid(test_6635_sup,test_6635_sub); }

		private static final SyntacticType test_6636_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6636_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6636() { testInvalid(test_6636_sup,test_6636_sub); }

		private static final SyntacticType test_6637_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6637_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6637() { testInvalid(test_6637_sup,test_6637_sub); }

		private static final SyntacticType test_6638_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6638_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6638() { testValid(test_6638_sup,test_6638_sub); }

		private static final SyntacticType test_6639_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6639_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6639() { testInvalid(test_6639_sup,test_6639_sub); }

		private static final SyntacticType test_6640_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6640_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6640() { testInvalid(test_6640_sup,test_6640_sub); }

		private static final SyntacticType test_6641_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6641_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6641() { testInvalid(test_6641_sup,test_6641_sub); }

		private static final SyntacticType test_6642_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6642_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6642() { testInvalid(test_6642_sup,test_6642_sub); }

		private static final SyntacticType test_6643_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6643_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6643() { testInvalid(test_6643_sup,test_6643_sub); }

		private static final SyntacticType test_6644_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6644_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6644() { testInvalid(test_6644_sup,test_6644_sub); }

		private static final SyntacticType test_6645_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6645_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6645() { testInvalid(test_6645_sup,test_6645_sub); }

		private static final SyntacticType test_6646_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6646_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6646() { testInvalid(test_6646_sup,test_6646_sub); }

		private static final SyntacticType test_6647_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6647_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6647() { testInvalid(test_6647_sup,test_6647_sub); }

		private static final SyntacticType test_6648_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6648_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6648() { testInvalid(test_6648_sup,test_6648_sub); }

		private static final SyntacticType test_6649_sup = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		private static final SyntacticType test_6649_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6649() { testInvalid(test_6649_sup,test_6649_sub); }

		private static final SyntacticType test_6650_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6650_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6650() { testInvalid(test_6650_sup,test_6650_sub); }

		private static final SyntacticType test_6651_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6651_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6651() { testInvalid(test_6651_sup,test_6651_sub); }

		private static final SyntacticType test_6652_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6652_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6652() { testValid(test_6652_sup,test_6652_sub); }

		private static final SyntacticType test_6653_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6653_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6653() { testValid(test_6653_sup,test_6653_sub); }

		private static final SyntacticType test_6654_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6654_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6654() { testInvalid(test_6654_sup,test_6654_sub); }

		private static final SyntacticType test_6655_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6655_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6655() { testInvalid(test_6655_sup,test_6655_sub); }

		private static final SyntacticType test_6656_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6656_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6656() { testInvalid(test_6656_sup,test_6656_sub); }

		private static final SyntacticType test_6657_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6657_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6657() { testInvalid(test_6657_sup,test_6657_sub); }

		private static final SyntacticType test_6658_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6658_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6658() { testInvalid(test_6658_sup,test_6658_sub); }

		private static final SyntacticType test_6659_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6659_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6659() { testValid(test_6659_sup,test_6659_sub); }

		private static final SyntacticType test_6660_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6660_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6660() { testValid(test_6660_sup,test_6660_sub); }

		private static final SyntacticType test_6661_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6661_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6661() { testValid(test_6661_sup,test_6661_sub); }

		private static final SyntacticType test_6662_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6662_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6662() { testInvalid(test_6662_sup,test_6662_sub); }

		private static final SyntacticType test_6663_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6663_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6663() { testValid(test_6663_sup,test_6663_sub); }

		private static final SyntacticType test_6664_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6664_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6664() { testInvalid(test_6664_sup,test_6664_sub); }

		private static final SyntacticType test_6665_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6665_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6665() { testInvalid(test_6665_sup,test_6665_sub); }

		private static final SyntacticType test_6666_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6666_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6666() { testValid(test_6666_sup,test_6666_sub); }

		private static final SyntacticType test_6667_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6667_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6667() { testInvalid(test_6667_sup,test_6667_sub); }

		private static final SyntacticType test_6668_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6668_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6668() { testInvalid(test_6668_sup,test_6668_sub); }

		private static final SyntacticType test_6669_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6669_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6669() { testInvalid(test_6669_sup,test_6669_sub); }

		private static final SyntacticType test_6670_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6670_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6670() { testInvalid(test_6670_sup,test_6670_sub); }

		private static final SyntacticType test_6671_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6671_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6671() { testInvalid(test_6671_sup,test_6671_sub); }

		private static final SyntacticType test_6672_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6672_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6672() { testValid(test_6672_sup,test_6672_sub); }

		private static final SyntacticType test_6673_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6673_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6673() { testValid(test_6673_sup,test_6673_sub); }

		private static final SyntacticType test_6674_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6674_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6674() { testValid(test_6674_sup,test_6674_sub); }

		private static final SyntacticType test_6675_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6675_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6675() { testInvalid(test_6675_sup,test_6675_sub); }

		private static final SyntacticType test_6676_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6676_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6676() { testInvalid(test_6676_sup,test_6676_sub); }

		private static final SyntacticType test_6677_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6677_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6677() { testValid(test_6677_sup,test_6677_sub); }

		private static final SyntacticType test_6678_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6678_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6678() { testValid(test_6678_sup,test_6678_sub); }

		private static final SyntacticType test_6679_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6679_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6679() { testInvalid(test_6679_sup,test_6679_sub); }

		private static final SyntacticType test_6680_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6680_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6680() { testInvalid(test_6680_sup,test_6680_sub); }

		private static final SyntacticType test_6681_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6681_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6681() { testValid(test_6681_sup,test_6681_sub); }

		private static final SyntacticType test_6682_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6682_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6682() { testInvalid(test_6682_sup,test_6682_sub); }

		private static final SyntacticType test_6683_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6683_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6683() { testInvalid(test_6683_sup,test_6683_sub); }

		private static final SyntacticType test_6684_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6684_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6684() { testValid(test_6684_sup,test_6684_sub); }

		private static final SyntacticType test_6685_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6685_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6685() { testInvalid(test_6685_sup,test_6685_sub); }

		private static final SyntacticType test_6686_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6686_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6686() { testValid(test_6686_sup,test_6686_sub); }

		private static final SyntacticType test_6687_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6687_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6687() { testValid(test_6687_sup,test_6687_sub); }

		private static final SyntacticType test_6688_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6688_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6688() { testValid(test_6688_sup,test_6688_sub); }

		private static final SyntacticType test_6689_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6689_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6689() { testValid(test_6689_sup,test_6689_sub); }

		private static final SyntacticType test_6690_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6690_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6690() { testInvalid(test_6690_sup,test_6690_sub); }

		private static final SyntacticType test_6691_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6691_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6691() { testValid(test_6691_sup,test_6691_sub); }

		private static final SyntacticType test_6692_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6692_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6692() { testInvalid(test_6692_sup,test_6692_sub); }

		private static final SyntacticType test_6693_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6693_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6693() { testInvalid(test_6693_sup,test_6693_sub); }

		private static final SyntacticType test_6694_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6694_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6694() { testValid(test_6694_sup,test_6694_sub); }

		private static final SyntacticType test_6695_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6695_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6695() { testInvalid(test_6695_sup,test_6695_sub); }

		private static final SyntacticType test_6696_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6696_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6696() { testInvalid(test_6696_sup,test_6696_sub); }

		private static final SyntacticType test_6697_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6697_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6697() { testValid(test_6697_sup,test_6697_sub); }

		private static final SyntacticType test_6698_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6698_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6698() { testInvalid(test_6698_sup,test_6698_sub); }

		private static final SyntacticType test_6699_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6699_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6699() { testInvalid(test_6699_sup,test_6699_sub); }

		private static final SyntacticType test_6700_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6700_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6700() { testInvalid(test_6700_sup,test_6700_sub); }

		private static final SyntacticType test_6701_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6701_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6701() { testInvalid(test_6701_sup,test_6701_sub); }

		private static final SyntacticType test_6702_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6702_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6702() { testInvalid(test_6702_sup,test_6702_sub); }

		private static final SyntacticType test_6703_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6703_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6703() { testInvalid(test_6703_sup,test_6703_sub); }

		private static final SyntacticType test_6704_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6704_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6704() { testInvalid(test_6704_sup,test_6704_sub); }

		private static final SyntacticType test_6705_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6705_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6705() { testInvalid(test_6705_sup,test_6705_sub); }

		private static final SyntacticType test_6706_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6706_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6706() { testInvalid(test_6706_sup,test_6706_sub); }

		private static final SyntacticType test_6707_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6707_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6707() { testInvalid(test_6707_sup,test_6707_sub); }

		private static final SyntacticType test_6708_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6708_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6708() { testInvalid(test_6708_sup,test_6708_sub); }

		private static final SyntacticType test_6709_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6709_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6709() { testInvalid(test_6709_sup,test_6709_sub); }

		private static final SyntacticType test_6710_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6710_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6710() { testInvalid(test_6710_sup,test_6710_sub); }

		private static final SyntacticType test_6711_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6711_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6711() { testInvalid(test_6711_sup,test_6711_sub); }

		private static final SyntacticType test_6712_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6712_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6712() { testInvalid(test_6712_sup,test_6712_sub); }

		private static final SyntacticType test_6713_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6713_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6713() { testInvalid(test_6713_sup,test_6713_sub); }

		private static final SyntacticType test_6714_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6714_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6714() { testInvalid(test_6714_sup,test_6714_sub); }

		private static final SyntacticType test_6715_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6715_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6715() { testInvalid(test_6715_sup,test_6715_sub); }

		private static final SyntacticType test_6716_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6716_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6716() { testInvalid(test_6716_sup,test_6716_sub); }

		private static final SyntacticType test_6717_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6717_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6717() { testInvalid(test_6717_sup,test_6717_sub); }

		private static final SyntacticType test_6718_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6718_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6718() { testInvalid(test_6718_sup,test_6718_sub); }

		private static final SyntacticType test_6719_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6719_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6719() { testInvalid(test_6719_sup,test_6719_sub); }

		private static final SyntacticType test_6720_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6720_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6720() { testValid(test_6720_sup,test_6720_sub); }

		private static final SyntacticType test_6721_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6721_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6721() { testValid(test_6721_sup,test_6721_sub); }

		private static final SyntacticType test_6722_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6722_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6722() { testInvalid(test_6722_sup,test_6722_sub); }

		private static final SyntacticType test_6723_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6723_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6723() { testValid(test_6723_sup,test_6723_sub); }

		private static final SyntacticType test_6724_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6724_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6724() { testValid(test_6724_sup,test_6724_sub); }

		private static final SyntacticType test_6725_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6725_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6725() { testInvalid(test_6725_sup,test_6725_sub); }

		private static final SyntacticType test_6726_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6726_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6726() { testValid(test_6726_sup,test_6726_sub); }

		private static final SyntacticType test_6727_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6727_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6727() { testInvalid(test_6727_sup,test_6727_sub); }

		private static final SyntacticType test_6728_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6728_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6728() { testInvalid(test_6728_sup,test_6728_sub); }

		private static final SyntacticType test_6729_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6729_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6729() { testInvalid(test_6729_sup,test_6729_sub); }

		private static final SyntacticType test_6730_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6730_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6730() { testInvalid(test_6730_sup,test_6730_sub); }

		private static final SyntacticType test_6731_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6731_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6731() { testInvalid(test_6731_sup,test_6731_sub); }

		private static final SyntacticType test_6732_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6732_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6732() { testInvalid(test_6732_sup,test_6732_sub); }

		private static final SyntacticType test_6733_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6733_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6733() { testInvalid(test_6733_sup,test_6733_sub); }

		private static final SyntacticType test_6734_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6734_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6734() { testInvalid(test_6734_sup,test_6734_sub); }

		private static final SyntacticType test_6735_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6735_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6735() { testInvalid(test_6735_sup,test_6735_sub); }

		private static final SyntacticType test_6736_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6736_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6736() { testInvalid(test_6736_sup,test_6736_sub); }

		private static final SyntacticType test_6737_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6737_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6737() { testInvalid(test_6737_sup,test_6737_sub); }

		private static final SyntacticType test_6738_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6738_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6738() { testInvalid(test_6738_sup,test_6738_sub); }

		private static final SyntacticType test_6739_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6739_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6739() { testInvalid(test_6739_sup,test_6739_sub); }

		private static final SyntacticType test_6740_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6740_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6740() { testInvalid(test_6740_sup,test_6740_sub); }

		private static final SyntacticType test_6741_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6741_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6741() { testInvalid(test_6741_sup,test_6741_sub); }

		private static final SyntacticType test_6742_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6742_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6742() { testInvalid(test_6742_sup,test_6742_sub); }

		private static final SyntacticType test_6743_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6743_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6743() { testInvalid(test_6743_sup,test_6743_sub); }

		private static final SyntacticType test_6744_sup = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		private static final SyntacticType test_6744_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6744() { testInvalid(test_6744_sup,test_6744_sub); }

		private static final SyntacticType test_6745_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6745_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6745() { testInvalid(test_6745_sup,test_6745_sub); }

		private static final SyntacticType test_6746_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6746_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6746() { testInvalid(test_6746_sup,test_6746_sub); }

		private static final SyntacticType test_6747_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6747_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6747() { testValid(test_6747_sup,test_6747_sub); }

		private static final SyntacticType test_6748_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6748_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6748() { testInvalid(test_6748_sup,test_6748_sub); }

		private static final SyntacticType test_6749_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6749_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6749() { testInvalid(test_6749_sup,test_6749_sub); }

		private static final SyntacticType test_6750_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6750_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6750() { testInvalid(test_6750_sup,test_6750_sub); }

		private static final SyntacticType test_6751_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6751_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6751() { testInvalid(test_6751_sup,test_6751_sub); }

		private static final SyntacticType test_6752_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6752_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6752() { testInvalid(test_6752_sup,test_6752_sub); }

		private static final SyntacticType test_6753_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6753_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6753() { testInvalid(test_6753_sup,test_6753_sub); }

		private static final SyntacticType test_6754_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6754_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6754() { testValid(test_6754_sup,test_6754_sub); }

		private static final SyntacticType test_6755_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6755_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6755() { testValid(test_6755_sup,test_6755_sub); }

		private static final SyntacticType test_6756_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6756_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6756() { testInvalid(test_6756_sup,test_6756_sub); }

		private static final SyntacticType test_6757_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6757_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6757() { testInvalid(test_6757_sup,test_6757_sub); }

		private static final SyntacticType test_6758_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6758_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6758() { testInvalid(test_6758_sup,test_6758_sub); }

		private static final SyntacticType test_6759_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6759_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6759() { testInvalid(test_6759_sup,test_6759_sub); }

		private static final SyntacticType test_6760_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6760_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6760() { testInvalid(test_6760_sup,test_6760_sub); }

		private static final SyntacticType test_6761_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6761_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6761() { testInvalid(test_6761_sup,test_6761_sub); }

		private static final SyntacticType test_6762_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6762_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6762() { testInvalid(test_6762_sup,test_6762_sub); }

		private static final SyntacticType test_6763_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6763_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6763() { testInvalid(test_6763_sup,test_6763_sub); }

		private static final SyntacticType test_6764_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6764_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6764() { testInvalid(test_6764_sup,test_6764_sub); }

		private static final SyntacticType test_6765_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6765_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6765() { testInvalid(test_6765_sup,test_6765_sub); }

		private static final SyntacticType test_6766_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6766_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6766() { testInvalid(test_6766_sup,test_6766_sub); }

		private static final SyntacticType test_6767_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6767_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6767() { testInvalid(test_6767_sup,test_6767_sub); }

		private static final SyntacticType test_6768_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6768_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6768() { testInvalid(test_6768_sup,test_6768_sub); }

		private static final SyntacticType test_6769_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6769_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6769() { testValid(test_6769_sup,test_6769_sub); }

		private static final SyntacticType test_6770_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6770_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6770() { testInvalid(test_6770_sup,test_6770_sub); }

		private static final SyntacticType test_6771_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6771_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6771() { testInvalid(test_6771_sup,test_6771_sub); }

		private static final SyntacticType test_6772_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6772_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6772() { testValid(test_6772_sup,test_6772_sub); }

		private static final SyntacticType test_6773_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6773_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6773() { testValid(test_6773_sup,test_6773_sub); }

		private static final SyntacticType test_6774_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6774_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6774() { testInvalid(test_6774_sup,test_6774_sub); }

		private static final SyntacticType test_6775_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6775_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6775() { testInvalid(test_6775_sup,test_6775_sub); }

		private static final SyntacticType test_6776_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6776_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6776() { testInvalid(test_6776_sup,test_6776_sub); }

		private static final SyntacticType test_6777_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6777_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6777() { testInvalid(test_6777_sup,test_6777_sub); }

		private static final SyntacticType test_6778_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6778_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6778() { testInvalid(test_6778_sup,test_6778_sub); }

		private static final SyntacticType test_6779_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6779_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6779() { testValid(test_6779_sup,test_6779_sub); }

		private static final SyntacticType test_6780_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6780_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6780() { testInvalid(test_6780_sup,test_6780_sub); }

		private static final SyntacticType test_6781_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6781_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6781() { testValid(test_6781_sup,test_6781_sub); }

		private static final SyntacticType test_6782_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6782_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6782() { testValid(test_6782_sup,test_6782_sub); }

		private static final SyntacticType test_6783_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6783_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6783() { testInvalid(test_6783_sup,test_6783_sub); }

		private static final SyntacticType test_6784_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6784_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6784() { testInvalid(test_6784_sup,test_6784_sub); }

		private static final SyntacticType test_6785_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6785_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6785() { testInvalid(test_6785_sup,test_6785_sub); }

		private static final SyntacticType test_6786_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6786_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6786() { testInvalid(test_6786_sup,test_6786_sub); }

		private static final SyntacticType test_6787_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6787_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6787() { testInvalid(test_6787_sup,test_6787_sub); }

		private static final SyntacticType test_6788_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6788_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6788() { testInvalid(test_6788_sup,test_6788_sub); }

		private static final SyntacticType test_6789_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6789_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6789() { testInvalid(test_6789_sup,test_6789_sub); }

		private static final SyntacticType test_6790_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6790_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6790() { testInvalid(test_6790_sup,test_6790_sub); }

		private static final SyntacticType test_6791_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6791_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6791() { testInvalid(test_6791_sup,test_6791_sub); }

		private static final SyntacticType test_6792_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6792_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6792() { testInvalid(test_6792_sup,test_6792_sub); }

		private static final SyntacticType test_6793_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6793_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6793() { testInvalid(test_6793_sup,test_6793_sub); }

		private static final SyntacticType test_6794_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6794_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6794() { testInvalid(test_6794_sup,test_6794_sub); }

		private static final SyntacticType test_6795_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6795_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6795() { testInvalid(test_6795_sup,test_6795_sub); }

		private static final SyntacticType test_6796_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6796_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6796() { testInvalid(test_6796_sup,test_6796_sub); }

		private static final SyntacticType test_6797_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6797_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6797() { testInvalid(test_6797_sup,test_6797_sub); }

		private static final SyntacticType test_6798_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6798_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6798() { testInvalid(test_6798_sup,test_6798_sub); }

		private static final SyntacticType test_6799_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6799_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6799() { testInvalid(test_6799_sup,test_6799_sub); }

		private static final SyntacticType test_6800_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6800_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6800() { testInvalid(test_6800_sup,test_6800_sub); }

		private static final SyntacticType test_6801_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6801_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6801() { testInvalid(test_6801_sup,test_6801_sub); }

		private static final SyntacticType test_6802_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6802_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6802() { testInvalid(test_6802_sup,test_6802_sub); }

		private static final SyntacticType test_6803_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6803_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6803() { testInvalid(test_6803_sup,test_6803_sub); }

		private static final SyntacticType test_6804_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6804_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6804() { testInvalid(test_6804_sup,test_6804_sub); }

		private static final SyntacticType test_6805_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6805_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6805() { testInvalid(test_6805_sup,test_6805_sub); }

		private static final SyntacticType test_6806_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6806_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6806() { testInvalid(test_6806_sup,test_6806_sub); }

		private static final SyntacticType test_6807_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6807_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6807() { testInvalid(test_6807_sup,test_6807_sub); }

		private static final SyntacticType test_6808_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6808_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6808() { testInvalid(test_6808_sup,test_6808_sub); }

		private static final SyntacticType test_6809_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6809_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6809() { testInvalid(test_6809_sup,test_6809_sub); }

		private static final SyntacticType test_6810_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6810_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6810() { testInvalid(test_6810_sup,test_6810_sub); }

		private static final SyntacticType test_6811_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6811_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6811() { testInvalid(test_6811_sup,test_6811_sub); }

		private static final SyntacticType test_6812_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6812_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6812() { testInvalid(test_6812_sup,test_6812_sub); }

		private static final SyntacticType test_6813_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6813_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6813() { testInvalid(test_6813_sup,test_6813_sub); }

		private static final SyntacticType test_6814_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6814_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6814() { testInvalid(test_6814_sup,test_6814_sub); }

		private static final SyntacticType test_6815_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6815_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6815() { testInvalid(test_6815_sup,test_6815_sub); }

		private static final SyntacticType test_6816_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6816_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6816() { testValid(test_6816_sup,test_6816_sub); }

		private static final SyntacticType test_6817_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6817_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6817() { testInvalid(test_6817_sup,test_6817_sub); }

		private static final SyntacticType test_6818_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6818_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6818() { testValid(test_6818_sup,test_6818_sub); }

		private static final SyntacticType test_6819_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6819_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6819() { testInvalid(test_6819_sup,test_6819_sub); }

		private static final SyntacticType test_6820_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6820_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6820() { testInvalid(test_6820_sup,test_6820_sub); }

		private static final SyntacticType test_6821_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6821_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6821() { testValid(test_6821_sup,test_6821_sub); }

		private static final SyntacticType test_6822_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6822_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6822() { testInvalid(test_6822_sup,test_6822_sub); }

		private static final SyntacticType test_6823_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6823_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6823() { testInvalid(test_6823_sup,test_6823_sub); }

		private static final SyntacticType test_6824_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6824_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6824() { testInvalid(test_6824_sup,test_6824_sub); }

		private static final SyntacticType test_6825_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6825_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6825() { testInvalid(test_6825_sup,test_6825_sub); }

		private static final SyntacticType test_6826_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6826_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6826() { testInvalid(test_6826_sup,test_6826_sub); }

		private static final SyntacticType test_6827_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6827_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6827() { testInvalid(test_6827_sup,test_6827_sub); }

		private static final SyntacticType test_6828_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6828_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6828() { testInvalid(test_6828_sup,test_6828_sub); }

		private static final SyntacticType test_6829_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6829_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6829() { testInvalid(test_6829_sup,test_6829_sub); }

		private static final SyntacticType test_6830_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6830_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6830() { testInvalid(test_6830_sup,test_6830_sub); }

		private static final SyntacticType test_6831_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6831_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6831() { testInvalid(test_6831_sup,test_6831_sub); }

		private static final SyntacticType test_6832_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6832_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6832() { testInvalid(test_6832_sup,test_6832_sub); }

		private static final SyntacticType test_6833_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6833_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6833() { testInvalid(test_6833_sup,test_6833_sub); }

		private static final SyntacticType test_6834_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6834_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6834() { testInvalid(test_6834_sup,test_6834_sub); }

		private static final SyntacticType test_6835_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6835_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6835() { testInvalid(test_6835_sup,test_6835_sub); }

		private static final SyntacticType test_6836_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6836_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6836() { testInvalid(test_6836_sup,test_6836_sub); }

		private static final SyntacticType test_6837_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6837_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6837() { testInvalid(test_6837_sup,test_6837_sub); }

		private static final SyntacticType test_6838_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6838_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6838() { testInvalid(test_6838_sup,test_6838_sub); }

		private static final SyntacticType test_6839_sup = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		private static final SyntacticType test_6839_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6839() { testInvalid(test_6839_sup,test_6839_sub); }

		private static final SyntacticType test_6840_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6840_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6840() { testInvalid(test_6840_sup,test_6840_sub); }

		private static final SyntacticType test_6841_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6841_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6841() { testInvalid(test_6841_sup,test_6841_sub); }

		private static final SyntacticType test_6842_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6842_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6842() { testValid(test_6842_sup,test_6842_sub); }

		private static final SyntacticType test_6843_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6843_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6843() { testValid(test_6843_sup,test_6843_sub); }

		private static final SyntacticType test_6844_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6844_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6844() { testInvalid(test_6844_sup,test_6844_sub); }

		private static final SyntacticType test_6845_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6845_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6845() { testInvalid(test_6845_sup,test_6845_sub); }

		private static final SyntacticType test_6846_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6846_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6846() { testInvalid(test_6846_sup,test_6846_sub); }

		private static final SyntacticType test_6847_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6847_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6847() { testInvalid(test_6847_sup,test_6847_sub); }

		private static final SyntacticType test_6848_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6848_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6848() { testInvalid(test_6848_sup,test_6848_sub); }

		private static final SyntacticType test_6849_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6849_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6849() { testValid(test_6849_sup,test_6849_sub); }

		private static final SyntacticType test_6850_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6850_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6850() { testValid(test_6850_sup,test_6850_sub); }

		private static final SyntacticType test_6851_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6851_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6851() { testValid(test_6851_sup,test_6851_sub); }

		private static final SyntacticType test_6852_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6852_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6852() { testInvalid(test_6852_sup,test_6852_sub); }

		private static final SyntacticType test_6853_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6853_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6853() { testValid(test_6853_sup,test_6853_sub); }

		private static final SyntacticType test_6854_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6854_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6854() { testInvalid(test_6854_sup,test_6854_sub); }

		private static final SyntacticType test_6855_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6855_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6855() { testInvalid(test_6855_sup,test_6855_sub); }

		private static final SyntacticType test_6856_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6856_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6856() { testValid(test_6856_sup,test_6856_sub); }

		private static final SyntacticType test_6857_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6857_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6857() { testInvalid(test_6857_sup,test_6857_sub); }

		private static final SyntacticType test_6858_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6858_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6858() { testInvalid(test_6858_sup,test_6858_sub); }

		private static final SyntacticType test_6859_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6859_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6859() { testInvalid(test_6859_sup,test_6859_sub); }

		private static final SyntacticType test_6860_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6860_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6860() { testInvalid(test_6860_sup,test_6860_sub); }

		private static final SyntacticType test_6861_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6861_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6861() { testInvalid(test_6861_sup,test_6861_sub); }

		private static final SyntacticType test_6862_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6862_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6862() { testValid(test_6862_sup,test_6862_sub); }

		private static final SyntacticType test_6863_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6863_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6863() { testValid(test_6863_sup,test_6863_sub); }

		private static final SyntacticType test_6864_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6864_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6864() { testValid(test_6864_sup,test_6864_sub); }

		private static final SyntacticType test_6865_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6865_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6865() { testInvalid(test_6865_sup,test_6865_sub); }

		private static final SyntacticType test_6866_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6866_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6866() { testInvalid(test_6866_sup,test_6866_sub); }

		private static final SyntacticType test_6867_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6867_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6867() { testValid(test_6867_sup,test_6867_sub); }

		private static final SyntacticType test_6868_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6868_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6868() { testValid(test_6868_sup,test_6868_sub); }

		private static final SyntacticType test_6869_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6869_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6869() { testInvalid(test_6869_sup,test_6869_sub); }

		private static final SyntacticType test_6870_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6870_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6870() { testInvalid(test_6870_sup,test_6870_sub); }

		private static final SyntacticType test_6871_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6871_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6871() { testValid(test_6871_sup,test_6871_sub); }

		private static final SyntacticType test_6872_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6872_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6872() { testInvalid(test_6872_sup,test_6872_sub); }

		private static final SyntacticType test_6873_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6873_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6873() { testInvalid(test_6873_sup,test_6873_sub); }

		private static final SyntacticType test_6874_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6874_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6874() { testValid(test_6874_sup,test_6874_sub); }

		private static final SyntacticType test_6875_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6875_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6875() { testInvalid(test_6875_sup,test_6875_sub); }

		private static final SyntacticType test_6876_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6876_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6876() { testValid(test_6876_sup,test_6876_sub); }

		private static final SyntacticType test_6877_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6877_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6877() { testValid(test_6877_sup,test_6877_sub); }

		private static final SyntacticType test_6878_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6878_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6878() { testValid(test_6878_sup,test_6878_sub); }

		private static final SyntacticType test_6879_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6879_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6879() { testValid(test_6879_sup,test_6879_sub); }

		private static final SyntacticType test_6880_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6880_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6880() { testInvalid(test_6880_sup,test_6880_sub); }

		private static final SyntacticType test_6881_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6881_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6881() { testValid(test_6881_sup,test_6881_sub); }

		private static final SyntacticType test_6882_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6882_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6882() { testInvalid(test_6882_sup,test_6882_sub); }

		private static final SyntacticType test_6883_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6883_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6883() { testInvalid(test_6883_sup,test_6883_sub); }

		private static final SyntacticType test_6884_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6884_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6884() { testInvalid(test_6884_sup,test_6884_sub); }

		private static final SyntacticType test_6885_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6885_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6885() { testInvalid(test_6885_sup,test_6885_sub); }

		private static final SyntacticType test_6886_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6886_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6886() { testInvalid(test_6886_sup,test_6886_sub); }

		private static final SyntacticType test_6887_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6887_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6887() { testValid(test_6887_sup,test_6887_sub); }

		private static final SyntacticType test_6888_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6888_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6888() { testInvalid(test_6888_sup,test_6888_sub); }

		private static final SyntacticType test_6889_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6889_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6889() { testInvalid(test_6889_sup,test_6889_sub); }

		private static final SyntacticType test_6890_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6890_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6890() { testInvalid(test_6890_sup,test_6890_sub); }

		private static final SyntacticType test_6891_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6891_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6891() { testInvalid(test_6891_sup,test_6891_sub); }

		private static final SyntacticType test_6892_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6892_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6892() { testInvalid(test_6892_sup,test_6892_sub); }

		private static final SyntacticType test_6893_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6893_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6893() { testInvalid(test_6893_sup,test_6893_sub); }

		private static final SyntacticType test_6894_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6894_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6894() { testInvalid(test_6894_sup,test_6894_sub); }

		private static final SyntacticType test_6895_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6895_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6895() { testInvalid(test_6895_sup,test_6895_sub); }

		private static final SyntacticType test_6896_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6896_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6896() { testInvalid(test_6896_sup,test_6896_sub); }

		private static final SyntacticType test_6897_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6897_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6897() { testInvalid(test_6897_sup,test_6897_sub); }

		private static final SyntacticType test_6898_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6898_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6898() { testInvalid(test_6898_sup,test_6898_sub); }

		private static final SyntacticType test_6899_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6899_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6899() { testInvalid(test_6899_sup,test_6899_sub); }

		private static final SyntacticType test_6900_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6900_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6900() { testInvalid(test_6900_sup,test_6900_sub); }

		private static final SyntacticType test_6901_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6901_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6901() { testInvalid(test_6901_sup,test_6901_sub); }

		private static final SyntacticType test_6902_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6902_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6902() { testInvalid(test_6902_sup,test_6902_sub); }

		private static final SyntacticType test_6903_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6903_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6903() { testInvalid(test_6903_sup,test_6903_sub); }

		private static final SyntacticType test_6904_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6904_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6904() { testInvalid(test_6904_sup,test_6904_sub); }

		private static final SyntacticType test_6905_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6905_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_6905() { testInvalid(test_6905_sup,test_6905_sub); }

		private static final SyntacticType test_6906_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6906_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_6906() { testInvalid(test_6906_sup,test_6906_sub); }

		private static final SyntacticType test_6907_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6907_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_6907() { testInvalid(test_6907_sup,test_6907_sub); }

		private static final SyntacticType test_6908_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6908_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_6908() { testInvalid(test_6908_sup,test_6908_sub); }

		private static final SyntacticType test_6909_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6909_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_6909() { testInvalid(test_6909_sup,test_6909_sub); }

		private static final SyntacticType test_6910_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6910_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_6910() { testInvalid(test_6910_sup,test_6910_sub); }

		private static final SyntacticType test_6911_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6911_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_6911() { testInvalid(test_6911_sup,test_6911_sub); }

		private static final SyntacticType test_6912_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6912_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_6912() { testValid(test_6912_sup,test_6912_sub); }

		private static final SyntacticType test_6913_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6913_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_6913() { testInvalid(test_6913_sup,test_6913_sub); }

		private static final SyntacticType test_6914_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6914_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_6914() { testInvalid(test_6914_sup,test_6914_sub); }

		private static final SyntacticType test_6915_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6915_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_6915() { testInvalid(test_6915_sup,test_6915_sub); }

		private static final SyntacticType test_6916_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6916_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_6916() { testInvalid(test_6916_sup,test_6916_sub); }

		private static final SyntacticType test_6917_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6917_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_6917() { testInvalid(test_6917_sup,test_6917_sub); }

		private static final SyntacticType test_6918_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6918_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_6918() { testInvalid(test_6918_sup,test_6918_sub); }

		private static final SyntacticType test_6919_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6919_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_6919() { testInvalid(test_6919_sup,test_6919_sub); }

		private static final SyntacticType test_6920_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6920_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_6920() { testInvalid(test_6920_sup,test_6920_sub); }

		private static final SyntacticType test_6921_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6921_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_6921() { testInvalid(test_6921_sup,test_6921_sub); }

		private static final SyntacticType test_6922_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6922_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_6922() { testInvalid(test_6922_sup,test_6922_sub); }

		private static final SyntacticType test_6923_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6923_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_6923() { testInvalid(test_6923_sup,test_6923_sub); }

		private static final SyntacticType test_6924_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6924_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_6924() { testInvalid(test_6924_sup,test_6924_sub); }

		private static final SyntacticType test_6925_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6925_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_6925() { testInvalid(test_6925_sup,test_6925_sub); }

		private static final SyntacticType test_6926_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6926_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_6926() { testInvalid(test_6926_sup,test_6926_sub); }

		private static final SyntacticType test_6927_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6927_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_6927() { testInvalid(test_6927_sup,test_6927_sub); }

		private static final SyntacticType test_6928_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6928_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_6928() { testInvalid(test_6928_sup,test_6928_sub); }

		private static final SyntacticType test_6929_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6929_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_6929() { testInvalid(test_6929_sup,test_6929_sub); }

		private static final SyntacticType test_6930_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6930_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_6930() { testInvalid(test_6930_sup,test_6930_sub); }

		private static final SyntacticType test_6931_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6931_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_6931() { testInvalid(test_6931_sup,test_6931_sub); }

		private static final SyntacticType test_6932_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6932_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_6932() { testInvalid(test_6932_sup,test_6932_sub); }

		private static final SyntacticType test_6933_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6933_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_6933() { testInvalid(test_6933_sup,test_6933_sub); }

		private static final SyntacticType test_6934_sup = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		private static final SyntacticType test_6934_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_6934() { testInvalid(test_6934_sup,test_6934_sub); }

		private static final SyntacticType test_6935_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6935_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_6935() { testInvalid(test_6935_sup,test_6935_sub); }

		private static final SyntacticType test_6936_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6936_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_6936() { testInvalid(test_6936_sup,test_6936_sub); }

		private static final SyntacticType test_6937_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6937_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_6937() { testInvalid(test_6937_sup,test_6937_sub); }

		private static final SyntacticType test_6938_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6938_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_6938() { testInvalid(test_6938_sup,test_6938_sub); }

		private static final SyntacticType test_6939_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6939_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_6939() { testInvalid(test_6939_sup,test_6939_sub); }

		private static final SyntacticType test_6940_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6940_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_6940() { testInvalid(test_6940_sup,test_6940_sub); }

		private static final SyntacticType test_6941_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6941_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_6941() { testInvalid(test_6941_sup,test_6941_sub); }

		private static final SyntacticType test_6942_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6942_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_6942() { testInvalid(test_6942_sup,test_6942_sub); }

		private static final SyntacticType test_6943_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6943_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_6943() { testInvalid(test_6943_sup,test_6943_sub); }

		private static final SyntacticType test_6944_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6944_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_6944() { testInvalid(test_6944_sup,test_6944_sub); }

		private static final SyntacticType test_6945_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6945_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_6945() { testInvalid(test_6945_sup,test_6945_sub); }

		private static final SyntacticType test_6946_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6946_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_6946() { testInvalid(test_6946_sup,test_6946_sub); }

		private static final SyntacticType test_6947_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6947_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_6947() { testInvalid(test_6947_sup,test_6947_sub); }

		private static final SyntacticType test_6948_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6948_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_6948() { testInvalid(test_6948_sup,test_6948_sub); }

		private static final SyntacticType test_6949_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6949_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_6949() { testInvalid(test_6949_sup,test_6949_sub); }

		private static final SyntacticType test_6950_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6950_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_6950() { testInvalid(test_6950_sup,test_6950_sub); }

		private static final SyntacticType test_6951_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6951_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_6951() { testInvalid(test_6951_sup,test_6951_sub); }

		private static final SyntacticType test_6952_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6952_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_6952() { testInvalid(test_6952_sup,test_6952_sub); }

		private static final SyntacticType test_6953_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6953_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_6953() { testInvalid(test_6953_sup,test_6953_sub); }

		private static final SyntacticType test_6954_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6954_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_6954() { testInvalid(test_6954_sup,test_6954_sub); }

		private static final SyntacticType test_6955_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6955_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_6955() { testInvalid(test_6955_sup,test_6955_sub); }

		private static final SyntacticType test_6956_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6956_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_6956() { testInvalid(test_6956_sup,test_6956_sub); }

		private static final SyntacticType test_6957_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6957_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_6957() { testInvalid(test_6957_sup,test_6957_sub); }

		private static final SyntacticType test_6958_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6958_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_6958() { testInvalid(test_6958_sup,test_6958_sub); }

		private static final SyntacticType test_6959_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6959_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_6959() { testInvalid(test_6959_sup,test_6959_sub); }

		private static final SyntacticType test_6960_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6960_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_6960() { testInvalid(test_6960_sup,test_6960_sub); }

		private static final SyntacticType test_6961_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6961_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_6961() { testInvalid(test_6961_sup,test_6961_sub); }

		private static final SyntacticType test_6962_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6962_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_6962() { testInvalid(test_6962_sup,test_6962_sub); }

		private static final SyntacticType test_6963_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6963_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_6963() { testInvalid(test_6963_sup,test_6963_sub); }

		private static final SyntacticType test_6964_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6964_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_6964() { testInvalid(test_6964_sup,test_6964_sub); }

		private static final SyntacticType test_6965_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6965_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_6965() { testInvalid(test_6965_sup,test_6965_sub); }

		private static final SyntacticType test_6966_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6966_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_6966() { testInvalid(test_6966_sup,test_6966_sub); }

		private static final SyntacticType test_6967_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6967_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_6967() { testInvalid(test_6967_sup,test_6967_sub); }

		private static final SyntacticType test_6968_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6968_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_6968() { testInvalid(test_6968_sup,test_6968_sub); }

		private static final SyntacticType test_6969_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6969_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_6969() { testInvalid(test_6969_sup,test_6969_sub); }

		private static final SyntacticType test_6970_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6970_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_6970() { testInvalid(test_6970_sup,test_6970_sub); }

		private static final SyntacticType test_6971_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6971_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_6971() { testInvalid(test_6971_sup,test_6971_sub); }

		private static final SyntacticType test_6972_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6972_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_6972() { testInvalid(test_6972_sup,test_6972_sub); }

		private static final SyntacticType test_6973_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6973_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_6973() { testInvalid(test_6973_sup,test_6973_sub); }

		private static final SyntacticType test_6974_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6974_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_6974() { testInvalid(test_6974_sup,test_6974_sub); }

		private static final SyntacticType test_6975_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6975_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_6975() { testInvalid(test_6975_sup,test_6975_sub); }

		private static final SyntacticType test_6976_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6976_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_6976() { testInvalid(test_6976_sup,test_6976_sub); }

		private static final SyntacticType test_6977_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6977_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_6977() { testInvalid(test_6977_sup,test_6977_sub); }

		private static final SyntacticType test_6978_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6978_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_6978() { testInvalid(test_6978_sup,test_6978_sub); }

		private static final SyntacticType test_6979_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6979_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_6979() { testInvalid(test_6979_sup,test_6979_sub); }

		private static final SyntacticType test_6980_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6980_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_6980() { testInvalid(test_6980_sup,test_6980_sub); }

		private static final SyntacticType test_6981_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6981_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_6981() { testInvalid(test_6981_sup,test_6981_sub); }

		private static final SyntacticType test_6982_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6982_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_6982() { testInvalid(test_6982_sup,test_6982_sub); }

		private static final SyntacticType test_6983_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6983_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_6983() { testInvalid(test_6983_sup,test_6983_sub); }

		private static final SyntacticType test_6984_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6984_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_6984() { testInvalid(test_6984_sup,test_6984_sub); }

		private static final SyntacticType test_6985_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6985_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_6985() { testInvalid(test_6985_sup,test_6985_sub); }

		private static final SyntacticType test_6986_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6986_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_6986() { testInvalid(test_6986_sup,test_6986_sub); }

		private static final SyntacticType test_6987_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6987_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_6987() { testInvalid(test_6987_sup,test_6987_sub); }

		private static final SyntacticType test_6988_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6988_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_6988() { testInvalid(test_6988_sup,test_6988_sub); }

		private static final SyntacticType test_6989_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6989_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_6989() { testInvalid(test_6989_sup,test_6989_sub); }

		private static final SyntacticType test_6990_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6990_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_6990() { testInvalid(test_6990_sup,test_6990_sub); }

		private static final SyntacticType test_6991_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6991_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_6991() { testInvalid(test_6991_sup,test_6991_sub); }

		private static final SyntacticType test_6992_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6992_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_6992() { testInvalid(test_6992_sup,test_6992_sub); }

		private static final SyntacticType test_6993_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6993_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_6993() { testInvalid(test_6993_sup,test_6993_sub); }

		private static final SyntacticType test_6994_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6994_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_6994() { testInvalid(test_6994_sup,test_6994_sub); }

		private static final SyntacticType test_6995_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6995_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_6995() { testInvalid(test_6995_sup,test_6995_sub); }

		private static final SyntacticType test_6996_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6996_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_6996() { testInvalid(test_6996_sup,test_6996_sub); }

		private static final SyntacticType test_6997_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6997_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_6997() { testInvalid(test_6997_sup,test_6997_sub); }

		private static final SyntacticType test_6998_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6998_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_6998() { testInvalid(test_6998_sup,test_6998_sub); }

		private static final SyntacticType test_6999_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_6999_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_6999() { testInvalid(test_6999_sup,test_6999_sub); }

	}
	public static class Part_7 {
		private static final SyntacticType test_7000_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7000_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7000() { testInvalid(test_7000_sup,test_7000_sub); }

		private static final SyntacticType test_7001_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7001_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7001() { testInvalid(test_7001_sup,test_7001_sub); }

		private static final SyntacticType test_7002_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7002_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7002() { testInvalid(test_7002_sup,test_7002_sub); }

		private static final SyntacticType test_7003_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7003_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7003() { testInvalid(test_7003_sup,test_7003_sub); }

		private static final SyntacticType test_7004_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7004_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7004() { testInvalid(test_7004_sup,test_7004_sub); }

		private static final SyntacticType test_7005_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7005_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7005() { testInvalid(test_7005_sup,test_7005_sub); }

		private static final SyntacticType test_7006_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7006_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7006() { testInvalid(test_7006_sup,test_7006_sub); }

		private static final SyntacticType test_7007_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7007_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7007() { testInvalid(test_7007_sup,test_7007_sub); }

		private static final SyntacticType test_7008_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7008_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7008() { testValid(test_7008_sup,test_7008_sub); }

		private static final SyntacticType test_7009_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7009_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7009() { testInvalid(test_7009_sup,test_7009_sub); }

		private static final SyntacticType test_7010_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7010_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7010() { testInvalid(test_7010_sup,test_7010_sub); }

		private static final SyntacticType test_7011_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7011_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7011() { testInvalid(test_7011_sup,test_7011_sub); }

		private static final SyntacticType test_7012_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7012_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7012() { testInvalid(test_7012_sup,test_7012_sub); }

		private static final SyntacticType test_7013_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7013_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7013() { testInvalid(test_7013_sup,test_7013_sub); }

		private static final SyntacticType test_7014_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7014_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7014() { testInvalid(test_7014_sup,test_7014_sub); }

		private static final SyntacticType test_7015_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7015_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7015() { testInvalid(test_7015_sup,test_7015_sub); }

		private static final SyntacticType test_7016_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7016_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7016() { testInvalid(test_7016_sup,test_7016_sub); }

		private static final SyntacticType test_7017_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7017_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7017() { testInvalid(test_7017_sup,test_7017_sub); }

		private static final SyntacticType test_7018_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7018_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7018() { testInvalid(test_7018_sup,test_7018_sub); }

		private static final SyntacticType test_7019_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7019_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7019() { testInvalid(test_7019_sup,test_7019_sub); }

		private static final SyntacticType test_7020_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7020_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7020() { testInvalid(test_7020_sup,test_7020_sub); }

		private static final SyntacticType test_7021_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7021_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7021() { testInvalid(test_7021_sup,test_7021_sub); }

		private static final SyntacticType test_7022_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7022_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7022() { testInvalid(test_7022_sup,test_7022_sub); }

		private static final SyntacticType test_7023_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7023_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7023() { testInvalid(test_7023_sup,test_7023_sub); }

		private static final SyntacticType test_7024_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7024_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7024() { testInvalid(test_7024_sup,test_7024_sub); }

		private static final SyntacticType test_7025_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7025_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7025() { testInvalid(test_7025_sup,test_7025_sub); }

		private static final SyntacticType test_7026_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7026_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7026() { testInvalid(test_7026_sup,test_7026_sub); }

		private static final SyntacticType test_7027_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7027_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7027() { testInvalid(test_7027_sup,test_7027_sub); }

		private static final SyntacticType test_7028_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7028_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7028() { testInvalid(test_7028_sup,test_7028_sub); }

		private static final SyntacticType test_7029_sup = parse("(((int & any) & {int, any}) | (int & {int}))");
		private static final SyntacticType test_7029_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7029() { testInvalid(test_7029_sup,test_7029_sub); }

		private static final SyntacticType test_7030_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7030_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7030() { testInvalid(test_7030_sup,test_7030_sub); }

		private static final SyntacticType test_7031_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7031_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7031() { testInvalid(test_7031_sup,test_7031_sub); }

		private static final SyntacticType test_7032_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7032_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7032() { testInvalid(test_7032_sup,test_7032_sub); }

		private static final SyntacticType test_7033_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7033_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7033() { testInvalid(test_7033_sup,test_7033_sub); }

		private static final SyntacticType test_7034_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7034_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7034() { testInvalid(test_7034_sup,test_7034_sub); }

		private static final SyntacticType test_7035_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7035_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7035() { testInvalid(test_7035_sup,test_7035_sub); }

		private static final SyntacticType test_7036_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7036_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7036() { testInvalid(test_7036_sup,test_7036_sub); }

		private static final SyntacticType test_7037_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7037_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7037() { testInvalid(test_7037_sup,test_7037_sub); }

		private static final SyntacticType test_7038_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7038_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7038() { testInvalid(test_7038_sup,test_7038_sub); }

		private static final SyntacticType test_7039_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7039_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7039() { testInvalid(test_7039_sup,test_7039_sub); }

		private static final SyntacticType test_7040_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7040_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7040() { testInvalid(test_7040_sup,test_7040_sub); }

		private static final SyntacticType test_7041_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7041_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7041() { testInvalid(test_7041_sup,test_7041_sub); }

		private static final SyntacticType test_7042_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7042_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7042() { testInvalid(test_7042_sup,test_7042_sub); }

		private static final SyntacticType test_7043_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7043_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7043() { testInvalid(test_7043_sup,test_7043_sub); }

		private static final SyntacticType test_7044_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7044_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7044() { testInvalid(test_7044_sup,test_7044_sub); }

		private static final SyntacticType test_7045_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7045_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7045() { testInvalid(test_7045_sup,test_7045_sub); }

		private static final SyntacticType test_7046_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7046_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7046() { testInvalid(test_7046_sup,test_7046_sub); }

		private static final SyntacticType test_7047_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7047_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7047() { testInvalid(test_7047_sup,test_7047_sub); }

		private static final SyntacticType test_7048_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7048_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7048() { testInvalid(test_7048_sup,test_7048_sub); }

		private static final SyntacticType test_7049_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7049_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7049() { testInvalid(test_7049_sup,test_7049_sub); }

		private static final SyntacticType test_7050_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7050_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7050() { testInvalid(test_7050_sup,test_7050_sub); }

		private static final SyntacticType test_7051_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7051_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7051() { testInvalid(test_7051_sup,test_7051_sub); }

		private static final SyntacticType test_7052_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7052_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7052() { testValid(test_7052_sup,test_7052_sub); }

		private static final SyntacticType test_7053_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7053_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7053() { testValid(test_7053_sup,test_7053_sub); }

		private static final SyntacticType test_7054_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7054_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7054() { testInvalid(test_7054_sup,test_7054_sub); }

		private static final SyntacticType test_7055_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7055_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7055() { testInvalid(test_7055_sup,test_7055_sub); }

		private static final SyntacticType test_7056_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7056_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7056() { testInvalid(test_7056_sup,test_7056_sub); }

		private static final SyntacticType test_7057_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7057_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7057() { testInvalid(test_7057_sup,test_7057_sub); }

		private static final SyntacticType test_7058_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7058_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7058() { testInvalid(test_7058_sup,test_7058_sub); }

		private static final SyntacticType test_7059_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7059_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7059() { testInvalid(test_7059_sup,test_7059_sub); }

		private static final SyntacticType test_7060_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7060_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7060() { testInvalid(test_7060_sup,test_7060_sub); }

		private static final SyntacticType test_7061_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7061_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7061() { testInvalid(test_7061_sup,test_7061_sub); }

		private static final SyntacticType test_7062_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7062_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7062() { testInvalid(test_7062_sup,test_7062_sub); }

		private static final SyntacticType test_7063_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7063_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7063() { testInvalid(test_7063_sup,test_7063_sub); }

		private static final SyntacticType test_7064_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7064_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7064() { testInvalid(test_7064_sup,test_7064_sub); }

		private static final SyntacticType test_7065_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7065_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7065() { testInvalid(test_7065_sup,test_7065_sub); }

		private static final SyntacticType test_7066_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7066_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7066() { testInvalid(test_7066_sup,test_7066_sub); }

		private static final SyntacticType test_7067_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7067_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7067() { testValid(test_7067_sup,test_7067_sub); }

		private static final SyntacticType test_7068_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7068_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7068() { testValid(test_7068_sup,test_7068_sub); }

		private static final SyntacticType test_7069_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7069_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7069() { testInvalid(test_7069_sup,test_7069_sub); }

		private static final SyntacticType test_7070_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7070_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7070() { testInvalid(test_7070_sup,test_7070_sub); }

		private static final SyntacticType test_7071_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7071_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7071() { testValid(test_7071_sup,test_7071_sub); }

		private static final SyntacticType test_7072_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7072_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7072() { testInvalid(test_7072_sup,test_7072_sub); }

		private static final SyntacticType test_7073_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7073_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7073() { testInvalid(test_7073_sup,test_7073_sub); }

		private static final SyntacticType test_7074_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7074_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7074() { testInvalid(test_7074_sup,test_7074_sub); }

		private static final SyntacticType test_7075_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7075_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7075() { testInvalid(test_7075_sup,test_7075_sub); }

		private static final SyntacticType test_7076_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7076_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7076() { testInvalid(test_7076_sup,test_7076_sub); }

		private static final SyntacticType test_7077_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7077_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7077() { testInvalid(test_7077_sup,test_7077_sub); }

		private static final SyntacticType test_7078_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7078_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7078() { testInvalid(test_7078_sup,test_7078_sub); }

		private static final SyntacticType test_7079_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7079_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7079() { testInvalid(test_7079_sup,test_7079_sub); }

		private static final SyntacticType test_7080_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7080_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7080() { testInvalid(test_7080_sup,test_7080_sub); }

		private static final SyntacticType test_7081_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7081_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7081() { testInvalid(test_7081_sup,test_7081_sub); }

		private static final SyntacticType test_7082_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7082_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7082() { testInvalid(test_7082_sup,test_7082_sub); }

		private static final SyntacticType test_7083_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7083_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7083() { testInvalid(test_7083_sup,test_7083_sub); }

		private static final SyntacticType test_7084_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7084_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7084() { testInvalid(test_7084_sup,test_7084_sub); }

		private static final SyntacticType test_7085_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7085_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7085() { testInvalid(test_7085_sup,test_7085_sub); }

		private static final SyntacticType test_7086_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7086_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7086() { testInvalid(test_7086_sup,test_7086_sub); }

		private static final SyntacticType test_7087_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7087_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7087() { testInvalid(test_7087_sup,test_7087_sub); }

		private static final SyntacticType test_7088_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7088_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7088() { testInvalid(test_7088_sup,test_7088_sub); }

		private static final SyntacticType test_7089_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7089_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7089() { testInvalid(test_7089_sup,test_7089_sub); }

		private static final SyntacticType test_7090_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7090_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7090() { testInvalid(test_7090_sup,test_7090_sub); }

		private static final SyntacticType test_7091_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7091_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7091() { testInvalid(test_7091_sup,test_7091_sub); }

		private static final SyntacticType test_7092_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7092_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7092() { testInvalid(test_7092_sup,test_7092_sub); }

		private static final SyntacticType test_7093_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7093_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7093() { testInvalid(test_7093_sup,test_7093_sub); }

		private static final SyntacticType test_7094_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7094_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7094() { testInvalid(test_7094_sup,test_7094_sub); }

		private static final SyntacticType test_7095_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7095_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7095() { testInvalid(test_7095_sup,test_7095_sub); }

		private static final SyntacticType test_7096_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7096_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7096() { testInvalid(test_7096_sup,test_7096_sub); }

		private static final SyntacticType test_7097_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7097_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7097() { testInvalid(test_7097_sup,test_7097_sub); }

		private static final SyntacticType test_7098_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7098_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7098() { testInvalid(test_7098_sup,test_7098_sub); }

		private static final SyntacticType test_7099_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7099_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7099() { testInvalid(test_7099_sup,test_7099_sub); }

		private static final SyntacticType test_7100_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7100_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7100() { testInvalid(test_7100_sup,test_7100_sub); }

		private static final SyntacticType test_7101_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7101_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7101() { testInvalid(test_7101_sup,test_7101_sub); }

		private static final SyntacticType test_7102_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7102_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7102() { testInvalid(test_7102_sup,test_7102_sub); }

		private static final SyntacticType test_7103_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7103_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7103() { testInvalid(test_7103_sup,test_7103_sub); }

		private static final SyntacticType test_7104_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7104_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7104() { testValid(test_7104_sup,test_7104_sub); }

		private static final SyntacticType test_7105_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7105_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7105() { testInvalid(test_7105_sup,test_7105_sub); }

		private static final SyntacticType test_7106_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7106_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7106() { testInvalid(test_7106_sup,test_7106_sub); }

		private static final SyntacticType test_7107_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7107_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7107() { testInvalid(test_7107_sup,test_7107_sub); }

		private static final SyntacticType test_7108_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7108_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7108() { testInvalid(test_7108_sup,test_7108_sub); }

		private static final SyntacticType test_7109_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7109_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7109() { testInvalid(test_7109_sup,test_7109_sub); }

		private static final SyntacticType test_7110_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7110_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7110() { testInvalid(test_7110_sup,test_7110_sub); }

		private static final SyntacticType test_7111_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7111_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7111() { testInvalid(test_7111_sup,test_7111_sub); }

		private static final SyntacticType test_7112_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7112_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7112() { testInvalid(test_7112_sup,test_7112_sub); }

		private static final SyntacticType test_7113_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7113_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7113() { testInvalid(test_7113_sup,test_7113_sub); }

		private static final SyntacticType test_7114_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7114_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7114() { testInvalid(test_7114_sup,test_7114_sub); }

		private static final SyntacticType test_7115_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7115_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7115() { testInvalid(test_7115_sup,test_7115_sub); }

		private static final SyntacticType test_7116_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7116_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7116() { testInvalid(test_7116_sup,test_7116_sub); }

		private static final SyntacticType test_7117_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7117_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7117() { testInvalid(test_7117_sup,test_7117_sub); }

		private static final SyntacticType test_7118_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7118_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7118() { testInvalid(test_7118_sup,test_7118_sub); }

		private static final SyntacticType test_7119_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7119_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7119() { testInvalid(test_7119_sup,test_7119_sub); }

		private static final SyntacticType test_7120_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7120_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7120() { testInvalid(test_7120_sup,test_7120_sub); }

		private static final SyntacticType test_7121_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7121_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7121() { testInvalid(test_7121_sup,test_7121_sub); }

		private static final SyntacticType test_7122_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7122_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7122() { testInvalid(test_7122_sup,test_7122_sub); }

		private static final SyntacticType test_7123_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7123_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7123() { testInvalid(test_7123_sup,test_7123_sub); }

		private static final SyntacticType test_7124_sup = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		private static final SyntacticType test_7124_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7124() { testInvalid(test_7124_sup,test_7124_sub); }

		private static final SyntacticType test_7125_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7125_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7125() { testInvalid(test_7125_sup,test_7125_sub); }

		private static final SyntacticType test_7126_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7126_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7126() { testInvalid(test_7126_sup,test_7126_sub); }

		private static final SyntacticType test_7127_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7127_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7127() { testInvalid(test_7127_sup,test_7127_sub); }

		private static final SyntacticType test_7128_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7128_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7128() { testInvalid(test_7128_sup,test_7128_sub); }

		private static final SyntacticType test_7129_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7129_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7129() { testInvalid(test_7129_sup,test_7129_sub); }

		private static final SyntacticType test_7130_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7130_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7130() { testInvalid(test_7130_sup,test_7130_sub); }

		private static final SyntacticType test_7131_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7131_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7131() { testInvalid(test_7131_sup,test_7131_sub); }

		private static final SyntacticType test_7132_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7132_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7132() { testInvalid(test_7132_sup,test_7132_sub); }

		private static final SyntacticType test_7133_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7133_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7133() { testInvalid(test_7133_sup,test_7133_sub); }

		private static final SyntacticType test_7134_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7134_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7134() { testInvalid(test_7134_sup,test_7134_sub); }

		private static final SyntacticType test_7135_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7135_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7135() { testInvalid(test_7135_sup,test_7135_sub); }

		private static final SyntacticType test_7136_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7136_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7136() { testInvalid(test_7136_sup,test_7136_sub); }

		private static final SyntacticType test_7137_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7137_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7137() { testInvalid(test_7137_sup,test_7137_sub); }

		private static final SyntacticType test_7138_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7138_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7138() { testInvalid(test_7138_sup,test_7138_sub); }

		private static final SyntacticType test_7139_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7139_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7139() { testInvalid(test_7139_sup,test_7139_sub); }

		private static final SyntacticType test_7140_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7140_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7140() { testInvalid(test_7140_sup,test_7140_sub); }

		private static final SyntacticType test_7141_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7141_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7141() { testInvalid(test_7141_sup,test_7141_sub); }

		private static final SyntacticType test_7142_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7142_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7142() { testInvalid(test_7142_sup,test_7142_sub); }

		private static final SyntacticType test_7143_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7143_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7143() { testInvalid(test_7143_sup,test_7143_sub); }

		private static final SyntacticType test_7144_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7144_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7144() { testInvalid(test_7144_sup,test_7144_sub); }

		private static final SyntacticType test_7145_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7145_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7145() { testInvalid(test_7145_sup,test_7145_sub); }

		private static final SyntacticType test_7146_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7146_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7146() { testInvalid(test_7146_sup,test_7146_sub); }

		private static final SyntacticType test_7147_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7147_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7147() { testInvalid(test_7147_sup,test_7147_sub); }

		private static final SyntacticType test_7148_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7148_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7148() { testInvalid(test_7148_sup,test_7148_sub); }

		private static final SyntacticType test_7149_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7149_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7149() { testInvalid(test_7149_sup,test_7149_sub); }

		private static final SyntacticType test_7150_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7150_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7150() { testInvalid(test_7150_sup,test_7150_sub); }

		private static final SyntacticType test_7151_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7151_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7151() { testInvalid(test_7151_sup,test_7151_sub); }

		private static final SyntacticType test_7152_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7152_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7152() { testInvalid(test_7152_sup,test_7152_sub); }

		private static final SyntacticType test_7153_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7153_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7153() { testInvalid(test_7153_sup,test_7153_sub); }

		private static final SyntacticType test_7154_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7154_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7154() { testInvalid(test_7154_sup,test_7154_sub); }

		private static final SyntacticType test_7155_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7155_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7155() { testInvalid(test_7155_sup,test_7155_sub); }

		private static final SyntacticType test_7156_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7156_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7156() { testInvalid(test_7156_sup,test_7156_sub); }

		private static final SyntacticType test_7157_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7157_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7157() { testInvalid(test_7157_sup,test_7157_sub); }

		private static final SyntacticType test_7158_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7158_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7158() { testInvalid(test_7158_sup,test_7158_sub); }

		private static final SyntacticType test_7159_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7159_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7159() { testInvalid(test_7159_sup,test_7159_sub); }

		private static final SyntacticType test_7160_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7160_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7160() { testInvalid(test_7160_sup,test_7160_sub); }

		private static final SyntacticType test_7161_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7161_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7161() { testInvalid(test_7161_sup,test_7161_sub); }

		private static final SyntacticType test_7162_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7162_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7162() { testInvalid(test_7162_sup,test_7162_sub); }

		private static final SyntacticType test_7163_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7163_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7163() { testInvalid(test_7163_sup,test_7163_sub); }

		private static final SyntacticType test_7164_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7164_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7164() { testInvalid(test_7164_sup,test_7164_sub); }

		private static final SyntacticType test_7165_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7165_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7165() { testInvalid(test_7165_sup,test_7165_sub); }

		private static final SyntacticType test_7166_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7166_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7166() { testInvalid(test_7166_sup,test_7166_sub); }

		private static final SyntacticType test_7167_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7167_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7167() { testInvalid(test_7167_sup,test_7167_sub); }

		private static final SyntacticType test_7168_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7168_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7168() { testInvalid(test_7168_sup,test_7168_sub); }

		private static final SyntacticType test_7169_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7169_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7169() { testInvalid(test_7169_sup,test_7169_sub); }

		private static final SyntacticType test_7170_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7170_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7170() { testInvalid(test_7170_sup,test_7170_sub); }

		private static final SyntacticType test_7171_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7171_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7171() { testInvalid(test_7171_sup,test_7171_sub); }

		private static final SyntacticType test_7172_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7172_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7172() { testInvalid(test_7172_sup,test_7172_sub); }

		private static final SyntacticType test_7173_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7173_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7173() { testInvalid(test_7173_sup,test_7173_sub); }

		private static final SyntacticType test_7174_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7174_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7174() { testInvalid(test_7174_sup,test_7174_sub); }

		private static final SyntacticType test_7175_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7175_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7175() { testInvalid(test_7175_sup,test_7175_sub); }

		private static final SyntacticType test_7176_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7176_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7176() { testInvalid(test_7176_sup,test_7176_sub); }

		private static final SyntacticType test_7177_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7177_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7177() { testInvalid(test_7177_sup,test_7177_sub); }

		private static final SyntacticType test_7178_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7178_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7178() { testInvalid(test_7178_sup,test_7178_sub); }

		private static final SyntacticType test_7179_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7179_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7179() { testInvalid(test_7179_sup,test_7179_sub); }

		private static final SyntacticType test_7180_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7180_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7180() { testInvalid(test_7180_sup,test_7180_sub); }

		private static final SyntacticType test_7181_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7181_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7181() { testInvalid(test_7181_sup,test_7181_sub); }

		private static final SyntacticType test_7182_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7182_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7182() { testInvalid(test_7182_sup,test_7182_sub); }

		private static final SyntacticType test_7183_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7183_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7183() { testInvalid(test_7183_sup,test_7183_sub); }

		private static final SyntacticType test_7184_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7184_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7184() { testInvalid(test_7184_sup,test_7184_sub); }

		private static final SyntacticType test_7185_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7185_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7185() { testInvalid(test_7185_sup,test_7185_sub); }

		private static final SyntacticType test_7186_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7186_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7186() { testInvalid(test_7186_sup,test_7186_sub); }

		private static final SyntacticType test_7187_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7187_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7187() { testInvalid(test_7187_sup,test_7187_sub); }

		private static final SyntacticType test_7188_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7188_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7188() { testInvalid(test_7188_sup,test_7188_sub); }

		private static final SyntacticType test_7189_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7189_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7189() { testInvalid(test_7189_sup,test_7189_sub); }

		private static final SyntacticType test_7190_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7190_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7190() { testInvalid(test_7190_sup,test_7190_sub); }

		private static final SyntacticType test_7191_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7191_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7191() { testInvalid(test_7191_sup,test_7191_sub); }

		private static final SyntacticType test_7192_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7192_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7192() { testInvalid(test_7192_sup,test_7192_sub); }

		private static final SyntacticType test_7193_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7193_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7193() { testInvalid(test_7193_sup,test_7193_sub); }

		private static final SyntacticType test_7194_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7194_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7194() { testInvalid(test_7194_sup,test_7194_sub); }

		private static final SyntacticType test_7195_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7195_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7195() { testInvalid(test_7195_sup,test_7195_sub); }

		private static final SyntacticType test_7196_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7196_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7196() { testInvalid(test_7196_sup,test_7196_sub); }

		private static final SyntacticType test_7197_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7197_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7197() { testInvalid(test_7197_sup,test_7197_sub); }

		private static final SyntacticType test_7198_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7198_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7198() { testValid(test_7198_sup,test_7198_sub); }

		private static final SyntacticType test_7199_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7199_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7199() { testInvalid(test_7199_sup,test_7199_sub); }

		private static final SyntacticType test_7200_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7200_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7200() { testValid(test_7200_sup,test_7200_sub); }

		private static final SyntacticType test_7201_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7201_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7201() { testValid(test_7201_sup,test_7201_sub); }

		private static final SyntacticType test_7202_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7202_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7202() { testInvalid(test_7202_sup,test_7202_sub); }

		private static final SyntacticType test_7203_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7203_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7203() { testValid(test_7203_sup,test_7203_sub); }

		private static final SyntacticType test_7204_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7204_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7204() { testInvalid(test_7204_sup,test_7204_sub); }

		private static final SyntacticType test_7205_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7205_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7205() { testInvalid(test_7205_sup,test_7205_sub); }

		private static final SyntacticType test_7206_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7206_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7206() { testInvalid(test_7206_sup,test_7206_sub); }

		private static final SyntacticType test_7207_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7207_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7207() { testInvalid(test_7207_sup,test_7207_sub); }

		private static final SyntacticType test_7208_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7208_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7208() { testValid(test_7208_sup,test_7208_sub); }

		private static final SyntacticType test_7209_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7209_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7209() { testInvalid(test_7209_sup,test_7209_sub); }

		private static final SyntacticType test_7210_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7210_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7210() { testInvalid(test_7210_sup,test_7210_sub); }

		private static final SyntacticType test_7211_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7211_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7211() { testInvalid(test_7211_sup,test_7211_sub); }

		private static final SyntacticType test_7212_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7212_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7212() { testInvalid(test_7212_sup,test_7212_sub); }

		private static final SyntacticType test_7213_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7213_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7213() { testInvalid(test_7213_sup,test_7213_sub); }

		private static final SyntacticType test_7214_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7214_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7214() { testInvalid(test_7214_sup,test_7214_sub); }

		private static final SyntacticType test_7215_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7215_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7215() { testInvalid(test_7215_sup,test_7215_sub); }

		private static final SyntacticType test_7216_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7216_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7216() { testInvalid(test_7216_sup,test_7216_sub); }

		private static final SyntacticType test_7217_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7217_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7217() { testInvalid(test_7217_sup,test_7217_sub); }

		private static final SyntacticType test_7218_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7218_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7218() { testInvalid(test_7218_sup,test_7218_sub); }

		private static final SyntacticType test_7219_sup = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		private static final SyntacticType test_7219_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7219() { testInvalid(test_7219_sup,test_7219_sub); }

		private static final SyntacticType test_7220_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7220_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7220() { testInvalid(test_7220_sup,test_7220_sub); }

		private static final SyntacticType test_7221_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7221_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7221() { testInvalid(test_7221_sup,test_7221_sub); }

		private static final SyntacticType test_7222_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7222_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7222() { testInvalid(test_7222_sup,test_7222_sub); }

		private static final SyntacticType test_7223_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7223_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7223() { testInvalid(test_7223_sup,test_7223_sub); }

		private static final SyntacticType test_7224_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7224_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7224() { testInvalid(test_7224_sup,test_7224_sub); }

		private static final SyntacticType test_7225_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7225_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7225() { testInvalid(test_7225_sup,test_7225_sub); }

		private static final SyntacticType test_7226_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7226_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7226() { testInvalid(test_7226_sup,test_7226_sub); }

		private static final SyntacticType test_7227_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7227_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7227() { testInvalid(test_7227_sup,test_7227_sub); }

		private static final SyntacticType test_7228_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7228_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7228() { testInvalid(test_7228_sup,test_7228_sub); }

		private static final SyntacticType test_7229_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7229_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7229() { testInvalid(test_7229_sup,test_7229_sub); }

		private static final SyntacticType test_7230_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7230_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7230() { testInvalid(test_7230_sup,test_7230_sub); }

		private static final SyntacticType test_7231_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7231_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7231() { testInvalid(test_7231_sup,test_7231_sub); }

		private static final SyntacticType test_7232_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7232_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7232() { testInvalid(test_7232_sup,test_7232_sub); }

		private static final SyntacticType test_7233_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7233_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7233() { testInvalid(test_7233_sup,test_7233_sub); }

		private static final SyntacticType test_7234_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7234_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7234() { testInvalid(test_7234_sup,test_7234_sub); }

		private static final SyntacticType test_7235_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7235_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7235() { testInvalid(test_7235_sup,test_7235_sub); }

		private static final SyntacticType test_7236_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7236_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7236() { testInvalid(test_7236_sup,test_7236_sub); }

		private static final SyntacticType test_7237_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7237_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7237() { testInvalid(test_7237_sup,test_7237_sub); }

		private static final SyntacticType test_7238_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7238_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7238() { testInvalid(test_7238_sup,test_7238_sub); }

		private static final SyntacticType test_7239_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7239_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7239() { testInvalid(test_7239_sup,test_7239_sub); }

		private static final SyntacticType test_7240_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7240_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7240() { testInvalid(test_7240_sup,test_7240_sub); }

		private static final SyntacticType test_7241_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7241_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7241() { testInvalid(test_7241_sup,test_7241_sub); }

		private static final SyntacticType test_7242_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7242_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7242() { testInvalid(test_7242_sup,test_7242_sub); }

		private static final SyntacticType test_7243_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7243_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7243() { testInvalid(test_7243_sup,test_7243_sub); }

		private static final SyntacticType test_7244_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7244_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7244() { testInvalid(test_7244_sup,test_7244_sub); }

		private static final SyntacticType test_7245_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7245_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7245() { testInvalid(test_7245_sup,test_7245_sub); }

		private static final SyntacticType test_7246_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7246_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7246() { testInvalid(test_7246_sup,test_7246_sub); }

		private static final SyntacticType test_7247_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7247_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7247() { testInvalid(test_7247_sup,test_7247_sub); }

		private static final SyntacticType test_7248_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7248_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7248() { testInvalid(test_7248_sup,test_7248_sub); }

		private static final SyntacticType test_7249_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7249_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7249() { testInvalid(test_7249_sup,test_7249_sub); }

		private static final SyntacticType test_7250_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7250_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7250() { testInvalid(test_7250_sup,test_7250_sub); }

		private static final SyntacticType test_7251_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7251_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7251() { testInvalid(test_7251_sup,test_7251_sub); }

		private static final SyntacticType test_7252_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7252_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7252() { testInvalid(test_7252_sup,test_7252_sub); }

		private static final SyntacticType test_7253_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7253_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7253() { testInvalid(test_7253_sup,test_7253_sub); }

		private static final SyntacticType test_7254_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7254_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7254() { testInvalid(test_7254_sup,test_7254_sub); }

		private static final SyntacticType test_7255_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7255_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7255() { testInvalid(test_7255_sup,test_7255_sub); }

		private static final SyntacticType test_7256_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7256_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7256() { testInvalid(test_7256_sup,test_7256_sub); }

		private static final SyntacticType test_7257_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7257_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7257() { testInvalid(test_7257_sup,test_7257_sub); }

		private static final SyntacticType test_7258_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7258_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7258() { testInvalid(test_7258_sup,test_7258_sub); }

		private static final SyntacticType test_7259_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7259_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7259() { testInvalid(test_7259_sup,test_7259_sub); }

		private static final SyntacticType test_7260_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7260_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7260() { testInvalid(test_7260_sup,test_7260_sub); }

		private static final SyntacticType test_7261_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7261_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7261() { testInvalid(test_7261_sup,test_7261_sub); }

		private static final SyntacticType test_7262_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7262_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7262() { testInvalid(test_7262_sup,test_7262_sub); }

		private static final SyntacticType test_7263_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7263_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7263() { testInvalid(test_7263_sup,test_7263_sub); }

		private static final SyntacticType test_7264_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7264_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7264() { testInvalid(test_7264_sup,test_7264_sub); }

		private static final SyntacticType test_7265_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7265_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7265() { testInvalid(test_7265_sup,test_7265_sub); }

		private static final SyntacticType test_7266_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7266_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7266() { testInvalid(test_7266_sup,test_7266_sub); }

		private static final SyntacticType test_7267_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7267_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7267() { testInvalid(test_7267_sup,test_7267_sub); }

		private static final SyntacticType test_7268_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7268_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7268() { testInvalid(test_7268_sup,test_7268_sub); }

		private static final SyntacticType test_7269_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7269_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7269() { testInvalid(test_7269_sup,test_7269_sub); }

		private static final SyntacticType test_7270_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7270_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7270() { testInvalid(test_7270_sup,test_7270_sub); }

		private static final SyntacticType test_7271_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7271_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7271() { testInvalid(test_7271_sup,test_7271_sub); }

		private static final SyntacticType test_7272_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7272_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7272() { testInvalid(test_7272_sup,test_7272_sub); }

		private static final SyntacticType test_7273_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7273_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7273() { testInvalid(test_7273_sup,test_7273_sub); }

		private static final SyntacticType test_7274_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7274_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7274() { testInvalid(test_7274_sup,test_7274_sub); }

		private static final SyntacticType test_7275_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7275_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7275() { testInvalid(test_7275_sup,test_7275_sub); }

		private static final SyntacticType test_7276_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7276_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7276() { testInvalid(test_7276_sup,test_7276_sub); }

		private static final SyntacticType test_7277_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7277_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7277() { testInvalid(test_7277_sup,test_7277_sub); }

		private static final SyntacticType test_7278_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7278_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7278() { testInvalid(test_7278_sup,test_7278_sub); }

		private static final SyntacticType test_7279_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7279_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7279() { testInvalid(test_7279_sup,test_7279_sub); }

		private static final SyntacticType test_7280_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7280_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7280() { testInvalid(test_7280_sup,test_7280_sub); }

		private static final SyntacticType test_7281_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7281_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7281() { testInvalid(test_7281_sup,test_7281_sub); }

		private static final SyntacticType test_7282_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7282_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7282() { testInvalid(test_7282_sup,test_7282_sub); }

		private static final SyntacticType test_7283_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7283_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7283() { testInvalid(test_7283_sup,test_7283_sub); }

		private static final SyntacticType test_7284_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7284_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7284() { testInvalid(test_7284_sup,test_7284_sub); }

		private static final SyntacticType test_7285_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7285_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7285() { testInvalid(test_7285_sup,test_7285_sub); }

		private static final SyntacticType test_7286_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7286_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7286() { testInvalid(test_7286_sup,test_7286_sub); }

		private static final SyntacticType test_7287_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7287_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7287() { testInvalid(test_7287_sup,test_7287_sub); }

		private static final SyntacticType test_7288_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7288_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7288() { testInvalid(test_7288_sup,test_7288_sub); }

		private static final SyntacticType test_7289_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7289_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7289() { testInvalid(test_7289_sup,test_7289_sub); }

		private static final SyntacticType test_7290_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7290_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7290() { testInvalid(test_7290_sup,test_7290_sub); }

		private static final SyntacticType test_7291_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7291_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7291() { testInvalid(test_7291_sup,test_7291_sub); }

		private static final SyntacticType test_7292_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7292_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7292() { testInvalid(test_7292_sup,test_7292_sub); }

		private static final SyntacticType test_7293_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7293_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7293() { testValid(test_7293_sup,test_7293_sub); }

		private static final SyntacticType test_7294_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7294_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7294() { testInvalid(test_7294_sup,test_7294_sub); }

		private static final SyntacticType test_7295_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7295_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7295() { testInvalid(test_7295_sup,test_7295_sub); }

		private static final SyntacticType test_7296_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7296_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7296() { testValid(test_7296_sup,test_7296_sub); }

		private static final SyntacticType test_7297_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7297_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7297() { testInvalid(test_7297_sup,test_7297_sub); }

		private static final SyntacticType test_7298_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7298_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7298() { testInvalid(test_7298_sup,test_7298_sub); }

		private static final SyntacticType test_7299_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7299_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7299() { testInvalid(test_7299_sup,test_7299_sub); }

		private static final SyntacticType test_7300_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7300_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7300() { testInvalid(test_7300_sup,test_7300_sub); }

		private static final SyntacticType test_7301_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7301_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7301() { testInvalid(test_7301_sup,test_7301_sub); }

		private static final SyntacticType test_7302_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7302_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7302() { testInvalid(test_7302_sup,test_7302_sub); }

		private static final SyntacticType test_7303_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7303_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7303() { testInvalid(test_7303_sup,test_7303_sub); }

		private static final SyntacticType test_7304_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7304_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7304() { testInvalid(test_7304_sup,test_7304_sub); }

		private static final SyntacticType test_7305_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7305_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7305() { testInvalid(test_7305_sup,test_7305_sub); }

		private static final SyntacticType test_7306_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7306_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7306() { testInvalid(test_7306_sup,test_7306_sub); }

		private static final SyntacticType test_7307_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7307_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7307() { testInvalid(test_7307_sup,test_7307_sub); }

		private static final SyntacticType test_7308_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7308_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7308() { testInvalid(test_7308_sup,test_7308_sub); }

		private static final SyntacticType test_7309_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7309_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7309() { testInvalid(test_7309_sup,test_7309_sub); }

		private static final SyntacticType test_7310_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7310_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7310() { testInvalid(test_7310_sup,test_7310_sub); }

		private static final SyntacticType test_7311_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7311_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7311() { testInvalid(test_7311_sup,test_7311_sub); }

		private static final SyntacticType test_7312_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7312_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7312() { testInvalid(test_7312_sup,test_7312_sub); }

		private static final SyntacticType test_7313_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7313_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7313() { testInvalid(test_7313_sup,test_7313_sub); }

		private static final SyntacticType test_7314_sup = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		private static final SyntacticType test_7314_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7314() { testInvalid(test_7314_sup,test_7314_sub); }

		private static final SyntacticType test_7315_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7315_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7315() { testValid(test_7315_sup,test_7315_sub); }

		private static final SyntacticType test_7316_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7316_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7316() { testValid(test_7316_sup,test_7316_sub); }

		private static final SyntacticType test_7317_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7317_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7317() { testValid(test_7317_sup,test_7317_sub); }

		private static final SyntacticType test_7318_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7318_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7318() { testValid(test_7318_sup,test_7318_sub); }

		private static final SyntacticType test_7319_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7319_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7319() { testValid(test_7319_sup,test_7319_sub); }

		private static final SyntacticType test_7320_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7320_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7320() { testValid(test_7320_sup,test_7320_sub); }

		private static final SyntacticType test_7321_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7321_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7321() { testValid(test_7321_sup,test_7321_sub); }

		private static final SyntacticType test_7322_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7322_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7322() { testValid(test_7322_sup,test_7322_sub); }

		private static final SyntacticType test_7323_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7323_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7323() { testValid(test_7323_sup,test_7323_sub); }

		private static final SyntacticType test_7324_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7324_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7324() { testValid(test_7324_sup,test_7324_sub); }

		private static final SyntacticType test_7325_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7325_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7325() { testValid(test_7325_sup,test_7325_sub); }

		private static final SyntacticType test_7326_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7326_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7326() { testValid(test_7326_sup,test_7326_sub); }

		private static final SyntacticType test_7327_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7327_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7327() { testValid(test_7327_sup,test_7327_sub); }

		private static final SyntacticType test_7328_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7328_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7328() { testValid(test_7328_sup,test_7328_sub); }

		private static final SyntacticType test_7329_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7329_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7329() { testValid(test_7329_sup,test_7329_sub); }

		private static final SyntacticType test_7330_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7330_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7330() { testValid(test_7330_sup,test_7330_sub); }

		private static final SyntacticType test_7331_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7331_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7331() { testValid(test_7331_sup,test_7331_sub); }

		private static final SyntacticType test_7332_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7332_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7332() { testValid(test_7332_sup,test_7332_sub); }

		private static final SyntacticType test_7333_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7333_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7333() { testValid(test_7333_sup,test_7333_sub); }

		private static final SyntacticType test_7334_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7334_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7334() { testValid(test_7334_sup,test_7334_sub); }

		private static final SyntacticType test_7335_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7335_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7335() { testValid(test_7335_sup,test_7335_sub); }

		private static final SyntacticType test_7336_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7336_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7336() { testValid(test_7336_sup,test_7336_sub); }

		private static final SyntacticType test_7337_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7337_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7337() { testValid(test_7337_sup,test_7337_sub); }

		private static final SyntacticType test_7338_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7338_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7338() { testValid(test_7338_sup,test_7338_sub); }

		private static final SyntacticType test_7339_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7339_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7339() { testValid(test_7339_sup,test_7339_sub); }

		private static final SyntacticType test_7340_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7340_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7340() { testValid(test_7340_sup,test_7340_sub); }

		private static final SyntacticType test_7341_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7341_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7341() { testValid(test_7341_sup,test_7341_sub); }

		private static final SyntacticType test_7342_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7342_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7342() { testValid(test_7342_sup,test_7342_sub); }

		private static final SyntacticType test_7343_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7343_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7343() { testValid(test_7343_sup,test_7343_sub); }

		private static final SyntacticType test_7344_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7344_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7344() { testValid(test_7344_sup,test_7344_sub); }

		private static final SyntacticType test_7345_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7345_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7345() { testValid(test_7345_sup,test_7345_sub); }

		private static final SyntacticType test_7346_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7346_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7346() { testValid(test_7346_sup,test_7346_sub); }

		private static final SyntacticType test_7347_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7347_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7347() { testValid(test_7347_sup,test_7347_sub); }

		private static final SyntacticType test_7348_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7348_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7348() { testValid(test_7348_sup,test_7348_sub); }

		private static final SyntacticType test_7349_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7349_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7349() { testValid(test_7349_sup,test_7349_sub); }

		private static final SyntacticType test_7350_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7350_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7350() { testValid(test_7350_sup,test_7350_sub); }

		private static final SyntacticType test_7351_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7351_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7351() { testValid(test_7351_sup,test_7351_sub); }

		private static final SyntacticType test_7352_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7352_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7352() { testValid(test_7352_sup,test_7352_sub); }

		private static final SyntacticType test_7353_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7353_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7353() { testValid(test_7353_sup,test_7353_sub); }

		private static final SyntacticType test_7354_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7354_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7354() { testValid(test_7354_sup,test_7354_sub); }

		private static final SyntacticType test_7355_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7355_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7355() { testValid(test_7355_sup,test_7355_sub); }

		private static final SyntacticType test_7356_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7356_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7356() { testValid(test_7356_sup,test_7356_sub); }

		private static final SyntacticType test_7357_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7357_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7357() { testValid(test_7357_sup,test_7357_sub); }

		private static final SyntacticType test_7358_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7358_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7358() { testValid(test_7358_sup,test_7358_sub); }

		private static final SyntacticType test_7359_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7359_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7359() { testValid(test_7359_sup,test_7359_sub); }

		private static final SyntacticType test_7360_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7360_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7360() { testValid(test_7360_sup,test_7360_sub); }

		private static final SyntacticType test_7361_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7361_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7361() { testValid(test_7361_sup,test_7361_sub); }

		private static final SyntacticType test_7362_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7362_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7362() { testValid(test_7362_sup,test_7362_sub); }

		private static final SyntacticType test_7363_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7363_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7363() { testValid(test_7363_sup,test_7363_sub); }

		private static final SyntacticType test_7364_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7364_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7364() { testValid(test_7364_sup,test_7364_sub); }

		private static final SyntacticType test_7365_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7365_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7365() { testValid(test_7365_sup,test_7365_sub); }

		private static final SyntacticType test_7366_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7366_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7366() { testValid(test_7366_sup,test_7366_sub); }

		private static final SyntacticType test_7367_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7367_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7367() { testValid(test_7367_sup,test_7367_sub); }

		private static final SyntacticType test_7368_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7368_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7368() { testValid(test_7368_sup,test_7368_sub); }

		private static final SyntacticType test_7369_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7369_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7369() { testValid(test_7369_sup,test_7369_sub); }

		private static final SyntacticType test_7370_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7370_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7370() { testValid(test_7370_sup,test_7370_sub); }

		private static final SyntacticType test_7371_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7371_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7371() { testValid(test_7371_sup,test_7371_sub); }

		private static final SyntacticType test_7372_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7372_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7372() { testValid(test_7372_sup,test_7372_sub); }

		private static final SyntacticType test_7373_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7373_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7373() { testValid(test_7373_sup,test_7373_sub); }

		private static final SyntacticType test_7374_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7374_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7374() { testValid(test_7374_sup,test_7374_sub); }

		private static final SyntacticType test_7375_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7375_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7375() { testValid(test_7375_sup,test_7375_sub); }

		private static final SyntacticType test_7376_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7376_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7376() { testValid(test_7376_sup,test_7376_sub); }

		private static final SyntacticType test_7377_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7377_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7377() { testValid(test_7377_sup,test_7377_sub); }

		private static final SyntacticType test_7378_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7378_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7378() { testValid(test_7378_sup,test_7378_sub); }

		private static final SyntacticType test_7379_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7379_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7379() { testValid(test_7379_sup,test_7379_sub); }

		private static final SyntacticType test_7380_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7380_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7380() { testValid(test_7380_sup,test_7380_sub); }

		private static final SyntacticType test_7381_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7381_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7381() { testValid(test_7381_sup,test_7381_sub); }

		private static final SyntacticType test_7382_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7382_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7382() { testValid(test_7382_sup,test_7382_sub); }

		private static final SyntacticType test_7383_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7383_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7383() { testValid(test_7383_sup,test_7383_sub); }

		private static final SyntacticType test_7384_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7384_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7384() { testValid(test_7384_sup,test_7384_sub); }

		private static final SyntacticType test_7385_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7385_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7385() { testValid(test_7385_sup,test_7385_sub); }

		private static final SyntacticType test_7386_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7386_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7386() { testValid(test_7386_sup,test_7386_sub); }

		private static final SyntacticType test_7387_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7387_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7387() { testValid(test_7387_sup,test_7387_sub); }

		private static final SyntacticType test_7388_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7388_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7388() { testValid(test_7388_sup,test_7388_sub); }

		private static final SyntacticType test_7389_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7389_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7389() { testValid(test_7389_sup,test_7389_sub); }

		private static final SyntacticType test_7390_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7390_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7390() { testValid(test_7390_sup,test_7390_sub); }

		private static final SyntacticType test_7391_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7391_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7391() { testValid(test_7391_sup,test_7391_sub); }

		private static final SyntacticType test_7392_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7392_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7392() { testValid(test_7392_sup,test_7392_sub); }

		private static final SyntacticType test_7393_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7393_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7393() { testValid(test_7393_sup,test_7393_sub); }

		private static final SyntacticType test_7394_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7394_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7394() { testValid(test_7394_sup,test_7394_sub); }

		private static final SyntacticType test_7395_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7395_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7395() { testValid(test_7395_sup,test_7395_sub); }

		private static final SyntacticType test_7396_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7396_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7396() { testValid(test_7396_sup,test_7396_sub); }

		private static final SyntacticType test_7397_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7397_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7397() { testValid(test_7397_sup,test_7397_sub); }

		private static final SyntacticType test_7398_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7398_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7398() { testValid(test_7398_sup,test_7398_sub); }

		private static final SyntacticType test_7399_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7399_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7399() { testValid(test_7399_sup,test_7399_sub); }

		private static final SyntacticType test_7400_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7400_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7400() { testValid(test_7400_sup,test_7400_sub); }

		private static final SyntacticType test_7401_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7401_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7401() { testValid(test_7401_sup,test_7401_sub); }

		private static final SyntacticType test_7402_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7402_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7402() { testValid(test_7402_sup,test_7402_sub); }

		private static final SyntacticType test_7403_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7403_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7403() { testValid(test_7403_sup,test_7403_sub); }

		private static final SyntacticType test_7404_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7404_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7404() { testValid(test_7404_sup,test_7404_sub); }

		private static final SyntacticType test_7405_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7405_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7405() { testValid(test_7405_sup,test_7405_sub); }

		private static final SyntacticType test_7406_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7406_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7406() { testValid(test_7406_sup,test_7406_sub); }

		private static final SyntacticType test_7407_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7407_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7407() { testValid(test_7407_sup,test_7407_sub); }

		private static final SyntacticType test_7408_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7408_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7408() { testValid(test_7408_sup,test_7408_sub); }

		private static final SyntacticType test_7409_sup = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		private static final SyntacticType test_7409_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7409() { testValid(test_7409_sup,test_7409_sub); }

		private static final SyntacticType test_7410_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7410_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7410() { testInvalid(test_7410_sup,test_7410_sub); }

		private static final SyntacticType test_7411_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7411_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7411() { testInvalid(test_7411_sup,test_7411_sub); }

		private static final SyntacticType test_7412_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7412_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7412() { testInvalid(test_7412_sup,test_7412_sub); }

		private static final SyntacticType test_7413_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7413_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7413() { testInvalid(test_7413_sup,test_7413_sub); }

		private static final SyntacticType test_7414_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7414_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7414() { testInvalid(test_7414_sup,test_7414_sub); }

		private static final SyntacticType test_7415_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7415_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7415() { testInvalid(test_7415_sup,test_7415_sub); }

		private static final SyntacticType test_7416_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7416_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7416() { testInvalid(test_7416_sup,test_7416_sub); }

		private static final SyntacticType test_7417_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7417_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7417() { testInvalid(test_7417_sup,test_7417_sub); }

		private static final SyntacticType test_7418_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7418_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7418() { testInvalid(test_7418_sup,test_7418_sub); }

		private static final SyntacticType test_7419_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7419_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7419() { testInvalid(test_7419_sup,test_7419_sub); }

		private static final SyntacticType test_7420_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7420_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7420() { testInvalid(test_7420_sup,test_7420_sub); }

		private static final SyntacticType test_7421_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7421_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7421() { testInvalid(test_7421_sup,test_7421_sub); }

		private static final SyntacticType test_7422_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7422_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7422() { testInvalid(test_7422_sup,test_7422_sub); }

		private static final SyntacticType test_7423_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7423_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7423() { testInvalid(test_7423_sup,test_7423_sub); }

		private static final SyntacticType test_7424_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7424_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7424() { testInvalid(test_7424_sup,test_7424_sub); }

		private static final SyntacticType test_7425_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7425_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7425() { testInvalid(test_7425_sup,test_7425_sub); }

		private static final SyntacticType test_7426_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7426_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7426() { testInvalid(test_7426_sup,test_7426_sub); }

		private static final SyntacticType test_7427_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7427_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7427() { testInvalid(test_7427_sup,test_7427_sub); }

		private static final SyntacticType test_7428_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7428_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7428() { testInvalid(test_7428_sup,test_7428_sub); }

		private static final SyntacticType test_7429_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7429_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7429() { testInvalid(test_7429_sup,test_7429_sub); }

		private static final SyntacticType test_7430_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7430_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7430() { testInvalid(test_7430_sup,test_7430_sub); }

		private static final SyntacticType test_7431_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7431_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7431() { testInvalid(test_7431_sup,test_7431_sub); }

		private static final SyntacticType test_7432_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7432_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7432() { testInvalid(test_7432_sup,test_7432_sub); }

		private static final SyntacticType test_7433_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7433_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7433() { testInvalid(test_7433_sup,test_7433_sub); }

		private static final SyntacticType test_7434_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7434_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7434() { testInvalid(test_7434_sup,test_7434_sub); }

		private static final SyntacticType test_7435_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7435_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7435() { testInvalid(test_7435_sup,test_7435_sub); }

		private static final SyntacticType test_7436_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7436_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7436() { testInvalid(test_7436_sup,test_7436_sub); }

		private static final SyntacticType test_7437_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7437_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7437() { testInvalid(test_7437_sup,test_7437_sub); }

		private static final SyntacticType test_7438_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7438_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7438() { testInvalid(test_7438_sup,test_7438_sub); }

		private static final SyntacticType test_7439_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7439_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7439() { testInvalid(test_7439_sup,test_7439_sub); }

		private static final SyntacticType test_7440_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7440_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7440() { testInvalid(test_7440_sup,test_7440_sub); }

		private static final SyntacticType test_7441_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7441_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7441() { testInvalid(test_7441_sup,test_7441_sub); }

		private static final SyntacticType test_7442_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7442_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7442() { testInvalid(test_7442_sup,test_7442_sub); }

		private static final SyntacticType test_7443_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7443_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7443() { testInvalid(test_7443_sup,test_7443_sub); }

		private static final SyntacticType test_7444_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7444_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7444() { testInvalid(test_7444_sup,test_7444_sub); }

		private static final SyntacticType test_7445_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7445_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7445() { testInvalid(test_7445_sup,test_7445_sub); }

		private static final SyntacticType test_7446_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7446_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7446() { testInvalid(test_7446_sup,test_7446_sub); }

		private static final SyntacticType test_7447_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7447_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7447() { testInvalid(test_7447_sup,test_7447_sub); }

		private static final SyntacticType test_7448_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7448_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7448() { testInvalid(test_7448_sup,test_7448_sub); }

		private static final SyntacticType test_7449_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7449_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7449() { testInvalid(test_7449_sup,test_7449_sub); }

		private static final SyntacticType test_7450_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7450_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7450() { testInvalid(test_7450_sup,test_7450_sub); }

		private static final SyntacticType test_7451_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7451_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7451() { testInvalid(test_7451_sup,test_7451_sub); }

		private static final SyntacticType test_7452_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7452_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7452() { testInvalid(test_7452_sup,test_7452_sub); }

		private static final SyntacticType test_7453_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7453_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7453() { testInvalid(test_7453_sup,test_7453_sub); }

		private static final SyntacticType test_7454_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7454_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7454() { testInvalid(test_7454_sup,test_7454_sub); }

		private static final SyntacticType test_7455_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7455_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7455() { testInvalid(test_7455_sup,test_7455_sub); }

		private static final SyntacticType test_7456_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7456_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7456() { testInvalid(test_7456_sup,test_7456_sub); }

		private static final SyntacticType test_7457_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7457_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7457() { testInvalid(test_7457_sup,test_7457_sub); }

		private static final SyntacticType test_7458_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7458_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7458() { testInvalid(test_7458_sup,test_7458_sub); }

		private static final SyntacticType test_7459_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7459_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7459() { testInvalid(test_7459_sup,test_7459_sub); }

		private static final SyntacticType test_7460_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7460_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7460() { testInvalid(test_7460_sup,test_7460_sub); }

		private static final SyntacticType test_7461_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7461_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7461() { testInvalid(test_7461_sup,test_7461_sub); }

		private static final SyntacticType test_7462_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7462_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7462() { testInvalid(test_7462_sup,test_7462_sub); }

		private static final SyntacticType test_7463_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7463_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7463() { testInvalid(test_7463_sup,test_7463_sub); }

		private static final SyntacticType test_7464_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7464_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7464() { testInvalid(test_7464_sup,test_7464_sub); }

		private static final SyntacticType test_7465_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7465_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7465() { testInvalid(test_7465_sup,test_7465_sub); }

		private static final SyntacticType test_7466_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7466_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7466() { testInvalid(test_7466_sup,test_7466_sub); }

		private static final SyntacticType test_7467_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7467_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7467() { testInvalid(test_7467_sup,test_7467_sub); }

		private static final SyntacticType test_7468_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7468_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7468() { testInvalid(test_7468_sup,test_7468_sub); }

		private static final SyntacticType test_7469_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7469_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7469() { testInvalid(test_7469_sup,test_7469_sub); }

		private static final SyntacticType test_7470_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7470_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7470() { testInvalid(test_7470_sup,test_7470_sub); }

		private static final SyntacticType test_7471_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7471_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7471() { testInvalid(test_7471_sup,test_7471_sub); }

		private static final SyntacticType test_7472_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7472_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7472() { testInvalid(test_7472_sup,test_7472_sub); }

		private static final SyntacticType test_7473_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7473_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7473() { testInvalid(test_7473_sup,test_7473_sub); }

		private static final SyntacticType test_7474_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7474_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7474() { testInvalid(test_7474_sup,test_7474_sub); }

		private static final SyntacticType test_7475_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7475_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7475() { testInvalid(test_7475_sup,test_7475_sub); }

		private static final SyntacticType test_7476_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7476_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7476() { testInvalid(test_7476_sup,test_7476_sub); }

		private static final SyntacticType test_7477_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7477_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7477() { testInvalid(test_7477_sup,test_7477_sub); }

		private static final SyntacticType test_7478_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7478_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7478() { testInvalid(test_7478_sup,test_7478_sub); }

		private static final SyntacticType test_7479_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7479_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7479() { testInvalid(test_7479_sup,test_7479_sub); }

		private static final SyntacticType test_7480_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7480_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7480() { testInvalid(test_7480_sup,test_7480_sub); }

		private static final SyntacticType test_7481_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7481_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7481() { testInvalid(test_7481_sup,test_7481_sub); }

		private static final SyntacticType test_7482_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7482_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7482() { testInvalid(test_7482_sup,test_7482_sub); }

		private static final SyntacticType test_7483_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7483_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7483() { testValid(test_7483_sup,test_7483_sub); }

		private static final SyntacticType test_7484_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7484_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7484() { testInvalid(test_7484_sup,test_7484_sub); }

		private static final SyntacticType test_7485_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7485_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7485() { testValid(test_7485_sup,test_7485_sub); }

		private static final SyntacticType test_7486_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7486_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7486() { testValid(test_7486_sup,test_7486_sub); }

		private static final SyntacticType test_7487_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7487_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7487() { testInvalid(test_7487_sup,test_7487_sub); }

		private static final SyntacticType test_7488_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7488_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7488() { testValid(test_7488_sup,test_7488_sub); }

		private static final SyntacticType test_7489_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7489_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7489() { testInvalid(test_7489_sup,test_7489_sub); }

		private static final SyntacticType test_7490_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7490_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7490() { testInvalid(test_7490_sup,test_7490_sub); }

		private static final SyntacticType test_7491_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7491_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7491() { testInvalid(test_7491_sup,test_7491_sub); }

		private static final SyntacticType test_7492_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7492_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7492() { testInvalid(test_7492_sup,test_7492_sub); }

		private static final SyntacticType test_7493_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7493_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7493() { testValid(test_7493_sup,test_7493_sub); }

		private static final SyntacticType test_7494_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7494_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7494() { testInvalid(test_7494_sup,test_7494_sub); }

		private static final SyntacticType test_7495_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7495_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7495() { testInvalid(test_7495_sup,test_7495_sub); }

		private static final SyntacticType test_7496_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7496_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7496() { testInvalid(test_7496_sup,test_7496_sub); }

		private static final SyntacticType test_7497_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7497_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7497() { testInvalid(test_7497_sup,test_7497_sub); }

		private static final SyntacticType test_7498_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7498_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7498() { testInvalid(test_7498_sup,test_7498_sub); }

		private static final SyntacticType test_7499_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7499_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7499() { testInvalid(test_7499_sup,test_7499_sub); }

		private static final SyntacticType test_7500_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7500_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7500() { testInvalid(test_7500_sup,test_7500_sub); }

		private static final SyntacticType test_7501_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7501_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7501() { testInvalid(test_7501_sup,test_7501_sub); }

		private static final SyntacticType test_7502_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7502_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7502() { testInvalid(test_7502_sup,test_7502_sub); }

		private static final SyntacticType test_7503_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7503_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7503() { testInvalid(test_7503_sup,test_7503_sub); }

		private static final SyntacticType test_7504_sup = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		private static final SyntacticType test_7504_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7504() { testInvalid(test_7504_sup,test_7504_sub); }

		private static final SyntacticType test_7505_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7505_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7505() { testValid(test_7505_sup,test_7505_sub); }

		private static final SyntacticType test_7506_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7506_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7506() { testValid(test_7506_sup,test_7506_sub); }

		private static final SyntacticType test_7507_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7507_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7507() { testValid(test_7507_sup,test_7507_sub); }

		private static final SyntacticType test_7508_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7508_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7508() { testValid(test_7508_sup,test_7508_sub); }

		private static final SyntacticType test_7509_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7509_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7509() { testValid(test_7509_sup,test_7509_sub); }

		private static final SyntacticType test_7510_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7510_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7510() { testValid(test_7510_sup,test_7510_sub); }

		private static final SyntacticType test_7511_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7511_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7511() { testValid(test_7511_sup,test_7511_sub); }

		private static final SyntacticType test_7512_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7512_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7512() { testValid(test_7512_sup,test_7512_sub); }

		private static final SyntacticType test_7513_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7513_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7513() { testValid(test_7513_sup,test_7513_sub); }

		private static final SyntacticType test_7514_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7514_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7514() { testValid(test_7514_sup,test_7514_sub); }

		private static final SyntacticType test_7515_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7515_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7515() { testValid(test_7515_sup,test_7515_sub); }

		private static final SyntacticType test_7516_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7516_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7516() { testValid(test_7516_sup,test_7516_sub); }

		private static final SyntacticType test_7517_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7517_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7517() { testValid(test_7517_sup,test_7517_sub); }

		private static final SyntacticType test_7518_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7518_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7518() { testValid(test_7518_sup,test_7518_sub); }

		private static final SyntacticType test_7519_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7519_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7519() { testValid(test_7519_sup,test_7519_sub); }

		private static final SyntacticType test_7520_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7520_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7520() { testValid(test_7520_sup,test_7520_sub); }

		private static final SyntacticType test_7521_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7521_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7521() { testValid(test_7521_sup,test_7521_sub); }

		private static final SyntacticType test_7522_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7522_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7522() { testValid(test_7522_sup,test_7522_sub); }

		private static final SyntacticType test_7523_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7523_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7523() { testValid(test_7523_sup,test_7523_sub); }

		private static final SyntacticType test_7524_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7524_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7524() { testValid(test_7524_sup,test_7524_sub); }

		private static final SyntacticType test_7525_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7525_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7525() { testValid(test_7525_sup,test_7525_sub); }

		private static final SyntacticType test_7526_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7526_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7526() { testValid(test_7526_sup,test_7526_sub); }

		private static final SyntacticType test_7527_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7527_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7527() { testValid(test_7527_sup,test_7527_sub); }

		private static final SyntacticType test_7528_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7528_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7528() { testValid(test_7528_sup,test_7528_sub); }

		private static final SyntacticType test_7529_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7529_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7529() { testValid(test_7529_sup,test_7529_sub); }

		private static final SyntacticType test_7530_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7530_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7530() { testValid(test_7530_sup,test_7530_sub); }

		private static final SyntacticType test_7531_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7531_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7531() { testValid(test_7531_sup,test_7531_sub); }

		private static final SyntacticType test_7532_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7532_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7532() { testValid(test_7532_sup,test_7532_sub); }

		private static final SyntacticType test_7533_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7533_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7533() { testValid(test_7533_sup,test_7533_sub); }

		private static final SyntacticType test_7534_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7534_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7534() { testValid(test_7534_sup,test_7534_sub); }

		private static final SyntacticType test_7535_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7535_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7535() { testValid(test_7535_sup,test_7535_sub); }

		private static final SyntacticType test_7536_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7536_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7536() { testValid(test_7536_sup,test_7536_sub); }

		private static final SyntacticType test_7537_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7537_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7537() { testValid(test_7537_sup,test_7537_sub); }

		private static final SyntacticType test_7538_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7538_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7538() { testValid(test_7538_sup,test_7538_sub); }

		private static final SyntacticType test_7539_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7539_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7539() { testValid(test_7539_sup,test_7539_sub); }

		private static final SyntacticType test_7540_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7540_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7540() { testValid(test_7540_sup,test_7540_sub); }

		private static final SyntacticType test_7541_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7541_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7541() { testValid(test_7541_sup,test_7541_sub); }

		private static final SyntacticType test_7542_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7542_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7542() { testValid(test_7542_sup,test_7542_sub); }

		private static final SyntacticType test_7543_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7543_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7543() { testValid(test_7543_sup,test_7543_sub); }

		private static final SyntacticType test_7544_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7544_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7544() { testValid(test_7544_sup,test_7544_sub); }

		private static final SyntacticType test_7545_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7545_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7545() { testValid(test_7545_sup,test_7545_sub); }

		private static final SyntacticType test_7546_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7546_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7546() { testValid(test_7546_sup,test_7546_sub); }

		private static final SyntacticType test_7547_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7547_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7547() { testValid(test_7547_sup,test_7547_sub); }

		private static final SyntacticType test_7548_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7548_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7548() { testValid(test_7548_sup,test_7548_sub); }

		private static final SyntacticType test_7549_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7549_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7549() { testValid(test_7549_sup,test_7549_sub); }

		private static final SyntacticType test_7550_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7550_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7550() { testValid(test_7550_sup,test_7550_sub); }

		private static final SyntacticType test_7551_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7551_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7551() { testInvalid(test_7551_sup,test_7551_sub); }

		private static final SyntacticType test_7552_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7552_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7552() { testValid(test_7552_sup,test_7552_sub); }

		private static final SyntacticType test_7553_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7553_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7553() { testInvalid(test_7553_sup,test_7553_sub); }

		private static final SyntacticType test_7554_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7554_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7554() { testValid(test_7554_sup,test_7554_sub); }

		private static final SyntacticType test_7555_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7555_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7555() { testInvalid(test_7555_sup,test_7555_sub); }

		private static final SyntacticType test_7556_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7556_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7556() { testValid(test_7556_sup,test_7556_sub); }

		private static final SyntacticType test_7557_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7557_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7557() { testValid(test_7557_sup,test_7557_sub); }

		private static final SyntacticType test_7558_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7558_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7558() { testValid(test_7558_sup,test_7558_sub); }

		private static final SyntacticType test_7559_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7559_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7559() { testInvalid(test_7559_sup,test_7559_sub); }

		private static final SyntacticType test_7560_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7560_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7560() { testInvalid(test_7560_sup,test_7560_sub); }

		private static final SyntacticType test_7561_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7561_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7561() { testValid(test_7561_sup,test_7561_sub); }

		private static final SyntacticType test_7562_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7562_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7562() { testInvalid(test_7562_sup,test_7562_sub); }

		private static final SyntacticType test_7563_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7563_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7563() { testInvalid(test_7563_sup,test_7563_sub); }

		private static final SyntacticType test_7564_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7564_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7564() { testValid(test_7564_sup,test_7564_sub); }

		private static final SyntacticType test_7565_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7565_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7565() { testValid(test_7565_sup,test_7565_sub); }

		private static final SyntacticType test_7566_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7566_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7566() { testInvalid(test_7566_sup,test_7566_sub); }

		private static final SyntacticType test_7567_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7567_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7567() { testInvalid(test_7567_sup,test_7567_sub); }

		private static final SyntacticType test_7568_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7568_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7568() { testValid(test_7568_sup,test_7568_sub); }

		private static final SyntacticType test_7569_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7569_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7569() { testInvalid(test_7569_sup,test_7569_sub); }

		private static final SyntacticType test_7570_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7570_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7570() { testValid(test_7570_sup,test_7570_sub); }

		private static final SyntacticType test_7571_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7571_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7571() { testValid(test_7571_sup,test_7571_sub); }

		private static final SyntacticType test_7572_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7572_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7572() { testValid(test_7572_sup,test_7572_sub); }

		private static final SyntacticType test_7573_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7573_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7573() { testValid(test_7573_sup,test_7573_sub); }

		private static final SyntacticType test_7574_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7574_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7574() { testInvalid(test_7574_sup,test_7574_sub); }

		private static final SyntacticType test_7575_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7575_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7575() { testValid(test_7575_sup,test_7575_sub); }

		private static final SyntacticType test_7576_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7576_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7576() { testValid(test_7576_sup,test_7576_sub); }

		private static final SyntacticType test_7577_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7577_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7577() { testInvalid(test_7577_sup,test_7577_sub); }

		private static final SyntacticType test_7578_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7578_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7578() { testValid(test_7578_sup,test_7578_sub); }

		private static final SyntacticType test_7579_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7579_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7579() { testValid(test_7579_sup,test_7579_sub); }

		private static final SyntacticType test_7580_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7580_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7580() { testValid(test_7580_sup,test_7580_sub); }

		private static final SyntacticType test_7581_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7581_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7581() { testValid(test_7581_sup,test_7581_sub); }

		private static final SyntacticType test_7582_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7582_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7582() { testInvalid(test_7582_sup,test_7582_sub); }

		private static final SyntacticType test_7583_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7583_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7583() { testValid(test_7583_sup,test_7583_sub); }

		private static final SyntacticType test_7584_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7584_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7584() { testValid(test_7584_sup,test_7584_sub); }

		private static final SyntacticType test_7585_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7585_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7585() { testValid(test_7585_sup,test_7585_sub); }

		private static final SyntacticType test_7586_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7586_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7586() { testValid(test_7586_sup,test_7586_sub); }

		private static final SyntacticType test_7587_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7587_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7587() { testValid(test_7587_sup,test_7587_sub); }

		private static final SyntacticType test_7588_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7588_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7588() { testValid(test_7588_sup,test_7588_sub); }

		private static final SyntacticType test_7589_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7589_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7589() { testValid(test_7589_sup,test_7589_sub); }

		private static final SyntacticType test_7590_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7590_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7590() { testInvalid(test_7590_sup,test_7590_sub); }

		private static final SyntacticType test_7591_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7591_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7591() { testValid(test_7591_sup,test_7591_sub); }

		private static final SyntacticType test_7592_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7592_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7592() { testValid(test_7592_sup,test_7592_sub); }

		private static final SyntacticType test_7593_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7593_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7593() { testInvalid(test_7593_sup,test_7593_sub); }

		private static final SyntacticType test_7594_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7594_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7594() { testInvalid(test_7594_sup,test_7594_sub); }

		private static final SyntacticType test_7595_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7595_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7595() { testInvalid(test_7595_sup,test_7595_sub); }

		private static final SyntacticType test_7596_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7596_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7596() { testInvalid(test_7596_sup,test_7596_sub); }

		private static final SyntacticType test_7597_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7597_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7597() { testInvalid(test_7597_sup,test_7597_sub); }

		private static final SyntacticType test_7598_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7598_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7598() { testInvalid(test_7598_sup,test_7598_sub); }

		private static final SyntacticType test_7599_sup = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		private static final SyntacticType test_7599_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7599() { testInvalid(test_7599_sup,test_7599_sub); }

		private static final SyntacticType test_7600_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7600_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7600() { testValid(test_7600_sup,test_7600_sub); }

		private static final SyntacticType test_7601_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7601_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7601() { testValid(test_7601_sup,test_7601_sub); }

		private static final SyntacticType test_7602_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7602_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7602() { testValid(test_7602_sup,test_7602_sub); }

		private static final SyntacticType test_7603_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7603_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7603() { testValid(test_7603_sup,test_7603_sub); }

		private static final SyntacticType test_7604_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7604_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7604() { testValid(test_7604_sup,test_7604_sub); }

		private static final SyntacticType test_7605_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7605_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7605() { testValid(test_7605_sup,test_7605_sub); }

		private static final SyntacticType test_7606_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7606_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7606() { testValid(test_7606_sup,test_7606_sub); }

		private static final SyntacticType test_7607_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7607_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7607() { testValid(test_7607_sup,test_7607_sub); }

		private static final SyntacticType test_7608_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7608_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7608() { testValid(test_7608_sup,test_7608_sub); }

		private static final SyntacticType test_7609_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7609_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7609() { testValid(test_7609_sup,test_7609_sub); }

		private static final SyntacticType test_7610_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7610_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7610() { testValid(test_7610_sup,test_7610_sub); }

		private static final SyntacticType test_7611_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7611_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7611() { testValid(test_7611_sup,test_7611_sub); }

		private static final SyntacticType test_7612_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7612_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7612() { testValid(test_7612_sup,test_7612_sub); }

		private static final SyntacticType test_7613_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7613_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7613() { testValid(test_7613_sup,test_7613_sub); }

		private static final SyntacticType test_7614_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7614_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7614() { testValid(test_7614_sup,test_7614_sub); }

		private static final SyntacticType test_7615_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7615_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7615() { testValid(test_7615_sup,test_7615_sub); }

		private static final SyntacticType test_7616_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7616_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7616() { testValid(test_7616_sup,test_7616_sub); }

		private static final SyntacticType test_7617_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7617_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7617() { testValid(test_7617_sup,test_7617_sub); }

		private static final SyntacticType test_7618_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7618_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7618() { testValid(test_7618_sup,test_7618_sub); }

		private static final SyntacticType test_7619_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7619_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7619() { testValid(test_7619_sup,test_7619_sub); }

		private static final SyntacticType test_7620_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7620_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7620() { testValid(test_7620_sup,test_7620_sub); }

		private static final SyntacticType test_7621_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7621_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7621() { testValid(test_7621_sup,test_7621_sub); }

		private static final SyntacticType test_7622_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7622_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7622() { testValid(test_7622_sup,test_7622_sub); }

		private static final SyntacticType test_7623_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7623_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7623() { testValid(test_7623_sup,test_7623_sub); }

		private static final SyntacticType test_7624_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7624_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7624() { testValid(test_7624_sup,test_7624_sub); }

		private static final SyntacticType test_7625_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7625_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7625() { testValid(test_7625_sup,test_7625_sub); }

		private static final SyntacticType test_7626_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7626_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7626() { testValid(test_7626_sup,test_7626_sub); }

		private static final SyntacticType test_7627_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7627_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7627() { testValid(test_7627_sup,test_7627_sub); }

		private static final SyntacticType test_7628_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7628_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7628() { testValid(test_7628_sup,test_7628_sub); }

		private static final SyntacticType test_7629_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7629_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7629() { testValid(test_7629_sup,test_7629_sub); }

		private static final SyntacticType test_7630_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7630_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7630() { testValid(test_7630_sup,test_7630_sub); }

		private static final SyntacticType test_7631_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7631_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7631() { testValid(test_7631_sup,test_7631_sub); }

		private static final SyntacticType test_7632_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7632_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7632() { testValid(test_7632_sup,test_7632_sub); }

		private static final SyntacticType test_7633_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7633_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7633() { testValid(test_7633_sup,test_7633_sub); }

		private static final SyntacticType test_7634_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7634_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7634() { testValid(test_7634_sup,test_7634_sub); }

		private static final SyntacticType test_7635_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7635_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7635() { testValid(test_7635_sup,test_7635_sub); }

		private static final SyntacticType test_7636_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7636_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7636() { testValid(test_7636_sup,test_7636_sub); }

		private static final SyntacticType test_7637_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7637_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7637() { testValid(test_7637_sup,test_7637_sub); }

		private static final SyntacticType test_7638_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7638_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7638() { testValid(test_7638_sup,test_7638_sub); }

		private static final SyntacticType test_7639_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7639_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7639() { testValid(test_7639_sup,test_7639_sub); }

		private static final SyntacticType test_7640_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7640_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7640() { testValid(test_7640_sup,test_7640_sub); }

		private static final SyntacticType test_7641_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7641_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7641() { testValid(test_7641_sup,test_7641_sub); }

		private static final SyntacticType test_7642_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7642_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7642() { testValid(test_7642_sup,test_7642_sub); }

		private static final SyntacticType test_7643_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7643_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7643() { testValid(test_7643_sup,test_7643_sub); }

		private static final SyntacticType test_7644_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7644_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7644() { testInvalid(test_7644_sup,test_7644_sub); }

		private static final SyntacticType test_7645_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7645_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7645() { testValid(test_7645_sup,test_7645_sub); }

		private static final SyntacticType test_7646_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7646_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7646() { testInvalid(test_7646_sup,test_7646_sub); }

		private static final SyntacticType test_7647_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7647_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7647() { testValid(test_7647_sup,test_7647_sub); }

		private static final SyntacticType test_7648_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7648_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7648() { testInvalid(test_7648_sup,test_7648_sub); }

		private static final SyntacticType test_7649_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7649_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7649() { testValid(test_7649_sup,test_7649_sub); }

		private static final SyntacticType test_7650_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7650_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7650() { testInvalid(test_7650_sup,test_7650_sub); }

		private static final SyntacticType test_7651_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7651_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7651() { testValid(test_7651_sup,test_7651_sub); }

		private static final SyntacticType test_7652_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7652_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7652() { testValid(test_7652_sup,test_7652_sub); }

		private static final SyntacticType test_7653_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7653_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7653() { testValid(test_7653_sup,test_7653_sub); }

		private static final SyntacticType test_7654_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7654_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7654() { testInvalid(test_7654_sup,test_7654_sub); }

		private static final SyntacticType test_7655_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7655_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7655() { testInvalid(test_7655_sup,test_7655_sub); }

		private static final SyntacticType test_7656_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7656_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7656() { testValid(test_7656_sup,test_7656_sub); }

		private static final SyntacticType test_7657_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7657_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7657() { testInvalid(test_7657_sup,test_7657_sub); }

		private static final SyntacticType test_7658_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7658_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7658() { testInvalid(test_7658_sup,test_7658_sub); }

		private static final SyntacticType test_7659_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7659_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7659() { testInvalid(test_7659_sup,test_7659_sub); }

		private static final SyntacticType test_7660_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7660_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7660() { testInvalid(test_7660_sup,test_7660_sub); }

		private static final SyntacticType test_7661_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7661_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7661() { testInvalid(test_7661_sup,test_7661_sub); }

		private static final SyntacticType test_7662_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7662_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7662() { testInvalid(test_7662_sup,test_7662_sub); }

		private static final SyntacticType test_7663_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7663_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7663() { testInvalid(test_7663_sup,test_7663_sub); }

		private static final SyntacticType test_7664_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7664_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7664() { testInvalid(test_7664_sup,test_7664_sub); }

		private static final SyntacticType test_7665_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7665_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7665() { testInvalid(test_7665_sup,test_7665_sub); }

		private static final SyntacticType test_7666_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7666_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7666() { testInvalid(test_7666_sup,test_7666_sub); }

		private static final SyntacticType test_7667_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7667_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7667() { testInvalid(test_7667_sup,test_7667_sub); }

		private static final SyntacticType test_7668_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7668_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7668() { testValid(test_7668_sup,test_7668_sub); }

		private static final SyntacticType test_7669_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7669_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7669() { testInvalid(test_7669_sup,test_7669_sub); }

		private static final SyntacticType test_7670_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7670_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7670() { testInvalid(test_7670_sup,test_7670_sub); }

		private static final SyntacticType test_7671_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7671_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7671() { testInvalid(test_7671_sup,test_7671_sub); }

		private static final SyntacticType test_7672_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7672_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7672() { testInvalid(test_7672_sup,test_7672_sub); }

		private static final SyntacticType test_7673_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7673_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7673() { testInvalid(test_7673_sup,test_7673_sub); }

		private static final SyntacticType test_7674_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7674_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7674() { testValid(test_7674_sup,test_7674_sub); }

		private static final SyntacticType test_7675_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7675_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7675() { testInvalid(test_7675_sup,test_7675_sub); }

		private static final SyntacticType test_7676_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7676_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7676() { testInvalid(test_7676_sup,test_7676_sub); }

		private static final SyntacticType test_7677_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7677_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7677() { testInvalid(test_7677_sup,test_7677_sub); }

		private static final SyntacticType test_7678_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7678_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7678() { testInvalid(test_7678_sup,test_7678_sub); }

		private static final SyntacticType test_7679_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7679_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7679() { testInvalid(test_7679_sup,test_7679_sub); }

		private static final SyntacticType test_7680_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7680_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7680() { testValid(test_7680_sup,test_7680_sub); }

		private static final SyntacticType test_7681_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7681_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7681() { testValid(test_7681_sup,test_7681_sub); }

		private static final SyntacticType test_7682_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7682_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7682() { testValid(test_7682_sup,test_7682_sub); }

		private static final SyntacticType test_7683_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7683_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7683() { testValid(test_7683_sup,test_7683_sub); }

		private static final SyntacticType test_7684_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7684_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7684() { testValid(test_7684_sup,test_7684_sub); }

		private static final SyntacticType test_7685_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7685_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7685() { testInvalid(test_7685_sup,test_7685_sub); }

		private static final SyntacticType test_7686_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7686_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7686() { testValid(test_7686_sup,test_7686_sub); }

		private static final SyntacticType test_7687_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7687_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7687() { testValid(test_7687_sup,test_7687_sub); }

		private static final SyntacticType test_7688_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7688_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7688() { testInvalid(test_7688_sup,test_7688_sub); }

		private static final SyntacticType test_7689_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7689_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7689() { testInvalid(test_7689_sup,test_7689_sub); }

		private static final SyntacticType test_7690_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7690_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7690() { testInvalid(test_7690_sup,test_7690_sub); }

		private static final SyntacticType test_7691_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7691_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7691() { testInvalid(test_7691_sup,test_7691_sub); }

		private static final SyntacticType test_7692_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7692_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7692() { testInvalid(test_7692_sup,test_7692_sub); }

		private static final SyntacticType test_7693_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7693_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7693() { testInvalid(test_7693_sup,test_7693_sub); }

		private static final SyntacticType test_7694_sup = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		private static final SyntacticType test_7694_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7694() { testInvalid(test_7694_sup,test_7694_sub); }

		private static final SyntacticType test_7695_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7695_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7695() { testValid(test_7695_sup,test_7695_sub); }

		private static final SyntacticType test_7696_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7696_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7696() { testValid(test_7696_sup,test_7696_sub); }

		private static final SyntacticType test_7697_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7697_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7697() { testValid(test_7697_sup,test_7697_sub); }

		private static final SyntacticType test_7698_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7698_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7698() { testValid(test_7698_sup,test_7698_sub); }

		private static final SyntacticType test_7699_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7699_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7699() { testValid(test_7699_sup,test_7699_sub); }

		private static final SyntacticType test_7700_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7700_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7700() { testValid(test_7700_sup,test_7700_sub); }

		private static final SyntacticType test_7701_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7701_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7701() { testValid(test_7701_sup,test_7701_sub); }

		private static final SyntacticType test_7702_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7702_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7702() { testValid(test_7702_sup,test_7702_sub); }

		private static final SyntacticType test_7703_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7703_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7703() { testValid(test_7703_sup,test_7703_sub); }

		private static final SyntacticType test_7704_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7704_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7704() { testValid(test_7704_sup,test_7704_sub); }

		private static final SyntacticType test_7705_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7705_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7705() { testValid(test_7705_sup,test_7705_sub); }

		private static final SyntacticType test_7706_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7706_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7706() { testValid(test_7706_sup,test_7706_sub); }

		private static final SyntacticType test_7707_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7707_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7707() { testValid(test_7707_sup,test_7707_sub); }

		private static final SyntacticType test_7708_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7708_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7708() { testValid(test_7708_sup,test_7708_sub); }

		private static final SyntacticType test_7709_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7709_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7709() { testValid(test_7709_sup,test_7709_sub); }

		private static final SyntacticType test_7710_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7710_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7710() { testValid(test_7710_sup,test_7710_sub); }

		private static final SyntacticType test_7711_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7711_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7711() { testValid(test_7711_sup,test_7711_sub); }

		private static final SyntacticType test_7712_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7712_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7712() { testValid(test_7712_sup,test_7712_sub); }

		private static final SyntacticType test_7713_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7713_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7713() { testValid(test_7713_sup,test_7713_sub); }

		private static final SyntacticType test_7714_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7714_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7714() { testValid(test_7714_sup,test_7714_sub); }

		private static final SyntacticType test_7715_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7715_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7715() { testValid(test_7715_sup,test_7715_sub); }

		private static final SyntacticType test_7716_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7716_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7716() { testValid(test_7716_sup,test_7716_sub); }

		private static final SyntacticType test_7717_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7717_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7717() { testValid(test_7717_sup,test_7717_sub); }

		private static final SyntacticType test_7718_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7718_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7718() { testValid(test_7718_sup,test_7718_sub); }

		private static final SyntacticType test_7719_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7719_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7719() { testValid(test_7719_sup,test_7719_sub); }

		private static final SyntacticType test_7720_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7720_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7720() { testValid(test_7720_sup,test_7720_sub); }

		private static final SyntacticType test_7721_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7721_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7721() { testValid(test_7721_sup,test_7721_sub); }

		private static final SyntacticType test_7722_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7722_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7722() { testValid(test_7722_sup,test_7722_sub); }

		private static final SyntacticType test_7723_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7723_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7723() { testValid(test_7723_sup,test_7723_sub); }

		private static final SyntacticType test_7724_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7724_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7724() { testValid(test_7724_sup,test_7724_sub); }

		private static final SyntacticType test_7725_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7725_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7725() { testValid(test_7725_sup,test_7725_sub); }

		private static final SyntacticType test_7726_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7726_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7726() { testValid(test_7726_sup,test_7726_sub); }

		private static final SyntacticType test_7727_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7727_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7727() { testValid(test_7727_sup,test_7727_sub); }

		private static final SyntacticType test_7728_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7728_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7728() { testValid(test_7728_sup,test_7728_sub); }

		private static final SyntacticType test_7729_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7729_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7729() { testValid(test_7729_sup,test_7729_sub); }

		private static final SyntacticType test_7730_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7730_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7730() { testValid(test_7730_sup,test_7730_sub); }

		private static final SyntacticType test_7731_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7731_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7731() { testValid(test_7731_sup,test_7731_sub); }

		private static final SyntacticType test_7732_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7732_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7732() { testValid(test_7732_sup,test_7732_sub); }

		private static final SyntacticType test_7733_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7733_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7733() { testValid(test_7733_sup,test_7733_sub); }

		private static final SyntacticType test_7734_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7734_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7734() { testValid(test_7734_sup,test_7734_sub); }

		private static final SyntacticType test_7735_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7735_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7735() { testValid(test_7735_sup,test_7735_sub); }

		private static final SyntacticType test_7736_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7736_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7736() { testValid(test_7736_sup,test_7736_sub); }

		private static final SyntacticType test_7737_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7737_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7737() { testValid(test_7737_sup,test_7737_sub); }

		private static final SyntacticType test_7738_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7738_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7738() { testValid(test_7738_sup,test_7738_sub); }

		private static final SyntacticType test_7739_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7739_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7739() { testInvalid(test_7739_sup,test_7739_sub); }

		private static final SyntacticType test_7740_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7740_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7740() { testValid(test_7740_sup,test_7740_sub); }

		private static final SyntacticType test_7741_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7741_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7741() { testInvalid(test_7741_sup,test_7741_sub); }

		private static final SyntacticType test_7742_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7742_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7742() { testValid(test_7742_sup,test_7742_sub); }

		private static final SyntacticType test_7743_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7743_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7743() { testInvalid(test_7743_sup,test_7743_sub); }

		private static final SyntacticType test_7744_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7744_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7744() { testValid(test_7744_sup,test_7744_sub); }

		private static final SyntacticType test_7745_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7745_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7745() { testInvalid(test_7745_sup,test_7745_sub); }

		private static final SyntacticType test_7746_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7746_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7746() { testValid(test_7746_sup,test_7746_sub); }

		private static final SyntacticType test_7747_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7747_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7747() { testValid(test_7747_sup,test_7747_sub); }

		private static final SyntacticType test_7748_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7748_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7748() { testValid(test_7748_sup,test_7748_sub); }

		private static final SyntacticType test_7749_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7749_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7749() { testInvalid(test_7749_sup,test_7749_sub); }

		private static final SyntacticType test_7750_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7750_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7750() { testInvalid(test_7750_sup,test_7750_sub); }

		private static final SyntacticType test_7751_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7751_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7751() { testValid(test_7751_sup,test_7751_sub); }

		private static final SyntacticType test_7752_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7752_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7752() { testInvalid(test_7752_sup,test_7752_sub); }

		private static final SyntacticType test_7753_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7753_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7753() { testInvalid(test_7753_sup,test_7753_sub); }

		private static final SyntacticType test_7754_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7754_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7754() { testInvalid(test_7754_sup,test_7754_sub); }

		private static final SyntacticType test_7755_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7755_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7755() { testInvalid(test_7755_sup,test_7755_sub); }

		private static final SyntacticType test_7756_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7756_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7756() { testInvalid(test_7756_sup,test_7756_sub); }

		private static final SyntacticType test_7757_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7757_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7757() { testInvalid(test_7757_sup,test_7757_sub); }

		private static final SyntacticType test_7758_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7758_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7758() { testInvalid(test_7758_sup,test_7758_sub); }

		private static final SyntacticType test_7759_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7759_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7759() { testInvalid(test_7759_sup,test_7759_sub); }

		private static final SyntacticType test_7760_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7760_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7760() { testInvalid(test_7760_sup,test_7760_sub); }

		private static final SyntacticType test_7761_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7761_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7761() { testInvalid(test_7761_sup,test_7761_sub); }

		private static final SyntacticType test_7762_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7762_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7762() { testInvalid(test_7762_sup,test_7762_sub); }

		private static final SyntacticType test_7763_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7763_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7763() { testValid(test_7763_sup,test_7763_sub); }

		private static final SyntacticType test_7764_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7764_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7764() { testInvalid(test_7764_sup,test_7764_sub); }

		private static final SyntacticType test_7765_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7765_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7765() { testInvalid(test_7765_sup,test_7765_sub); }

		private static final SyntacticType test_7766_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7766_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7766() { testInvalid(test_7766_sup,test_7766_sub); }

		private static final SyntacticType test_7767_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7767_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7767() { testInvalid(test_7767_sup,test_7767_sub); }

		private static final SyntacticType test_7768_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7768_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7768() { testInvalid(test_7768_sup,test_7768_sub); }

		private static final SyntacticType test_7769_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7769_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7769() { testValid(test_7769_sup,test_7769_sub); }

		private static final SyntacticType test_7770_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7770_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7770() { testInvalid(test_7770_sup,test_7770_sub); }

		private static final SyntacticType test_7771_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7771_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7771() { testInvalid(test_7771_sup,test_7771_sub); }

		private static final SyntacticType test_7772_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7772_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7772() { testInvalid(test_7772_sup,test_7772_sub); }

		private static final SyntacticType test_7773_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7773_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7773() { testInvalid(test_7773_sup,test_7773_sub); }

		private static final SyntacticType test_7774_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7774_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7774() { testInvalid(test_7774_sup,test_7774_sub); }

		private static final SyntacticType test_7775_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7775_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7775() { testValid(test_7775_sup,test_7775_sub); }

		private static final SyntacticType test_7776_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7776_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7776() { testValid(test_7776_sup,test_7776_sub); }

		private static final SyntacticType test_7777_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7777_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7777() { testValid(test_7777_sup,test_7777_sub); }

		private static final SyntacticType test_7778_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7778_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7778() { testValid(test_7778_sup,test_7778_sub); }

		private static final SyntacticType test_7779_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7779_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7779() { testValid(test_7779_sup,test_7779_sub); }

		private static final SyntacticType test_7780_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7780_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7780() { testInvalid(test_7780_sup,test_7780_sub); }

		private static final SyntacticType test_7781_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7781_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7781() { testValid(test_7781_sup,test_7781_sub); }

		private static final SyntacticType test_7782_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7782_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7782() { testValid(test_7782_sup,test_7782_sub); }

		private static final SyntacticType test_7783_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7783_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7783() { testInvalid(test_7783_sup,test_7783_sub); }

		private static final SyntacticType test_7784_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7784_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7784() { testInvalid(test_7784_sup,test_7784_sub); }

		private static final SyntacticType test_7785_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7785_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7785() { testInvalid(test_7785_sup,test_7785_sub); }

		private static final SyntacticType test_7786_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7786_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7786() { testInvalid(test_7786_sup,test_7786_sub); }

		private static final SyntacticType test_7787_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7787_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7787() { testInvalid(test_7787_sup,test_7787_sub); }

		private static final SyntacticType test_7788_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7788_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7788() { testInvalid(test_7788_sup,test_7788_sub); }

		private static final SyntacticType test_7789_sup = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		private static final SyntacticType test_7789_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7789() { testInvalid(test_7789_sup,test_7789_sub); }

		private static final SyntacticType test_7790_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7790_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7790() { testValid(test_7790_sup,test_7790_sub); }

		private static final SyntacticType test_7791_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7791_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7791() { testValid(test_7791_sup,test_7791_sub); }

		private static final SyntacticType test_7792_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7792_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7792() { testInvalid(test_7792_sup,test_7792_sub); }

		private static final SyntacticType test_7793_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7793_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7793() { testInvalid(test_7793_sup,test_7793_sub); }

		private static final SyntacticType test_7794_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7794_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7794() { testInvalid(test_7794_sup,test_7794_sub); }

		private static final SyntacticType test_7795_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7795_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7795() { testInvalid(test_7795_sup,test_7795_sub); }

		private static final SyntacticType test_7796_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7796_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7796() { testInvalid(test_7796_sup,test_7796_sub); }

		private static final SyntacticType test_7797_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7797_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7797() { testInvalid(test_7797_sup,test_7797_sub); }

		private static final SyntacticType test_7798_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7798_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7798() { testInvalid(test_7798_sup,test_7798_sub); }

		private static final SyntacticType test_7799_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7799_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7799() { testInvalid(test_7799_sup,test_7799_sub); }

		private static final SyntacticType test_7800_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7800_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7800() { testInvalid(test_7800_sup,test_7800_sub); }

		private static final SyntacticType test_7801_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7801_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7801() { testInvalid(test_7801_sup,test_7801_sub); }

		private static final SyntacticType test_7802_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7802_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7802() { testInvalid(test_7802_sup,test_7802_sub); }

		private static final SyntacticType test_7803_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7803_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7803() { testInvalid(test_7803_sup,test_7803_sub); }

		private static final SyntacticType test_7804_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7804_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7804() { testInvalid(test_7804_sup,test_7804_sub); }

		private static final SyntacticType test_7805_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7805_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7805() { testInvalid(test_7805_sup,test_7805_sub); }

		private static final SyntacticType test_7806_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7806_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7806() { testInvalid(test_7806_sup,test_7806_sub); }

		private static final SyntacticType test_7807_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7807_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7807() { testInvalid(test_7807_sup,test_7807_sub); }

		private static final SyntacticType test_7808_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7808_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7808() { testValid(test_7808_sup,test_7808_sub); }

		private static final SyntacticType test_7809_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7809_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7809() { testInvalid(test_7809_sup,test_7809_sub); }

		private static final SyntacticType test_7810_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7810_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7810() { testInvalid(test_7810_sup,test_7810_sub); }

		private static final SyntacticType test_7811_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7811_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7811() { testInvalid(test_7811_sup,test_7811_sub); }

		private static final SyntacticType test_7812_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7812_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7812() { testValid(test_7812_sup,test_7812_sub); }

		private static final SyntacticType test_7813_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7813_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7813() { testValid(test_7813_sup,test_7813_sub); }

		private static final SyntacticType test_7814_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7814_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7814() { testInvalid(test_7814_sup,test_7814_sub); }

		private static final SyntacticType test_7815_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7815_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7815() { testInvalid(test_7815_sup,test_7815_sub); }

		private static final SyntacticType test_7816_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7816_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7816() { testInvalid(test_7816_sup,test_7816_sub); }

		private static final SyntacticType test_7817_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7817_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7817() { testInvalid(test_7817_sup,test_7817_sub); }

		private static final SyntacticType test_7818_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7818_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7818() { testInvalid(test_7818_sup,test_7818_sub); }

		private static final SyntacticType test_7819_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7819_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7819() { testInvalid(test_7819_sup,test_7819_sub); }

		private static final SyntacticType test_7820_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7820_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7820() { testInvalid(test_7820_sup,test_7820_sub); }

		private static final SyntacticType test_7821_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7821_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7821() { testInvalid(test_7821_sup,test_7821_sub); }

		private static final SyntacticType test_7822_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7822_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7822() { testInvalid(test_7822_sup,test_7822_sub); }

		private static final SyntacticType test_7823_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7823_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7823() { testInvalid(test_7823_sup,test_7823_sub); }

		private static final SyntacticType test_7824_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7824_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7824() { testInvalid(test_7824_sup,test_7824_sub); }

		private static final SyntacticType test_7825_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7825_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7825() { testInvalid(test_7825_sup,test_7825_sub); }

		private static final SyntacticType test_7826_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7826_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7826() { testInvalid(test_7826_sup,test_7826_sub); }

		private static final SyntacticType test_7827_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7827_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7827() { testValid(test_7827_sup,test_7827_sub); }

		private static final SyntacticType test_7828_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7828_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7828() { testValid(test_7828_sup,test_7828_sub); }

		private static final SyntacticType test_7829_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7829_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7829() { testInvalid(test_7829_sup,test_7829_sub); }

		private static final SyntacticType test_7830_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7830_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7830() { testInvalid(test_7830_sup,test_7830_sub); }

		private static final SyntacticType test_7831_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7831_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7831() { testValid(test_7831_sup,test_7831_sub); }

		private static final SyntacticType test_7832_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7832_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7832() { testInvalid(test_7832_sup,test_7832_sub); }

		private static final SyntacticType test_7833_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7833_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7833() { testInvalid(test_7833_sup,test_7833_sub); }

		private static final SyntacticType test_7834_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7834_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7834() { testInvalid(test_7834_sup,test_7834_sub); }

		private static final SyntacticType test_7835_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7835_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7835() { testInvalid(test_7835_sup,test_7835_sub); }

		private static final SyntacticType test_7836_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7836_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7836() { testInvalid(test_7836_sup,test_7836_sub); }

		private static final SyntacticType test_7837_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7837_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7837() { testInvalid(test_7837_sup,test_7837_sub); }

		private static final SyntacticType test_7838_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7838_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7838() { testInvalid(test_7838_sup,test_7838_sub); }

		private static final SyntacticType test_7839_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7839_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7839() { testInvalid(test_7839_sup,test_7839_sub); }

		private static final SyntacticType test_7840_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7840_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7840() { testInvalid(test_7840_sup,test_7840_sub); }

		private static final SyntacticType test_7841_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7841_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7841() { testInvalid(test_7841_sup,test_7841_sub); }

		private static final SyntacticType test_7842_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7842_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7842() { testValid(test_7842_sup,test_7842_sub); }

		private static final SyntacticType test_7843_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7843_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7843() { testInvalid(test_7843_sup,test_7843_sub); }

		private static final SyntacticType test_7844_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7844_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7844() { testInvalid(test_7844_sup,test_7844_sub); }

		private static final SyntacticType test_7845_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7845_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7845() { testInvalid(test_7845_sup,test_7845_sub); }

		private static final SyntacticType test_7846_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7846_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7846() { testValid(test_7846_sup,test_7846_sub); }

		private static final SyntacticType test_7847_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7847_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7847() { testInvalid(test_7847_sup,test_7847_sub); }

		private static final SyntacticType test_7848_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7848_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7848() { testInvalid(test_7848_sup,test_7848_sub); }

		private static final SyntacticType test_7849_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7849_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7849() { testInvalid(test_7849_sup,test_7849_sub); }

		private static final SyntacticType test_7850_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7850_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7850() { testInvalid(test_7850_sup,test_7850_sub); }

		private static final SyntacticType test_7851_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7851_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7851() { testInvalid(test_7851_sup,test_7851_sub); }

		private static final SyntacticType test_7852_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7852_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7852() { testInvalid(test_7852_sup,test_7852_sub); }

		private static final SyntacticType test_7853_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7853_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7853() { testInvalid(test_7853_sup,test_7853_sub); }

		private static final SyntacticType test_7854_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7854_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7854() { testInvalid(test_7854_sup,test_7854_sub); }

		private static final SyntacticType test_7855_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7855_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7855() { testInvalid(test_7855_sup,test_7855_sub); }

		private static final SyntacticType test_7856_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7856_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7856() { testInvalid(test_7856_sup,test_7856_sub); }

		private static final SyntacticType test_7857_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7857_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7857() { testInvalid(test_7857_sup,test_7857_sub); }

		private static final SyntacticType test_7858_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7858_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7858() { testInvalid(test_7858_sup,test_7858_sub); }

		private static final SyntacticType test_7859_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7859_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7859() { testInvalid(test_7859_sup,test_7859_sub); }

		private static final SyntacticType test_7860_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7860_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7860() { testInvalid(test_7860_sup,test_7860_sub); }

		private static final SyntacticType test_7861_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7861_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7861() { testInvalid(test_7861_sup,test_7861_sub); }

		private static final SyntacticType test_7862_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7862_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7862() { testInvalid(test_7862_sup,test_7862_sub); }

		private static final SyntacticType test_7863_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7863_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7863() { testInvalid(test_7863_sup,test_7863_sub); }

		private static final SyntacticType test_7864_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7864_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7864() { testInvalid(test_7864_sup,test_7864_sub); }

		private static final SyntacticType test_7865_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7865_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7865() { testInvalid(test_7865_sup,test_7865_sub); }

		private static final SyntacticType test_7866_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7866_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7866() { testInvalid(test_7866_sup,test_7866_sub); }

		private static final SyntacticType test_7867_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7867_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7867() { testInvalid(test_7867_sup,test_7867_sub); }

		private static final SyntacticType test_7868_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7868_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7868() { testInvalid(test_7868_sup,test_7868_sub); }

		private static final SyntacticType test_7869_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7869_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7869() { testInvalid(test_7869_sup,test_7869_sub); }

		private static final SyntacticType test_7870_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7870_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7870() { testInvalid(test_7870_sup,test_7870_sub); }

		private static final SyntacticType test_7871_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7871_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7871() { testInvalid(test_7871_sup,test_7871_sub); }

		private static final SyntacticType test_7872_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7872_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7872() { testValid(test_7872_sup,test_7872_sub); }

		private static final SyntacticType test_7873_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7873_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7873() { testValid(test_7873_sup,test_7873_sub); }

		private static final SyntacticType test_7874_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7874_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7874() { testInvalid(test_7874_sup,test_7874_sub); }

		private static final SyntacticType test_7875_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7875_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7875() { testInvalid(test_7875_sup,test_7875_sub); }

		private static final SyntacticType test_7876_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7876_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7876() { testValid(test_7876_sup,test_7876_sub); }

		private static final SyntacticType test_7877_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7877_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7877() { testInvalid(test_7877_sup,test_7877_sub); }

		private static final SyntacticType test_7878_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7878_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7878() { testInvalid(test_7878_sup,test_7878_sub); }

		private static final SyntacticType test_7879_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7879_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7879() { testInvalid(test_7879_sup,test_7879_sub); }

		private static final SyntacticType test_7880_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7880_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7880() { testInvalid(test_7880_sup,test_7880_sub); }

		private static final SyntacticType test_7881_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7881_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7881() { testInvalid(test_7881_sup,test_7881_sub); }

		private static final SyntacticType test_7882_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7882_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7882() { testInvalid(test_7882_sup,test_7882_sub); }

		private static final SyntacticType test_7883_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7883_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7883() { testInvalid(test_7883_sup,test_7883_sub); }

		private static final SyntacticType test_7884_sup = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		private static final SyntacticType test_7884_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7884() { testInvalid(test_7884_sup,test_7884_sub); }

		private static final SyntacticType test_7885_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7885_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7885() { testInvalid(test_7885_sup,test_7885_sub); }

		private static final SyntacticType test_7886_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7886_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7886() { testInvalid(test_7886_sup,test_7886_sub); }

		private static final SyntacticType test_7887_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7887_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7887() { testInvalid(test_7887_sup,test_7887_sub); }

		private static final SyntacticType test_7888_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7888_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7888() { testInvalid(test_7888_sup,test_7888_sub); }

		private static final SyntacticType test_7889_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7889_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7889() { testInvalid(test_7889_sup,test_7889_sub); }

		private static final SyntacticType test_7890_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7890_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7890() { testInvalid(test_7890_sup,test_7890_sub); }

		private static final SyntacticType test_7891_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7891_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7891() { testInvalid(test_7891_sup,test_7891_sub); }

		private static final SyntacticType test_7892_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7892_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7892() { testInvalid(test_7892_sup,test_7892_sub); }

		private static final SyntacticType test_7893_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7893_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7893() { testInvalid(test_7893_sup,test_7893_sub); }

		private static final SyntacticType test_7894_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7894_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7894() { testInvalid(test_7894_sup,test_7894_sub); }

		private static final SyntacticType test_7895_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7895_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7895() { testInvalid(test_7895_sup,test_7895_sub); }

		private static final SyntacticType test_7896_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7896_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7896() { testInvalid(test_7896_sup,test_7896_sub); }

		private static final SyntacticType test_7897_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7897_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7897() { testInvalid(test_7897_sup,test_7897_sub); }

		private static final SyntacticType test_7898_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7898_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7898() { testInvalid(test_7898_sup,test_7898_sub); }

		private static final SyntacticType test_7899_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7899_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7899() { testInvalid(test_7899_sup,test_7899_sub); }

		private static final SyntacticType test_7900_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7900_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7900() { testInvalid(test_7900_sup,test_7900_sub); }

		private static final SyntacticType test_7901_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7901_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7901() { testInvalid(test_7901_sup,test_7901_sub); }

		private static final SyntacticType test_7902_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7902_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7902() { testInvalid(test_7902_sup,test_7902_sub); }

		private static final SyntacticType test_7903_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7903_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7903() { testInvalid(test_7903_sup,test_7903_sub); }

		private static final SyntacticType test_7904_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7904_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7904() { testInvalid(test_7904_sup,test_7904_sub); }

		private static final SyntacticType test_7905_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7905_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_7905() { testInvalid(test_7905_sup,test_7905_sub); }

		private static final SyntacticType test_7906_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7906_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_7906() { testInvalid(test_7906_sup,test_7906_sub); }

		private static final SyntacticType test_7907_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7907_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_7907() { testInvalid(test_7907_sup,test_7907_sub); }

		private static final SyntacticType test_7908_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7908_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_7908() { testInvalid(test_7908_sup,test_7908_sub); }

		private static final SyntacticType test_7909_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7909_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_7909() { testInvalid(test_7909_sup,test_7909_sub); }

		private static final SyntacticType test_7910_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7910_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_7910() { testInvalid(test_7910_sup,test_7910_sub); }

		private static final SyntacticType test_7911_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7911_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_7911() { testInvalid(test_7911_sup,test_7911_sub); }

		private static final SyntacticType test_7912_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7912_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_7912() { testInvalid(test_7912_sup,test_7912_sub); }

		private static final SyntacticType test_7913_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7913_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_7913() { testInvalid(test_7913_sup,test_7913_sub); }

		private static final SyntacticType test_7914_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7914_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_7914() { testInvalid(test_7914_sup,test_7914_sub); }

		private static final SyntacticType test_7915_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7915_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_7915() { testInvalid(test_7915_sup,test_7915_sub); }

		private static final SyntacticType test_7916_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7916_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_7916() { testInvalid(test_7916_sup,test_7916_sub); }

		private static final SyntacticType test_7917_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7917_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_7917() { testInvalid(test_7917_sup,test_7917_sub); }

		private static final SyntacticType test_7918_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7918_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_7918() { testInvalid(test_7918_sup,test_7918_sub); }

		private static final SyntacticType test_7919_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7919_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_7919() { testInvalid(test_7919_sup,test_7919_sub); }

		private static final SyntacticType test_7920_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7920_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_7920() { testInvalid(test_7920_sup,test_7920_sub); }

		private static final SyntacticType test_7921_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7921_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_7921() { testInvalid(test_7921_sup,test_7921_sub); }

		private static final SyntacticType test_7922_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7922_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_7922() { testInvalid(test_7922_sup,test_7922_sub); }

		private static final SyntacticType test_7923_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7923_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_7923() { testInvalid(test_7923_sup,test_7923_sub); }

		private static final SyntacticType test_7924_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7924_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_7924() { testInvalid(test_7924_sup,test_7924_sub); }

		private static final SyntacticType test_7925_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7925_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_7925() { testInvalid(test_7925_sup,test_7925_sub); }

		private static final SyntacticType test_7926_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7926_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_7926() { testInvalid(test_7926_sup,test_7926_sub); }

		private static final SyntacticType test_7927_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7927_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_7927() { testInvalid(test_7927_sup,test_7927_sub); }

		private static final SyntacticType test_7928_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7928_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_7928() { testInvalid(test_7928_sup,test_7928_sub); }

		private static final SyntacticType test_7929_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7929_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_7929() { testInvalid(test_7929_sup,test_7929_sub); }

		private static final SyntacticType test_7930_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7930_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_7930() { testInvalid(test_7930_sup,test_7930_sub); }

		private static final SyntacticType test_7931_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7931_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_7931() { testInvalid(test_7931_sup,test_7931_sub); }

		private static final SyntacticType test_7932_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7932_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_7932() { testInvalid(test_7932_sup,test_7932_sub); }

		private static final SyntacticType test_7933_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7933_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_7933() { testInvalid(test_7933_sup,test_7933_sub); }

		private static final SyntacticType test_7934_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7934_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_7934() { testInvalid(test_7934_sup,test_7934_sub); }

		private static final SyntacticType test_7935_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7935_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_7935() { testInvalid(test_7935_sup,test_7935_sub); }

		private static final SyntacticType test_7936_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7936_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_7936() { testInvalid(test_7936_sup,test_7936_sub); }

		private static final SyntacticType test_7937_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7937_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_7937() { testInvalid(test_7937_sup,test_7937_sub); }

		private static final SyntacticType test_7938_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7938_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_7938() { testInvalid(test_7938_sup,test_7938_sub); }

		private static final SyntacticType test_7939_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7939_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_7939() { testInvalid(test_7939_sup,test_7939_sub); }

		private static final SyntacticType test_7940_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7940_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_7940() { testInvalid(test_7940_sup,test_7940_sub); }

		private static final SyntacticType test_7941_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7941_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_7941() { testInvalid(test_7941_sup,test_7941_sub); }

		private static final SyntacticType test_7942_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7942_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_7942() { testInvalid(test_7942_sup,test_7942_sub); }

		private static final SyntacticType test_7943_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7943_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_7943() { testInvalid(test_7943_sup,test_7943_sub); }

		private static final SyntacticType test_7944_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7944_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_7944() { testInvalid(test_7944_sup,test_7944_sub); }

		private static final SyntacticType test_7945_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7945_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_7945() { testInvalid(test_7945_sup,test_7945_sub); }

		private static final SyntacticType test_7946_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7946_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_7946() { testInvalid(test_7946_sup,test_7946_sub); }

		private static final SyntacticType test_7947_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7947_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_7947() { testInvalid(test_7947_sup,test_7947_sub); }

		private static final SyntacticType test_7948_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7948_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_7948() { testInvalid(test_7948_sup,test_7948_sub); }

		private static final SyntacticType test_7949_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7949_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_7949() { testInvalid(test_7949_sup,test_7949_sub); }

		private static final SyntacticType test_7950_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7950_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_7950() { testInvalid(test_7950_sup,test_7950_sub); }

		private static final SyntacticType test_7951_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7951_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_7951() { testInvalid(test_7951_sup,test_7951_sub); }

		private static final SyntacticType test_7952_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7952_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_7952() { testInvalid(test_7952_sup,test_7952_sub); }

		private static final SyntacticType test_7953_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7953_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_7953() { testInvalid(test_7953_sup,test_7953_sub); }

		private static final SyntacticType test_7954_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7954_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_7954() { testInvalid(test_7954_sup,test_7954_sub); }

		private static final SyntacticType test_7955_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7955_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_7955() { testInvalid(test_7955_sup,test_7955_sub); }

		private static final SyntacticType test_7956_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7956_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_7956() { testInvalid(test_7956_sup,test_7956_sub); }

		private static final SyntacticType test_7957_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7957_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_7957() { testInvalid(test_7957_sup,test_7957_sub); }

		private static final SyntacticType test_7958_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7958_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_7958() { testInvalid(test_7958_sup,test_7958_sub); }

		private static final SyntacticType test_7959_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7959_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_7959() { testInvalid(test_7959_sup,test_7959_sub); }

		private static final SyntacticType test_7960_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7960_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_7960() { testInvalid(test_7960_sup,test_7960_sub); }

		private static final SyntacticType test_7961_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7961_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_7961() { testInvalid(test_7961_sup,test_7961_sub); }

		private static final SyntacticType test_7962_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7962_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_7962() { testInvalid(test_7962_sup,test_7962_sub); }

		private static final SyntacticType test_7963_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7963_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_7963() { testInvalid(test_7963_sup,test_7963_sub); }

		private static final SyntacticType test_7964_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7964_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_7964() { testInvalid(test_7964_sup,test_7964_sub); }

		private static final SyntacticType test_7965_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7965_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_7965() { testInvalid(test_7965_sup,test_7965_sub); }

		private static final SyntacticType test_7966_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7966_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_7966() { testInvalid(test_7966_sup,test_7966_sub); }

		private static final SyntacticType test_7967_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7967_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_7967() { testInvalid(test_7967_sup,test_7967_sub); }

		private static final SyntacticType test_7968_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7968_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_7968() { testValid(test_7968_sup,test_7968_sub); }

		private static final SyntacticType test_7969_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7969_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_7969() { testInvalid(test_7969_sup,test_7969_sub); }

		private static final SyntacticType test_7970_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7970_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_7970() { testInvalid(test_7970_sup,test_7970_sub); }

		private static final SyntacticType test_7971_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7971_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_7971() { testInvalid(test_7971_sup,test_7971_sub); }

		private static final SyntacticType test_7972_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7972_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_7972() { testInvalid(test_7972_sup,test_7972_sub); }

		private static final SyntacticType test_7973_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7973_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_7973() { testInvalid(test_7973_sup,test_7973_sub); }

		private static final SyntacticType test_7974_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7974_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_7974() { testInvalid(test_7974_sup,test_7974_sub); }

		private static final SyntacticType test_7975_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7975_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_7975() { testInvalid(test_7975_sup,test_7975_sub); }

		private static final SyntacticType test_7976_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7976_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_7976() { testInvalid(test_7976_sup,test_7976_sub); }

		private static final SyntacticType test_7977_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7977_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_7977() { testInvalid(test_7977_sup,test_7977_sub); }

		private static final SyntacticType test_7978_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7978_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_7978() { testInvalid(test_7978_sup,test_7978_sub); }

		private static final SyntacticType test_7979_sup = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		private static final SyntacticType test_7979_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_7979() { testInvalid(test_7979_sup,test_7979_sub); }

		private static final SyntacticType test_7980_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7980_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_7980() { testInvalid(test_7980_sup,test_7980_sub); }

		private static final SyntacticType test_7981_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7981_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_7981() { testInvalid(test_7981_sup,test_7981_sub); }

		private static final SyntacticType test_7982_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7982_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_7982() { testInvalid(test_7982_sup,test_7982_sub); }

		private static final SyntacticType test_7983_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7983_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_7983() { testInvalid(test_7983_sup,test_7983_sub); }

		private static final SyntacticType test_7984_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7984_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_7984() { testValid(test_7984_sup,test_7984_sub); }

		private static final SyntacticType test_7985_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7985_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_7985() { testInvalid(test_7985_sup,test_7985_sub); }

		private static final SyntacticType test_7986_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7986_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_7986() { testInvalid(test_7986_sup,test_7986_sub); }

		private static final SyntacticType test_7987_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7987_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_7987() { testInvalid(test_7987_sup,test_7987_sub); }

		private static final SyntacticType test_7988_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7988_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_7988() { testInvalid(test_7988_sup,test_7988_sub); }

		private static final SyntacticType test_7989_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7989_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_7989() { testInvalid(test_7989_sup,test_7989_sub); }

		private static final SyntacticType test_7990_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7990_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_7990() { testInvalid(test_7990_sup,test_7990_sub); }

		private static final SyntacticType test_7991_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7991_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_7991() { testInvalid(test_7991_sup,test_7991_sub); }

		private static final SyntacticType test_7992_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7992_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_7992() { testInvalid(test_7992_sup,test_7992_sub); }

		private static final SyntacticType test_7993_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7993_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_7993() { testInvalid(test_7993_sup,test_7993_sub); }

		private static final SyntacticType test_7994_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7994_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_7994() { testInvalid(test_7994_sup,test_7994_sub); }

		private static final SyntacticType test_7995_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7995_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_7995() { testInvalid(test_7995_sup,test_7995_sub); }

		private static final SyntacticType test_7996_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7996_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_7996() { testValid(test_7996_sup,test_7996_sub); }

		private static final SyntacticType test_7997_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7997_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_7997() { testInvalid(test_7997_sup,test_7997_sub); }

		private static final SyntacticType test_7998_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7998_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_7998() { testInvalid(test_7998_sup,test_7998_sub); }

		private static final SyntacticType test_7999_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_7999_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_7999() { testInvalid(test_7999_sup,test_7999_sub); }

	}
	public static class Part_8 {
		private static final SyntacticType test_8000_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8000_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8000() { testInvalid(test_8000_sup,test_8000_sub); }

		private static final SyntacticType test_8001_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8001_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8001() { testInvalid(test_8001_sup,test_8001_sub); }

		private static final SyntacticType test_8002_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8002_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8002() { testValid(test_8002_sup,test_8002_sub); }

		private static final SyntacticType test_8003_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8003_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8003() { testValid(test_8003_sup,test_8003_sub); }

		private static final SyntacticType test_8004_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8004_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8004() { testValid(test_8004_sup,test_8004_sub); }

		private static final SyntacticType test_8005_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8005_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8005() { testInvalid(test_8005_sup,test_8005_sub); }

		private static final SyntacticType test_8006_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8006_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8006() { testInvalid(test_8006_sup,test_8006_sub); }

		private static final SyntacticType test_8007_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8007_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8007() { testInvalid(test_8007_sup,test_8007_sub); }

		private static final SyntacticType test_8008_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8008_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8008() { testInvalid(test_8008_sup,test_8008_sub); }

		private static final SyntacticType test_8009_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8009_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8009() { testValid(test_8009_sup,test_8009_sub); }

		private static final SyntacticType test_8010_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8010_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8010() { testInvalid(test_8010_sup,test_8010_sub); }

		private static final SyntacticType test_8011_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8011_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8011() { testInvalid(test_8011_sup,test_8011_sub); }

		private static final SyntacticType test_8012_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8012_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8012() { testInvalid(test_8012_sup,test_8012_sub); }

		private static final SyntacticType test_8013_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8013_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8013() { testInvalid(test_8013_sup,test_8013_sub); }

		private static final SyntacticType test_8014_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8014_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8014() { testInvalid(test_8014_sup,test_8014_sub); }

		private static final SyntacticType test_8015_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8015_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8015() { testInvalid(test_8015_sup,test_8015_sub); }

		private static final SyntacticType test_8016_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8016_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8016() { testInvalid(test_8016_sup,test_8016_sub); }

		private static final SyntacticType test_8017_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8017_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8017() { testValid(test_8017_sup,test_8017_sub); }

		private static final SyntacticType test_8018_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8018_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8018() { testInvalid(test_8018_sup,test_8018_sub); }

		private static final SyntacticType test_8019_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8019_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8019() { testInvalid(test_8019_sup,test_8019_sub); }

		private static final SyntacticType test_8020_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8020_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8020() { testInvalid(test_8020_sup,test_8020_sub); }

		private static final SyntacticType test_8021_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8021_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8021() { testInvalid(test_8021_sup,test_8021_sub); }

		private static final SyntacticType test_8022_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8022_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8022() { testInvalid(test_8022_sup,test_8022_sub); }

		private static final SyntacticType test_8023_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8023_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8023() { testInvalid(test_8023_sup,test_8023_sub); }

		private static final SyntacticType test_8024_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8024_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8024() { testInvalid(test_8024_sup,test_8024_sub); }

		private static final SyntacticType test_8025_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8025_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8025() { testInvalid(test_8025_sup,test_8025_sub); }

		private static final SyntacticType test_8026_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8026_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8026() { testInvalid(test_8026_sup,test_8026_sub); }

		private static final SyntacticType test_8027_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8027_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8027() { testInvalid(test_8027_sup,test_8027_sub); }

		private static final SyntacticType test_8028_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8028_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8028() { testInvalid(test_8028_sup,test_8028_sub); }

		private static final SyntacticType test_8029_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8029_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8029() { testInvalid(test_8029_sup,test_8029_sub); }

		private static final SyntacticType test_8030_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8030_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8030() { testInvalid(test_8030_sup,test_8030_sub); }

		private static final SyntacticType test_8031_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8031_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8031() { testInvalid(test_8031_sup,test_8031_sub); }

		private static final SyntacticType test_8032_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8032_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8032() { testInvalid(test_8032_sup,test_8032_sub); }

		private static final SyntacticType test_8033_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8033_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8033() { testInvalid(test_8033_sup,test_8033_sub); }

		private static final SyntacticType test_8034_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8034_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8034() { testInvalid(test_8034_sup,test_8034_sub); }

		private static final SyntacticType test_8035_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8035_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8035() { testInvalid(test_8035_sup,test_8035_sub); }

		private static final SyntacticType test_8036_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8036_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8036() { testInvalid(test_8036_sup,test_8036_sub); }

		private static final SyntacticType test_8037_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8037_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8037() { testInvalid(test_8037_sup,test_8037_sub); }

		private static final SyntacticType test_8038_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8038_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8038() { testInvalid(test_8038_sup,test_8038_sub); }

		private static final SyntacticType test_8039_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8039_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8039() { testInvalid(test_8039_sup,test_8039_sub); }

		private static final SyntacticType test_8040_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8040_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8040() { testInvalid(test_8040_sup,test_8040_sub); }

		private static final SyntacticType test_8041_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8041_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8041() { testInvalid(test_8041_sup,test_8041_sub); }

		private static final SyntacticType test_8042_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8042_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8042() { testInvalid(test_8042_sup,test_8042_sub); }

		private static final SyntacticType test_8043_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8043_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8043() { testInvalid(test_8043_sup,test_8043_sub); }

		private static final SyntacticType test_8044_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8044_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8044() { testInvalid(test_8044_sup,test_8044_sub); }

		private static final SyntacticType test_8045_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8045_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8045() { testInvalid(test_8045_sup,test_8045_sub); }

		private static final SyntacticType test_8046_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8046_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8046() { testInvalid(test_8046_sup,test_8046_sub); }

		private static final SyntacticType test_8047_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8047_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8047() { testInvalid(test_8047_sup,test_8047_sub); }

		private static final SyntacticType test_8048_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8048_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8048() { testInvalid(test_8048_sup,test_8048_sub); }

		private static final SyntacticType test_8049_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8049_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8049() { testInvalid(test_8049_sup,test_8049_sub); }

		private static final SyntacticType test_8050_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8050_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8050() { testInvalid(test_8050_sup,test_8050_sub); }

		private static final SyntacticType test_8051_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8051_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8051() { testInvalid(test_8051_sup,test_8051_sub); }

		private static final SyntacticType test_8052_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8052_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8052() { testInvalid(test_8052_sup,test_8052_sub); }

		private static final SyntacticType test_8053_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8053_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8053() { testInvalid(test_8053_sup,test_8053_sub); }

		private static final SyntacticType test_8054_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8054_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8054() { testInvalid(test_8054_sup,test_8054_sub); }

		private static final SyntacticType test_8055_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8055_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8055() { testInvalid(test_8055_sup,test_8055_sub); }

		private static final SyntacticType test_8056_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8056_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8056() { testInvalid(test_8056_sup,test_8056_sub); }

		private static final SyntacticType test_8057_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8057_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8057() { testInvalid(test_8057_sup,test_8057_sub); }

		private static final SyntacticType test_8058_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8058_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8058() { testInvalid(test_8058_sup,test_8058_sub); }

		private static final SyntacticType test_8059_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8059_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8059() { testInvalid(test_8059_sup,test_8059_sub); }

		private static final SyntacticType test_8060_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8060_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8060() { testInvalid(test_8060_sup,test_8060_sub); }

		private static final SyntacticType test_8061_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8061_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8061() { testInvalid(test_8061_sup,test_8061_sub); }

		private static final SyntacticType test_8062_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8062_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8062() { testInvalid(test_8062_sup,test_8062_sub); }

		private static final SyntacticType test_8063_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8063_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8063() { testValid(test_8063_sup,test_8063_sub); }

		private static final SyntacticType test_8064_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8064_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8064() { testValid(test_8064_sup,test_8064_sub); }

		private static final SyntacticType test_8065_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8065_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8065() { testInvalid(test_8065_sup,test_8065_sub); }

		private static final SyntacticType test_8066_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8066_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8066() { testInvalid(test_8066_sup,test_8066_sub); }

		private static final SyntacticType test_8067_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8067_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8067() { testInvalid(test_8067_sup,test_8067_sub); }

		private static final SyntacticType test_8068_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8068_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8068() { testInvalid(test_8068_sup,test_8068_sub); }

		private static final SyntacticType test_8069_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8069_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8069() { testInvalid(test_8069_sup,test_8069_sub); }

		private static final SyntacticType test_8070_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8070_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8070() { testInvalid(test_8070_sup,test_8070_sub); }

		private static final SyntacticType test_8071_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8071_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8071() { testInvalid(test_8071_sup,test_8071_sub); }

		private static final SyntacticType test_8072_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8072_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8072() { testInvalid(test_8072_sup,test_8072_sub); }

		private static final SyntacticType test_8073_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8073_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8073() { testInvalid(test_8073_sup,test_8073_sub); }

		private static final SyntacticType test_8074_sup = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8074_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8074() { testInvalid(test_8074_sup,test_8074_sub); }

		private static final SyntacticType test_8075_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8075_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8075() { testValid(test_8075_sup,test_8075_sub); }

		private static final SyntacticType test_8076_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8076_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8076() { testValid(test_8076_sup,test_8076_sub); }

		private static final SyntacticType test_8077_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8077_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8077() { testValid(test_8077_sup,test_8077_sub); }

		private static final SyntacticType test_8078_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8078_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8078() { testValid(test_8078_sup,test_8078_sub); }

		private static final SyntacticType test_8079_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8079_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8079() { testValid(test_8079_sup,test_8079_sub); }

		private static final SyntacticType test_8080_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8080_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8080() { testValid(test_8080_sup,test_8080_sub); }

		private static final SyntacticType test_8081_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8081_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8081() { testValid(test_8081_sup,test_8081_sub); }

		private static final SyntacticType test_8082_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8082_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8082() { testValid(test_8082_sup,test_8082_sub); }

		private static final SyntacticType test_8083_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8083_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8083() { testValid(test_8083_sup,test_8083_sub); }

		private static final SyntacticType test_8084_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8084_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8084() { testValid(test_8084_sup,test_8084_sub); }

		private static final SyntacticType test_8085_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8085_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8085() { testValid(test_8085_sup,test_8085_sub); }

		private static final SyntacticType test_8086_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8086_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8086() { testValid(test_8086_sup,test_8086_sub); }

		private static final SyntacticType test_8087_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8087_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8087() { testValid(test_8087_sup,test_8087_sub); }

		private static final SyntacticType test_8088_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8088_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8088() { testValid(test_8088_sup,test_8088_sub); }

		private static final SyntacticType test_8089_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8089_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8089() { testValid(test_8089_sup,test_8089_sub); }

		private static final SyntacticType test_8090_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8090_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8090() { testValid(test_8090_sup,test_8090_sub); }

		private static final SyntacticType test_8091_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8091_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8091() { testValid(test_8091_sup,test_8091_sub); }

		private static final SyntacticType test_8092_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8092_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8092() { testValid(test_8092_sup,test_8092_sub); }

		private static final SyntacticType test_8093_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8093_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8093() { testValid(test_8093_sup,test_8093_sub); }

		private static final SyntacticType test_8094_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8094_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8094() { testValid(test_8094_sup,test_8094_sub); }

		private static final SyntacticType test_8095_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8095_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8095() { testValid(test_8095_sup,test_8095_sub); }

		private static final SyntacticType test_8096_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8096_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8096() { testValid(test_8096_sup,test_8096_sub); }

		private static final SyntacticType test_8097_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8097_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8097() { testValid(test_8097_sup,test_8097_sub); }

		private static final SyntacticType test_8098_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8098_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8098() { testValid(test_8098_sup,test_8098_sub); }

		private static final SyntacticType test_8099_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8099_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8099() { testValid(test_8099_sup,test_8099_sub); }

		private static final SyntacticType test_8100_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8100_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8100() { testValid(test_8100_sup,test_8100_sub); }

		private static final SyntacticType test_8101_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8101_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8101() { testValid(test_8101_sup,test_8101_sub); }

		private static final SyntacticType test_8102_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8102_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8102() { testValid(test_8102_sup,test_8102_sub); }

		private static final SyntacticType test_8103_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8103_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8103() { testValid(test_8103_sup,test_8103_sub); }

		private static final SyntacticType test_8104_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8104_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8104() { testValid(test_8104_sup,test_8104_sub); }

		private static final SyntacticType test_8105_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8105_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8105() { testValid(test_8105_sup,test_8105_sub); }

		private static final SyntacticType test_8106_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8106_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8106() { testValid(test_8106_sup,test_8106_sub); }

		private static final SyntacticType test_8107_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8107_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8107() { testValid(test_8107_sup,test_8107_sub); }

		private static final SyntacticType test_8108_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8108_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8108() { testValid(test_8108_sup,test_8108_sub); }

		private static final SyntacticType test_8109_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8109_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8109() { testValid(test_8109_sup,test_8109_sub); }

		private static final SyntacticType test_8110_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8110_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8110() { testValid(test_8110_sup,test_8110_sub); }

		private static final SyntacticType test_8111_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8111_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8111() { testValid(test_8111_sup,test_8111_sub); }

		private static final SyntacticType test_8112_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8112_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8112() { testValid(test_8112_sup,test_8112_sub); }

		private static final SyntacticType test_8113_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8113_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8113() { testValid(test_8113_sup,test_8113_sub); }

		private static final SyntacticType test_8114_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8114_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8114() { testValid(test_8114_sup,test_8114_sub); }

		private static final SyntacticType test_8115_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8115_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8115() { testValid(test_8115_sup,test_8115_sub); }

		private static final SyntacticType test_8116_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8116_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8116() { testValid(test_8116_sup,test_8116_sub); }

		private static final SyntacticType test_8117_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8117_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8117() { testValid(test_8117_sup,test_8117_sub); }

		private static final SyntacticType test_8118_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8118_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8118() { testValid(test_8118_sup,test_8118_sub); }

		private static final SyntacticType test_8119_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8119_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8119() { testValid(test_8119_sup,test_8119_sub); }

		private static final SyntacticType test_8120_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8120_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8120() { testValid(test_8120_sup,test_8120_sub); }

		private static final SyntacticType test_8121_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8121_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8121() { testInvalid(test_8121_sup,test_8121_sub); }

		private static final SyntacticType test_8122_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8122_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8122() { testValid(test_8122_sup,test_8122_sub); }

		private static final SyntacticType test_8123_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8123_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8123() { testValid(test_8123_sup,test_8123_sub); }

		private static final SyntacticType test_8124_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8124_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8124() { testValid(test_8124_sup,test_8124_sub); }

		private static final SyntacticType test_8125_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8125_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8125() { testInvalid(test_8125_sup,test_8125_sub); }

		private static final SyntacticType test_8126_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8126_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8126() { testValid(test_8126_sup,test_8126_sub); }

		private static final SyntacticType test_8127_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8127_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8127() { testValid(test_8127_sup,test_8127_sub); }

		private static final SyntacticType test_8128_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8128_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8128() { testValid(test_8128_sup,test_8128_sub); }

		private static final SyntacticType test_8129_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8129_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8129() { testInvalid(test_8129_sup,test_8129_sub); }

		private static final SyntacticType test_8130_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8130_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8130() { testInvalid(test_8130_sup,test_8130_sub); }

		private static final SyntacticType test_8131_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8131_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8131() { testValid(test_8131_sup,test_8131_sub); }

		private static final SyntacticType test_8132_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8132_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8132() { testInvalid(test_8132_sup,test_8132_sub); }

		private static final SyntacticType test_8133_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8133_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8133() { testInvalid(test_8133_sup,test_8133_sub); }

		private static final SyntacticType test_8134_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8134_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8134() { testValid(test_8134_sup,test_8134_sub); }

		private static final SyntacticType test_8135_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8135_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8135() { testValid(test_8135_sup,test_8135_sub); }

		private static final SyntacticType test_8136_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8136_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8136() { testInvalid(test_8136_sup,test_8136_sub); }

		private static final SyntacticType test_8137_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8137_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8137() { testValid(test_8137_sup,test_8137_sub); }

		private static final SyntacticType test_8138_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8138_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8138() { testValid(test_8138_sup,test_8138_sub); }

		private static final SyntacticType test_8139_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8139_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8139() { testValid(test_8139_sup,test_8139_sub); }

		private static final SyntacticType test_8140_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8140_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8140() { testValid(test_8140_sup,test_8140_sub); }

		private static final SyntacticType test_8141_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8141_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8141() { testValid(test_8141_sup,test_8141_sub); }

		private static final SyntacticType test_8142_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8142_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8142() { testValid(test_8142_sup,test_8142_sub); }

		private static final SyntacticType test_8143_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8143_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8143() { testValid(test_8143_sup,test_8143_sub); }

		private static final SyntacticType test_8144_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8144_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8144() { testValid(test_8144_sup,test_8144_sub); }

		private static final SyntacticType test_8145_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8145_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8145() { testValid(test_8145_sup,test_8145_sub); }

		private static final SyntacticType test_8146_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8146_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8146() { testValid(test_8146_sup,test_8146_sub); }

		private static final SyntacticType test_8147_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8147_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8147() { testValid(test_8147_sup,test_8147_sub); }

		private static final SyntacticType test_8148_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8148_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8148() { testValid(test_8148_sup,test_8148_sub); }

		private static final SyntacticType test_8149_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8149_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8149() { testValid(test_8149_sup,test_8149_sub); }

		private static final SyntacticType test_8150_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8150_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8150() { testValid(test_8150_sup,test_8150_sub); }

		private static final SyntacticType test_8151_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8151_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8151() { testValid(test_8151_sup,test_8151_sub); }

		private static final SyntacticType test_8152_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8152_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8152() { testInvalid(test_8152_sup,test_8152_sub); }

		private static final SyntacticType test_8153_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8153_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8153() { testValid(test_8153_sup,test_8153_sub); }

		private static final SyntacticType test_8154_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8154_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8154() { testValid(test_8154_sup,test_8154_sub); }

		private static final SyntacticType test_8155_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8155_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8155() { testValid(test_8155_sup,test_8155_sub); }

		private static final SyntacticType test_8156_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8156_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8156() { testValid(test_8156_sup,test_8156_sub); }

		private static final SyntacticType test_8157_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8157_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8157() { testValid(test_8157_sup,test_8157_sub); }

		private static final SyntacticType test_8158_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8158_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8158() { testValid(test_8158_sup,test_8158_sub); }

		private static final SyntacticType test_8159_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8159_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8159() { testValid(test_8159_sup,test_8159_sub); }

		private static final SyntacticType test_8160_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8160_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8160() { testValid(test_8160_sup,test_8160_sub); }

		private static final SyntacticType test_8161_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8161_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8161() { testValid(test_8161_sup,test_8161_sub); }

		private static final SyntacticType test_8162_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8162_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8162() { testValid(test_8162_sup,test_8162_sub); }

		private static final SyntacticType test_8163_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8163_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8163() { testInvalid(test_8163_sup,test_8163_sub); }

		private static final SyntacticType test_8164_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8164_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8164() { testInvalid(test_8164_sup,test_8164_sub); }

		private static final SyntacticType test_8165_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8165_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8165() { testInvalid(test_8165_sup,test_8165_sub); }

		private static final SyntacticType test_8166_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8166_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8166() { testInvalid(test_8166_sup,test_8166_sub); }

		private static final SyntacticType test_8167_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8167_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8167() { testInvalid(test_8167_sup,test_8167_sub); }

		private static final SyntacticType test_8168_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8168_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8168() { testInvalid(test_8168_sup,test_8168_sub); }

		private static final SyntacticType test_8169_sup = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		private static final SyntacticType test_8169_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8169() { testInvalid(test_8169_sup,test_8169_sub); }

		private static final SyntacticType test_8170_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8170_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8170() { testValid(test_8170_sup,test_8170_sub); }

		private static final SyntacticType test_8171_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8171_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8171() { testValid(test_8171_sup,test_8171_sub); }

		private static final SyntacticType test_8172_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8172_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8172() { testInvalid(test_8172_sup,test_8172_sub); }

		private static final SyntacticType test_8173_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8173_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8173() { testInvalid(test_8173_sup,test_8173_sub); }

		private static final SyntacticType test_8174_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8174_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8174() { testInvalid(test_8174_sup,test_8174_sub); }

		private static final SyntacticType test_8175_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8175_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8175() { testInvalid(test_8175_sup,test_8175_sub); }

		private static final SyntacticType test_8176_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8176_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8176() { testInvalid(test_8176_sup,test_8176_sub); }

		private static final SyntacticType test_8177_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8177_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8177() { testInvalid(test_8177_sup,test_8177_sub); }

		private static final SyntacticType test_8178_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8178_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8178() { testInvalid(test_8178_sup,test_8178_sub); }

		private static final SyntacticType test_8179_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8179_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8179() { testInvalid(test_8179_sup,test_8179_sub); }

		private static final SyntacticType test_8180_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8180_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8180() { testInvalid(test_8180_sup,test_8180_sub); }

		private static final SyntacticType test_8181_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8181_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8181() { testInvalid(test_8181_sup,test_8181_sub); }

		private static final SyntacticType test_8182_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8182_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8182() { testInvalid(test_8182_sup,test_8182_sub); }

		private static final SyntacticType test_8183_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8183_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8183() { testInvalid(test_8183_sup,test_8183_sub); }

		private static final SyntacticType test_8184_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8184_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8184() { testInvalid(test_8184_sup,test_8184_sub); }

		private static final SyntacticType test_8185_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8185_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8185() { testInvalid(test_8185_sup,test_8185_sub); }

		private static final SyntacticType test_8186_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8186_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8186() { testInvalid(test_8186_sup,test_8186_sub); }

		private static final SyntacticType test_8187_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8187_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8187() { testInvalid(test_8187_sup,test_8187_sub); }

		private static final SyntacticType test_8188_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8188_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8188() { testInvalid(test_8188_sup,test_8188_sub); }

		private static final SyntacticType test_8189_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8189_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8189() { testInvalid(test_8189_sup,test_8189_sub); }

		private static final SyntacticType test_8190_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8190_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8190() { testInvalid(test_8190_sup,test_8190_sub); }

		private static final SyntacticType test_8191_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8191_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8191() { testInvalid(test_8191_sup,test_8191_sub); }

		private static final SyntacticType test_8192_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8192_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8192() { testValid(test_8192_sup,test_8192_sub); }

		private static final SyntacticType test_8193_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8193_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8193() { testValid(test_8193_sup,test_8193_sub); }

		private static final SyntacticType test_8194_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8194_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8194() { testInvalid(test_8194_sup,test_8194_sub); }

		private static final SyntacticType test_8195_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8195_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8195() { testInvalid(test_8195_sup,test_8195_sub); }

		private static final SyntacticType test_8196_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8196_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8196() { testInvalid(test_8196_sup,test_8196_sub); }

		private static final SyntacticType test_8197_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8197_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8197() { testInvalid(test_8197_sup,test_8197_sub); }

		private static final SyntacticType test_8198_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8198_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8198() { testInvalid(test_8198_sup,test_8198_sub); }

		private static final SyntacticType test_8199_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8199_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8199() { testInvalid(test_8199_sup,test_8199_sub); }

		private static final SyntacticType test_8200_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8200_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8200() { testInvalid(test_8200_sup,test_8200_sub); }

		private static final SyntacticType test_8201_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8201_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8201() { testInvalid(test_8201_sup,test_8201_sub); }

		private static final SyntacticType test_8202_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8202_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8202() { testInvalid(test_8202_sup,test_8202_sub); }

		private static final SyntacticType test_8203_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8203_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8203() { testInvalid(test_8203_sup,test_8203_sub); }

		private static final SyntacticType test_8204_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8204_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8204() { testInvalid(test_8204_sup,test_8204_sub); }

		private static final SyntacticType test_8205_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8205_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8205() { testInvalid(test_8205_sup,test_8205_sub); }

		private static final SyntacticType test_8206_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8206_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8206() { testInvalid(test_8206_sup,test_8206_sub); }

		private static final SyntacticType test_8207_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8207_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8207() { testValid(test_8207_sup,test_8207_sub); }

		private static final SyntacticType test_8208_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8208_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8208() { testValid(test_8208_sup,test_8208_sub); }

		private static final SyntacticType test_8209_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8209_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8209() { testInvalid(test_8209_sup,test_8209_sub); }

		private static final SyntacticType test_8210_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8210_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8210() { testInvalid(test_8210_sup,test_8210_sub); }

		private static final SyntacticType test_8211_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8211_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8211() { testValid(test_8211_sup,test_8211_sub); }

		private static final SyntacticType test_8212_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8212_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8212() { testInvalid(test_8212_sup,test_8212_sub); }

		private static final SyntacticType test_8213_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8213_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8213() { testInvalid(test_8213_sup,test_8213_sub); }

		private static final SyntacticType test_8214_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8214_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8214() { testInvalid(test_8214_sup,test_8214_sub); }

		private static final SyntacticType test_8215_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8215_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8215() { testInvalid(test_8215_sup,test_8215_sub); }

		private static final SyntacticType test_8216_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8216_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8216() { testInvalid(test_8216_sup,test_8216_sub); }

		private static final SyntacticType test_8217_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8217_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8217() { testInvalid(test_8217_sup,test_8217_sub); }

		private static final SyntacticType test_8218_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8218_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8218() { testInvalid(test_8218_sup,test_8218_sub); }

		private static final SyntacticType test_8219_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8219_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8219() { testInvalid(test_8219_sup,test_8219_sub); }

		private static final SyntacticType test_8220_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8220_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8220() { testInvalid(test_8220_sup,test_8220_sub); }

		private static final SyntacticType test_8221_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8221_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8221() { testInvalid(test_8221_sup,test_8221_sub); }

		private static final SyntacticType test_8222_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8222_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8222() { testInvalid(test_8222_sup,test_8222_sub); }

		private static final SyntacticType test_8223_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8223_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8223() { testInvalid(test_8223_sup,test_8223_sub); }

		private static final SyntacticType test_8224_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8224_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8224() { testInvalid(test_8224_sup,test_8224_sub); }

		private static final SyntacticType test_8225_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8225_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8225() { testInvalid(test_8225_sup,test_8225_sub); }

		private static final SyntacticType test_8226_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8226_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8226() { testValid(test_8226_sup,test_8226_sub); }

		private static final SyntacticType test_8227_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8227_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8227() { testInvalid(test_8227_sup,test_8227_sub); }

		private static final SyntacticType test_8228_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8228_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8228() { testInvalid(test_8228_sup,test_8228_sub); }

		private static final SyntacticType test_8229_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8229_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8229() { testInvalid(test_8229_sup,test_8229_sub); }

		private static final SyntacticType test_8230_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8230_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8230() { testInvalid(test_8230_sup,test_8230_sub); }

		private static final SyntacticType test_8231_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8231_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8231() { testInvalid(test_8231_sup,test_8231_sub); }

		private static final SyntacticType test_8232_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8232_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8232() { testInvalid(test_8232_sup,test_8232_sub); }

		private static final SyntacticType test_8233_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8233_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8233() { testInvalid(test_8233_sup,test_8233_sub); }

		private static final SyntacticType test_8234_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8234_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8234() { testInvalid(test_8234_sup,test_8234_sub); }

		private static final SyntacticType test_8235_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8235_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8235() { testInvalid(test_8235_sup,test_8235_sub); }

		private static final SyntacticType test_8236_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8236_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8236() { testInvalid(test_8236_sup,test_8236_sub); }

		private static final SyntacticType test_8237_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8237_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8237() { testInvalid(test_8237_sup,test_8237_sub); }

		private static final SyntacticType test_8238_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8238_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8238() { testInvalid(test_8238_sup,test_8238_sub); }

		private static final SyntacticType test_8239_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8239_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8239() { testInvalid(test_8239_sup,test_8239_sub); }

		private static final SyntacticType test_8240_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8240_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8240() { testInvalid(test_8240_sup,test_8240_sub); }

		private static final SyntacticType test_8241_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8241_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8241() { testInvalid(test_8241_sup,test_8241_sub); }

		private static final SyntacticType test_8242_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8242_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8242() { testInvalid(test_8242_sup,test_8242_sub); }

		private static final SyntacticType test_8243_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8243_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8243() { testInvalid(test_8243_sup,test_8243_sub); }

		private static final SyntacticType test_8244_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8244_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8244() { testInvalid(test_8244_sup,test_8244_sub); }

		private static final SyntacticType test_8245_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8245_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8245() { testInvalid(test_8245_sup,test_8245_sub); }

		private static final SyntacticType test_8246_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8246_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8246() { testInvalid(test_8246_sup,test_8246_sub); }

		private static final SyntacticType test_8247_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8247_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8247() { testInvalid(test_8247_sup,test_8247_sub); }

		private static final SyntacticType test_8248_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8248_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8248() { testInvalid(test_8248_sup,test_8248_sub); }

		private static final SyntacticType test_8249_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8249_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8249() { testInvalid(test_8249_sup,test_8249_sub); }

		private static final SyntacticType test_8250_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8250_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8250() { testInvalid(test_8250_sup,test_8250_sub); }

		private static final SyntacticType test_8251_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8251_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8251() { testInvalid(test_8251_sup,test_8251_sub); }

		private static final SyntacticType test_8252_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8252_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8252() { testInvalid(test_8252_sup,test_8252_sub); }

		private static final SyntacticType test_8253_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8253_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8253() { testValid(test_8253_sup,test_8253_sub); }

		private static final SyntacticType test_8254_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8254_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8254() { testInvalid(test_8254_sup,test_8254_sub); }

		private static final SyntacticType test_8255_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8255_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8255() { testInvalid(test_8255_sup,test_8255_sub); }

		private static final SyntacticType test_8256_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8256_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8256() { testValid(test_8256_sup,test_8256_sub); }

		private static final SyntacticType test_8257_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8257_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8257() { testInvalid(test_8257_sup,test_8257_sub); }

		private static final SyntacticType test_8258_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8258_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8258() { testInvalid(test_8258_sup,test_8258_sub); }

		private static final SyntacticType test_8259_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8259_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8259() { testInvalid(test_8259_sup,test_8259_sub); }

		private static final SyntacticType test_8260_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8260_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8260() { testInvalid(test_8260_sup,test_8260_sub); }

		private static final SyntacticType test_8261_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8261_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8261() { testInvalid(test_8261_sup,test_8261_sub); }

		private static final SyntacticType test_8262_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8262_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8262() { testInvalid(test_8262_sup,test_8262_sub); }

		private static final SyntacticType test_8263_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8263_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8263() { testInvalid(test_8263_sup,test_8263_sub); }

		private static final SyntacticType test_8264_sup = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		private static final SyntacticType test_8264_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8264() { testInvalid(test_8264_sup,test_8264_sub); }

		private static final SyntacticType test_8265_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8265_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8265() { testInvalid(test_8265_sup,test_8265_sub); }

		private static final SyntacticType test_8266_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8266_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8266() { testInvalid(test_8266_sup,test_8266_sub); }

		private static final SyntacticType test_8267_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8267_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8267() { testInvalid(test_8267_sup,test_8267_sub); }

		private static final SyntacticType test_8268_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8268_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8268() { testValid(test_8268_sup,test_8268_sub); }

		private static final SyntacticType test_8269_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8269_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8269() { testValid(test_8269_sup,test_8269_sub); }

		private static final SyntacticType test_8270_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8270_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8270() { testInvalid(test_8270_sup,test_8270_sub); }

		private static final SyntacticType test_8271_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8271_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8271() { testInvalid(test_8271_sup,test_8271_sub); }

		private static final SyntacticType test_8272_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8272_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8272() { testValid(test_8272_sup,test_8272_sub); }

		private static final SyntacticType test_8273_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8273_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8273() { testInvalid(test_8273_sup,test_8273_sub); }

		private static final SyntacticType test_8274_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8274_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8274() { testInvalid(test_8274_sup,test_8274_sub); }

		private static final SyntacticType test_8275_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8275_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8275() { testInvalid(test_8275_sup,test_8275_sub); }

		private static final SyntacticType test_8276_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8276_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8276() { testInvalid(test_8276_sup,test_8276_sub); }

		private static final SyntacticType test_8277_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8277_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8277() { testInvalid(test_8277_sup,test_8277_sub); }

		private static final SyntacticType test_8278_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8278_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8278() { testInvalid(test_8278_sup,test_8278_sub); }

		private static final SyntacticType test_8279_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8279_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8279() { testInvalid(test_8279_sup,test_8279_sub); }

		private static final SyntacticType test_8280_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8280_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8280() { testInvalid(test_8280_sup,test_8280_sub); }

		private static final SyntacticType test_8281_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8281_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8281() { testInvalid(test_8281_sup,test_8281_sub); }

		private static final SyntacticType test_8282_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8282_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8282() { testInvalid(test_8282_sup,test_8282_sub); }

		private static final SyntacticType test_8283_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8283_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8283() { testValid(test_8283_sup,test_8283_sub); }

		private static final SyntacticType test_8284_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8284_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8284() { testInvalid(test_8284_sup,test_8284_sub); }

		private static final SyntacticType test_8285_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8285_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8285() { testInvalid(test_8285_sup,test_8285_sub); }

		private static final SyntacticType test_8286_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8286_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8286() { testInvalid(test_8286_sup,test_8286_sub); }

		private static final SyntacticType test_8287_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8287_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8287() { testInvalid(test_8287_sup,test_8287_sub); }

		private static final SyntacticType test_8288_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8288_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8288() { testInvalid(test_8288_sup,test_8288_sub); }

		private static final SyntacticType test_8289_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8289_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8289() { testInvalid(test_8289_sup,test_8289_sub); }

		private static final SyntacticType test_8290_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8290_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8290() { testInvalid(test_8290_sup,test_8290_sub); }

		private static final SyntacticType test_8291_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8291_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8291() { testInvalid(test_8291_sup,test_8291_sub); }

		private static final SyntacticType test_8292_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8292_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8292() { testInvalid(test_8292_sup,test_8292_sub); }

		private static final SyntacticType test_8293_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8293_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8293() { testInvalid(test_8293_sup,test_8293_sub); }

		private static final SyntacticType test_8294_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8294_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8294() { testInvalid(test_8294_sup,test_8294_sub); }

		private static final SyntacticType test_8295_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8295_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8295() { testInvalid(test_8295_sup,test_8295_sub); }

		private static final SyntacticType test_8296_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8296_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8296() { testInvalid(test_8296_sup,test_8296_sub); }

		private static final SyntacticType test_8297_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8297_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8297() { testInvalid(test_8297_sup,test_8297_sub); }

		private static final SyntacticType test_8298_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8298_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8298() { testInvalid(test_8298_sup,test_8298_sub); }

		private static final SyntacticType test_8299_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8299_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8299() { testInvalid(test_8299_sup,test_8299_sub); }

		private static final SyntacticType test_8300_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8300_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8300() { testInvalid(test_8300_sup,test_8300_sub); }

		private static final SyntacticType test_8301_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8301_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8301() { testInvalid(test_8301_sup,test_8301_sub); }

		private static final SyntacticType test_8302_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8302_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8302() { testInvalid(test_8302_sup,test_8302_sub); }

		private static final SyntacticType test_8303_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8303_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8303() { testInvalid(test_8303_sup,test_8303_sub); }

		private static final SyntacticType test_8304_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8304_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8304() { testInvalid(test_8304_sup,test_8304_sub); }

		private static final SyntacticType test_8305_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8305_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8305() { testInvalid(test_8305_sup,test_8305_sub); }

		private static final SyntacticType test_8306_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8306_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8306() { testInvalid(test_8306_sup,test_8306_sub); }

		private static final SyntacticType test_8307_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8307_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8307() { testInvalid(test_8307_sup,test_8307_sub); }

		private static final SyntacticType test_8308_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8308_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8308() { testInvalid(test_8308_sup,test_8308_sub); }

		private static final SyntacticType test_8309_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8309_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8309() { testInvalid(test_8309_sup,test_8309_sub); }

		private static final SyntacticType test_8310_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8310_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8310() { testInvalid(test_8310_sup,test_8310_sub); }

		private static final SyntacticType test_8311_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8311_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8311() { testInvalid(test_8311_sup,test_8311_sub); }

		private static final SyntacticType test_8312_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8312_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8312() { testInvalid(test_8312_sup,test_8312_sub); }

		private static final SyntacticType test_8313_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8313_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8313() { testInvalid(test_8313_sup,test_8313_sub); }

		private static final SyntacticType test_8314_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8314_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8314() { testInvalid(test_8314_sup,test_8314_sub); }

		private static final SyntacticType test_8315_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8315_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8315() { testInvalid(test_8315_sup,test_8315_sub); }

		private static final SyntacticType test_8316_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8316_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8316() { testInvalid(test_8316_sup,test_8316_sub); }

		private static final SyntacticType test_8317_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8317_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8317() { testInvalid(test_8317_sup,test_8317_sub); }

		private static final SyntacticType test_8318_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8318_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8318() { testInvalid(test_8318_sup,test_8318_sub); }

		private static final SyntacticType test_8319_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8319_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8319() { testInvalid(test_8319_sup,test_8319_sub); }

		private static final SyntacticType test_8320_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8320_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8320() { testInvalid(test_8320_sup,test_8320_sub); }

		private static final SyntacticType test_8321_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8321_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8321() { testInvalid(test_8321_sup,test_8321_sub); }

		private static final SyntacticType test_8322_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8322_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8322() { testInvalid(test_8322_sup,test_8322_sub); }

		private static final SyntacticType test_8323_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8323_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8323() { testInvalid(test_8323_sup,test_8323_sub); }

		private static final SyntacticType test_8324_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8324_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8324() { testInvalid(test_8324_sup,test_8324_sub); }

		private static final SyntacticType test_8325_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8325_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8325() { testInvalid(test_8325_sup,test_8325_sub); }

		private static final SyntacticType test_8326_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8326_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8326() { testInvalid(test_8326_sup,test_8326_sub); }

		private static final SyntacticType test_8327_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8327_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8327() { testInvalid(test_8327_sup,test_8327_sub); }

		private static final SyntacticType test_8328_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8328_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8328() { testInvalid(test_8328_sup,test_8328_sub); }

		private static final SyntacticType test_8329_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8329_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8329() { testInvalid(test_8329_sup,test_8329_sub); }

		private static final SyntacticType test_8330_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8330_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8330() { testInvalid(test_8330_sup,test_8330_sub); }

		private static final SyntacticType test_8331_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8331_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8331() { testInvalid(test_8331_sup,test_8331_sub); }

		private static final SyntacticType test_8332_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8332_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8332() { testInvalid(test_8332_sup,test_8332_sub); }

		private static final SyntacticType test_8333_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8333_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8333() { testInvalid(test_8333_sup,test_8333_sub); }

		private static final SyntacticType test_8334_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8334_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8334() { testInvalid(test_8334_sup,test_8334_sub); }

		private static final SyntacticType test_8335_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8335_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8335() { testInvalid(test_8335_sup,test_8335_sub); }

		private static final SyntacticType test_8336_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8336_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8336() { testInvalid(test_8336_sup,test_8336_sub); }

		private static final SyntacticType test_8337_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8337_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8337() { testInvalid(test_8337_sup,test_8337_sub); }

		private static final SyntacticType test_8338_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8338_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8338() { testInvalid(test_8338_sup,test_8338_sub); }

		private static final SyntacticType test_8339_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8339_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8339() { testInvalid(test_8339_sup,test_8339_sub); }

		private static final SyntacticType test_8340_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8340_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8340() { testInvalid(test_8340_sup,test_8340_sub); }

		private static final SyntacticType test_8341_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8341_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8341() { testInvalid(test_8341_sup,test_8341_sub); }

		private static final SyntacticType test_8342_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8342_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8342() { testInvalid(test_8342_sup,test_8342_sub); }

		private static final SyntacticType test_8343_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8343_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8343() { testInvalid(test_8343_sup,test_8343_sub); }

		private static final SyntacticType test_8344_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8344_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8344() { testInvalid(test_8344_sup,test_8344_sub); }

		private static final SyntacticType test_8345_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8345_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8345() { testInvalid(test_8345_sup,test_8345_sub); }

		private static final SyntacticType test_8346_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8346_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8346() { testInvalid(test_8346_sup,test_8346_sub); }

		private static final SyntacticType test_8347_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8347_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8347() { testInvalid(test_8347_sup,test_8347_sub); }

		private static final SyntacticType test_8348_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8348_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8348() { testValid(test_8348_sup,test_8348_sub); }

		private static final SyntacticType test_8349_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8349_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8349() { testInvalid(test_8349_sup,test_8349_sub); }

		private static final SyntacticType test_8350_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8350_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8350() { testInvalid(test_8350_sup,test_8350_sub); }

		private static final SyntacticType test_8351_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8351_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8351() { testInvalid(test_8351_sup,test_8351_sub); }

		private static final SyntacticType test_8352_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8352_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8352() { testValid(test_8352_sup,test_8352_sub); }

		private static final SyntacticType test_8353_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8353_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8353() { testInvalid(test_8353_sup,test_8353_sub); }

		private static final SyntacticType test_8354_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8354_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8354() { testInvalid(test_8354_sup,test_8354_sub); }

		private static final SyntacticType test_8355_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8355_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8355() { testInvalid(test_8355_sup,test_8355_sub); }

		private static final SyntacticType test_8356_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8356_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8356() { testInvalid(test_8356_sup,test_8356_sub); }

		private static final SyntacticType test_8357_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8357_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8357() { testInvalid(test_8357_sup,test_8357_sub); }

		private static final SyntacticType test_8358_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8358_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8358() { testInvalid(test_8358_sup,test_8358_sub); }

		private static final SyntacticType test_8359_sup = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		private static final SyntacticType test_8359_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8359() { testInvalid(test_8359_sup,test_8359_sub); }

		private static final SyntacticType test_8360_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8360_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8360() { testValid(test_8360_sup,test_8360_sub); }

		private static final SyntacticType test_8361_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8361_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8361() { testValid(test_8361_sup,test_8361_sub); }

		private static final SyntacticType test_8362_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8362_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8362() { testValid(test_8362_sup,test_8362_sub); }

		private static final SyntacticType test_8363_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8363_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8363() { testValid(test_8363_sup,test_8363_sub); }

		private static final SyntacticType test_8364_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8364_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8364() { testValid(test_8364_sup,test_8364_sub); }

		private static final SyntacticType test_8365_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8365_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8365() { testValid(test_8365_sup,test_8365_sub); }

		private static final SyntacticType test_8366_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8366_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8366() { testValid(test_8366_sup,test_8366_sub); }

		private static final SyntacticType test_8367_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8367_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8367() { testValid(test_8367_sup,test_8367_sub); }

		private static final SyntacticType test_8368_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8368_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8368() { testValid(test_8368_sup,test_8368_sub); }

		private static final SyntacticType test_8369_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8369_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8369() { testValid(test_8369_sup,test_8369_sub); }

		private static final SyntacticType test_8370_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8370_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8370() { testValid(test_8370_sup,test_8370_sub); }

		private static final SyntacticType test_8371_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8371_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8371() { testValid(test_8371_sup,test_8371_sub); }

		private static final SyntacticType test_8372_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8372_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8372() { testValid(test_8372_sup,test_8372_sub); }

		private static final SyntacticType test_8373_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8373_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8373() { testValid(test_8373_sup,test_8373_sub); }

		private static final SyntacticType test_8374_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8374_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8374() { testValid(test_8374_sup,test_8374_sub); }

		private static final SyntacticType test_8375_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8375_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8375() { testValid(test_8375_sup,test_8375_sub); }

		private static final SyntacticType test_8376_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8376_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8376() { testValid(test_8376_sup,test_8376_sub); }

		private static final SyntacticType test_8377_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8377_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8377() { testValid(test_8377_sup,test_8377_sub); }

		private static final SyntacticType test_8378_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8378_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8378() { testValid(test_8378_sup,test_8378_sub); }

		private static final SyntacticType test_8379_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8379_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8379() { testValid(test_8379_sup,test_8379_sub); }

		private static final SyntacticType test_8380_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8380_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8380() { testValid(test_8380_sup,test_8380_sub); }

		private static final SyntacticType test_8381_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8381_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8381() { testValid(test_8381_sup,test_8381_sub); }

		private static final SyntacticType test_8382_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8382_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8382() { testValid(test_8382_sup,test_8382_sub); }

		private static final SyntacticType test_8383_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8383_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8383() { testValid(test_8383_sup,test_8383_sub); }

		private static final SyntacticType test_8384_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8384_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8384() { testValid(test_8384_sup,test_8384_sub); }

		private static final SyntacticType test_8385_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8385_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8385() { testValid(test_8385_sup,test_8385_sub); }

		private static final SyntacticType test_8386_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8386_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8386() { testValid(test_8386_sup,test_8386_sub); }

		private static final SyntacticType test_8387_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8387_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8387() { testValid(test_8387_sup,test_8387_sub); }

		private static final SyntacticType test_8388_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8388_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8388() { testValid(test_8388_sup,test_8388_sub); }

		private static final SyntacticType test_8389_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8389_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8389() { testValid(test_8389_sup,test_8389_sub); }

		private static final SyntacticType test_8390_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8390_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8390() { testValid(test_8390_sup,test_8390_sub); }

		private static final SyntacticType test_8391_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8391_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8391() { testValid(test_8391_sup,test_8391_sub); }

		private static final SyntacticType test_8392_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8392_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8392() { testValid(test_8392_sup,test_8392_sub); }

		private static final SyntacticType test_8393_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8393_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8393() { testValid(test_8393_sup,test_8393_sub); }

		private static final SyntacticType test_8394_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8394_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8394() { testValid(test_8394_sup,test_8394_sub); }

		private static final SyntacticType test_8395_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8395_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8395() { testValid(test_8395_sup,test_8395_sub); }

		private static final SyntacticType test_8396_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8396_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8396() { testValid(test_8396_sup,test_8396_sub); }

		private static final SyntacticType test_8397_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8397_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8397() { testValid(test_8397_sup,test_8397_sub); }

		private static final SyntacticType test_8398_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8398_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8398() { testValid(test_8398_sup,test_8398_sub); }

		private static final SyntacticType test_8399_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8399_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8399() { testValid(test_8399_sup,test_8399_sub); }

		private static final SyntacticType test_8400_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8400_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8400() { testValid(test_8400_sup,test_8400_sub); }

		private static final SyntacticType test_8401_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8401_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8401() { testValid(test_8401_sup,test_8401_sub); }

		private static final SyntacticType test_8402_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8402_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8402() { testValid(test_8402_sup,test_8402_sub); }

		private static final SyntacticType test_8403_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8403_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8403() { testValid(test_8403_sup,test_8403_sub); }

		private static final SyntacticType test_8404_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8404_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8404() { testValid(test_8404_sup,test_8404_sub); }

		private static final SyntacticType test_8405_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8405_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8405() { testValid(test_8405_sup,test_8405_sub); }

		private static final SyntacticType test_8406_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8406_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8406() { testValid(test_8406_sup,test_8406_sub); }

		private static final SyntacticType test_8407_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8407_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8407() { testValid(test_8407_sup,test_8407_sub); }

		private static final SyntacticType test_8408_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8408_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8408() { testValid(test_8408_sup,test_8408_sub); }

		private static final SyntacticType test_8409_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8409_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8409() { testValid(test_8409_sup,test_8409_sub); }

		private static final SyntacticType test_8410_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8410_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8410() { testValid(test_8410_sup,test_8410_sub); }

		private static final SyntacticType test_8411_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8411_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8411() { testValid(test_8411_sup,test_8411_sub); }

		private static final SyntacticType test_8412_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8412_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8412() { testValid(test_8412_sup,test_8412_sub); }

		private static final SyntacticType test_8413_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8413_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8413() { testValid(test_8413_sup,test_8413_sub); }

		private static final SyntacticType test_8414_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8414_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8414() { testValid(test_8414_sup,test_8414_sub); }

		private static final SyntacticType test_8415_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8415_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8415() { testValid(test_8415_sup,test_8415_sub); }

		private static final SyntacticType test_8416_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8416_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8416() { testValid(test_8416_sup,test_8416_sub); }

		private static final SyntacticType test_8417_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8417_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8417() { testValid(test_8417_sup,test_8417_sub); }

		private static final SyntacticType test_8418_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8418_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8418() { testValid(test_8418_sup,test_8418_sub); }

		private static final SyntacticType test_8419_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8419_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8419() { testValid(test_8419_sup,test_8419_sub); }

		private static final SyntacticType test_8420_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8420_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8420() { testValid(test_8420_sup,test_8420_sub); }

		private static final SyntacticType test_8421_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8421_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8421() { testValid(test_8421_sup,test_8421_sub); }

		private static final SyntacticType test_8422_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8422_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8422() { testValid(test_8422_sup,test_8422_sub); }

		private static final SyntacticType test_8423_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8423_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8423() { testValid(test_8423_sup,test_8423_sub); }

		private static final SyntacticType test_8424_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8424_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8424() { testValid(test_8424_sup,test_8424_sub); }

		private static final SyntacticType test_8425_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8425_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8425() { testValid(test_8425_sup,test_8425_sub); }

		private static final SyntacticType test_8426_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8426_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8426() { testValid(test_8426_sup,test_8426_sub); }

		private static final SyntacticType test_8427_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8427_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8427() { testValid(test_8427_sup,test_8427_sub); }

		private static final SyntacticType test_8428_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8428_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8428() { testValid(test_8428_sup,test_8428_sub); }

		private static final SyntacticType test_8429_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8429_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8429() { testValid(test_8429_sup,test_8429_sub); }

		private static final SyntacticType test_8430_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8430_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8430() { testValid(test_8430_sup,test_8430_sub); }

		private static final SyntacticType test_8431_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8431_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8431() { testValid(test_8431_sup,test_8431_sub); }

		private static final SyntacticType test_8432_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8432_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8432() { testValid(test_8432_sup,test_8432_sub); }

		private static final SyntacticType test_8433_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8433_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8433() { testValid(test_8433_sup,test_8433_sub); }

		private static final SyntacticType test_8434_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8434_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8434() { testValid(test_8434_sup,test_8434_sub); }

		private static final SyntacticType test_8435_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8435_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8435() { testValid(test_8435_sup,test_8435_sub); }

		private static final SyntacticType test_8436_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8436_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8436() { testValid(test_8436_sup,test_8436_sub); }

		private static final SyntacticType test_8437_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8437_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8437() { testValid(test_8437_sup,test_8437_sub); }

		private static final SyntacticType test_8438_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8438_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8438() { testValid(test_8438_sup,test_8438_sub); }

		private static final SyntacticType test_8439_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8439_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8439() { testValid(test_8439_sup,test_8439_sub); }

		private static final SyntacticType test_8440_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8440_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8440() { testValid(test_8440_sup,test_8440_sub); }

		private static final SyntacticType test_8441_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8441_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8441() { testValid(test_8441_sup,test_8441_sub); }

		private static final SyntacticType test_8442_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8442_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8442() { testValid(test_8442_sup,test_8442_sub); }

		private static final SyntacticType test_8443_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8443_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8443() { testValid(test_8443_sup,test_8443_sub); }

		private static final SyntacticType test_8444_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8444_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8444() { testValid(test_8444_sup,test_8444_sub); }

		private static final SyntacticType test_8445_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8445_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8445() { testValid(test_8445_sup,test_8445_sub); }

		private static final SyntacticType test_8446_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8446_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8446() { testValid(test_8446_sup,test_8446_sub); }

		private static final SyntacticType test_8447_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8447_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8447() { testValid(test_8447_sup,test_8447_sub); }

		private static final SyntacticType test_8448_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8448_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8448() { testValid(test_8448_sup,test_8448_sub); }

		private static final SyntacticType test_8449_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8449_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8449() { testValid(test_8449_sup,test_8449_sub); }

		private static final SyntacticType test_8450_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8450_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8450() { testValid(test_8450_sup,test_8450_sub); }

		private static final SyntacticType test_8451_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8451_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8451() { testValid(test_8451_sup,test_8451_sub); }

		private static final SyntacticType test_8452_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8452_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8452() { testValid(test_8452_sup,test_8452_sub); }

		private static final SyntacticType test_8453_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8453_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8453() { testValid(test_8453_sup,test_8453_sub); }

		private static final SyntacticType test_8454_sup = parse("((any & (any | int)) | {(any | int), (any & int)})");
		private static final SyntacticType test_8454_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8454() { testValid(test_8454_sup,test_8454_sub); }

		private static final SyntacticType test_8455_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8455_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8455() { testValid(test_8455_sup,test_8455_sub); }

		private static final SyntacticType test_8456_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8456_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8456() { testValid(test_8456_sup,test_8456_sub); }

		private static final SyntacticType test_8457_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8457_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8457() { testValid(test_8457_sup,test_8457_sub); }

		private static final SyntacticType test_8458_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8458_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8458() { testValid(test_8458_sup,test_8458_sub); }

		private static final SyntacticType test_8459_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8459_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8459() { testValid(test_8459_sup,test_8459_sub); }

		private static final SyntacticType test_8460_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8460_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8460() { testValid(test_8460_sup,test_8460_sub); }

		private static final SyntacticType test_8461_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8461_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8461() { testValid(test_8461_sup,test_8461_sub); }

		private static final SyntacticType test_8462_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8462_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8462() { testValid(test_8462_sup,test_8462_sub); }

		private static final SyntacticType test_8463_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8463_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8463() { testValid(test_8463_sup,test_8463_sub); }

		private static final SyntacticType test_8464_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8464_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8464() { testValid(test_8464_sup,test_8464_sub); }

		private static final SyntacticType test_8465_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8465_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8465() { testValid(test_8465_sup,test_8465_sub); }

		private static final SyntacticType test_8466_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8466_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8466() { testValid(test_8466_sup,test_8466_sub); }

		private static final SyntacticType test_8467_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8467_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8467() { testValid(test_8467_sup,test_8467_sub); }

		private static final SyntacticType test_8468_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8468_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8468() { testValid(test_8468_sup,test_8468_sub); }

		private static final SyntacticType test_8469_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8469_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8469() { testValid(test_8469_sup,test_8469_sub); }

		private static final SyntacticType test_8470_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8470_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8470() { testValid(test_8470_sup,test_8470_sub); }

		private static final SyntacticType test_8471_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8471_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8471() { testValid(test_8471_sup,test_8471_sub); }

		private static final SyntacticType test_8472_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8472_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8472() { testValid(test_8472_sup,test_8472_sub); }

		private static final SyntacticType test_8473_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8473_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8473() { testValid(test_8473_sup,test_8473_sub); }

		private static final SyntacticType test_8474_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8474_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8474() { testValid(test_8474_sup,test_8474_sub); }

		private static final SyntacticType test_8475_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8475_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8475() { testValid(test_8475_sup,test_8475_sub); }

		private static final SyntacticType test_8476_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8476_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8476() { testValid(test_8476_sup,test_8476_sub); }

		private static final SyntacticType test_8477_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8477_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8477() { testValid(test_8477_sup,test_8477_sub); }

		private static final SyntacticType test_8478_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8478_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8478() { testValid(test_8478_sup,test_8478_sub); }

		private static final SyntacticType test_8479_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8479_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8479() { testValid(test_8479_sup,test_8479_sub); }

		private static final SyntacticType test_8480_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8480_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8480() { testValid(test_8480_sup,test_8480_sub); }

		private static final SyntacticType test_8481_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8481_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8481() { testValid(test_8481_sup,test_8481_sub); }

		private static final SyntacticType test_8482_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8482_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8482() { testValid(test_8482_sup,test_8482_sub); }

		private static final SyntacticType test_8483_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8483_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8483() { testValid(test_8483_sup,test_8483_sub); }

		private static final SyntacticType test_8484_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8484_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8484() { testValid(test_8484_sup,test_8484_sub); }

		private static final SyntacticType test_8485_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8485_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8485() { testValid(test_8485_sup,test_8485_sub); }

		private static final SyntacticType test_8486_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8486_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8486() { testValid(test_8486_sup,test_8486_sub); }

		private static final SyntacticType test_8487_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8487_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8487() { testValid(test_8487_sup,test_8487_sub); }

		private static final SyntacticType test_8488_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8488_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8488() { testValid(test_8488_sup,test_8488_sub); }

		private static final SyntacticType test_8489_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8489_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8489() { testValid(test_8489_sup,test_8489_sub); }

		private static final SyntacticType test_8490_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8490_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8490() { testValid(test_8490_sup,test_8490_sub); }

		private static final SyntacticType test_8491_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8491_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8491() { testValid(test_8491_sup,test_8491_sub); }

		private static final SyntacticType test_8492_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8492_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8492() { testValid(test_8492_sup,test_8492_sub); }

		private static final SyntacticType test_8493_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8493_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8493() { testValid(test_8493_sup,test_8493_sub); }

		private static final SyntacticType test_8494_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8494_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8494() { testValid(test_8494_sup,test_8494_sub); }

		private static final SyntacticType test_8495_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8495_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8495() { testValid(test_8495_sup,test_8495_sub); }

		private static final SyntacticType test_8496_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8496_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8496() { testValid(test_8496_sup,test_8496_sub); }

		private static final SyntacticType test_8497_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8497_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8497() { testValid(test_8497_sup,test_8497_sub); }

		private static final SyntacticType test_8498_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8498_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8498() { testValid(test_8498_sup,test_8498_sub); }

		private static final SyntacticType test_8499_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8499_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8499() { testValid(test_8499_sup,test_8499_sub); }

		private static final SyntacticType test_8500_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8500_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8500() { testValid(test_8500_sup,test_8500_sub); }

		private static final SyntacticType test_8501_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8501_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8501() { testValid(test_8501_sup,test_8501_sub); }

		private static final SyntacticType test_8502_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8502_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8502() { testValid(test_8502_sup,test_8502_sub); }

		private static final SyntacticType test_8503_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8503_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8503() { testValid(test_8503_sup,test_8503_sub); }

		private static final SyntacticType test_8504_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8504_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8504() { testValid(test_8504_sup,test_8504_sub); }

		private static final SyntacticType test_8505_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8505_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8505() { testValid(test_8505_sup,test_8505_sub); }

		private static final SyntacticType test_8506_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8506_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8506() { testValid(test_8506_sup,test_8506_sub); }

		private static final SyntacticType test_8507_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8507_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8507() { testValid(test_8507_sup,test_8507_sub); }

		private static final SyntacticType test_8508_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8508_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8508() { testValid(test_8508_sup,test_8508_sub); }

		private static final SyntacticType test_8509_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8509_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8509() { testValid(test_8509_sup,test_8509_sub); }

		private static final SyntacticType test_8510_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8510_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8510() { testValid(test_8510_sup,test_8510_sub); }

		private static final SyntacticType test_8511_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8511_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8511() { testValid(test_8511_sup,test_8511_sub); }

		private static final SyntacticType test_8512_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8512_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8512() { testValid(test_8512_sup,test_8512_sub); }

		private static final SyntacticType test_8513_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8513_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8513() { testValid(test_8513_sup,test_8513_sub); }

		private static final SyntacticType test_8514_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8514_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8514() { testValid(test_8514_sup,test_8514_sub); }

		private static final SyntacticType test_8515_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8515_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8515() { testValid(test_8515_sup,test_8515_sub); }

		private static final SyntacticType test_8516_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8516_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8516() { testValid(test_8516_sup,test_8516_sub); }

		private static final SyntacticType test_8517_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8517_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8517() { testValid(test_8517_sup,test_8517_sub); }

		private static final SyntacticType test_8518_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8518_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8518() { testValid(test_8518_sup,test_8518_sub); }

		private static final SyntacticType test_8519_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8519_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8519() { testValid(test_8519_sup,test_8519_sub); }

		private static final SyntacticType test_8520_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8520_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8520() { testValid(test_8520_sup,test_8520_sub); }

		private static final SyntacticType test_8521_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8521_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8521() { testValid(test_8521_sup,test_8521_sub); }

		private static final SyntacticType test_8522_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8522_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8522() { testValid(test_8522_sup,test_8522_sub); }

		private static final SyntacticType test_8523_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8523_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8523() { testValid(test_8523_sup,test_8523_sub); }

		private static final SyntacticType test_8524_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8524_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8524() { testValid(test_8524_sup,test_8524_sub); }

		private static final SyntacticType test_8525_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8525_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8525() { testValid(test_8525_sup,test_8525_sub); }

		private static final SyntacticType test_8526_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8526_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8526() { testValid(test_8526_sup,test_8526_sub); }

		private static final SyntacticType test_8527_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8527_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8527() { testValid(test_8527_sup,test_8527_sub); }

		private static final SyntacticType test_8528_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8528_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8528() { testValid(test_8528_sup,test_8528_sub); }

		private static final SyntacticType test_8529_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8529_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8529() { testValid(test_8529_sup,test_8529_sub); }

		private static final SyntacticType test_8530_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8530_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8530() { testValid(test_8530_sup,test_8530_sub); }

		private static final SyntacticType test_8531_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8531_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8531() { testValid(test_8531_sup,test_8531_sub); }

		private static final SyntacticType test_8532_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8532_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8532() { testValid(test_8532_sup,test_8532_sub); }

		private static final SyntacticType test_8533_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8533_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8533() { testValid(test_8533_sup,test_8533_sub); }

		private static final SyntacticType test_8534_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8534_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8534() { testValid(test_8534_sup,test_8534_sub); }

		private static final SyntacticType test_8535_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8535_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8535() { testValid(test_8535_sup,test_8535_sub); }

		private static final SyntacticType test_8536_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8536_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8536() { testValid(test_8536_sup,test_8536_sub); }

		private static final SyntacticType test_8537_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8537_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8537() { testValid(test_8537_sup,test_8537_sub); }

		private static final SyntacticType test_8538_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8538_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8538() { testValid(test_8538_sup,test_8538_sub); }

		private static final SyntacticType test_8539_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8539_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8539() { testValid(test_8539_sup,test_8539_sub); }

		private static final SyntacticType test_8540_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8540_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8540() { testValid(test_8540_sup,test_8540_sub); }

		private static final SyntacticType test_8541_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8541_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8541() { testValid(test_8541_sup,test_8541_sub); }

		private static final SyntacticType test_8542_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8542_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8542() { testValid(test_8542_sup,test_8542_sub); }

		private static final SyntacticType test_8543_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8543_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8543() { testValid(test_8543_sup,test_8543_sub); }

		private static final SyntacticType test_8544_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8544_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8544() { testValid(test_8544_sup,test_8544_sub); }

		private static final SyntacticType test_8545_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8545_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8545() { testValid(test_8545_sup,test_8545_sub); }

		private static final SyntacticType test_8546_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8546_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8546() { testValid(test_8546_sup,test_8546_sub); }

		private static final SyntacticType test_8547_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8547_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8547() { testValid(test_8547_sup,test_8547_sub); }

		private static final SyntacticType test_8548_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8548_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8548() { testValid(test_8548_sup,test_8548_sub); }

		private static final SyntacticType test_8549_sup = parse("(((any | any) | any) | ((any | int) | !any))");
		private static final SyntacticType test_8549_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8549() { testValid(test_8549_sup,test_8549_sub); }

		private static final SyntacticType test_8550_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8550_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8550() { testValid(test_8550_sup,test_8550_sub); }

		private static final SyntacticType test_8551_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8551_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8551() { testValid(test_8551_sup,test_8551_sub); }

		private static final SyntacticType test_8552_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8552_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8552() { testValid(test_8552_sup,test_8552_sub); }

		private static final SyntacticType test_8553_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8553_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8553() { testValid(test_8553_sup,test_8553_sub); }

		private static final SyntacticType test_8554_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8554_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8554() { testValid(test_8554_sup,test_8554_sub); }

		private static final SyntacticType test_8555_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8555_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8555() { testValid(test_8555_sup,test_8555_sub); }

		private static final SyntacticType test_8556_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8556_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8556() { testValid(test_8556_sup,test_8556_sub); }

		private static final SyntacticType test_8557_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8557_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8557() { testValid(test_8557_sup,test_8557_sub); }

		private static final SyntacticType test_8558_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8558_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8558() { testValid(test_8558_sup,test_8558_sub); }

		private static final SyntacticType test_8559_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8559_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8559() { testValid(test_8559_sup,test_8559_sub); }

		private static final SyntacticType test_8560_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8560_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8560() { testValid(test_8560_sup,test_8560_sub); }

		private static final SyntacticType test_8561_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8561_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8561() { testValid(test_8561_sup,test_8561_sub); }

		private static final SyntacticType test_8562_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8562_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8562() { testValid(test_8562_sup,test_8562_sub); }

		private static final SyntacticType test_8563_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8563_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8563() { testValid(test_8563_sup,test_8563_sub); }

		private static final SyntacticType test_8564_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8564_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8564() { testValid(test_8564_sup,test_8564_sub); }

		private static final SyntacticType test_8565_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8565_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8565() { testValid(test_8565_sup,test_8565_sub); }

		private static final SyntacticType test_8566_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8566_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8566() { testValid(test_8566_sup,test_8566_sub); }

		private static final SyntacticType test_8567_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8567_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8567() { testValid(test_8567_sup,test_8567_sub); }

		private static final SyntacticType test_8568_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8568_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8568() { testValid(test_8568_sup,test_8568_sub); }

		private static final SyntacticType test_8569_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8569_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8569() { testValid(test_8569_sup,test_8569_sub); }

		private static final SyntacticType test_8570_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8570_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8570() { testValid(test_8570_sup,test_8570_sub); }

		private static final SyntacticType test_8571_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8571_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8571() { testValid(test_8571_sup,test_8571_sub); }

		private static final SyntacticType test_8572_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8572_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8572() { testValid(test_8572_sup,test_8572_sub); }

		private static final SyntacticType test_8573_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8573_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8573() { testValid(test_8573_sup,test_8573_sub); }

		private static final SyntacticType test_8574_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8574_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8574() { testValid(test_8574_sup,test_8574_sub); }

		private static final SyntacticType test_8575_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8575_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8575() { testValid(test_8575_sup,test_8575_sub); }

		private static final SyntacticType test_8576_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8576_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8576() { testValid(test_8576_sup,test_8576_sub); }

		private static final SyntacticType test_8577_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8577_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8577() { testValid(test_8577_sup,test_8577_sub); }

		private static final SyntacticType test_8578_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8578_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8578() { testValid(test_8578_sup,test_8578_sub); }

		private static final SyntacticType test_8579_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8579_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8579() { testValid(test_8579_sup,test_8579_sub); }

		private static final SyntacticType test_8580_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8580_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8580() { testValid(test_8580_sup,test_8580_sub); }

		private static final SyntacticType test_8581_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8581_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8581() { testValid(test_8581_sup,test_8581_sub); }

		private static final SyntacticType test_8582_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8582_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8582() { testValid(test_8582_sup,test_8582_sub); }

		private static final SyntacticType test_8583_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8583_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8583() { testValid(test_8583_sup,test_8583_sub); }

		private static final SyntacticType test_8584_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8584_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8584() { testValid(test_8584_sup,test_8584_sub); }

		private static final SyntacticType test_8585_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8585_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8585() { testValid(test_8585_sup,test_8585_sub); }

		private static final SyntacticType test_8586_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8586_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8586() { testValid(test_8586_sup,test_8586_sub); }

		private static final SyntacticType test_8587_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8587_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8587() { testValid(test_8587_sup,test_8587_sub); }

		private static final SyntacticType test_8588_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8588_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8588() { testValid(test_8588_sup,test_8588_sub); }

		private static final SyntacticType test_8589_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8589_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8589() { testValid(test_8589_sup,test_8589_sub); }

		private static final SyntacticType test_8590_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8590_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8590() { testValid(test_8590_sup,test_8590_sub); }

		private static final SyntacticType test_8591_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8591_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8591() { testValid(test_8591_sup,test_8591_sub); }

		private static final SyntacticType test_8592_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8592_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8592() { testValid(test_8592_sup,test_8592_sub); }

		private static final SyntacticType test_8593_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8593_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8593() { testValid(test_8593_sup,test_8593_sub); }

		private static final SyntacticType test_8594_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8594_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8594() { testValid(test_8594_sup,test_8594_sub); }

		private static final SyntacticType test_8595_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8595_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8595() { testValid(test_8595_sup,test_8595_sub); }

		private static final SyntacticType test_8596_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8596_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8596() { testValid(test_8596_sup,test_8596_sub); }

		private static final SyntacticType test_8597_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8597_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8597() { testValid(test_8597_sup,test_8597_sub); }

		private static final SyntacticType test_8598_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8598_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8598() { testValid(test_8598_sup,test_8598_sub); }

		private static final SyntacticType test_8599_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8599_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8599() { testValid(test_8599_sup,test_8599_sub); }

		private static final SyntacticType test_8600_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8600_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8600() { testValid(test_8600_sup,test_8600_sub); }

		private static final SyntacticType test_8601_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8601_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8601() { testValid(test_8601_sup,test_8601_sub); }

		private static final SyntacticType test_8602_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8602_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8602() { testValid(test_8602_sup,test_8602_sub); }

		private static final SyntacticType test_8603_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8603_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8603() { testValid(test_8603_sup,test_8603_sub); }

		private static final SyntacticType test_8604_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8604_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8604() { testValid(test_8604_sup,test_8604_sub); }

		private static final SyntacticType test_8605_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8605_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8605() { testValid(test_8605_sup,test_8605_sub); }

		private static final SyntacticType test_8606_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8606_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8606() { testValid(test_8606_sup,test_8606_sub); }

		private static final SyntacticType test_8607_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8607_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8607() { testValid(test_8607_sup,test_8607_sub); }

		private static final SyntacticType test_8608_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8608_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8608() { testValid(test_8608_sup,test_8608_sub); }

		private static final SyntacticType test_8609_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8609_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8609() { testValid(test_8609_sup,test_8609_sub); }

		private static final SyntacticType test_8610_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8610_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8610() { testValid(test_8610_sup,test_8610_sub); }

		private static final SyntacticType test_8611_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8611_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8611() { testValid(test_8611_sup,test_8611_sub); }

		private static final SyntacticType test_8612_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8612_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8612() { testValid(test_8612_sup,test_8612_sub); }

		private static final SyntacticType test_8613_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8613_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8613() { testValid(test_8613_sup,test_8613_sub); }

		private static final SyntacticType test_8614_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8614_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8614() { testValid(test_8614_sup,test_8614_sub); }

		private static final SyntacticType test_8615_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8615_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8615() { testValid(test_8615_sup,test_8615_sub); }

		private static final SyntacticType test_8616_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8616_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8616() { testValid(test_8616_sup,test_8616_sub); }

		private static final SyntacticType test_8617_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8617_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8617() { testValid(test_8617_sup,test_8617_sub); }

		private static final SyntacticType test_8618_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8618_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8618() { testValid(test_8618_sup,test_8618_sub); }

		private static final SyntacticType test_8619_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8619_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8619() { testValid(test_8619_sup,test_8619_sub); }

		private static final SyntacticType test_8620_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8620_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8620() { testValid(test_8620_sup,test_8620_sub); }

		private static final SyntacticType test_8621_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8621_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8621() { testValid(test_8621_sup,test_8621_sub); }

		private static final SyntacticType test_8622_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8622_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8622() { testValid(test_8622_sup,test_8622_sub); }

		private static final SyntacticType test_8623_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8623_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8623() { testValid(test_8623_sup,test_8623_sub); }

		private static final SyntacticType test_8624_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8624_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8624() { testValid(test_8624_sup,test_8624_sub); }

		private static final SyntacticType test_8625_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8625_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8625() { testValid(test_8625_sup,test_8625_sub); }

		private static final SyntacticType test_8626_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8626_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8626() { testValid(test_8626_sup,test_8626_sub); }

		private static final SyntacticType test_8627_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8627_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8627() { testValid(test_8627_sup,test_8627_sub); }

		private static final SyntacticType test_8628_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8628_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8628() { testValid(test_8628_sup,test_8628_sub); }

		private static final SyntacticType test_8629_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8629_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8629() { testValid(test_8629_sup,test_8629_sub); }

		private static final SyntacticType test_8630_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8630_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8630() { testValid(test_8630_sup,test_8630_sub); }

		private static final SyntacticType test_8631_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8631_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8631() { testValid(test_8631_sup,test_8631_sub); }

		private static final SyntacticType test_8632_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8632_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8632() { testValid(test_8632_sup,test_8632_sub); }

		private static final SyntacticType test_8633_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8633_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8633() { testValid(test_8633_sup,test_8633_sub); }

		private static final SyntacticType test_8634_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8634_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8634() { testValid(test_8634_sup,test_8634_sub); }

		private static final SyntacticType test_8635_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8635_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8635() { testValid(test_8635_sup,test_8635_sub); }

		private static final SyntacticType test_8636_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8636_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8636() { testValid(test_8636_sup,test_8636_sub); }

		private static final SyntacticType test_8637_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8637_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8637() { testValid(test_8637_sup,test_8637_sub); }

		private static final SyntacticType test_8638_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8638_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8638() { testValid(test_8638_sup,test_8638_sub); }

		private static final SyntacticType test_8639_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8639_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8639() { testValid(test_8639_sup,test_8639_sub); }

		private static final SyntacticType test_8640_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8640_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8640() { testValid(test_8640_sup,test_8640_sub); }

		private static final SyntacticType test_8641_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8641_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8641() { testValid(test_8641_sup,test_8641_sub); }

		private static final SyntacticType test_8642_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8642_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8642() { testValid(test_8642_sup,test_8642_sub); }

		private static final SyntacticType test_8643_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8643_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8643() { testValid(test_8643_sup,test_8643_sub); }

		private static final SyntacticType test_8644_sup = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		private static final SyntacticType test_8644_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8644() { testValid(test_8644_sup,test_8644_sub); }

		private static final SyntacticType test_8645_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8645_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8645() { testValid(test_8645_sup,test_8645_sub); }

		private static final SyntacticType test_8646_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8646_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8646() { testValid(test_8646_sup,test_8646_sub); }

		private static final SyntacticType test_8647_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8647_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8647() { testValid(test_8647_sup,test_8647_sub); }

		private static final SyntacticType test_8648_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8648_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8648() { testValid(test_8648_sup,test_8648_sub); }

		private static final SyntacticType test_8649_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8649_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8649() { testValid(test_8649_sup,test_8649_sub); }

		private static final SyntacticType test_8650_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8650_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8650() { testValid(test_8650_sup,test_8650_sub); }

		private static final SyntacticType test_8651_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8651_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8651() { testValid(test_8651_sup,test_8651_sub); }

		private static final SyntacticType test_8652_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8652_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8652() { testValid(test_8652_sup,test_8652_sub); }

		private static final SyntacticType test_8653_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8653_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8653() { testValid(test_8653_sup,test_8653_sub); }

		private static final SyntacticType test_8654_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8654_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8654() { testValid(test_8654_sup,test_8654_sub); }

		private static final SyntacticType test_8655_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8655_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8655() { testValid(test_8655_sup,test_8655_sub); }

		private static final SyntacticType test_8656_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8656_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8656() { testValid(test_8656_sup,test_8656_sub); }

		private static final SyntacticType test_8657_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8657_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8657() { testValid(test_8657_sup,test_8657_sub); }

		private static final SyntacticType test_8658_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8658_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8658() { testValid(test_8658_sup,test_8658_sub); }

		private static final SyntacticType test_8659_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8659_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8659() { testValid(test_8659_sup,test_8659_sub); }

		private static final SyntacticType test_8660_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8660_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8660() { testValid(test_8660_sup,test_8660_sub); }

		private static final SyntacticType test_8661_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8661_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8661() { testValid(test_8661_sup,test_8661_sub); }

		private static final SyntacticType test_8662_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8662_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8662() { testValid(test_8662_sup,test_8662_sub); }

		private static final SyntacticType test_8663_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8663_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8663() { testValid(test_8663_sup,test_8663_sub); }

		private static final SyntacticType test_8664_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8664_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8664() { testValid(test_8664_sup,test_8664_sub); }

		private static final SyntacticType test_8665_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8665_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8665() { testValid(test_8665_sup,test_8665_sub); }

		private static final SyntacticType test_8666_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8666_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8666() { testValid(test_8666_sup,test_8666_sub); }

		private static final SyntacticType test_8667_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8667_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8667() { testValid(test_8667_sup,test_8667_sub); }

		private static final SyntacticType test_8668_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8668_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8668() { testValid(test_8668_sup,test_8668_sub); }

		private static final SyntacticType test_8669_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8669_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8669() { testValid(test_8669_sup,test_8669_sub); }

		private static final SyntacticType test_8670_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8670_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8670() { testValid(test_8670_sup,test_8670_sub); }

		private static final SyntacticType test_8671_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8671_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8671() { testValid(test_8671_sup,test_8671_sub); }

		private static final SyntacticType test_8672_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8672_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8672() { testValid(test_8672_sup,test_8672_sub); }

		private static final SyntacticType test_8673_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8673_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8673() { testValid(test_8673_sup,test_8673_sub); }

		private static final SyntacticType test_8674_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8674_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8674() { testValid(test_8674_sup,test_8674_sub); }

		private static final SyntacticType test_8675_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8675_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8675() { testValid(test_8675_sup,test_8675_sub); }

		private static final SyntacticType test_8676_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8676_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8676() { testValid(test_8676_sup,test_8676_sub); }

		private static final SyntacticType test_8677_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8677_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8677() { testValid(test_8677_sup,test_8677_sub); }

		private static final SyntacticType test_8678_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8678_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8678() { testValid(test_8678_sup,test_8678_sub); }

		private static final SyntacticType test_8679_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8679_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8679() { testValid(test_8679_sup,test_8679_sub); }

		private static final SyntacticType test_8680_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8680_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8680() { testValid(test_8680_sup,test_8680_sub); }

		private static final SyntacticType test_8681_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8681_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8681() { testValid(test_8681_sup,test_8681_sub); }

		private static final SyntacticType test_8682_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8682_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8682() { testValid(test_8682_sup,test_8682_sub); }

		private static final SyntacticType test_8683_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8683_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8683() { testValid(test_8683_sup,test_8683_sub); }

		private static final SyntacticType test_8684_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8684_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8684() { testValid(test_8684_sup,test_8684_sub); }

		private static final SyntacticType test_8685_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8685_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8685() { testValid(test_8685_sup,test_8685_sub); }

		private static final SyntacticType test_8686_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8686_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8686() { testValid(test_8686_sup,test_8686_sub); }

		private static final SyntacticType test_8687_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8687_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8687() { testValid(test_8687_sup,test_8687_sub); }

		private static final SyntacticType test_8688_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8688_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8688() { testValid(test_8688_sup,test_8688_sub); }

		private static final SyntacticType test_8689_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8689_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8689() { testValid(test_8689_sup,test_8689_sub); }

		private static final SyntacticType test_8690_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8690_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8690() { testValid(test_8690_sup,test_8690_sub); }

		private static final SyntacticType test_8691_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8691_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8691() { testValid(test_8691_sup,test_8691_sub); }

		private static final SyntacticType test_8692_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8692_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8692() { testValid(test_8692_sup,test_8692_sub); }

		private static final SyntacticType test_8693_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8693_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8693() { testValid(test_8693_sup,test_8693_sub); }

		private static final SyntacticType test_8694_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8694_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8694() { testValid(test_8694_sup,test_8694_sub); }

		private static final SyntacticType test_8695_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8695_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8695() { testValid(test_8695_sup,test_8695_sub); }

		private static final SyntacticType test_8696_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8696_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8696() { testValid(test_8696_sup,test_8696_sub); }

		private static final SyntacticType test_8697_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8697_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8697() { testValid(test_8697_sup,test_8697_sub); }

		private static final SyntacticType test_8698_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8698_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8698() { testValid(test_8698_sup,test_8698_sub); }

		private static final SyntacticType test_8699_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8699_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8699() { testValid(test_8699_sup,test_8699_sub); }

		private static final SyntacticType test_8700_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8700_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8700() { testValid(test_8700_sup,test_8700_sub); }

		private static final SyntacticType test_8701_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8701_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8701() { testValid(test_8701_sup,test_8701_sub); }

		private static final SyntacticType test_8702_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8702_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8702() { testValid(test_8702_sup,test_8702_sub); }

		private static final SyntacticType test_8703_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8703_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8703() { testValid(test_8703_sup,test_8703_sub); }

		private static final SyntacticType test_8704_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8704_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8704() { testValid(test_8704_sup,test_8704_sub); }

		private static final SyntacticType test_8705_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8705_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8705() { testValid(test_8705_sup,test_8705_sub); }

		private static final SyntacticType test_8706_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8706_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8706() { testValid(test_8706_sup,test_8706_sub); }

		private static final SyntacticType test_8707_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8707_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8707() { testValid(test_8707_sup,test_8707_sub); }

		private static final SyntacticType test_8708_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8708_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8708() { testValid(test_8708_sup,test_8708_sub); }

		private static final SyntacticType test_8709_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8709_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8709() { testValid(test_8709_sup,test_8709_sub); }

		private static final SyntacticType test_8710_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8710_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8710() { testValid(test_8710_sup,test_8710_sub); }

		private static final SyntacticType test_8711_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8711_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8711() { testValid(test_8711_sup,test_8711_sub); }

		private static final SyntacticType test_8712_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8712_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8712() { testValid(test_8712_sup,test_8712_sub); }

		private static final SyntacticType test_8713_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8713_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8713() { testValid(test_8713_sup,test_8713_sub); }

		private static final SyntacticType test_8714_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8714_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8714() { testValid(test_8714_sup,test_8714_sub); }

		private static final SyntacticType test_8715_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8715_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8715() { testValid(test_8715_sup,test_8715_sub); }

		private static final SyntacticType test_8716_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8716_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8716() { testValid(test_8716_sup,test_8716_sub); }

		private static final SyntacticType test_8717_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8717_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8717() { testValid(test_8717_sup,test_8717_sub); }

		private static final SyntacticType test_8718_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8718_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8718() { testValid(test_8718_sup,test_8718_sub); }

		private static final SyntacticType test_8719_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8719_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8719() { testValid(test_8719_sup,test_8719_sub); }

		private static final SyntacticType test_8720_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8720_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8720() { testValid(test_8720_sup,test_8720_sub); }

		private static final SyntacticType test_8721_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8721_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8721() { testValid(test_8721_sup,test_8721_sub); }

		private static final SyntacticType test_8722_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8722_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8722() { testValid(test_8722_sup,test_8722_sub); }

		private static final SyntacticType test_8723_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8723_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8723() { testValid(test_8723_sup,test_8723_sub); }

		private static final SyntacticType test_8724_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8724_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8724() { testValid(test_8724_sup,test_8724_sub); }

		private static final SyntacticType test_8725_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8725_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8725() { testValid(test_8725_sup,test_8725_sub); }

		private static final SyntacticType test_8726_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8726_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8726() { testValid(test_8726_sup,test_8726_sub); }

		private static final SyntacticType test_8727_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8727_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8727() { testValid(test_8727_sup,test_8727_sub); }

		private static final SyntacticType test_8728_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8728_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8728() { testValid(test_8728_sup,test_8728_sub); }

		private static final SyntacticType test_8729_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8729_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8729() { testValid(test_8729_sup,test_8729_sub); }

		private static final SyntacticType test_8730_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8730_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8730() { testValid(test_8730_sup,test_8730_sub); }

		private static final SyntacticType test_8731_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8731_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8731() { testValid(test_8731_sup,test_8731_sub); }

		private static final SyntacticType test_8732_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8732_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8732() { testValid(test_8732_sup,test_8732_sub); }

		private static final SyntacticType test_8733_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8733_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8733() { testValid(test_8733_sup,test_8733_sub); }

		private static final SyntacticType test_8734_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8734_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8734() { testValid(test_8734_sup,test_8734_sub); }

		private static final SyntacticType test_8735_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8735_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8735() { testValid(test_8735_sup,test_8735_sub); }

		private static final SyntacticType test_8736_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8736_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8736() { testValid(test_8736_sup,test_8736_sub); }

		private static final SyntacticType test_8737_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8737_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8737() { testValid(test_8737_sup,test_8737_sub); }

		private static final SyntacticType test_8738_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8738_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8738() { testValid(test_8738_sup,test_8738_sub); }

		private static final SyntacticType test_8739_sup = parse("(((any | any) & any) | ((int | any) | {any}))");
		private static final SyntacticType test_8739_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8739() { testValid(test_8739_sup,test_8739_sub); }

		private static final SyntacticType test_8740_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8740_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8740() { testValid(test_8740_sup,test_8740_sub); }

		private static final SyntacticType test_8741_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8741_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8741() { testValid(test_8741_sup,test_8741_sub); }

		private static final SyntacticType test_8742_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8742_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8742() { testValid(test_8742_sup,test_8742_sub); }

		private static final SyntacticType test_8743_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8743_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8743() { testValid(test_8743_sup,test_8743_sub); }

		private static final SyntacticType test_8744_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8744_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8744() { testValid(test_8744_sup,test_8744_sub); }

		private static final SyntacticType test_8745_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8745_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8745() { testValid(test_8745_sup,test_8745_sub); }

		private static final SyntacticType test_8746_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8746_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8746() { testValid(test_8746_sup,test_8746_sub); }

		private static final SyntacticType test_8747_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8747_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8747() { testValid(test_8747_sup,test_8747_sub); }

		private static final SyntacticType test_8748_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8748_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8748() { testValid(test_8748_sup,test_8748_sub); }

		private static final SyntacticType test_8749_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8749_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8749() { testValid(test_8749_sup,test_8749_sub); }

		private static final SyntacticType test_8750_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8750_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8750() { testValid(test_8750_sup,test_8750_sub); }

		private static final SyntacticType test_8751_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8751_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8751() { testValid(test_8751_sup,test_8751_sub); }

		private static final SyntacticType test_8752_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8752_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8752() { testValid(test_8752_sup,test_8752_sub); }

		private static final SyntacticType test_8753_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8753_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8753() { testValid(test_8753_sup,test_8753_sub); }

		private static final SyntacticType test_8754_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8754_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8754() { testValid(test_8754_sup,test_8754_sub); }

		private static final SyntacticType test_8755_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8755_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8755() { testValid(test_8755_sup,test_8755_sub); }

		private static final SyntacticType test_8756_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8756_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8756() { testValid(test_8756_sup,test_8756_sub); }

		private static final SyntacticType test_8757_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8757_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8757() { testValid(test_8757_sup,test_8757_sub); }

		private static final SyntacticType test_8758_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8758_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8758() { testValid(test_8758_sup,test_8758_sub); }

		private static final SyntacticType test_8759_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8759_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8759() { testValid(test_8759_sup,test_8759_sub); }

		private static final SyntacticType test_8760_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8760_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8760() { testValid(test_8760_sup,test_8760_sub); }

		private static final SyntacticType test_8761_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8761_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8761() { testValid(test_8761_sup,test_8761_sub); }

		private static final SyntacticType test_8762_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8762_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8762() { testValid(test_8762_sup,test_8762_sub); }

		private static final SyntacticType test_8763_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8763_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8763() { testValid(test_8763_sup,test_8763_sub); }

		private static final SyntacticType test_8764_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8764_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8764() { testValid(test_8764_sup,test_8764_sub); }

		private static final SyntacticType test_8765_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8765_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8765() { testValid(test_8765_sup,test_8765_sub); }

		private static final SyntacticType test_8766_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8766_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8766() { testValid(test_8766_sup,test_8766_sub); }

		private static final SyntacticType test_8767_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8767_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8767() { testValid(test_8767_sup,test_8767_sub); }

		private static final SyntacticType test_8768_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8768_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8768() { testValid(test_8768_sup,test_8768_sub); }

		private static final SyntacticType test_8769_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8769_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8769() { testValid(test_8769_sup,test_8769_sub); }

		private static final SyntacticType test_8770_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8770_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8770() { testValid(test_8770_sup,test_8770_sub); }

		private static final SyntacticType test_8771_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8771_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8771() { testValid(test_8771_sup,test_8771_sub); }

		private static final SyntacticType test_8772_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8772_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8772() { testValid(test_8772_sup,test_8772_sub); }

		private static final SyntacticType test_8773_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8773_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8773() { testValid(test_8773_sup,test_8773_sub); }

		private static final SyntacticType test_8774_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8774_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8774() { testValid(test_8774_sup,test_8774_sub); }

		private static final SyntacticType test_8775_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8775_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8775() { testValid(test_8775_sup,test_8775_sub); }

		private static final SyntacticType test_8776_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8776_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8776() { testValid(test_8776_sup,test_8776_sub); }

		private static final SyntacticType test_8777_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8777_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8777() { testValid(test_8777_sup,test_8777_sub); }

		private static final SyntacticType test_8778_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8778_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8778() { testValid(test_8778_sup,test_8778_sub); }

		private static final SyntacticType test_8779_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8779_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8779() { testValid(test_8779_sup,test_8779_sub); }

		private static final SyntacticType test_8780_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8780_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8780() { testValid(test_8780_sup,test_8780_sub); }

		private static final SyntacticType test_8781_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8781_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8781() { testValid(test_8781_sup,test_8781_sub); }

		private static final SyntacticType test_8782_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8782_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8782() { testValid(test_8782_sup,test_8782_sub); }

		private static final SyntacticType test_8783_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8783_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8783() { testValid(test_8783_sup,test_8783_sub); }

		private static final SyntacticType test_8784_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8784_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8784() { testValid(test_8784_sup,test_8784_sub); }

		private static final SyntacticType test_8785_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8785_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8785() { testValid(test_8785_sup,test_8785_sub); }

		private static final SyntacticType test_8786_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8786_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8786() { testValid(test_8786_sup,test_8786_sub); }

		private static final SyntacticType test_8787_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8787_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8787() { testValid(test_8787_sup,test_8787_sub); }

		private static final SyntacticType test_8788_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8788_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8788() { testValid(test_8788_sup,test_8788_sub); }

		private static final SyntacticType test_8789_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8789_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8789() { testValid(test_8789_sup,test_8789_sub); }

		private static final SyntacticType test_8790_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8790_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8790() { testValid(test_8790_sup,test_8790_sub); }

		private static final SyntacticType test_8791_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8791_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8791() { testValid(test_8791_sup,test_8791_sub); }

		private static final SyntacticType test_8792_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8792_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8792() { testValid(test_8792_sup,test_8792_sub); }

		private static final SyntacticType test_8793_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8793_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8793() { testValid(test_8793_sup,test_8793_sub); }

		private static final SyntacticType test_8794_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8794_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8794() { testValid(test_8794_sup,test_8794_sub); }

		private static final SyntacticType test_8795_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8795_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8795() { testValid(test_8795_sup,test_8795_sub); }

		private static final SyntacticType test_8796_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8796_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8796() { testValid(test_8796_sup,test_8796_sub); }

		private static final SyntacticType test_8797_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8797_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8797() { testValid(test_8797_sup,test_8797_sub); }

		private static final SyntacticType test_8798_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8798_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8798() { testValid(test_8798_sup,test_8798_sub); }

		private static final SyntacticType test_8799_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8799_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8799() { testValid(test_8799_sup,test_8799_sub); }

		private static final SyntacticType test_8800_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8800_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8800() { testValid(test_8800_sup,test_8800_sub); }

		private static final SyntacticType test_8801_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8801_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8801() { testValid(test_8801_sup,test_8801_sub); }

		private static final SyntacticType test_8802_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8802_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8802() { testValid(test_8802_sup,test_8802_sub); }

		private static final SyntacticType test_8803_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8803_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8803() { testValid(test_8803_sup,test_8803_sub); }

		private static final SyntacticType test_8804_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8804_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8804() { testValid(test_8804_sup,test_8804_sub); }

		private static final SyntacticType test_8805_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8805_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8805() { testValid(test_8805_sup,test_8805_sub); }

		private static final SyntacticType test_8806_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8806_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8806() { testValid(test_8806_sup,test_8806_sub); }

		private static final SyntacticType test_8807_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8807_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8807() { testValid(test_8807_sup,test_8807_sub); }

		private static final SyntacticType test_8808_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8808_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8808() { testValid(test_8808_sup,test_8808_sub); }

		private static final SyntacticType test_8809_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8809_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8809() { testValid(test_8809_sup,test_8809_sub); }

		private static final SyntacticType test_8810_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8810_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8810() { testValid(test_8810_sup,test_8810_sub); }

		private static final SyntacticType test_8811_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8811_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8811() { testValid(test_8811_sup,test_8811_sub); }

		private static final SyntacticType test_8812_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8812_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8812() { testValid(test_8812_sup,test_8812_sub); }

		private static final SyntacticType test_8813_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8813_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8813() { testValid(test_8813_sup,test_8813_sub); }

		private static final SyntacticType test_8814_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8814_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8814() { testValid(test_8814_sup,test_8814_sub); }

		private static final SyntacticType test_8815_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8815_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8815() { testValid(test_8815_sup,test_8815_sub); }

		private static final SyntacticType test_8816_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8816_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8816() { testValid(test_8816_sup,test_8816_sub); }

		private static final SyntacticType test_8817_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8817_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8817() { testValid(test_8817_sup,test_8817_sub); }

		private static final SyntacticType test_8818_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8818_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8818() { testValid(test_8818_sup,test_8818_sub); }

		private static final SyntacticType test_8819_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8819_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8819() { testValid(test_8819_sup,test_8819_sub); }

		private static final SyntacticType test_8820_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8820_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8820() { testValid(test_8820_sup,test_8820_sub); }

		private static final SyntacticType test_8821_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8821_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8821() { testValid(test_8821_sup,test_8821_sub); }

		private static final SyntacticType test_8822_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8822_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8822() { testValid(test_8822_sup,test_8822_sub); }

		private static final SyntacticType test_8823_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8823_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8823() { testValid(test_8823_sup,test_8823_sub); }

		private static final SyntacticType test_8824_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8824_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8824() { testValid(test_8824_sup,test_8824_sub); }

		private static final SyntacticType test_8825_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8825_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8825() { testValid(test_8825_sup,test_8825_sub); }

		private static final SyntacticType test_8826_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8826_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8826() { testValid(test_8826_sup,test_8826_sub); }

		private static final SyntacticType test_8827_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8827_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8827() { testValid(test_8827_sup,test_8827_sub); }

		private static final SyntacticType test_8828_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8828_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8828() { testValid(test_8828_sup,test_8828_sub); }

		private static final SyntacticType test_8829_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8829_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8829() { testValid(test_8829_sup,test_8829_sub); }

		private static final SyntacticType test_8830_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8830_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8830() { testValid(test_8830_sup,test_8830_sub); }

		private static final SyntacticType test_8831_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8831_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8831() { testValid(test_8831_sup,test_8831_sub); }

		private static final SyntacticType test_8832_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8832_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8832() { testValid(test_8832_sup,test_8832_sub); }

		private static final SyntacticType test_8833_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8833_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8833() { testValid(test_8833_sup,test_8833_sub); }

		private static final SyntacticType test_8834_sup = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		private static final SyntacticType test_8834_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8834() { testValid(test_8834_sup,test_8834_sub); }

		private static final SyntacticType test_8835_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8835_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8835() { testValid(test_8835_sup,test_8835_sub); }

		private static final SyntacticType test_8836_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8836_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8836() { testValid(test_8836_sup,test_8836_sub); }

		private static final SyntacticType test_8837_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8837_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8837() { testValid(test_8837_sup,test_8837_sub); }

		private static final SyntacticType test_8838_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8838_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8838() { testValid(test_8838_sup,test_8838_sub); }

		private static final SyntacticType test_8839_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8839_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8839() { testValid(test_8839_sup,test_8839_sub); }

		private static final SyntacticType test_8840_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8840_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8840() { testValid(test_8840_sup,test_8840_sub); }

		private static final SyntacticType test_8841_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8841_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8841() { testValid(test_8841_sup,test_8841_sub); }

		private static final SyntacticType test_8842_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8842_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8842() { testValid(test_8842_sup,test_8842_sub); }

		private static final SyntacticType test_8843_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8843_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8843() { testValid(test_8843_sup,test_8843_sub); }

		private static final SyntacticType test_8844_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8844_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8844() { testValid(test_8844_sup,test_8844_sub); }

		private static final SyntacticType test_8845_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8845_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8845() { testValid(test_8845_sup,test_8845_sub); }

		private static final SyntacticType test_8846_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8846_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8846() { testValid(test_8846_sup,test_8846_sub); }

		private static final SyntacticType test_8847_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8847_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8847() { testValid(test_8847_sup,test_8847_sub); }

		private static final SyntacticType test_8848_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8848_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8848() { testValid(test_8848_sup,test_8848_sub); }

		private static final SyntacticType test_8849_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8849_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8849() { testValid(test_8849_sup,test_8849_sub); }

		private static final SyntacticType test_8850_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8850_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8850() { testValid(test_8850_sup,test_8850_sub); }

		private static final SyntacticType test_8851_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8851_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8851() { testValid(test_8851_sup,test_8851_sub); }

		private static final SyntacticType test_8852_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8852_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8852() { testValid(test_8852_sup,test_8852_sub); }

		private static final SyntacticType test_8853_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8853_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8853() { testValid(test_8853_sup,test_8853_sub); }

		private static final SyntacticType test_8854_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8854_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8854() { testValid(test_8854_sup,test_8854_sub); }

		private static final SyntacticType test_8855_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8855_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8855() { testValid(test_8855_sup,test_8855_sub); }

		private static final SyntacticType test_8856_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8856_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8856() { testValid(test_8856_sup,test_8856_sub); }

		private static final SyntacticType test_8857_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8857_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8857() { testValid(test_8857_sup,test_8857_sub); }

		private static final SyntacticType test_8858_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8858_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8858() { testValid(test_8858_sup,test_8858_sub); }

		private static final SyntacticType test_8859_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8859_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8859() { testValid(test_8859_sup,test_8859_sub); }

		private static final SyntacticType test_8860_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8860_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8860() { testValid(test_8860_sup,test_8860_sub); }

		private static final SyntacticType test_8861_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8861_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8861() { testValid(test_8861_sup,test_8861_sub); }

		private static final SyntacticType test_8862_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8862_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8862() { testValid(test_8862_sup,test_8862_sub); }

		private static final SyntacticType test_8863_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8863_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8863() { testValid(test_8863_sup,test_8863_sub); }

		private static final SyntacticType test_8864_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8864_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8864() { testValid(test_8864_sup,test_8864_sub); }

		private static final SyntacticType test_8865_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8865_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8865() { testValid(test_8865_sup,test_8865_sub); }

		private static final SyntacticType test_8866_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8866_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8866() { testValid(test_8866_sup,test_8866_sub); }

		private static final SyntacticType test_8867_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8867_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8867() { testValid(test_8867_sup,test_8867_sub); }

		private static final SyntacticType test_8868_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8868_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8868() { testValid(test_8868_sup,test_8868_sub); }

		private static final SyntacticType test_8869_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8869_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8869() { testValid(test_8869_sup,test_8869_sub); }

		private static final SyntacticType test_8870_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8870_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8870() { testValid(test_8870_sup,test_8870_sub); }

		private static final SyntacticType test_8871_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8871_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8871() { testValid(test_8871_sup,test_8871_sub); }

		private static final SyntacticType test_8872_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8872_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8872() { testValid(test_8872_sup,test_8872_sub); }

		private static final SyntacticType test_8873_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8873_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8873() { testValid(test_8873_sup,test_8873_sub); }

		private static final SyntacticType test_8874_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8874_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8874() { testValid(test_8874_sup,test_8874_sub); }

		private static final SyntacticType test_8875_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8875_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8875() { testValid(test_8875_sup,test_8875_sub); }

		private static final SyntacticType test_8876_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8876_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8876() { testValid(test_8876_sup,test_8876_sub); }

		private static final SyntacticType test_8877_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8877_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8877() { testValid(test_8877_sup,test_8877_sub); }

		private static final SyntacticType test_8878_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8878_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8878() { testValid(test_8878_sup,test_8878_sub); }

		private static final SyntacticType test_8879_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8879_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8879() { testValid(test_8879_sup,test_8879_sub); }

		private static final SyntacticType test_8880_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8880_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8880() { testValid(test_8880_sup,test_8880_sub); }

		private static final SyntacticType test_8881_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8881_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8881() { testValid(test_8881_sup,test_8881_sub); }

		private static final SyntacticType test_8882_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8882_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8882() { testValid(test_8882_sup,test_8882_sub); }

		private static final SyntacticType test_8883_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8883_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8883() { testValid(test_8883_sup,test_8883_sub); }

		private static final SyntacticType test_8884_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8884_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8884() { testValid(test_8884_sup,test_8884_sub); }

		private static final SyntacticType test_8885_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8885_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8885() { testValid(test_8885_sup,test_8885_sub); }

		private static final SyntacticType test_8886_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8886_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8886() { testValid(test_8886_sup,test_8886_sub); }

		private static final SyntacticType test_8887_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8887_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8887() { testValid(test_8887_sup,test_8887_sub); }

		private static final SyntacticType test_8888_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8888_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8888() { testValid(test_8888_sup,test_8888_sub); }

		private static final SyntacticType test_8889_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8889_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8889() { testValid(test_8889_sup,test_8889_sub); }

		private static final SyntacticType test_8890_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8890_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8890() { testValid(test_8890_sup,test_8890_sub); }

		private static final SyntacticType test_8891_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8891_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8891() { testValid(test_8891_sup,test_8891_sub); }

		private static final SyntacticType test_8892_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8892_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8892() { testValid(test_8892_sup,test_8892_sub); }

		private static final SyntacticType test_8893_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8893_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8893() { testValid(test_8893_sup,test_8893_sub); }

		private static final SyntacticType test_8894_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8894_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8894() { testValid(test_8894_sup,test_8894_sub); }

		private static final SyntacticType test_8895_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8895_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8895() { testValid(test_8895_sup,test_8895_sub); }

		private static final SyntacticType test_8896_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8896_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8896() { testValid(test_8896_sup,test_8896_sub); }

		private static final SyntacticType test_8897_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8897_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8897() { testValid(test_8897_sup,test_8897_sub); }

		private static final SyntacticType test_8898_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8898_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8898() { testValid(test_8898_sup,test_8898_sub); }

		private static final SyntacticType test_8899_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8899_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8899() { testValid(test_8899_sup,test_8899_sub); }

		private static final SyntacticType test_8900_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8900_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8900() { testValid(test_8900_sup,test_8900_sub); }

		private static final SyntacticType test_8901_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8901_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8901() { testValid(test_8901_sup,test_8901_sub); }

		private static final SyntacticType test_8902_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8902_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8902() { testValid(test_8902_sup,test_8902_sub); }

		private static final SyntacticType test_8903_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8903_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8903() { testValid(test_8903_sup,test_8903_sub); }

		private static final SyntacticType test_8904_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8904_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8904() { testValid(test_8904_sup,test_8904_sub); }

		private static final SyntacticType test_8905_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8905_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_8905() { testValid(test_8905_sup,test_8905_sub); }

		private static final SyntacticType test_8906_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8906_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_8906() { testValid(test_8906_sup,test_8906_sub); }

		private static final SyntacticType test_8907_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8907_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_8907() { testValid(test_8907_sup,test_8907_sub); }

		private static final SyntacticType test_8908_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8908_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_8908() { testValid(test_8908_sup,test_8908_sub); }

		private static final SyntacticType test_8909_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8909_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_8909() { testValid(test_8909_sup,test_8909_sub); }

		private static final SyntacticType test_8910_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8910_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_8910() { testValid(test_8910_sup,test_8910_sub); }

		private static final SyntacticType test_8911_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8911_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_8911() { testValid(test_8911_sup,test_8911_sub); }

		private static final SyntacticType test_8912_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8912_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_8912() { testValid(test_8912_sup,test_8912_sub); }

		private static final SyntacticType test_8913_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8913_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_8913() { testValid(test_8913_sup,test_8913_sub); }

		private static final SyntacticType test_8914_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8914_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_8914() { testValid(test_8914_sup,test_8914_sub); }

		private static final SyntacticType test_8915_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8915_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_8915() { testValid(test_8915_sup,test_8915_sub); }

		private static final SyntacticType test_8916_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8916_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_8916() { testValid(test_8916_sup,test_8916_sub); }

		private static final SyntacticType test_8917_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8917_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_8917() { testValid(test_8917_sup,test_8917_sub); }

		private static final SyntacticType test_8918_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8918_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_8918() { testValid(test_8918_sup,test_8918_sub); }

		private static final SyntacticType test_8919_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8919_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_8919() { testValid(test_8919_sup,test_8919_sub); }

		private static final SyntacticType test_8920_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8920_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_8920() { testValid(test_8920_sup,test_8920_sub); }

		private static final SyntacticType test_8921_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8921_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_8921() { testValid(test_8921_sup,test_8921_sub); }

		private static final SyntacticType test_8922_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8922_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_8922() { testValid(test_8922_sup,test_8922_sub); }

		private static final SyntacticType test_8923_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8923_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_8923() { testValid(test_8923_sup,test_8923_sub); }

		private static final SyntacticType test_8924_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8924_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_8924() { testValid(test_8924_sup,test_8924_sub); }

		private static final SyntacticType test_8925_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8925_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_8925() { testValid(test_8925_sup,test_8925_sub); }

		private static final SyntacticType test_8926_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8926_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_8926() { testValid(test_8926_sup,test_8926_sub); }

		private static final SyntacticType test_8927_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8927_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_8927() { testValid(test_8927_sup,test_8927_sub); }

		private static final SyntacticType test_8928_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8928_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_8928() { testValid(test_8928_sup,test_8928_sub); }

		private static final SyntacticType test_8929_sup = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		private static final SyntacticType test_8929_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_8929() { testValid(test_8929_sup,test_8929_sub); }

		private static final SyntacticType test_8930_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8930_sub = parse("{((any | any) | (any & int)), (any & int)}");
		@Test public void test_8930() { testValid(test_8930_sup,test_8930_sub); }

		private static final SyntacticType test_8931_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8931_sub = parse("{(!int | (int | any)), (int & int)}");
		@Test public void test_8931() { testValid(test_8931_sup,test_8931_sub); }

		private static final SyntacticType test_8932_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8932_sub = parse("{{{int, int}, (int | int)}, {{int, int}, {int, any}}}");
		@Test public void test_8932() { testValid(test_8932_sup,test_8932_sub); }

		private static final SyntacticType test_8933_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8933_sub = parse("{({any, any} & (int | int)), {(int | any), {any, any}}}");
		@Test public void test_8933() { testValid(test_8933_sup,test_8933_sub); }

		private static final SyntacticType test_8934_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8934_sub = parse("{((any & any) & (int & int)), {(int & any), (any | int)}}");
		@Test public void test_8934() { testValid(test_8934_sup,test_8934_sub); }

		private static final SyntacticType test_8935_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8935_sub = parse("{({any} | (any | int)), {{any}, (any & any)}}");
		@Test public void test_8935() { testValid(test_8935_sup,test_8935_sub); }

		private static final SyntacticType test_8936_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8936_sub = parse("{((int & int) | {any, int}), {(any | any), {any, any}}}");
		@Test public void test_8936() { testValid(test_8936_sup,test_8936_sub); }

		private static final SyntacticType test_8937_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8937_sub = parse("{((any | any) & (int | int)), {{any, any}, (any & any)}}");
		@Test public void test_8937() { testValid(test_8937_sup,test_8937_sub); }

		private static final SyntacticType test_8938_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8938_sub = parse("{((any | any) & !int), {(any | any), (any & any)}}");
		@Test public void test_8938() { testValid(test_8938_sup,test_8938_sub); }

		private static final SyntacticType test_8939_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8939_sub = parse("{{(any & int), (int & any)}, {{int, int}, (int & int)}}");
		@Test public void test_8939() { testValid(test_8939_sup,test_8939_sub); }

		private static final SyntacticType test_8940_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8940_sub = parse("{{(any | int), (int & any)}, {(any | int), (int & int)}}");
		@Test public void test_8940() { testValid(test_8940_sup,test_8940_sub); }

		private static final SyntacticType test_8941_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8941_sub = parse("{{(any & any), (any & any)}, ((int & int) | (any | int))}");
		@Test public void test_8941() { testValid(test_8941_sup,test_8941_sub); }

		private static final SyntacticType test_8942_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8942_sub = parse("{((any | int) | (any | any)), ((int | any) | (int & int))}");
		@Test public void test_8942() { testValid(test_8942_sup,test_8942_sub); }

		private static final SyntacticType test_8943_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8943_sub = parse("{{(any & any), (any | any)}, ((int | int) | {any, int})}");
		@Test public void test_8943() { testValid(test_8943_sup,test_8943_sub); }

		private static final SyntacticType test_8944_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8944_sub = parse("{({int} | (int & int)), ((int & any) | (any | any))}");
		@Test public void test_8944() { testValid(test_8944_sup,test_8944_sub); }

		private static final SyntacticType test_8945_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8945_sub = parse("{({any} & (int & int)), ((any & any) | (any | int))}");
		@Test public void test_8945() { testValid(test_8945_sup,test_8945_sub); }

		private static final SyntacticType test_8946_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8946_sub = parse("{({int, int} | {any, any}), ({int, int} & {any})}");
		@Test public void test_8946() { testValid(test_8946_sup,test_8946_sub); }

		private static final SyntacticType test_8947_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8947_sub = parse("{((any | any) | {any}), ((any | int) & !int)}");
		@Test public void test_8947() { testValid(test_8947_sup,test_8947_sub); }

		private static final SyntacticType test_8948_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8948_sub = parse("{((any & any) & int), ({any, int} & (int | any))}");
		@Test public void test_8948() { testValid(test_8948_sup,test_8948_sub); }

		private static final SyntacticType test_8949_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8949_sub = parse("{((int & any) & (any & int)), ((any | any) & (any | any))}");
		@Test public void test_8949() { testValid(test_8949_sup,test_8949_sub); }

		private static final SyntacticType test_8950_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8950_sub = parse("{((int & int) | (int & any)), ((any | int) & (int | any))}");
		@Test public void test_8950() { testValid(test_8950_sup,test_8950_sub); }

		private static final SyntacticType test_8951_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8951_sub = parse("{((int & any) | {int, any}), ({any, any} & (any | int))}");
		@Test public void test_8951() { testValid(test_8951_sup,test_8951_sub); }

		private static final SyntacticType test_8952_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8952_sub = parse("{{(int | any), {int}}, ({int, int} & (any & int))}");
		@Test public void test_8952() { testValid(test_8952_sup,test_8952_sub); }

		private static final SyntacticType test_8953_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8953_sub = parse("{{(any & int), (any & any)}, ({int, any} & (int & int))}");
		@Test public void test_8953() { testValid(test_8953_sup,test_8953_sub); }

		private static final SyntacticType test_8954_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8954_sub = parse("{({int, int} & {int, int}), {(int & int), {int}}}");
		@Test public void test_8954() { testValid(test_8954_sup,test_8954_sub); }

		private static final SyntacticType test_8955_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8955_sub = parse("{((int | int) | (any & any)), {{any, any}, {int, any}}}");
		@Test public void test_8955() { testValid(test_8955_sup,test_8955_sub); }

		private static final SyntacticType test_8956_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8956_sub = parse("{({int, any} | (int & int)), {(any & any), (any & any)}}");
		@Test public void test_8956() { testValid(test_8956_sup,test_8956_sub); }

		private static final SyntacticType test_8957_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8957_sub = parse("{({int, int} & (any & any)), {(int | any), (int & any)}}");
		@Test public void test_8957() { testValid(test_8957_sup,test_8957_sub); }

		private static final SyntacticType test_8958_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8958_sub = parse("{((int | any) & {int, int}), {!int, {int}}}");
		@Test public void test_8958() { testValid(test_8958_sup,test_8958_sub); }

		private static final SyntacticType test_8959_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8959_sub = parse("{(!int | {int, any}), {(int & int), (int | int)}}");
		@Test public void test_8959() { testValid(test_8959_sup,test_8959_sub); }

		private static final SyntacticType test_8960_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8960_sub = parse("{((int | int) & (int & int)), ({int} | any)}");
		@Test public void test_8960() { testValid(test_8960_sup,test_8960_sub); }

		private static final SyntacticType test_8961_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8961_sub = parse("{((int & int) & {int, any}), ({any, int} | (int | any))}");
		@Test public void test_8961() { testValid(test_8961_sup,test_8961_sub); }

		private static final SyntacticType test_8962_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8962_sub = parse("{((any & int) & (any | int)), ((int & int) | (int | any))}");
		@Test public void test_8962() { testValid(test_8962_sup,test_8962_sub); }

		private static final SyntacticType test_8963_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8963_sub = parse("{((any & any) | {any, int}), ((int | any) | {any, int})}");
		@Test public void test_8963() { testValid(test_8963_sup,test_8963_sub); }

		private static final SyntacticType test_8964_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8964_sub = parse("{{{int, any}, (int & int)}, ({int} | (int | any))}");
		@Test public void test_8964() { testValid(test_8964_sup,test_8964_sub); }

		private static final SyntacticType test_8965_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8965_sub = parse("{(!any | (any | int)), ({any} | (any | int))}");
		@Test public void test_8965() { testValid(test_8965_sup,test_8965_sub); }

		private static final SyntacticType test_8966_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8966_sub = parse("{(!any | {any, int}), ({any, any} | (int & any))}");
		@Test public void test_8966() { testValid(test_8966_sup,test_8966_sub); }

		private static final SyntacticType test_8967_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8967_sub = parse("{{(int | int), (int | int)}, ({int, any} & (int | int))}");
		@Test public void test_8967() { testValid(test_8967_sup,test_8967_sub); }

		private static final SyntacticType test_8968_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8968_sub = parse("{({int, any} & {int, any}), ((int | int) & (int & int))}");
		@Test public void test_8968() { testValid(test_8968_sup,test_8968_sub); }

		private static final SyntacticType test_8969_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8969_sub = parse("{({int, any} & {any, any}), ((any | any) & {any, any})}");
		@Test public void test_8969() { testValid(test_8969_sup,test_8969_sub); }

		private static final SyntacticType test_8970_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8970_sub = parse("{({int} & !int), ((any | any) & (any | int))}");
		@Test public void test_8970() { testValid(test_8970_sup,test_8970_sub); }

		private static final SyntacticType test_8971_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8971_sub = parse("{{{int, any}, {any, any}}, ({any, any} & (int & int))}");
		@Test public void test_8971() { testValid(test_8971_sup,test_8971_sub); }

		private static final SyntacticType test_8972_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8972_sub = parse("(((int | int) & {int, any}) | {{int}, any})");
		@Test public void test_8972() { testValid(test_8972_sup,test_8972_sub); }

		private static final SyntacticType test_8973_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8973_sub = parse("({(int & any), {int, int}} | {{int, any}, !int})");
		@Test public void test_8973() { testValid(test_8973_sup,test_8973_sub); }

		private static final SyntacticType test_8974_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8974_sub = parse("(((int & any) & (int | int)) | {{any, any}, {any, any}})");
		@Test public void test_8974() { testValid(test_8974_sup,test_8974_sub); }

		private static final SyntacticType test_8975_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8975_sub = parse("({(int & int), (any | any)} | {(int | int), {int, any}})");
		@Test public void test_8975() { testValid(test_8975_sup,test_8975_sub); }

		private static final SyntacticType test_8976_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8976_sub = parse("(((int & int) | any) | {(int | any), {int, int}})");
		@Test public void test_8976() { testValid(test_8976_sup,test_8976_sub); }

		private static final SyntacticType test_8977_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8977_sub = parse("({{any, any}, {int, int}} | {{any, any}, (int | any)})");
		@Test public void test_8977() { testValid(test_8977_sup,test_8977_sub); }

		private static final SyntacticType test_8978_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8978_sub = parse("(((int & any) | {any}) | {(any | any), {any, any}})");
		@Test public void test_8978() { testValid(test_8978_sup,test_8978_sub); }

		private static final SyntacticType test_8979_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8979_sub = parse("({(any | int), (any & any)} | {(int & any), {int, any}})");
		@Test public void test_8979() { testValid(test_8979_sup,test_8979_sub); }

		private static final SyntacticType test_8980_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8980_sub = parse("(((int & int) | (any | any)) | {(any | int), (any | any)})");
		@Test public void test_8980() { testValid(test_8980_sup,test_8980_sub); }

		private static final SyntacticType test_8981_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8981_sub = parse("({{any, any}, (int | int)} | {(any & any), (any | int)})");
		@Test public void test_8981() { testValid(test_8981_sup,test_8981_sub); }

		private static final SyntacticType test_8982_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8982_sub = parse("({(int & any), {any, int}} | {{int, int}, (int | int)})");
		@Test public void test_8982() { testValid(test_8982_sup,test_8982_sub); }

		private static final SyntacticType test_8983_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8983_sub = parse("({(int & any), {any, int}} | {(int & int), (any | int)})");
		@Test public void test_8983() { testValid(test_8983_sup,test_8983_sub); }

		private static final SyntacticType test_8984_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8984_sub = parse("({(int & any)} | ((int | any) | !int))");
		@Test public void test_8984() { testValid(test_8984_sup,test_8984_sub); }

		private static final SyntacticType test_8985_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8985_sub = parse("(((any & int) | (int | any)) | ((any | int) | {int, any}))");
		@Test public void test_8985() { testValid(test_8985_sup,test_8985_sub); }

		private static final SyntacticType test_8986_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8986_sub = parse("(({any, int} & !int) | ({int, int} | {int, int}))");
		@Test public void test_8986() { testValid(test_8986_sup,test_8986_sub); }

		private static final SyntacticType test_8987_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8987_sub = parse("(((any | any) | (int | any)) | ({int, any} | (int | any)))");
		@Test public void test_8987() { testValid(test_8987_sup,test_8987_sub); }

		private static final SyntacticType test_8988_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8988_sub = parse("(({any, any} & {any, any}) | ((any | any) | (int | int)))");
		@Test public void test_8988() { testValid(test_8988_sup,test_8988_sub); }

		private static final SyntacticType test_8989_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8989_sub = parse("({(int & int), (any | int)} | ({int, any} | (int | int)))");
		@Test public void test_8989() { testValid(test_8989_sup,test_8989_sub); }

		private static final SyntacticType test_8990_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8990_sub = parse("(((int & any) | {any, any}) | ({any, int} | (any & int)))");
		@Test public void test_8990() { testValid(test_8990_sup,test_8990_sub); }

		private static final SyntacticType test_8991_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8991_sub = parse("(({any, int} | (int | any)) | ({any, int} | (any & int)))");
		@Test public void test_8991() { testValid(test_8991_sup,test_8991_sub); }

		private static final SyntacticType test_8992_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8992_sub = parse("(({int} & {int, any}) | ((int & any) | {int}))");
		@Test public void test_8992() { testValid(test_8992_sup,test_8992_sub); }

		private static final SyntacticType test_8993_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8993_sub = parse("({(any | any), (int | any)} | ((any & int) | {any, any}))");
		@Test public void test_8993() { testValid(test_8993_sup,test_8993_sub); }

		private static final SyntacticType test_8994_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8994_sub = parse("(({int} & (any & any)) | ({any, any} & any))");
		@Test public void test_8994() { testValid(test_8994_sup,test_8994_sub); }

		private static final SyntacticType test_8995_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8995_sub = parse("(((int | any) & (any & int)) | ((any | any) & {any, any}))");
		@Test public void test_8995() { testValid(test_8995_sup,test_8995_sub); }

		private static final SyntacticType test_8996_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8996_sub = parse("(((int | any) & (int & any)) | ((int | any) & {any, int}))");
		@Test public void test_8996() { testValid(test_8996_sup,test_8996_sub); }

		private static final SyntacticType test_8997_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8997_sub = parse("({(int & int), {any, int}} | ((any & int) & (int | any)))");
		@Test public void test_8997() { testValid(test_8997_sup,test_8997_sub); }

		private static final SyntacticType test_8998_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8998_sub = parse("({(any & int), {int, any}} | ({int, any} & (int | int)))");
		@Test public void test_8998() { testValid(test_8998_sup,test_8998_sub); }

		private static final SyntacticType test_8999_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_8999_sub = parse("(({int, int} | {int}) | ((any | int) & (int & any)))");
		@Test public void test_8999() { testValid(test_8999_sup,test_8999_sub); }

	}
	public static class Part_9 {
		private static final SyntacticType test_9000_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9000_sub = parse("({{any, any}, (any | int)} | ((int & any) & (int & any)))");
		@Test public void test_9000() { testValid(test_9000_sup,test_9000_sub); }

		private static final SyntacticType test_9001_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9001_sub = parse("({{any, int}, any} | ((any | int) & (int & int)))");
		@Test public void test_9001() { testValid(test_9001_sup,test_9001_sub); }

		private static final SyntacticType test_9002_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9002_sub = parse("({{any, any}, (any | any)} | ((any | int) & {any}))");
		@Test public void test_9002() { testValid(test_9002_sup,test_9002_sub); }

		private static final SyntacticType test_9003_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9003_sub = parse("(((int & any) & {int, any}) | (int & {int}))");
		@Test public void test_9003() { testValid(test_9003_sup,test_9003_sub); }

		private static final SyntacticType test_9004_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9004_sub = parse("({{any, any}, (int & any)} | ((int & any) & {int, any}))");
		@Test public void test_9004() { testValid(test_9004_sup,test_9004_sub); }

		private static final SyntacticType test_9005_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9005_sub = parse("(({int, int} & (any & any)) | ((int & any) & (any | int)))");
		@Test public void test_9005() { testValid(test_9005_sup,test_9005_sub); }

		private static final SyntacticType test_9006_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9006_sub = parse("(((int & any) & (any & int)) | ((int | int) & (int & int)))");
		@Test public void test_9006() { testValid(test_9006_sup,test_9006_sub); }

		private static final SyntacticType test_9007_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9007_sub = parse("(((any & any) | (any & int)) | ((int | any) & (any & any)))");
		@Test public void test_9007() { testValid(test_9007_sup,test_9007_sub); }

		private static final SyntacticType test_9008_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9008_sub = parse("({(int | int), (any & int)} | ((int | any) & (any & int)))");
		@Test public void test_9008() { testValid(test_9008_sup,test_9008_sub); }

		private static final SyntacticType test_9009_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9009_sub = parse("(((int & any) | {any, any}) | ({int, any} & (int & int)))");
		@Test public void test_9009() { testValid(test_9009_sup,test_9009_sub); }

		private static final SyntacticType test_9010_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9010_sub = parse("({(any | any), (int & any)} | {(any | int), (any | int)})");
		@Test public void test_9010() { testValid(test_9010_sup,test_9010_sub); }

		private static final SyntacticType test_9011_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9011_sub = parse("({{any, int}, (any | any)} | {(any | any), (any & any)})");
		@Test public void test_9011() { testValid(test_9011_sup,test_9011_sub); }

		private static final SyntacticType test_9012_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9012_sub = parse("({(int | int), {any, int}} | {(any | any), (int & any)})");
		@Test public void test_9012() { testValid(test_9012_sup,test_9012_sub); }

		private static final SyntacticType test_9013_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9013_sub = parse("(((int | any) & {int, int}) | {(int & any), (int & int)})");
		@Test public void test_9013() { testValid(test_9013_sup,test_9013_sub); }

		private static final SyntacticType test_9014_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9014_sub = parse("({(any & any), {int, any}} | {(any & int), (int | int)})");
		@Test public void test_9014() { testValid(test_9014_sup,test_9014_sub); }

		private static final SyntacticType test_9015_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9015_sub = parse("((!int | (any & int)) | {(int | any), (int | int)})");
		@Test public void test_9015() { testValid(test_9015_sup,test_9015_sub); }

		private static final SyntacticType test_9016_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9016_sub = parse("({!int, (any & int)} | {(any | int), (int | int)})");
		@Test public void test_9016() { testValid(test_9016_sup,test_9016_sub); }

		private static final SyntacticType test_9017_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9017_sub = parse("({(int & any), {any, any}} | {(any & int), (int | int)})");
		@Test public void test_9017() { testValid(test_9017_sup,test_9017_sub); }

		private static final SyntacticType test_9018_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9018_sub = parse("((any & (any | int)) | {(any | int), (any & int)})");
		@Test public void test_9018() { testValid(test_9018_sup,test_9018_sub); }

		private static final SyntacticType test_9019_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9019_sub = parse("(((any | any) | any) | ((any | int) | !any))");
		@Test public void test_9019() { testValid(test_9019_sup,test_9019_sub); }

		private static final SyntacticType test_9020_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9020_sub = parse("({(int & int), (any & any)} | ((any | any) | {int, any}))");
		@Test public void test_9020() { testValid(test_9020_sup,test_9020_sub); }

		private static final SyntacticType test_9021_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9021_sub = parse("(((any | any) & any) | ((int | any) | {any}))");
		@Test public void test_9021() { testValid(test_9021_sup,test_9021_sub); }

		private static final SyntacticType test_9022_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9022_sub = parse("(({any} | (int | any)) | ((int & any) | {any, int}))");
		@Test public void test_9022() { testValid(test_9022_sup,test_9022_sub); }

		private static final SyntacticType test_9023_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9023_sub = parse("(((int & int) | {any}) | ((any | int) | {int, int}))");
		@Test public void test_9023() { testValid(test_9023_sup,test_9023_sub); }

		private static final SyntacticType test_9024_sup = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		private static final SyntacticType test_9024_sub = parse("(((any & int) | (int | any)) | ({int} | (int | any)))");
		@Test public void test_9024() { testValid(test_9024_sup,test_9024_sub); }

	}
}
